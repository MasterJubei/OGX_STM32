UsbCore.h:137:25:virtual uint8_t USBDeviceConfig::Init(uint8_t, uint8_t, bool)	16	static
UsbCore.h:141:25:virtual uint8_t USBDeviceConfig::ConfigureDevice(uint8_t, uint8_t, bool)	16	static
UsbCore.h:145:25:virtual uint8_t USBDeviceConfig::Release()	16	static
UsbCore.h:149:25:virtual uint8_t USBDeviceConfig::Poll()	16	static
UsbCore.h:153:25:virtual uint8_t USBDeviceConfig::GetAddress()	16	static
UsbCore.h:157:22:virtual void USBDeviceConfig::ResetHubPort(uint8_t)	16	static
UsbCore.h:161:22:virtual bool USBDeviceConfig::VIDPIDOK(uint16_t, uint16_t)	16	static
UsbCore.h:165:22:virtual bool USBDeviceConfig::DEVCLASSOK(uint8_t)	16	static
UsbCore.h:169:22:virtual bool USBDeviceConfig::DEVSUBCLASSOK(uint8_t)	16	static
UsbCore.h:226:22:AddressPool& USB::GetAddressPool()	16	static
UsbCore.h:230:17:uint8_t USB::RegisterDeviceClass(USBDeviceConfig*)	24	static
parsetools.h:36:9:MultiValueBuffer::MultiValueBuffer()	16	static
parsetools.h:47:9:MultiByteValueParser::MultiByteValueParser()	16	static
parsetools.h:54:14:void MultiByteValueParser::Initialize(MultiValueBuffer*)	16	static
parsetools.h:69:9:ByteSkipper::ByteSkipper()	16	static
parsetools.h:72:14:void ByteSkipper::Initialize(MultiValueBuffer*)	16	static
parsetools.h:77:14:bool ByteSkipper::Skip(uint8_t**, uint16_t*, uint16_t)	24	static
confdescparser.h:35:22:virtual void UsbConfigXtracter::EndpointXtract(uint8_t, uint8_t, uint8_t, uint8_t, const USB_ENDPOINT_DESCRIPTOR*)	16	static
XBOXONE.h:99:25:virtual uint8_t XBOXONE::GetAddress()	16	static
XBOXONE.h:107:22:virtual bool XBOXONE::isReady()	16	static
XBOXONE.h:125:22:virtual bool XBOXONE::VIDPIDOK(uint16_t, uint16_t)	16	static
UsbCore.h:134:7:constexpr USBDeviceConfig::USBDeviceConfig()	16	static
confdescparser.h:30:7:constexpr UsbConfigXtracter::UsbConfigXtracter()	16	static
XBOXONE.cpp:27:1:XBOXONE::XBOXONE(USB*)	24	static
XBOXONE.cpp:46:9:virtual uint8_t XBOXONE::Init(uint8_t, uint8_t, bool)	144	static
XBOXONE.cpp:239:6:virtual void XBOXONE::EndpointXtract(uint8_t, uint8_t, uint8_t, uint8_t, const USB_ENDPOINT_DESCRIPTOR*)	24	static
XBOXONE.cpp:265:6:void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR*)	16	static
XBOXONE.cpp:286:9:virtual uint8_t XBOXONE::Release()	16	static
XBOXONE.cpp:300:9:virtual uint8_t XBOXONE::Poll()	40	static
XBOXONE.cpp:330:6:void XBOXONE::readReport()	24	static
XBOXONE.cpp:380:10:uint16_t XBOXONE::getButtonPress(ButtonEnum)	16	static
XBOXONE.cpp:388:6:bool XBOXONE::getButtonClick(ButtonEnum)	24	static
XBOXONE.cpp:408:9:int16_t XBOXONE::getAnalogHat(AnalogHatEnum)	16	static
XBOXONE.cpp:413:9:uint8_t XBOXONE::XboxCommand(uint8_t*, uint16_t)	48	static
XBOXONE.cpp:424:6:void XBOXONE::onInit()	32	static
XBOXONE.cpp:450:6:void XBOXONE::setRumbleOff()	32	static
XBOXONE.cpp:472:6:void XBOXONE::setRumbleOn(uint8_t, uint8_t, uint8_t, uint8_t)	32	static
printhex.h:76:25:void D_PrintHex(T, int) [with T = unsigned char]	16	static
UsbCore.h:205:7:constexpr USBReadParser::USBReadParser()	16	static
confdescparser.h:79:1:ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter*) [with unsigned char CLASS_ID = 0; unsigned char SUBCLASS_ID = 0; unsigned char PROTOCOL_ID = 0; unsigned char MASK = 0]	16	static
confdescparser.h:91:6:void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(uint16_t, const uint8_t*, const uint16_t&) [with unsigned char CLASS_ID = 0; unsigned char SUBCLASS_ID = 0; unsigned char PROTOCOL_ID = 0; unsigned char MASK = 0]	32	static
confdescparser.h:103:6:bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t**, uint16_t*) [with unsigned char CLASS_ID = 0; unsigned char SUBCLASS_ID = 0; unsigned char PROTOCOL_ID = 0; unsigned char MASK = 0]	56	static
