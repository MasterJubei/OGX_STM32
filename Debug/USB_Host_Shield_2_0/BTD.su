UsbCore.h:137:25:virtual uint8_t USBDeviceConfig::Init(uint8_t, uint8_t, bool)	16	static
UsbCore.h:141:25:virtual uint8_t USBDeviceConfig::ConfigureDevice(uint8_t, uint8_t, bool)	16	static
UsbCore.h:145:25:virtual uint8_t USBDeviceConfig::Release()	16	static
UsbCore.h:149:25:virtual uint8_t USBDeviceConfig::Poll()	16	static
UsbCore.h:153:25:virtual uint8_t USBDeviceConfig::GetAddress()	16	static
UsbCore.h:157:22:virtual void USBDeviceConfig::ResetHubPort(uint8_t)	16	static
UsbCore.h:161:22:virtual bool USBDeviceConfig::VIDPIDOK(uint16_t, uint16_t)	16	static
UsbCore.h:165:22:virtual bool USBDeviceConfig::DEVCLASSOK(uint8_t)	16	static
UsbCore.h:169:22:virtual bool USBDeviceConfig::DEVSUBCLASSOK(uint8_t)	16	static
UsbCore.h:226:22:AddressPool& USB::GetAddressPool()	16	static
UsbCore.h:230:17:uint8_t USB::RegisterDeviceClass(USBDeviceConfig*)	24	static
parsetools.h:36:9:MultiValueBuffer::MultiValueBuffer()	16	static
parsetools.h:47:9:MultiByteValueParser::MultiByteValueParser()	16	static
parsetools.h:54:14:void MultiByteValueParser::Initialize(MultiValueBuffer*)	16	static
parsetools.h:69:9:ByteSkipper::ByteSkipper()	16	static
parsetools.h:72:14:void ByteSkipper::Initialize(MultiValueBuffer*)	16	static
parsetools.h:77:14:bool ByteSkipper::Skip(uint8_t**, uint16_t*, uint16_t)	24	static
confdescparser.h:35:22:virtual void UsbConfigXtracter::EndpointXtract(uint8_t, uint8_t, uint8_t, uint8_t, const USB_ENDPOINT_DESCRIPTOR*)	16	static
UsbCore.h:134:7:constexpr USBDeviceConfig::USBDeviceConfig()	16	static
confdescparser.h:30:7:constexpr UsbConfigXtracter::UsbConfigXtracter()	16	static
EEPROM.h:39:3:EERef::EERef(int)	16	static
EEPROM.h:43:11:uint8_t EERef::operator*() const	16	static
EEPROM.h:47:3:EERef::operator uint8_t() const	16	static
EEPROM.h:57:10:EERef& EERef::operator=(uint8_t)	16	static
EEPROM.h:201:11:uint8_t EEPROMClass::read(int)	24	static
EEPROM.h:205:8:void EEPROMClass::write(int, uint8_t)	32	static
BTD.h:262:25:virtual uint8_t BTD::GetAddress()	16	static
BTD.h:270:22:virtual bool BTD::isReady()	16	static
BTD.h:279:22:virtual bool BTD::DEVCLASSOK(uint8_t)	16	static
BTD.h:290:22:virtual bool BTD::VIDPIDOK(uint16_t, uint16_t)	16	static
BTD.cpp:27:1:BTD::BTD(USB*)	24	static
BTD.cpp:50:9:virtual uint8_t BTD::ConfigureDevice(uint8_t, uint8_t, bool)	72	static
BTD.cpp:136:9:virtual uint8_t BTD::Init(uint8_t, uint8_t, bool)	96	static
BTD.cpp:302:6:void BTD::Initialize()	24	static
BTD.cpp:330:6:virtual void BTD::EndpointXtract(uint8_t, uint8_t, uint8_t, uint8_t, const USB_ENDPOINT_DESCRIPTOR*)	24	static
BTD.cpp:360:6:void BTD::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR*)	16	static
BTD.cpp:379:9:virtual uint8_t BTD::Release()	16	static
BTD.cpp:385:9:virtual uint8_t BTD::Poll()	16	static
BTD.cpp:397:6:void BTD::disconnect()	24	static
BTD.cpp:403:6:void BTD::HCI_event_task()	56	static
BTD.cpp:810:6:void BTD::HCI_task()	32	static
BTD.cpp:1158:6:void BTD::ACL_event_task()	40	static
BTD.cpp:1185:6:void BTD::HCI_Command(uint8_t*, uint16_t)	56	static
BTD.cpp:1190:6:void BTD::hci_reset()	16	static
BTD.cpp:1199:6:void BTD::hci_write_scan_enable()	16	static
BTD.cpp:1212:6:void BTD::hci_write_scan_disable()	16	static
BTD.cpp:1221:6:void BTD::hci_read_bdaddr()	16	static
BTD.cpp:1230:6:void BTD::hci_read_local_version_information()	16	static
BTD.cpp:1239:6:void BTD::hci_read_local_extended_features(uint8_t)	16	static
BTD.cpp:1249:6:void BTD::hci_accept_connection()	16	static
BTD.cpp:1265:6:void BTD::hci_remote_name()	16	static
BTD.cpp:1284:6:void BTD::hci_write_local_name(const char*)	32	static
BTD.cpp:1296:6:void BTD::hci_set_event_mask()	16	static
BTD.cpp:1314:6:void BTD::hci_write_simple_pairing_mode(bool)	16	static
BTD.cpp:1323:6:void BTD::hci_inquiry()	16	static
BTD.cpp:1337:6:void BTD::hci_inquiry_cancel()	16	static
BTD.cpp:1345:6:void BTD::hci_connect()	16	static
BTD.cpp:1349:6:void BTD::hci_connect(uint8_t*)	16	static
BTD.cpp:1371:6:void BTD::hci_pin_code_request_reply()	32	static
BTD.cpp:1407:6:void BTD::hci_pin_code_negative_request_reply()	16	static
BTD.cpp:1421:6:void BTD::hci_link_key_request_reply()	16	static
BTD.cpp:1453:6:void BTD::hci_link_key_request_negative_reply()	16	static
BTD.cpp:1467:6:void BTD::hci_io_capability_request_reply()	16	static
BTD.cpp:1484:6:void BTD::hci_user_confirmation_request_reply()	16	static
BTD.cpp:1498:6:void BTD::hci_authentication_request()	16	static
BTD.cpp:1508:6:void BTD::hci_disconnect(uint16_t)	16	static
BTD.cpp:1520:6:void BTD::hci_write_class_of_device()	16	static
BTD.cpp:1556:6:void BTD::L2CAP_Command(uint16_t, uint8_t*, uint8_t, uint8_t, uint8_t)	56	dynamic
BTD.cpp:1584:6:void BTD::l2cap_connection_request(uint16_t, uint8_t, uint8_t*, uint16_t)	32	static
BTD.cpp:1597:6:void BTD::l2cap_connection_response(uint16_t, uint8_t, uint8_t*, uint8_t*, uint8_t)	32	static
BTD.cpp:1614:6:void BTD::l2cap_config_request(uint16_t, uint8_t, uint8_t*)	32	static
BTD.cpp:1631:6:void BTD::l2cap_config_response(uint16_t, uint8_t, uint8_t*)	32	static
BTD.cpp:1650:6:void BTD::l2cap_disconnection_request(uint16_t, uint8_t, uint8_t*, uint8_t*)	32	static
BTD.cpp:1663:6:void BTD::l2cap_disconnection_response(uint16_t, uint8_t, uint8_t*, uint8_t*)	32	static
BTD.cpp:1676:6:void BTD::l2cap_information_response(uint16_t, uint8_t, uint8_t, uint8_t)	24	static
BTD.cpp:1694:6:void BTD::setBdaddr(uint8_t*)	64	static
BTD.cpp:1707:6:void BTD::setMoveBdaddr(uint8_t*)	64	static
printhex.h:76:25:void D_PrintHex(T, int) [with T = unsigned char]	16	static
UsbCore.h:205:7:constexpr USBReadParser::USBReadParser()	16	static
confdescparser.h:79:1:ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter*) [with unsigned char CLASS_ID = 255; unsigned char SUBCLASS_ID = 1; unsigned char PROTOCOL_ID = 1; unsigned char MASK = 7]	16	static
confdescparser.h:79:1:ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter*) [with unsigned char CLASS_ID = 224; unsigned char SUBCLASS_ID = 1; unsigned char PROTOCOL_ID = 1; unsigned char MASK = 7]	16	static
printhex.h:33:6:void PrintHex(T, int) [with T = unsigned char]	24	static
confdescparser.h:91:6:void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(uint16_t, const uint8_t*, const uint16_t&) [with unsigned char CLASS_ID = 224; unsigned char SUBCLASS_ID = 1; unsigned char PROTOCOL_ID = 1; unsigned char MASK = 7]	32	static
confdescparser.h:91:6:void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(uint16_t, const uint8_t*, const uint16_t&) [with unsigned char CLASS_ID = 255; unsigned char SUBCLASS_ID = 1; unsigned char PROTOCOL_ID = 1; unsigned char MASK = 7]	32	static
confdescparser.h:103:6:bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t**, uint16_t*) [with unsigned char CLASS_ID = 224; unsigned char SUBCLASS_ID = 1; unsigned char PROTOCOL_ID = 1; unsigned char MASK = 7]	56	static
confdescparser.h:103:6:bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t**, uint16_t*) [with unsigned char CLASS_ID = 255; unsigned char SUBCLASS_ID = 1; unsigned char PROTOCOL_ID = 1; unsigned char MASK = 7]	56	static
