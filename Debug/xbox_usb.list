
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3c0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  0800f584  0800f584  0001f584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8e0  0800f8e0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f8e0  0800f8e0  0001f8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8e8  0800f8e8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f8e8  0800f8e8  0001f8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8f0  0800f8f0  0001f8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800f8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  200001dc  0800fad0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f54  0800fad0  00020f54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e2dd  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bf9  00000000  00000000  0006e4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b80  00000000  00000000  000750e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a40  00000000  00000000  00076c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba12  00000000  00000000  000786a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021ff9  00000000  00000000  000a40ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaa75  00000000  00000000  000c60b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b0b28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000791c  00000000  00000000  001b0b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001dc 	.word	0x200001dc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800f56c 	.word	0x0800f56c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001e0 	.word	0x200001e0
 8000200:	0800f56c 	.word	0x0800f56c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96e 	b.w	8000508 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468c      	mov	ip, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8083 	bne.w	800035a <__udivmoddi4+0x116>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d947      	bls.n	80002ea <__udivmoddi4+0xa6>
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	b142      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 8000260:	f1c2 0020 	rsb	r0, r2, #32
 8000264:	fa24 f000 	lsr.w	r0, r4, r0
 8000268:	4091      	lsls	r1, r2
 800026a:	4097      	lsls	r7, r2
 800026c:	ea40 0c01 	orr.w	ip, r0, r1
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbbc f6f8 	udiv	r6, ip, r8
 800027c:	fa1f fe87 	uxth.w	lr, r7
 8000280:	fb08 c116 	mls	r1, r8, r6, ip
 8000284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000288:	fb06 f10e 	mul.w	r1, r6, lr
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 8119 	bcs.w	80004cc <__udivmoddi4+0x288>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8116 	bls.w	80004cc <__udivmoddi4+0x288>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	443b      	add	r3, r7
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b8:	45a6      	cmp	lr, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	193c      	adds	r4, r7, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8105 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 80002c6:	45a6      	cmp	lr, r4
 80002c8:	f240 8102 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d4:	eba4 040e 	sub.w	r4, r4, lr
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xaa>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f282 	clz	r2, r2
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d150      	bne.n	8000398 <__udivmoddi4+0x154>
 80002f6:	1bcb      	subs	r3, r1, r7
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	fa1f f887 	uxth.w	r8, r7
 8000300:	2601      	movs	r6, #1
 8000302:	fbb3 fcfe 	udiv	ip, r3, lr
 8000306:	0c21      	lsrs	r1, r4, #16
 8000308:	fb0e 331c 	mls	r3, lr, ip, r3
 800030c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000310:	fb08 f30c 	mul.w	r3, r8, ip
 8000314:	428b      	cmp	r3, r1
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000318:	1879      	adds	r1, r7, r1
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0xe2>
 8000320:	428b      	cmp	r3, r1
 8000322:	f200 80e9 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 8000326:	4684      	mov	ip, r0
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1110 	mls	r1, lr, r0, r1
 8000334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x10c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x10a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80d9 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e7bf      	b.n	80002da <__udivmoddi4+0x96>
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x12e>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80b1 	beq.w	80004c6 <__udivmoddi4+0x282>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x1cc>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0x140>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80b8 	bhi.w	80004f4 <__udivmoddi4+0x2b0>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0103 	sbc.w	r1, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	468c      	mov	ip, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0a8      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000392:	e9c5 4c00 	strd	r4, ip, [r5]
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000398:	f1c2 0320 	rsb	r3, r2, #32
 800039c:	fa20 f603 	lsr.w	r6, r0, r3
 80003a0:	4097      	lsls	r7, r2
 80003a2:	fa01 f002 	lsl.w	r0, r1, r2
 80003a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003aa:	40d9      	lsrs	r1, r3
 80003ac:	4330      	orrs	r0, r6
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b4:	fa1f f887 	uxth.w	r8, r7
 80003b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb06 f108 	mul.w	r1, r6, r8
 80003c4:	4299      	cmp	r1, r3
 80003c6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x19c>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d2:	f080 808d 	bcs.w	80004f0 <__udivmoddi4+0x2ac>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 808a 	bls.w	80004f0 <__udivmoddi4+0x2ac>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b281      	uxth	r1, r0
 80003e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f0:	fb00 f308 	mul.w	r3, r0, r8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x1c4>
 80003f8:	1879      	adds	r1, r7, r1
 80003fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fe:	d273      	bcs.n	80004e8 <__udivmoddi4+0x2a4>
 8000400:	428b      	cmp	r3, r1
 8000402:	d971      	bls.n	80004e8 <__udivmoddi4+0x2a4>
 8000404:	3802      	subs	r0, #2
 8000406:	4439      	add	r1, r7
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040e:	e778      	b.n	8000302 <__udivmoddi4+0xbe>
 8000410:	f1c6 0c20 	rsb	ip, r6, #32
 8000414:	fa03 f406 	lsl.w	r4, r3, r6
 8000418:	fa22 f30c 	lsr.w	r3, r2, ip
 800041c:	431c      	orrs	r4, r3
 800041e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042a:	fa21 f10c 	lsr.w	r1, r1, ip
 800042e:	431f      	orrs	r7, r3
 8000430:	0c3b      	lsrs	r3, r7, #16
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fa1f f884 	uxth.w	r8, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000442:	fb09 fa08 	mul.w	sl, r9, r8
 8000446:	458a      	cmp	sl, r1
 8000448:	fa02 f206 	lsl.w	r2, r2, r6
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x220>
 8000452:	1861      	adds	r1, r4, r1
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d248      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 800045a:	458a      	cmp	sl, r1
 800045c:	d946      	bls.n	80004ec <__udivmoddi4+0x2a8>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4421      	add	r1, r4
 8000464:	eba1 010a 	sub.w	r1, r1, sl
 8000468:	b2bf      	uxth	r7, r7
 800046a:	fbb1 f0fe 	udiv	r0, r1, lr
 800046e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000472:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45b8      	cmp	r8, r7
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x24a>
 800047e:	19e7      	adds	r7, r4, r7
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295
 8000484:	d22e      	bcs.n	80004e4 <__udivmoddi4+0x2a0>
 8000486:	45b8      	cmp	r8, r7
 8000488:	d92c      	bls.n	80004e4 <__udivmoddi4+0x2a0>
 800048a:	3802      	subs	r0, #2
 800048c:	4427      	add	r7, r4
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba7 0708 	sub.w	r7, r7, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454f      	cmp	r7, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	4649      	mov	r1, r9
 80004a0:	d31a      	bcc.n	80004d8 <__udivmoddi4+0x294>
 80004a2:	d017      	beq.n	80004d4 <__udivmoddi4+0x290>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x27a>
 80004a6:	ebb3 020e 	subs.w	r2, r3, lr
 80004aa:	eb67 0701 	sbc.w	r7, r7, r1
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	40f2      	lsrs	r2, r6
 80004b4:	ea4c 0202 	orr.w	r2, ip, r2
 80004b8:	40f7      	lsrs	r7, r6
 80004ba:	e9c5 2700 	strd	r2, r7, [r5]
 80004be:	2600      	movs	r6, #0
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e70b      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fd      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d2e5      	bcs.n	80004a4 <__udivmoddi4+0x260>
 80004d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004dc:	eb69 0104 	sbc.w	r1, r9, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7df      	b.n	80004a4 <__udivmoddi4+0x260>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e7d2      	b.n	800048e <__udivmoddi4+0x24a>
 80004e8:	4660      	mov	r0, ip
 80004ea:	e78d      	b.n	8000408 <__udivmoddi4+0x1c4>
 80004ec:	4681      	mov	r9, r0
 80004ee:	e7b9      	b.n	8000464 <__udivmoddi4+0x220>
 80004f0:	4666      	mov	r6, ip
 80004f2:	e775      	b.n	80003e0 <__udivmoddi4+0x19c>
 80004f4:	4630      	mov	r0, r6
 80004f6:	e74a      	b.n	800038e <__udivmoddi4+0x14a>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	4439      	add	r1, r7
 80004fe:	e713      	b.n	8000328 <__udivmoddi4+0xe4>
 8000500:	3802      	subs	r0, #2
 8000502:	443c      	add	r4, r7
 8000504:	e724      	b.n	8000350 <__udivmoddi4+0x10c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d101      	bne.n	8000520 <_ZN5Print5writeEPKc+0x14>
 800051c:	2300      	movs	r3, #0
 800051e:	e00d      	b.n	800053c <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3304      	adds	r3, #4
 8000526:	681c      	ldr	r4, [r3, #0]
 8000528:	6838      	ldr	r0, [r7, #0]
 800052a:	f7ff fe6b 	bl	8000204 <strlen>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	6839      	ldr	r1, [r7, #0]
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	47a0      	blx	r4
 8000538:	4603      	mov	r3, r0
 800053a:	bf00      	nop
    }
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}

08000544 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	607a      	str	r2, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00e      	beq.n	8000586 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	1c59      	adds	r1, r3, #1
 8000572:	60b9      	str	r1, [r7, #8]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4619      	mov	r1, r3
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	4790      	blx	r2
 800057c:	4602      	mov	r2, r0
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	4413      	add	r3, r2
 8000582:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000584:	e7e6      	b.n	8000554 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000586:	697b      	ldr	r3, [r7, #20]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f805 	bl	80005ac <_ZN5Print5printEPKc>
 80005a2:	4603      	mov	r3, r0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  return write(str);
 80005b6:	6839      	ldr	r1, [r7, #0]
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ffa7 	bl	800050c <_ZN5Print5writeEPKc>
 80005be:	4603      	mov	r3, r0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	78fa      	ldrb	r2, [r7, #3]
 80005dc:	4611      	mov	r1, r2
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	4798      	blx	r3
 80005e2:	4603      	mov	r3, r0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	68b9      	ldr	r1, [r7, #8]
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f000 f805 	bl	800060c <_ZN5Print5printEli>
 8000602:	4603      	mov	r3, r0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d109      	bne.n	8000632 <_ZN5Print5printEli+0x26>
    return write(n);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	68ba      	ldr	r2, [r7, #8]
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	4611      	mov	r1, r2
 800062a:	68f8      	ldr	r0, [r7, #12]
 800062c:	4798      	blx	r3
 800062e:	4603      	mov	r3, r0
 8000630:	e029      	b.n	8000686 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0a      	cmp	r3, #10
 8000636:	d11d      	bne.n	8000674 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	2b00      	cmp	r3, #0
 800063c:	da12      	bge.n	8000664 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800063e:	212d      	movs	r1, #45	; 0x2d
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffc1 	bl	80005c8 <_ZN5Print5printEc>
 8000646:	4603      	mov	r3, r0
 8000648:	617b      	str	r3, [r7, #20]
      n = -n;
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	425b      	negs	r3, r3
 800064e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	220a      	movs	r2, #10
 8000654:	4619      	mov	r1, r3
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f000 f819 	bl	800068e <_ZN5Print11printNumberEmh>
 800065c:	4602      	mov	r2, r0
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	4413      	add	r3, r2
 8000662:	e010      	b.n	8000686 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	220a      	movs	r2, #10
 8000668:	4619      	mov	r1, r3
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f000 f80f 	bl	800068e <_ZN5Print11printNumberEmh>
 8000670:	4603      	mov	r3, r0
 8000672:	e008      	b.n	8000686 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	4619      	mov	r1, r3
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f000 f806 	bl	800068e <_ZN5Print11printNumberEmh>
 8000682:	4603      	mov	r3, r0
 8000684:	bf00      	nop
  }
}
 8000686:	4618      	mov	r0, r3
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b090      	sub	sp, #64	; 0x40
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	4613      	mov	r3, r2
 800069a:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	3320      	adds	r3, #32
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80006a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d801      	bhi.n	80006b4 <_ZN5Print11printNumberEmh+0x26>
 80006b0:	230a      	movs	r3, #10
 80006b2:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c0:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80006c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	79f9      	ldrb	r1, [r7, #7]
 80006cc:	fb11 f303 	smulbb	r3, r1, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80006d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006dc:	2b09      	cmp	r3, #9
 80006de:	d804      	bhi.n	80006ea <_ZN5Print11printNumberEmh+0x5c>
 80006e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e4:	3330      	adds	r3, #48	; 0x30
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	e003      	b.n	80006f2 <_ZN5Print11printNumberEmh+0x64>
 80006ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006ee:	3337      	adds	r3, #55	; 0x37
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006f4:	3a01      	subs	r2, #1
 80006f6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80006f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006fa:	7013      	strb	r3, [r2, #0]
  } while(n);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d000      	beq.n	8000704 <_ZN5Print11printNumberEmh+0x76>
  do {
 8000702:	e7d7      	b.n	80006b4 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000704:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f7ff ff00 	bl	800050c <_ZN5Print5writeEPKc>
 800070c:	4603      	mov	r3, r0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3740      	adds	r7, #64	; 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	3304      	adds	r3, #4
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1cf9      	adds	r1, r7, #3
 800072c:	2201      	movs	r2, #1
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	4798      	blx	r3
 8000732:	4603      	mov	r3, r0
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	6918      	ldr	r0, [r3, #16]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b29a      	uxth	r2, r3
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	6979      	ldr	r1, [r7, #20]
 800075a:	f004 fed8 	bl	800550e <HAL_UART_Transmit>
	return size;
 800075e:	687b      	ldr	r3, [r7, #4]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6918      	ldr	r0, [r3, #16]
 8000774:	f107 010f 	add.w	r1, r7, #15
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	2201      	movs	r2, #1
 800077e:	f004 ff58 	bl	8005632 <HAL_UART_Receive>
	return data;
 8000782:	7bfb      	ldrb	r3, [r7, #15]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	return -1;
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	return -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <_ZN5PrintC1Ev+0x24>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	0800f6b8 	.word	0x0800f6b8

080007f8 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffe4 	bl	80007d0 <_ZN5PrintC1Ev>
 8000808:	4a05      	ldr	r2, [pc, #20]	; (8000820 <_ZN6StreamC1Ev+0x28>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	0800f730 	.word	0x0800f730

08000824 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ffe1 	bl	80007f8 <_ZN6StreamC1Ev>
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	611a      	str	r2, [r3, #16]
	};
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	0800f6c8 	.word	0x0800f6c8

08000850 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	4903      	ldr	r1, [pc, #12]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <_ZN2P910SetDirReadEv+0x28>)
 800086a:	f001 faf3 	bl	8001e54 <HAL_GPIO_Init>
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001f8 	.word	0x200001f8
 8000878:	40020800 	.word	0x40020800

0800087c <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
 8000880:	2201      	movs	r2, #1
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <_ZN3P103SetEv+0x14>)
 8000886:	f001 fc91 	bl	80021ac <HAL_GPIO_WritePin>
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40020400 	.word	0x40020400

08000894 <_ZN3P105ClearEv>:
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
 8000898:	2200      	movs	r2, #0
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <_ZN3P105ClearEv+0x14>)
 800089e:	f001 fc85 	bl	80021ac <HAL_GPIO_WritePin>
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40020400 	.word	0x40020400

080008ac <_ZN3P1011SetDirWriteEv>:
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008b2:	2240      	movs	r2, #64	; 0x40
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008c4:	2203      	movs	r2, #3
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	4902      	ldr	r1, [pc, #8]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <_ZN3P1011SetDirWriteEv+0x2c>)
 80008cc:	f001 fac2 	bl	8001e54 <HAL_GPIO_Init>
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000020c 	.word	0x2000020c
 80008d8:	40020400 	.word	0x40020400

080008dc <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2201      	movs	r2, #1
 80008ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2206      	movs	r2, #6
 80008f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d004      	beq.n	8000920 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ffde 	bl	80008dc <_ZN3BTD11pairWithHIDEv>
        };
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d002      	beq.n	800093e <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	4798      	blx	r3
                OnInitBTHID();
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	331c      	adds	r3, #28
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	4798      	blx	r3
        };
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 8000952:	b480      	push	{r7}
 8000954:	b085      	sub	sp, #20
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	460b      	mov	r3, r1
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	72fb      	strb	r3, [r7, #11]
                return;
 8000960:	bf00      	nop
        }
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	4a05      	ldr	r2, [pc, #20]	; (800098c <_ZN9PS4ParserC1Ev+0x20>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	601a      	str	r2, [r3, #0]
                Reset();
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f00c ffa0 	bl	800d8c0 <_ZN9PS4Parser5ResetEv>
        };
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	0800f724 	.word	0x0800f724

08000990 <_ZN9PS4Parser10isTouchingEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns true if the specific finger is touching the touchpad.
         */
        bool isTouching(uint8_t finger = 0, uint8_t xyId = 0) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
 800099c:	4613      	mov	r3, r2
 800099e:	70bb      	strb	r3, [r7, #2]
                return !(ps4Data.xy[xyId].finger[finger].touching); // The bit is cleared when a finger is touching the touchpad
 80009a0:	78ba      	ldrb	r2, [r7, #2]
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	0098      	lsls	r0, r3, #2
 80009a8:	4613      	mov	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	4413      	add	r3, r2
 80009ae:	4403      	add	r3, r0
 80009b0:	440b      	add	r3, r1
 80009b2:	3320      	adds	r3, #32
 80009b4:	799b      	ldrb	r3, [r3, #6]
 80009b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	f083 0301 	eor.w	r3, r3, #1
 80009c0:	b2db      	uxtb	r3, r3
        };
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 f81c 	bl	8000a18 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	2b20      	cmp	r3, #32
 80009f8:	d105      	bne.n	8000a06 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	2100      	movs	r1, #0
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 f80a 	bl	8000a18 <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8000a04:	e004      	b.n	8000a10 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8000a06:	2200      	movs	r2, #0
 8000a08:	21ff      	movs	r1, #255	; 0xff
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f804 	bl	8000a18 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]
 8000a24:	4613      	mov	r3, r2
 8000a26:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	78fa      	ldrb	r2, [r7, #3]
 8000a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	78ba      	ldrb	r2, [r7, #2]
 8000a34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4608      	mov	r0, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	70fb      	strb	r3, [r7, #3]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	70bb      	strb	r3, [r7, #2]
 8000a62:	4613      	mov	r3, r2
 8000a64:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	78fa      	ldrb	r2, [r7, #3]
 8000a6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	78ba      	ldrb	r2, [r7, #2]
 8000a72:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	787a      	ldrb	r2, [r7, #1]
 8000a7a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2201      	movs	r2, #1
 8000a82:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	141b      	asrs	r3, r3, #16
 8000aa0:	b2d9      	uxtb	r1, r3
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	121b      	asrs	r3, r3, #8
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ffcd 	bl	8000a4c <_ZN9PS4Parser6setLedEhhh>
        };
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68b9      	ldr	r1, [r7, #8]
 8000ad4:	f00b fd00 	bl	800c4d8 <_ZN5BTHIDC1EP3BTDbPKc>
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3378      	adds	r3, #120	; 0x78
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff45 	bl	800096c <_ZN9PS4ParserC1Ev>
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3378      	adds	r3, #120	; 0x78
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00c fee4 	bl	800d8c0 <_ZN9PS4Parser5ResetEv>
        };
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	0800f6e8 	.word	0x0800f6e8
 8000b08:	0800f718 	.word	0x0800f718

08000b0c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	3378      	adds	r3, #120	; 0x78
 8000b36:	7af9      	ldrb	r1, [r7, #11]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f00c fdfb 	bl	800d736 <_ZN9PS4Parser5ParseEhPh>
        };
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3378      	adds	r3, #120	; 0x78
 8000b54:	4618      	mov	r0, r3
 8000b56:	f00c feb3 	bl	800d8c0 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 f855 	bl	8000c0a <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d105      	bne.n	8000b74 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3378      	adds	r3, #120	; 0x78
 8000b6c:	21ff      	movs	r1, #255	; 0xff
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff8f 	bl	8000a92 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3378      	adds	r3, #120	; 0x78
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f00c fe99 	bl	800d8c0 <_ZN9PS4Parser5ResetEv>
        };
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b096      	sub	sp, #88	; 0x58
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	224f      	movs	r2, #79	; 0x4f
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f00e fc81 	bl	800f4b0 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000bae:	2352      	movs	r3, #82	; 0x52
 8000bb0:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000bb2:	2311      	movs	r3, #17
 8000bb4:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000bba:	23ff      	movs	r3, #255	; 0xff
 8000bbc:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	785b      	ldrb	r3, [r3, #1]
 8000bc2:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	789b      	ldrb	r3, [r3, #2]
 8000bce:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	78db      	ldrb	r3, [r3, #3]
 8000bd4:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	795b      	ldrb	r3, [r3, #5]
 8000be0:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	799b      	ldrb	r3, [r3, #6]
 8000be6:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2200      	movs	r2, #0
 8000bec:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	224f      	movs	r2, #79	; 0x4f
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f81a 	bl	8000c30 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000bfc:	bf00      	nop
 8000bfe:	3758      	adds	r7, #88	; 0x58
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000c04:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000c08:	e7c5      	b.n	8000b96 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000c0a <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000c12:	2343      	movs	r3, #67	; 0x43
 8000c14:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000c16:	2302      	movs	r3, #2
 8000c18:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	2202      	movs	r2, #2
 8000c20:	4619      	mov	r1, r3
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f804 	bl	8000c30 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6898      	ldr	r0, [r3, #8]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	8999      	ldrh	r1, [r3, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	7d9b      	ldrb	r3, [r3, #22]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	7dd2      	ldrb	r2, [r2, #23]
 8000c4e:	79fc      	ldrb	r4, [r7, #7]
 8000c50:	9201      	str	r2, [sp, #4]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	4623      	mov	r3, r4
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f00a fcd6 	bl	800b608 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd90      	pop	{r4, r7, pc}

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6a:	f000 ff2f 	bl	8001acc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6e:	f000 faad 	bl	80011cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c72:	f000 fbeb 	bl	800144c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c76:	f000 fbbb 	bl	80013f0 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000c7a:	f000 fb7d 	bl	8001378 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000c7e:	f007 fdf9 	bl	8008874 <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000c82:	f000 fb51 	bl	8001328 <_ZL13MX_TIM14_Initv>
  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8000c86:	4ac0      	ldr	r2, [pc, #768]	; (8000f88 <main+0x324>)
 8000c88:	4bc0      	ldr	r3, [pc, #768]	; (8000f8c <main+0x328>)
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	2358      	movs	r3, #88	; 0x58
 8000c90:	461a      	mov	r2, r3
 8000c92:	f00e fbff 	bl	800f494 <memcpy>
  UART_Handle = huart2;
 8000c96:	4abe      	ldr	r2, [pc, #760]	; (8000f90 <main+0x32c>)
 8000c98:	4bbe      	ldr	r3, [pc, #760]	; (8000f94 <main+0x330>)
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	2344      	movs	r3, #68	; 0x44
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	f00e fbf7 	bl	800f494 <memcpy>

  struct gameHID_t gameHID;
  gameHID.JoyX = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	70bb      	strb	r3, [r7, #2]
  gameHID.JoyY = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	70fb      	strb	r3, [r7, #3]
  gameHID.Joy2X = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	713b      	strb	r3, [r7, #4]
  gameHID.Joy2Y = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	717b      	strb	r3, [r7, #5]
  gameHID.Joy_LT = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	703b      	strb	r3, [r7, #0]
  gameHID.Joy_RT = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	707b      	strb	r3, [r7, #1]

  uint8_t LeftHatX_val;
  uint8_t LeftHatY_val;
  uint8_t RightHatX_val;
  uint8_t RightHatY_val;
  uint32_t cpu_freq = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  uint8_t rumble_once = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	75fb      	strb	r3, [r7, #23]

  uint16_t timer_val = 0 ;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	81fb      	strh	r3, [r7, #14]
  uint16_t timer_val2 = 0 ;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	81bb      	strh	r3, [r7, #12]

  HAL_TIM_Base_Start(&htim14);
 8000cce:	48b2      	ldr	r0, [pc, #712]	; (8000f98 <main+0x334>)
 8000cd0:	f004 fac8 	bl	8005264 <HAL_TIM_Base_Start>
//  uint8_t L2_val;
//  uint8_t R2_val;
  Serial.print(F("\r\nCPU Frequency is: "));
 8000cd4:	49b1      	ldr	r1, [pc, #708]	; (8000f9c <main+0x338>)
 8000cd6:	48b2      	ldr	r0, [pc, #712]	; (8000fa0 <main+0x33c>)
 8000cd8:	f7ff fc5a 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000cdc:	f002 fd1c 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4ab0      	ldr	r2, [pc, #704]	; (8000fa4 <main+0x340>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	0c9b      	lsrs	r3, r3, #18
 8000cea:	613b      	str	r3, [r7, #16]
  Serial.print((int)cpu_freq);
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	220a      	movs	r2, #10
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	48ab      	ldr	r0, [pc, #684]	; (8000fa0 <main+0x33c>)
 8000cf4:	f7ff fc7a 	bl	80005ec <_ZN5Print5printEii>
  Serial.print("MHz");
 8000cf8:	49ab      	ldr	r1, [pc, #684]	; (8000fa8 <main+0x344>)
 8000cfa:	48a9      	ldr	r0, [pc, #676]	; (8000fa0 <main+0x33c>)
 8000cfc:	f7ff fc56 	bl	80005ac <_ZN5Print5printEPKc>

  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000d00:	4ba5      	ldr	r3, [pc, #660]	; (8000f98 <main+0x334>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	81fb      	strh	r3, [r7, #14]
  HAL_Delay(50);
 8000d08:	2032      	movs	r0, #50	; 0x32
 8000d0a:	f000 ff51 	bl	8001bb0 <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000d0e:	4ba2      	ldr	r3, [pc, #648]	; (8000f98 <main+0x334>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	89fb      	ldrh	r3, [r7, #14]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	81bb      	strh	r3, [r7, #12]
  Serial.print("\r\nTime Elapsed is: ");
 8000d1c:	49a3      	ldr	r1, [pc, #652]	; (8000fac <main+0x348>)
 8000d1e:	48a0      	ldr	r0, [pc, #640]	; (8000fa0 <main+0x33c>)
 8000d20:	f7ff fc44 	bl	80005ac <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2);
 8000d24:	89bb      	ldrh	r3, [r7, #12]
 8000d26:	220a      	movs	r2, #10
 8000d28:	4619      	mov	r1, r3
 8000d2a:	489d      	ldr	r0, [pc, #628]	; (8000fa0 <main+0x33c>)
 8000d2c:	f7ff fc5e 	bl	80005ec <_ZN5Print5printEii>


  if (Usb.Init() == -1) {
 8000d30:	489f      	ldr	r0, [pc, #636]	; (8000fb0 <main+0x34c>)
 8000d32:	f000 fbea 	bl	800150a <_ZN8MAX3421eI3P102P9E4InitEv>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3c:	bf0c      	ite	eq
 8000d3e:	2301      	moveq	r3, #1
 8000d40:	2300      	movne	r3, #0
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d004      	beq.n	8000d52 <main+0xee>
  		Serial.print(F("\r\nOSC did not start"));
 8000d48:	499a      	ldr	r1, [pc, #616]	; (8000fb4 <main+0x350>)
 8000d4a:	4895      	ldr	r0, [pc, #596]	; (8000fa0 <main+0x33c>)
 8000d4c:	f7ff fc20 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 8000d50:	e7fe      	b.n	8000d50 <main+0xec>
  	}
  	Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 8000d52:	4999      	ldr	r1, [pc, #612]	; (8000fb8 <main+0x354>)
 8000d54:	4892      	ldr	r0, [pc, #584]	; (8000fa0 <main+0x33c>)
 8000d56:	f7ff fc1b 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Usb.Task();
 8000d5a:	4895      	ldr	r0, [pc, #596]	; (8000fb0 <main+0x34c>)
 8000d5c:	f00d fb0c 	bl	800e378 <_ZN3USB4TaskEv>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8000d60:	463b      	mov	r3, r7
 8000d62:	2208      	movs	r2, #8
 8000d64:	4619      	mov	r1, r3
 8000d66:	4895      	ldr	r0, [pc, #596]	; (8000fbc <main+0x358>)
 8000d68:	f006 fb94 	bl	8007494 <USBD_HID_SendReport>

		if (PS4.connected()) {
 8000d6c:	4894      	ldr	r0, [pc, #592]	; (8000fc0 <main+0x35c>)
 8000d6e:	f7ff fecd 	bl	8000b0c <_ZN5PS4BT9connectedEv>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 81f3 	beq.w	8001160 <main+0x4fc>
			if(!rumble_once) {
 8000d7a:	7dfb      	ldrb	r3, [r7, #23]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d108      	bne.n	8000d92 <main+0x12e>
				PS4.setRumbleOn(RumbleLow);
 8000d80:	2120      	movs	r1, #32
 8000d82:	4890      	ldr	r0, [pc, #576]	; (8000fc4 <main+0x360>)
 8000d84:	f7ff fe30 	bl	80009e8 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
				PS4.setRumbleOff();
 8000d88:	488e      	ldr	r0, [pc, #568]	; (8000fc4 <main+0x360>)
 8000d8a:	f7ff fe20 	bl	80009ce <_ZN9PS4Parser12setRumbleOffEv>
				rumble_once = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	75fb      	strb	r3, [r7, #23]
			}

			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8000d92:	2100      	movs	r1, #0
 8000d94:	488b      	ldr	r0, [pc, #556]	; (8000fc4 <main+0x360>)
 8000d96:	f00c fcbe 	bl	800d716 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	72fb      	strb	r3, [r7, #11]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4888      	ldr	r0, [pc, #544]	; (8000fc4 <main+0x360>)
 8000da2:	f00c fcb8 	bl	800d716 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000da6:	4603      	mov	r3, r0
 8000da8:	72bb      	strb	r3, [r7, #10]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 8000daa:	2102      	movs	r1, #2
 8000dac:	4885      	ldr	r0, [pc, #532]	; (8000fc4 <main+0x360>)
 8000dae:	f00c fcb2 	bl	800d716 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000db2:	4603      	mov	r3, r0
 8000db4:	727b      	strb	r3, [r7, #9]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 8000db6:	2103      	movs	r1, #3
 8000db8:	4882      	ldr	r0, [pc, #520]	; (8000fc4 <main+0x360>)
 8000dba:	f00c fcac 	bl	800d716 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	723b      	strb	r3, [r7, #8]

			if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117 || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8000dc2:	7afb      	ldrb	r3, [r7, #11]
 8000dc4:	2b89      	cmp	r3, #137	; 0x89
 8000dc6:	d814      	bhi.n	8000df2 <main+0x18e>
 8000dc8:	7afb      	ldrb	r3, [r7, #11]
 8000dca:	2b74      	cmp	r3, #116	; 0x74
 8000dcc:	d911      	bls.n	8000df2 <main+0x18e>
 8000dce:	7abb      	ldrb	r3, [r7, #10]
 8000dd0:	2b89      	cmp	r3, #137	; 0x89
 8000dd2:	d80e      	bhi.n	8000df2 <main+0x18e>
 8000dd4:	7abb      	ldrb	r3, [r7, #10]
 8000dd6:	2b74      	cmp	r3, #116	; 0x74
 8000dd8:	d90b      	bls.n	8000df2 <main+0x18e>
 8000dda:	7a7b      	ldrb	r3, [r7, #9]
 8000ddc:	2b89      	cmp	r3, #137	; 0x89
 8000dde:	d808      	bhi.n	8000df2 <main+0x18e>
 8000de0:	7a7b      	ldrb	r3, [r7, #9]
 8000de2:	2b74      	cmp	r3, #116	; 0x74
 8000de4:	d905      	bls.n	8000df2 <main+0x18e>
 8000de6:	7a3b      	ldrb	r3, [r7, #8]
 8000de8:	2b89      	cmp	r3, #137	; 0x89
 8000dea:	d802      	bhi.n	8000df2 <main+0x18e>
 8000dec:	7a3b      	ldrb	r3, [r7, #8]
 8000dee:	2b74      	cmp	r3, #116	; 0x74
 8000df0:	d824      	bhi.n	8000e3c <main+0x1d8>
				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8000df2:	2100      	movs	r1, #0
 8000df4:	4873      	ldr	r0, [pc, #460]	; (8000fc4 <main+0x360>)
 8000df6:	f00c fc8e 	bl	800d716 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	3b80      	subs	r3, #128	; 0x80
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	70bb      	strb	r3, [r7, #2]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8000e04:	2101      	movs	r1, #1
 8000e06:	486f      	ldr	r0, [pc, #444]	; (8000fc4 <main+0x360>)
 8000e08:	f00c fc85 	bl	800d716 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	3b80      	subs	r3, #128	; 0x80
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	70fb      	strb	r3, [r7, #3]
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8000e16:	2102      	movs	r1, #2
 8000e18:	486a      	ldr	r0, [pc, #424]	; (8000fc4 <main+0x360>)
 8000e1a:	f00c fc7c 	bl	800d716 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	3b80      	subs	r3, #128	; 0x80
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	713b      	strb	r3, [r7, #4]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8000e28:	2103      	movs	r1, #3
 8000e2a:	4866      	ldr	r0, [pc, #408]	; (8000fc4 <main+0x360>)
 8000e2c:	f00c fc73 	bl	800d716 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e30:	4603      	mov	r3, r0
 8000e32:	3b80      	subs	r3, #128	; 0x80
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	717b      	strb	r3, [r7, #5]
 8000e3a:	e007      	b.n	8000e4c <main+0x1e8>
				//Serial.print(F("\tRightHatX: "));
				//Serial.print(PS4.getAnalogHat(RightHatX));
				//Serial.print(F("\tRightHatY: "));
				//Serial.print(PS4.getAnalogHat(RightHatY));
			} else {
				gameHID.JoyX = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	70bb      	strb	r3, [r7, #2]
				gameHID.JoyY = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	70fb      	strb	r3, [r7, #3]
				gameHID.Joy2X = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	713b      	strb	r3, [r7, #4]
				gameHID.Joy2Y = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	717b      	strb	r3, [r7, #5]
			}

			//if (PS4.getAnalogButton(L2) || PS4.getAnalogButton(R2)) { // These are the only analog buttons on the PS4 controller
				gameHID.Joy_LT = PS4.getAnalogButton(L2) - 128;
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	485d      	ldr	r0, [pc, #372]	; (8000fc4 <main+0x360>)
 8000e50:	f00c fc48 	bl	800d6e4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e54:	4603      	mov	r3, r0
 8000e56:	3b80      	subs	r3, #128	; 0x80
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	703b      	strb	r3, [r7, #0]
				gameHID.Joy_RT = PS4.getAnalogButton(R2) - 128;
 8000e5e:	2109      	movs	r1, #9
 8000e60:	4858      	ldr	r0, [pc, #352]	; (8000fc4 <main+0x360>)
 8000e62:	f00c fc3f 	bl	800d6e4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e66:	4603      	mov	r3, r0
 8000e68:	3b80      	subs	r3, #128	; 0x80
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	707b      	strb	r3, [r7, #1]
				//Serial.print(F("\r\nL2: "));
				//Serial.print(PS4.getAnalogButton(L2));
				//Serial.print(F("\tR2: "));
				//Serial.print(PS4.getAnalogButton(R2));
			//}
			if (PS4.getAnalogButton(L2) != oldL2Value || PS4.getAnalogButton(R2) != oldR2Value) {
 8000e70:	2108      	movs	r1, #8
 8000e72:	4854      	ldr	r0, [pc, #336]	; (8000fc4 <main+0x360>)
 8000e74:	f00c fc36 	bl	800d6e4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <main+0x364>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d108      	bne.n	8000e96 <main+0x232>
 8000e84:	2109      	movs	r1, #9
 8000e86:	484f      	ldr	r0, [pc, #316]	; (8000fc4 <main+0x360>)
 8000e88:	f00c fc2c 	bl	800d6e4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b4e      	ldr	r3, [pc, #312]	; (8000fcc <main+0x368>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	429a      	cmp	r2, r3
				// Only write value if it's different
				//PS4.setRumbleOn(PS4.getAnalogButton(L2), PS4.getAnalogButton(R2));
			}

			oldL2Value = PS4.getAnalogButton(L2);
 8000e96:	2108      	movs	r1, #8
 8000e98:	484a      	ldr	r0, [pc, #296]	; (8000fc4 <main+0x360>)
 8000e9a:	f00c fc23 	bl	800d6e4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <main+0x364>)
 8000ea4:	701a      	strb	r2, [r3, #0]
			oldR2Value = PS4.getAnalogButton(R2);
 8000ea6:	2109      	movs	r1, #9
 8000ea8:	4846      	ldr	r0, [pc, #280]	; (8000fc4 <main+0x360>)
 8000eaa:	f00c fc1b 	bl	800d6e4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <main+0x368>)
 8000eb4:	701a      	strb	r2, [r3, #0]
//			Serial.print(F("\r\nL2: "));
//			Serial.print(gameHID.Joy_LT);

			if (PS4.getButtonClick(PS)) {
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	4842      	ldr	r0, [pc, #264]	; (8000fc4 <main+0x360>)
 8000eba:	f00c fbd3 	bl	800d664 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <main+0x26a>
				gameHID.ps4ButtonsTag.button_ps = 1;
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	71bb      	strb	r3, [r7, #6]
 8000ecc:	e141      	b.n	8001152 <main+0x4ee>
				//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
				//Serial.print(F("\r\nPS"));
				//PS4.disconnect();
			} else {
				if (PS4.getButtonPress(TRIANGLE)) {
 8000ece:	210c      	movs	r1, #12
 8000ed0:	483c      	ldr	r0, [pc, #240]	; (8000fc4 <main+0x360>)
 8000ed2:	f00c fb9f 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <main+0x282>
					gameHID.ps4ButtonsTag.button_triangle = 1;
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	e003      	b.n	8000eee <main+0x28a>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nTraingle"));
					//PS4.setRumbleOn(RumbleLow);
				} else {
					gameHID.ps4ButtonsTag.button_triangle = 0;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f36f 0300 	bfc	r3, #0, #1
 8000eec:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(CIRCLE)) {
 8000eee:	210d      	movs	r1, #13
 8000ef0:	4834      	ldr	r0, [pc, #208]	; (8000fc4 <main+0x360>)
 8000ef2:	f00c fb8f 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d004      	beq.n	8000f06 <main+0x2a2>
					gameHID.ps4ButtonsTag.button_circle = 1;
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f02:	71bb      	strb	r3, [r7, #6]
 8000f04:	e003      	b.n	8000f0e <main+0x2aa>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCircle"));
					//PS4.setRumbleOn(RumbleHigh);
				} else {
					gameHID.ps4ButtonsTag.button_circle = 0;
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	f36f 13c7 	bfc	r3, #7, #1
 8000f0c:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(CROSS)) {
 8000f0e:	210e      	movs	r1, #14
 8000f10:	482c      	ldr	r0, [pc, #176]	; (8000fc4 <main+0x360>)
 8000f12:	f00c fb7f 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d004      	beq.n	8000f26 <main+0x2c2>
					gameHID.ps4ButtonsTag.button_cross = 1;
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f22:	71bb      	strb	r3, [r7, #6]
 8000f24:	e003      	b.n	8000f2e <main+0x2ca>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCross"));
					//PS4.setLedFlash(10, 10); // Set it to blink rapidly
				} else {
					gameHID.ps4ButtonsTag.button_cross = 0;;
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	f36f 1386 	bfc	r3, #6, #1
 8000f2c:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(SQUARE)) {
 8000f2e:	210f      	movs	r1, #15
 8000f30:	4824      	ldr	r0, [pc, #144]	; (8000fc4 <main+0x360>)
 8000f32:	f00c fb6f 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d004      	beq.n	8000f46 <main+0x2e2>
					gameHID.ps4ButtonsTag.button_square = 1;
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	e003      	b.n	8000f4e <main+0x2ea>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nSquare"));
					//PS4.setLedFlash(0, 0); // Turn off blinking
				} else {
					gameHID.ps4ButtonsTag.button_square = 0;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f36f 0341 	bfc	r3, #1, #1
 8000f4c:	71fb      	strb	r3, [r7, #7]
				}

				if (PS4.getButtonPress(UP)) {
 8000f4e:	2100      	movs	r1, #0
 8000f50:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <main+0x360>)
 8000f52:	f00c fb5f 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d004      	beq.n	8000f66 <main+0x302>
					gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	e003      	b.n	8000f6e <main+0x30a>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nUp"));
					//PS4.setLed(Red);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f36f 0382 	bfc	r3, #2, #1
 8000f6c:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(RIGHT)) {
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <main+0x360>)
 8000f72:	f00c fb4f 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d029      	beq.n	8000fd0 <main+0x36c>
					gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	e028      	b.n	8000fd8 <main+0x374>
 8000f86:	bf00      	nop
 8000f88:	20000304 	.word	0x20000304
 8000f8c:	20000220 	.word	0x20000220
 8000f90:	2000035c 	.word	0x2000035c
 8000f94:	20000278 	.word	0x20000278
 8000f98:	200002bc 	.word	0x200002bc
 8000f9c:	0800f584 	.word	0x0800f584
 8000fa0:	200003a0 	.word	0x200003a0
 8000fa4:	431bde83 	.word	0x431bde83
 8000fa8:	0800f59c 	.word	0x0800f59c
 8000fac:	0800f5a0 	.word	0x0800f5a0
 8000fb0:	200003b4 	.word	0x200003b4
 8000fb4:	0800f5b4 	.word	0x0800f5b4
 8000fb8:	0800f5c8 	.word	0x0800f5c8
 8000fbc:	20000678 	.word	0x20000678
 8000fc0:	20000588 	.word	0x20000588
 8000fc4:	20000600 	.word	0x20000600
 8000fc8:	20000652 	.word	0x20000652
 8000fcc:	20000653 	.word	0x20000653
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nRight"));
					//PS4.setLed(Blue);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f36f 03c3 	bfc	r3, #3, #1
 8000fd6:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(DOWN)) {
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4873      	ldr	r0, [pc, #460]	; (80011a8 <main+0x544>)
 8000fdc:	f00c fb1a 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d004      	beq.n	8000ff0 <main+0x38c>
					gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f043 0320 	orr.w	r3, r3, #32
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	e003      	b.n	8000ff8 <main+0x394>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nDown"));
					//PS4.setLed(Yellow);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_down = 0;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f36f 1345 	bfc	r3, #5, #1
 8000ff6:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(LEFT)) {
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	486b      	ldr	r0, [pc, #428]	; (80011a8 <main+0x544>)
 8000ffc:	f00c fb0a 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <main+0x3ac>
					gameHID.ps4ButtonsTag.button_dpad_left = 1;
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	e003      	b.n	8001018 <main+0x3b4>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nLeft"));
					//PS4.setLed(Green);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f36f 1304 	bfc	r3, #4, #1
 8001016:	71fb      	strb	r3, [r7, #7]
				}

				if (PS4.getButtonPress(L1)) {
 8001018:	210a      	movs	r1, #10
 800101a:	4863      	ldr	r0, [pc, #396]	; (80011a8 <main+0x544>)
 800101c:	f00c fafa 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d004      	beq.n	8001030 <main+0x3cc>
					gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	71bb      	strb	r3, [r7, #6]
 800102e:	e003      	b.n	8001038 <main+0x3d4>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL1"));
				} else {
					gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	f36f 1345 	bfc	r3, #5, #1
 8001036:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(L3)) {
 8001038:	2106      	movs	r1, #6
 800103a:	485b      	ldr	r0, [pc, #364]	; (80011a8 <main+0x544>)
 800103c:	f00c faea 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d004      	beq.n	8001050 <main+0x3ec>
					gameHID.ps4ButtonsTag.button_left_thumb = 1;
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	71fb      	strb	r3, [r7, #7]
 800104e:	e003      	b.n	8001058 <main+0x3f4>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL3"));
				} else {
					gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f36f 1386 	bfc	r3, #6, #1
 8001056:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(R1)) {
 8001058:	210b      	movs	r1, #11
 800105a:	4853      	ldr	r0, [pc, #332]	; (80011a8 <main+0x544>)
 800105c:	f00c fada 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d004      	beq.n	8001070 <main+0x40c>
					gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	71bb      	strb	r3, [r7, #6]
 800106e:	e003      	b.n	8001078 <main+0x414>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR1"));
				} else {
					gameHID.ps4ButtonsTag.button_right_trigger = 0;
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	f36f 1304 	bfc	r3, #4, #1
 8001076:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(R3)) {
 8001078:	2107      	movs	r1, #7
 800107a:	484b      	ldr	r0, [pc, #300]	; (80011a8 <main+0x544>)
 800107c:	f00c faca 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <main+0x42c>
					gameHID.ps4ButtonsTag.button_right_thumb = 1;
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	e003      	b.n	8001098 <main+0x434>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR3"));
				} else {
					gameHID.ps4ButtonsTag.button_right_thumb = 0;
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f36f 13c7 	bfc	r3, #7, #1
 8001096:	71fb      	strb	r3, [r7, #7]
				}

				if (PS4.getButtonPress(SHARE)) {
 8001098:	2104      	movs	r1, #4
 800109a:	4843      	ldr	r0, [pc, #268]	; (80011a8 <main+0x544>)
 800109c:	f00c faba 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d004      	beq.n	80010b0 <main+0x44c>
					gameHID.ps4ButtonsTag.button_share = 1;
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	71bb      	strb	r3, [r7, #6]
 80010ae:	e003      	b.n	80010b8 <main+0x454>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nShare"));
				} else {
					gameHID.ps4ButtonsTag.button_share = 0;
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	f36f 03c3 	bfc	r3, #3, #1
 80010b6:	71bb      	strb	r3, [r7, #6]
				}

				if (PS4.getButtonPress(OPTIONS)) {
 80010b8:	2105      	movs	r1, #5
 80010ba:	483b      	ldr	r0, [pc, #236]	; (80011a8 <main+0x544>)
 80010bc:	f00c faaa 	bl	800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00b      	beq.n	80010de <main+0x47a>
					gameHID.ps4ButtonsTag.button_start = 1;
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	71bb      	strb	r3, [r7, #6]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nOptions"));
					printAngle = !printAngle;
 80010ce:	4b37      	ldr	r3, [pc, #220]	; (80011ac <main+0x548>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	f083 0301 	eor.w	r3, r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b34      	ldr	r3, [pc, #208]	; (80011ac <main+0x548>)
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e003      	b.n	80010e6 <main+0x482>
				} else {
					gameHID.ps4ButtonsTag.button_start = 0;
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	f36f 0382 	bfc	r3, #2, #1
 80010e4:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonClick(TOUCHPAD)) {
 80010e6:	2111      	movs	r1, #17
 80010e8:	482f      	ldr	r0, [pc, #188]	; (80011a8 <main+0x544>)
 80010ea:	f00c fabb 	bl	800d664 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d006      	beq.n	8001102 <main+0x49e>
					//Serial.print(F("\r\nTouchpad"));
					printTouch = !printTouch;
 80010f4:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <main+0x54c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	f083 0301 	eor.w	r3, r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <main+0x54c>)
 8001100:	701a      	strb	r2, [r3, #0]
					//Serial.print(PS4.getAngle(Pitch));
					//Serial.print("\tRoll: ");
					//Serial.print(PS4.getAngle(Roll));
				}

				if (printTouch) { // Print the x, y coordinates of the touchpad
 8001102:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <main+0x54c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d023      	beq.n	8001152 <main+0x4ee>
					if (PS4.isTouching(0) || PS4.isTouching(1)) // Print newline and carriage return if any of the fingers are touching the touchpad
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	4826      	ldr	r0, [pc, #152]	; (80011a8 <main+0x544>)
 8001110:	f7ff fc3e 	bl	8000990 <_ZN9PS4Parser10isTouchingEhh>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d107      	bne.n	800112a <main+0x4c6>
 800111a:	2200      	movs	r2, #0
 800111c:	2101      	movs	r1, #1
 800111e:	4822      	ldr	r0, [pc, #136]	; (80011a8 <main+0x544>)
 8001120:	f7ff fc36 	bl	8000990 <_ZN9PS4Parser10isTouchingEhh>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <main+0x4ca>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <main+0x4cc>
 800112e:	2300      	movs	r3, #0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00e      	beq.n	8001152 <main+0x4ee>
						//Serial.print(F("\r\n"));
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 8001134:	2300      	movs	r3, #0
 8001136:	75bb      	strb	r3, [r7, #22]
 8001138:	7dbb      	ldrb	r3, [r7, #22]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d809      	bhi.n	8001152 <main+0x4ee>
						if (PS4.isTouching(i)) { // Print the position of the finger if it is touching the touchpad
 800113e:	7dbb      	ldrb	r3, [r7, #22]
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	4818      	ldr	r0, [pc, #96]	; (80011a8 <main+0x544>)
 8001146:	f7ff fc23 	bl	8000990 <_ZN9PS4Parser10isTouchingEhh>
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 800114a:	7dbb      	ldrb	r3, [r7, #22]
 800114c:	3301      	adds	r3, #1
 800114e:	75bb      	strb	r3, [r7, #22]
 8001150:	e7f2      	b.n	8001138 <main+0x4d4>
							//Serial.print(F("\t"));
						}
					}
				}
			}
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001152:	463b      	mov	r3, r7
 8001154:	2208      	movs	r2, #8
 8001156:	4619      	mov	r1, r3
 8001158:	4816      	ldr	r0, [pc, #88]	; (80011b4 <main+0x550>)
 800115a:	f006 f99b 	bl	8007494 <USBD_HID_SendReport>
 800115e:	e5fc      	b.n	8000d5a <main+0xf6>
		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001164:	4814      	ldr	r0, [pc, #80]	; (80011b8 <main+0x554>)
 8001166:	f001 f809 	bl	800217c <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	bf0c      	ite	eq
 8001170:	2301      	moveq	r3, #1
 8001172:	2300      	movne	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d011      	beq.n	800119e <main+0x53a>
		    if (!buttonPressed) {
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <main+0x558>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	f083 0301 	eor.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <main+0x532>
		    	Serial.print(F("\r\nButton Pressed"));
 8001188:	490d      	ldr	r1, [pc, #52]	; (80011c0 <main+0x55c>)
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <main+0x560>)
 800118c:	f7ff fa00 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
		        PS4.pair(); // Start paring routine if user button was just pressed
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <main+0x564>)
 8001192:	f7ff fbb8 	bl	8000906 <_ZN5BTHID4pairEv>
		    }
		    buttonPressed = true;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <main+0x558>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e5dd      	b.n	8000d5a <main+0xf6>
		} else
		    buttonPressed = false;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <main+0x558>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
  }
 80011a4:	e5d9      	b.n	8000d5a <main+0xf6>
 80011a6:	bf00      	nop
 80011a8:	20000600 	.word	0x20000600
 80011ac:	20000650 	.word	0x20000650
 80011b0:	20000651 	.word	0x20000651
 80011b4:	20000678 	.word	0x20000678
 80011b8:	40020800 	.word	0x40020800
 80011bc:	20000654 	.word	0x20000654
 80011c0:	0800f5e8 	.word	0x0800f5e8
 80011c4:	200003a0 	.word	0x200003a0
 80011c8:	20000588 	.word	0x20000588

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0ac      	sub	sp, #176	; 0xb0
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011d6:	2234      	movs	r2, #52	; 0x34
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f00e f968 	bl	800f4b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	225c      	movs	r2, #92	; 0x5c
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00e f959 	bl	800f4b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b46      	ldr	r3, [pc, #280]	; (800131c <SystemClock_Config+0x150>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a45      	ldr	r2, [pc, #276]	; (800131c <SystemClock_Config+0x150>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b43      	ldr	r3, [pc, #268]	; (800131c <SystemClock_Config+0x150>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b40      	ldr	r3, [pc, #256]	; (8001320 <SystemClock_Config+0x154>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a3f      	ldr	r2, [pc, #252]	; (8001320 <SystemClock_Config+0x154>)
 8001224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <SystemClock_Config+0x154>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001236:	2301      	movs	r3, #1
 8001238:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001242:	2302      	movs	r3, #2
 8001244:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001248:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800124c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001250:	2304      	movs	r3, #4
 8001252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001256:	23a8      	movs	r3, #168	; 0xa8
 8001258:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001262:	2307      	movs	r3, #7
 8001264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001272:	4618      	mov	r0, r3
 8001274:	f002 ff60 	bl	8004138 <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	bf14      	ite	ne
 800127e:	2301      	movne	r3, #1
 8001280:	2300      	moveq	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001288:	f000 f93a 	bl	8001500 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128c:	230f      	movs	r3, #15
 800128e:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001290:	2302      	movs	r3, #2
 8001292:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001298:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800129c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012a8:	2105      	movs	r1, #5
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 f94e 	bl	800354c <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80012c0:	f000 f91e 	bl	8001500 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80012ca:	2300      	movs	r3, #0
 80012cc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 fa54 	bl	8003780 <HAL_RCCEx_PeriphCLKConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf14      	ite	ne
 80012de:	2301      	movne	r3, #1
 80012e0:	2300      	moveq	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x120>
  {
    Error_Handler();
 80012e8:	f000 f90a 	bl	8001500 <Error_Handler>
  }
	//HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000000); // NOTE: Edited, so it increments every us
 80012ec:	f002 fa14 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <SystemClock_Config+0x158>)
 80012f4:	fba2 2303 	umull	r2, r3, r2, r3
 80012f8:	0c9b      	lsrs	r3, r3, #18
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 fd81 	bl	8001e02 <HAL_SYSTICK_Config>
	//HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() /   1680000); // NOTE: Edited, so it increments every us

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001300:	2004      	movs	r0, #4
 8001302:	f000 fd8b 	bl	8001e1c <HAL_SYSTICK_CLKSourceConfig>

	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // SysTick_IRQn interrupt configuration
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	f04f 30ff 	mov.w	r0, #4294967295
 800130e:	f000 fd4e 	bl	8001dae <HAL_NVIC_SetPriority>

}
 8001312:	bf00      	nop
 8001314:	37b0      	adds	r7, #176	; 0xb0
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000
 8001324:	431bde83 	.word	0x431bde83

08001328 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <_ZL13MX_TIM14_Initv+0x48>)
 800132e:	4a11      	ldr	r2, [pc, #68]	; (8001374 <_ZL13MX_TIM14_Initv+0x4c>)
 8001330:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 168/2 -1;
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <_ZL13MX_TIM14_Initv+0x48>)
 8001334:	2253      	movs	r2, #83	; 0x53
 8001336:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <_ZL13MX_TIM14_Initv+0x48>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <_ZL13MX_TIM14_Initv+0x48>)
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <_ZL13MX_TIM14_Initv+0x48>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <_ZL13MX_TIM14_Initv+0x48>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001352:	4807      	ldr	r0, [pc, #28]	; (8001370 <_ZL13MX_TIM14_Initv+0x48>)
 8001354:	f003 ff36 	bl	80051c4 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf14      	ite	ne
 800135e:	2301      	movne	r3, #1
 8001360:	2300      	moveq	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 8001368:	f000 f8ca 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200002bc 	.word	0x200002bc
 8001374:	40002000 	.word	0x40002000

08001378 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <_ZL12MX_SPI1_Initv+0x70>)
 800137e:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <_ZL12MX_SPI1_Initv+0x74>)
 8001380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <_ZL12MX_SPI1_Initv+0x70>)
 8001384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <_ZL12MX_SPI1_Initv+0x70>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <_ZL12MX_SPI1_Initv+0x70>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <_ZL12MX_SPI1_Initv+0x70>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <_ZL12MX_SPI1_Initv+0x70>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <_ZL12MX_SPI1_Initv+0x70>)
 80013a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <_ZL12MX_SPI1_Initv+0x70>)
 80013ac:	2218      	movs	r2, #24
 80013ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <_ZL12MX_SPI1_Initv+0x70>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <_ZL12MX_SPI1_Initv+0x70>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <_ZL12MX_SPI1_Initv+0x70>)
 80013be:	2200      	movs	r2, #0
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <_ZL12MX_SPI1_Initv+0x70>)
 80013c4:	220a      	movs	r2, #10
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013c8:	4807      	ldr	r0, [pc, #28]	; (80013e8 <_ZL12MX_SPI1_Initv+0x70>)
 80013ca:	f003 f953 	bl	8004674 <HAL_SPI_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bf14      	ite	ne
 80013d4:	2301      	movne	r3, #1
 80013d6:	2300      	moveq	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80013de:	f000 f88f 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000220 	.word	0x20000220
 80013ec:	40013000 	.word	0x40013000

080013f0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013f6:	4a14      	ldr	r2, [pc, #80]	; (8001448 <_ZL19MX_USART2_UART_Initv+0x58>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <_ZL19MX_USART2_UART_Initv+0x54>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <_ZL19MX_USART2_UART_Initv+0x54>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001428:	f004 f824 	bl	8005474 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	bf14      	ite	ne
 8001432:	2301      	movne	r3, #1
 8001434:	2300      	moveq	r3, #0
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800143c:	f000 f860 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000278 	.word	0x20000278
 8001448:	40004400 	.word	0x40004400

0800144c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <_ZL12MX_GPIO_Initv+0xa8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a22      	ldr	r2, [pc, #136]	; (80014f4 <_ZL12MX_GPIO_Initv+0xa8>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <_ZL12MX_GPIO_Initv+0xa8>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <_ZL12MX_GPIO_Initv+0xa8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <_ZL12MX_GPIO_Initv+0xa8>)
 8001488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <_ZL12MX_GPIO_Initv+0xa8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <_ZL12MX_GPIO_Initv+0xa8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <_ZL12MX_GPIO_Initv+0xa8>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <_ZL12MX_GPIO_Initv+0xa8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <_ZL12MX_GPIO_Initv+0xa8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <_ZL12MX_GPIO_Initv+0xa8>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <_ZL12MX_GPIO_Initv+0xa8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <_ZL12MX_GPIO_Initv+0xac>)
 80014da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <_ZL12MX_GPIO_Initv+0xb0>)
 80014e8:	f000 fcb4 	bl	8001e54 <HAL_GPIO_Init>

}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	; 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	10210000 	.word	0x10210000
 80014fc:	40020800 	.word	0x40020800

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>

0800150a <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 8001512:	f7ff f9cb 	bl	80008ac <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8001516:	f7ff f9b1 	bl	800087c <_ZN3P103SetEv>
        spi::init();
 800151a:	f000 f845 	bl	80015a8 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 800151e:	f7ff f997 	bl	8000850 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 8001522:	2218      	movs	r2, #24
 8001524:	2188      	movs	r1, #136	; 0x88
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f846 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f865 	bl	80015fc <_ZN8MAX3421eI3P102P9E5resetEv>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf0c      	ite	eq
 8001538:	2301      	moveq	r3, #1
 800153a:	2300      	movne	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e02b      	b.n	80015a0 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 8001548:	22c1      	movs	r2, #193	; 0xc1
 800154a:	21d8      	movs	r1, #216	; 0xd8
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f833 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 8001552:	2260      	movs	r2, #96	; 0x60
 8001554:	21d0      	movs	r1, #208	; 0xd0
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f82e 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 800155c:	2204      	movs	r2, #4
 800155e:	21e8      	movs	r1, #232	; 0xe8
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f829 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 8001566:	21e8      	movs	r1, #232	; 0xe8
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f877 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800156e:	4603      	mov	r3, r0
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf0c      	ite	eq
 8001578:	2301      	moveq	r3, #1
 800157a:	2300      	movne	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d000      	beq.n	8001584 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8001582:	e7f0      	b.n	8001566 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f88b 	bl	80016a0 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 800158a:	2220      	movs	r2, #32
 800158c:	21c8      	movs	r1, #200	; 0xc8
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f812 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8001594:	2201      	movs	r2, #1
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f80d 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
        }
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
 80015c4:	4613      	mov	r3, r2
 80015c6:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 80015c8:	f7ff f964 	bl	8000894 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 80015d6:	78bb      	ldrb	r3, [r7, #2]
 80015d8:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 80015da:	f107 010c 	add.w	r1, r7, #12
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	2202      	movs	r2, #2
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 80015e6:	f003 f8ce 	bl	8004786 <HAL_SPI_Transmit>
        SPI_SS::Set();
 80015ea:	f7ff f947 	bl	800087c <_ZN3P103SetEv>
        return;
 80015ee:	bf00      	nop
};
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000304 	.word	0x20000304

080015fc <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001608:	2220      	movs	r2, #32
 800160a:	2178      	movs	r1, #120	; 0x78
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ffd3 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 8001612:	2200      	movs	r2, #0
 8001614:	2178      	movs	r1, #120	; 0x78
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffce 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 800161c:	89fb      	ldrh	r3, [r7, #14]
 800161e:	3301      	adds	r3, #1
 8001620:	81fb      	strh	r3, [r7, #14]
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf14      	ite	ne
 8001628:	2301      	movne	r3, #1
 800162a:	2300      	moveq	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00f      	beq.n	8001652 <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 8001632:	2168      	movs	r1, #104	; 0x68
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f811 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800163a:	4603      	mov	r3, r0
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf14      	ite	ne
 8001644:	2301      	movne	r3, #1
 8001646:	2300      	moveq	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d100      	bne.n	8001650 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 800164e:	e7e5      	b.n	800161c <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8001650:	bf00      	nop
        return ( i);
 8001652:	89fb      	ldrh	r3, [r7, #14]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 8001668:	f7ff f914 	bl	8000894 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 800166c:	1cf9      	adds	r1, r7, #3
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	2201      	movs	r2, #1
 8001674:	4809      	ldr	r0, [pc, #36]	; (800169c <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001676:	f003 f886 	bl	8004786 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 800167e:	f107 010f 	add.w	r1, r7, #15
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	2201      	movs	r2, #1
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800168a:	f003 f9b8 	bl	80049fe <HAL_SPI_Receive>
        SPI_SS::Set();
 800168e:	f7ff f8f5 	bl	800087c <_ZN3P103SetEv>
        return (rv);
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000304 	.word	0x20000304

080016a0 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 80016a8:	21f8      	movs	r1, #248	; 0xf8
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffd6 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016ba:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	2bc0      	cmp	r3, #192	; 0xc0
 80016c0:	d04a      	beq.n	8001758 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 80016c2:	2bc0      	cmp	r3, #192	; 0xc0
 80016c4:	dc55      	bgt.n	8001772 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80016c6:	2b80      	cmp	r3, #128	; 0x80
 80016c8:	d006      	beq.n	80016d8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 80016ca:	2b80      	cmp	r3, #128	; 0x80
 80016cc:	dc51      	bgt.n	8001772 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d046      	beq.n	8001760 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 80016d2:	2b40      	cmp	r3, #64	; 0x40
 80016d4:	d020      	beq.n	8001718 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 80016d6:	e04c      	b.n	8001772 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80016d8:	21d8      	movs	r1, #216	; 0xd8
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffbe 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	bf0c      	ite	eq
 80016ea:	2301      	moveq	r3, #1
 80016ec:	2300      	movne	r3, #0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80016f4:	22c9      	movs	r2, #201	; 0xc9
 80016f6:	21d8      	movs	r1, #216	; 0xd8
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff5d 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80016fe:	4b1f      	ldr	r3, [pc, #124]	; (800177c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001700:	2202      	movs	r2, #2
 8001702:	701a      	strb	r2, [r3, #0]
                        break;
 8001704:	e035      	b.n	8001772 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001706:	22cb      	movs	r2, #203	; 0xcb
 8001708:	21d8      	movs	r1, #216	; 0xd8
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ff54 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001712:	2203      	movs	r2, #3
 8001714:	701a      	strb	r2, [r3, #0]
                        break;
 8001716:	e02c      	b.n	8001772 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001718:	21d8      	movs	r1, #216	; 0xd8
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ff9e 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001720:	4603      	mov	r3, r0
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001734:	22cb      	movs	r2, #203	; 0xcb
 8001736:	21d8      	movs	r1, #216	; 0xd8
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff3d 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001740:	2203      	movs	r2, #3
 8001742:	701a      	strb	r2, [r3, #0]
                        break;
 8001744:	e015      	b.n	8001772 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001746:	22c9      	movs	r2, #201	; 0xc9
 8001748:	21d8      	movs	r1, #216	; 0xd8
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ff34 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001752:	2202      	movs	r2, #2
 8001754:	701a      	strb	r2, [r3, #0]
                        break;
 8001756:	e00c      	b.n	8001772 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
                        break;
 800175e:	e008      	b.n	8001772 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8001760:	22d1      	movs	r2, #209	; 0xd1
 8001762:	21d8      	movs	r1, #216	; 0xd8
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff27 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
                        break;
 8001770:	bf00      	nop
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000655 	.word	0x20000655

08001780 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d115      	bne.n	80017bc <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001796:	4293      	cmp	r3, r2
 8001798:	d110      	bne.n	80017bc <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 800179a:	490a      	ldr	r1, [pc, #40]	; (80017c4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800179c:	480a      	ldr	r0, [pc, #40]	; (80017c8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800179e:	f7ff f841 	bl	8000824 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 80017a2:	480a      	ldr	r0, [pc, #40]	; (80017cc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80017a4:	f00c f92a 	bl	800d9fc <_ZN3USBC1Ev>
BTD Btd(&Usb);
 80017a8:	4908      	ldr	r1, [pc, #32]	; (80017cc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80017aa:	4809      	ldr	r0, [pc, #36]	; (80017d0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80017ac:	f007 ff08 	bl	80095c0 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	4906      	ldr	r1, [pc, #24]	; (80017d0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80017b6:	4808      	ldr	r0, [pc, #32]	; (80017d8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80017b8:	f7ff f980 	bl	8000abc <_ZN5PS4BTC1EP3BTDbPKc>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000278 	.word	0x20000278
 80017c8:	200003a0 	.word	0x200003a0
 80017cc:	200003b4 	.word	0x200003b4
 80017d0:	20000470 	.word	0x20000470
 80017d4:	0800f5fc 	.word	0x0800f5fc
 80017d8:	20000588 	.word	0x20000588

080017dc <_GLOBAL__sub_I_hspi1>:
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
 80017e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff ffcb 	bl	8001780 <_Z41__static_initialization_and_destruction_0ii>
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_MspInit+0x4c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <HAL_MspInit+0x4c>)
 80017fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_MspInit+0x4c>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_MspInit+0x4c>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_MspInit+0x4c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800182a:	2007      	movs	r0, #7
 800182c:	f000 fab4 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a19      	ldr	r2, [pc, #100]	; (80018c0 <HAL_SPI_MspInit+0x84>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d12b      	bne.n	80018b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_SPI_MspInit+0x88>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <HAL_SPI_MspInit+0x88>)
 8001868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_SPI_MspInit+0x88>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_SPI_MspInit+0x88>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <HAL_SPI_MspInit+0x88>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_SPI_MspInit+0x88>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001896:	23e0      	movs	r3, #224	; 0xe0
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018a6:	2305      	movs	r3, #5
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <HAL_SPI_MspInit+0x8c>)
 80018b2:	f000 facf 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	; 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40013000 	.word	0x40013000
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020000 	.word	0x40020000

080018cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <HAL_TIM_Base_MspInit+0x3c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d10d      	bne.n	80018fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_TIM_Base_MspInit+0x40>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a09      	ldr	r2, [pc, #36]	; (800190c <HAL_TIM_Base_MspInit+0x40>)
 80018e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <HAL_TIM_Base_MspInit+0x40>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40002000 	.word	0x40002000
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a19      	ldr	r2, [pc, #100]	; (8001994 <HAL_UART_MspInit+0x84>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d12b      	bne.n	800198a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <HAL_UART_MspInit+0x88>)
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800196a:	230c      	movs	r3, #12
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800197a:	2307      	movs	r3, #7
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_UART_MspInit+0x8c>)
 8001986:	f000 fa65 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40004400 	.word	0x40004400
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f000 f8c0 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <OTG_FS_IRQHandler+0x10>)
 80019fa:	f000 fd47 	bl	800248c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000b48 	.word	0x20000b48

08001a08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
	return 1;
 8001a0c:	2301      	movs	r3, #1
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_kill>:

int _kill(int pid, int sig)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a22:	f00d fd0d 	bl	800f440 <__errno>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2216      	movs	r2, #22
 8001a2a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_exit>:

void _exit (int status)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ffe7 	bl	8001a18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a4a:	e7fe      	b.n	8001a4a <_exit+0x12>

08001a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <SystemInit+0x28>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a56:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <SystemInit+0x28>)
 8001a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SystemInit+0x28>)
 8001a62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a66:	609a      	str	r2, [r3, #8]
#endif
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a7e:	e003      	b.n	8001a88 <LoopCopyDataInit>

08001a80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a86:	3104      	adds	r1, #4

08001a88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a88:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a90:	d3f6      	bcc.n	8001a80 <CopyDataInit>
  ldr  r2, =_sbss
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a94:	e002      	b.n	8001a9c <LoopFillZerobss>

08001a96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a98:	f842 3b04 	str.w	r3, [r2], #4

08001a9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001aa0:	d3f9      	bcc.n	8001a96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aa2:	f7ff ffd3 	bl	8001a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aa6:	f00d fcd1 	bl	800f44c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aaa:	f7ff f8db 	bl	8000c64 <main>
  bx  lr    
 8001aae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ab4:	0800f8f4 	.word	0x0800f8f4
  ldr  r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001abc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001ac0:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001ac4:	20000f54 	.word	0x20000f54

08001ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC_IRQHandler>
	...

08001acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_Init+0x40>)
 8001ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <HAL_Init+0x40>)
 8001ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_Init+0x40>)
 8001aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af4:	2003      	movs	r0, #3
 8001af6:	f000 f94f 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f808 	bl	8001b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b00:	f7ff fe74 	bl	80017ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023c00 	.word	0x40023c00

08001b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_InitTick+0x54>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x58>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f967 	bl	8001e02 <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00e      	b.n	8001b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b0f      	cmp	r3, #15
 8001b42:	d80a      	bhi.n	8001b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b44:	2200      	movs	r2, #0
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f000 f92f 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <HAL_InitTick+0x5c>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000674 	.word	0x20000674

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000674 	.word	0x20000674

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	; (8001c94 <__NVIC_EnableIRQ+0x38>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f7ff ff8e 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff29 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff3e 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff8e 	bl	8001cec <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5d 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff31 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa2 	bl	8001d54 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d106      	bne.n	8001e38 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001e36:	e005      	b.n	8001e44 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e3e:	f023 0304 	bic.w	r3, r3, #4
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	e165      	b.n	800213c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	f040 8154 	bne.w	8002136 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d005      	beq.n	8001ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d130      	bne.n	8001f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001edc:	2201      	movs	r2, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 0201 	and.w	r2, r3, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d017      	beq.n	8001f44 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d123      	bne.n	8001f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	220f      	movs	r2, #15
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	69b9      	ldr	r1, [r7, #24]
 8001f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0203 	and.w	r2, r3, #3
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80ae 	beq.w	8002136 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b5d      	ldr	r3, [pc, #372]	; (8002154 <HAL_GPIO_Init+0x300>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a5c      	ldr	r2, [pc, #368]	; (8002154 <HAL_GPIO_Init+0x300>)
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b5a      	ldr	r3, [pc, #360]	; (8002154 <HAL_GPIO_Init+0x300>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff6:	4a58      	ldr	r2, [pc, #352]	; (8002158 <HAL_GPIO_Init+0x304>)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4f      	ldr	r2, [pc, #316]	; (800215c <HAL_GPIO_Init+0x308>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d025      	beq.n	800206e <HAL_GPIO_Init+0x21a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4e      	ldr	r2, [pc, #312]	; (8002160 <HAL_GPIO_Init+0x30c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01f      	beq.n	800206a <HAL_GPIO_Init+0x216>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4d      	ldr	r2, [pc, #308]	; (8002164 <HAL_GPIO_Init+0x310>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d019      	beq.n	8002066 <HAL_GPIO_Init+0x212>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4c      	ldr	r2, [pc, #304]	; (8002168 <HAL_GPIO_Init+0x314>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_GPIO_Init+0x20e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4b      	ldr	r2, [pc, #300]	; (800216c <HAL_GPIO_Init+0x318>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00d      	beq.n	800205e <HAL_GPIO_Init+0x20a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <HAL_GPIO_Init+0x31c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <HAL_GPIO_Init+0x206>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a49      	ldr	r2, [pc, #292]	; (8002174 <HAL_GPIO_Init+0x320>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_GPIO_Init+0x202>
 8002052:	2306      	movs	r3, #6
 8002054:	e00c      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 8002056:	2307      	movs	r3, #7
 8002058:	e00a      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 800205a:	2305      	movs	r3, #5
 800205c:	e008      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 800205e:	2304      	movs	r3, #4
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 8002062:	2303      	movs	r3, #3
 8002064:	e004      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 8002066:	2302      	movs	r3, #2
 8002068:	e002      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 800206e:	2300      	movs	r3, #0
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f002 0203 	and.w	r2, r2, #3
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	4093      	lsls	r3, r2
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002080:	4935      	ldr	r1, [pc, #212]	; (8002158 <HAL_GPIO_Init+0x304>)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800208e:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <HAL_GPIO_Init+0x324>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020b2:	4a31      	ldr	r2, [pc, #196]	; (8002178 <HAL_GPIO_Init+0x324>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020b8:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_GPIO_Init+0x324>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020dc:	4a26      	ldr	r2, [pc, #152]	; (8002178 <HAL_GPIO_Init+0x324>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e2:	4b25      	ldr	r3, [pc, #148]	; (8002178 <HAL_GPIO_Init+0x324>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002106:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <HAL_GPIO_Init+0x324>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_GPIO_Init+0x324>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002130:	4a11      	ldr	r2, [pc, #68]	; (8002178 <HAL_GPIO_Init+0x324>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3301      	adds	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b0f      	cmp	r3, #15
 8002140:	f67f ae96 	bls.w	8001e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40013800 	.word	0x40013800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400
 8002164:	40020800 	.word	0x40020800
 8002168:	40020c00 	.word	0x40020c00
 800216c:	40021000 	.word	0x40021000
 8002170:	40021400 	.word	0x40021400
 8002174:	40021800 	.word	0x40021800
 8002178:	40013c00 	.word	0x40013c00

0800217c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e001      	b.n	800219e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
 80021b8:	4613      	mov	r3, r2
 80021ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021bc:	787b      	ldrb	r3, [r7, #1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c8:	e003      	b.n	80021d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	041a      	lsls	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	619a      	str	r2, [r3, #24]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e0:	b08f      	sub	sp, #60	; 0x3c
 80021e2:	af0a      	add	r7, sp, #40	; 0x28
 80021e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e116      	b.n	800241e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f006 fc7a 	bl	8008b04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2203      	movs	r2, #3
 8002214:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fdc9 	bl	8005dc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	687e      	ldr	r6, [r7, #4]
 800223c:	466d      	mov	r5, sp
 800223e:	f106 0410 	add.w	r4, r6, #16
 8002242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800224e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002252:	1d33      	adds	r3, r6, #4
 8002254:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002256:	6838      	ldr	r0, [r7, #0]
 8002258:	f003 fca0 	bl	8005b9c <USB_CoreInit>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0d7      	b.n	800241e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f003 fdb7 	bl	8005de8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227a:	2300      	movs	r3, #0
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	e04a      	b.n	8002316 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	333d      	adds	r3, #61	; 0x3d
 8002290:	2201      	movs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	333c      	adds	r3, #60	; 0x3c
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	b298      	uxth	r0, r3
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	3342      	adds	r3, #66	; 0x42
 80022bc:	4602      	mov	r2, r0
 80022be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	333f      	adds	r3, #63	; 0x3f
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	3344      	adds	r3, #68	; 0x44
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	3348      	adds	r3, #72	; 0x48
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3350      	adds	r3, #80	; 0x50
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	3301      	adds	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	7bfa      	ldrb	r2, [r7, #15]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	d3af      	bcc.n	8002280 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e044      	b.n	80023b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	3301      	adds	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d3b5      	bcc.n	8002326 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	687e      	ldr	r6, [r7, #4]
 80023c2:	466d      	mov	r5, sp
 80023c4:	f106 0410 	add.w	r4, r6, #16
 80023c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80023d8:	1d33      	adds	r3, r6, #4
 80023da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023dc:	6838      	ldr	r0, [r7, #0]
 80023de:	f003 fd2d 	bl	8005e3c <USB_DevInit>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e014      	b.n	800241e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	2b01      	cmp	r3, #1
 800240a:	d102      	bne.n	8002412 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f001 f879 	bl	8003504 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f004 fd68 	bl	8006eec <USB_DevDisconnect>

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002426 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_PCD_Start+0x1c>
 800243e:	2302      	movs	r3, #2
 8002440:	e020      	b.n	8002484 <HAL_PCD_Start+0x5e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	2b01      	cmp	r3, #1
 8002450:	d109      	bne.n	8002466 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002456:	2b01      	cmp	r3, #1
 8002458:	d005      	beq.n	8002466 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f003 fc9a 	bl	8005da4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f004 fd18 	bl	8006eaa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b08d      	sub	sp, #52	; 0x34
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f004 fdd6 	bl	8007054 <USB_GetMode>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 83ca 	bne.w	8002c44 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f004 fd3a 	bl	8006f2e <USB_ReadInterrupts>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 83c0 	beq.w	8002c42 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 fd31 	bl	8006f2e <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d107      	bne.n	80024e6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f002 0202 	and.w	r2, r2, #2
 80024e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f004 fd1f 	bl	8006f2e <USB_ReadInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b10      	cmp	r3, #16
 80024f8:	d161      	bne.n	80025be <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0210 	bic.w	r2, r2, #16
 8002508:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f003 020f 	and.w	r2, r3, #15
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	3304      	adds	r3, #4
 8002528:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	0c5b      	lsrs	r3, r3, #17
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	2b02      	cmp	r3, #2
 8002534:	d124      	bne.n	8002580 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d035      	beq.n	80025ae <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800254c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002550:	b29b      	uxth	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	6a38      	ldr	r0, [r7, #32]
 8002556:	f004 fb85 	bl	8006c64 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002566:	441a      	add	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002578:	441a      	add	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	619a      	str	r2, [r3, #24]
 800257e:	e016      	b.n	80025ae <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	0c5b      	lsrs	r3, r3, #17
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	2b06      	cmp	r3, #6
 800258a:	d110      	bne.n	80025ae <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002592:	2208      	movs	r2, #8
 8002594:	4619      	mov	r1, r3
 8002596:	6a38      	ldr	r0, [r7, #32]
 8002598:	f004 fb64 	bl	8006c64 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a8:	441a      	add	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0210 	orr.w	r2, r2, #16
 80025bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 fcb3 	bl	8006f2e <USB_ReadInterrupts>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025d2:	d16e      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f004 fcb9 	bl	8006f54 <USB_ReadDevAllOutEpInterrupt>
 80025e2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025e4:	e062      	b.n	80026ac <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d057      	beq.n	80026a0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f004 fcde 	bl	8006fbc <USB_ReadDevOutEPInterrupt>
 8002600:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00c      	beq.n	8002626 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002618:	461a      	mov	r2, r3
 800261a:	2301      	movs	r3, #1
 800261c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800261e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fdc5 	bl	80031b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00c      	beq.n	800264a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800263c:	461a      	mov	r2, r3
 800263e:	2308      	movs	r3, #8
 8002640:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 febf 	bl	80033c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002660:	461a      	mov	r2, r3
 8002662:	2310      	movs	r3, #16
 8002664:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267c:	461a      	mov	r2, r3
 800267e:	2320      	movs	r3, #32
 8002680:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d009      	beq.n	80026a0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002698:	461a      	mov	r2, r3
 800269a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800269e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	3301      	adds	r3, #1
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d199      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fc39 	bl	8006f2e <USB_ReadInterrupts>
 80026bc:	4603      	mov	r3, r0
 80026be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026c6:	f040 80c0 	bne.w	800284a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f004 fc5a 	bl	8006f88 <USB_ReadDevAllInEpInterrupt>
 80026d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026da:	e0b2      	b.n	8002842 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80a7 	beq.w	8002836 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 fc80 	bl	8006ff8 <USB_ReadDevInEPInterrupt>
 80026f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d057      	beq.n	80027b4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	2201      	movs	r2, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	43db      	mvns	r3, r3
 800271e:	69f9      	ldr	r1, [r7, #28]
 8002720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002724:	4013      	ands	r3, r2
 8002726:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	4413      	add	r3, r2
 8002730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002734:	461a      	mov	r2, r3
 8002736:	2301      	movs	r3, #1
 8002738:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d132      	bne.n	80027a8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3348      	adds	r3, #72	; 0x48
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4403      	add	r3, r0
 8002762:	3344      	adds	r3, #68	; 0x44
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4419      	add	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4403      	add	r3, r0
 8002776:	3348      	adds	r3, #72	; 0x48
 8002778:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	2b00      	cmp	r3, #0
 800277e:	d113      	bne.n	80027a8 <HAL_PCD_IRQHandler+0x31c>
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	3350      	adds	r3, #80	; 0x50
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d108      	bne.n	80027a8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027a0:	461a      	mov	r2, r3
 80027a2:	2101      	movs	r1, #1
 80027a4:	f004 fc88 	bl	80070b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	4619      	mov	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f006 fa29 	bl	8008c06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ca:	461a      	mov	r2, r3
 80027cc:	2308      	movs	r3, #8
 80027ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e6:	461a      	mov	r2, r3
 80027e8:	2310      	movs	r3, #16
 80027ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002802:	461a      	mov	r2, r3
 8002804:	2340      	movs	r3, #64	; 0x40
 8002806:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800281e:	461a      	mov	r2, r3
 8002820:	2302      	movs	r3, #2
 8002822:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800282e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fc30 	bl	8003096 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	3301      	adds	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	085b      	lsrs	r3, r3, #1
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	f47f af49 	bne.w	80026dc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f004 fb6d 	bl	8006f2e <USB_ReadInterrupts>
 8002854:	4603      	mov	r3, r0
 8002856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800285a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800285e:	d122      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800287a:	2b01      	cmp	r3, #1
 800287c:	d108      	bne.n	8002890 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002886:	2100      	movs	r1, #0
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f006 fbf9 	bl	8009080 <HAL_PCDEx_LPM_Callback>
 800288e:	e002      	b.n	8002896 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f006 fa2f 	bl	8008cf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 fb3f 	bl	8006f2e <USB_ReadInterrupts>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ba:	d112      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d102      	bne.n	80028d2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f006 f9eb 	bl	8008ca8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028e0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 fb21 	bl	8006f2e <USB_ReadInterrupts>
 80028ec:	4603      	mov	r3, r0
 80028ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028f6:	d121      	bne.n	800293c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002906:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d111      	bne.n	8002936 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	f003 020f 	and.w	r2, r3, #15
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800292c:	2101      	movs	r1, #1
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f006 fba6 	bl	8009080 <HAL_PCDEx_LPM_Callback>
 8002934:	e002      	b.n	800293c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f006 f9b6 	bl	8008ca8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f004 faf4 	bl	8006f2e <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002950:	f040 80c7 	bne.w	8002ae2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2110      	movs	r1, #16
 800296e:	4618      	mov	r0, r3
 8002970:	f003 fbc2 	bl	80060f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002974:	2300      	movs	r3, #0
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002978:	e056      	b.n	8002a28 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002986:	461a      	mov	r2, r3
 8002988:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800298c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	4413      	add	r3, r2
 8002996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800299e:	0151      	lsls	r1, r2, #5
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	440a      	add	r2, r1
 80029a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029ac:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029be:	0151      	lsls	r1, r2, #5
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	440a      	add	r2, r1
 80029c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029da:	461a      	mov	r2, r3
 80029dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f2:	0151      	lsls	r1, r2, #5
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	440a      	add	r2, r1
 80029f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a12:	0151      	lsls	r1, r2, #5
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	440a      	add	r2, r1
 8002a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	3301      	adds	r3, #1
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d3a3      	bcc.n	800297a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a40:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a5e:	f043 030b 	orr.w	r3, r3, #11
 8002a62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a74:	f043 030b 	orr.w	r3, r3, #11
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	e015      	b.n	8002aa8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a8e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a92:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa2:	f043 030b 	orr.w	r3, r3, #11
 8002aa6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002aba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002acc:	461a      	mov	r2, r3
 8002ace:	f004 faf3 	bl	80070b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 fa21 	bl	8006f2e <USB_ReadInterrupts>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af6:	d124      	bne.n	8002b42 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f004 fab7 	bl	8007070 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f003 fb57 	bl	80061ba <USB_GetDevSpeed>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681c      	ldr	r4, [r3, #0]
 8002b18:	f000 fdfe 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8002b1c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	4620      	mov	r0, r4
 8002b28:	f003 f89a 	bl	8005c60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f006 f892 	bl	8008c56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f004 f9f1 	bl	8006f2e <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d10a      	bne.n	8002b6c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f006 f86f 	bl	8008c3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f002 0208 	and.w	r2, r2, #8
 8002b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 f9dc 	bl	8006f2e <USB_ReadInterrupts>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b80:	d10f      	bne.n	8002ba2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f006 f8d1 	bl	8008d34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 f9c1 	bl	8006f2e <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bb6:	d10f      	bne.n	8002bd8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f006 f8a4 	bl	8008d10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f004 f9a6 	bl	8006f2e <USB_ReadInterrupts>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bec:	d10a      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f006 f8b2 	bl	8008d58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f004 f990 	bl	8006f2e <USB_ReadInterrupts>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d115      	bne.n	8002c44 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f006 f8a2 	bl	8008d74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6859      	ldr	r1, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	e000      	b.n	8002c44 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002c42:	bf00      	nop
    }
  }
}
 8002c44:	3734      	adds	r7, #52	; 0x34
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd90      	pop	{r4, r7, pc}

08002c4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_PCD_SetAddress+0x1a>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e013      	b.n	8002c8c <HAL_PCD_SetAddress+0x42>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 f8ee 	bl	8006e5e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	70fb      	strb	r3, [r7, #3]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	803b      	strh	r3, [r7, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da0f      	bge.n	8002cda <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	f003 020f 	and.w	r2, r3, #15
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	3338      	adds	r3, #56	; 0x38
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	3304      	adds	r3, #4
 8002cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	705a      	strb	r2, [r3, #1]
 8002cd8:	e00f      	b.n	8002cfa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 020f 	and.w	r2, r3, #15
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4413      	add	r3, r2
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d06:	883a      	ldrh	r2, [r7, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	78ba      	ldrb	r2, [r7, #2]
 8002d10:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	785b      	ldrb	r3, [r3, #1]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d004      	beq.n	8002d24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d24:	78bb      	ldrb	r3, [r7, #2]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d102      	bne.n	8002d30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_PCD_EP_Open+0xaa>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e00e      	b.n	8002d5c <HAL_PCD_EP_Open+0xc8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68f9      	ldr	r1, [r7, #12]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f003 fa59 	bl	8006204 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d5a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	da0f      	bge.n	8002d98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f003 020f 	and.w	r2, r3, #15
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	3338      	adds	r3, #56	; 0x38
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	705a      	strb	r2, [r3, #1]
 8002d96:	e00f      	b.n	8002db8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	f003 020f 	and.w	r2, r3, #15
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	3304      	adds	r3, #4
 8002db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_PCD_EP_Close+0x6e>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e00e      	b.n	8002df0 <HAL_PCD_EP_Close+0x8c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68f9      	ldr	r1, [r7, #12]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 fa97 	bl	8006314 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	460b      	mov	r3, r1
 8002e06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e08:	7afb      	ldrb	r3, [r7, #11]
 8002e0a:	f003 020f 	and.w	r2, r3, #15
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3304      	adds	r3, #4
 8002e20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2200      	movs	r2, #0
 8002e38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e3a:	7afb      	ldrb	r3, [r7, #11]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e54:	7afb      	ldrb	r3, [r7, #11]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6979      	ldr	r1, [r7, #20]
 8002e6c:	f003 fd72 	bl	8006954 <USB_EP0StartXfer>
 8002e70:	e008      	b.n	8002e84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6979      	ldr	r1, [r7, #20]
 8002e80:	f003 fb24 	bl	80064cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9e:	7afb      	ldrb	r3, [r7, #11]
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	3338      	adds	r3, #56	; 0x38
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ece:	7afb      	ldrb	r3, [r7, #11]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d102      	bne.n	8002ee8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ee8:	7afb      	ldrb	r3, [r7, #11]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	6979      	ldr	r1, [r7, #20]
 8002f00:	f003 fd28 	bl	8006954 <USB_EP0StartXfer>
 8002f04:	e008      	b.n	8002f18 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	6979      	ldr	r1, [r7, #20]
 8002f14:	f003 fada 	bl	80064cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	f003 020f 	and.w	r2, r3, #15
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d901      	bls.n	8002f40 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e050      	b.n	8002fe2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da0f      	bge.n	8002f68 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	3338      	adds	r3, #56	; 0x38
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	705a      	strb	r2, [r3, #1]
 8002f66:	e00d      	b.n	8002f84 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_PCD_EP_SetStall+0x82>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e01e      	b.n	8002fe2 <HAL_PCD_EP_SetStall+0xc0>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68f9      	ldr	r1, [r7, #12]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fe7f 	bl	8006cb6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	b2d9      	uxtb	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f004 f870 	bl	80070b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 020f 	and.w	r2, r3, #15
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	429a      	cmp	r2, r3
 8003002:	d901      	bls.n	8003008 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e042      	b.n	800308e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800300c:	2b00      	cmp	r3, #0
 800300e:	da0f      	bge.n	8003030 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 020f 	and.w	r2, r3, #15
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	3338      	adds	r3, #56	; 0x38
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	3304      	adds	r3, #4
 8003026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	705a      	strb	r2, [r3, #1]
 800302e:	e00f      	b.n	8003050 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	f003 020f 	and.w	r2, r3, #15
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	3304      	adds	r3, #4
 8003048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	b2da      	uxtb	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_PCD_EP_ClrStall+0x86>
 800306c:	2302      	movs	r3, #2
 800306e:	e00e      	b.n	800308e <HAL_PCD_EP_ClrStall+0xa4>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68f9      	ldr	r1, [r7, #12]
 800307e:	4618      	mov	r0, r3
 8003080:	f003 fe87 	bl	8006d92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b08a      	sub	sp, #40	; 0x28
 800309a:	af02      	add	r7, sp, #8
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	3338      	adds	r3, #56	; 0x38
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	3304      	adds	r3, #4
 80030bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d901      	bls.n	80030ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e06c      	b.n	80031a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d902      	bls.n	80030ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3303      	adds	r3, #3
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030f2:	e02b      	b.n	800314c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	429a      	cmp	r2, r3
 8003108:	d902      	bls.n	8003110 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	3303      	adds	r3, #3
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68d9      	ldr	r1, [r3, #12]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003128:	b2db      	uxtb	r3, r3
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	4603      	mov	r3, r0
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f003 fd63 	bl	8006bfa <USB_WritePacket>

    ep->xfer_buff  += len;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	441a      	add	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	441a      	add	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	b29b      	uxth	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	429a      	cmp	r2, r3
 8003160:	d809      	bhi.n	8003176 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800316a:	429a      	cmp	r2, r3
 800316c:	d203      	bcs.n	8003176 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1be      	bne.n	80030f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	429a      	cmp	r2, r3
 8003180:	d811      	bhi.n	80031a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	2201      	movs	r2, #1
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	43db      	mvns	r3, r3
 800319c:	6939      	ldr	r1, [r7, #16]
 800319e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031a2:	4013      	ands	r3, r2
 80031a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	333c      	adds	r3, #60	; 0x3c
 80031c8:	3304      	adds	r3, #4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	f040 80a0 	bne.w	8003328 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d015      	beq.n	800321e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4a72      	ldr	r2, [pc, #456]	; (80033c0 <PCD_EP_OutXfrComplete_int+0x210>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	f240 80dd 	bls.w	80033b6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80d7 	beq.w	80033b6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4413      	add	r3, r2
 8003210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003214:	461a      	mov	r2, r3
 8003216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321a:	6093      	str	r3, [r2, #8]
 800321c:	e0cb      	b.n	80033b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	461a      	mov	r2, r3
 8003236:	2320      	movs	r3, #32
 8003238:	6093      	str	r3, [r2, #8]
 800323a:	e0bc      	b.n	80033b6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 80b7 	bne.w	80033b6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a5d      	ldr	r2, [pc, #372]	; (80033c0 <PCD_EP_OutXfrComplete_int+0x210>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d90f      	bls.n	8003270 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4413      	add	r3, r2
 8003262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003266:	461a      	mov	r2, r3
 8003268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800326c:	6093      	str	r3, [r2, #8]
 800326e:	e0a2      	b.n	80033b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003282:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	0159      	lsls	r1, r3, #5
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	440b      	add	r3, r1
 800328c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003296:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4403      	add	r3, r0
 80032a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80032aa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032be:	6819      	ldr	r1, [r3, #0]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4403      	add	r3, r0
 80032ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4419      	add	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4403      	add	r3, r0
 80032e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032e8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d114      	bne.n	800331a <PCD_EP_OutXfrComplete_int+0x16a>
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d108      	bne.n	800331a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003312:	461a      	mov	r2, r3
 8003314:	2101      	movs	r1, #1
 8003316:	f003 fecf 	bl	80070b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	4619      	mov	r1, r3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f005 fc55 	bl	8008bd0 <HAL_PCD_DataOutStageCallback>
 8003326:	e046      	b.n	80033b6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <PCD_EP_OutXfrComplete_int+0x214>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d124      	bne.n	800337a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003346:	461a      	mov	r2, r3
 8003348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800334c:	6093      	str	r3, [r2, #8]
 800334e:	e032      	b.n	80033b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003366:	461a      	mov	r2, r3
 8003368:	2320      	movs	r3, #32
 800336a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f005 fc2c 	bl	8008bd0 <HAL_PCD_DataOutStageCallback>
 8003378:	e01d      	b.n	80033b6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d114      	bne.n	80033aa <PCD_EP_OutXfrComplete_int+0x1fa>
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d108      	bne.n	80033aa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033a2:	461a      	mov	r2, r3
 80033a4:	2100      	movs	r1, #0
 80033a6:	f003 fe87 	bl	80070b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	4619      	mov	r1, r3
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f005 fc0d 	bl	8008bd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	4f54300a 	.word	0x4f54300a
 80033c4:	4f54310a 	.word	0x4f54310a

080033c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	333c      	adds	r3, #60	; 0x3c
 80033e0:	3304      	adds	r3, #4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4a15      	ldr	r2, [pc, #84]	; (8003450 <PCD_EP_OutSetupPacket_int+0x88>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d90e      	bls.n	800341c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003404:	2b00      	cmp	r3, #0
 8003406:	d009      	beq.n	800341c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4413      	add	r3, r2
 8003410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003414:	461a      	mov	r2, r3
 8003416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800341a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f005 fbc5 	bl	8008bac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4a0a      	ldr	r2, [pc, #40]	; (8003450 <PCD_EP_OutSetupPacket_int+0x88>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d90c      	bls.n	8003444 <PCD_EP_OutSetupPacket_int+0x7c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d108      	bne.n	8003444 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800343c:	461a      	mov	r2, r3
 800343e:	2101      	movs	r1, #1
 8003440:	f003 fe3a 	bl	80070b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	4f54300a 	.word	0x4f54300a

08003454 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	70fb      	strb	r3, [r7, #3]
 8003460:	4613      	mov	r3, r2
 8003462:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003472:	883b      	ldrh	r3, [r7, #0]
 8003474:	0419      	lsls	r1, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	430a      	orrs	r2, r1
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
 8003480:	e028      	b.n	80034d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	0c1b      	lsrs	r3, r3, #16
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	4413      	add	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	e00d      	b.n	80034b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	3340      	adds	r3, #64	; 0x40
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	4413      	add	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	3301      	adds	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d3ec      	bcc.n	8003496 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034bc:	883b      	ldrh	r3, [r7, #0]
 80034be:	0418      	lsls	r0, r3, #16
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	4302      	orrs	r2, r0
 80034cc:	3340      	adds	r3, #64	; 0x40
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003536:	f043 0303 	orr.w	r3, r3, #3
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0cc      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003560:	4b68      	ldr	r3, [pc, #416]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d90c      	bls.n	8003588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b65      	ldr	r3, [pc, #404]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b63      	ldr	r3, [pc, #396]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b8      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a0:	4b59      	ldr	r3, [pc, #356]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4a58      	ldr	r2, [pc, #352]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b8:	4b53      	ldr	r3, [pc, #332]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	4a52      	ldr	r2, [pc, #328]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b50      	ldr	r3, [pc, #320]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	494d      	ldr	r1, [pc, #308]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d044      	beq.n	800366c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b47      	ldr	r3, [pc, #284]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d119      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e07f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d003      	beq.n	800360a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003606:	2b03      	cmp	r3, #3
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360a:	4b3f      	ldr	r3, [pc, #252]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e06f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361a:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e067      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800362a:	4b37      	ldr	r3, [pc, #220]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f023 0203 	bic.w	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4934      	ldr	r1, [pc, #208]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800363c:	f7fe faac 	bl	8001b98 <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	e00a      	b.n	800365a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003644:	f7fe faa8 	bl	8001b98 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e04f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 020c 	and.w	r2, r3, #12
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	429a      	cmp	r2, r3
 800366a:	d1eb      	bne.n	8003644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d20c      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b22      	ldr	r3, [pc, #136]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e032      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4916      	ldr	r1, [pc, #88]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	490e      	ldr	r1, [pc, #56]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036d2:	f000 fb7f 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 80036d6:	4602      	mov	r2, r0
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	490a      	ldr	r1, [pc, #40]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	5ccb      	ldrb	r3, [r1, r3]
 80036e6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x1c8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fa0c 	bl	8001b10 <HAL_InitTick>

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40023c00 	.word	0x40023c00
 8003708:	40023800 	.word	0x40023800
 800370c:	0800f748 	.word	0x0800f748
 8003710:	20000000 	.word	0x20000000
 8003714:	20000004 	.word	0x20000004

08003718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_RCC_GetHCLKFreq+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000000 	.word	0x20000000

08003730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003734:	f7ff fff0 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003738:	4602      	mov	r2, r0
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	0a9b      	lsrs	r3, r3, #10
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4903      	ldr	r1, [pc, #12]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003746:	5ccb      	ldrb	r3, [r1, r3]
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800374c:	4618      	mov	r0, r3
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40023800 	.word	0x40023800
 8003754:	0800f758 	.word	0x0800f758

08003758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800375c:	f7ff ffdc 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003760:	4602      	mov	r2, r0
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	0b5b      	lsrs	r3, r3, #13
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	4903      	ldr	r1, [pc, #12]	; (800377c <HAL_RCC_GetPCLK2Freq+0x24>)
 800376e:	5ccb      	ldrb	r3, [r1, r3]
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003774:	4618      	mov	r0, r3
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40023800 	.word	0x40023800
 800377c:	0800f758 	.word	0x0800f758

08003780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08c      	sub	sp, #48	; 0x30
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d010      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80037b8:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037be:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	496c      	ldr	r1, [pc, #432]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80037d6:	2301      	movs	r3, #1
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d010      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80037e6:	4b64      	ldr	r3, [pc, #400]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ec:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	4960      	ldr	r1, [pc, #384]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003804:	2301      	movs	r3, #1
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d017      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003814:	4b58      	ldr	r3, [pc, #352]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800381a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	4955      	ldr	r1, [pc, #340]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003832:	d101      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003834:	2301      	movs	r3, #1
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003840:	2301      	movs	r3, #1
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d017      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003850:	4b49      	ldr	r3, [pc, #292]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003856:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385e:	4946      	ldr	r1, [pc, #280]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800386e:	d101      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003870:	2301      	movs	r3, #1
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800387c:	2301      	movs	r3, #1
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 808a 	beq.w	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	4b39      	ldr	r3, [pc, #228]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	4a38      	ldr	r2, [pc, #224]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389c:	6413      	str	r3, [r2, #64]	; 0x40
 800389e:	4b36      	ldr	r3, [pc, #216]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80038aa:	4b34      	ldr	r3, [pc, #208]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a33      	ldr	r2, [pc, #204]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038b6:	f7fe f96f 	bl	8001b98 <HAL_GetTick>
 80038ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038be:	f7fe f96b 	bl	8001b98 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e278      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038d0:	4b2a      	ldr	r3, [pc, #168]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038dc:	4b26      	ldr	r3, [pc, #152]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d02f      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f4:	6a3a      	ldr	r2, [r7, #32]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d028      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038fa:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003902:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003904:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800390a:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003910:	4a19      	ldr	r2, [pc, #100]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003916:	4b18      	ldr	r3, [pc, #96]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b01      	cmp	r3, #1
 8003920:	d114      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003922:	f7fe f939 	bl	8001b98 <HAL_GetTick>
 8003926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003928:	e00a      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fe f935 	bl	8001b98 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	; 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d901      	bls.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e240      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ee      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003958:	d114      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800395a:	4b07      	ldr	r3, [pc, #28]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800396a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396e:	4902      	ldr	r1, [pc, #8]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003970:	4313      	orrs	r3, r2
 8003972:	608b      	str	r3, [r1, #8]
 8003974:	e00c      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	40007000 	.word	0x40007000
 8003980:	42470e40 	.word	0x42470e40
 8003984:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	4a49      	ldr	r2, [pc, #292]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800398a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800398e:	6093      	str	r3, [r2, #8]
 8003990:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399c:	4944      	ldr	r1, [pc, #272]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d004      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80039b4:	4b3f      	ldr	r3, [pc, #252]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80039b6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80039c4:	4b3a      	ldr	r3, [pc, #232]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d2:	4937      	ldr	r1, [pc, #220]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039e6:	4b32      	ldr	r3, [pc, #200]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ec:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f4:	492e      	ldr	r1, [pc, #184]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d011      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a08:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	4926      	ldr	r1, [pc, #152]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a26:	d101      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003a38:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	491a      	ldr	r1, [pc, #104]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d011      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a60:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a68:	4911      	ldr	r1, [pc, #68]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a78:	d101      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d005      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8c:	f040 80ff 	bne.w	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a96:	f7fe f87f 	bl	8001b98 <HAL_GetTick>
 8003a9a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a9c:	e00e      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a9e:	f7fe f87b 	bl	8001b98 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d907      	bls.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e188      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	424711e0 	.word	0x424711e0
 8003ab8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003abc:	4b7e      	ldr	r3, [pc, #504]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ea      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d009      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d028      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d124      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003af0:	4b71      	ldr	r3, [pc, #452]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af6:	0c1b      	lsrs	r3, r3, #16
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	3301      	adds	r3, #1
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b02:	4b6d      	ldr	r3, [pc, #436]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b08:	0e1b      	lsrs	r3, r3, #24
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	019b      	lsls	r3, r3, #6
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	3b01      	subs	r3, #1
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	431a      	orrs	r2, r3
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	071b      	lsls	r3, r3, #28
 8003b32:	4961      	ldr	r1, [pc, #388]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d035      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b64:	d130      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b66:	4b54      	ldr	r3, [pc, #336]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	3301      	adds	r3, #1
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b78:	4b4f      	ldr	r3, [pc, #316]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7e:	0f1b      	lsrs	r3, r3, #28
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	019b      	lsls	r3, r3, #6
 8003b90:	431a      	orrs	r2, r3
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	085b      	lsrs	r3, r3, #1
 8003b96:	3b01      	subs	r3, #1
 8003b98:	041b      	lsls	r3, r3, #16
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	061b      	lsls	r3, r3, #24
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	071b      	lsls	r3, r3, #28
 8003ba8:	4943      	ldr	r1, [pc, #268]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bb0:	4b41      	ldr	r3, [pc, #260]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb6:	f023 021f 	bic.w	r2, r3, #31
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	493d      	ldr	r1, [pc, #244]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d029      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bdc:	d124      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003bde:	4b36      	ldr	r3, [pc, #216]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	3301      	adds	r3, #1
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bf0:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf6:	0f1b      	lsrs	r3, r3, #28
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	019b      	lsls	r3, r3, #6
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	3b01      	subs	r3, #1
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	431a      	orrs	r2, r3
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	071b      	lsls	r3, r3, #28
 8003c20:	4925      	ldr	r1, [pc, #148]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d016      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	019b      	lsls	r3, r3, #6
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	3b01      	subs	r3, #1
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	071b      	lsls	r3, r3, #28
 8003c5a:	4917      	ldr	r1, [pc, #92]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c62:	4b16      	ldr	r3, [pc, #88]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c68:	f7fd ff96 	bl	8001b98 <HAL_GetTick>
 8003c6c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c70:	f7fd ff92 	bl	8001b98 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e09f      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c82:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	f040 8095 	bne.w	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c96:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c9c:	f7fd ff7c 	bl	8001b98 <HAL_GetTick>
 8003ca0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ca2:	e00f      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ca4:	f7fd ff78 	bl	8001b98 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d908      	bls.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e085      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	42470068 	.word	0x42470068
 8003cc0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cc4:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd0:	d0e8      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d02b      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d127      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003cfa:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	3301      	adds	r3, #1
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699a      	ldr	r2, [r3, #24]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	019b      	lsls	r3, r3, #6
 8003d16:	431a      	orrs	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	061b      	lsls	r3, r3, #24
 8003d28:	4928      	ldr	r1, [pc, #160]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d30:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d36:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	4922      	ldr	r1, [pc, #136]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01d      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d5e:	d118      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d60:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	0e1b      	lsrs	r3, r3, #24
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	019b      	lsls	r3, r3, #6
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	041b      	lsls	r3, r3, #16
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	4910      	ldr	r1, [pc, #64]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d92:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d98:	f7fd fefe 	bl	8001b98 <HAL_GetTick>
 8003d9c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003da0:	f7fd fefa 	bl	8001b98 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e007      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dbe:	d1ef      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3730      	adds	r7, #48	; 0x30
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	42470070 	.word	0x42470070

08003dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd8:	b088      	sub	sp, #32
 8003dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003df0:	4bce      	ldr	r3, [pc, #824]	; (800412c <HAL_RCC_GetSysClockFreq+0x358>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 030c 	and.w	r3, r3, #12
 8003df8:	2b0c      	cmp	r3, #12
 8003dfa:	f200 818d 	bhi.w	8004118 <HAL_RCC_GetSysClockFreq+0x344>
 8003dfe:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <HAL_RCC_GetSysClockFreq+0x30>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e39 	.word	0x08003e39
 8003e08:	08004119 	.word	0x08004119
 8003e0c:	08004119 	.word	0x08004119
 8003e10:	08004119 	.word	0x08004119
 8003e14:	08003e3f 	.word	0x08003e3f
 8003e18:	08004119 	.word	0x08004119
 8003e1c:	08004119 	.word	0x08004119
 8003e20:	08004119 	.word	0x08004119
 8003e24:	08003e45 	.word	0x08003e45
 8003e28:	08004119 	.word	0x08004119
 8003e2c:	08004119 	.word	0x08004119
 8003e30:	08004119 	.word	0x08004119
 8003e34:	08003fb9 	.word	0x08003fb9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e38:	4bbd      	ldr	r3, [pc, #756]	; (8004130 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e3a:	61bb      	str	r3, [r7, #24]
       break;
 8003e3c:	e16f      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e3e:	4bbd      	ldr	r3, [pc, #756]	; (8004134 <HAL_RCC_GetSysClockFreq+0x360>)
 8003e40:	61bb      	str	r3, [r7, #24]
      break;
 8003e42:	e16c      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e44:	4bb9      	ldr	r3, [pc, #740]	; (800412c <HAL_RCC_GetSysClockFreq+0x358>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e4c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e4e:	4bb7      	ldr	r3, [pc, #732]	; (800412c <HAL_RCC_GetSysClockFreq+0x358>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d053      	beq.n	8003f02 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5a:	4bb4      	ldr	r3, [pc, #720]	; (800412c <HAL_RCC_GetSysClockFreq+0x358>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	099b      	lsrs	r3, r3, #6
 8003e60:	461a      	mov	r2, r3
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	ea02 0400 	and.w	r4, r2, r0
 8003e72:	603c      	str	r4, [r7, #0]
 8003e74:	400b      	ands	r3, r1
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	4629      	mov	r1, r5
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	014b      	lsls	r3, r1, #5
 8003e8a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e8e:	0142      	lsls	r2, r0, #5
 8003e90:	4610      	mov	r0, r2
 8003e92:	4619      	mov	r1, r3
 8003e94:	4623      	mov	r3, r4
 8003e96:	1ac0      	subs	r0, r0, r3
 8003e98:	462b      	mov	r3, r5
 8003e9a:	eb61 0103 	sbc.w	r1, r1, r3
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	018b      	lsls	r3, r1, #6
 8003ea8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003eac:	0182      	lsls	r2, r0, #6
 8003eae:	1a12      	subs	r2, r2, r0
 8003eb0:	eb63 0301 	sbc.w	r3, r3, r1
 8003eb4:	f04f 0000 	mov.w	r0, #0
 8003eb8:	f04f 0100 	mov.w	r1, #0
 8003ebc:	00d9      	lsls	r1, r3, #3
 8003ebe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ec2:	00d0      	lsls	r0, r2, #3
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4621      	mov	r1, r4
 8003eca:	1852      	adds	r2, r2, r1
 8003ecc:	4629      	mov	r1, r5
 8003ece:	eb43 0101 	adc.w	r1, r3, r1
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	f04f 0000 	mov.w	r0, #0
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	0259      	lsls	r1, r3, #9
 8003ede:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003ee2:	0250      	lsls	r0, r2, #9
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	f7fc f98e 	bl	8000214 <__aeabi_uldivmod>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4613      	mov	r3, r2
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	e04c      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f02:	4b8a      	ldr	r3, [pc, #552]	; (800412c <HAL_RCC_GetSysClockFreq+0x358>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	099b      	lsrs	r3, r3, #6
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f12:	f04f 0100 	mov.w	r1, #0
 8003f16:	ea02 0a00 	and.w	sl, r2, r0
 8003f1a:	ea03 0b01 	and.w	fp, r3, r1
 8003f1e:	4650      	mov	r0, sl
 8003f20:	4659      	mov	r1, fp
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	014b      	lsls	r3, r1, #5
 8003f2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f30:	0142      	lsls	r2, r0, #5
 8003f32:	4610      	mov	r0, r2
 8003f34:	4619      	mov	r1, r3
 8003f36:	ebb0 000a 	subs.w	r0, r0, sl
 8003f3a:	eb61 010b 	sbc.w	r1, r1, fp
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	018b      	lsls	r3, r1, #6
 8003f48:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f4c:	0182      	lsls	r2, r0, #6
 8003f4e:	1a12      	subs	r2, r2, r0
 8003f50:	eb63 0301 	sbc.w	r3, r3, r1
 8003f54:	f04f 0000 	mov.w	r0, #0
 8003f58:	f04f 0100 	mov.w	r1, #0
 8003f5c:	00d9      	lsls	r1, r3, #3
 8003f5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f62:	00d0      	lsls	r0, r2, #3
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	eb12 020a 	adds.w	r2, r2, sl
 8003f6c:	eb43 030b 	adc.w	r3, r3, fp
 8003f70:	f04f 0000 	mov.w	r0, #0
 8003f74:	f04f 0100 	mov.w	r1, #0
 8003f78:	0299      	lsls	r1, r3, #10
 8003f7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f7e:	0290      	lsls	r0, r2, #10
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	f7fc f940 	bl	8000214 <__aeabi_uldivmod>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4613      	mov	r3, r2
 8003f9a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f9c:	4b63      	ldr	r3, [pc, #396]	; (800412c <HAL_RCC_GetSysClockFreq+0x358>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	61bb      	str	r3, [r7, #24]
      break;
 8003fb6:	e0b2      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb8:	4b5c      	ldr	r3, [pc, #368]	; (800412c <HAL_RCC_GetSysClockFreq+0x358>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fc2:	4b5a      	ldr	r3, [pc, #360]	; (800412c <HAL_RCC_GetSysClockFreq+0x358>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d04d      	beq.n	800406a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fce:	4b57      	ldr	r3, [pc, #348]	; (800412c <HAL_RCC_GetSysClockFreq+0x358>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	099b      	lsrs	r3, r3, #6
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fde:	f04f 0100 	mov.w	r1, #0
 8003fe2:	ea02 0800 	and.w	r8, r2, r0
 8003fe6:	ea03 0901 	and.w	r9, r3, r1
 8003fea:	4640      	mov	r0, r8
 8003fec:	4649      	mov	r1, r9
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	014b      	lsls	r3, r1, #5
 8003ff8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ffc:	0142      	lsls	r2, r0, #5
 8003ffe:	4610      	mov	r0, r2
 8004000:	4619      	mov	r1, r3
 8004002:	ebb0 0008 	subs.w	r0, r0, r8
 8004006:	eb61 0109 	sbc.w	r1, r1, r9
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	018b      	lsls	r3, r1, #6
 8004014:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004018:	0182      	lsls	r2, r0, #6
 800401a:	1a12      	subs	r2, r2, r0
 800401c:	eb63 0301 	sbc.w	r3, r3, r1
 8004020:	f04f 0000 	mov.w	r0, #0
 8004024:	f04f 0100 	mov.w	r1, #0
 8004028:	00d9      	lsls	r1, r3, #3
 800402a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800402e:	00d0      	lsls	r0, r2, #3
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	eb12 0208 	adds.w	r2, r2, r8
 8004038:	eb43 0309 	adc.w	r3, r3, r9
 800403c:	f04f 0000 	mov.w	r0, #0
 8004040:	f04f 0100 	mov.w	r1, #0
 8004044:	0259      	lsls	r1, r3, #9
 8004046:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800404a:	0250      	lsls	r0, r2, #9
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4610      	mov	r0, r2
 8004052:	4619      	mov	r1, r3
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	461a      	mov	r2, r3
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	f7fc f8da 	bl	8000214 <__aeabi_uldivmod>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4613      	mov	r3, r2
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	e04a      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406a:	4b30      	ldr	r3, [pc, #192]	; (800412c <HAL_RCC_GetSysClockFreq+0x358>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	099b      	lsrs	r3, r3, #6
 8004070:	461a      	mov	r2, r3
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	f240 10ff 	movw	r0, #511	; 0x1ff
 800407a:	f04f 0100 	mov.w	r1, #0
 800407e:	ea02 0400 	and.w	r4, r2, r0
 8004082:	ea03 0501 	and.w	r5, r3, r1
 8004086:	4620      	mov	r0, r4
 8004088:	4629      	mov	r1, r5
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	014b      	lsls	r3, r1, #5
 8004094:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004098:	0142      	lsls	r2, r0, #5
 800409a:	4610      	mov	r0, r2
 800409c:	4619      	mov	r1, r3
 800409e:	1b00      	subs	r0, r0, r4
 80040a0:	eb61 0105 	sbc.w	r1, r1, r5
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	018b      	lsls	r3, r1, #6
 80040ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040b2:	0182      	lsls	r2, r0, #6
 80040b4:	1a12      	subs	r2, r2, r0
 80040b6:	eb63 0301 	sbc.w	r3, r3, r1
 80040ba:	f04f 0000 	mov.w	r0, #0
 80040be:	f04f 0100 	mov.w	r1, #0
 80040c2:	00d9      	lsls	r1, r3, #3
 80040c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040c8:	00d0      	lsls	r0, r2, #3
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	1912      	adds	r2, r2, r4
 80040d0:	eb45 0303 	adc.w	r3, r5, r3
 80040d4:	f04f 0000 	mov.w	r0, #0
 80040d8:	f04f 0100 	mov.w	r1, #0
 80040dc:	0299      	lsls	r1, r3, #10
 80040de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040e2:	0290      	lsls	r0, r2, #10
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	f7fc f88e 	bl	8000214 <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4613      	mov	r3, r2
 80040fe:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HAL_RCC_GetSysClockFreq+0x358>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	0f1b      	lsrs	r3, r3, #28
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	61bb      	str	r3, [r7, #24]
      break;
 8004116:	e002      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_RCC_GetSysClockFreq+0x35c>)
 800411a:	61bb      	str	r3, [r7, #24]
      break;
 800411c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411e:	69bb      	ldr	r3, [r7, #24]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3720      	adds	r7, #32
 8004124:	46bd      	mov	sp, r7
 8004126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800
 8004130:	00f42400 	.word	0x00f42400
 8004134:	007a1200 	.word	0x007a1200

08004138 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e28d      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 8083 	beq.w	800425e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004158:	4b94      	ldr	r3, [pc, #592]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b04      	cmp	r3, #4
 8004162:	d019      	beq.n	8004198 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004164:	4b91      	ldr	r3, [pc, #580]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800416c:	2b08      	cmp	r3, #8
 800416e:	d106      	bne.n	800417e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004170:	4b8e      	ldr	r3, [pc, #568]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800417c:	d00c      	beq.n	8004198 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800417e:	4b8b      	ldr	r3, [pc, #556]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004186:	2b0c      	cmp	r3, #12
 8004188:	d112      	bne.n	80041b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800418a:	4b88      	ldr	r3, [pc, #544]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004196:	d10b      	bne.n	80041b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004198:	4b84      	ldr	r3, [pc, #528]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d05b      	beq.n	800425c <HAL_RCC_OscConfig+0x124>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d157      	bne.n	800425c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e25a      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b8:	d106      	bne.n	80041c8 <HAL_RCC_OscConfig+0x90>
 80041ba:	4b7c      	ldr	r3, [pc, #496]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a7b      	ldr	r2, [pc, #492]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e01d      	b.n	8004204 <HAL_RCC_OscConfig+0xcc>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041d0:	d10c      	bne.n	80041ec <HAL_RCC_OscConfig+0xb4>
 80041d2:	4b76      	ldr	r3, [pc, #472]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a75      	ldr	r2, [pc, #468]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	4b73      	ldr	r3, [pc, #460]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a72      	ldr	r2, [pc, #456]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e00b      	b.n	8004204 <HAL_RCC_OscConfig+0xcc>
 80041ec:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a6e      	ldr	r2, [pc, #440]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	4b6c      	ldr	r3, [pc, #432]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a6b      	ldr	r2, [pc, #428]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d013      	beq.n	8004234 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fd fcc4 	bl	8001b98 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004214:	f7fd fcc0 	bl	8001b98 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b64      	cmp	r3, #100	; 0x64
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e21f      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	4b61      	ldr	r3, [pc, #388]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0xdc>
 8004232:	e014      	b.n	800425e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fd fcb0 	bl	8001b98 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800423c:	f7fd fcac 	bl	8001b98 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b64      	cmp	r3, #100	; 0x64
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e20b      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424e:	4b57      	ldr	r3, [pc, #348]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x104>
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d06f      	beq.n	800434a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800426a:	4b50      	ldr	r3, [pc, #320]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 030c 	and.w	r3, r3, #12
 8004272:	2b00      	cmp	r3, #0
 8004274:	d017      	beq.n	80042a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004276:	4b4d      	ldr	r3, [pc, #308]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800427e:	2b08      	cmp	r3, #8
 8004280:	d105      	bne.n	800428e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004282:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428e:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d11c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800429a:	4b44      	ldr	r3, [pc, #272]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d116      	bne.n	80042d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	4b41      	ldr	r3, [pc, #260]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_RCC_OscConfig+0x186>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d001      	beq.n	80042be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e1d3      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042be:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4937      	ldr	r1, [pc, #220]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d2:	e03a      	b.n	800434a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d020      	beq.n	800431e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042dc:	4b34      	ldr	r3, [pc, #208]	; (80043b0 <HAL_RCC_OscConfig+0x278>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e2:	f7fd fc59 	bl	8001b98 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ea:	f7fd fc55 	bl	8001b98 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e1b4      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fc:	4b2b      	ldr	r3, [pc, #172]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004308:	4b28      	ldr	r3, [pc, #160]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4925      	ldr	r1, [pc, #148]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004318:	4313      	orrs	r3, r2
 800431a:	600b      	str	r3, [r1, #0]
 800431c:	e015      	b.n	800434a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431e:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <HAL_RCC_OscConfig+0x278>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd fc38 	bl	8001b98 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800432c:	f7fd fc34 	bl	8001b98 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e193      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433e:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d036      	beq.n	80043c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d016      	beq.n	800438c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <HAL_RCC_OscConfig+0x27c>)
 8004360:	2201      	movs	r2, #1
 8004362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fd fc18 	bl	8001b98 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436c:	f7fd fc14 	bl	8001b98 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e173      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x234>
 800438a:	e01b      	b.n	80043c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCC_OscConfig+0x27c>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004392:	f7fd fc01 	bl	8001b98 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004398:	e00e      	b.n	80043b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439a:	f7fd fbfd 	bl	8001b98 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d907      	bls.n	80043b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e15c      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
 80043ac:	40023800 	.word	0x40023800
 80043b0:	42470000 	.word	0x42470000
 80043b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b8:	4b8a      	ldr	r3, [pc, #552]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ea      	bne.n	800439a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8097 	beq.w	8004500 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d6:	4b83      	ldr	r3, [pc, #524]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	4b7f      	ldr	r3, [pc, #508]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	4a7e      	ldr	r2, [pc, #504]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f0:	6413      	str	r3, [r2, #64]	; 0x40
 80043f2:	4b7c      	ldr	r3, [pc, #496]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fe:	2301      	movs	r3, #1
 8004400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004402:	4b79      	ldr	r3, [pc, #484]	; (80045e8 <HAL_RCC_OscConfig+0x4b0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d118      	bne.n	8004440 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800440e:	4b76      	ldr	r3, [pc, #472]	; (80045e8 <HAL_RCC_OscConfig+0x4b0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a75      	ldr	r2, [pc, #468]	; (80045e8 <HAL_RCC_OscConfig+0x4b0>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441a:	f7fd fbbd 	bl	8001b98 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004422:	f7fd fbb9 	bl	8001b98 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e118      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004434:	4b6c      	ldr	r3, [pc, #432]	; (80045e8 <HAL_RCC_OscConfig+0x4b0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d106      	bne.n	8004456 <HAL_RCC_OscConfig+0x31e>
 8004448:	4b66      	ldr	r3, [pc, #408]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	4a65      	ldr	r2, [pc, #404]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	; 0x70
 8004454:	e01c      	b.n	8004490 <HAL_RCC_OscConfig+0x358>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b05      	cmp	r3, #5
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x340>
 800445e:	4b61      	ldr	r3, [pc, #388]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	4a60      	ldr	r2, [pc, #384]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004464:	f043 0304 	orr.w	r3, r3, #4
 8004468:	6713      	str	r3, [r2, #112]	; 0x70
 800446a:	4b5e      	ldr	r3, [pc, #376]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	4a5d      	ldr	r2, [pc, #372]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6713      	str	r3, [r2, #112]	; 0x70
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0x358>
 8004478:	4b5a      	ldr	r3, [pc, #360]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	4a59      	ldr	r2, [pc, #356]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	6713      	str	r3, [r2, #112]	; 0x70
 8004484:	4b57      	ldr	r3, [pc, #348]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	4a56      	ldr	r2, [pc, #344]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800448a:	f023 0304 	bic.w	r3, r3, #4
 800448e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d015      	beq.n	80044c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fd fb7e 	bl	8001b98 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a0:	f7fd fb7a 	bl	8001b98 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e0d7      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	4b4b      	ldr	r3, [pc, #300]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0ee      	beq.n	80044a0 <HAL_RCC_OscConfig+0x368>
 80044c2:	e014      	b.n	80044ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fd fb68 	bl	8001b98 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044cc:	f7fd fb64 	bl	8001b98 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0c1      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e2:	4b40      	ldr	r3, [pc, #256]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ee      	bne.n	80044cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	4a3a      	ldr	r2, [pc, #232]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80ad 	beq.w	8004664 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800450a:	4b36      	ldr	r3, [pc, #216]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b08      	cmp	r3, #8
 8004514:	d060      	beq.n	80045d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d145      	bne.n	80045aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451e:	4b33      	ldr	r3, [pc, #204]	; (80045ec <HAL_RCC_OscConfig+0x4b4>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fd fb38 	bl	8001b98 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452c:	f7fd fb34 	bl	8001b98 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e093      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453e:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	3b01      	subs	r3, #1
 8004564:	041b      	lsls	r3, r3, #16
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	071b      	lsls	r3, r3, #28
 8004576:	491b      	ldr	r1, [pc, #108]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004578:	4313      	orrs	r3, r2
 800457a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800457c:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <HAL_RCC_OscConfig+0x4b4>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fd fb09 	bl	8001b98 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458a:	f7fd fb05 	bl	8001b98 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e064      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459c:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x452>
 80045a8:	e05c      	b.n	8004664 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045aa:	4b10      	ldr	r3, [pc, #64]	; (80045ec <HAL_RCC_OscConfig+0x4b4>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd faf2 	bl	8001b98 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fd faee 	bl	8001b98 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e04d      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x480>
 80045d6:	e045      	b.n	8004664 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d107      	bne.n	80045f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e040      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40007000 	.word	0x40007000
 80045ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045f0:	4b1f      	ldr	r3, [pc, #124]	; (8004670 <HAL_RCC_OscConfig+0x538>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d030      	beq.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d129      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d122      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004628:	4293      	cmp	r3, r2
 800462a:	d119      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	3b01      	subs	r3, #1
 800463a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d10f      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800

08004674 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e07b      	b.n	800477e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2b00      	cmp	r3, #0
 800468c:	d108      	bne.n	80046a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004696:	d009      	beq.n	80046ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	61da      	str	r2, [r3, #28]
 800469e:	e005      	b.n	80046ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fd f8b8 	bl	800183c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004730:	ea42 0103 	orr.w	r1, r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f003 0104 	and.w	r1, r3, #4
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	f003 0210 	and.w	r2, r3, #16
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b088      	sub	sp, #32
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	4613      	mov	r3, r2
 8004794:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_SPI_Transmit+0x22>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e126      	b.n	80049f6 <HAL_SPI_Transmit+0x270>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047b0:	f7fd f9f2 	bl	8001b98 <HAL_GetTick>
 80047b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d002      	beq.n	80047cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
 80047c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047ca:	e10b      	b.n	80049e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <HAL_SPI_Transmit+0x52>
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047dc:	e102      	b.n	80049e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2203      	movs	r2, #3
 80047e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	88fa      	ldrh	r2, [r7, #6]
 80047f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	88fa      	ldrh	r2, [r7, #6]
 80047fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004824:	d10f      	bne.n	8004846 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004834:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004844:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b40      	cmp	r3, #64	; 0x40
 8004852:	d007      	beq.n	8004864 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004862:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800486c:	d14b      	bne.n	8004906 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_SPI_Transmit+0xf6>
 8004876:	8afb      	ldrh	r3, [r7, #22]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d13e      	bne.n	80048fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	881a      	ldrh	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	1c9a      	adds	r2, r3, #2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048a0:	e02b      	b.n	80048fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d112      	bne.n	80048d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	881a      	ldrh	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	1c9a      	adds	r2, r3, #2
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80048d4:	e011      	b.n	80048fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048d6:	f7fd f95f 	bl	8001b98 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d803      	bhi.n	80048ee <HAL_SPI_Transmit+0x168>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d102      	bne.n	80048f4 <HAL_SPI_Transmit+0x16e>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048f8:	e074      	b.n	80049e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1ce      	bne.n	80048a2 <HAL_SPI_Transmit+0x11c>
 8004904:	e04c      	b.n	80049a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_SPI_Transmit+0x18e>
 800490e:	8afb      	ldrh	r3, [r7, #22]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d140      	bne.n	8004996 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	330c      	adds	r3, #12
 800491e:	7812      	ldrb	r2, [r2, #0]
 8004920:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800493a:	e02c      	b.n	8004996 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d113      	bne.n	8004972 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	330c      	adds	r3, #12
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004970:	e011      	b.n	8004996 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004972:	f7fd f911 	bl	8001b98 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d803      	bhi.n	800498a <HAL_SPI_Transmit+0x204>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004988:	d102      	bne.n	8004990 <HAL_SPI_Transmit+0x20a>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d102      	bne.n	8004996 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004994:	e026      	b.n	80049e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1cd      	bne.n	800493c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fbcb 	bl	8005140 <SPI_EndRxTxTransaction>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049be:	2300      	movs	r3, #0
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e000      	b.n	80049e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80049e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3720      	adds	r7, #32
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b088      	sub	sp, #32
 8004a02:	af02      	add	r7, sp, #8
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a1a:	d112      	bne.n	8004a42 <HAL_SPI_Receive+0x44>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10e      	bne.n	8004a42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2204      	movs	r2, #4
 8004a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a2c:	88fa      	ldrh	r2, [r7, #6]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f8f1 	bl	8004c20 <HAL_SPI_TransmitReceive>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	e0ea      	b.n	8004c18 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_SPI_Receive+0x52>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e0e3      	b.n	8004c18 <HAL_SPI_Receive+0x21a>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a58:	f7fd f89e 	bl	8001b98 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d002      	beq.n	8004a70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a6e:	e0ca      	b.n	8004c06 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_Receive+0x7e>
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a80:	e0c1      	b.n	8004c06 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2204      	movs	r2, #4
 8004a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	88fa      	ldrh	r2, [r7, #6]
 8004aa0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac8:	d10f      	bne.n	8004aea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ae8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d007      	beq.n	8004b08 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d162      	bne.n	8004bd6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b10:	e02e      	b.n	8004b70 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d115      	bne.n	8004b4c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f103 020c 	add.w	r2, r3, #12
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	7812      	ldrb	r2, [r2, #0]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b4a:	e011      	b.n	8004b70 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b4c:	f7fd f824 	bl	8001b98 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d803      	bhi.n	8004b64 <HAL_SPI_Receive+0x166>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b62:	d102      	bne.n	8004b6a <HAL_SPI_Receive+0x16c>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d102      	bne.n	8004b70 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b6e:	e04a      	b.n	8004c06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1cb      	bne.n	8004b12 <HAL_SPI_Receive+0x114>
 8004b7a:	e031      	b.n	8004be0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d113      	bne.n	8004bb2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	b292      	uxth	r2, r2
 8004b96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	1c9a      	adds	r2, r3, #2
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bb0:	e011      	b.n	8004bd6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb2:	f7fc fff1 	bl	8001b98 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d803      	bhi.n	8004bca <HAL_SPI_Receive+0x1cc>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d102      	bne.n	8004bd0 <HAL_SPI_Receive+0x1d2>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bd4:	e017      	b.n	8004c06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1cd      	bne.n	8004b7c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fa45 	bl	8005074 <SPI_EndRxTransaction>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	75fb      	strb	r3, [r7, #23]
 8004c02:	e000      	b.n	8004c06 <HAL_SPI_Receive+0x208>
  }

error :
 8004c04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08c      	sub	sp, #48	; 0x30
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_SPI_TransmitReceive+0x26>
 8004c42:	2302      	movs	r3, #2
 8004c44:	e18a      	b.n	8004f5c <HAL_SPI_TransmitReceive+0x33c>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c4e:	f7fc ffa3 	bl	8001b98 <HAL_GetTick>
 8004c52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c64:	887b      	ldrh	r3, [r7, #2]
 8004c66:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d00f      	beq.n	8004c90 <HAL_SPI_TransmitReceive+0x70>
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c76:	d107      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d103      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x68>
 8004c80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d003      	beq.n	8004c90 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c8e:	e15b      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0x82>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0x82>
 8004c9c:	887b      	ldrh	r3, [r7, #2]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ca8:	e14e      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d003      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2205      	movs	r2, #5
 8004cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	887a      	ldrh	r2, [r7, #2]
 8004cce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	887a      	ldrh	r2, [r7, #2]
 8004cd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	887a      	ldrh	r2, [r7, #2]
 8004ce0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	887a      	ldrh	r2, [r7, #2]
 8004ce6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d007      	beq.n	8004d12 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1a:	d178      	bne.n	8004e0e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x10a>
 8004d24:	8b7b      	ldrh	r3, [r7, #26]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d166      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	881a      	ldrh	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	1c9a      	adds	r2, r3, #2
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d4e:	e053      	b.n	8004df8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d11b      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x176>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d016      	beq.n	8004d96 <HAL_SPI_TransmitReceive+0x176>
 8004d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d113      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	881a      	ldrh	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	1c9a      	adds	r2, r3, #2
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d119      	bne.n	8004dd8 <HAL_SPI_TransmitReceive+0x1b8>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d014      	beq.n	8004dd8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	b292      	uxth	r2, r2
 8004dba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	1c9a      	adds	r2, r3, #2
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dd8:	f7fc fede 	bl	8001b98 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d807      	bhi.n	8004df8 <HAL_SPI_TransmitReceive+0x1d8>
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d003      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004df6:	e0a7      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1a6      	bne.n	8004d50 <HAL_SPI_TransmitReceive+0x130>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1a1      	bne.n	8004d50 <HAL_SPI_TransmitReceive+0x130>
 8004e0c:	e07c      	b.n	8004f08 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x1fc>
 8004e16:	8b7b      	ldrh	r3, [r7, #26]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d16b      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	7812      	ldrb	r2, [r2, #0]
 8004e28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e42:	e057      	b.n	8004ef4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d11c      	bne.n	8004e8c <HAL_SPI_TransmitReceive+0x26c>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d017      	beq.n	8004e8c <HAL_SPI_TransmitReceive+0x26c>
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d114      	bne.n	8004e8c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	7812      	ldrb	r2, [r2, #0]
 8004e6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d119      	bne.n	8004ece <HAL_SPI_TransmitReceive+0x2ae>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d014      	beq.n	8004ece <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ece:	f7fc fe63 	bl	8001b98 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d803      	bhi.n	8004ee6 <HAL_SPI_TransmitReceive+0x2c6>
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d102      	bne.n	8004eec <HAL_SPI_TransmitReceive+0x2cc>
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d103      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ef2:	e029      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1a2      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x224>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d19d      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f917 	bl	8005140 <SPI_EndRxTxTransaction>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d006      	beq.n	8004f26 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f24:	e010      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	e000      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3730      	adds	r7, #48	; 0x30
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f74:	f7fc fe10 	bl	8001b98 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	4413      	add	r3, r2
 8004f82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f84:	f7fc fe08 	bl	8001b98 <HAL_GetTick>
 8004f88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f8a:	4b39      	ldr	r3, [pc, #228]	; (8005070 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	015b      	lsls	r3, r3, #5
 8004f90:	0d1b      	lsrs	r3, r3, #20
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f9a:	e054      	b.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa2:	d050      	beq.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fa4:	f7fc fdf8 	bl	8001b98 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d902      	bls.n	8004fba <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d13d      	bne.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd2:	d111      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fdc:	d004      	beq.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe6:	d107      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005000:	d10f      	bne.n	8005022 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e017      	b.n	8005066 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	3b01      	subs	r3, #1
 8005044:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4013      	ands	r3, r2
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	429a      	cmp	r2, r3
 8005062:	d19b      	bne.n	8004f9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000000 	.word	0x20000000

08005074 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005088:	d111      	bne.n	80050ae <SPI_EndRxTransaction+0x3a>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005092:	d004      	beq.n	800509e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509c:	d107      	bne.n	80050ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050b6:	d12a      	bne.n	800510e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c0:	d012      	beq.n	80050e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2180      	movs	r1, #128	; 0x80
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f7ff ff49 	bl	8004f64 <SPI_WaitFlagStateUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d02d      	beq.n	8005134 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	f043 0220 	orr.w	r2, r3, #32
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e026      	b.n	8005136 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2200      	movs	r2, #0
 80050f0:	2101      	movs	r1, #1
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f7ff ff36 	bl	8004f64 <SPI_WaitFlagStateUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01a      	beq.n	8005134 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	f043 0220 	orr.w	r2, r3, #32
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e013      	b.n	8005136 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2200      	movs	r2, #0
 8005116:	2101      	movs	r1, #1
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff ff23 	bl	8004f64 <SPI_WaitFlagStateUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d007      	beq.n	8005134 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005128:	f043 0220 	orr.w	r2, r3, #32
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e000      	b.n	8005136 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800514c:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <SPI_EndRxTxTransaction+0x7c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1b      	ldr	r2, [pc, #108]	; (80051c0 <SPI_EndRxTxTransaction+0x80>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	0d5b      	lsrs	r3, r3, #21
 8005158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800515c:	fb02 f303 	mul.w	r3, r2, r3
 8005160:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800516a:	d112      	bne.n	8005192 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2200      	movs	r2, #0
 8005174:	2180      	movs	r1, #128	; 0x80
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7ff fef4 	bl	8004f64 <SPI_WaitFlagStateUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d016      	beq.n	80051b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005186:	f043 0220 	orr.w	r2, r3, #32
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e00f      	b.n	80051b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	3b01      	subs	r3, #1
 800519c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a8:	2b80      	cmp	r3, #128	; 0x80
 80051aa:	d0f2      	beq.n	8005192 <SPI_EndRxTxTransaction+0x52>
 80051ac:	e000      	b.n	80051b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80051ae:	bf00      	nop
  }

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000000 	.word	0x20000000
 80051c0:	165e9f81 	.word	0x165e9f81

080051c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e041      	b.n	800525a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fc fb6e 	bl	80018cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3304      	adds	r3, #4
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f000 f896 	bl	8005334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	d001      	beq.n	800527c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e046      	b.n	800530a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a23      	ldr	r2, [pc, #140]	; (8005318 <HAL_TIM_Base_Start+0xb4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d022      	beq.n	80052d4 <HAL_TIM_Base_Start+0x70>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005296:	d01d      	beq.n	80052d4 <HAL_TIM_Base_Start+0x70>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1f      	ldr	r2, [pc, #124]	; (800531c <HAL_TIM_Base_Start+0xb8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d018      	beq.n	80052d4 <HAL_TIM_Base_Start+0x70>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <HAL_TIM_Base_Start+0xbc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d013      	beq.n	80052d4 <HAL_TIM_Base_Start+0x70>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1c      	ldr	r2, [pc, #112]	; (8005324 <HAL_TIM_Base_Start+0xc0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00e      	beq.n	80052d4 <HAL_TIM_Base_Start+0x70>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1b      	ldr	r2, [pc, #108]	; (8005328 <HAL_TIM_Base_Start+0xc4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d009      	beq.n	80052d4 <HAL_TIM_Base_Start+0x70>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a19      	ldr	r2, [pc, #100]	; (800532c <HAL_TIM_Base_Start+0xc8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d004      	beq.n	80052d4 <HAL_TIM_Base_Start+0x70>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a18      	ldr	r2, [pc, #96]	; (8005330 <HAL_TIM_Base_Start+0xcc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d111      	bne.n	80052f8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b06      	cmp	r3, #6
 80052e4:	d010      	beq.n	8005308 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	e007      	b.n	8005308 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	40000400 	.word	0x40000400
 8005320:	40000800 	.word	0x40000800
 8005324:	40000c00 	.word	0x40000c00
 8005328:	40010400 	.word	0x40010400
 800532c:	40014000 	.word	0x40014000
 8005330:	40001800 	.word	0x40001800

08005334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a40      	ldr	r2, [pc, #256]	; (8005448 <TIM_Base_SetConfig+0x114>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d013      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005352:	d00f      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a3d      	ldr	r2, [pc, #244]	; (800544c <TIM_Base_SetConfig+0x118>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00b      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a3c      	ldr	r2, [pc, #240]	; (8005450 <TIM_Base_SetConfig+0x11c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d007      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a3b      	ldr	r2, [pc, #236]	; (8005454 <TIM_Base_SetConfig+0x120>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a3a      	ldr	r2, [pc, #232]	; (8005458 <TIM_Base_SetConfig+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d108      	bne.n	8005386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a2f      	ldr	r2, [pc, #188]	; (8005448 <TIM_Base_SetConfig+0x114>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d02b      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005394:	d027      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2c      	ldr	r2, [pc, #176]	; (800544c <TIM_Base_SetConfig+0x118>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d023      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2b      	ldr	r2, [pc, #172]	; (8005450 <TIM_Base_SetConfig+0x11c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d01f      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2a      	ldr	r2, [pc, #168]	; (8005454 <TIM_Base_SetConfig+0x120>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01b      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a29      	ldr	r2, [pc, #164]	; (8005458 <TIM_Base_SetConfig+0x124>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d017      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a28      	ldr	r2, [pc, #160]	; (800545c <TIM_Base_SetConfig+0x128>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a27      	ldr	r2, [pc, #156]	; (8005460 <TIM_Base_SetConfig+0x12c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00f      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a26      	ldr	r2, [pc, #152]	; (8005464 <TIM_Base_SetConfig+0x130>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00b      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a25      	ldr	r2, [pc, #148]	; (8005468 <TIM_Base_SetConfig+0x134>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d007      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a24      	ldr	r2, [pc, #144]	; (800546c <TIM_Base_SetConfig+0x138>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a23      	ldr	r2, [pc, #140]	; (8005470 <TIM_Base_SetConfig+0x13c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d108      	bne.n	80053f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <TIM_Base_SetConfig+0x114>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <TIM_Base_SetConfig+0xf8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0c      	ldr	r2, [pc, #48]	; (8005458 <TIM_Base_SetConfig+0x124>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d103      	bne.n	8005434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	615a      	str	r2, [r3, #20]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40010000 	.word	0x40010000
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40000c00 	.word	0x40000c00
 8005458:	40010400 	.word	0x40010400
 800545c:	40014000 	.word	0x40014000
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800
 8005468:	40001800 	.word	0x40001800
 800546c:	40001c00 	.word	0x40001c00
 8005470:	40002000 	.word	0x40002000

08005474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e03f      	b.n	8005506 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fc fa38 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2224      	movs	r2, #36	; 0x24
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f9a7 	bl	800580c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b08a      	sub	sp, #40	; 0x28
 8005512:	af02      	add	r7, sp, #8
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	603b      	str	r3, [r7, #0]
 800551a:	4613      	mov	r3, r2
 800551c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b20      	cmp	r3, #32
 800552c:	d17c      	bne.n	8005628 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_UART_Transmit+0x2c>
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e075      	b.n	800562a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_UART_Transmit+0x3e>
 8005548:	2302      	movs	r3, #2
 800554a:	e06e      	b.n	800562a <HAL_UART_Transmit+0x11c>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2221      	movs	r2, #33	; 0x21
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005562:	f7fc fb19 	bl	8001b98 <HAL_GetTick>
 8005566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	88fa      	ldrh	r2, [r7, #6]
 800556c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	88fa      	ldrh	r2, [r7, #6]
 8005572:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557c:	d108      	bne.n	8005590 <HAL_UART_Transmit+0x82>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d104      	bne.n	8005590 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005586:	2300      	movs	r3, #0
 8005588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	61bb      	str	r3, [r7, #24]
 800558e:	e003      	b.n	8005598 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005594:	2300      	movs	r3, #0
 8005596:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055a0:	e02a      	b.n	80055f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2200      	movs	r2, #0
 80055aa:	2180      	movs	r1, #128	; 0x80
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f8e2 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e036      	b.n	800562a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	3302      	adds	r3, #2
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	e007      	b.n	80055ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	781a      	ldrb	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	3301      	adds	r3, #1
 80055e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1cf      	bne.n	80055a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2200      	movs	r2, #0
 800560a:	2140      	movs	r1, #64	; 0x40
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f8b2 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e006      	b.n	800562a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	e000      	b.n	800562a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005628:	2302      	movs	r3, #2
  }
}
 800562a:	4618      	mov	r0, r3
 800562c:	3720      	adds	r7, #32
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b08a      	sub	sp, #40	; 0x28
 8005636:	af02      	add	r7, sp, #8
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b20      	cmp	r3, #32
 8005650:	f040 808c 	bne.w	800576c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <HAL_UART_Receive+0x2e>
 800565a:	88fb      	ldrh	r3, [r7, #6]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e084      	b.n	800576e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_UART_Receive+0x40>
 800566e:	2302      	movs	r3, #2
 8005670:	e07d      	b.n	800576e <HAL_UART_Receive+0x13c>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2222      	movs	r2, #34	; 0x22
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800568e:	f7fc fa83 	bl	8001b98 <HAL_GetTick>
 8005692:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	88fa      	ldrh	r2, [r7, #6]
 800569e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	d108      	bne.n	80056bc <HAL_UART_Receive+0x8a>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	e003      	b.n	80056c4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80056cc:	e043      	b.n	8005756 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	2120      	movs	r1, #32
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f84c 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e042      	b.n	800576e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10c      	bne.n	8005708 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	3302      	adds	r3, #2
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	e01f      	b.n	8005748 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005710:	d007      	beq.n	8005722 <HAL_UART_Receive+0xf0>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <HAL_UART_Receive+0xfe>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	b2da      	uxtb	r2, r3
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	e008      	b.n	8005742 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800573c:	b2da      	uxtb	r2, r3
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	3301      	adds	r3, #1
 8005746:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1b6      	bne.n	80056ce <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800576c:	2302      	movs	r3, #2
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005786:	e02c      	b.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d028      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005796:	f7fc f9ff 	bl	8001b98 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d21d      	bcs.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0201 	bic.w	r2, r2, #1
 80057c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e00f      	b.n	8005802 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d0c3      	beq.n	8005788 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	b09f      	sub	sp, #124	; 0x7c
 8005812:	af00      	add	r7, sp, #0
 8005814:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005822:	68d9      	ldr	r1, [r3, #12]
 8005824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	ea40 0301 	orr.w	r3, r0, r1
 800582c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800582e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	431a      	orrs	r2, r3
 8005838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	431a      	orrs	r2, r3
 800583e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	4313      	orrs	r3, r2
 8005844:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005850:	f021 010c 	bic.w	r1, r1, #12
 8005854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800585a:	430b      	orrs	r3, r1
 800585c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800585e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586a:	6999      	ldr	r1, [r3, #24]
 800586c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	ea40 0301 	orr.w	r3, r0, r1
 8005874:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4bc5      	ldr	r3, [pc, #788]	; (8005b90 <UART_SetConfig+0x384>)
 800587c:	429a      	cmp	r2, r3
 800587e:	d004      	beq.n	800588a <UART_SetConfig+0x7e>
 8005880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	4bc3      	ldr	r3, [pc, #780]	; (8005b94 <UART_SetConfig+0x388>)
 8005886:	429a      	cmp	r2, r3
 8005888:	d103      	bne.n	8005892 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800588a:	f7fd ff65 	bl	8003758 <HAL_RCC_GetPCLK2Freq>
 800588e:	6778      	str	r0, [r7, #116]	; 0x74
 8005890:	e002      	b.n	8005898 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005892:	f7fd ff4d 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 8005896:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a0:	f040 80b6 	bne.w	8005a10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a6:	461c      	mov	r4, r3
 80058a8:	f04f 0500 	mov.w	r5, #0
 80058ac:	4622      	mov	r2, r4
 80058ae:	462b      	mov	r3, r5
 80058b0:	1891      	adds	r1, r2, r2
 80058b2:	6439      	str	r1, [r7, #64]	; 0x40
 80058b4:	415b      	adcs	r3, r3
 80058b6:	647b      	str	r3, [r7, #68]	; 0x44
 80058b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058bc:	1912      	adds	r2, r2, r4
 80058be:	eb45 0303 	adc.w	r3, r5, r3
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f04f 0100 	mov.w	r1, #0
 80058ca:	00d9      	lsls	r1, r3, #3
 80058cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058d0:	00d0      	lsls	r0, r2, #3
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	1911      	adds	r1, r2, r4
 80058d8:	6639      	str	r1, [r7, #96]	; 0x60
 80058da:	416b      	adcs	r3, r5
 80058dc:	667b      	str	r3, [r7, #100]	; 0x64
 80058de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	1891      	adds	r1, r2, r2
 80058ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80058ec:	415b      	adcs	r3, r3
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80058f8:	f7fa fc8c 	bl	8000214 <__aeabi_uldivmod>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4ba5      	ldr	r3, [pc, #660]	; (8005b98 <UART_SetConfig+0x38c>)
 8005902:	fba3 2302 	umull	r2, r3, r3, r2
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	011e      	lsls	r6, r3, #4
 800590a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800590c:	461c      	mov	r4, r3
 800590e:	f04f 0500 	mov.w	r5, #0
 8005912:	4622      	mov	r2, r4
 8005914:	462b      	mov	r3, r5
 8005916:	1891      	adds	r1, r2, r2
 8005918:	6339      	str	r1, [r7, #48]	; 0x30
 800591a:	415b      	adcs	r3, r3
 800591c:	637b      	str	r3, [r7, #52]	; 0x34
 800591e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005922:	1912      	adds	r2, r2, r4
 8005924:	eb45 0303 	adc.w	r3, r5, r3
 8005928:	f04f 0000 	mov.w	r0, #0
 800592c:	f04f 0100 	mov.w	r1, #0
 8005930:	00d9      	lsls	r1, r3, #3
 8005932:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005936:	00d0      	lsls	r0, r2, #3
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	1911      	adds	r1, r2, r4
 800593e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005940:	416b      	adcs	r3, r5
 8005942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	461a      	mov	r2, r3
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	1891      	adds	r1, r2, r2
 8005950:	62b9      	str	r1, [r7, #40]	; 0x28
 8005952:	415b      	adcs	r3, r3
 8005954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800595a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800595e:	f7fa fc59 	bl	8000214 <__aeabi_uldivmod>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	4b8c      	ldr	r3, [pc, #560]	; (8005b98 <UART_SetConfig+0x38c>)
 8005968:	fba3 1302 	umull	r1, r3, r3, r2
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	2164      	movs	r1, #100	; 0x64
 8005970:	fb01 f303 	mul.w	r3, r1, r3
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	3332      	adds	r3, #50	; 0x32
 800597a:	4a87      	ldr	r2, [pc, #540]	; (8005b98 <UART_SetConfig+0x38c>)
 800597c:	fba2 2303 	umull	r2, r3, r2, r3
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005988:	441e      	add	r6, r3
 800598a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800598c:	4618      	mov	r0, r3
 800598e:	f04f 0100 	mov.w	r1, #0
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	1894      	adds	r4, r2, r2
 8005998:	623c      	str	r4, [r7, #32]
 800599a:	415b      	adcs	r3, r3
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
 800599e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059a2:	1812      	adds	r2, r2, r0
 80059a4:	eb41 0303 	adc.w	r3, r1, r3
 80059a8:	f04f 0400 	mov.w	r4, #0
 80059ac:	f04f 0500 	mov.w	r5, #0
 80059b0:	00dd      	lsls	r5, r3, #3
 80059b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059b6:	00d4      	lsls	r4, r2, #3
 80059b8:	4622      	mov	r2, r4
 80059ba:	462b      	mov	r3, r5
 80059bc:	1814      	adds	r4, r2, r0
 80059be:	653c      	str	r4, [r7, #80]	; 0x50
 80059c0:	414b      	adcs	r3, r1
 80059c2:	657b      	str	r3, [r7, #84]	; 0x54
 80059c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	461a      	mov	r2, r3
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	1891      	adds	r1, r2, r2
 80059d0:	61b9      	str	r1, [r7, #24]
 80059d2:	415b      	adcs	r3, r3
 80059d4:	61fb      	str	r3, [r7, #28]
 80059d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80059de:	f7fa fc19 	bl	8000214 <__aeabi_uldivmod>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4b6c      	ldr	r3, [pc, #432]	; (8005b98 <UART_SetConfig+0x38c>)
 80059e8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	2164      	movs	r1, #100	; 0x64
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	3332      	adds	r3, #50	; 0x32
 80059fa:	4a67      	ldr	r2, [pc, #412]	; (8005b98 <UART_SetConfig+0x38c>)
 80059fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	f003 0207 	and.w	r2, r3, #7
 8005a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4432      	add	r2, r6
 8005a0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a0e:	e0b9      	b.n	8005b84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a12:	461c      	mov	r4, r3
 8005a14:	f04f 0500 	mov.w	r5, #0
 8005a18:	4622      	mov	r2, r4
 8005a1a:	462b      	mov	r3, r5
 8005a1c:	1891      	adds	r1, r2, r2
 8005a1e:	6139      	str	r1, [r7, #16]
 8005a20:	415b      	adcs	r3, r3
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a28:	1912      	adds	r2, r2, r4
 8005a2a:	eb45 0303 	adc.w	r3, r5, r3
 8005a2e:	f04f 0000 	mov.w	r0, #0
 8005a32:	f04f 0100 	mov.w	r1, #0
 8005a36:	00d9      	lsls	r1, r3, #3
 8005a38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a3c:	00d0      	lsls	r0, r2, #3
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	eb12 0804 	adds.w	r8, r2, r4
 8005a46:	eb43 0905 	adc.w	r9, r3, r5
 8005a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f04f 0100 	mov.w	r1, #0
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	008b      	lsls	r3, r1, #2
 8005a5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a62:	0082      	lsls	r2, r0, #2
 8005a64:	4640      	mov	r0, r8
 8005a66:	4649      	mov	r1, r9
 8005a68:	f7fa fbd4 	bl	8000214 <__aeabi_uldivmod>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4b49      	ldr	r3, [pc, #292]	; (8005b98 <UART_SetConfig+0x38c>)
 8005a72:	fba3 2302 	umull	r2, r3, r3, r2
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	011e      	lsls	r6, r3, #4
 8005a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f04f 0100 	mov.w	r1, #0
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	1894      	adds	r4, r2, r2
 8005a88:	60bc      	str	r4, [r7, #8]
 8005a8a:	415b      	adcs	r3, r3
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a92:	1812      	adds	r2, r2, r0
 8005a94:	eb41 0303 	adc.w	r3, r1, r3
 8005a98:	f04f 0400 	mov.w	r4, #0
 8005a9c:	f04f 0500 	mov.w	r5, #0
 8005aa0:	00dd      	lsls	r5, r3, #3
 8005aa2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005aa6:	00d4      	lsls	r4, r2, #3
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	462b      	mov	r3, r5
 8005aac:	1814      	adds	r4, r2, r0
 8005aae:	64bc      	str	r4, [r7, #72]	; 0x48
 8005ab0:	414b      	adcs	r3, r1
 8005ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f04f 0100 	mov.w	r1, #0
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	008b      	lsls	r3, r1, #2
 8005ac8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005acc:	0082      	lsls	r2, r0, #2
 8005ace:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ad2:	f7fa fb9f 	bl	8000214 <__aeabi_uldivmod>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4b2f      	ldr	r3, [pc, #188]	; (8005b98 <UART_SetConfig+0x38c>)
 8005adc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	2164      	movs	r1, #100	; 0x64
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	3332      	adds	r3, #50	; 0x32
 8005aee:	4a2a      	ldr	r2, [pc, #168]	; (8005b98 <UART_SetConfig+0x38c>)
 8005af0:	fba2 2303 	umull	r2, r3, r2, r3
 8005af4:	095b      	lsrs	r3, r3, #5
 8005af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005afa:	441e      	add	r6, r3
 8005afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005afe:	4618      	mov	r0, r3
 8005b00:	f04f 0100 	mov.w	r1, #0
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	1894      	adds	r4, r2, r2
 8005b0a:	603c      	str	r4, [r7, #0]
 8005b0c:	415b      	adcs	r3, r3
 8005b0e:	607b      	str	r3, [r7, #4]
 8005b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b14:	1812      	adds	r2, r2, r0
 8005b16:	eb41 0303 	adc.w	r3, r1, r3
 8005b1a:	f04f 0400 	mov.w	r4, #0
 8005b1e:	f04f 0500 	mov.w	r5, #0
 8005b22:	00dd      	lsls	r5, r3, #3
 8005b24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b28:	00d4      	lsls	r4, r2, #3
 8005b2a:	4622      	mov	r2, r4
 8005b2c:	462b      	mov	r3, r5
 8005b2e:	eb12 0a00 	adds.w	sl, r2, r0
 8005b32:	eb43 0b01 	adc.w	fp, r3, r1
 8005b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f04f 0100 	mov.w	r1, #0
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	008b      	lsls	r3, r1, #2
 8005b4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b4e:	0082      	lsls	r2, r0, #2
 8005b50:	4650      	mov	r0, sl
 8005b52:	4659      	mov	r1, fp
 8005b54:	f7fa fb5e 	bl	8000214 <__aeabi_uldivmod>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <UART_SetConfig+0x38c>)
 8005b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	2164      	movs	r1, #100	; 0x64
 8005b66:	fb01 f303 	mul.w	r3, r1, r3
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	3332      	adds	r3, #50	; 0x32
 8005b70:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <UART_SetConfig+0x38c>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	f003 020f 	and.w	r2, r3, #15
 8005b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4432      	add	r2, r6
 8005b82:	609a      	str	r2, [r3, #8]
}
 8005b84:	bf00      	nop
 8005b86:	377c      	adds	r7, #124	; 0x7c
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8e:	bf00      	nop
 8005b90:	40011000 	.word	0x40011000
 8005b94:	40011400 	.word	0x40011400
 8005b98:	51eb851f 	.word	0x51eb851f

08005b9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	f107 001c 	add.w	r0, r7, #28
 8005baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d122      	bne.n	8005bfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d105      	bne.n	8005bee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f001 fac0 	bl	8007174 <USB_CoreReset>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	73fb      	strb	r3, [r7, #15]
 8005bf8:	e01a      	b.n	8005c30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 fab4 	bl	8007174 <USB_CoreReset>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38
 8005c22:	e005      	b.n	8005c30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d10b      	bne.n	8005c4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f043 0206 	orr.w	r2, r3, #6
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f043 0220 	orr.w	r2, r3, #32
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c5a:	b004      	add	sp, #16
 8005c5c:	4770      	bx	lr
	...

08005c60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d165      	bne.n	8005d40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4a41      	ldr	r2, [pc, #260]	; (8005d7c <USB_SetTurnaroundTime+0x11c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d906      	bls.n	8005c8a <USB_SetTurnaroundTime+0x2a>
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4a40      	ldr	r2, [pc, #256]	; (8005d80 <USB_SetTurnaroundTime+0x120>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d202      	bcs.n	8005c8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c84:	230f      	movs	r3, #15
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e062      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	4a3c      	ldr	r2, [pc, #240]	; (8005d80 <USB_SetTurnaroundTime+0x120>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d306      	bcc.n	8005ca0 <USB_SetTurnaroundTime+0x40>
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4a3b      	ldr	r2, [pc, #236]	; (8005d84 <USB_SetTurnaroundTime+0x124>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d202      	bcs.n	8005ca0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c9a:	230e      	movs	r3, #14
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	e057      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4a38      	ldr	r2, [pc, #224]	; (8005d84 <USB_SetTurnaroundTime+0x124>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d306      	bcc.n	8005cb6 <USB_SetTurnaroundTime+0x56>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4a37      	ldr	r2, [pc, #220]	; (8005d88 <USB_SetTurnaroundTime+0x128>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d202      	bcs.n	8005cb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005cb0:	230d      	movs	r3, #13
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	e04c      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4a33      	ldr	r2, [pc, #204]	; (8005d88 <USB_SetTurnaroundTime+0x128>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d306      	bcc.n	8005ccc <USB_SetTurnaroundTime+0x6c>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	4a32      	ldr	r2, [pc, #200]	; (8005d8c <USB_SetTurnaroundTime+0x12c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d802      	bhi.n	8005ccc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005cc6:	230c      	movs	r3, #12
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e041      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4a2f      	ldr	r2, [pc, #188]	; (8005d8c <USB_SetTurnaroundTime+0x12c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d906      	bls.n	8005ce2 <USB_SetTurnaroundTime+0x82>
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4a2e      	ldr	r2, [pc, #184]	; (8005d90 <USB_SetTurnaroundTime+0x130>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d802      	bhi.n	8005ce2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005cdc:	230b      	movs	r3, #11
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	e036      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4a2a      	ldr	r2, [pc, #168]	; (8005d90 <USB_SetTurnaroundTime+0x130>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d906      	bls.n	8005cf8 <USB_SetTurnaroundTime+0x98>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	4a29      	ldr	r2, [pc, #164]	; (8005d94 <USB_SetTurnaroundTime+0x134>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d802      	bhi.n	8005cf8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005cf2:	230a      	movs	r3, #10
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	e02b      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <USB_SetTurnaroundTime+0x134>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d906      	bls.n	8005d0e <USB_SetTurnaroundTime+0xae>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4a25      	ldr	r2, [pc, #148]	; (8005d98 <USB_SetTurnaroundTime+0x138>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d202      	bcs.n	8005d0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005d08:	2309      	movs	r3, #9
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	e020      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	4a21      	ldr	r2, [pc, #132]	; (8005d98 <USB_SetTurnaroundTime+0x138>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d306      	bcc.n	8005d24 <USB_SetTurnaroundTime+0xc4>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4a20      	ldr	r2, [pc, #128]	; (8005d9c <USB_SetTurnaroundTime+0x13c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d802      	bhi.n	8005d24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005d1e:	2308      	movs	r3, #8
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	e015      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4a1d      	ldr	r2, [pc, #116]	; (8005d9c <USB_SetTurnaroundTime+0x13c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d906      	bls.n	8005d3a <USB_SetTurnaroundTime+0xda>
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <USB_SetTurnaroundTime+0x140>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d202      	bcs.n	8005d3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005d34:	2307      	movs	r3, #7
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	e00a      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005d3a:	2306      	movs	r3, #6
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	e007      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005d46:	2309      	movs	r3, #9
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	e001      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005d4c:	2309      	movs	r3, #9
 8005d4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	029b      	lsls	r3, r3, #10
 8005d64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	00d8acbf 	.word	0x00d8acbf
 8005d80:	00e4e1c0 	.word	0x00e4e1c0
 8005d84:	00f42400 	.word	0x00f42400
 8005d88:	01067380 	.word	0x01067380
 8005d8c:	011a499f 	.word	0x011a499f
 8005d90:	01312cff 	.word	0x01312cff
 8005d94:	014ca43f 	.word	0x014ca43f
 8005d98:	016e3600 	.word	0x016e3600
 8005d9c:	01a6ab1f 	.word	0x01a6ab1f
 8005da0:	01e84800 	.word	0x01e84800

08005da4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f043 0201 	orr.w	r2, r3, #1
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f023 0201 	bic.w	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d106      	bne.n	8005e14 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60da      	str	r2, [r3, #12]
 8005e12:	e00b      	b.n	8005e2c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60da      	str	r2, [r3, #12]
 8005e26:	e001      	b.n	8005e2c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e003      	b.n	8005e34 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005e2c:	2032      	movs	r0, #50	; 0x32
 8005e2e:	f7fb febf 	bl	8001bb0 <HAL_Delay>

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b086      	sub	sp, #24
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	e009      	b.n	8005e70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	3340      	adds	r3, #64	; 0x40
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	2200      	movs	r2, #0
 8005e68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2b0e      	cmp	r3, #14
 8005e74:	d9f2      	bls.n	8005e5c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d11c      	bne.n	8005eb6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8a:	f043 0302 	orr.w	r3, r3, #2
 8005e8e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	e005      	b.n	8005ec2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ec8:	461a      	mov	r2, r3
 8005eca:	2300      	movs	r3, #0
 8005ecc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005edc:	461a      	mov	r2, r3
 8005ede:	680b      	ldr	r3, [r1, #0]
 8005ee0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d10c      	bne.n	8005f02 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d104      	bne.n	8005ef8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005eee:	2100      	movs	r1, #0
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f949 	bl	8006188 <USB_SetDevSpeed>
 8005ef6:	e008      	b.n	8005f0a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ef8:	2101      	movs	r1, #1
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f944 	bl	8006188 <USB_SetDevSpeed>
 8005f00:	e003      	b.n	8005f0a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f02:	2103      	movs	r1, #3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f93f 	bl	8006188 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f0a:	2110      	movs	r1, #16
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f8f3 	bl	80060f8 <USB_FlushTxFifo>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f911 	bl	8006144 <USB_FlushRxFifo>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f32:	461a      	mov	r2, r3
 8005f34:	2300      	movs	r3, #0
 8005f36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2300      	movs	r3, #0
 8005f42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f50:	2300      	movs	r3, #0
 8005f52:	613b      	str	r3, [r7, #16]
 8005f54:	e043      	b.n	8005fde <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f6c:	d118      	bne.n	8005fa0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f80:	461a      	mov	r2, r3
 8005f82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	e013      	b.n	8005fb2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f96:	461a      	mov	r2, r3
 8005f98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	e008      	b.n	8005fb2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	461a      	mov	r2, r3
 8005fae:	2300      	movs	r3, #0
 8005fb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d3b7      	bcc.n	8005f56 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	e043      	b.n	8006074 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006002:	d118      	bne.n	8006036 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006016:	461a      	mov	r2, r3
 8006018:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	e013      	b.n	8006048 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602c:	461a      	mov	r2, r3
 800602e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	e008      	b.n	8006048 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006042:	461a      	mov	r2, r3
 8006044:	2300      	movs	r3, #0
 8006046:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006054:	461a      	mov	r2, r3
 8006056:	2300      	movs	r3, #0
 8006058:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006066:	461a      	mov	r2, r3
 8006068:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800606c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	3301      	adds	r3, #1
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	429a      	cmp	r2, r3
 800607a:	d3b7      	bcc.n	8005fec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800608a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800608e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800609c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d105      	bne.n	80060b0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	f043 0210 	orr.w	r2, r3, #16
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	4b0f      	ldr	r3, [pc, #60]	; (80060f4 <USB_DevInit+0x2b8>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	f043 0208 	orr.w	r2, r3, #8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d107      	bne.n	80060e4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060dc:	f043 0304 	orr.w	r3, r3, #4
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060f0:	b004      	add	sp, #16
 80060f2:	4770      	bx	lr
 80060f4:	803c3800 	.word	0x803c3800

080060f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	019b      	lsls	r3, r3, #6
 800610a:	f043 0220 	orr.w	r2, r3, #32
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4a09      	ldr	r2, [pc, #36]	; (8006140 <USB_FlushTxFifo+0x48>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d901      	bls.n	8006124 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e006      	b.n	8006132 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b20      	cmp	r3, #32
 800612e:	d0f0      	beq.n	8006112 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	00030d40 	.word	0x00030d40

08006144 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2210      	movs	r2, #16
 8006154:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3301      	adds	r3, #1
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4a09      	ldr	r2, [pc, #36]	; (8006184 <USB_FlushRxFifo+0x40>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d901      	bls.n	8006168 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e006      	b.n	8006176 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b10      	cmp	r3, #16
 8006172:	d0f0      	beq.n	8006156 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	00030d40 	.word	0x00030d40

08006188 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	68f9      	ldr	r1, [r7, #12]
 80061a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a8:	4313      	orrs	r3, r2
 80061aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b087      	sub	sp, #28
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0306 	and.w	r3, r3, #6
 80061d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d102      	bne.n	80061e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80061da:	2300      	movs	r3, #0
 80061dc:	75fb      	strb	r3, [r7, #23]
 80061de:	e00a      	b.n	80061f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d002      	beq.n	80061ec <USB_GetDevSpeed+0x32>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2b06      	cmp	r3, #6
 80061ea:	d102      	bne.n	80061f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80061ec:	2302      	movs	r3, #2
 80061ee:	75fb      	strb	r3, [r7, #23]
 80061f0:	e001      	b.n	80061f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80061f2:	230f      	movs	r3, #15
 80061f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d13a      	bne.n	8006296 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	2101      	movs	r1, #1
 8006232:	fa01 f303 	lsl.w	r3, r1, r3
 8006236:	b29b      	uxth	r3, r3
 8006238:	68f9      	ldr	r1, [r7, #12]
 800623a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800623e:	4313      	orrs	r3, r2
 8006240:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d155      	bne.n	8006304 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	78db      	ldrb	r3, [r3, #3]
 8006272:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006274:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	059b      	lsls	r3, r3, #22
 800627a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800627c:	4313      	orrs	r3, r2
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	440a      	add	r2, r1
 8006286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800628e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	e036      	b.n	8006304 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629c:	69da      	ldr	r2, [r3, #28]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	2101      	movs	r1, #1
 80062a8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ac:	041b      	lsls	r3, r3, #16
 80062ae:	68f9      	ldr	r1, [r7, #12]
 80062b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062b4:	4313      	orrs	r3, r2
 80062b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d11a      	bne.n	8006304 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	78db      	ldrb	r3, [r3, #3]
 80062e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062ea:	430b      	orrs	r3, r1
 80062ec:	4313      	orrs	r3, r2
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006302:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
	...

08006314 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d161      	bne.n	80063f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006346:	d11f      	bne.n	8006388 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006362:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006366:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006382:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006386:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	2101      	movs	r1, #1
 800639a:	fa01 f303 	lsl.w	r3, r1, r3
 800639e:	b29b      	uxth	r3, r3
 80063a0:	43db      	mvns	r3, r3
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a8:	4013      	ands	r3, r2
 80063aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b2:	69da      	ldr	r2, [r3, #28]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	2101      	movs	r1, #1
 80063be:	fa01 f303 	lsl.w	r3, r1, r3
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	43db      	mvns	r3, r3
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063cc:	4013      	ands	r3, r2
 80063ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	0159      	lsls	r1, r3, #5
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	440b      	add	r3, r1
 80063e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ea:	4619      	mov	r1, r3
 80063ec:	4b35      	ldr	r3, [pc, #212]	; (80064c4 <USB_DeactivateEndpoint+0x1b0>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]
 80063f2:	e060      	b.n	80064b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800640a:	d11f      	bne.n	800644c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	440a      	add	r2, r1
 8006422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800642a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	440a      	add	r2, r1
 8006442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006446:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800644a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	2101      	movs	r1, #1
 800645e:	fa01 f303 	lsl.w	r3, r1, r3
 8006462:	041b      	lsls	r3, r3, #16
 8006464:	43db      	mvns	r3, r3
 8006466:	68f9      	ldr	r1, [r7, #12]
 8006468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800646c:	4013      	ands	r3, r2
 800646e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	2101      	movs	r1, #1
 8006482:	fa01 f303 	lsl.w	r3, r1, r3
 8006486:	041b      	lsls	r3, r3, #16
 8006488:	43db      	mvns	r3, r3
 800648a:	68f9      	ldr	r1, [r7, #12]
 800648c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006490:	4013      	ands	r3, r2
 8006492:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	0159      	lsls	r1, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	440b      	add	r3, r1
 80064aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ae:	4619      	mov	r1, r3
 80064b0:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <USB_DeactivateEndpoint+0x1b4>)
 80064b2:	4013      	ands	r3, r2
 80064b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	ec337800 	.word	0xec337800
 80064c8:	eff37800 	.word	0xeff37800

080064cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08a      	sub	sp, #40	; 0x28
 80064d0:	af02      	add	r7, sp, #8
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4613      	mov	r3, r2
 80064d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	785b      	ldrb	r3, [r3, #1]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	f040 815c 	bne.w	80067a6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d132      	bne.n	800655c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	440a      	add	r2, r1
 800650c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006510:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006514:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006518:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	440a      	add	r2, r1
 8006530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006538:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	440a      	add	r2, r1
 8006550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006554:	0cdb      	lsrs	r3, r3, #19
 8006556:	04db      	lsls	r3, r3, #19
 8006558:	6113      	str	r3, [r2, #16]
 800655a:	e074      	b.n	8006646 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	440a      	add	r2, r1
 8006572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006576:	0cdb      	lsrs	r3, r3, #19
 8006578:	04db      	lsls	r3, r3, #19
 800657a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	69fa      	ldr	r2, [r7, #28]
 8006590:	440a      	add	r2, r1
 8006592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006596:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800659a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800659e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6959      	ldr	r1, [r3, #20]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	440b      	add	r3, r1
 80065b8:	1e59      	subs	r1, r3, #1
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	fbb1 f3f3 	udiv	r3, r1, r3
 80065c2:	04d9      	lsls	r1, r3, #19
 80065c4:	4b9d      	ldr	r3, [pc, #628]	; (800683c <USB_EPStartXfer+0x370>)
 80065c6:	400b      	ands	r3, r1
 80065c8:	69b9      	ldr	r1, [r7, #24]
 80065ca:	0148      	lsls	r0, r1, #5
 80065cc:	69f9      	ldr	r1, [r7, #28]
 80065ce:	4401      	add	r1, r0
 80065d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065d4:	4313      	orrs	r3, r2
 80065d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ee:	69b9      	ldr	r1, [r7, #24]
 80065f0:	0148      	lsls	r0, r1, #5
 80065f2:	69f9      	ldr	r1, [r7, #28]
 80065f4:	4401      	add	r1, r0
 80065f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065fa:	4313      	orrs	r3, r2
 80065fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	78db      	ldrb	r3, [r3, #3]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d11f      	bne.n	8006646 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006620:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006624:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	0151      	lsls	r1, r2, #5
 8006638:	69fa      	ldr	r2, [r7, #28]
 800663a:	440a      	add	r2, r1
 800663c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006644:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006646:	79fb      	ldrb	r3, [r7, #7]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d14b      	bne.n	80066e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d009      	beq.n	8006668 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006660:	461a      	mov	r2, r3
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	78db      	ldrb	r3, [r3, #3]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d128      	bne.n	80066c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667c:	2b00      	cmp	r3, #0
 800667e:	d110      	bne.n	80066a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	440a      	add	r2, r1
 8006696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	e00f      	b.n	80066c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	69fa      	ldr	r2, [r7, #28]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	e12f      	b.n	8006944 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006702:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	78db      	ldrb	r3, [r3, #3]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d015      	beq.n	8006738 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 8117 	beq.w	8006944 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	2101      	movs	r1, #1
 8006728:	fa01 f303 	lsl.w	r3, r1, r3
 800672c:	69f9      	ldr	r1, [r7, #28]
 800672e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006732:	4313      	orrs	r3, r2
 8006734:	634b      	str	r3, [r1, #52]	; 0x34
 8006736:	e105      	b.n	8006944 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d110      	bne.n	800676a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	0151      	lsls	r1, r2, #5
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	440a      	add	r2, r1
 800675e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006762:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	e00f      	b.n	800678a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	440a      	add	r2, r1
 8006780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006788:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	68d9      	ldr	r1, [r3, #12]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	781a      	ldrb	r2, [r3, #0]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	b298      	uxth	r0, r3
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	4603      	mov	r3, r0
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 fa2b 	bl	8006bfa <USB_WritePacket>
 80067a4:	e0ce      	b.n	8006944 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	0151      	lsls	r1, r2, #5
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	440a      	add	r2, r1
 80067bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c0:	0cdb      	lsrs	r3, r3, #19
 80067c2:	04db      	lsls	r3, r3, #19
 80067c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d126      	bne.n	8006840 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fe:	691a      	ldr	r2, [r3, #16]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006808:	69b9      	ldr	r1, [r7, #24]
 800680a:	0148      	lsls	r0, r1, #5
 800680c:	69f9      	ldr	r1, [r7, #28]
 800680e:	4401      	add	r1, r0
 8006810:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006814:	4313      	orrs	r3, r2
 8006816:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	0151      	lsls	r1, r2, #5
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	440a      	add	r2, r1
 800682e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006832:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006836:	6113      	str	r3, [r2, #16]
 8006838:	e036      	b.n	80068a8 <USB_EPStartXfer+0x3dc>
 800683a:	bf00      	nop
 800683c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	695a      	ldr	r2, [r3, #20]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	4413      	add	r3, r2
 800684a:	1e5a      	subs	r2, r3, #1
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	fbb2 f3f3 	udiv	r3, r2, r3
 8006854:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	8afb      	ldrh	r3, [r7, #22]
 8006866:	04d9      	lsls	r1, r3, #19
 8006868:	4b39      	ldr	r3, [pc, #228]	; (8006950 <USB_EPStartXfer+0x484>)
 800686a:	400b      	ands	r3, r1
 800686c:	69b9      	ldr	r1, [r7, #24]
 800686e:	0148      	lsls	r0, r1, #5
 8006870:	69f9      	ldr	r1, [r7, #28]
 8006872:	4401      	add	r1, r0
 8006874:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006878:	4313      	orrs	r3, r2
 800687a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	8af9      	ldrh	r1, [r7, #22]
 8006890:	fb01 f303 	mul.w	r3, r1, r3
 8006894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006898:	69b9      	ldr	r1, [r7, #24]
 800689a:	0148      	lsls	r0, r1, #5
 800689c:	69f9      	ldr	r1, [r7, #28]
 800689e:	4401      	add	r1, r0
 80068a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068a4:	4313      	orrs	r3, r2
 80068a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d10d      	bne.n	80068ca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d009      	beq.n	80068ca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	68d9      	ldr	r1, [r3, #12]
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c6:	460a      	mov	r2, r1
 80068c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	78db      	ldrb	r3, [r3, #3]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d128      	bne.n	8006924 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d110      	bne.n	8006904 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	0151      	lsls	r1, r2, #5
 80068f4:	69fa      	ldr	r2, [r7, #28]
 80068f6:	440a      	add	r2, r1
 80068f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	e00f      	b.n	8006924 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	0151      	lsls	r1, r2, #5
 8006916:	69fa      	ldr	r2, [r7, #28]
 8006918:	440a      	add	r2, r1
 800691a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800691e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006922:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	69fa      	ldr	r2, [r7, #28]
 8006938:	440a      	add	r2, r1
 800693a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006942:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3720      	adds	r7, #32
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	1ff80000 	.word	0x1ff80000

08006954 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	4613      	mov	r3, r2
 8006960:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	785b      	ldrb	r3, [r3, #1]
 8006970:	2b01      	cmp	r3, #1
 8006972:	f040 80cd 	bne.w	8006b10 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d132      	bne.n	80069e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	0151      	lsls	r1, r2, #5
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	440a      	add	r2, r1
 8006994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006998:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800699c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069dc:	0cdb      	lsrs	r3, r3, #19
 80069de:	04db      	lsls	r3, r3, #19
 80069e0:	6113      	str	r3, [r2, #16]
 80069e2:	e04e      	b.n	8006a82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069fe:	0cdb      	lsrs	r3, r3, #19
 8006a00:	04db      	lsls	r3, r3, #19
 8006a02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	0151      	lsls	r1, r2, #5
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	440a      	add	r2, r1
 8006a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a26:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	695a      	ldr	r2, [r3, #20]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d903      	bls.n	8006a3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a72:	6939      	ldr	r1, [r7, #16]
 8006a74:	0148      	lsls	r0, r1, #5
 8006a76:	6979      	ldr	r1, [r7, #20]
 8006a78:	4401      	add	r1, r0
 8006a7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a82:	79fb      	ldrb	r3, [r7, #7]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d11e      	bne.n	8006ac6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d009      	beq.n	8006aa4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	0151      	lsls	r1, r2, #5
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	440a      	add	r2, r1
 8006aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006abe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	e092      	b.n	8006bec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	0151      	lsls	r1, r2, #5
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	440a      	add	r2, r1
 8006adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ae4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d07e      	beq.n	8006bec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	2101      	movs	r1, #1
 8006b00:	fa01 f303 	lsl.w	r3, r1, r3
 8006b04:	6979      	ldr	r1, [r7, #20]
 8006b06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	634b      	str	r3, [r1, #52]	; 0x34
 8006b0e:	e06d      	b.n	8006bec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b2a:	0cdb      	lsrs	r3, r3, #19
 8006b2c:	04db      	lsls	r3, r3, #19
 8006b2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	0151      	lsls	r1, r2, #5
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	440a      	add	r2, r1
 8006b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b52:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b90:	691a      	ldr	r2, [r3, #16]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b9a:	6939      	ldr	r1, [r7, #16]
 8006b9c:	0148      	lsls	r0, r1, #5
 8006b9e:	6979      	ldr	r1, [r7, #20]
 8006ba0:	4401      	add	r1, r0
 8006ba2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d10d      	bne.n	8006bcc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d009      	beq.n	8006bcc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	68d9      	ldr	r1, [r3, #12]
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc8:	460a      	mov	r2, r1
 8006bca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	0151      	lsls	r1, r2, #5
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	440a      	add	r2, r1
 8006be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006be6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b089      	sub	sp, #36	; 0x24
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	4611      	mov	r1, r2
 8006c06:	461a      	mov	r2, r3
 8006c08:	460b      	mov	r3, r1
 8006c0a:	71fb      	strb	r3, [r7, #7]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006c18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d11a      	bne.n	8006c56 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c20:	88bb      	ldrh	r3, [r7, #4]
 8006c22:	3303      	adds	r3, #3
 8006c24:	089b      	lsrs	r3, r3, #2
 8006c26:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61bb      	str	r3, [r7, #24]
 8006c2c:	e00f      	b.n	8006c4e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
 8006c30:	031a      	lsls	r2, r3, #12
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	3304      	adds	r3, #4
 8006c46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d3eb      	bcc.n	8006c2e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3724      	adds	r7, #36	; 0x24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b089      	sub	sp, #36	; 0x24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	3303      	adds	r3, #3
 8006c7e:	089b      	lsrs	r3, r3, #2
 8006c80:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006c82:	2300      	movs	r3, #0
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	e00b      	b.n	8006ca0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	3304      	adds	r3, #4
 8006c98:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d3ef      	bcc.n	8006c88 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006ca8:	69fb      	ldr	r3, [r7, #28]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3724      	adds	r7, #36	; 0x24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b085      	sub	sp, #20
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	785b      	ldrb	r3, [r3, #1]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d12c      	bne.n	8006d2c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	db12      	blt.n	8006d0a <USB_EPSetStall+0x54>
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00f      	beq.n	8006d0a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d08:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	e02b      	b.n	8006d84 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	db12      	blt.n	8006d64 <USB_EPSetStall+0xae>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00f      	beq.n	8006d64 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d62:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b085      	sub	sp, #20
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d128      	bne.n	8006e00 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	0151      	lsls	r1, r2, #5
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	440a      	add	r2, r1
 8006dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	78db      	ldrb	r3, [r3, #3]
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d003      	beq.n	8006dde <USB_EPClearStall+0x4c>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	78db      	ldrb	r3, [r3, #3]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d138      	bne.n	8006e50 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	e027      	b.n	8006e50 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	78db      	ldrb	r3, [r3, #3]
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d003      	beq.n	8006e30 <USB_EPClearStall+0x9e>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	78db      	ldrb	r3, [r3, #3]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d10f      	bne.n	8006e50 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	0151      	lsls	r1, r2, #5
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	440a      	add	r2, r1
 8006e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e4e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b085      	sub	sp, #20
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e80:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e92:	68f9      	ldr	r1, [r7, #12]
 8006e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b085      	sub	sp, #20
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ec4:	f023 0303 	bic.w	r3, r3, #3
 8006ec8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ed8:	f023 0302 	bic.w	r3, r3, #2
 8006edc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f06:	f023 0303 	bic.w	r3, r3, #3
 8006f0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f1a:	f043 0302 	orr.w	r3, r3, #2
 8006f1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b085      	sub	sp, #20
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	4013      	ands	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f46:	68fb      	ldr	r3, [r7, #12]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	4013      	ands	r3, r2
 8006f76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	0c1b      	lsrs	r3, r3, #16
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	4013      	ands	r3, r2
 8006faa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	b29b      	uxth	r3, r3
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006fcc:	78fb      	ldrb	r3, [r7, #3]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fea:	68bb      	ldr	r3, [r7, #8]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	fa22 f303 	lsr.w	r3, r2, r3
 8007028:	01db      	lsls	r3, r3, #7
 800702a:	b2db      	uxtb	r3, r3
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4013      	ands	r3, r2
 8007044:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007046:	68bb      	ldr	r3, [r7, #8]
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	f003 0301 	and.w	r3, r3, #1
}
 8007064:	4618      	mov	r0, r3
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800708e:	f023 0307 	bic.w	r3, r3, #7
 8007092:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
	...

080070b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	460b      	mov	r3, r1
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	333c      	adds	r3, #60	; 0x3c
 80070ce:	3304      	adds	r3, #4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	4a26      	ldr	r2, [pc, #152]	; (8007170 <USB_EP0_OutStart+0xb8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d90a      	bls.n	80070f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ec:	d101      	bne.n	80070f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e037      	b.n	8007162 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f8:	461a      	mov	r2, r3
 80070fa:	2300      	movs	r3, #0
 80070fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007120:	f043 0318 	orr.w	r3, r3, #24
 8007124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007134:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007138:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800713a:	7afb      	ldrb	r3, [r7, #11]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d10f      	bne.n	8007160 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007146:	461a      	mov	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800715e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	4f54300a 	.word	0x4f54300a

08007174 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3301      	adds	r3, #1
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4a13      	ldr	r2, [pc, #76]	; (80071d8 <USB_CoreReset+0x64>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d901      	bls.n	8007192 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e01b      	b.n	80071ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	daf2      	bge.n	8007180 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f043 0201 	orr.w	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <USB_CoreReset+0x64>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d901      	bls.n	80071bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e006      	b.n	80071ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d0f0      	beq.n	80071aa <USB_CoreReset+0x36>

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	00030d40 	.word	0x00030d40

080071dc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80071e8:	2010      	movs	r0, #16
 80071ea:	f001 ff97 	bl	800911c <USBD_static_malloc>
 80071ee:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d105      	bne.n	8007202 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80071fe:	2302      	movs	r3, #2
 8007200:	e01b      	b.n	800723a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7c1b      	ldrb	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d103      	bne.n	800721a <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2207      	movs	r2, #7
 8007216:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007218:	e002      	b.n	8007220 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	220a      	movs	r2, #10
 800721e:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007220:	2304      	movs	r3, #4
 8007222:	2203      	movs	r2, #3
 8007224:	2181      	movs	r1, #129	; 0x81
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 fe19 	bl	8008e5e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	460b      	mov	r3, r1
 800724c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800724e:	2181      	movs	r1, #129	; 0x81
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 fe2a 	bl	8008eaa <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007268:	2b00      	cmp	r3, #0
 800726a:	d009      	beq.n	8007280 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007272:	4618      	mov	r0, r3
 8007274:	f001 ff60 	bl	8009138 <USBD_static_free>
    pdev->pClassData = NULL;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800729c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e0e8      	b.n	8007482 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d046      	beq.n	800734a <USBD_HID_Setup+0xbe>
 80072bc:	2b20      	cmp	r3, #32
 80072be:	f040 80d8 	bne.w	8007472 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	785b      	ldrb	r3, [r3, #1]
 80072c6:	3b02      	subs	r3, #2
 80072c8:	2b09      	cmp	r3, #9
 80072ca:	d836      	bhi.n	800733a <USBD_HID_Setup+0xae>
 80072cc:	a201      	add	r2, pc, #4	; (adr r2, 80072d4 <USBD_HID_Setup+0x48>)
 80072ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d2:	bf00      	nop
 80072d4:	0800732b 	.word	0x0800732b
 80072d8:	0800730b 	.word	0x0800730b
 80072dc:	0800733b 	.word	0x0800733b
 80072e0:	0800733b 	.word	0x0800733b
 80072e4:	0800733b 	.word	0x0800733b
 80072e8:	0800733b 	.word	0x0800733b
 80072ec:	0800733b 	.word	0x0800733b
 80072f0:	0800733b 	.word	0x0800733b
 80072f4:	08007319 	.word	0x08007319
 80072f8:	080072fd 	.word	0x080072fd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	885b      	ldrh	r3, [r3, #2]
 8007300:	b2db      	uxtb	r3, r3
 8007302:	461a      	mov	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	601a      	str	r2, [r3, #0]
          break;
 8007308:	e01e      	b.n	8007348 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 fa4c 	bl	80087ae <USBD_CtlSendData>
          break;
 8007316:	e017      	b.n	8007348 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	885b      	ldrh	r3, [r3, #2]
 800731c:	0a1b      	lsrs	r3, r3, #8
 800731e:	b29b      	uxth	r3, r3
 8007320:	b2db      	uxtb	r3, r3
 8007322:	461a      	mov	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	605a      	str	r2, [r3, #4]
          break;
 8007328:	e00e      	b.n	8007348 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3304      	adds	r3, #4
 800732e:	2201      	movs	r2, #1
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 fa3b 	bl	80087ae <USBD_CtlSendData>
          break;
 8007338:	e006      	b.n	8007348 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 f9c5 	bl	80086cc <USBD_CtlError>
          ret = USBD_FAIL;
 8007342:	2303      	movs	r3, #3
 8007344:	75fb      	strb	r3, [r7, #23]
          break;
 8007346:	bf00      	nop
      }
      break;
 8007348:	e09a      	b.n	8007480 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	785b      	ldrb	r3, [r3, #1]
 800734e:	2b0b      	cmp	r3, #11
 8007350:	f200 8086 	bhi.w	8007460 <USBD_HID_Setup+0x1d4>
 8007354:	a201      	add	r2, pc, #4	; (adr r2, 800735c <USBD_HID_Setup+0xd0>)
 8007356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735a:	bf00      	nop
 800735c:	0800738d 	.word	0x0800738d
 8007360:	0800746f 	.word	0x0800746f
 8007364:	08007461 	.word	0x08007461
 8007368:	08007461 	.word	0x08007461
 800736c:	08007461 	.word	0x08007461
 8007370:	08007461 	.word	0x08007461
 8007374:	080073b7 	.word	0x080073b7
 8007378:	08007461 	.word	0x08007461
 800737c:	08007461 	.word	0x08007461
 8007380:	08007461 	.word	0x08007461
 8007384:	0800740f 	.word	0x0800740f
 8007388:	08007439 	.word	0x08007439
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b03      	cmp	r3, #3
 8007396:	d107      	bne.n	80073a8 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007398:	f107 030a 	add.w	r3, r7, #10
 800739c:	2202      	movs	r2, #2
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 fa04 	bl	80087ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073a6:	e063      	b.n	8007470 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 f98e 	bl	80086cc <USBD_CtlError>
            ret = USBD_FAIL;
 80073b0:	2303      	movs	r3, #3
 80073b2:	75fb      	strb	r3, [r7, #23]
          break;
 80073b4:	e05c      	b.n	8007470 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	885b      	ldrh	r3, [r3, #2]
 80073ba:	0a1b      	lsrs	r3, r3, #8
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b22      	cmp	r3, #34	; 0x22
 80073c0:	d108      	bne.n	80073d4 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	88db      	ldrh	r3, [r3, #6]
 80073c6:	2b4a      	cmp	r3, #74	; 0x4a
 80073c8:	bf28      	it	cs
 80073ca:	234a      	movcs	r3, #74	; 0x4a
 80073cc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80073ce:	4b2f      	ldr	r3, [pc, #188]	; (800748c <USBD_HID_Setup+0x200>)
 80073d0:	613b      	str	r3, [r7, #16]
 80073d2:	e015      	b.n	8007400 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	885b      	ldrh	r3, [r3, #2]
 80073d8:	0a1b      	lsrs	r3, r3, #8
 80073da:	b29b      	uxth	r3, r3
 80073dc:	2b21      	cmp	r3, #33	; 0x21
 80073de:	d108      	bne.n	80073f2 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 80073e0:	4b2b      	ldr	r3, [pc, #172]	; (8007490 <USBD_HID_Setup+0x204>)
 80073e2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	88db      	ldrh	r3, [r3, #6]
 80073e8:	2b09      	cmp	r3, #9
 80073ea:	bf28      	it	cs
 80073ec:	2309      	movcs	r3, #9
 80073ee:	82bb      	strh	r3, [r7, #20]
 80073f0:	e006      	b.n	8007400 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 f969 	bl	80086cc <USBD_CtlError>
            ret = USBD_FAIL;
 80073fa:	2303      	movs	r3, #3
 80073fc:	75fb      	strb	r3, [r7, #23]
            break;
 80073fe:	e037      	b.n	8007470 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007400:	8abb      	ldrh	r3, [r7, #20]
 8007402:	461a      	mov	r2, r3
 8007404:	6939      	ldr	r1, [r7, #16]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 f9d1 	bl	80087ae <USBD_CtlSendData>
          break;
 800740c:	e030      	b.n	8007470 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b03      	cmp	r3, #3
 8007418:	d107      	bne.n	800742a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3308      	adds	r3, #8
 800741e:	2201      	movs	r2, #1
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 f9c3 	bl	80087ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007428:	e022      	b.n	8007470 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f001 f94d 	bl	80086cc <USBD_CtlError>
            ret = USBD_FAIL;
 8007432:	2303      	movs	r3, #3
 8007434:	75fb      	strb	r3, [r7, #23]
          break;
 8007436:	e01b      	b.n	8007470 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b03      	cmp	r3, #3
 8007442:	d106      	bne.n	8007452 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	885b      	ldrh	r3, [r3, #2]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	461a      	mov	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007450:	e00e      	b.n	8007470 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 f939 	bl	80086cc <USBD_CtlError>
            ret = USBD_FAIL;
 800745a:	2303      	movs	r3, #3
 800745c:	75fb      	strb	r3, [r7, #23]
          break;
 800745e:	e007      	b.n	8007470 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 f932 	bl	80086cc <USBD_CtlError>
          ret = USBD_FAIL;
 8007468:	2303      	movs	r3, #3
 800746a:	75fb      	strb	r3, [r7, #23]
          break;
 800746c:	e000      	b.n	8007470 <USBD_HID_Setup+0x1e4>
          break;
 800746e:	bf00      	nop
      }
      break;
 8007470:	e006      	b.n	8007480 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 f929 	bl	80086cc <USBD_CtlError>
      ret = USBD_FAIL;
 800747a:	2303      	movs	r3, #3
 800747c:	75fb      	strb	r3, [r7, #23]
      break;
 800747e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007480:	7dfb      	ldrb	r3, [r7, #23]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	200000c8 	.word	0x200000c8
 8007490:	200000b0 	.word	0x200000b0

08007494 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	4613      	mov	r3, r2
 80074a0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074a8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e013      	b.n	80074dc <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d10c      	bne.n	80074da <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	7b1b      	ldrb	r3, [r3, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d108      	bne.n	80074da <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2201      	movs	r2, #1
 80074cc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80074ce:	88fb      	ldrh	r3, [r7, #6]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	2181      	movs	r1, #129	; 0x81
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f001 fd90 	bl	8008ffa <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2222      	movs	r2, #34	; 0x22
 80074f0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80074f2:	4b03      	ldr	r3, [pc, #12]	; (8007500 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	20000044 	.word	0x20000044

08007504 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2222      	movs	r2, #34	; 0x22
 8007510:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8007512:	4b03      	ldr	r3, [pc, #12]	; (8007520 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	20000068 	.word	0x20000068

08007524 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2222      	movs	r2, #34	; 0x22
 8007530:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007532:	4b03      	ldr	r3, [pc, #12]	; (8007540 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	2000008c 	.word	0x2000008c

08007544 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007556:	2200      	movs	r2, #0
 8007558:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	220a      	movs	r2, #10
 8007574:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007576:	4b03      	ldr	r3, [pc, #12]	; (8007584 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007578:	4618      	mov	r0, r3
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	200000bc 	.word	0x200000bc

08007588 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	4613      	mov	r3, r2
 8007594:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800759c:	2303      	movs	r3, #3
 800759e:	e01f      	b.n	80075e0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	79fa      	ldrb	r2, [r7, #7]
 80075d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f001 fbdb 	bl	8008d90 <USBD_LL_Init>
 80075da:	4603      	mov	r3, r0
 80075dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075de:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e016      	b.n	800762e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	f107 020e 	add.w	r2, r7, #14
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	4602      	mov	r2, r0
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 fbf2 	bl	8008e28 <USBD_LL_Start>
 8007644:	4603      	mov	r3, r0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007670:	2303      	movs	r3, #3
 8007672:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	78fa      	ldrb	r2, [r7, #3]
 8007688:	4611      	mov	r1, r2
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
 800768e:	4603      	mov	r3, r0
 8007690:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007692:	7bfb      	ldrb	r3, [r7, #15]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d007      	beq.n	80076c2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	78fa      	ldrb	r2, [r7, #3]
 80076bc:	4611      	mov	r1, r2
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	4798      	blx	r3
  }

  return USBD_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 ffba 	bl	8008658 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007700:	f003 031f 	and.w	r3, r3, #31
 8007704:	2b02      	cmp	r3, #2
 8007706:	d01a      	beq.n	800773e <USBD_LL_SetupStage+0x72>
 8007708:	2b02      	cmp	r3, #2
 800770a:	d822      	bhi.n	8007752 <USBD_LL_SetupStage+0x86>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <USBD_LL_SetupStage+0x4a>
 8007710:	2b01      	cmp	r3, #1
 8007712:	d00a      	beq.n	800772a <USBD_LL_SetupStage+0x5e>
 8007714:	e01d      	b.n	8007752 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fa62 	bl	8007be8 <USBD_StdDevReq>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
      break;
 8007728:	e020      	b.n	800776c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fac6 	bl	8007cc4 <USBD_StdItfReq>
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
      break;
 800773c:	e016      	b.n	800776c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fb05 	bl	8007d56 <USBD_StdEPReq>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]
      break;
 8007750:	e00c      	b.n	800776c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007758:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800775c:	b2db      	uxtb	r3, r3
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 fbc1 	bl	8008ee8 <USBD_LL_StallEP>
 8007766:	4603      	mov	r3, r0
 8007768:	73fb      	strb	r3, [r7, #15]
      break;
 800776a:	bf00      	nop
  }

  return ret;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b086      	sub	sp, #24
 800777a:	af00      	add	r7, sp, #0
 800777c:	60f8      	str	r0, [r7, #12]
 800777e:	460b      	mov	r3, r1
 8007780:	607a      	str	r2, [r7, #4]
 8007782:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007784:	7afb      	ldrb	r3, [r7, #11]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d138      	bne.n	80077fc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007790:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007798:	2b03      	cmp	r3, #3
 800779a:	d14a      	bne.n	8007832 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d913      	bls.n	80077d0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	1ad2      	subs	r2, r2, r3
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	4293      	cmp	r3, r2
 80077c0:	bf28      	it	cs
 80077c2:	4613      	movcs	r3, r2
 80077c4:	461a      	mov	r2, r3
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f001 f81c 	bl	8008806 <USBD_CtlContinueRx>
 80077ce:	e030      	b.n	8007832 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d10b      	bne.n	80077f4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f001 f817 	bl	8008828 <USBD_CtlSendStatus>
 80077fa:	e01a      	b.n	8007832 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b03      	cmp	r3, #3
 8007806:	d114      	bne.n	8007832 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00e      	beq.n	8007832 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	7afa      	ldrb	r2, [r7, #11]
 800781e:	4611      	mov	r1, r2
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	4798      	blx	r3
 8007824:	4603      	mov	r3, r0
 8007826:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007828:	7dfb      	ldrb	r3, [r7, #23]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	e000      	b.n	8007834 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	460b      	mov	r3, r1
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d16b      	bne.n	8007928 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3314      	adds	r3, #20
 8007854:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800785c:	2b02      	cmp	r3, #2
 800785e:	d156      	bne.n	800790e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	429a      	cmp	r2, r3
 800786a:	d914      	bls.n	8007896 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	1ad2      	subs	r2, r2, r3
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	461a      	mov	r2, r3
 8007880:	6879      	ldr	r1, [r7, #4]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 ffae 	bl	80087e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007888:	2300      	movs	r3, #0
 800788a:	2200      	movs	r2, #0
 800788c:	2100      	movs	r1, #0
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f001 fbd4 	bl	800903c <USBD_LL_PrepareReceive>
 8007894:	e03b      	b.n	800790e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d11c      	bne.n	80078dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d316      	bcc.n	80078dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d20f      	bcs.n	80078dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078bc:	2200      	movs	r2, #0
 80078be:	2100      	movs	r1, #0
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 ff8f 	bl	80087e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078ce:	2300      	movs	r3, #0
 80078d0:	2200      	movs	r2, #0
 80078d2:	2100      	movs	r1, #0
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f001 fbb1 	bl	800903c <USBD_LL_PrepareReceive>
 80078da:	e018      	b.n	800790e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d10b      	bne.n	8007900 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007900:	2180      	movs	r1, #128	; 0x80
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f001 faf0 	bl	8008ee8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 ffa0 	bl	800884e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007914:	2b01      	cmp	r3, #1
 8007916:	d122      	bne.n	800795e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff fe98 	bl	800764e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007926:	e01a      	b.n	800795e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b03      	cmp	r3, #3
 8007932:	d114      	bne.n	800795e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00e      	beq.n	800795e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	7afa      	ldrb	r2, [r7, #11]
 800794a:	4611      	mov	r1, r2
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	4798      	blx	r3
 8007950:	4603      	mov	r3, r0
 8007952:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	e000      	b.n	8007960 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007998:	2303      	movs	r3, #3
 800799a:	e02f      	b.n	80079fc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00f      	beq.n	80079c6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d009      	beq.n	80079c6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6852      	ldr	r2, [r2, #4]
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	4611      	mov	r1, r2
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079c6:	2340      	movs	r3, #64	; 0x40
 80079c8:	2200      	movs	r2, #0
 80079ca:	2100      	movs	r1, #0
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 fa46 	bl	8008e5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2240      	movs	r2, #64	; 0x40
 80079de:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079e2:	2340      	movs	r3, #64	; 0x40
 80079e4:	2200      	movs	r2, #0
 80079e6:	2180      	movs	r1, #128	; 0x80
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 fa38 	bl	8008e5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2240      	movs	r2, #64	; 0x40
 80079f8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	78fa      	ldrb	r2, [r7, #3]
 8007a14:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d106      	bne.n	8007a72 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e012      	b.n	8007abc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d10b      	bne.n	8007aba <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d005      	beq.n	8007aba <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e014      	b.n	8007b08 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d10d      	bne.n	8007b06 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d007      	beq.n	8007b06 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	78fa      	ldrb	r2, [r7, #3]
 8007b00:	4611      	mov	r1, r2
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e014      	b.n	8007b54 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d10d      	bne.n	8007b52 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d007      	beq.n	8007b52 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	78fa      	ldrb	r2, [r7, #3]
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d009      	beq.n	8007ba0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6852      	ldr	r2, [r2, #4]
 8007b98:	b2d2      	uxtb	r2, r2
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	4798      	blx	r3
  }

  return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b087      	sub	sp, #28
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007bc8:	8a3b      	ldrh	r3, [r7, #16]
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	b21a      	sxth	r2, r3
 8007bce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	b21b      	sxth	r3, r3
 8007bd6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007bd8:	89fb      	ldrh	r3, [r7, #14]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	371c      	adds	r7, #28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
	...

08007be8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bfe:	2b40      	cmp	r3, #64	; 0x40
 8007c00:	d005      	beq.n	8007c0e <USBD_StdDevReq+0x26>
 8007c02:	2b40      	cmp	r3, #64	; 0x40
 8007c04:	d853      	bhi.n	8007cae <USBD_StdDevReq+0xc6>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00b      	beq.n	8007c22 <USBD_StdDevReq+0x3a>
 8007c0a:	2b20      	cmp	r3, #32
 8007c0c:	d14f      	bne.n	8007cae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	4798      	blx	r3
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c20:	e04a      	b.n	8007cb8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	2b09      	cmp	r3, #9
 8007c28:	d83b      	bhi.n	8007ca2 <USBD_StdDevReq+0xba>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <USBD_StdDevReq+0x48>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c85 	.word	0x08007c85
 8007c34:	08007c99 	.word	0x08007c99
 8007c38:	08007ca3 	.word	0x08007ca3
 8007c3c:	08007c8f 	.word	0x08007c8f
 8007c40:	08007ca3 	.word	0x08007ca3
 8007c44:	08007c63 	.word	0x08007c63
 8007c48:	08007c59 	.word	0x08007c59
 8007c4c:	08007ca3 	.word	0x08007ca3
 8007c50:	08007c7b 	.word	0x08007c7b
 8007c54:	08007c6d 	.word	0x08007c6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f9de 	bl	800801c <USBD_GetDescriptor>
          break;
 8007c60:	e024      	b.n	8007cac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fb6d 	bl	8008344 <USBD_SetAddress>
          break;
 8007c6a:	e01f      	b.n	8007cac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fbac 	bl	80083cc <USBD_SetConfig>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]
          break;
 8007c78:	e018      	b.n	8007cac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fc4b 	bl	8008518 <USBD_GetConfig>
          break;
 8007c82:	e013      	b.n	8007cac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fc7c 	bl	8008584 <USBD_GetStatus>
          break;
 8007c8c:	e00e      	b.n	8007cac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fcab 	bl	80085ec <USBD_SetFeature>
          break;
 8007c96:	e009      	b.n	8007cac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fcba 	bl	8008614 <USBD_ClrFeature>
          break;
 8007ca0:	e004      	b.n	8007cac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fd11 	bl	80086cc <USBD_CtlError>
          break;
 8007caa:	bf00      	nop
      }
      break;
 8007cac:	e004      	b.n	8007cb8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fd0b 	bl	80086cc <USBD_CtlError>
      break;
 8007cb6:	bf00      	nop
  }

  return ret;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop

08007cc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	d005      	beq.n	8007cea <USBD_StdItfReq+0x26>
 8007cde:	2b40      	cmp	r3, #64	; 0x40
 8007ce0:	d82f      	bhi.n	8007d42 <USBD_StdItfReq+0x7e>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <USBD_StdItfReq+0x26>
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	d12b      	bne.n	8007d42 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d81d      	bhi.n	8007d34 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	889b      	ldrh	r3, [r3, #4]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d813      	bhi.n	8007d2a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	4798      	blx	r3
 8007d10:	4603      	mov	r3, r0
 8007d12:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	88db      	ldrh	r3, [r3, #6]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d110      	bne.n	8007d3e <USBD_StdItfReq+0x7a>
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10d      	bne.n	8007d3e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fd80 	bl	8008828 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d28:	e009      	b.n	8007d3e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fccd 	bl	80086cc <USBD_CtlError>
          break;
 8007d32:	e004      	b.n	8007d3e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fcc8 	bl	80086cc <USBD_CtlError>
          break;
 8007d3c:	e000      	b.n	8007d40 <USBD_StdItfReq+0x7c>
          break;
 8007d3e:	bf00      	nop
      }
      break;
 8007d40:	e004      	b.n	8007d4c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fcc1 	bl	80086cc <USBD_CtlError>
      break;
 8007d4a:	bf00      	nop
  }

  return ret;
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	889b      	ldrh	r3, [r3, #4]
 8007d68:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d72:	2b40      	cmp	r3, #64	; 0x40
 8007d74:	d007      	beq.n	8007d86 <USBD_StdEPReq+0x30>
 8007d76:	2b40      	cmp	r3, #64	; 0x40
 8007d78:	f200 8145 	bhi.w	8008006 <USBD_StdEPReq+0x2b0>
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00c      	beq.n	8007d9a <USBD_StdEPReq+0x44>
 8007d80:	2b20      	cmp	r3, #32
 8007d82:	f040 8140 	bne.w	8008006 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	4798      	blx	r3
 8007d94:	4603      	mov	r3, r0
 8007d96:	73fb      	strb	r3, [r7, #15]
      break;
 8007d98:	e13a      	b.n	8008010 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	785b      	ldrb	r3, [r3, #1]
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d007      	beq.n	8007db2 <USBD_StdEPReq+0x5c>
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	f300 8129 	bgt.w	8007ffa <USBD_StdEPReq+0x2a4>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d07f      	beq.n	8007eac <USBD_StdEPReq+0x156>
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d03c      	beq.n	8007e2a <USBD_StdEPReq+0xd4>
 8007db0:	e123      	b.n	8007ffa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d002      	beq.n	8007dc4 <USBD_StdEPReq+0x6e>
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d016      	beq.n	8007df0 <USBD_StdEPReq+0x9a>
 8007dc2:	e02c      	b.n	8007e1e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00d      	beq.n	8007de6 <USBD_StdEPReq+0x90>
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	2b80      	cmp	r3, #128	; 0x80
 8007dce:	d00a      	beq.n	8007de6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 f887 	bl	8008ee8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dda:	2180      	movs	r1, #128	; 0x80
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 f883 	bl	8008ee8 <USBD_LL_StallEP>
 8007de2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007de4:	e020      	b.n	8007e28 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fc6f 	bl	80086cc <USBD_CtlError>
              break;
 8007dee:	e01b      	b.n	8007e28 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	885b      	ldrh	r3, [r3, #2]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10e      	bne.n	8007e16 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00b      	beq.n	8007e16 <USBD_StdEPReq+0xc0>
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	2b80      	cmp	r3, #128	; 0x80
 8007e02:	d008      	beq.n	8007e16 <USBD_StdEPReq+0xc0>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	88db      	ldrh	r3, [r3, #6]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d104      	bne.n	8007e16 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f001 f869 	bl	8008ee8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fd06 	bl	8008828 <USBD_CtlSendStatus>

              break;
 8007e1c:	e004      	b.n	8007e28 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fc53 	bl	80086cc <USBD_CtlError>
              break;
 8007e26:	bf00      	nop
          }
          break;
 8007e28:	e0ec      	b.n	8008004 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d002      	beq.n	8007e3c <USBD_StdEPReq+0xe6>
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d016      	beq.n	8007e68 <USBD_StdEPReq+0x112>
 8007e3a:	e030      	b.n	8007e9e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00d      	beq.n	8007e5e <USBD_StdEPReq+0x108>
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
 8007e44:	2b80      	cmp	r3, #128	; 0x80
 8007e46:	d00a      	beq.n	8007e5e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 f84b 	bl	8008ee8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e52:	2180      	movs	r1, #128	; 0x80
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 f847 	bl	8008ee8 <USBD_LL_StallEP>
 8007e5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e5c:	e025      	b.n	8007eaa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fc33 	bl	80086cc <USBD_CtlError>
              break;
 8007e66:	e020      	b.n	8007eaa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	885b      	ldrh	r3, [r3, #2]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d11b      	bne.n	8007ea8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d004      	beq.n	8007e84 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 f851 	bl	8008f26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fccf 	bl	8008828 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	4798      	blx	r3
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007e9c:	e004      	b.n	8007ea8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fc13 	bl	80086cc <USBD_CtlError>
              break;
 8007ea6:	e000      	b.n	8007eaa <USBD_StdEPReq+0x154>
              break;
 8007ea8:	bf00      	nop
          }
          break;
 8007eaa:	e0ab      	b.n	8008004 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d002      	beq.n	8007ebe <USBD_StdEPReq+0x168>
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d032      	beq.n	8007f22 <USBD_StdEPReq+0x1cc>
 8007ebc:	e097      	b.n	8007fee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d007      	beq.n	8007ed4 <USBD_StdEPReq+0x17e>
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	2b80      	cmp	r3, #128	; 0x80
 8007ec8:	d004      	beq.n	8007ed4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fbfd 	bl	80086cc <USBD_CtlError>
                break;
 8007ed2:	e091      	b.n	8007ff8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	da0b      	bge.n	8007ef4 <USBD_StdEPReq+0x19e>
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	3310      	adds	r3, #16
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	4413      	add	r3, r2
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	e00b      	b.n	8007f0c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	4413      	add	r3, r2
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2200      	movs	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2202      	movs	r2, #2
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fc47 	bl	80087ae <USBD_CtlSendData>
              break;
 8007f20:	e06a      	b.n	8007ff8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	da11      	bge.n	8007f4e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	f003 020f 	and.w	r2, r3, #15
 8007f30:	6879      	ldr	r1, [r7, #4]
 8007f32:	4613      	mov	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	440b      	add	r3, r1
 8007f3c:	3324      	adds	r3, #36	; 0x24
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d117      	bne.n	8007f74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fbc0 	bl	80086cc <USBD_CtlError>
                  break;
 8007f4c:	e054      	b.n	8007ff8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	f003 020f 	and.w	r2, r3, #15
 8007f54:	6879      	ldr	r1, [r7, #4]
 8007f56:	4613      	mov	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	440b      	add	r3, r1
 8007f60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d104      	bne.n	8007f74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fbad 	bl	80086cc <USBD_CtlError>
                  break;
 8007f72:	e041      	b.n	8007ff8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da0b      	bge.n	8007f94 <USBD_StdEPReq+0x23e>
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f82:	4613      	mov	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	3310      	adds	r3, #16
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	4413      	add	r3, r2
 8007f90:	3304      	adds	r3, #4
 8007f92:	e00b      	b.n	8007fac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	4413      	add	r3, r2
 8007faa:	3304      	adds	r3, #4
 8007fac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <USBD_StdEPReq+0x264>
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	2b80      	cmp	r3, #128	; 0x80
 8007fb8:	d103      	bne.n	8007fc2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	e00e      	b.n	8007fe0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 ffcc 	bl	8008f64 <USBD_LL_IsStallEP>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e002      	b.n	8007fe0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fbe1 	bl	80087ae <USBD_CtlSendData>
              break;
 8007fec:	e004      	b.n	8007ff8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fb6b 	bl	80086cc <USBD_CtlError>
              break;
 8007ff6:	bf00      	nop
          }
          break;
 8007ff8:	e004      	b.n	8008004 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fb65 	bl	80086cc <USBD_CtlError>
          break;
 8008002:	bf00      	nop
      }
      break;
 8008004:	e004      	b.n	8008010 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fb5f 	bl	80086cc <USBD_CtlError>
      break;
 800800e:	bf00      	nop
  }

  return ret;
 8008010:	7bfb      	ldrb	r3, [r7, #15]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
	...

0800801c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	885b      	ldrh	r3, [r3, #2]
 8008036:	0a1b      	lsrs	r3, r3, #8
 8008038:	b29b      	uxth	r3, r3
 800803a:	3b01      	subs	r3, #1
 800803c:	2b0e      	cmp	r3, #14
 800803e:	f200 8152 	bhi.w	80082e6 <USBD_GetDescriptor+0x2ca>
 8008042:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <USBD_GetDescriptor+0x2c>)
 8008044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008048:	080080b9 	.word	0x080080b9
 800804c:	080080d1 	.word	0x080080d1
 8008050:	08008111 	.word	0x08008111
 8008054:	080082e7 	.word	0x080082e7
 8008058:	080082e7 	.word	0x080082e7
 800805c:	08008287 	.word	0x08008287
 8008060:	080082b3 	.word	0x080082b3
 8008064:	080082e7 	.word	0x080082e7
 8008068:	080082e7 	.word	0x080082e7
 800806c:	080082e7 	.word	0x080082e7
 8008070:	080082e7 	.word	0x080082e7
 8008074:	080082e7 	.word	0x080082e7
 8008078:	080082e7 	.word	0x080082e7
 800807c:	080082e7 	.word	0x080082e7
 8008080:	08008085 	.word	0x08008085
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00b      	beq.n	80080a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	7c12      	ldrb	r2, [r2, #16]
 800809c:	f107 0108 	add.w	r1, r7, #8
 80080a0:	4610      	mov	r0, r2
 80080a2:	4798      	blx	r3
 80080a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080a6:	e126      	b.n	80082f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fb0e 	bl	80086cc <USBD_CtlError>
        err++;
 80080b0:	7afb      	ldrb	r3, [r7, #11]
 80080b2:	3301      	adds	r3, #1
 80080b4:	72fb      	strb	r3, [r7, #11]
      break;
 80080b6:	e11e      	b.n	80082f6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	7c12      	ldrb	r2, [r2, #16]
 80080c4:	f107 0108 	add.w	r1, r7, #8
 80080c8:	4610      	mov	r0, r2
 80080ca:	4798      	blx	r3
 80080cc:	60f8      	str	r0, [r7, #12]
      break;
 80080ce:	e112      	b.n	80082f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	7c1b      	ldrb	r3, [r3, #16]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10d      	bne.n	80080f4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e0:	f107 0208 	add.w	r2, r7, #8
 80080e4:	4610      	mov	r0, r2
 80080e6:	4798      	blx	r3
 80080e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3301      	adds	r3, #1
 80080ee:	2202      	movs	r2, #2
 80080f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080f2:	e100      	b.n	80082f6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fc:	f107 0208 	add.w	r2, r7, #8
 8008100:	4610      	mov	r0, r2
 8008102:	4798      	blx	r3
 8008104:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3301      	adds	r3, #1
 800810a:	2202      	movs	r2, #2
 800810c:	701a      	strb	r2, [r3, #0]
      break;
 800810e:	e0f2      	b.n	80082f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	885b      	ldrh	r3, [r3, #2]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b05      	cmp	r3, #5
 8008118:	f200 80ac 	bhi.w	8008274 <USBD_GetDescriptor+0x258>
 800811c:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <USBD_GetDescriptor+0x108>)
 800811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008122:	bf00      	nop
 8008124:	0800813d 	.word	0x0800813d
 8008128:	08008171 	.word	0x08008171
 800812c:	080081a5 	.word	0x080081a5
 8008130:	080081d9 	.word	0x080081d9
 8008134:	0800820d 	.word	0x0800820d
 8008138:	08008241 	.word	0x08008241
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00b      	beq.n	8008160 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	7c12      	ldrb	r2, [r2, #16]
 8008154:	f107 0108 	add.w	r1, r7, #8
 8008158:	4610      	mov	r0, r2
 800815a:	4798      	blx	r3
 800815c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800815e:	e091      	b.n	8008284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fab2 	bl	80086cc <USBD_CtlError>
            err++;
 8008168:	7afb      	ldrb	r3, [r7, #11]
 800816a:	3301      	adds	r3, #1
 800816c:	72fb      	strb	r3, [r7, #11]
          break;
 800816e:	e089      	b.n	8008284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	7c12      	ldrb	r2, [r2, #16]
 8008188:	f107 0108 	add.w	r1, r7, #8
 800818c:	4610      	mov	r0, r2
 800818e:	4798      	blx	r3
 8008190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008192:	e077      	b.n	8008284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fa98 	bl	80086cc <USBD_CtlError>
            err++;
 800819c:	7afb      	ldrb	r3, [r7, #11]
 800819e:	3301      	adds	r3, #1
 80081a0:	72fb      	strb	r3, [r7, #11]
          break;
 80081a2:	e06f      	b.n	8008284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	7c12      	ldrb	r2, [r2, #16]
 80081bc:	f107 0108 	add.w	r1, r7, #8
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
 80081c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081c6:	e05d      	b.n	8008284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa7e 	bl	80086cc <USBD_CtlError>
            err++;
 80081d0:	7afb      	ldrb	r3, [r7, #11]
 80081d2:	3301      	adds	r3, #1
 80081d4:	72fb      	strb	r3, [r7, #11]
          break;
 80081d6:	e055      	b.n	8008284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	7c12      	ldrb	r2, [r2, #16]
 80081f0:	f107 0108 	add.w	r1, r7, #8
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081fa:	e043      	b.n	8008284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fa64 	bl	80086cc <USBD_CtlError>
            err++;
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	3301      	adds	r3, #1
 8008208:	72fb      	strb	r3, [r7, #11]
          break;
 800820a:	e03b      	b.n	8008284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	7c12      	ldrb	r2, [r2, #16]
 8008224:	f107 0108 	add.w	r1, r7, #8
 8008228:	4610      	mov	r0, r2
 800822a:	4798      	blx	r3
 800822c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800822e:	e029      	b.n	8008284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fa4a 	bl	80086cc <USBD_CtlError>
            err++;
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	3301      	adds	r3, #1
 800823c:	72fb      	strb	r3, [r7, #11]
          break;
 800823e:	e021      	b.n	8008284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00b      	beq.n	8008264 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	7c12      	ldrb	r2, [r2, #16]
 8008258:	f107 0108 	add.w	r1, r7, #8
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
 8008260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008262:	e00f      	b.n	8008284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa30 	bl	80086cc <USBD_CtlError>
            err++;
 800826c:	7afb      	ldrb	r3, [r7, #11]
 800826e:	3301      	adds	r3, #1
 8008270:	72fb      	strb	r3, [r7, #11]
          break;
 8008272:	e007      	b.n	8008284 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fa28 	bl	80086cc <USBD_CtlError>
          err++;
 800827c:	7afb      	ldrb	r3, [r7, #11]
 800827e:	3301      	adds	r3, #1
 8008280:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008282:	bf00      	nop
      }
      break;
 8008284:	e037      	b.n	80082f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	7c1b      	ldrb	r3, [r3, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d109      	bne.n	80082a2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008296:	f107 0208 	add.w	r2, r7, #8
 800829a:	4610      	mov	r0, r2
 800829c:	4798      	blx	r3
 800829e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082a0:	e029      	b.n	80082f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fa11 	bl	80086cc <USBD_CtlError>
        err++;
 80082aa:	7afb      	ldrb	r3, [r7, #11]
 80082ac:	3301      	adds	r3, #1
 80082ae:	72fb      	strb	r3, [r7, #11]
      break;
 80082b0:	e021      	b.n	80082f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	7c1b      	ldrb	r3, [r3, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10d      	bne.n	80082d6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c2:	f107 0208 	add.w	r2, r7, #8
 80082c6:	4610      	mov	r0, r2
 80082c8:	4798      	blx	r3
 80082ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3301      	adds	r3, #1
 80082d0:	2207      	movs	r2, #7
 80082d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082d4:	e00f      	b.n	80082f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f9f7 	bl	80086cc <USBD_CtlError>
        err++;
 80082de:	7afb      	ldrb	r3, [r7, #11]
 80082e0:	3301      	adds	r3, #1
 80082e2:	72fb      	strb	r3, [r7, #11]
      break;
 80082e4:	e007      	b.n	80082f6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f9ef 	bl	80086cc <USBD_CtlError>
      err++;
 80082ee:	7afb      	ldrb	r3, [r7, #11]
 80082f0:	3301      	adds	r3, #1
 80082f2:	72fb      	strb	r3, [r7, #11]
      break;
 80082f4:	bf00      	nop
  }

  if (err != 0U)
 80082f6:	7afb      	ldrb	r3, [r7, #11]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d11e      	bne.n	800833a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	88db      	ldrh	r3, [r3, #6]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d016      	beq.n	8008332 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008304:	893b      	ldrh	r3, [r7, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00e      	beq.n	8008328 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	88da      	ldrh	r2, [r3, #6]
 800830e:	893b      	ldrh	r3, [r7, #8]
 8008310:	4293      	cmp	r3, r2
 8008312:	bf28      	it	cs
 8008314:	4613      	movcs	r3, r2
 8008316:	b29b      	uxth	r3, r3
 8008318:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800831a:	893b      	ldrh	r3, [r7, #8]
 800831c:	461a      	mov	r2, r3
 800831e:	68f9      	ldr	r1, [r7, #12]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fa44 	bl	80087ae <USBD_CtlSendData>
 8008326:	e009      	b.n	800833c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f9ce 	bl	80086cc <USBD_CtlError>
 8008330:	e004      	b.n	800833c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fa78 	bl	8008828 <USBD_CtlSendStatus>
 8008338:	e000      	b.n	800833c <USBD_GetDescriptor+0x320>
    return;
 800833a:	bf00      	nop
  }
}
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop

08008344 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	889b      	ldrh	r3, [r3, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d131      	bne.n	80083ba <USBD_SetAddress+0x76>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	88db      	ldrh	r3, [r3, #6]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d12d      	bne.n	80083ba <USBD_SetAddress+0x76>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	885b      	ldrh	r3, [r3, #2]
 8008362:	2b7f      	cmp	r3, #127	; 0x7f
 8008364:	d829      	bhi.n	80083ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	885b      	ldrh	r3, [r3, #2]
 800836a:	b2db      	uxtb	r3, r3
 800836c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008370:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b03      	cmp	r3, #3
 800837c:	d104      	bne.n	8008388 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f9a3 	bl	80086cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008386:	e01d      	b.n	80083c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	7bfa      	ldrb	r2, [r7, #15]
 800838c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fe11 	bl	8008fbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fa44 	bl	8008828 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d004      	beq.n	80083b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2202      	movs	r2, #2
 80083aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ae:	e009      	b.n	80083c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b8:	e004      	b.n	80083c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f985 	bl	80086cc <USBD_CtlError>
  }
}
 80083c2:	bf00      	nop
 80083c4:	bf00      	nop
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	885b      	ldrh	r3, [r3, #2]
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	4b4c      	ldr	r3, [pc, #304]	; (8008514 <USBD_SetConfig+0x148>)
 80083e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083e4:	4b4b      	ldr	r3, [pc, #300]	; (8008514 <USBD_SetConfig+0x148>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d905      	bls.n	80083f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f96c 	bl	80086cc <USBD_CtlError>
    return USBD_FAIL;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e088      	b.n	800850a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d002      	beq.n	800840a <USBD_SetConfig+0x3e>
 8008404:	2b03      	cmp	r3, #3
 8008406:	d025      	beq.n	8008454 <USBD_SetConfig+0x88>
 8008408:	e071      	b.n	80084ee <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800840a:	4b42      	ldr	r3, [pc, #264]	; (8008514 <USBD_SetConfig+0x148>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d01c      	beq.n	800844c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008412:	4b40      	ldr	r3, [pc, #256]	; (8008514 <USBD_SetConfig+0x148>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800841c:	4b3d      	ldr	r3, [pc, #244]	; (8008514 <USBD_SetConfig+0x148>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff f91e 	bl	8007664 <USBD_SetClassConfig>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d004      	beq.n	800843c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f949 	bl	80086cc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800843a:	e065      	b.n	8008508 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f9f3 	bl	8008828 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2203      	movs	r2, #3
 8008446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800844a:	e05d      	b.n	8008508 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f9eb 	bl	8008828 <USBD_CtlSendStatus>
      break;
 8008452:	e059      	b.n	8008508 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008454:	4b2f      	ldr	r3, [pc, #188]	; (8008514 <USBD_SetConfig+0x148>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d112      	bne.n	8008482 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008464:	4b2b      	ldr	r3, [pc, #172]	; (8008514 <USBD_SetConfig+0x148>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	461a      	mov	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800846e:	4b29      	ldr	r3, [pc, #164]	; (8008514 <USBD_SetConfig+0x148>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	4619      	mov	r1, r3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7ff f911 	bl	800769c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f9d4 	bl	8008828 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008480:	e042      	b.n	8008508 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008482:	4b24      	ldr	r3, [pc, #144]	; (8008514 <USBD_SetConfig+0x148>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	461a      	mov	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	429a      	cmp	r2, r3
 800848e:	d02a      	beq.n	80084e6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	b2db      	uxtb	r3, r3
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff f8ff 	bl	800769c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800849e:	4b1d      	ldr	r3, [pc, #116]	; (8008514 <USBD_SetConfig+0x148>)
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084a8:	4b1a      	ldr	r3, [pc, #104]	; (8008514 <USBD_SetConfig+0x148>)
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff f8d8 	bl	8007664 <USBD_SetClassConfig>
 80084b4:	4603      	mov	r3, r0
 80084b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00f      	beq.n	80084de <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f903 	bl	80086cc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7ff f8e4 	bl	800769c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2202      	movs	r2, #2
 80084d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084dc:	e014      	b.n	8008508 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f9a2 	bl	8008828 <USBD_CtlSendStatus>
      break;
 80084e4:	e010      	b.n	8008508 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f99e 	bl	8008828 <USBD_CtlSendStatus>
      break;
 80084ec:	e00c      	b.n	8008508 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f8eb 	bl	80086cc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084f6:	4b07      	ldr	r3, [pc, #28]	; (8008514 <USBD_SetConfig+0x148>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7ff f8cd 	bl	800769c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008502:	2303      	movs	r3, #3
 8008504:	73fb      	strb	r3, [r7, #15]
      break;
 8008506:	bf00      	nop
  }

  return ret;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20000656 	.word	0x20000656

08008518 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	88db      	ldrh	r3, [r3, #6]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d004      	beq.n	8008534 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f8cd 	bl	80086cc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008532:	e023      	b.n	800857c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b02      	cmp	r3, #2
 800853e:	dc02      	bgt.n	8008546 <USBD_GetConfig+0x2e>
 8008540:	2b00      	cmp	r3, #0
 8008542:	dc03      	bgt.n	800854c <USBD_GetConfig+0x34>
 8008544:	e015      	b.n	8008572 <USBD_GetConfig+0x5a>
 8008546:	2b03      	cmp	r3, #3
 8008548:	d00b      	beq.n	8008562 <USBD_GetConfig+0x4a>
 800854a:	e012      	b.n	8008572 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	3308      	adds	r3, #8
 8008556:	2201      	movs	r2, #1
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f927 	bl	80087ae <USBD_CtlSendData>
        break;
 8008560:	e00c      	b.n	800857c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3304      	adds	r3, #4
 8008566:	2201      	movs	r2, #1
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f91f 	bl	80087ae <USBD_CtlSendData>
        break;
 8008570:	e004      	b.n	800857c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f8a9 	bl	80086cc <USBD_CtlError>
        break;
 800857a:	bf00      	nop
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008594:	b2db      	uxtb	r3, r3
 8008596:	3b01      	subs	r3, #1
 8008598:	2b02      	cmp	r3, #2
 800859a:	d81e      	bhi.n	80085da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	88db      	ldrh	r3, [r3, #6]
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d004      	beq.n	80085ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f890 	bl	80086cc <USBD_CtlError>
        break;
 80085ac:	e01a      	b.n	80085e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d005      	beq.n	80085ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	f043 0202 	orr.w	r2, r3, #2
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	330c      	adds	r3, #12
 80085ce:	2202      	movs	r2, #2
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f8eb 	bl	80087ae <USBD_CtlSendData>
      break;
 80085d8:	e004      	b.n	80085e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f875 	bl	80086cc <USBD_CtlError>
      break;
 80085e2:	bf00      	nop
  }
}
 80085e4:	bf00      	nop
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	885b      	ldrh	r3, [r3, #2]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d106      	bne.n	800860c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f90e 	bl	8008828 <USBD_CtlSendStatus>
  }
}
 800860c:	bf00      	nop
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008624:	b2db      	uxtb	r3, r3
 8008626:	3b01      	subs	r3, #1
 8008628:	2b02      	cmp	r3, #2
 800862a:	d80b      	bhi.n	8008644 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	885b      	ldrh	r3, [r3, #2]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d10c      	bne.n	800864e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f8f3 	bl	8008828 <USBD_CtlSendStatus>
      }
      break;
 8008642:	e004      	b.n	800864e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f840 	bl	80086cc <USBD_CtlError>
      break;
 800864c:	e000      	b.n	8008650 <USBD_ClrFeature+0x3c>
      break;
 800864e:	bf00      	nop
  }
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	781a      	ldrb	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3301      	adds	r3, #1
 8008672:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	781a      	ldrb	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	3301      	adds	r3, #1
 8008680:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f7ff fa91 	bl	8007baa <SWAPBYTE>
 8008688:	4603      	mov	r3, r0
 800868a:	461a      	mov	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3301      	adds	r3, #1
 8008694:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3301      	adds	r3, #1
 800869a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7ff fa84 	bl	8007baa <SWAPBYTE>
 80086a2:	4603      	mov	r3, r0
 80086a4:	461a      	mov	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3301      	adds	r3, #1
 80086ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3301      	adds	r3, #1
 80086b4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff fa77 	bl	8007baa <SWAPBYTE>
 80086bc:	4603      	mov	r3, r0
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	80da      	strh	r2, [r3, #6]
}
 80086c4:	bf00      	nop
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086d6:	2180      	movs	r1, #128	; 0x80
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fc05 	bl	8008ee8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086de:	2100      	movs	r1, #0
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fc01 	bl	8008ee8 <USBD_LL_StallEP>
}
 80086e6:	bf00      	nop
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b086      	sub	sp, #24
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d036      	beq.n	8008772 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008708:	6938      	ldr	r0, [r7, #16]
 800870a:	f000 f836 	bl	800877a <USBD_GetLen>
 800870e:	4603      	mov	r3, r0
 8008710:	3301      	adds	r3, #1
 8008712:	b29b      	uxth	r3, r3
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	b29a      	uxth	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	4413      	add	r3, r2
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	7812      	ldrb	r2, [r2, #0]
 8008726:	701a      	strb	r2, [r3, #0]
  idx++;
 8008728:	7dfb      	ldrb	r3, [r7, #23]
 800872a:	3301      	adds	r3, #1
 800872c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	4413      	add	r3, r2
 8008734:	2203      	movs	r2, #3
 8008736:	701a      	strb	r2, [r3, #0]
  idx++;
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	3301      	adds	r3, #1
 800873c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800873e:	e013      	b.n	8008768 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	4413      	add	r3, r2
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	7812      	ldrb	r2, [r2, #0]
 800874a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	3301      	adds	r3, #1
 8008750:	613b      	str	r3, [r7, #16]
    idx++;
 8008752:	7dfb      	ldrb	r3, [r7, #23]
 8008754:	3301      	adds	r3, #1
 8008756:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	4413      	add	r3, r2
 800875e:	2200      	movs	r2, #0
 8008760:	701a      	strb	r2, [r3, #0]
    idx++;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	3301      	adds	r3, #1
 8008766:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1e7      	bne.n	8008740 <USBD_GetString+0x52>
 8008770:	e000      	b.n	8008774 <USBD_GetString+0x86>
    return;
 8008772:	bf00      	nop
  }
}
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800877a:	b480      	push	{r7}
 800877c:	b085      	sub	sp, #20
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800878a:	e005      	b.n	8008798 <USBD_GetLen+0x1e>
  {
    len++;
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	3301      	adds	r3, #1
 8008790:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	3301      	adds	r3, #1
 8008796:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1f5      	bne.n	800878c <USBD_GetLen+0x12>
  }

  return len;
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	60f8      	str	r0, [r7, #12]
 80087b6:	60b9      	str	r1, [r7, #8]
 80087b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2202      	movs	r2, #2
 80087be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	2100      	movs	r1, #0
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 fc10 	bl	8008ffa <USBD_LL_Transmit>

  return USBD_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	2100      	movs	r1, #0
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 fbff 	bl	8008ffa <USBD_LL_Transmit>

  return USBD_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	2100      	movs	r1, #0
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fc0f 	bl	800903c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2204      	movs	r2, #4
 8008834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008838:	2300      	movs	r3, #0
 800883a:	2200      	movs	r2, #0
 800883c:	2100      	movs	r1, #0
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fbdb 	bl	8008ffa <USBD_LL_Transmit>

  return USBD_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2205      	movs	r2, #5
 800885a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800885e:	2300      	movs	r3, #0
 8008860:	2200      	movs	r2, #0
 8008862:	2100      	movs	r1, #0
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fbe9 	bl	800903c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008878:	2200      	movs	r2, #0
 800887a:	490e      	ldr	r1, [pc, #56]	; (80088b4 <MX_USB_DEVICE_Init+0x40>)
 800887c:	480e      	ldr	r0, [pc, #56]	; (80088b8 <MX_USB_DEVICE_Init+0x44>)
 800887e:	f7fe fe83 	bl	8007588 <USBD_Init>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008888:	f7f8 fe3a 	bl	8001500 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800888c:	490b      	ldr	r1, [pc, #44]	; (80088bc <MX_USB_DEVICE_Init+0x48>)
 800888e:	480a      	ldr	r0, [pc, #40]	; (80088b8 <MX_USB_DEVICE_Init+0x44>)
 8008890:	f7fe feaa 	bl	80075e8 <USBD_RegisterClass>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800889a:	f7f8 fe31 	bl	8001500 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800889e:	4806      	ldr	r0, [pc, #24]	; (80088b8 <MX_USB_DEVICE_Init+0x44>)
 80088a0:	f7fe fec9 	bl	8007636 <USBD_Start>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80088aa:	f7f8 fe29 	bl	8001500 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088ae:	bf00      	nop
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20000114 	.word	0x20000114
 80088b8:	20000678 	.word	0x20000678
 80088bc:	2000000c 	.word	0x2000000c

080088c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	6039      	str	r1, [r7, #0]
 80088ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2212      	movs	r2, #18
 80088d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80088d2:	4b03      	ldr	r3, [pc, #12]	; (80088e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	20000134 	.word	0x20000134

080088e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	6039      	str	r1, [r7, #0]
 80088ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2204      	movs	r2, #4
 80088f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80088f6:	4b03      	ldr	r3, [pc, #12]	; (8008904 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	20000154 	.word	0x20000154

08008908 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	6039      	str	r1, [r7, #0]
 8008912:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008914:	79fb      	ldrb	r3, [r7, #7]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d105      	bne.n	8008926 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	4907      	ldr	r1, [pc, #28]	; (800893c <USBD_FS_ProductStrDescriptor+0x34>)
 800891e:	4808      	ldr	r0, [pc, #32]	; (8008940 <USBD_FS_ProductStrDescriptor+0x38>)
 8008920:	f7ff fee5 	bl	80086ee <USBD_GetString>
 8008924:	e004      	b.n	8008930 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	4904      	ldr	r1, [pc, #16]	; (800893c <USBD_FS_ProductStrDescriptor+0x34>)
 800892a:	4805      	ldr	r0, [pc, #20]	; (8008940 <USBD_FS_ProductStrDescriptor+0x38>)
 800892c:	f7ff fedf 	bl	80086ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8008930:	4b02      	ldr	r3, [pc, #8]	; (800893c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	20000948 	.word	0x20000948
 8008940:	0800f604 	.word	0x0800f604

08008944 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	4603      	mov	r3, r0
 800894c:	6039      	str	r1, [r7, #0]
 800894e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	4904      	ldr	r1, [pc, #16]	; (8008964 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008954:	4804      	ldr	r0, [pc, #16]	; (8008968 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008956:	f7ff feca 	bl	80086ee <USBD_GetString>
  return USBD_StrDesc;
 800895a:	4b02      	ldr	r3, [pc, #8]	; (8008964 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800895c:	4618      	mov	r0, r3
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20000948 	.word	0x20000948
 8008968:	0800f61c 	.word	0x0800f61c

0800896c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	4603      	mov	r3, r0
 8008974:	6039      	str	r1, [r7, #0]
 8008976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	221a      	movs	r2, #26
 800897c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800897e:	f000 f855 	bl	8008a2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008982:	4b02      	ldr	r3, [pc, #8]	; (800898c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20000158 	.word	0x20000158

08008990 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	6039      	str	r1, [r7, #0]
 800899a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d105      	bne.n	80089ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	4907      	ldr	r1, [pc, #28]	; (80089c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80089a6:	4808      	ldr	r0, [pc, #32]	; (80089c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80089a8:	f7ff fea1 	bl	80086ee <USBD_GetString>
 80089ac:	e004      	b.n	80089b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	4904      	ldr	r1, [pc, #16]	; (80089c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80089b2:	4805      	ldr	r0, [pc, #20]	; (80089c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80089b4:	f7ff fe9b 	bl	80086ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80089b8:	4b02      	ldr	r3, [pc, #8]	; (80089c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20000948 	.word	0x20000948
 80089c8:	0800f630 	.word	0x0800f630

080089cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4603      	mov	r3, r0
 80089d4:	6039      	str	r1, [r7, #0]
 80089d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d105      	bne.n	80089ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	4907      	ldr	r1, [pc, #28]	; (8008a00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089e2:	4808      	ldr	r0, [pc, #32]	; (8008a04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089e4:	f7ff fe83 	bl	80086ee <USBD_GetString>
 80089e8:	e004      	b.n	80089f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	4904      	ldr	r1, [pc, #16]	; (8008a00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089ee:	4805      	ldr	r0, [pc, #20]	; (8008a04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089f0:	f7ff fe7d 	bl	80086ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80089f4:	4b02      	ldr	r3, [pc, #8]	; (8008a00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20000948 	.word	0x20000948
 8008a04:	0800f63c 	.word	0x0800f63c

08008a08 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	6039      	str	r1, [r7, #0]
 8008a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	220c      	movs	r2, #12
 8008a18:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008a1a:	4b03      	ldr	r3, [pc, #12]	; (8008a28 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	20000148 	.word	0x20000148

08008a2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a32:	4b0f      	ldr	r3, [pc, #60]	; (8008a70 <Get_SerialNum+0x44>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a38:	4b0e      	ldr	r3, [pc, #56]	; (8008a74 <Get_SerialNum+0x48>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a3e:	4b0e      	ldr	r3, [pc, #56]	; (8008a78 <Get_SerialNum+0x4c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4413      	add	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d009      	beq.n	8008a66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a52:	2208      	movs	r2, #8
 8008a54:	4909      	ldr	r1, [pc, #36]	; (8008a7c <Get_SerialNum+0x50>)
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 f814 	bl	8008a84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a5c:	2204      	movs	r2, #4
 8008a5e:	4908      	ldr	r1, [pc, #32]	; (8008a80 <Get_SerialNum+0x54>)
 8008a60:	68b8      	ldr	r0, [r7, #8]
 8008a62:	f000 f80f 	bl	8008a84 <IntToUnicode>
  }
}
 8008a66:	bf00      	nop
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	1fff7a10 	.word	0x1fff7a10
 8008a74:	1fff7a14 	.word	0x1fff7a14
 8008a78:	1fff7a18 	.word	0x1fff7a18
 8008a7c:	2000015a 	.word	0x2000015a
 8008a80:	2000016a 	.word	0x2000016a

08008a84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a96:	2300      	movs	r3, #0
 8008a98:	75fb      	strb	r3, [r7, #23]
 8008a9a:	e027      	b.n	8008aec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	0f1b      	lsrs	r3, r3, #28
 8008aa0:	2b09      	cmp	r3, #9
 8008aa2:	d80b      	bhi.n	8008abc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	0f1b      	lsrs	r3, r3, #28
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	005b      	lsls	r3, r3, #1
 8008aae:	4619      	mov	r1, r3
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	440b      	add	r3, r1
 8008ab4:	3230      	adds	r2, #48	; 0x30
 8008ab6:	b2d2      	uxtb	r2, r2
 8008ab8:	701a      	strb	r2, [r3, #0]
 8008aba:	e00a      	b.n	8008ad2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	0f1b      	lsrs	r3, r3, #28
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	7dfb      	ldrb	r3, [r7, #23]
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	440b      	add	r3, r1
 8008acc:	3237      	adds	r2, #55	; 0x37
 8008ace:	b2d2      	uxtb	r2, r2
 8008ad0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	011b      	lsls	r3, r3, #4
 8008ad6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	3301      	adds	r3, #1
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ae6:	7dfb      	ldrb	r3, [r7, #23]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	75fb      	strb	r3, [r7, #23]
 8008aec:	7dfa      	ldrb	r2, [r7, #23]
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d3d3      	bcc.n	8008a9c <IntToUnicode+0x18>
  }
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	371c      	adds	r7, #28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
	...

08008b04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b08a      	sub	sp, #40	; 0x28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b0c:	f107 0314 	add.w	r3, r7, #20
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	605a      	str	r2, [r3, #4]
 8008b16:	609a      	str	r2, [r3, #8]
 8008b18:	60da      	str	r2, [r3, #12]
 8008b1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b24:	d13a      	bne.n	8008b9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b26:	2300      	movs	r3, #0
 8008b28:	613b      	str	r3, [r7, #16]
 8008b2a:	4b1e      	ldr	r3, [pc, #120]	; (8008ba4 <HAL_PCD_MspInit+0xa0>)
 8008b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2e:	4a1d      	ldr	r2, [pc, #116]	; (8008ba4 <HAL_PCD_MspInit+0xa0>)
 8008b30:	f043 0301 	orr.w	r3, r3, #1
 8008b34:	6313      	str	r3, [r2, #48]	; 0x30
 8008b36:	4b1b      	ldr	r3, [pc, #108]	; (8008ba4 <HAL_PCD_MspInit+0xa0>)
 8008b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	613b      	str	r3, [r7, #16]
 8008b40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b48:	2302      	movs	r3, #2
 8008b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b50:	2303      	movs	r3, #3
 8008b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b54:	230a      	movs	r3, #10
 8008b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b58:	f107 0314 	add.w	r3, r7, #20
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4812      	ldr	r0, [pc, #72]	; (8008ba8 <HAL_PCD_MspInit+0xa4>)
 8008b60:	f7f9 f978 	bl	8001e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b64:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <HAL_PCD_MspInit+0xa0>)
 8008b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b68:	4a0e      	ldr	r2, [pc, #56]	; (8008ba4 <HAL_PCD_MspInit+0xa0>)
 8008b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b6e:	6353      	str	r3, [r2, #52]	; 0x34
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	4b0b      	ldr	r3, [pc, #44]	; (8008ba4 <HAL_PCD_MspInit+0xa0>)
 8008b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b78:	4a0a      	ldr	r2, [pc, #40]	; (8008ba4 <HAL_PCD_MspInit+0xa0>)
 8008b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b7e:	6453      	str	r3, [r2, #68]	; 0x44
 8008b80:	4b08      	ldr	r3, [pc, #32]	; (8008ba4 <HAL_PCD_MspInit+0xa0>)
 8008b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2100      	movs	r1, #0
 8008b90:	2043      	movs	r0, #67	; 0x43
 8008b92:	f7f9 f90c 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b96:	2043      	movs	r0, #67	; 0x43
 8008b98:	f7f9 f925 	bl	8001de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b9c:	bf00      	nop
 8008b9e:	3728      	adds	r7, #40	; 0x28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	40023800 	.word	0x40023800
 8008ba8:	40020000 	.word	0x40020000

08008bac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	f7fe fd82 	bl	80076cc <USBD_LL_SetupStage>
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008be2:	78fa      	ldrb	r2, [r7, #3]
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	00db      	lsls	r3, r3, #3
 8008bea:	1a9b      	subs	r3, r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	440b      	add	r3, r1
 8008bf0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	78fb      	ldrb	r3, [r7, #3]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	f7fe fdbc 	bl	8007776 <USBD_LL_DataOutStage>
}
 8008bfe:	bf00      	nop
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008c18:	78fa      	ldrb	r2, [r7, #3]
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	1a9b      	subs	r3, r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	440b      	add	r3, r1
 8008c26:	3348      	adds	r3, #72	; 0x48
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	f7fe fe05 	bl	800783c <USBD_LL_DataInStage>
}
 8008c32:	bf00      	nop
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fe ff19 	bl	8007a80 <USBD_LL_SOF>
}
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]
 8008c6e:	e008      	b.n	8008c82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d102      	bne.n	8008c7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	73fb      	strb	r3, [r7, #15]
 8008c7c:	e001      	b.n	8008c82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008c7e:	f7f8 fc3f 	bl	8001500 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c88:	7bfa      	ldrb	r2, [r7, #15]
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fe feb9 	bl	8007a04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe fe65 	bl	8007968 <USBD_LL_Reset>
}
 8008c9e:	bf00      	nop
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe feb4 	bl	8007a24 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	6812      	ldr	r2, [r2, #0]
 8008cca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cce:	f043 0301 	orr.w	r3, r3, #1
 8008cd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d005      	beq.n	8008ce8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cdc:	4b04      	ldr	r3, [pc, #16]	; (8008cf0 <HAL_PCD_SuspendCallback+0x48>)
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	4a03      	ldr	r2, [pc, #12]	; (8008cf0 <HAL_PCD_SuspendCallback+0x48>)
 8008ce2:	f043 0306 	orr.w	r3, r3, #6
 8008ce6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	e000ed00 	.word	0xe000ed00

08008cf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe fea4 	bl	8007a50 <USBD_LL_Resume>
}
 8008d08:	bf00      	nop
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d22:	78fa      	ldrb	r2, [r7, #3]
 8008d24:	4611      	mov	r1, r2
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe fef2 	bl	8007b10 <USBD_LL_IsoOUTIncomplete>
}
 8008d2c:	bf00      	nop
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d46:	78fa      	ldrb	r2, [r7, #3]
 8008d48:	4611      	mov	r1, r2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe feba 	bl	8007ac4 <USBD_LL_IsoINIncomplete>
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe fef8 	bl	8007b5c <USBD_LL_DevConnected>
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe fef5 	bl	8007b72 <USBD_LL_DevDisconnected>
}
 8008d88:	bf00      	nop
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d13c      	bne.n	8008e1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008da0:	4a20      	ldr	r2, [pc, #128]	; (8008e24 <USBD_LL_Init+0x94>)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a1e      	ldr	r2, [pc, #120]	; (8008e24 <USBD_LL_Init+0x94>)
 8008dac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008db0:	4b1c      	ldr	r3, [pc, #112]	; (8008e24 <USBD_LL_Init+0x94>)
 8008db2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008db6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008db8:	4b1a      	ldr	r3, [pc, #104]	; (8008e24 <USBD_LL_Init+0x94>)
 8008dba:	2206      	movs	r2, #6
 8008dbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008dbe:	4b19      	ldr	r3, [pc, #100]	; (8008e24 <USBD_LL_Init+0x94>)
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008dc4:	4b17      	ldr	r3, [pc, #92]	; (8008e24 <USBD_LL_Init+0x94>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008dca:	4b16      	ldr	r3, [pc, #88]	; (8008e24 <USBD_LL_Init+0x94>)
 8008dcc:	2202      	movs	r2, #2
 8008dce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008dd0:	4b14      	ldr	r3, [pc, #80]	; (8008e24 <USBD_LL_Init+0x94>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008dd6:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <USBD_LL_Init+0x94>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ddc:	4b11      	ldr	r3, [pc, #68]	; (8008e24 <USBD_LL_Init+0x94>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008de2:	4b10      	ldr	r3, [pc, #64]	; (8008e24 <USBD_LL_Init+0x94>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008de8:	4b0e      	ldr	r3, [pc, #56]	; (8008e24 <USBD_LL_Init+0x94>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008dee:	480d      	ldr	r0, [pc, #52]	; (8008e24 <USBD_LL_Init+0x94>)
 8008df0:	f7f9 f9f5 	bl	80021de <HAL_PCD_Init>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008dfa:	f7f8 fb81 	bl	8001500 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008dfe:	2180      	movs	r1, #128	; 0x80
 8008e00:	4808      	ldr	r0, [pc, #32]	; (8008e24 <USBD_LL_Init+0x94>)
 8008e02:	f7fa fb6e 	bl	80034e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e06:	2240      	movs	r2, #64	; 0x40
 8008e08:	2100      	movs	r1, #0
 8008e0a:	4806      	ldr	r0, [pc, #24]	; (8008e24 <USBD_LL_Init+0x94>)
 8008e0c:	f7fa fb22 	bl	8003454 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e10:	2280      	movs	r2, #128	; 0x80
 8008e12:	2101      	movs	r1, #1
 8008e14:	4803      	ldr	r0, [pc, #12]	; (8008e24 <USBD_LL_Init+0x94>)
 8008e16:	f7fa fb1d 	bl	8003454 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	20000b48 	.word	0x20000b48

08008e28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7f9 faf1 	bl	8002426 <HAL_PCD_Start>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 f97e 	bl	800914c <USBD_Get_USB_Status>
 8008e50:	4603      	mov	r3, r0
 8008e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b084      	sub	sp, #16
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	4608      	mov	r0, r1
 8008e68:	4611      	mov	r1, r2
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	70fb      	strb	r3, [r7, #3]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70bb      	strb	r3, [r7, #2]
 8008e74:	4613      	mov	r3, r2
 8008e76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008e86:	78bb      	ldrb	r3, [r7, #2]
 8008e88:	883a      	ldrh	r2, [r7, #0]
 8008e8a:	78f9      	ldrb	r1, [r7, #3]
 8008e8c:	f7f9 ff02 	bl	8002c94 <HAL_PCD_EP_Open>
 8008e90:	4603      	mov	r3, r0
 8008e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 f958 	bl	800914c <USBD_Get_USB_Status>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ec4:	78fa      	ldrb	r2, [r7, #3]
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7f9 ff4b 	bl	8002d64 <HAL_PCD_EP_Close>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 f939 	bl	800914c <USBD_Get_USB_Status>
 8008eda:	4603      	mov	r3, r0
 8008edc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f02:	78fa      	ldrb	r2, [r7, #3]
 8008f04:	4611      	mov	r1, r2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fa f80b 	bl	8002f22 <HAL_PCD_EP_SetStall>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 f91a 	bl	800914c <USBD_Get_USB_Status>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	460b      	mov	r3, r1
 8008f30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	4611      	mov	r1, r2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fa f850 	bl	8002fea <HAL_PCD_EP_ClrStall>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 f8fb 	bl	800914c <USBD_Get_USB_Status>
 8008f56:	4603      	mov	r3, r0
 8008f58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	da0b      	bge.n	8008f98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f86:	68f9      	ldr	r1, [r7, #12]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	1a9b      	subs	r3, r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	440b      	add	r3, r1
 8008f92:	333e      	adds	r3, #62	; 0x3e
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	e00b      	b.n	8008fb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f98:	78fb      	ldrb	r3, [r7, #3]
 8008f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f9e:	68f9      	ldr	r1, [r7, #12]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	1a9b      	subs	r3, r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	440b      	add	r3, r1
 8008faa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008fae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fd6:	78fa      	ldrb	r2, [r7, #3]
 8008fd8:	4611      	mov	r1, r2
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7f9 fe35 	bl	8002c4a <HAL_PCD_SetAddress>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 f8b0 	bl	800914c <USBD_Get_USB_Status>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b086      	sub	sp, #24
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
 8009006:	460b      	mov	r3, r1
 8009008:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009018:	7af9      	ldrb	r1, [r7, #11]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	f7f9 ff36 	bl	8002e8e <HAL_PCD_EP_Transmit>
 8009022:	4603      	mov	r3, r0
 8009024:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f88f 	bl	800914c <USBD_Get_USB_Status>
 800902e:	4603      	mov	r3, r0
 8009030:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009032:	7dbb      	ldrb	r3, [r7, #22]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	607a      	str	r2, [r7, #4]
 8009046:	603b      	str	r3, [r7, #0]
 8009048:	460b      	mov	r3, r1
 800904a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800905a:	7af9      	ldrb	r1, [r7, #11]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	f7f9 feca 	bl	8002df8 <HAL_PCD_EP_Receive>
 8009064:	4603      	mov	r3, r0
 8009066:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009068:	7dfb      	ldrb	r3, [r7, #23]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 f86e 	bl	800914c <USBD_Get_USB_Status>
 8009070:	4603      	mov	r3, r0
 8009072:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009074:	7dbb      	ldrb	r3, [r7, #22]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3718      	adds	r7, #24
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800908c:	78fb      	ldrb	r3, [r7, #3]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d002      	beq.n	8009098 <HAL_PCDEx_LPM_Callback+0x18>
 8009092:	2b01      	cmp	r3, #1
 8009094:	d01f      	beq.n	80090d6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009096:	e03b      	b.n	8009110 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a1b      	ldr	r3, [r3, #32]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d007      	beq.n	80090b0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80090a0:	f7f8 f894 	bl	80011cc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090a4:	4b1c      	ldr	r3, [pc, #112]	; (8009118 <HAL_PCDEx_LPM_Callback+0x98>)
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	4a1b      	ldr	r2, [pc, #108]	; (8009118 <HAL_PCDEx_LPM_Callback+0x98>)
 80090aa:	f023 0306 	bic.w	r3, r3, #6
 80090ae:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	6812      	ldr	r2, [r2, #0]
 80090be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090c2:	f023 0301 	bic.w	r3, r3, #1
 80090c6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe fcbe 	bl	8007a50 <USBD_LL_Resume>
    break;
 80090d4:	e01c      	b.n	8009110 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	6812      	ldr	r2, [r2, #0]
 80090e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090e8:	f043 0301 	orr.w	r3, r3, #1
 80090ec:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe fc95 	bl	8007a24 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d005      	beq.n	800910e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009102:	4b05      	ldr	r3, [pc, #20]	; (8009118 <HAL_PCDEx_LPM_Callback+0x98>)
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	4a04      	ldr	r2, [pc, #16]	; (8009118 <HAL_PCDEx_LPM_Callback+0x98>)
 8009108:	f043 0306 	orr.w	r3, r3, #6
 800910c:	6113      	str	r3, [r2, #16]
    break;
 800910e:	bf00      	nop
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	e000ed00 	.word	0xe000ed00

0800911c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009124:	4b03      	ldr	r3, [pc, #12]	; (8009134 <USBD_static_malloc+0x18>)
}
 8009126:	4618      	mov	r0, r3
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	20000658 	.word	0x20000658

08009138 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]

}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	2b03      	cmp	r3, #3
 800915e:	d817      	bhi.n	8009190 <USBD_Get_USB_Status+0x44>
 8009160:	a201      	add	r2, pc, #4	; (adr r2, 8009168 <USBD_Get_USB_Status+0x1c>)
 8009162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009166:	bf00      	nop
 8009168:	08009179 	.word	0x08009179
 800916c:	0800917f 	.word	0x0800917f
 8009170:	08009185 	.word	0x08009185
 8009174:	0800918b 	.word	0x0800918b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	73fb      	strb	r3, [r7, #15]
    break;
 800917c:	e00b      	b.n	8009196 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800917e:	2303      	movs	r3, #3
 8009180:	73fb      	strb	r3, [r7, #15]
    break;
 8009182:	e008      	b.n	8009196 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009184:	2301      	movs	r3, #1
 8009186:	73fb      	strb	r3, [r7, #15]
    break;
 8009188:	e005      	b.n	8009196 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800918a:	2303      	movs	r3, #3
 800918c:	73fb      	strb	r3, [r7, #15]
    break;
 800918e:	e002      	b.n	8009196 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009190:	2303      	movs	r3, #3
 8009192:	73fb      	strb	r3, [r7, #15]
    break;
 8009194:	bf00      	nop
  }
  return usb_status;
 8009196:	7bfb      	ldrb	r3, [r7, #15]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	4608      	mov	r0, r1
 80091ae:	4611      	mov	r1, r2
 80091b0:	461a      	mov	r2, r3
 80091b2:	4603      	mov	r3, r0
 80091b4:	70fb      	strb	r3, [r7, #3]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70bb      	strb	r3, [r7, #2]
 80091ba:	4613      	mov	r3, r2
 80091bc:	707b      	strb	r3, [r7, #1]
                return 0;
 80091be:	2300      	movs	r3, #0
        }
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	4608      	mov	r0, r1
 80091d6:	4611      	mov	r1, r2
 80091d8:	461a      	mov	r2, r3
 80091da:	4603      	mov	r3, r0
 80091dc:	70fb      	strb	r3, [r7, #3]
 80091de:	460b      	mov	r3, r1
 80091e0:	70bb      	strb	r3, [r7, #2]
 80091e2:	4613      	mov	r3, r2
 80091e4:	707b      	strb	r3, [r7, #1]
                return 0;
 80091e6:	2300      	movs	r3, #0
        }
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
                return 0;
 80091fc:	2300      	movs	r3, #0
        }
 80091fe:	4618      	mov	r0, r3
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
                return 0;
 8009212:	2300      	movs	r3, #0
        }
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
                return 0;
 8009228:	2300      	movs	r3, #0
        }
 800922a:	4618      	mov	r0, r3
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 8009236:	b480      	push	{r7}
 8009238:	b083      	sub	sp, #12
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	460b      	mov	r3, r1
 8009240:	70fb      	strb	r3, [r7, #3]
                return;
 8009242:	bf00      	nop
        } // Note used for hubs only!
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800924e:	b480      	push	{r7}
 8009250:	b083      	sub	sp, #12
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	807b      	strh	r3, [r7, #2]
 800925a:	4613      	mov	r3, r2
 800925c:	803b      	strh	r3, [r7, #0]
                return false;
 800925e:	2300      	movs	r3, #0
        }
 8009260:	4618      	mov	r0, r3
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	70fb      	strb	r3, [r7, #3]
                return false;
 8009278:	2300      	movs	r3, #0
        }
 800927a:	4618      	mov	r0, r3
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 8009286:	b480      	push	{r7}
 8009288:	b083      	sub	sp, #12
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	70fb      	strb	r3, [r7, #3]
                return true;
 8009292:	2301      	movs	r3, #1
        }
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 80092a8:	687b      	ldr	r3, [r7, #4]
        };
 80092aa:	4618      	mov	r0, r3
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 80092b6:	b480      	push	{r7}
 80092b8:	b085      	sub	sp, #20
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 80092c0:	2300      	movs	r3, #0
 80092c2:	73fb      	strb	r3, [r7, #15]
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	2b0f      	cmp	r3, #15
 80092c8:	d812      	bhi.n	80092f0 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 80092ca:	7bfa      	ldrb	r2, [r7, #15]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	321e      	adds	r2, #30
 80092d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d107      	bne.n	80092e8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 80092d8:	7bfa      	ldrb	r2, [r7, #15]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	321e      	adds	r2, #30
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	e004      	b.n	80092f2 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	3301      	adds	r3, #1
 80092ec:	73fb      	strb	r3, [r7, #15]
 80092ee:	e7e9      	b.n	80092c4 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 80092f0:	23d3      	movs	r3, #211	; 0xd3
        };
 80092f2:	4618      	mov	r0, r3
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	701a      	strb	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	705a      	strb	r2, [r3, #1]
 8009312:	2200      	movs	r2, #0
 8009314:	709a      	strb	r2, [r3, #2]
 8009316:	2200      	movs	r2, #0
 8009318:	70da      	strb	r2, [r3, #3]
 800931a:	2200      	movs	r2, #0
 800931c:	711a      	strb	r2, [r3, #4]
        };
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	711a      	strb	r2, [r3, #4]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	715a      	strb	r2, [r3, #5]
        };
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4618      	mov	r0, r3
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	781a      	ldrb	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	715a      	strb	r2, [r3, #5]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	795a      	ldrb	r2, [r3, #5]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	711a      	strb	r2, [r3, #4]
        };
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	711a      	strb	r2, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	80da      	strh	r2, [r3, #6]
        };
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4618      	mov	r0, r3
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	601a      	str	r2, [r3, #0]
                countDown = 0;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	80da      	strh	r2, [r3, #6]
        };
 80093c6:	bf00      	nop
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 80093d2:	b480      	push	{r7}
 80093d4:	b085      	sub	sp, #20
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	60f8      	str	r0, [r7, #12]
 80093da:	60b9      	str	r1, [r7, #8]
 80093dc:	607a      	str	r2, [r7, #4]
 80093de:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	791b      	ldrb	r3, [r3, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d009      	beq.n	8009400 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 80093ec:	e029      	b.n	8009442 <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	887a      	ldrh	r2, [r7, #2]
 80093f2:	80da      	strh	r2, [r3, #6]
                                nStage++;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	791b      	ldrb	r3, [r3, #4]
 80093f8:	3301      	adds	r3, #1
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	88db      	ldrh	r3, [r3, #6]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d015      	beq.n	8009434 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	881b      	ldrh	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d011      	beq.n	8009434 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	88db      	ldrh	r3, [r3, #6]
 8009414:	3b01      	subs	r3, #1
 8009416:	b29a      	uxth	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	80da      	strh	r2, [r3, #6]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	1c5a      	adds	r2, r3, #1
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	3b01      	subs	r3, #1
 800942c:	b29a      	uxth	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	801a      	strh	r2, [r3, #0]
 8009432:	e7e5      	b.n	8009400 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	88db      	ldrh	r3, [r3, #6]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	88db      	ldrh	r3, [r3, #6]
 8009446:	2b00      	cmp	r3, #0
 8009448:	bf0c      	ite	eq
 800944a:	2301      	moveq	r3, #1
 800944c:	2300      	movne	r3, #0
 800944e:	b2db      	uxtb	r3, r3
        };
 8009450:	4618      	mov	r0, r3
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	4608      	mov	r0, r1
 8009466:	4611      	mov	r1, r2
 8009468:	461a      	mov	r2, r3
 800946a:	4603      	mov	r3, r0
 800946c:	70fb      	strb	r3, [r7, #3]
 800946e:	460b      	mov	r3, r1
 8009470:	70bb      	strb	r3, [r7, #2]
 8009472:	4613      	mov	r3, r2
 8009474:	707b      	strb	r3, [r7, #1]
        };
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
	...

08009484 <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	4a04      	ldr	r2, [pc, #16]	; (80094a0 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4618      	mov	r0, r3
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	0800f7d8 	.word	0x0800f7d8

080094a4 <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	4a04      	ldr	r2, [pc, #16]	; (80094c0 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	0800f7c0 	.word	0x0800f7c0

080094c4 <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
                return bAddress;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 80094d2:	4618      	mov	r0, r3
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 8009504:	78fb      	ldrb	r3, [r7, #3]
 8009506:	2be0      	cmp	r3, #224	; 0xe0
 8009508:	bf0c      	ite	eq
 800950a:	2301      	moveq	r3, #1
 800950c:	2300      	movne	r3, #0
 800950e:	b2db      	uxtb	r3, r3
        };
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	807b      	strh	r3, [r7, #2]
 8009528:	4613      	mov	r3, r2
 800952a:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800952c:	887b      	ldrh	r3, [r7, #2]
 800952e:	f640 225c 	movw	r2, #2652	; 0xa5c
 8009532:	4293      	cmp	r3, r2
 8009534:	d104      	bne.n	8009540 <_ZN3BTD8VIDPIDOKEtt+0x24>
 8009536:	883b      	ldrh	r3, [r7, #0]
 8009538:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800953c:	4293      	cmp	r3, r2
 800953e:	d009      	beq.n	8009554 <_ZN3BTD8VIDPIDOKEtt+0x38>
 8009540:	887b      	ldrh	r3, [r7, #2]
 8009542:	f240 520d 	movw	r2, #1293	; 0x50d
 8009546:	4293      	cmp	r3, r2
 8009548:	d106      	bne.n	8009558 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800954a:	883b      	ldrh	r3, [r7, #0]
 800954c:	f240 625a 	movw	r2, #1626	; 0x65a
 8009550:	4293      	cmp	r3, r2
 8009552:	d101      	bne.n	8009558 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 8009554:	2301      	movs	r3, #1
 8009556:	e02d      	b.n	80095b4 <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	7d1b      	ldrb	r3, [r3, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d113      	bne.n	8009588 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	7d5b      	ldrb	r3, [r3, #21]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10f      	bne.n	8009588 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	7d9b      	ldrb	r3, [r3, #22]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10b      	bne.n	8009588 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	7ddb      	ldrb	r3, [r3, #23]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d107      	bne.n	8009588 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7e1b      	ldrb	r3, [r3, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d103      	bne.n	8009588 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	7e5b      	ldrb	r3, [r3, #25]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d014      	beq.n	80095b2 <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 8009588:	887b      	ldrh	r3, [r7, #2]
 800958a:	f240 524c 	movw	r2, #1356	; 0x54c
 800958e:	4293      	cmp	r3, r2
 8009590:	d10f      	bne.n	80095b2 <_ZN3BTD8VIDPIDOKEtt+0x96>
 8009592:	883b      	ldrh	r3, [r7, #0]
 8009594:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8009598:	d009      	beq.n	80095ae <_ZN3BTD8VIDPIDOKEtt+0x92>
 800959a:	883b      	ldrh	r3, [r7, #0]
 800959c:	f240 422f 	movw	r2, #1071	; 0x42f
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d004      	beq.n	80095ae <_ZN3BTD8VIDPIDOKEtt+0x92>
 80095a4:	883b      	ldrh	r3, [r7, #0]
 80095a6:	f240 32d5 	movw	r2, #981	; 0x3d5
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d101      	bne.n	80095b2 <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e000      	b.n	80095b4 <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 80095b2:	2300      	movs	r3, #0
        };
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7ff ff59 	bl	8009484 <_ZN15USBDeviceConfigC1Ev>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	3304      	adds	r3, #4
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff ff64 	bl	80094a4 <_ZN17UsbConfigXtracterC1Ev>
 80095dc:	4a2b      	ldr	r2, [pc, #172]	; (800968c <_ZN3BTDC1EP3USB+0xcc>)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	4a2b      	ldr	r2, [pc, #172]	; (8009690 <_ZN3BTDC1EP3USB+0xd0>)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	605a      	str	r2, [r3, #4]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	64da      	str	r2, [r3, #76]	; 0x4c
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	661a      	str	r2, [r3, #96]	; 0x60
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	2b03      	cmp	r3, #3
 800964c:	d80a      	bhi.n	8009664 <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	3318      	adds	r3, #24
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	2200      	movs	r2, #0
 800965a:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800965c:	7bfb      	ldrb	r3, [r7, #15]
 800965e:	3301      	adds	r3, #1
 8009660:	73fb      	strb	r3, [r7, #15]
 8009662:	e7f1      	b.n	8009648 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fa83 	bl	8009b70 <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966e:	2b00      	cmp	r3, #0
 8009670:	d006      	beq.n	8009680 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	4611      	mov	r1, r2
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff fe1b 	bl	80092b6 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	0800f780 	.word	0x0800f780
 8009690:	0800f7b4 	.word	0x0800f7b4

08009694 <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 8009694:	b590      	push	{r4, r7, lr}
 8009696:	b08f      	sub	sp, #60	; 0x3c
 8009698:	af02      	add	r7, sp, #8
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	4608      	mov	r0, r1
 800969e:	4611      	mov	r1, r2
 80096a0:	461a      	mov	r2, r3
 80096a2:	4603      	mov	r3, r0
 80096a4:	70fb      	strb	r3, [r7, #3]
 80096a6:	460b      	mov	r3, r1
 80096a8:	70bb      	strb	r3, [r7, #2]
 80096aa:	4613      	mov	r3, r2
 80096ac:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 80096ae:	2312      	movs	r3, #18
 80096b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 80096b4:	f107 0308 	add.w	r3, r7, #8
 80096b8:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fa54 	bl	8009b70 <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7ff fde7 	bl	80092a0 <_ZN3USB14GetAddressPoolEv>
 80096d2:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 80096de:	23d9      	movs	r3, #217	; 0xd9
 80096e0:	e087      	b.n	80097f2 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2100      	movs	r1, #0
 80096ea:	69f8      	ldr	r0, [r7, #28]
 80096ec:	4798      	blx	r3
 80096ee:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80096f6:	23d6      	movs	r3, #214	; 0xd6
 80096f8:	e07b      	b.n	80097f2 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 8009702:	23d7      	movs	r3, #215	; 0xd7
 8009704:	e075      	b.n	80097f2 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f103 0251 	add.w	r2, r3, #81	; 0x51
 8009712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009714:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 8009716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009718:	787a      	ldrb	r2, [r7, #1]
 800971a:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009720:	f107 0308 	add.w	r3, r7, #8
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	2312      	movs	r3, #18
 8009728:	2200      	movs	r2, #0
 800972a:	2100      	movs	r1, #0
 800972c:	f005 fa6b 	bl	800ec06 <_ZN3USB11getDevDescrEhhtPh>
 8009730:	4603      	mov	r3, r0
 8009732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	6a3a      	ldr	r2, [r7, #32]
 800973a:	601a      	str	r2, [r3, #0]

        if(rcode)
 800973c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009740:	2b00      	cmp	r3, #0
 8009742:	d146      	bne.n	80097d2 <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3304      	adds	r3, #4
 800974a:	681c      	ldr	r4, [r3, #0]
 800974c:	78bb      	ldrb	r3, [r7, #2]
 800974e:	78f9      	ldrb	r1, [r7, #3]
 8009750:	2200      	movs	r2, #0
 8009752:	69f8      	ldr	r0, [r7, #28]
 8009754:	47a0      	blx	r4
 8009756:	4603      	mov	r3, r0
 8009758:	461a      	mov	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009766:	2b00      	cmp	r3, #0
 8009768:	d101      	bne.n	800976e <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800976a:	23d4      	movs	r3, #212	; 0xd4
 800976c:	e041      	b.n	80097f2 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	791b      	ldrb	r3, [r3, #4]
 8009772:	2b09      	cmp	r3, #9
 8009774:	d017      	beq.n	80097a6 <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 8009776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009778:	79da      	ldrb	r2, [r3, #7]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	7c5a      	ldrb	r2, [r3, #17]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800978a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978c:	891b      	ldrh	r3, [r3, #8]
 800978e:	b29a      	uxth	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009798:	895b      	ldrh	r3, [r3, #10]
 800979a:	b29a      	uxth	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 80097a2:	23e0      	movs	r3, #224	; 0xe0
 80097a4:	e025      	b.n	80097f2 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 80097a6:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80097b2:	2300      	movs	r3, #0
 80097b4:	2200      	movs	r2, #0
 80097b6:	f005 fac3 	bl	800ed40 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 80097ba:	23d1      	movs	r3, #209	; 0xd1
 80097bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3308      	adds	r3, #8
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	4798      	blx	r3
        return rcode;
 80097cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097d0:	e00f      	b.n	80097f2 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 80097d2:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 80097d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097d8:	2b0d      	cmp	r3, #13
 80097da:	d002      	beq.n	80097e2 <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 80097dc:	23e1      	movs	r3, #225	; 0xe1
 80097de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3308      	adds	r3, #8
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	4798      	blx	r3
        return rcode;
 80097ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 80097f2:	4618      	mov	r0, r3
 80097f4:	3734      	adds	r7, #52	; 0x34
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd90      	pop	{r4, r7, pc}
	...

080097fc <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b096      	sub	sp, #88	; 0x58
 8009800:	af02      	add	r7, sp, #8
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	4608      	mov	r0, r1
 8009806:	4611      	mov	r1, r2
 8009808:	461a      	mov	r2, r3
 800980a:	4603      	mov	r3, r0
 800980c:	70fb      	strb	r3, [r7, #3]
 800980e:	460b      	mov	r3, r1
 8009810:	70bb      	strb	r3, [r7, #2]
 8009812:	4613      	mov	r3, r2
 8009814:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800981c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800982c:	4618      	mov	r0, r3
 800982e:	f7ff fd37 	bl	80092a0 <_ZN3USB14GetAddressPoolEv>
 8009832:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 8009834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8009840:	4611      	mov	r1, r2
 8009842:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009844:	4798      	blx	r3
 8009846:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 8009848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800984e:	23d6      	movs	r3, #214	; 0xd6
 8009850:	e189      	b.n	8009b66 <_ZN3BTD4InitEhhb+0x36a>
        }

        delay(300); // Assign new address to the device
 8009852:	48b8      	ldr	r0, [pc, #736]	; (8009b34 <_ZN3BTD4InitEhhb+0x338>)
 8009854:	f7f8 f9ac 	bl	8001bb0 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009862:	2200      	movs	r2, #0
 8009864:	2100      	movs	r1, #0
 8009866:	f005 fa6b 	bl	800ed40 <_ZN3USB7setAddrEhhh>
 800986a:	4603      	mov	r3, r0
 800986c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 8009870:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <_ZN3BTD4InitEhhb+0x84>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 8009878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800987a:	2200      	movs	r2, #0
 800987c:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800987e:	e16a      	b.n	8009b56 <_ZN3BTD4InitEhhb+0x35a>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 8009880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009882:	2200      	movs	r2, #0
 8009884:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 8009886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8009892:	4611      	mov	r1, r2
 8009894:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009896:	4798      	blx	r3
 8009898:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800989a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <_ZN3BTD4InitEhhb+0xa8>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80098a0:	23d6      	movs	r3, #214	; 0xd6
 80098a2:	e160      	b.n	8009b66 <_ZN3BTD4InitEhhb+0x36a>
        }

        p->lowspeed = lowspeed;
 80098a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098a6:	787a      	ldrb	r2, [r7, #1]
 80098a8:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3351      	adds	r3, #81	; 0x51
 80098b8:	2201      	movs	r2, #1
 80098ba:	f004 f8fe 	bl	800daba <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 80098be:	4603      	mov	r3, r0
 80098c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 80098c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f040 8128 	bne.w	8009b1e <_ZN3BTD4InitEhhb+0x322>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80098d4:	f240 524c 	movw	r2, #1356	; 0x54c
 80098d8:	4293      	cmp	r3, r2
 80098da:	d177      	bne.n	80099cc <_ZN3BTD4InitEhhb+0x1d0>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80098e2:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 80098e6:	d00d      	beq.n	8009904 <_ZN3BTD4InitEhhb+0x108>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80098ee:	f240 422f 	movw	r2, #1071	; 0x42f
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d006      	beq.n	8009904 <_ZN3BTD4InitEhhb+0x108>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80098fc:	f240 32d5 	movw	r2, #981	; 0x3d5
 8009900:	4293      	cmp	r3, r2
 8009902:	d163      	bne.n	80099cc <_ZN3BTD4InitEhhb+0x1d0>
                delay(100);
 8009904:	488c      	ldr	r0, [pc, #560]	; (8009b38 <_ZN3BTD4InitEhhb+0x33c>)
 8009906:	f7f8 f953 	bl	8001bb0 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800991a:	2301      	movs	r3, #1
 800991c:	f005 fa40 	bl	800eda0 <_ZN3USB7setConfEhhh>
 8009920:	4603      	mov	r3, r0
 8009922:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009926:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800992a:	2b00      	cmp	r3, #0
 800992c:	f040 80f9 	bne.w	8009b22 <_ZN3BTD4InitEhhb+0x326>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	7d1b      	ldrb	r3, [r3, #20]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d113      	bne.n	8009960 <_ZN3BTD4InitEhhb+0x164>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	7d5b      	ldrb	r3, [r3, #21]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10f      	bne.n	8009960 <_ZN3BTD4InitEhhb+0x164>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	7d9b      	ldrb	r3, [r3, #22]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10b      	bne.n	8009960 <_ZN3BTD4InitEhhb+0x164>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	7ddb      	ldrb	r3, [r3, #23]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d107      	bne.n	8009960 <_ZN3BTD4InitEhhb+0x164>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	7e1b      	ldrb	r3, [r3, #24]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d103      	bne.n	8009960 <_ZN3BTD4InitEhhb+0x164>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7e5b      	ldrb	r3, [r3, #25]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d019      	beq.n	8009994 <_ZN3BTD4InitEhhb+0x198>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009966:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800996a:	d006      	beq.n	800997a <_ZN3BTD4InitEhhb+0x17e>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009972:	f240 422f 	movw	r2, #1071	; 0x42f
 8009976:	4293      	cmp	r3, r2
 8009978:	d106      	bne.n	8009988 <_ZN3BTD4InitEhhb+0x18c>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3314      	adds	r3, #20
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f002 f8c3 	bl	800bb0c <_ZN3BTD9setBdaddrEPh>
 8009986:	e005      	b.n	8009994 <_ZN3BTD4InitEhhb+0x198>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3314      	adds	r3, #20
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f002 f8fc 	bl	800bb8c <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80099a4:	2300      	movs	r3, #0
 80099a6:	f005 f9fb 	bl	800eda0 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80099b4:	2300      	movs	r3, #0
 80099b6:	2200      	movs	r2, #0
 80099b8:	f005 f9c2 	bl	800ed40 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3308      	adds	r3, #8
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 80099c8:	23d1      	movs	r3, #209	; 0xd1
 80099ca:	e0cc      	b.n	8009b66 <_ZN3BTD4InitEhhb+0x36a>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 80099cc:	2300      	movs	r3, #0
 80099ce:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80099d2:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80099d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80099da:	429a      	cmp	r2, r3
 80099dc:	d25e      	bcs.n	8009a9c <_ZN3BTD4InitEhhb+0x2a0>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80099e4:	f640 225c 	movw	r2, #2652	; 0xa5c
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d106      	bne.n	80099fa <_ZN3BTD4InitEhhb+0x1fe>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80099f2:	f242 12e8 	movw	r2, #8680	; 0x21e8
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00d      	beq.n	8009a16 <_ZN3BTD4InitEhhb+0x21a>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009a00:	f240 520d 	movw	r2, #1293	; 0x50d
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d120      	bne.n	8009a4a <_ZN3BTD4InitEhhb+0x24e>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009a0e:	f240 625a 	movw	r2, #1626	; 0x65a
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d119      	bne.n	8009a4a <_ZN3BTD4InitEhhb+0x24e>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	1d1a      	adds	r2, r3, #4
 8009a1a:	f107 0308 	add.w	r3, r7, #8
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f002 f907 	bl	800bc34 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009a30:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009a34:	f107 0308 	add.w	r3, r7, #8
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f005 f932 	bl	800eca6 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 8009a42:	4603      	mov	r3, r0
 8009a44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009a48:	e018      	b.n	8009a7c <_ZN3BTD4InitEhhb+0x280>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	1d1a      	adds	r2, r3, #4
 8009a4e:	f107 0308 	add.w	r3, r7, #8
 8009a52:	4611      	mov	r1, r2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f002 f93b 	bl	800bcd0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009a64:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009a68:	f107 0308 	add.w	r3, r7, #8
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	2200      	movs	r2, #0
 8009a72:	f005 f918 	bl	800eca6 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 8009a76:	4603      	mov	r3, r0
 8009a78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 8009a7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d150      	bne.n	8009b26 <_ZN3BTD4InitEhhb+0x32a>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d805      	bhi.n	8009a9a <_ZN3BTD4InitEhhb+0x29e>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 8009a8e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009a92:	3301      	adds	r3, #1
 8009a94:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009a98:	e79b      	b.n	80099d2 <_ZN3BTD4InitEhhb+0x1d6>
                                break;
 8009a9a:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d94a      	bls.n	8009b3c <_ZN3BTD4InitEhhb+0x340>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	3351      	adds	r3, #81	; 0x51
 8009aba:	f003 fffe 	bl	800daba <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009ac4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d12e      	bne.n	8009b2a <_ZN3BTD4InitEhhb+0x32e>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ae2:	f005 f95d 	bl	800eda0 <_ZN3USB7setConfEhhh>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009aec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d11c      	bne.n	8009b2e <_ZN3BTD4InitEhhb+0x332>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2264      	movs	r2, #100	; 0x64
 8009af8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	e023      	b.n	8009b66 <_ZN3BTD4InitEhhb+0x36a>
                goto FailSetDevTblEntry;
 8009b1e:	bf00      	nop
 8009b20:	e019      	b.n	8009b56 <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 8009b22:	bf00      	nop
 8009b24:	e017      	b.n	8009b56 <_ZN3BTD4InitEhhb+0x35a>
                                goto FailGetConfDescr;
 8009b26:	bf00      	nop
 8009b28:	e015      	b.n	8009b56 <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetDevTblEntry;
 8009b2a:	bf00      	nop
 8009b2c:	e013      	b.n	8009b56 <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 8009b2e:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 8009b30:	e011      	b.n	8009b56 <_ZN3BTD4InitEhhb+0x35a>
 8009b32:	bf00      	nop
 8009b34:	000493e0 	.word	0x000493e0
 8009b38:	000186a0 	.word	0x000186a0
                        goto FailUnknownDevice;
 8009b3c:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009b48:	2300      	movs	r3, #0
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f005 f8f8 	bl	800ed40 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 8009b50:	23d1      	movs	r3, #209	; 0xd1
 8009b52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3308      	adds	r3, #8
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	4798      	blx	r3
        return rcode;
 8009b62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3750      	adds	r7, #80	; 0x50
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop

08009b70 <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 8009b78:	2300      	movs	r3, #0
 8009b7a:	73fb      	strb	r3, [r7, #15]
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d845      	bhi.n	8009c0e <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 8009b82:	7bfa      	ldrb	r2, [r7, #15]
 8009b84:	6879      	ldr	r1, [r7, #4]
 8009b86:	4613      	mov	r3, r2
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	4413      	add	r3, r2
 8009b8c:	440b      	add	r3, r1
 8009b8e:	3351      	adds	r3, #81	; 0x51
 8009b90:	2200      	movs	r2, #0
 8009b92:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <_ZN3BTD10InitializeEv+0x2e>
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	e000      	b.n	8009ba0 <_ZN3BTD10InitializeEv+0x30>
 8009b9e:	2008      	movs	r0, #8
 8009ba0:	7bfa      	ldrb	r2, [r7, #15]
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	005b      	lsls	r3, r3, #1
 8009ba8:	4413      	add	r3, r2
 8009baa:	440b      	add	r3, r1
 8009bac:	3352      	adds	r3, #82	; 0x52
 8009bae:	4602      	mov	r2, r0
 8009bb0:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 8009bb2:	7bfa      	ldrb	r2, [r7, #15]
 8009bb4:	6879      	ldr	r1, [r7, #4]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	4413      	add	r3, r2
 8009bbc:	440b      	add	r3, r1
 8009bbe:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009bc2:	78d3      	ldrb	r3, [r2, #3]
 8009bc4:	f36f 0300 	bfc	r3, #0, #1
 8009bc8:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 8009bca:	7bfa      	ldrb	r2, [r7, #15]
 8009bcc:	6879      	ldr	r1, [r7, #4]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	4413      	add	r3, r2
 8009bd4:	440b      	add	r3, r1
 8009bd6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009bda:	78d3      	ldrb	r3, [r2, #3]
 8009bdc:	f36f 0341 	bfc	r3, #1, #1
 8009be0:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <_ZN3BTD10InitializeEv+0x7c>
 8009be8:	2101      	movs	r1, #1
 8009bea:	e000      	b.n	8009bee <_ZN3BTD10InitializeEv+0x7e>
 8009bec:	210f      	movs	r1, #15
 8009bee:	7bfa      	ldrb	r2, [r7, #15]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	4413      	add	r3, r2
 8009bf8:	4403      	add	r3, r0
 8009bfa:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009bfe:	78d3      	ldrb	r3, [r2, #3]
 8009c00:	f361 0387 	bfi	r3, r1, #2, #6
 8009c04:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	73fb      	strb	r3, [r7, #15]
 8009c0c:	e7b6      	b.n	8009b7c <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	d81c      	bhi.n	8009c52 <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	3318      	adds	r3, #24
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d010      	beq.n	8009c4a <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	3318      	adds	r3, #24
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	6859      	ldr	r1, [r3, #4]
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	3318      	adds	r3, #24
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4413      	add	r3, r2
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3308      	adds	r3, #8
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4608      	mov	r0, r1
 8009c48:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	73fb      	strb	r3, [r7, #15]
 8009c50:	e7df      	b.n	8009c12 <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 8009ca8:	bf00      	nop
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	4608      	mov	r0, r1
 8009cba:	4611      	mov	r1, r2
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	70fb      	strb	r3, [r7, #3]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	70bb      	strb	r3, [r7, #2]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 8009cca:	787b      	ldrb	r3, [r7, #1]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d15d      	bne.n	8009d8c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	78fa      	ldrb	r2, [r7, #3]
 8009cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	78db      	ldrb	r3, [r3, #3]
 8009cdc:	f003 0303 	and.w	r3, r3, #3
 8009ce0:	2b03      	cmp	r3, #3
 8009ce2:	d114      	bne.n	8009d0e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	789b      	ldrb	r3, [r3, #2]
 8009ce8:	b25b      	sxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	da0f      	bge.n	8009d0e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 8009cf2:	7bfa      	ldrb	r2, [r7, #15]
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	4413      	add	r3, r2
 8009cfc:	440b      	add	r3, r1
 8009cfe:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009d02:	78d3      	ldrb	r3, [r2, #3]
 8009d04:	2101      	movs	r1, #1
 8009d06:	f361 0387 	bfi	r3, r1, #2, #6
 8009d0a:	70d3      	strb	r3, [r2, #3]
 8009d0c:	e00e      	b.n	8009d2c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	78db      	ldrb	r3, [r3, #3]
 8009d12:	f003 0303 	and.w	r3, r3, #3
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d13a      	bne.n	8009d90 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	789b      	ldrb	r3, [r3, #2]
 8009d1e:	b25b      	sxtb	r3, r3
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	da01      	bge.n	8009d28 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 8009d24:	2302      	movs	r3, #2
 8009d26:	e000      	b.n	8009d2a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 8009d28:	2303      	movs	r3, #3
 8009d2a:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	789b      	ldrb	r3, [r3, #2]
 8009d30:	7bfa      	ldrb	r2, [r7, #15]
 8009d32:	f003 030f 	and.w	r3, r3, #15
 8009d36:	b2d8      	uxtb	r0, r3
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	005b      	lsls	r3, r3, #1
 8009d3e:	4413      	add	r3, r2
 8009d40:	440b      	add	r3, r1
 8009d42:	3351      	adds	r3, #81	; 0x51
 8009d44:	4602      	mov	r2, r0
 8009d46:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	889b      	ldrh	r3, [r3, #4]
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	7bfa      	ldrb	r2, [r7, #15]
 8009d50:	b2d8      	uxtb	r0, r3
 8009d52:	6879      	ldr	r1, [r7, #4]
 8009d54:	4613      	mov	r3, r2
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	4413      	add	r3, r2
 8009d5a:	440b      	add	r3, r1
 8009d5c:	3352      	adds	r3, #82	; 0x52
 8009d5e:	4602      	mov	r2, r0
 8009d60:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	799b      	ldrb	r3, [r3, #6]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d204      	bcs.n	8009d7a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	799a      	ldrb	r2, [r3, #6]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009d80:	3301      	adds	r3, #1
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8009d8a:	e002      	b.n	8009d92 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 8009d8c:	bf00      	nop
 8009d8e:	e000      	b.n	8009d92 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 8009d90:	bf00      	nop
}
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 8009d9c:	f1a0 0004 	sub.w	r0, r0, #4
 8009da0:	f7ff bf86 	b.w	8009cb0 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

08009da4 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f7ff fedf 	bl	8009b70 <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff fa72 	bl	80092a0 <_ZN3USB14GetAddressPoolEv>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	3208      	adds	r2, #8
 8009dc2:	6812      	ldr	r2, [r2, #0]
 8009dc4:	6879      	ldr	r1, [r7, #4]
 8009dc6:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 8009dca:	4618      	mov	r0, r3
 8009dcc:	4790      	blx	r2
        return 0;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8009de6:	f083 0301 	eor.w	r3, r3, #1
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <_ZN3BTD4PollEv+0x1c>
                return 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	e025      	b.n	8009e40 <_ZN3BTD4PollEv+0x68>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 8009df4:	f7f7 fed0 	bl	8001b98 <HAL_GetTick>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	4a13      	ldr	r2, [pc, #76]	; (8009e48 <_ZN3BTD4PollEv+0x70>)
 8009dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009e00:	099a      	lsrs	r2, r3, #6
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	43db      	mvns	r3, r3
 8009e0a:	0fdb      	lsrs	r3, r3, #31
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d015      	beq.n	8009e3e <_ZN3BTD4PollEv+0x66>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 8009e12:	f7f7 fec1 	bl	8001b98 <HAL_GetTick>
 8009e16:	4603      	mov	r3, r0
 8009e18:	4a0b      	ldr	r2, [pc, #44]	; (8009e48 <_ZN3BTD4PollEv+0x70>)
 8009e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1e:	099b      	lsrs	r3, r3, #6
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8009e26:	441a      	add	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f80d 	bl	8009e4c <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fb24 	bl	800a480 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fe4d 	bl	800aad8 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	10624dd3 	.word	0x10624dd3

08009e4c <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 8009e4c:	b5b0      	push	{r4, r5, r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af02      	add	r7, sp, #8
 8009e52:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 8009e54:	2340      	movs	r3, #64	; 0x40
 8009e56:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3389      	adds	r3, #137	; 0x89
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8009e72:	f107 050c 	add.w	r5, r7, #12
 8009e76:	9201      	str	r2, [sp, #4]
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	462b      	mov	r3, r5
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	f003 ff84 	bl	800dd8a <_ZN3USB10inTransferEhhPtPhh>
 8009e82:	4603      	mov	r3, r0
 8009e84:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d003      	beq.n	8009e94 <_ZN3BTD14HCI_event_taskEv+0x48>
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	f040 82f1 	bne.w	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	2b35      	cmp	r3, #53	; 0x35
 8009e9e:	f200 82ea 	bhi.w	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>
 8009ea2:	a201      	add	r2, pc, #4	; (adr r2, 8009ea8 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 8009ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea8:	0800a089 	.word	0x0800a089
 8009eac:	0800a0e9 	.word	0x0800a0e9
 8009eb0:	0800a241 	.word	0x0800a241
 8009eb4:	0800a32b 	.word	0x0800a32b
 8009eb8:	0800a29d 	.word	0x0800a29d
 8009ebc:	0800a3e9 	.word	0x0800a3e9
 8009ec0:	0800a2cf 	.word	0x0800a2cf
 8009ec4:	0800a461 	.word	0x0800a461
 8009ec8:	0800a461 	.word	0x0800a461
 8009ecc:	0800a477 	.word	0x0800a477
 8009ed0:	0800a477 	.word	0x0800a477
 8009ed4:	0800a461 	.word	0x0800a461
 8009ed8:	0800a461 	.word	0x0800a461
 8009edc:	08009f81 	.word	0x08009f81
 8009ee0:	0800a461 	.word	0x0800a461
 8009ee4:	0800a477 	.word	0x0800a477
 8009ee8:	0800a477 	.word	0x0800a477
 8009eec:	0800a461 	.word	0x0800a461
 8009ef0:	0800a461 	.word	0x0800a461
 8009ef4:	0800a477 	.word	0x0800a477
 8009ef8:	0800a477 	.word	0x0800a477
 8009efc:	0800a3b7 	.word	0x0800a3b7
 8009f00:	0800a3e1 	.word	0x0800a3e1
 8009f04:	0800a461 	.word	0x0800a461
 8009f08:	0800a461 	.word	0x0800a461
 8009f0c:	0800a461 	.word	0x0800a461
 8009f10:	0800a461 	.word	0x0800a461
 8009f14:	0800a477 	.word	0x0800a477
 8009f18:	0800a477 	.word	0x0800a477
 8009f1c:	0800a477 	.word	0x0800a477
 8009f20:	0800a477 	.word	0x0800a477
 8009f24:	0800a461 	.word	0x0800a461
 8009f28:	0800a477 	.word	0x0800a477
 8009f2c:	0800a477 	.word	0x0800a477
 8009f30:	0800a477 	.word	0x0800a477
 8009f34:	0800a477 	.word	0x0800a477
 8009f38:	0800a477 	.word	0x0800a477
 8009f3c:	0800a477 	.word	0x0800a477
 8009f40:	0800a477 	.word	0x0800a477
 8009f44:	0800a477 	.word	0x0800a477
 8009f48:	0800a477 	.word	0x0800a477
 8009f4c:	0800a477 	.word	0x0800a477
 8009f50:	0800a477 	.word	0x0800a477
 8009f54:	0800a477 	.word	0x0800a477
 8009f58:	0800a477 	.word	0x0800a477
 8009f5c:	0800a477 	.word	0x0800a477
 8009f60:	0800a477 	.word	0x0800a477
 8009f64:	0800a477 	.word	0x0800a477
 8009f68:	0800a451 	.word	0x0800a451
 8009f6c:	0800a461 	.word	0x0800a461
 8009f70:	0800a459 	.word	0x0800a459
 8009f74:	0800a477 	.word	0x0800a477
 8009f78:	0800a477 	.word	0x0800a477
 8009f7c:	0800a461 	.word	0x0800a461
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f040 826c 	bne.w	800a464 <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009f92:	f043 0301 	orr.w	r3, r3, #1
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d114      	bne.n	8009fd2 <_ZN3BTD14HCI_event_taskEv+0x186>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009fae:	2b10      	cmp	r3, #16
 8009fb0:	d10f      	bne.n	8009fd2 <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8009fd0:	e059      	b.n	800a086 <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009fd8:	2b04      	cmp	r3, #4
 8009fda:	d12a      	bne.n	800a032 <_ZN3BTD14HCI_event_taskEv+0x1e6>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009fe2:	2b10      	cmp	r3, #16
 8009fe4:	d125      	bne.n	800a032 <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d114      	bne.n	800a01e <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10f      	bne.n	800a01e <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800a004:	f003 0308 	and.w	r3, r3, #8
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d004      	beq.n	800a016 <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800a014:	e003      	b.n	800a01e <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a028:	b29a      	uxth	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800a030:	e029      	b.n	800a086 <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a038:	2b09      	cmp	r3, #9
 800a03a:	f040 8213 	bne.w	800a464 <_ZN3BTD14HCI_event_taskEv+0x618>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a044:	2b10      	cmp	r3, #16
 800a046:	f040 820d 	bne.w	800a464 <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800a04a:	2300      	movs	r3, #0
 800a04c:	75fb      	strb	r3, [r7, #23]
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
 800a050:	2b05      	cmp	r3, #5
 800a052:	d80e      	bhi.n	800a072 <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800a054:	7dfb      	ldrb	r3, [r7, #23]
 800a056:	1d9a      	adds	r2, r3, #6
 800a058:	7dfb      	ldrb	r3, [r7, #23]
 800a05a:	6879      	ldr	r1, [r7, #4]
 800a05c:	440a      	add	r2, r1
 800a05e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	4413      	add	r3, r2
 800a066:	460a      	mov	r2, r1
 800a068:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
 800a06c:	3301      	adds	r3, #1
 800a06e:	75fb      	strb	r3, [r7, #23]
 800a070:	e7ed      	b.n	800a04e <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a078:	f043 0320 	orr.w	r3, r3, #32
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800a084:	e1ee      	b.n	800a464 <_ZN3BTD14HCI_event_taskEv+0x618>
 800a086:	e1ed      	b.n	800a464 <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a08e:	2b04      	cmp	r3, #4
 800a090:	d921      	bls.n	800a0d6 <_ZN3BTD14HCI_event_taskEv+0x28a>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d104      	bne.n	800a0a6 <_ZN3BTD14HCI_event_taskEv+0x25a>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d017      	beq.n	800a0d6 <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	220a      	movs	r2, #10
 800a0d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a0dc:	3301      	adds	r3, #1
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800a0e6:	e1c6      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f000 81ba 	beq.w	800a468 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75bb      	strb	r3, [r7, #22]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a0fe:	7dba      	ldrb	r2, [r7, #22]
 800a100:	429a      	cmp	r2, r3
 800a102:	f080 81b1 	bcs.w	800a468 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a10c:	00db      	lsls	r3, r3, #3
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	7dbb      	ldrb	r3, [r7, #22]
 800a112:	4619      	mov	r1, r3
 800a114:	0049      	lsls	r1, r1, #1
 800a116:	440b      	add	r3, r1
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	4413      	add	r3, r2
 800a11c:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800a11e:	2300      	movs	r3, #0
 800a120:	757b      	strb	r3, [r7, #21]
 800a122:	7d7b      	ldrb	r3, [r7, #21]
 800a124:	2b02      	cmp	r3, #2
 800a126:	d811      	bhi.n	800a14c <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800a128:	7d7b      	ldrb	r3, [r7, #21]
 800a12a:	1d1a      	adds	r2, r3, #4
 800a12c:	7bbb      	ldrb	r3, [r7, #14]
 800a12e:	441a      	add	r2, r3
 800a130:	7d7b      	ldrb	r3, [r7, #21]
 800a132:	6879      	ldr	r1, [r7, #4]
 800a134:	440a      	add	r2, r1
 800a136:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	4413      	add	r3, r2
 800a13e:	460a      	mov	r2, r1
 800a140:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800a144:	7d7b      	ldrb	r3, [r7, #21]
 800a146:	3301      	adds	r3, #1
 800a148:	757b      	strb	r3, [r7, #21]
 800a14a:	e7ea      	b.n	800a122 <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a152:	2b00      	cmp	r3, #0
 800a154:	d038      	beq.n	800a1c8 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d133      	bne.n	800a1c8 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a166:	2b05      	cmp	r3, #5
 800a168:	d12e      	bne.n	800a1c8 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a170:	f003 030c 	and.w	r3, r3, #12
 800a174:	2b00      	cmp	r3, #0
 800a176:	d027      	beq.n	800a1c8 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800a180:	2300      	movs	r3, #0
 800a182:	753b      	strb	r3, [r7, #20]
 800a184:	7d3b      	ldrb	r3, [r7, #20]
 800a186:	2b05      	cmp	r3, #5
 800a188:	d814      	bhi.n	800a1b4 <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800a18a:	7d3b      	ldrb	r3, [r7, #20]
 800a18c:	1cd9      	adds	r1, r3, #3
 800a18e:	7dba      	ldrb	r2, [r7, #22]
 800a190:	4613      	mov	r3, r2
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	4413      	add	r3, r2
 800a196:	005b      	lsls	r3, r3, #1
 800a198:	18ca      	adds	r2, r1, r3
 800a19a:	7d3b      	ldrb	r3, [r7, #20]
 800a19c:	6879      	ldr	r1, [r7, #4]
 800a19e:	440a      	add	r2, r1
 800a1a0:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	460a      	mov	r2, r1
 800a1aa:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800a1ac:	7d3b      	ldrb	r3, [r7, #20]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	753b      	strb	r3, [r7, #20]
 800a1b2:	e7e7      	b.n	800a184 <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a1ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800a1c6:	e03a      	b.n	800a23e <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d031      	beq.n	800a236 <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a1d8:	f003 030f 	and.w	r3, r3, #15
 800a1dc:	2b05      	cmp	r3, #5
 800a1de:	d12a      	bne.n	800a236 <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a1e6:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d023      	beq.n	800a236 <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	74fb      	strb	r3, [r7, #19]
 800a1f2:	7cfb      	ldrb	r3, [r7, #19]
 800a1f4:	2b05      	cmp	r3, #5
 800a1f6:	d814      	bhi.n	800a222 <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800a1f8:	7cfb      	ldrb	r3, [r7, #19]
 800a1fa:	1cd9      	adds	r1, r3, #3
 800a1fc:	7dba      	ldrb	r2, [r7, #22]
 800a1fe:	4613      	mov	r3, r2
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	4413      	add	r3, r2
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	18ca      	adds	r2, r1, r3
 800a208:	7cfb      	ldrb	r3, [r7, #19]
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	440a      	add	r2, r1
 800a20e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	4413      	add	r3, r2
 800a216:	460a      	mov	r2, r1
 800a218:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800a21a:	7cfb      	ldrb	r3, [r7, #19]
 800a21c:	3301      	adds	r3, #1
 800a21e:	74fb      	strb	r3, [r7, #19]
 800a220:	e7e7      	b.n	800a1f2 <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800a234:	e003      	b.n	800a23e <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800a236:	7dbb      	ldrb	r3, [r7, #22]
 800a238:	3301      	adds	r3, #1
 800a23a:	75bb      	strb	r3, [r7, #22]
 800a23c:	e75c      	b.n	800a0f8 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800a23e:	e113      	b.n	800a468 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d11a      	bne.n	800a292 <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a262:	b21a      	sxth	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a26a:	021b      	lsls	r3, r3, #8
 800a26c:	b21b      	sxth	r3, r3
 800a26e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a272:	b21b      	sxth	r3, r3
 800a274:	4313      	orrs	r3, r2
 800a276:	b21b      	sxth	r3, r3
 800a278:	b29a      	uxth	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a284:	f043 0302 	orr.w	r3, r3, #2
 800a288:	b29a      	uxth	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800a290:	e0f1      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2206      	movs	r2, #6
 800a296:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800a29a:	e0ec      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f040 80e2 	bne.w	800a46c <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a2ae:	f043 0304 	orr.w	r3, r3, #4
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a2c0:	f023 0302 	bic.w	r3, r3, #2
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800a2cc:	e0ce      	b.n	800a46c <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f040 80cb 	bne.w	800a470 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800a2da:	2300      	movs	r3, #0
 800a2dc:	74bb      	strb	r3, [r7, #18]
 800a2de:	7cbb      	ldrb	r3, [r7, #18]
 800a2e0:	2b1d      	cmp	r3, #29
 800a2e2:	d818      	bhi.n	800a316 <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800a2e4:	7cbb      	ldrb	r3, [r7, #18]
 800a2e6:	f103 0209 	add.w	r2, r3, #9
 800a2ea:	7cbb      	ldrb	r3, [r7, #18]
 800a2ec:	6879      	ldr	r1, [r7, #4]
 800a2ee:	440a      	add	r2, r1
 800a2f0:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	460a      	mov	r2, r1
 800a2fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800a2fe:	7cbb      	ldrb	r3, [r7, #18]
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	4413      	add	r3, r2
 800a304:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d003      	beq.n	800a314 <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800a30c:	7cbb      	ldrb	r3, [r7, #18]
 800a30e:	3301      	adds	r3, #1
 800a310:	74bb      	strb	r3, [r7, #18]
 800a312:	e7e4      	b.n	800a2de <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800a314:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a31c:	f043 0308 	orr.w	r3, r3, #8
 800a320:	b29a      	uxth	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800a328:	e0a2      	b.n	800a470 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800a32a:	2300      	movs	r3, #0
 800a32c:	747b      	strb	r3, [r7, #17]
 800a32e:	7c7b      	ldrb	r3, [r7, #17]
 800a330:	2b05      	cmp	r3, #5
 800a332:	d80e      	bhi.n	800a352 <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800a334:	7c7b      	ldrb	r3, [r7, #17]
 800a336:	1c9a      	adds	r2, r3, #2
 800a338:	7c7b      	ldrb	r3, [r7, #17]
 800a33a:	6879      	ldr	r1, [r7, #4]
 800a33c:	440a      	add	r2, r1
 800a33e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	4413      	add	r3, r2
 800a346:	460a      	mov	r2, r1
 800a348:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800a34a:	7c7b      	ldrb	r3, [r7, #17]
 800a34c:	3301      	adds	r3, #1
 800a34e:	747b      	strb	r3, [r7, #17]
 800a350:	e7ed      	b.n	800a32e <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800a352:	2300      	movs	r3, #0
 800a354:	743b      	strb	r3, [r7, #16]
 800a356:	7c3b      	ldrb	r3, [r7, #16]
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d810      	bhi.n	800a37e <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800a35c:	7c3b      	ldrb	r3, [r7, #16]
 800a35e:	f103 0208 	add.w	r2, r3, #8
 800a362:	7c3b      	ldrb	r3, [r7, #16]
 800a364:	6879      	ldr	r1, [r7, #4]
 800a366:	440a      	add	r2, r1
 800a368:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	4413      	add	r3, r2
 800a370:	460a      	mov	r2, r1
 800a372:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800a376:	7c3b      	ldrb	r3, [r7, #16]
 800a378:	3301      	adds	r3, #1
 800a37a:	743b      	strb	r3, [r7, #16]
 800a37c:	e7eb      	b.n	800a356 <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a384:	f003 030f 	and.w	r3, r3, #15
 800a388:	2b05      	cmp	r3, #5
 800a38a:	d10a      	bne.n	800a3a2 <_ZN3BTD14HCI_event_taskEv+0x556>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a392:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800a396:	2b00      	cmp	r3, #0
 800a398:	d003      	beq.n	800a3a2 <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2201      	movs	r2, #1
 800a39e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a3a8:	f043 0310 	orr.w	r3, r3, #16
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800a3b4:	e05f      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d003      	beq.n	800a3c8 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 feec 	bl	800b19e <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800a3c6:	e056      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fee4 	bl	800b19e <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800a3d6:	e04e      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 ff93 	bl	800b304 <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800a3de:	e04a      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 ffca 	bl	800b37a <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800a3e6:	e046      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d123      	bne.n	800a43a <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00c      	beq.n	800a416 <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a402:	f083 0301 	eor.w	r3, r3, #1
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d004      	beq.n	800a416 <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800a414:	e02e      	b.n	800a474 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d029      	beq.n	800a474 <_ZN3BTD14HCI_event_taskEv+0x628>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a426:	f083 0301 	eor.w	r3, r3, #1
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d021      	beq.n	800a474 <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800a438:	e01c      	b.n	800a474 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	8b5b      	ldrh	r3, [r3, #26]
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f001 f882 	bl	800b54a <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2210      	movs	r2, #16
 800a44a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800a44e:	e011      	b.n	800a474 <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 ffcd 	bl	800b3f0 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800a456:	e00e      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f001 f810 	bl	800b47e <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800a45e:	e00a      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800a460:	bf00      	nop
 800a462:	e008      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a464:	bf00      	nop
 800a466:	e006      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a468:	bf00      	nop
 800a46a:	e004      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a46c:	bf00      	nop
 800a46e:	e002      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a470:	bf00      	nop
 800a472:	e000      	b.n	800a476 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a474:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800a476:	bf00      	nop
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bdb0      	pop	{r4, r5, r7, pc}
 800a47e:	bf00      	nop

0800a480 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a48e:	2b13      	cmp	r3, #19
 800a490:	f200 82ef 	bhi.w	800aa72 <_ZN3BTD8HCI_taskEv+0x5f2>
 800a494:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <_ZN3BTD8HCI_taskEv+0x1c>)
 800a496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49a:	bf00      	nop
 800a49c:	0800a4ed 	.word	0x0800a4ed
 800a4a0:	0800a527 	.word	0x0800a527
 800a4a4:	0800a5ad 	.word	0x0800a5ad
 800a4a8:	0800a5cd 	.word	0x0800a5cd
 800a4ac:	0800a5ed 	.word	0x0800a5ed
 800a4b0:	0800a641 	.word	0x0800a641
 800a4b4:	0800a6e7 	.word	0x0800a6e7
 800a4b8:	0800a715 	.word	0x0800a715
 800a4bc:	0800a74f 	.word	0x0800a74f
 800a4c0:	0800a777 	.word	0x0800a777
 800a4c4:	0800a7ad 	.word	0x0800a7ad
 800a4c8:	0800a80b 	.word	0x0800a80b
 800a4cc:	0800a849 	.word	0x0800a849
 800a4d0:	0800a96f 	.word	0x0800a96f
 800a4d4:	0800aa73 	.word	0x0800aa73
 800a4d8:	0800a9b5 	.word	0x0800a9b5
 800a4dc:	0800a9e3 	.word	0x0800a9e3
 800a4e0:	0800a677 	.word	0x0800a677
 800a4e4:	0800a6ad 	.word	0x0800a6ad
 800a4e8:	0800a6cd 	.word	0x0800a6cd
                case HCI_INIT_STATE:
                        hci_counter++;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a508:	429a      	cmp	r2, r3
 800a50a:	f240 82b4 	bls.w	800aa76 <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fb7d 	bl	800ac0e <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800a524:	e2a7      	b.n	800aa76 <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a52c:	3301      	adds	r3, #1
 800a52e:	b29a      	uxth	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00b      	beq.n	800a55c <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2202      	movs	r2, #2
 800a550:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 f830 	bl	800b5ba <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800a55a:	e28e      	b.n	800aa7a <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a568:	429a      	cmp	r2, r3
 800a56a:	f240 8286 	bls.w	800aa7a <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a574:	461a      	mov	r2, r3
 800a576:	0092      	lsls	r2, r2, #2
 800a578:	4413      	add	r3, r2
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a58a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a58e:	d904      	bls.n	800a59a <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a596:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800a5aa:	e266      	b.n	800aa7a <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 8261 	beq.w	800aa7e <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2203      	movs	r2, #3
 800a5c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fb72 	bl	800acae <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800a5ca:	e258      	b.n	800aa7e <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a5d2:	f003 0320 	and.w	r3, r3, #32
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 8253 	beq.w	800aa82 <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 fb8a 	bl	800acf6 <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2204      	movs	r2, #4
 800a5e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a5ea:	e24a      	b.n	800aa82 <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 8245 	beq.w	800aa86 <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00a      	beq.n	800a61a <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	4619      	mov	r1, r3
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fc5d 	bl	800aeca <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2205      	movs	r2, #5
 800a614:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a618:	e235      	b.n	800aa86 <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a620:	2b00      	cmp	r3, #0
 800a622:	d008      	beq.n	800a636 <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a624:	2100      	movs	r1, #0
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fb89 	bl	800ad3e <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2211      	movs	r2, #17
 800a630:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a634:	e227      	b.n	800aa86 <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2206      	movs	r2, #6
 800a63a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a63e:	e222      	b.n	800aa86 <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 821d 	beq.w	800aa8a <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a656:	2b00      	cmp	r3, #0
 800a658:	d008      	beq.n	800a66c <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a65a:	2100      	movs	r1, #0
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fb6e 	bl	800ad3e <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2211      	movs	r2, #17
 800a666:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a66a:	e20e      	b.n	800aa8a <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2206      	movs	r2, #6
 800a670:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a674:	e209      	b.n	800aa8a <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a67c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 8204 	beq.w	800aa8e <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d008      	beq.n	800a6a2 <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800a690:	2101      	movs	r1, #1
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 fc9d 	bl	800afd2 <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2212      	movs	r2, #18
 800a69c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a6a0:	e1f5      	b.n	800aa8e <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2206      	movs	r2, #6
 800a6a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a6aa:	e1f0      	b.n	800aa8e <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f000 81eb 	beq.w	800aa92 <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fc4d 	bl	800af5c <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2213      	movs	r2, #19
 800a6c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a6ca:	e1e2      	b.n	800aa92 <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f000 81dd 	beq.w	800aa96 <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2206      	movs	r2, #6
 800a6e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a6e4:	e1d7      	b.n	800aa96 <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d104      	bne.n	800a6fa <_ZN3BTD8HCI_taskEv+0x27a>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d007      	beq.n	800a70a <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fc8f 	bl	800b01e <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2207      	movs	r2, #7
 800a704:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800a708:	e1d8      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	220a      	movs	r2, #10
 800a70e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a712:	e1d3      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a71a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f000 81bb 	beq.w	800aa9a <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fcb2 	bl	800b08e <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a730:	2b00      	cmp	r3, #0
 800a732:	d007      	beq.n	800a744 <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 fb74 	bl	800ae22 <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	220c      	movs	r2, #12
 800a73e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800a742:	e1aa      	b.n	800aa9a <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2208      	movs	r2, #8
 800a748:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a74c:	e1a5      	b.n	800aa9a <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a754:	f003 0301 	and.w	r3, r3, #1
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 81a0 	beq.w	800aa9e <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fcac 	bl	800b0c4 <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2209      	movs	r2, #9
 800a770:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a774:	e193      	b.n	800aa9e <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a77c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a780:	2b00      	cmp	r3, #0
 800a782:	f000 818e 	beq.w	800aaa2 <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a78c:	f003 0302 	and.w	r3, r3, #2
 800a790:	2b00      	cmp	r3, #0
 800a792:	d007      	beq.n	800a7a4 <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fead 	bl	800b4f4 <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	220a      	movs	r2, #10
 800a79e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800a7a2:	e17e      	b.n	800aaa2 <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fc8d 	bl	800b0c4 <_ZN3BTD11hci_connectEv>
                        break;
 800a7aa:	e17a      	b.n	800aaa2 <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7b2:	f083 0301 	eor.w	r3, r3, #1
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 8174 	beq.w	800aaa6 <_ZN3BTD8HCI_taskEv+0x626>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a7c4:	f083 0301 	eor.w	r3, r3, #1
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f000 816b 	beq.w	800aaa6 <_ZN3BTD8HCI_taskEv+0x626>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a7d6:	f083 0301 	eor.w	r3, r3, #1
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 8162 	beq.w	800aaa6 <_ZN3BTD8HCI_taskEv+0x626>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a7e8:	f083 0301 	eor.w	r3, r3, #1
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 8159 	beq.w	800aaa6 <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fa29 	bl	800ac4c <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	220b      	movs	r2, #11
 800a804:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a808:	e14d      	b.n	800aaa6 <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a810:	f003 0310 	and.w	r3, r3, #16
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00a      	beq.n	800a82e <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 faff 	bl	800ae22 <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	220c      	movs	r2, #12
 800a828:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800a82c:	e13d      	b.n	800aaaa <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a834:	f003 0304 	and.w	r3, r3, #4
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 8136 	beq.w	800aaaa <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2210      	movs	r2, #16
 800a842:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a846:	e130      	b.n	800aaaa <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a84e:	f003 0308 	and.w	r3, r3, #8
 800a852:	2b00      	cmp	r3, #0
 800a854:	f000 812b 	beq.w	800aaae <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	3322      	adds	r3, #34	; 0x22
 800a85c:	2208      	movs	r2, #8
 800a85e:	4999      	ldr	r1, [pc, #612]	; (800aac4 <_ZN3BTD8HCI_taskEv+0x644>)
 800a860:	4618      	mov	r0, r3
 800a862:	f004 fe71 	bl	800f548 <strncmp>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d147      	bne.n	800a8fc <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3322      	adds	r3, #34	; 0x22
 800a890:	2216      	movs	r2, #22
 800a892:	498d      	ldr	r1, [pc, #564]	; (800aac8 <_ZN3BTD8HCI_taskEv+0x648>)
 800a894:	4618      	mov	r0, r3
 800a896:	f004 fe57 	bl	800f548 <strncmp>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d104      	bne.n	800a8aa <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8a8:	e028      	b.n	800a8fc <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	3322      	adds	r3, #34	; 0x22
 800a8ae:	2216      	movs	r2, #22
 800a8b0:	4986      	ldr	r1, [pc, #536]	; (800aacc <_ZN3BTD8HCI_taskEv+0x64c>)
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f004 fe48 	bl	800f548 <strncmp>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d110      	bne.n	800a8e0 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8de:	e00d      	b.n	800a8fc <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3322      	adds	r3, #34	; 0x22
 800a8e4:	2213      	movs	r2, #19
 800a8e6:	497a      	ldr	r1, [pc, #488]	; (800aad0 <_ZN3BTD8HCI_taskEv+0x650>)
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f004 fe2d 	bl	800f548 <strncmp>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d103      	bne.n	800a8fc <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a902:	2b00      	cmp	r3, #0
 800a904:	d117      	bne.n	800a936 <_ZN3BTD8HCI_taskEv+0x4b6>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a90c:	2b25      	cmp	r3, #37	; 0x25
 800a90e:	d112      	bne.n	800a936 <_ZN3BTD8HCI_taskEv+0x4b6>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a916:	2b08      	cmp	r3, #8
 800a918:	d10d      	bne.n	800a936 <_ZN3BTD8HCI_taskEv+0x4b6>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	3322      	adds	r3, #34	; 0x22
 800a91e:	2213      	movs	r2, #19
 800a920:	496c      	ldr	r1, [pc, #432]	; (800aad4 <_ZN3BTD8HCI_taskEv+0x654>)
 800a922:	4618      	mov	r0, r3
 800a924:	f004 fe10 	bl	800f548 <strncmp>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d103      	bne.n	800a936 <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d104      	bne.n	800a94a <_ZN3BTD8HCI_taskEv+0x4ca>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a946:	2b00      	cmp	r3, #0
 800a948:	d009      	beq.n	800a95e <_ZN3BTD8HCI_taskEv+0x4de>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a950:	2b00      	cmp	r3, #0
 800a952:	d004      	beq.n	800a95e <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2208      	movs	r2, #8
 800a958:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800a95c:	e0a7      	b.n	800aaae <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fa17 	bl	800ad92 <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	220d      	movs	r2, #13
 800a968:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a96c:	e09f      	b.n	800aaae <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a974:	f003 0302 	and.w	r3, r3, #2
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f000 809a 	beq.w	800aab2 <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a984:	2b00      	cmp	r3, #0
 800a986:	d003      	beq.n	800a990 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	220f      	movs	r2, #15
 800a9ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a9b2:	e07e      	b.n	800aab2 <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a9ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9ce:	d972      	bls.n	800aab6 <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	220a      	movs	r2, #10
 800a9dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a9e0:	e069      	b.n	800aab6 <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a9e8:	f003 0304 	and.w	r3, r3, #4
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d064      	beq.n	800aaba <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	3389      	adds	r3, #137	; 0x89
 800a9fc:	2240      	movs	r2, #64	; 0x40
 800a9fe:	2100      	movs	r1, #0
 800aa00:	4618      	mov	r0, r3
 800aa02:	f004 fd55 	bl	800f4b0 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	33c9      	adds	r3, #201	; 0xc9
 800aa0a:	2240      	movs	r2, #64	; 0x40
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f004 fd4e 	bl	800f4b0 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	220a      	movs	r2, #10
 800aa6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800aa70:	e023      	b.n	800aaba <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800aa72:	bf00      	nop
 800aa74:	e022      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aa76:	bf00      	nop
 800aa78:	e020      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aa7a:	bf00      	nop
 800aa7c:	e01e      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aa7e:	bf00      	nop
 800aa80:	e01c      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aa82:	bf00      	nop
 800aa84:	e01a      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aa86:	bf00      	nop
 800aa88:	e018      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aa8a:	bf00      	nop
 800aa8c:	e016      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aa8e:	bf00      	nop
 800aa90:	e014      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aa92:	bf00      	nop
 800aa94:	e012      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aa96:	bf00      	nop
 800aa98:	e010      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aa9a:	bf00      	nop
 800aa9c:	e00e      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aa9e:	bf00      	nop
 800aaa0:	e00c      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aaa2:	bf00      	nop
 800aaa4:	e00a      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aaa6:	bf00      	nop
 800aaa8:	e008      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aaaa:	bf00      	nop
 800aaac:	e006      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aaae:	bf00      	nop
 800aab0:	e004      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aab2:	bf00      	nop
 800aab4:	e002      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aab6:	bf00      	nop
 800aab8:	e000      	b.n	800aabc <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800aaba:	bf00      	nop
        }
}
 800aabc:	bf00      	nop
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	0800f64c 	.word	0x0800f64c
 800aac8:	0800f658 	.word	0x0800f658
 800aacc:	0800f670 	.word	0x0800f670
 800aad0:	0800f688 	.word	0x0800f688
 800aad4:	0800f69c 	.word	0x0800f69c

0800aad8 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800aad8:	b5b0      	push	{r4, r5, r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af02      	add	r7, sp, #8
 800aade:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800aae0:	2340      	movs	r3, #64	; 0x40
 800aae2:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	33c9      	adds	r3, #201	; 0xc9
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800aafe:	f107 050a 	add.w	r5, r7, #10
 800ab02:	9201      	str	r2, [sp, #4]
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	462b      	mov	r3, r5
 800ab08:	4622      	mov	r2, r4
 800ab0a:	f003 f93e 	bl	800dd8a <_ZN3USB10inTransferEhhPtPhh>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800ab12:	7b7b      	ldrb	r3, [r7, #13]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d125      	bne.n	800ab64 <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800ab18:	897b      	ldrh	r3, [r7, #10]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d022      	beq.n	800ab64 <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73fb      	strb	r3, [r7, #15]
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d81d      	bhi.n	800ab64 <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	3318      	adds	r3, #24
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d011      	beq.n	800ab5c <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	3318      	adds	r3, #24
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4413      	add	r3, r2
 800ab42:	6858      	ldr	r0, [r3, #4]
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	3318      	adds	r3, #24
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	32c9      	adds	r2, #201	; 0xc9
 800ab58:	4611      	mov	r1, r2
 800ab5a:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	73fb      	strb	r3, [r7, #15]
 800ab62:	e7de      	b.n	800ab22 <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ab64:	2300      	movs	r3, #0
 800ab66:	73bb      	strb	r3, [r7, #14]
 800ab68:	7bbb      	ldrb	r3, [r7, #14]
 800ab6a:	2b03      	cmp	r3, #3
 800ab6c:	d81c      	bhi.n	800aba8 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800ab6e:	7bbb      	ldrb	r3, [r7, #14]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	3318      	adds	r3, #24
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	4413      	add	r3, r2
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d010      	beq.n	800aba0 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800ab7e:	7bbb      	ldrb	r3, [r7, #14]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	3318      	adds	r3, #24
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	6859      	ldr	r1, [r3, #4]
 800ab8a:	7bbb      	ldrb	r3, [r7, #14]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	3318      	adds	r3, #24
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4413      	add	r3, r2
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3304      	adds	r3, #4
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800aba0:	7bbb      	ldrb	r3, [r7, #14]
 800aba2:	3301      	adds	r3, #1
 800aba4:	73bb      	strb	r3, [r7, #14]
 800aba6:	e7df      	b.n	800ab68 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800aba8:	bf00      	nop
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bdb0      	pop	{r4, r5, r7, pc}

0800abb0 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08c      	sub	sp, #48	; 0x30
 800abb4:	af08      	add	r7, sp, #32
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	4613      	mov	r3, r2
 800abbc:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800abc4:	f023 0301 	bic.w	r3, r3, #1
 800abc8:	b29a      	uxth	r2, r3
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800abe0:	2300      	movs	r3, #0
 800abe2:	9307      	str	r3, [sp, #28]
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	9306      	str	r3, [sp, #24]
 800abe8:	88fb      	ldrh	r3, [r7, #6]
 800abea:	9305      	str	r3, [sp, #20]
 800abec:	88fb      	ldrh	r3, [r7, #6]
 800abee:	9304      	str	r3, [sp, #16]
 800abf0:	2300      	movs	r3, #0
 800abf2:	9303      	str	r3, [sp, #12]
 800abf4:	2300      	movs	r3, #0
 800abf6:	9302      	str	r3, [sp, #8]
 800abf8:	2300      	movs	r3, #0
 800abfa:	9301      	str	r3, [sp, #4]
 800abfc:	2300      	movs	r3, #0
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	2320      	movs	r3, #32
 800ac02:	f002 ffea 	bl	800dbda <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ac06:	bf00      	nop
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b082      	sub	sp, #8
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2203      	movs	r2, #3
 800ac22:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	220c      	movs	r2, #12
 800ac2a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3389      	adds	r3, #137	; 0x89
 800ac3a:	2203      	movs	r2, #3
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7ff ffb6 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ac5a:	f023 0310 	bic.w	r3, r3, #16
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	221a      	movs	r2, #26
 800ac6a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	220c      	movs	r2, #12
 800ac72:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d004      	beq.n	800ac90 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2203      	movs	r2, #3
 800ac8a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800ac8e:	e003      	b.n	800ac98 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2202      	movs	r2, #2
 800ac94:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3389      	adds	r3, #137	; 0x89
 800ac9c:	2204      	movs	r2, #4
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f7ff ff85 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800aca6:	bf00      	nop
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800acae:	b580      	push	{r7, lr}
 800acb0:	b082      	sub	sp, #8
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800acbc:	f023 0320 	bic.w	r3, r3, #32
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2209      	movs	r2, #9
 800accc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2210      	movs	r2, #16
 800acd4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	3389      	adds	r3, #137	; 0x89
 800ace4:	2203      	movs	r2, #3
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff ff61 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800acee:	bf00      	nop
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b082      	sub	sp, #8
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ad04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2210      	movs	r2, #16
 800ad1c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	3389      	adds	r3, #137	; 0x89
 800ad2c:	2203      	movs	r2, #3
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7ff ff3d 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800ad36:	bf00      	nop
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b082      	sub	sp, #8
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
 800ad46:	460b      	mov	r3, r1
 800ad48:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ad50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2204      	movs	r2, #4
 800ad60:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2210      	movs	r2, #16
 800ad68:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	78fa      	ldrb	r2, [r7, #3]
 800ad78:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3389      	adds	r3, #137	; 0x89
 800ad80:	2204      	movs	r2, #4
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7ff ff13 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800ad8a:	bf00      	nop
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b082      	sub	sp, #8
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ada0:	f023 0302 	bic.w	r3, r3, #2
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2209      	movs	r2, #9
 800adb0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2204      	movs	r2, #4
 800adb8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2207      	movs	r2, #7
 800adc0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	7f1a      	ldrb	r2, [r3, #28]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	7f5a      	ldrb	r2, [r3, #29]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7f9a      	ldrb	r2, [r3, #30]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	7fda      	ldrb	r2, [r3, #31]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 2020 	ldrb.w	r2, [r3, #32]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3389      	adds	r3, #137	; 0x89
 800ae10:	220a      	movs	r2, #10
 800ae12:	4619      	mov	r1, r3
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7ff fecb 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800ae1a:	bf00      	nop
 800ae1c:	3708      	adds	r7, #8
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b082      	sub	sp, #8
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ae30:	f023 0308 	bic.w	r3, r3, #8
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2219      	movs	r2, #25
 800ae40:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2204      	movs	r2, #4
 800ae48:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	220a      	movs	r2, #10
 800ae50:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	7f1a      	ldrb	r2, [r3, #28]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	7f5a      	ldrb	r2, [r3, #29]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	7f9a      	ldrb	r2, [r3, #30]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	7fda      	ldrb	r2, [r3, #31]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	3389      	adds	r3, #137	; 0x89
 800aeb8:	220d      	movs	r2, #13
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f7ff fe77 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800aec2:	bf00      	nop
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800aeca:	b590      	push	{r4, r7, lr}
 800aecc:	b085      	sub	sp, #20
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2213      	movs	r2, #19
 800aed8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	220c      	movs	r2, #12
 800aee0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800aee4:	6838      	ldr	r0, [r7, #0]
 800aee6:	f7f5 f98d 	bl	8000204 <strlen>
 800aeea:	4603      	mov	r3, r0
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	3301      	adds	r3, #1
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800aef8:	2300      	movs	r3, #0
 800aefa:	73fb      	strb	r3, [r7, #15]
 800aefc:	7bfc      	ldrb	r4, [r7, #15]
 800aefe:	6838      	ldr	r0, [r7, #0]
 800af00:	f7f5 f980 	bl	8000204 <strlen>
 800af04:	4603      	mov	r3, r0
 800af06:	429c      	cmp	r4, r3
 800af08:	d20e      	bcs.n	800af28 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	441a      	add	r2, r3
 800af10:	7bfb      	ldrb	r3, [r7, #15]
 800af12:	3303      	adds	r3, #3
 800af14:	7811      	ldrb	r1, [r2, #0]
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	4413      	add	r3, r2
 800af1a:	460a      	mov	r2, r1
 800af1c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	3301      	adds	r3, #1
 800af24:	73fb      	strb	r3, [r7, #15]
 800af26:	e7e9      	b.n	800aefc <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800af28:	7bfb      	ldrb	r3, [r7, #15]
 800af2a:	3303      	adds	r3, #3
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	4413      	add	r3, r2
 800af30:	2200      	movs	r2, #0
 800af32:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800af3c:	6838      	ldr	r0, [r7, #0]
 800af3e:	f7f5 f961 	bl	8000204 <strlen>
 800af42:	4603      	mov	r3, r0
 800af44:	b29b      	uxth	r3, r3
 800af46:	3304      	adds	r3, #4
 800af48:	b29b      	uxth	r3, r3
 800af4a:	461a      	mov	r2, r3
 800af4c:	4621      	mov	r1, r4
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7ff fe2e 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800af54:	bf00      	nop
 800af56:	3714      	adds	r7, #20
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd90      	pop	{r4, r7, pc}

0800af5c <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	220c      	movs	r2, #12
 800af70:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2208      	movs	r2, #8
 800af78:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	22ff      	movs	r2, #255	; 0xff
 800af80:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	22ff      	movs	r2, #255	; 0xff
 800af88:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	22ff      	movs	r2, #255	; 0xff
 800af90:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	22ff      	movs	r2, #255	; 0xff
 800af98:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	22ff      	movs	r2, #255	; 0xff
 800afa0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	221f      	movs	r2, #31
 800afa8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	22ff      	movs	r2, #255	; 0xff
 800afb0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3389      	adds	r3, #137	; 0x89
 800afc0:	220b      	movs	r2, #11
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7ff fdf3 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800afca:	bf00      	nop
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b082      	sub	sp, #8
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	460b      	mov	r3, r1
 800afdc:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2256      	movs	r2, #86	; 0x56
 800afe2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	220c      	movs	r2, #12
 800afea:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800aff6:	78fb      	ldrb	r3, [r7, #3]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800affc:	2201      	movs	r2, #1
 800affe:	e000      	b.n	800b002 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800b000:	2200      	movs	r2, #0
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	3389      	adds	r3, #137	; 0x89
 800b00c:	2204      	movs	r2, #4
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7ff fdcd 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800b016:	bf00      	nop
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800b01e:	b580      	push	{r7, lr}
 800b020:	b082      	sub	sp, #8
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b02c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b030:	b29a      	uxth	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2204      	movs	r2, #4
 800b044:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2205      	movs	r2, #5
 800b04c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2233      	movs	r2, #51	; 0x33
 800b054:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	228b      	movs	r2, #139	; 0x8b
 800b05c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	229e      	movs	r2, #158	; 0x9e
 800b064:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2230      	movs	r2, #48	; 0x30
 800b06c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	220a      	movs	r2, #10
 800b074:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	3389      	adds	r3, #137	; 0x89
 800b07c:	2208      	movs	r2, #8
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7ff fd95 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800b086:	bf00      	nop
 800b088:	3708      	adds	r7, #8
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800b08e:	b580      	push	{r7, lr}
 800b090:	b082      	sub	sp, #8
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2202      	movs	r2, #2
 800b09a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2204      	movs	r2, #4
 800b0a2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	3389      	adds	r3, #137	; 0x89
 800b0b2:	2203      	movs	r2, #3
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7ff fd7a 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800b0bc:	bf00      	nop
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	331c      	adds	r3, #28
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f804 	bl	800b0e0 <_ZN3BTD11hci_connectEPh>
}
 800b0d8:	bf00      	nop
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b0f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2205      	movs	r2, #5
 800b100:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2204      	movs	r2, #4
 800b108:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	220d      	movs	r2, #13
 800b110:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	781a      	ldrb	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	785a      	ldrb	r2, [r3, #1]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	789a      	ldrb	r2, [r3, #2]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	78da      	ldrb	r2, [r3, #3]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	791a      	ldrb	r2, [r3, #4]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	795a      	ldrb	r2, [r3, #5]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2218      	movs	r2, #24
 800b154:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	22cc      	movs	r2, #204	; 0xcc
 800b15c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3389      	adds	r3, #137	; 0x89
 800b18c:	2210      	movs	r2, #16
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7ff fd0d 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800b196:	bf00      	nop
 800b198:	3708      	adds	r7, #8
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800b19e:	b590      	push	{r4, r7, lr}
 800b1a0:	b085      	sub	sp, #20
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	220d      	movs	r2, #13
 800b1aa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2204      	movs	r2, #4
 800b1b2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2217      	movs	r2, #23
 800b1ba:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	7f1a      	ldrb	r2, [r3, #28]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	7f5a      	ldrb	r2, [r3, #29]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	7f9a      	ldrb	r2, [r3, #30]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	7fda      	ldrb	r2, [r3, #31]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b204:	2b00      	cmp	r3, #0
 800b206:	d03f      	beq.n	800b288 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2206      	movs	r2, #6
 800b20c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800b216:	2b00      	cmp	r3, #0
 800b218:	d013      	beq.n	800b242 <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800b21a:	2300      	movs	r3, #0
 800b21c:	73fb      	strb	r3, [r7, #15]
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
 800b220:	2b05      	cmp	r3, #5
 800b222:	d822      	bhi.n	800b26a <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800b224:	7bfa      	ldrb	r2, [r7, #15]
 800b226:	7bfb      	ldrb	r3, [r7, #15]
 800b228:	330a      	adds	r3, #10
 800b22a:	6879      	ldr	r1, [r7, #4]
 800b22c:	440a      	add	r2, r1
 800b22e:	7d11      	ldrb	r1, [r2, #20]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	4413      	add	r3, r2
 800b234:	460a      	mov	r2, r1
 800b236:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
 800b23c:	3301      	adds	r3, #1
 800b23e:	73fb      	strb	r3, [r7, #15]
 800b240:	e7ed      	b.n	800b21e <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800b242:	2300      	movs	r3, #0
 800b244:	73bb      	strb	r3, [r7, #14]
 800b246:	7bbb      	ldrb	r3, [r7, #14]
 800b248:	2b05      	cmp	r3, #5
 800b24a:	d80e      	bhi.n	800b26a <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800b24c:	7bba      	ldrb	r2, [r7, #14]
 800b24e:	7bbb      	ldrb	r3, [r7, #14]
 800b250:	330a      	adds	r3, #10
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	440a      	add	r2, r1
 800b256:	7f11      	ldrb	r1, [r2, #28]
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	4413      	add	r3, r2
 800b25c:	460a      	mov	r2, r1
 800b25e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800b262:	7bbb      	ldrb	r3, [r7, #14]
 800b264:	3301      	adds	r3, #1
 800b266:	73bb      	strb	r3, [r7, #14]
 800b268:	e7ed      	b.n	800b246 <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800b26a:	2310      	movs	r3, #16
 800b26c:	737b      	strb	r3, [r7, #13]
 800b26e:	7b7b      	ldrb	r3, [r7, #13]
 800b270:	2b19      	cmp	r3, #25
 800b272:	d83c      	bhi.n	800b2ee <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800b274:	7b7b      	ldrb	r3, [r7, #13]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	4413      	add	r3, r2
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800b280:	7b7b      	ldrb	r3, [r7, #13]
 800b282:	3301      	adds	r3, #1
 800b284:	737b      	strb	r3, [r7, #13]
 800b286:	e7f2      	b.n	800b26e <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7f4 ffb9 	bl	8000204 <strlen>
 800b292:	4603      	mov	r3, r0
 800b294:	b2da      	uxtb	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800b29c:	2300      	movs	r3, #0
 800b29e:	733b      	strb	r3, [r7, #12]
 800b2a0:	7b3c      	ldrb	r4, [r7, #12]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7f4 ffac 	bl	8000204 <strlen>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	429c      	cmp	r4, r3
 800b2b0:	d20f      	bcs.n	800b2d2 <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	691a      	ldr	r2, [r3, #16]
 800b2b6:	7b3b      	ldrb	r3, [r7, #12]
 800b2b8:	441a      	add	r2, r3
 800b2ba:	7b3b      	ldrb	r3, [r7, #12]
 800b2bc:	330a      	adds	r3, #10
 800b2be:	7811      	ldrb	r1, [r2, #0]
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	460a      	mov	r2, r1
 800b2c6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800b2ca:	7b3b      	ldrb	r3, [r7, #12]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	733b      	strb	r3, [r7, #12]
 800b2d0:	e7e6      	b.n	800b2a0 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800b2d2:	7b3b      	ldrb	r3, [r7, #12]
 800b2d4:	2b0f      	cmp	r3, #15
 800b2d6:	d80a      	bhi.n	800b2ee <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800b2d8:	7b3b      	ldrb	r3, [r7, #12]
 800b2da:	330a      	adds	r3, #10
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	4413      	add	r3, r2
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800b2e6:	7b3b      	ldrb	r3, [r7, #12]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	733b      	strb	r3, [r7, #12]
 800b2ec:	e7f1      	b.n	800b2d2 <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3389      	adds	r3, #137	; 0x89
 800b2f2:	221a      	movs	r2, #26
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f7ff fc5a 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800b2fc:	bf00      	nop
 800b2fe:	3714      	adds	r7, #20
 800b300:	46bd      	mov	sp, r7
 800b302:	bd90      	pop	{r4, r7, pc}

0800b304 <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	220e      	movs	r2, #14
 800b310:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2204      	movs	r2, #4
 800b318:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2206      	movs	r2, #6
 800b320:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	7f1a      	ldrb	r2, [r3, #28]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	7f5a      	ldrb	r2, [r3, #29]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	7f9a      	ldrb	r2, [r3, #30]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	7fda      	ldrb	r2, [r3, #31]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	3389      	adds	r3, #137	; 0x89
 800b368:	2209      	movs	r2, #9
 800b36a:	4619      	mov	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7ff fc1f 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800b372:	bf00      	nop
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	220c      	movs	r2, #12
 800b386:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2204      	movs	r2, #4
 800b38e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2206      	movs	r2, #6
 800b396:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	7f1a      	ldrb	r2, [r3, #28]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	7f5a      	ldrb	r2, [r3, #29]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	7f9a      	ldrb	r2, [r3, #30]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	7fda      	ldrb	r2, [r3, #31]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	3389      	adds	r3, #137	; 0x89
 800b3de:	2209      	movs	r2, #9
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff fbe4 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800b3e8:	bf00      	nop
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	222b      	movs	r2, #43	; 0x2b
 800b3fc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2204      	movs	r2, #4
 800b404:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2209      	movs	r2, #9
 800b40c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	7f1a      	ldrb	r2, [r3, #28]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	7f5a      	ldrb	r2, [r3, #29]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	7f9a      	ldrb	r2, [r3, #30]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	7fda      	ldrb	r2, [r3, #31]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2203      	movs	r2, #3
 800b454:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	3389      	adds	r3, #137	; 0x89
 800b46c:	220c      	movs	r2, #12
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7ff fb9d 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800b476:	bf00      	nop
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800b47e:	b580      	push	{r7, lr}
 800b480:	b082      	sub	sp, #8
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	222c      	movs	r2, #44	; 0x2c
 800b48a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2204      	movs	r2, #4
 800b492:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2206      	movs	r2, #6
 800b49a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	7f1a      	ldrb	r2, [r3, #28]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	7f5a      	ldrb	r2, [r3, #29]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	7f9a      	ldrb	r2, [r3, #30]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	7fda      	ldrb	r2, [r3, #31]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3389      	adds	r3, #137	; 0x89
 800b4e2:	2209      	movs	r2, #9
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7ff fb62 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800b4ec:	bf00      	nop
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2211      	movs	r2, #17
 800b500:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2204      	movs	r2, #4
 800b508:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2202      	movs	r2, #2
 800b510:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	8b5b      	ldrh	r3, [r3, #26]
 800b518:	b2da      	uxtb	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	8b5b      	ldrh	r3, [r3, #26]
 800b524:	121b      	asrs	r3, r3, #8
 800b526:	b2db      	uxtb	r3, r3
 800b528:	f003 030f 	and.w	r3, r3, #15
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3389      	adds	r3, #137	; 0x89
 800b538:	2205      	movs	r2, #5
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff fb37 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800b542:	bf00      	nop
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b082      	sub	sp, #8
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
 800b552:	460b      	mov	r3, r1
 800b554:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b55c:	f023 0304 	bic.w	r3, r3, #4
 800b560:	b29a      	uxth	r2, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2206      	movs	r2, #6
 800b56c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2204      	movs	r2, #4
 800b574:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2203      	movs	r2, #3
 800b57c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800b580:	887b      	ldrh	r3, [r7, #2]
 800b582:	b2da      	uxtb	r2, r3
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800b58a:	887b      	ldrh	r3, [r7, #2]
 800b58c:	121b      	asrs	r3, r3, #8
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	f003 030f 	and.w	r3, r3, #15
 800b594:	b2da      	uxtb	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2213      	movs	r2, #19
 800b5a0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3389      	adds	r3, #137	; 0x89
 800b5a8:	2206      	movs	r2, #6
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7ff faff 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800b5b2:	bf00      	nop
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b082      	sub	sp, #8
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2224      	movs	r2, #36	; 0x24
 800b5c6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	220c      	movs	r2, #12
 800b5ce:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2203      	movs	r2, #3
 800b5d6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2204      	movs	r2, #4
 800b5de:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2208      	movs	r2, #8
 800b5e6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	3389      	adds	r3, #137	; 0x89
 800b5f6:	2206      	movs	r2, #6
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7ff fad8 	bl	800abb0 <_ZN3BTD11HCI_CommandEPht>
}
 800b600:	bf00      	nop
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800b608:	b5b0      	push	{r4, r5, r7, lr}
 800b60a:	b08a      	sub	sp, #40	; 0x28
 800b60c:	af02      	add	r7, sp, #8
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	607a      	str	r2, [r7, #4]
 800b612:	461a      	mov	r2, r3
 800b614:	460b      	mov	r3, r1
 800b616:	817b      	strh	r3, [r7, #10]
 800b618:	4613      	mov	r3, r2
 800b61a:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800b61c:	466b      	mov	r3, sp
 800b61e:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800b620:	7a7b      	ldrb	r3, [r7, #9]
 800b622:	1ddc      	adds	r4, r3, #7
 800b624:	61bc      	str	r4, [r7, #24]
 800b626:	4623      	mov	r3, r4
 800b628:	3301      	adds	r3, #1
 800b62a:	4618      	mov	r0, r3
 800b62c:	f04f 0100 	mov.w	r1, #0
 800b630:	f04f 0200 	mov.w	r2, #0
 800b634:	f04f 0300 	mov.w	r3, #0
 800b638:	00cb      	lsls	r3, r1, #3
 800b63a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b63e:	00c2      	lsls	r2, r0, #3
 800b640:	4623      	mov	r3, r4
 800b642:	3301      	adds	r3, #1
 800b644:	4618      	mov	r0, r3
 800b646:	f04f 0100 	mov.w	r1, #0
 800b64a:	f04f 0200 	mov.w	r2, #0
 800b64e:	f04f 0300 	mov.w	r3, #0
 800b652:	00cb      	lsls	r3, r1, #3
 800b654:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b658:	00c2      	lsls	r2, r0, #3
 800b65a:	4623      	mov	r3, r4
 800b65c:	3301      	adds	r3, #1
 800b65e:	3307      	adds	r3, #7
 800b660:	08db      	lsrs	r3, r3, #3
 800b662:	00db      	lsls	r3, r3, #3
 800b664:	ebad 0d03 	sub.w	sp, sp, r3
 800b668:	ab02      	add	r3, sp, #8
 800b66a:	3300      	adds	r3, #0
 800b66c:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800b66e:	897b      	ldrh	r3, [r7, #10]
 800b670:	b2da      	uxtb	r2, r3
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800b676:	897b      	ldrh	r3, [r7, #10]
 800b678:	121b      	asrs	r3, r3, #8
 800b67a:	b25b      	sxtb	r3, r3
 800b67c:	f003 030f 	and.w	r3, r3, #15
 800b680:	b25b      	sxtb	r3, r3
 800b682:	f043 0320 	orr.w	r3, r3, #32
 800b686:	b25b      	sxtb	r3, r3
 800b688:	b2da      	uxtb	r2, r3
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800b68e:	7a7b      	ldrb	r3, [r7, #9]
 800b690:	3304      	adds	r3, #4
 800b692:	b2da      	uxtb	r2, r3
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800b698:	7a7b      	ldrb	r3, [r7, #9]
 800b69a:	3304      	adds	r3, #4
 800b69c:	121b      	asrs	r3, r3, #8
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	7a7a      	ldrb	r2, [r7, #9]
 800b6a8:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800b6aa:	7a7b      	ldrb	r3, [r7, #9]
 800b6ac:	121b      	asrs	r3, r3, #8
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800b6ba:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800b6c2:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	83fb      	strh	r3, [r7, #30]
 800b6c8:	7a7b      	ldrb	r3, [r7, #9]
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	8bfa      	ldrh	r2, [r7, #30]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d20b      	bcs.n	800b6ea <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800b6d2:	8bfb      	ldrh	r3, [r7, #30]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	441a      	add	r2, r3
 800b6d8:	8bfb      	ldrh	r3, [r7, #30]
 800b6da:	3308      	adds	r3, #8
 800b6dc:	7811      	ldrb	r1, [r2, #0]
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800b6e2:	8bfb      	ldrh	r3, [r7, #30]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	83fb      	strh	r3, [r7, #30]
 800b6e8:	e7ee      	b.n	800b6c8 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800b6fa:	7a7b      	ldrb	r3, [r7, #9]
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	3308      	adds	r3, #8
 800b700:	b29c      	uxth	r4, r3
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	4623      	mov	r3, r4
 800b708:	f002 fc4a 	bl	800dfa0 <_ZN3USB11outTransferEhhtPh>
 800b70c:	4603      	mov	r3, r0
 800b70e:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800b710:	7cfb      	ldrb	r3, [r7, #19]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d002      	beq.n	800b71c <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800b716:	4804      	ldr	r0, [pc, #16]	; (800b728 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x120>)
 800b718:	f7f6 fa4a 	bl	8001bb0 <HAL_Delay>
 800b71c:	46ad      	mov	sp, r5
}
 800b71e:	bf00      	nop
 800b720:	3720      	adds	r7, #32
 800b722:	46bd      	mov	sp, r7
 800b724:	bdb0      	pop	{r4, r5, r7, pc}
 800b726:	bf00      	nop
 800b728:	000186a0 	.word	0x000186a0

0800b72c <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b086      	sub	sp, #24
 800b730:	af02      	add	r7, sp, #8
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	607b      	str	r3, [r7, #4]
 800b736:	460b      	mov	r3, r1
 800b738:	817b      	strh	r3, [r7, #10]
 800b73a:	4613      	mov	r3, r2
 800b73c:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2202      	movs	r2, #2
 800b742:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	7a7a      	ldrb	r2, [r7, #9]
 800b74a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2204      	movs	r2, #4
 800b752:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800b75e:	8b3b      	ldrh	r3, [r7, #24]
 800b760:	b2da      	uxtb	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800b768:	8b3b      	ldrh	r3, [r7, #24]
 800b76a:	121b      	asrs	r3, r3, #8
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	781a      	ldrb	r2, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	785a      	ldrb	r2, [r3, #1]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b78e:	8979      	ldrh	r1, [r7, #10]
 800b790:	2300      	movs	r3, #0
 800b792:	9301      	str	r3, [sp, #4]
 800b794:	2301      	movs	r3, #1
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	2308      	movs	r3, #8
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f7ff ff34 	bl	800b608 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b7a0:	bf00      	nop
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	607b      	str	r3, [r7, #4]
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	817b      	strh	r3, [r7, #10]
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2203      	movs	r2, #3
 800b7be:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	7a7a      	ldrb	r2, [r7, #9]
 800b7c6:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2208      	movs	r2, #8
 800b7ce:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	781a      	ldrb	r2, [r3, #0]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	785a      	ldrb	r2, [r3, #1]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	781a      	ldrb	r2, [r3, #0]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	785a      	ldrb	r2, [r3, #1]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	7f3a      	ldrb	r2, [r7, #28]
 800b806:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b828:	8979      	ldrh	r1, [r7, #10]
 800b82a:	2300      	movs	r3, #0
 800b82c:	9301      	str	r3, [sp, #4]
 800b82e:	2301      	movs	r3, #1
 800b830:	9300      	str	r3, [sp, #0]
 800b832:	230c      	movs	r3, #12
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f7ff fee7 	bl	800b608 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b83a:	bf00      	nop
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800b842:	b580      	push	{r7, lr}
 800b844:	b086      	sub	sp, #24
 800b846:	af02      	add	r7, sp, #8
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	607b      	str	r3, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	817b      	strh	r3, [r7, #10]
 800b850:	4613      	mov	r3, r2
 800b852:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2204      	movs	r2, #4
 800b858:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	7a7a      	ldrb	r2, [r7, #9]
 800b860:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2208      	movs	r2, #8
 800b868:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	781a      	ldrb	r2, [r3, #0]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	785a      	ldrb	r2, [r3, #1]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	22ff      	movs	r2, #255	; 0xff
 800b8ac:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	22ff      	movs	r2, #255	; 0xff
 800b8b4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b8be:	8979      	ldrh	r1, [r7, #10]
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	9301      	str	r3, [sp, #4]
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	230c      	movs	r3, #12
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f7ff fe9c 	bl	800b608 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b8d0:	bf00      	nop
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af02      	add	r7, sp, #8
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	607b      	str	r3, [r7, #4]
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	817b      	strh	r3, [r7, #10]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2205      	movs	r2, #5
 800b8ee:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	7a7a      	ldrb	r2, [r7, #9]
 800b8f6:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	220a      	movs	r2, #10
 800b8fe:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	781a      	ldrb	r2, [r3, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	785a      	ldrb	r2, [r3, #1]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2201      	movs	r2, #1
 800b942:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2202      	movs	r2, #2
 800b94a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	22a0      	movs	r2, #160	; 0xa0
 800b952:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2202      	movs	r2, #2
 800b95a:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b964:	8979      	ldrh	r1, [r7, #10]
 800b966:	2300      	movs	r3, #0
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	2301      	movs	r3, #1
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	230e      	movs	r3, #14
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f7ff fe49 	bl	800b608 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b976:	bf00      	nop
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800b97e:	b580      	push	{r7, lr}
 800b980:	b086      	sub	sp, #24
 800b982:	af02      	add	r7, sp, #8
 800b984:	60f8      	str	r0, [r7, #12]
 800b986:	607b      	str	r3, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	817b      	strh	r3, [r7, #10]
 800b98c:	4613      	mov	r3, r2
 800b98e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2206      	movs	r2, #6
 800b994:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	7a7a      	ldrb	r2, [r7, #9]
 800b99c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2204      	movs	r2, #4
 800b9a4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	781a      	ldrb	r2, [r3, #0]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	785a      	ldrb	r2, [r3, #1]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	781a      	ldrb	r2, [r3, #0]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	785a      	ldrb	r2, [r3, #1]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b9de:	8979      	ldrh	r1, [r7, #10]
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	9301      	str	r3, [sp, #4]
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	2308      	movs	r3, #8
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f7ff fe0c 	bl	800b608 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b9f0:	bf00      	nop
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af02      	add	r7, sp, #8
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	607b      	str	r3, [r7, #4]
 800ba02:	460b      	mov	r3, r1
 800ba04:	817b      	strh	r3, [r7, #10]
 800ba06:	4613      	mov	r3, r2
 800ba08:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2207      	movs	r2, #7
 800ba0e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	7a7a      	ldrb	r2, [r7, #9]
 800ba16:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2204      	movs	r2, #4
 800ba1e:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	781a      	ldrb	r2, [r3, #0]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	785a      	ldrb	r2, [r3, #1]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	781a      	ldrb	r2, [r3, #0]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	785a      	ldrb	r2, [r3, #1]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ba58:	8979      	ldrh	r1, [r7, #10]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	9301      	str	r3, [sp, #4]
 800ba5e:	2301      	movs	r3, #1
 800ba60:	9300      	str	r3, [sp, #0]
 800ba62:	2308      	movs	r3, #8
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f7ff fdcf 	bl	800b608 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ba6a:	bf00      	nop
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b084      	sub	sp, #16
 800ba76:	af02      	add	r7, sp, #8
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	4608      	mov	r0, r1
 800ba7c:	4611      	mov	r1, r2
 800ba7e:	461a      	mov	r2, r3
 800ba80:	4603      	mov	r3, r0
 800ba82:	807b      	strh	r3, [r7, #2]
 800ba84:	460b      	mov	r3, r1
 800ba86:	707b      	strb	r3, [r7, #1]
 800ba88:	4613      	mov	r3, r2
 800ba8a:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	220b      	movs	r2, #11
 800ba90:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	787a      	ldrb	r2, [r7, #1]
 800ba98:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2208      	movs	r2, #8
 800baa0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	783a      	ldrb	r2, [r7, #0]
 800bab0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	7c3a      	ldrb	r2, [r7, #16]
 800bab8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f203 1209 	addw	r2, r3, #265	; 0x109
 800baf2:	8879      	ldrh	r1, [r7, #2]
 800baf4:	2300      	movs	r3, #0
 800baf6:	9301      	str	r3, [sp, #4]
 800baf8:	2301      	movs	r3, #1
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	230c      	movs	r3, #12
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7ff fd82 	bl	800b608 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bb04:	bf00      	nop
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b08e      	sub	sp, #56	; 0x38
 800bb10:	af08      	add	r7, sp, #32
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800bb16:	2301      	movs	r3, #1
 800bb18:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800bb1e:	2300      	movs	r3, #0
 800bb20:	75fb      	strb	r3, [r7, #23]
 800bb22:	7dfb      	ldrb	r3, [r7, #23]
 800bb24:	2b05      	cmp	r3, #5
 800bb26:	d811      	bhi.n	800bb4c <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800bb28:	7dfb      	ldrb	r3, [r7, #23]
 800bb2a:	f1c3 0305 	rsb	r3, r3, #5
 800bb2e:	461a      	mov	r2, r3
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	441a      	add	r2, r3
 800bb34:	7dfb      	ldrb	r3, [r7, #23]
 800bb36:	3302      	adds	r3, #2
 800bb38:	7812      	ldrb	r2, [r2, #0]
 800bb3a:	f107 0118 	add.w	r1, r7, #24
 800bb3e:	440b      	add	r3, r1
 800bb40:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
 800bb46:	3301      	adds	r3, #1
 800bb48:	75fb      	strb	r3, [r7, #23]
 800bb4a:	e7ea      	b.n	800bb22 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	9307      	str	r3, [sp, #28]
 800bb60:	f107 030c 	add.w	r3, r7, #12
 800bb64:	9306      	str	r3, [sp, #24]
 800bb66:	2308      	movs	r3, #8
 800bb68:	9305      	str	r3, [sp, #20]
 800bb6a:	2308      	movs	r3, #8
 800bb6c:	9304      	str	r3, [sp, #16]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	9303      	str	r3, [sp, #12]
 800bb72:	2303      	movs	r3, #3
 800bb74:	9302      	str	r3, [sp, #8]
 800bb76:	23f5      	movs	r3, #245	; 0xf5
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	2309      	movs	r3, #9
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	2321      	movs	r3, #33	; 0x21
 800bb80:	f002 f82b 	bl	800dbda <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800bb84:	bf00      	nop
 800bb86:	3718      	adds	r7, #24
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08e      	sub	sp, #56	; 0x38
 800bb90:	af08      	add	r7, sp, #32
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800bb96:	2305      	movs	r3, #5
 800bb98:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800bb9a:	2310      	movs	r3, #16
 800bb9c:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800bba2:	2302      	movs	r3, #2
 800bba4:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800bba6:	2312      	movs	r3, #18
 800bba8:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800bbaa:	2300      	movs	r3, #0
 800bbac:	75fb      	strb	r3, [r7, #23]
 800bbae:	7dfb      	ldrb	r3, [r7, #23]
 800bbb0:	2b05      	cmp	r3, #5
 800bbb2:	d80e      	bhi.n	800bbd2 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800bbb4:	7dfb      	ldrb	r3, [r7, #23]
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	441a      	add	r2, r3
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	7812      	ldrb	r2, [r2, #0]
 800bbc0:	f107 0118 	add.w	r1, r7, #24
 800bbc4:	440b      	add	r3, r1
 800bbc6:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800bbca:	7dfb      	ldrb	r3, [r7, #23]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	75fb      	strb	r3, [r7, #23]
 800bbd0:	e7ed      	b.n	800bbae <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	9307      	str	r3, [sp, #28]
 800bbe6:	f107 030c 	add.w	r3, r7, #12
 800bbea:	9306      	str	r3, [sp, #24]
 800bbec:	230b      	movs	r3, #11
 800bbee:	9305      	str	r3, [sp, #20]
 800bbf0:	230b      	movs	r3, #11
 800bbf2:	9304      	str	r3, [sp, #16]
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	9303      	str	r3, [sp, #12]
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	9302      	str	r3, [sp, #8]
 800bbfc:	2305      	movs	r3, #5
 800bbfe:	9301      	str	r3, [sp, #4]
 800bc00:	2309      	movs	r3, #9
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	2321      	movs	r3, #33	; 0x21
 800bc06:	f001 ffe8 	bl	800dbda <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800bc0a:	bf00      	nop
 800bc0c:	3718      	adds	r7, #24
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	4a04      	ldr	r2, [pc, #16]	; (800bc30 <_ZN13USBReadParserC1Ev+0x1c>)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	601a      	str	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4618      	mov	r0, r3
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	0800f7cc 	.word	0x0800f7cc

0800bc34 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7ff ffe7 	bl	800bc14 <_ZN13USBReadParserC1Ev>
 800bc46:	4a21      	ldr	r2, [pc, #132]	; (800bccc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	605a      	str	r2, [r3, #4]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	3308      	adds	r3, #8
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fd fb51 	bl	80092fe <_ZN16MultiValueBufferC1Ev>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	3310      	adds	r3, #16
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fd fb63 	bl	800932c <_ZN20MultiByteValueParserC1Ev>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	3318      	adds	r3, #24
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fd fb8a 	bl	8009384 <_ZN11ByteSkipperC1Ev>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f103 0220 	add.w	r2, r3, #32
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f103 0210 	add.w	r2, r3, #16
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	3308      	adds	r3, #8
 800bca6:	4619      	mov	r1, r3
 800bca8:	4610      	mov	r0, r2
 800bcaa:	f7fd fb53 	bl	8009354 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f103 0218 	add.w	r2, r3, #24
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4610      	mov	r0, r2
 800bcbc:	f7fd fb76 	bl	80093ac <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	0800f774 	.word	0x0800f774

0800bcd0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7ff ff99 	bl	800bc14 <_ZN13USBReadParserC1Ev>
 800bce2:	4a21      	ldr	r2, [pc, #132]	; (800bd68 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	601a      	str	r2, [r3, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	683a      	ldr	r2, [r7, #0]
 800bcec:	605a      	str	r2, [r3, #4]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	3308      	adds	r3, #8
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7fd fb03 	bl	80092fe <_ZN16MultiValueBufferC1Ev>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	3310      	adds	r3, #16
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7fd fb15 	bl	800932c <_ZN20MultiByteValueParserC1Ev>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	3318      	adds	r3, #24
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fd fb3c 	bl	8009384 <_ZN11ByteSkipperC1Ev>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f103 0220 	add.w	r2, r3, #32
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f103 0210 	add.w	r2, r3, #16
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	3308      	adds	r3, #8
 800bd42:	4619      	mov	r1, r3
 800bd44:	4610      	mov	r0, r2
 800bd46:	f7fd fb05 	bl	8009354 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f103 0218 	add.w	r2, r3, #24
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	3308      	adds	r3, #8
 800bd54:	4619      	mov	r1, r3
 800bd56:	4610      	mov	r0, r2
 800bd58:	f7fd fb28 	bl	80093ac <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	0800f768 	.word	0x0800f768

0800bd6c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	607a      	str	r2, [r7, #4]
 800bd76:	603b      	str	r3, [r7, #0]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800bd7c:	897b      	ldrh	r3, [r7, #10]
 800bd7e:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800bd84:	8afb      	ldrh	r3, [r7, #22]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00f      	beq.n	800bdaa <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800bd8a:	f107 0216 	add.w	r2, r7, #22
 800bd8e:	f107 0310 	add.w	r3, r7, #16
 800bd92:	4619      	mov	r1, r3
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f000 f82d 	bl	800bdf4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	f083 0301 	eor.w	r3, r3, #1
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d100      	bne.n	800bda8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800bda6:	e7ed      	b.n	800bd84 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800bda8:	bf00      	nop
}
 800bdaa:	3718      	adds	r7, #24
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	607a      	str	r2, [r7, #4]
 800bdba:	603b      	str	r3, [r7, #0]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800bdc0:	897b      	ldrh	r3, [r7, #10]
 800bdc2:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800bdc8:	8afb      	ldrh	r3, [r7, #22]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00f      	beq.n	800bdee <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800bdce:	f107 0216 	add.w	r2, r7, #22
 800bdd2:	f107 0310 	add.w	r3, r7, #16
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	68f8      	ldr	r0, [r7, #12]
 800bdda:	f000 f981 	bl	800c0e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800bdde:	4603      	mov	r3, r0
 800bde0:	f083 0301 	eor.w	r3, r3, #1
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d100      	bne.n	800bdec <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800bdea:	e7ed      	b.n	800bdc8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800bdec:	bf00      	nop
}
 800bdee:	3718      	adds	r7, #24
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800bdf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdf6:	b089      	sub	sp, #36	; 0x24
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	3320      	adds	r3, #32
 800be04:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3320      	adds	r3, #32
 800be0a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be12:	2b04      	cmp	r3, #4
 800be14:	f200 815e 	bhi.w	800c0d4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800be18:	a201      	add	r2, pc, #4	; (adr r2, 800be20 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800be1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1e:	bf00      	nop
 800be20:	0800be35 	.word	0x0800be35
 800be24:	0800be55 	.word	0x0800be55
 800be28:	0800be97 	.word	0x0800be97
 800be2c:	0800beab 	.word	0x0800beab
 800be30:	0800bf6f 	.word	0x0800bf6f
                case 0:
                        theBuffer.valueSize = 2;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2202      	movs	r2, #2
 800be38:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f103 0210 	add.w	r2, r3, #16
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	3308      	adds	r3, #8
 800be44:	4619      	mov	r1, r3
 800be46:	4610      	mov	r0, r2
 800be48:	f7fd fa84 	bl	8009354 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2201      	movs	r2, #1
 800be50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	3310      	adds	r3, #16
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	68b9      	ldr	r1, [r7, #8]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f003 fa8f 	bl	800f380 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800be62:	4603      	mov	r3, r0
 800be64:	f083 0301 	eor.w	r3, r3, #1
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d001      	beq.n	800be72 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800be6e:	2300      	movs	r3, #0
 800be70:	e131      	b.n	800c0d6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800be78:	781a      	ldrb	r2, [r3, #0]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800be86:	785a      	ldrb	r2, [r3, #1]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2202      	movs	r2, #2
 800be92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3320      	adds	r3, #32
 800be9a:	1c9a      	adds	r2, r3, #2
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2203      	movs	r2, #3
 800bea6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800beb0:	3b02      	subs	r3, #2
 800beb2:	2b1f      	cmp	r3, #31
 800beb4:	d847      	bhi.n	800bf46 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800beb6:	a201      	add	r2, pc, #4	; (adr r2, 800bebc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800beb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bebc:	0800bf47 	.word	0x0800bf47
 800bec0:	0800bf47 	.word	0x0800bf47
 800bec4:	0800bf3d 	.word	0x0800bf3d
 800bec8:	0800bf47 	.word	0x0800bf47
 800becc:	0800bf47 	.word	0x0800bf47
 800bed0:	0800bf47 	.word	0x0800bf47
 800bed4:	0800bf47 	.word	0x0800bf47
 800bed8:	0800bf47 	.word	0x0800bf47
 800bedc:	0800bf47 	.word	0x0800bf47
 800bee0:	0800bf47 	.word	0x0800bf47
 800bee4:	0800bf47 	.word	0x0800bf47
 800bee8:	0800bf47 	.word	0x0800bf47
 800beec:	0800bf47 	.word	0x0800bf47
 800bef0:	0800bf47 	.word	0x0800bf47
 800bef4:	0800bf47 	.word	0x0800bf47
 800bef8:	0800bf47 	.word	0x0800bf47
 800befc:	0800bf47 	.word	0x0800bf47
 800bf00:	0800bf47 	.word	0x0800bf47
 800bf04:	0800bf47 	.word	0x0800bf47
 800bf08:	0800bf47 	.word	0x0800bf47
 800bf0c:	0800bf47 	.word	0x0800bf47
 800bf10:	0800bf47 	.word	0x0800bf47
 800bf14:	0800bf47 	.word	0x0800bf47
 800bf18:	0800bf47 	.word	0x0800bf47
 800bf1c:	0800bf47 	.word	0x0800bf47
 800bf20:	0800bf47 	.word	0x0800bf47
 800bf24:	0800bf47 	.word	0x0800bf47
 800bf28:	0800bf47 	.word	0x0800bf47
 800bf2c:	0800bf47 	.word	0x0800bf47
 800bf30:	0800bf47 	.word	0x0800bf47
 800bf34:	0800bf47 	.word	0x0800bf47
 800bf38:	0800bf47 	.word	0x0800bf47
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800bf44:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bf4c:	3b02      	subs	r3, #2
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f103 0210 	add.w	r2, r3, #16
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	3308      	adds	r3, #8
 800bf5e:	4619      	mov	r1, r3
 800bf60:	4610      	mov	r0, r2
 800bf62:	f7fd f9f7 	bl	8009354 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2204      	movs	r2, #4
 800bf6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bf74:	2b05      	cmp	r3, #5
 800bf76:	d055      	beq.n	800c024 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800bf78:	2b05      	cmp	r3, #5
 800bf7a:	f300 8085 	bgt.w	800c088 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d002      	beq.n	800bf88 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800bf82:	2b04      	cmp	r3, #4
 800bf84:	d015      	beq.n	800bfb2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800bf86:	e07f      	b.n	800c088 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	3310      	adds	r3, #16
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	4618      	mov	r0, r3
 800bf92:	f003 f9f5 	bl	800f380 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800bf96:	4603      	mov	r3, r0
 800bf98:	f083 0301 	eor.w	r3, r3, #1
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d001      	beq.n	800bfa6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	e097      	b.n	800c0d6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	795a      	ldrb	r2, [r3, #5]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800bfb0:	e086      	b.n	800c0c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3310      	adds	r3, #16
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	68b9      	ldr	r1, [r7, #8]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f003 f9e0 	bl	800f380 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f083 0301 	eor.w	r3, r3, #1
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	e082      	b.n	800c0d6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	795b      	ldrb	r3, [r3, #5]
 800bfd4:	2be0      	cmp	r3, #224	; 0xe0
 800bfd6:	d16c      	bne.n	800c0b2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	799b      	ldrb	r3, [r3, #6]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d16a      	bne.n	800c0b6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d004      	beq.n	800bff4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	79db      	ldrb	r3, [r3, #7]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d104      	bne.n	800bffc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800bff2:	e065      	b.n	800c0c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	79db      	ldrb	r3, [r3, #7]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d15e      	bne.n	800c0ba <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	789a      	ldrb	r2, [r3, #2]
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	78da      	ldrb	r2, [r3, #3]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	79da      	ldrb	r2, [r3, #7]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800c022:	e04d      	b.n	800c0c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	3310      	adds	r3, #16
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	68b9      	ldr	r1, [r7, #8]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f003 f9a7 	bl	800f380 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c032:	4603      	mov	r3, r0
 800c034:	f083 0301 	eor.w	r3, r3, #1
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d001      	beq.n	800c042 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800c03e:	2300      	movs	r3, #0
 800c040:	e049      	b.n	800c0d6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d038      	beq.n	800c0be <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d034      	beq.n	800c0be <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6858      	ldr	r0, [r3, #4]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	681c      	ldr	r4, [r3, #0]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	3220      	adds	r2, #32
 800c07c:	9201      	str	r2, [sp, #4]
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	4633      	mov	r3, r6
 800c082:	462a      	mov	r2, r5
 800c084:	47a0      	blx	r4
                                        break;
 800c086:	e01a      	b.n	800c0be <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f103 0018 	add.w	r0, r3, #24
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c094:	b29b      	uxth	r3, r3
 800c096:	3b02      	subs	r3, #2
 800c098:	b29b      	uxth	r3, r3
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	68b9      	ldr	r1, [r7, #8]
 800c09e:	f7fd f998 	bl	80093d2 <_ZN11ByteSkipper4SkipEPPhPtt>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	f083 0301 	eor.w	r3, r3, #1
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d008      	beq.n	800c0c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	e011      	b.n	800c0d6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800c0b2:	bf00      	nop
 800c0b4:	e004      	b.n	800c0c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800c0b6:	bf00      	nop
 800c0b8:	e002      	b.n	800c0c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800c0ba:	bf00      	nop
 800c0bc:	e000      	b.n	800c0c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800c0be:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f103 0220 	add.w	r2, r3, #32
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800c0d4:	2301      	movs	r3, #1
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	371c      	adds	r7, #28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0de:	bf00      	nop

0800c0e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800c0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0e2:	b089      	sub	sp, #36	; 0x24
 800c0e4:	af02      	add	r7, sp, #8
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	3320      	adds	r3, #32
 800c0f0:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	3320      	adds	r3, #32
 800c0f6:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0fe:	2b04      	cmp	r3, #4
 800c100:	f200 815e 	bhi.w	800c3c0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800c104:	a201      	add	r2, pc, #4	; (adr r2, 800c10c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800c106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10a:	bf00      	nop
 800c10c:	0800c121 	.word	0x0800c121
 800c110:	0800c141 	.word	0x0800c141
 800c114:	0800c183 	.word	0x0800c183
 800c118:	0800c197 	.word	0x0800c197
 800c11c:	0800c25b 	.word	0x0800c25b
                        theBuffer.valueSize = 2;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2202      	movs	r2, #2
 800c124:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f103 0210 	add.w	r2, r3, #16
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3308      	adds	r3, #8
 800c130:	4619      	mov	r1, r3
 800c132:	4610      	mov	r0, r2
 800c134:	f7fd f90e 	bl	8009354 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	3310      	adds	r3, #16
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	68b9      	ldr	r1, [r7, #8]
 800c148:	4618      	mov	r0, r3
 800c14a:	f003 f919 	bl	800f380 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c14e:	4603      	mov	r3, r0
 800c150:	f083 0301 	eor.w	r3, r3, #1
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800c15a:	2300      	movs	r3, #0
 800c15c:	e131      	b.n	800c3c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c164:	781a      	ldrb	r2, [r3, #0]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c172:	785a      	ldrb	r2, [r3, #1]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2202      	movs	r2, #2
 800c17e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	3320      	adds	r3, #32
 800c186:	1c9a      	adds	r2, r3, #2
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2203      	movs	r2, #3
 800c192:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c19c:	3b02      	subs	r3, #2
 800c19e:	2b1f      	cmp	r3, #31
 800c1a0:	d847      	bhi.n	800c232 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800c1a2:	a201      	add	r2, pc, #4	; (adr r2, 800c1a8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800c1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a8:	0800c233 	.word	0x0800c233
 800c1ac:	0800c233 	.word	0x0800c233
 800c1b0:	0800c229 	.word	0x0800c229
 800c1b4:	0800c233 	.word	0x0800c233
 800c1b8:	0800c233 	.word	0x0800c233
 800c1bc:	0800c233 	.word	0x0800c233
 800c1c0:	0800c233 	.word	0x0800c233
 800c1c4:	0800c233 	.word	0x0800c233
 800c1c8:	0800c233 	.word	0x0800c233
 800c1cc:	0800c233 	.word	0x0800c233
 800c1d0:	0800c233 	.word	0x0800c233
 800c1d4:	0800c233 	.word	0x0800c233
 800c1d8:	0800c233 	.word	0x0800c233
 800c1dc:	0800c233 	.word	0x0800c233
 800c1e0:	0800c233 	.word	0x0800c233
 800c1e4:	0800c233 	.word	0x0800c233
 800c1e8:	0800c233 	.word	0x0800c233
 800c1ec:	0800c233 	.word	0x0800c233
 800c1f0:	0800c233 	.word	0x0800c233
 800c1f4:	0800c233 	.word	0x0800c233
 800c1f8:	0800c233 	.word	0x0800c233
 800c1fc:	0800c233 	.word	0x0800c233
 800c200:	0800c233 	.word	0x0800c233
 800c204:	0800c233 	.word	0x0800c233
 800c208:	0800c233 	.word	0x0800c233
 800c20c:	0800c233 	.word	0x0800c233
 800c210:	0800c233 	.word	0x0800c233
 800c214:	0800c233 	.word	0x0800c233
 800c218:	0800c233 	.word	0x0800c233
 800c21c:	0800c233 	.word	0x0800c233
 800c220:	0800c233 	.word	0x0800c233
 800c224:	0800c233 	.word	0x0800c233
                                        isGoodInterface = false;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2200      	movs	r2, #0
 800c22c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800c230:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c238:	3b02      	subs	r3, #2
 800c23a:	b2da      	uxtb	r2, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f103 0210 	add.w	r2, r3, #16
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3308      	adds	r3, #8
 800c24a:	4619      	mov	r1, r3
 800c24c:	4610      	mov	r0, r2
 800c24e:	f7fd f881 	bl	8009354 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2204      	movs	r2, #4
 800c256:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c260:	2b05      	cmp	r3, #5
 800c262:	d055      	beq.n	800c310 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800c264:	2b05      	cmp	r3, #5
 800c266:	f300 8085 	bgt.w	800c374 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800c26a:	2b02      	cmp	r3, #2
 800c26c:	d002      	beq.n	800c274 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800c26e:	2b04      	cmp	r3, #4
 800c270:	d015      	beq.n	800c29e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800c272:	e07f      	b.n	800c374 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	3310      	adds	r3, #16
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	68b9      	ldr	r1, [r7, #8]
 800c27c:	4618      	mov	r0, r3
 800c27e:	f003 f87f 	bl	800f380 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c282:	4603      	mov	r3, r0
 800c284:	f083 0301 	eor.w	r3, r3, #1
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d001      	beq.n	800c292 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800c28e:	2300      	movs	r3, #0
 800c290:	e097      	b.n	800c3c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	795a      	ldrb	r2, [r3, #5]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800c29c:	e086      	b.n	800c3ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	3310      	adds	r3, #16
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	68b9      	ldr	r1, [r7, #8]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f003 f86a 	bl	800f380 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	f083 0301 	eor.w	r3, r3, #1
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d001      	beq.n	800c2bc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	e082      	b.n	800c3c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	795b      	ldrb	r3, [r3, #5]
 800c2c0:	2bff      	cmp	r3, #255	; 0xff
 800c2c2:	d16c      	bne.n	800c39e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	799b      	ldrb	r3, [r3, #6]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d16a      	bne.n	800c3a2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d004      	beq.n	800c2e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	79db      	ldrb	r3, [r3, #7]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d104      	bne.n	800c2e8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800c2de:	e065      	b.n	800c3ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	79db      	ldrb	r3, [r3, #7]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d15e      	bne.n	800c3a6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	789a      	ldrb	r2, [r3, #2]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	78da      	ldrb	r2, [r3, #3]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	79da      	ldrb	r2, [r3, #7]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800c30e:	e04d      	b.n	800c3ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	3310      	adds	r3, #16
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	68b9      	ldr	r1, [r7, #8]
 800c318:	4618      	mov	r0, r3
 800c31a:	f003 f831 	bl	800f380 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c31e:	4603      	mov	r3, r0
 800c320:	f083 0301 	eor.w	r3, r3, #1
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800c32a:	2300      	movs	r3, #0
 800c32c:	e049      	b.n	800c3c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c334:	2b00      	cmp	r3, #0
 800c336:	d038      	beq.n	800c3aa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d034      	beq.n	800c3aa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6858      	ldr	r0, [r3, #4]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	681c      	ldr	r4, [r3, #0]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	3220      	adds	r2, #32
 800c368:	9201      	str	r2, [sp, #4]
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	4633      	mov	r3, r6
 800c36e:	462a      	mov	r2, r5
 800c370:	47a0      	blx	r4
                                        break;
 800c372:	e01a      	b.n	800c3aa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f103 0018 	add.w	r0, r3, #24
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c380:	b29b      	uxth	r3, r3
 800c382:	3b02      	subs	r3, #2
 800c384:	b29b      	uxth	r3, r3
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	68b9      	ldr	r1, [r7, #8]
 800c38a:	f7fd f822 	bl	80093d2 <_ZN11ByteSkipper4SkipEPPhPtt>
 800c38e:	4603      	mov	r3, r0
 800c390:	f083 0301 	eor.w	r3, r3, #1
 800c394:	b2db      	uxtb	r3, r3
 800c396:	2b00      	cmp	r3, #0
 800c398:	d008      	beq.n	800c3ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800c39a:	2300      	movs	r3, #0
 800c39c:	e011      	b.n	800c3c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800c39e:	bf00      	nop
 800c3a0:	e004      	b.n	800c3ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800c3a2:	bf00      	nop
 800c3a4:	e002      	b.n	800c3ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800c3a6:	bf00      	nop
 800c3a8:	e000      	b.n	800c3ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800c3aa:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f103 0220 	add.w	r2, r3, #32
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800c3c0:	2301      	movs	r3, #1
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	371c      	adds	r7, #28
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3ca:	bf00      	nop

0800c3cc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	73fb      	strb	r3, [r7, #15]
 800c3da:	7bfb      	ldrb	r3, [r7, #15]
 800c3dc:	2b03      	cmp	r3, #3
 800c3de:	d815      	bhi.n	800c40c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800c3e0:	7bfb      	ldrb	r3, [r7, #15]
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	3318      	adds	r3, #24
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4413      	add	r3, r2
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d109      	bne.n	800c404 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800c3f0:	7bfb      	ldrb	r3, [r7, #15]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	3318      	adds	r3, #24
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	4413      	add	r3, r2
 800c3fa:	683a      	ldr	r2, [r7, #0]
 800c3fc:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800c3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c402:	e005      	b.n	800c410 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800c404:	7bfb      	ldrb	r3, [r7, #15]
 800c406:	3301      	adds	r3, #1
 800c408:	73fb      	strb	r3, [r7, #15]
 800c40a:	e7e6      	b.n	800c3da <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800c40c:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800c410:	4618      	mov	r0, r3
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
 800c426:	4a0a      	ldr	r2, [pc, #40]	; (800c450 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	601a      	str	r2, [r3, #0]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	683a      	ldr	r2, [r7, #0]
 800c430:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d005      	beq.n	800c446 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	6879      	ldr	r1, [r7, #4]
 800c440:	4618      	mov	r0, r3
 800c442:	f7ff ffc3 	bl	800c3cc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4618      	mov	r0, r3
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	0800f830 	.word	0x0800f830

0800c454 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	4613      	mov	r3, r2
 800c460:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	461a      	mov	r2, r3
 800c468:	88fb      	ldrh	r3, [r7, #6]
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d10b      	bne.n	800c488 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	3301      	adds	r3, #1
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	461a      	mov	r2, r3
 800c478:	88fb      	ldrh	r3, [r7, #6]
 800c47a:	121b      	asrs	r3, r3, #8
 800c47c:	f043 0320 	orr.w	r3, r3, #32
 800c480:	429a      	cmp	r2, r3
 800c482:	d101      	bne.n	800c488 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800c484:	2301      	movs	r3, #1
 800c486:	e000      	b.n	800c48a <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800c488:	2300      	movs	r3, #0
        }
 800c48a:	4618      	mov	r0, r3
 800c48c:	3714      	adds	r7, #20
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr

0800c496 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800c496:	b480      	push	{r7}
 800c498:	b085      	sub	sp, #20
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	60f8      	str	r0, [r7, #12]
 800c49e:	460b      	mov	r3, r1
 800c4a0:	607a      	str	r2, [r7, #4]
 800c4a2:	72fb      	strb	r3, [r7, #11]
                return;
 800c4a4:	bf00      	nop
        };
 800c4a6:	3714      	adds	r7, #20
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
                return;
 800c4b8:	bf00      	nop
        };
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
                return;
 800c4cc:	bf00      	nop
        }
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	603b      	str	r3, [r7, #0]
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	68b9      	ldr	r1, [r7, #8]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7ff ff95 	bl	800c41c <_ZN16BluetoothServiceC1EP3BTD>
 800c4f2:	4a1f      	ldr	r2, [pc, #124]	; (800c570 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800c500:	2300      	movs	r3, #0
 800c502:	75fb      	strb	r3, [r7, #23]
 800c504:	7dfb      	ldrb	r3, [r7, #23]
 800c506:	2b01      	cmp	r3, #1
 800c508:	d809      	bhi.n	800c51e <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800c50a:	7dfa      	ldrb	r2, [r7, #23]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	3208      	adds	r2, #8
 800c510:	2100      	movs	r1, #0
 800c512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800c516:	7dfb      	ldrb	r3, [r7, #23]
 800c518:	3301      	adds	r3, #1
 800c51a:	75fb      	strb	r3, [r7, #23]
 800c51c:	e7f2      	b.n	800c504 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	79fa      	ldrb	r2, [r7, #7]
 800c524:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	683a      	ldr	r2, [r7, #0]
 800c52e:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2250      	movs	r2, #80	; 0x50
 800c534:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2270      	movs	r2, #112	; 0x70
 800c544:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2200      	movs	r2, #0
 800c54c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2271      	movs	r2, #113	; 0x71
 800c554:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f000 f807 	bl	800c574 <_ZN5BTHID5ResetEv>
}
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	4618      	mov	r0, r3
 800c56a:	3718      	adds	r7, #24
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	0800f804 	.word	0x0800f804

0800c574 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
        connected = false;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	220a      	movs	r2, #10
 800c59c:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3320      	adds	r3, #32
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	4798      	blx	r3
}
 800c5b2:	bf00      	nop
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800c5ba:	b590      	push	{r4, r7, lr}
 800c5bc:	b085      	sub	sp, #20
 800c5be:	af02      	add	r7, sp, #8
 800c5c0:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d014      	beq.n	800c5f6 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6898      	ldr	r0, [r3, #8]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	8999      	ldrh	r1, [r3, #12]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	7d1b      	ldrb	r3, [r3, #20]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	b2da      	uxtb	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	751a      	strb	r2, [r3, #20]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	7d1a      	ldrb	r2, [r3, #20]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f103 041b 	add.w	r4, r3, #27
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	336f      	adds	r3, #111	; 0x6f
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	4623      	mov	r3, r4
 800c5f2:	f7ff f9c4 	bl	800b97e <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6898      	ldr	r0, [r3, #8]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	8999      	ldrh	r1, [r3, #12]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	7d1b      	ldrb	r3, [r3, #20]
 800c602:	3301      	adds	r3, #1
 800c604:	b2da      	uxtb	r2, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	751a      	strb	r2, [r3, #20]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	7d1a      	ldrb	r2, [r3, #20]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f103 0418 	add.w	r4, r3, #24
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	336d      	adds	r3, #109	; 0x6d
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	4623      	mov	r3, r4
 800c61c:	f7ff f9af 	bl	800b97e <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	3308      	adds	r3, #8
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	220e      	movs	r2, #14
 800c630:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2209      	movs	r2, #9
 800c636:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800c63a:	bf00      	nop
 800c63c:	370c      	adds	r7, #12
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd90      	pop	{r4, r7, pc}
	...

0800c644 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800c644:	b590      	push	{r4, r7, lr}
 800c646:	b087      	sub	sp, #28
 800c648:	af02      	add	r7, sp, #8
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	7d5b      	ldrb	r3, [r3, #21]
 800c652:	f083 0301 	eor.w	r3, r3, #1
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d023      	beq.n	800c6a4 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	3308      	adds	r3, #8
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	2b02      	cmp	r3, #2
 800c664:	d11e      	bne.n	800c6a4 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	330c      	adds	r3, #12
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	461a      	mov	r2, r3
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	330d      	adds	r3, #13
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	021b      	lsls	r3, r3, #8
 800c676:	4313      	orrs	r3, r2
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d113      	bne.n	800c6a4 <_ZN5BTHID7ACLDataEPh+0x60>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	7a9b      	ldrb	r3, [r3, #10]
 800c682:	f083 0301 	eor.w	r3, r3, #1
 800c686:	b2db      	uxtb	r3, r3
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00b      	beq.n	800c6a4 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	2201      	movs	r2, #1
 800c692:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	8b5a      	ldrh	r2, [r3, #26]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	220a      	movs	r2, #10
 800c6a2:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	7a5b      	ldrb	r3, [r3, #9]
 800c6aa:	f083 0301 	eor.w	r3, r3, #1
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d03a      	beq.n	800c72a <_ZN5BTHID7ACLDataEPh+0xe6>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d034      	beq.n	800c72a <_ZN5BTHID7ACLDataEPh+0xe6>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	7d5b      	ldrb	r3, [r3, #21]
 800c6c4:	f083 0301 	eor.w	r3, r3, #1
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d02d      	beq.n	800c72a <_ZN5BTHID7ACLDataEPh+0xe6>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c6d4:	f083 0301 	eor.w	r3, r3, #1
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d025      	beq.n	800c72a <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	3308      	adds	r3, #8
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	2b02      	cmp	r3, #2
 800c6e6:	d120      	bne.n	800c72a <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	330c      	adds	r3, #12
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	330d      	adds	r3, #13
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	021b      	lsls	r3, r3, #8
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	2b11      	cmp	r3, #17
 800c6fc:	d115      	bne.n	800c72a <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	2201      	movs	r2, #1
 800c70e:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	8b5a      	ldrh	r2, [r3, #26]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2200      	movs	r2, #0
 800c726:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	899b      	ldrh	r3, [r3, #12]
 800c730:	461a      	mov	r2, r3
 800c732:	6839      	ldr	r1, [r7, #0]
 800c734:	f7ff fe8e 	bl	800c454 <_ZN16BluetoothService14checkHciHandleEPht>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f000 83dd 	beq.w	800cefa <_ZN5BTHID7ACLDataEPh+0x8b6>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	3306      	adds	r3, #6
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	461a      	mov	r2, r3
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	3307      	adds	r3, #7
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	021b      	lsls	r3, r3, #8
 800c750:	4313      	orrs	r3, r2
 800c752:	2b01      	cmp	r3, #1
 800c754:	f040 829b 	bne.w	800cc8e <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	3308      	adds	r3, #8
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	f000 83c5 	beq.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	3308      	adds	r3, #8
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	2b03      	cmp	r3, #3
 800c76c:	f040 808d 	bne.w	800c88a <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	3310      	adds	r3, #16
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	461a      	mov	r2, r3
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	3311      	adds	r3, #17
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	021b      	lsls	r3, r3, #8
 800c780:	4313      	orrs	r3, r2
 800c782:	2b00      	cmp	r3, #0
 800c784:	f040 83b3 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	3312      	adds	r3, #18
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	461a      	mov	r2, r3
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	3313      	adds	r3, #19
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	021b      	lsls	r3, r3, #8
 800c798:	4313      	orrs	r3, r2
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f040 83a7 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	330e      	adds	r3, #14
 800c7a4:	781a      	ldrb	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d124      	bne.n	800c7fa <_ZN5BTHID7ACLDataEPh+0x1b6>
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	330f      	adds	r3, #15
 800c7b4:	781a      	ldrb	r2, [r3, #0]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d11c      	bne.n	800c7fa <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	7a5a      	ldrb	r2, [r3, #9]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	7b1a      	ldrb	r2, [r3, #12]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	7b5a      	ldrb	r2, [r3, #13]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	7d1b      	ldrb	r3, [r3, #20]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	b2da      	uxtb	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6898      	ldr	r0, [r3, #8]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	8999      	ldrh	r1, [r3, #12]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	7d1a      	ldrb	r2, [r3, #20]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	331b      	adds	r3, #27
 800c7f4:	f7ff f825 	bl	800b842 <_ZN3BTD20l2cap_config_requestEthPh>
 800c7f8:	e379      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	330e      	adds	r3, #14
 800c7fe:	781a      	ldrb	r2, [r3, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800c806:	429a      	cmp	r2, r3
 800c808:	d11a      	bne.n	800c840 <_ZN5BTHID7ACLDataEPh+0x1fc>
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	330f      	adds	r3, #15
 800c80e:	781a      	ldrb	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c816:	429a      	cmp	r2, r3
 800c818:	d112      	bne.n	800c840 <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	7a5a      	ldrb	r2, [r3, #9]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	7b1a      	ldrb	r2, [r3, #12]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	7b5a      	ldrb	r2, [r3, #13]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	f043 0204 	orr.w	r2, r3, #4
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	611a      	str	r2, [r3, #16]
 800c83e:	e356      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	330e      	adds	r3, #14
 800c844:	781a      	ldrb	r2, [r3, #0]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c84c:	429a      	cmp	r2, r3
 800c84e:	f040 834e 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	330f      	adds	r3, #15
 800c856:	781a      	ldrb	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800c85e:	429a      	cmp	r2, r3
 800c860:	f040 8345 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	7a5a      	ldrb	r2, [r3, #9]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	7b1a      	ldrb	r2, [r3, #12]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	7b5a      	ldrb	r2, [r3, #13]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	611a      	str	r2, [r3, #16]
 800c888:	e331      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	3308      	adds	r3, #8
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	2b02      	cmp	r3, #2
 800c892:	d15a      	bne.n	800c94a <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	330c      	adds	r3, #12
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	461a      	mov	r2, r3
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	330d      	adds	r3, #13
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	021b      	lsls	r3, r3, #8
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d112      	bne.n	800c8d0 <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	7a5a      	ldrb	r2, [r3, #9]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	7b9a      	ldrb	r2, [r3, #14]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	7bda      	ldrb	r2, [r3, #15]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	691b      	ldr	r3, [r3, #16]
 800c8c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	611a      	str	r2, [r3, #16]
 800c8ce:	e30e      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	330c      	adds	r3, #12
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	330d      	adds	r3, #13
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	021b      	lsls	r3, r3, #8
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	2b11      	cmp	r3, #17
 800c8e4:	d112      	bne.n	800c90c <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	7a5a      	ldrb	r2, [r3, #9]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	7b9a      	ldrb	r2, [r3, #14]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	7bda      	ldrb	r2, [r3, #15]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	691b      	ldr	r3, [r3, #16]
 800c902:	f043 0201 	orr.w	r2, r3, #1
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	611a      	str	r2, [r3, #16]
 800c90a:	e2f0      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	330c      	adds	r3, #12
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	461a      	mov	r2, r3
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	330d      	adds	r3, #13
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	021b      	lsls	r3, r3, #8
 800c91c:	4313      	orrs	r3, r2
 800c91e:	2b13      	cmp	r3, #19
 800c920:	f040 82e5 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        identifier = l2capinbuf[9];
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	7a5a      	ldrb	r2, [r3, #9]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	7b9a      	ldrb	r2, [r3, #14]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	7bda      	ldrb	r2, [r3, #15]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	691b      	ldr	r3, [r3, #16]
 800c940:	f043 0210 	orr.w	r2, r3, #16
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	611a      	str	r2, [r3, #16]
 800c948:	e2d1      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	3308      	adds	r3, #8
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	2b05      	cmp	r3, #5
 800c952:	d15e      	bne.n	800ca12 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	3310      	adds	r3, #16
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	461a      	mov	r2, r3
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	3311      	adds	r3, #17
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	021b      	lsls	r3, r3, #8
 800c964:	4313      	orrs	r3, r2
 800c966:	2b00      	cmp	r3, #0
 800c968:	f040 82c1 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	330c      	adds	r3, #12
 800c970:	781a      	ldrb	r2, [r3, #0]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800c978:	429a      	cmp	r2, r3
 800c97a:	d112      	bne.n	800c9a2 <_ZN5BTHID7ACLDataEPh+0x35e>
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	330d      	adds	r3, #13
 800c980:	781a      	ldrb	r2, [r3, #0]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c988:	429a      	cmp	r2, r3
 800c98a:	d10a      	bne.n	800c9a2 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	7a5a      	ldrb	r2, [r3, #9]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	611a      	str	r2, [r3, #16]
 800c9a0:	e2a5      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	330c      	adds	r3, #12
 800c9a6:	781a      	ldrb	r2, [r3, #0]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d112      	bne.n	800c9d8 <_ZN5BTHID7ACLDataEPh+0x394>
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	330d      	adds	r3, #13
 800c9b6:	781a      	ldrb	r2, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d10a      	bne.n	800c9d8 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	7a5a      	ldrb	r2, [r3, #9]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	f043 0202 	orr.w	r2, r3, #2
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	611a      	str	r2, [r3, #16]
 800c9d6:	e28a      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	330c      	adds	r3, #12
 800c9dc:	781a      	ldrb	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	f040 8282 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	330d      	adds	r3, #13
 800c9ee:	781a      	ldrb	r2, [r3, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	f040 8279 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	7a5a      	ldrb	r2, [r3, #9]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	691b      	ldr	r3, [r3, #16]
 800ca08:	f043 0220 	orr.w	r2, r3, #32
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	611a      	str	r2, [r3, #16]
 800ca10:	e26d      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	3308      	adds	r3, #8
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	2b04      	cmp	r3, #4
 800ca1a:	d155      	bne.n	800cac8 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	330c      	adds	r3, #12
 800ca20:	781a      	ldrb	r2, [r3, #0]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d113      	bne.n	800ca54 <_ZN5BTHID7ACLDataEPh+0x410>
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	330d      	adds	r3, #13
 800ca30:	781a      	ldrb	r2, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d10b      	bne.n	800ca54 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6898      	ldr	r0, [r3, #8]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	8999      	ldrh	r1, [r3, #12]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	3309      	adds	r3, #9
 800ca48:	781a      	ldrb	r2, [r3, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	331b      	adds	r3, #27
 800ca4e:	f7fe ff43 	bl	800b8d8 <_ZN3BTD21l2cap_config_responseEthPh>
 800ca52:	e24c      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	330c      	adds	r3, #12
 800ca58:	781a      	ldrb	r2, [r3, #0]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d113      	bne.n	800ca8c <_ZN5BTHID7ACLDataEPh+0x448>
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	330d      	adds	r3, #13
 800ca68:	781a      	ldrb	r2, [r3, #0]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d10b      	bne.n	800ca8c <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6898      	ldr	r0, [r3, #8]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	8999      	ldrh	r1, [r3, #12]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	3309      	adds	r3, #9
 800ca80:	781a      	ldrb	r2, [r3, #0]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3316      	adds	r3, #22
 800ca86:	f7fe ff27 	bl	800b8d8 <_ZN3BTD21l2cap_config_responseEthPh>
 800ca8a:	e230      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	330c      	adds	r3, #12
 800ca90:	781a      	ldrb	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	f040 8228 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	330d      	adds	r3, #13
 800caa2:	781a      	ldrb	r2, [r3, #0]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800caaa:	429a      	cmp	r2, r3
 800caac:	f040 821f 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6898      	ldr	r0, [r3, #8]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	8999      	ldrh	r1, [r3, #12]
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	3309      	adds	r3, #9
 800cabc:	781a      	ldrb	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	3318      	adds	r3, #24
 800cac2:	f7fe ff09 	bl	800b8d8 <_ZN3BTD21l2cap_config_responseEthPh>
 800cac6:	e212      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	3308      	adds	r3, #8
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	2b06      	cmp	r3, #6
 800cad0:	d170      	bne.n	800cbb4 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	330c      	adds	r3, #12
 800cad6:	781a      	ldrb	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cade:	429a      	cmp	r2, r3
 800cae0:	d112      	bne.n	800cb08 <_ZN5BTHID7ACLDataEPh+0x4c4>
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	330d      	adds	r3, #13
 800cae6:	781a      	ldrb	r2, [r3, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800caee:	429a      	cmp	r2, r3
 800caf0:	d10a      	bne.n	800cb08 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	7a5a      	ldrb	r2, [r3, #9]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	611a      	str	r2, [r3, #16]
 800cb06:	e1f2      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	330c      	adds	r3, #12
 800cb0c:	781a      	ldrb	r2, [r3, #0]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d121      	bne.n	800cb5c <_ZN5BTHID7ACLDataEPh+0x518>
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	330d      	adds	r3, #13
 800cb1c:	781a      	ldrb	r2, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d119      	bne.n	800cb5c <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	7a5a      	ldrb	r2, [r3, #9]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6898      	ldr	r0, [r3, #8]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	8999      	ldrh	r1, [r3, #12]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	7d1a      	ldrb	r2, [r3, #20]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	3316      	adds	r3, #22
 800cb46:	9300      	str	r3, [sp, #0]
 800cb48:	4623      	mov	r3, r4
 800cb4a:	f7fe ff55 	bl	800b9f8 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	3308      	adds	r3, #8
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	4798      	blx	r3
 800cb5a:	e1c8      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	330c      	adds	r3, #12
 800cb60:	781a      	ldrb	r2, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	f040 81c0 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	330d      	adds	r3, #13
 800cb72:	781a      	ldrb	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	f040 81b7 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	7a5a      	ldrb	r2, [r3, #9]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6898      	ldr	r0, [r3, #8]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	8999      	ldrh	r1, [r3, #12]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	7d1a      	ldrb	r2, [r3, #20]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	3318      	adds	r3, #24
 800cb9e:	9300      	str	r3, [sp, #0]
 800cba0:	4623      	mov	r3, r4
 800cba2:	f7fe ff29 	bl	800b9f8 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	3308      	adds	r3, #8
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	4798      	blx	r3
 800cbb2:	e19c      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	3308      	adds	r3, #8
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2b07      	cmp	r3, #7
 800cbbc:	d14c      	bne.n	800cc58 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	330c      	adds	r3, #12
 800cbc2:	781a      	ldrb	r2, [r3, #0]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	7edb      	ldrb	r3, [r3, #27]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d111      	bne.n	800cbf0 <_ZN5BTHID7ACLDataEPh+0x5ac>
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	330d      	adds	r3, #13
 800cbd0:	781a      	ldrb	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	7f1b      	ldrb	r3, [r3, #28]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d10a      	bne.n	800cbf0 <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	7a5a      	ldrb	r2, [r3, #9]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	611a      	str	r2, [r3, #16]
 800cbee:	e17e      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	330c      	adds	r3, #12
 800cbf4:	781a      	ldrb	r2, [r3, #0]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	7d9b      	ldrb	r3, [r3, #22]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d111      	bne.n	800cc22 <_ZN5BTHID7ACLDataEPh+0x5de>
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	330d      	adds	r3, #13
 800cc02:	781a      	ldrb	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	7ddb      	ldrb	r3, [r3, #23]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d10a      	bne.n	800cc22 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	7a5a      	ldrb	r2, [r3, #9]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	f043 0208 	orr.w	r2, r3, #8
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	611a      	str	r2, [r3, #16]
 800cc20:	e165      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	330c      	adds	r3, #12
 800cc26:	781a      	ldrb	r2, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	7e1b      	ldrb	r3, [r3, #24]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	f040 815e 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	330d      	adds	r3, #13
 800cc36:	781a      	ldrb	r2, [r3, #0]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	7e5b      	ldrb	r3, [r3, #25]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	f040 8156 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	7a5a      	ldrb	r2, [r3, #9]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	691b      	ldr	r3, [r3, #16]
 800cc4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	611a      	str	r2, [r3, #16]
 800cc56:	e14a      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	3308      	adds	r3, #8
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	2b0a      	cmp	r3, #10
 800cc60:	f040 8145 	bne.w	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	7a5a      	ldrb	r2, [r3, #9]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6898      	ldr	r0, [r3, #8]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	8999      	ldrh	r1, [r3, #12]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	7d1a      	ldrb	r2, [r3, #20]
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	330c      	adds	r3, #12
 800cc7c:	781c      	ldrb	r4, [r3, #0]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	330d      	adds	r3, #13
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	4623      	mov	r3, r4
 800cc88:	f7fe fef3 	bl	800ba72 <_ZN3BTD26l2cap_information_responseEthhh>
 800cc8c:	e12f      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	3306      	adds	r3, #6
 800cc92:	781a      	ldrb	r2, [r3, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	f040 8087 	bne.w	800cdae <_ZN5BTHID7ACLDataEPh+0x76a>
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	3307      	adds	r3, #7
 800cca4:	781a      	ldrb	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d17e      	bne.n	800cdae <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	3308      	adds	r3, #8
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d131      	bne.n	800cd1e <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2203      	movs	r2, #3
 800ccbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	7a5a      	ldrb	r2, [r3, #9]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	7a9a      	ldrb	r2, [r3, #10]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2205      	movs	r2, #5
 800cce2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	3328      	adds	r3, #40	; 0x28
 800cd12:	220a      	movs	r2, #10
 800cd14:	4619      	mov	r1, r3
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 fb7a 	bl	800d410 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800cd1c:	e0e4      	b.n	800cee8 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	3308      	adds	r3, #8
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	2b04      	cmp	r3, #4
 800cd26:	d131      	bne.n	800cd8c <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2205      	movs	r2, #5
 800cd2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	7a5a      	ldrb	r2, [r3, #9]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	7a9a      	ldrb	r2, [r3, #10]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2205      	movs	r2, #5
 800cd50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2202      	movs	r2, #2
 800cd60:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2235      	movs	r2, #53	; 0x35
 800cd68:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	3328      	adds	r3, #40	; 0x28
 800cd80:	220a      	movs	r2, #10
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 fb43 	bl	800d410 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800cd8a:	e0ad      	b.n	800cee8 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	3308      	adds	r3, #8
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	2b06      	cmp	r3, #6
 800cd94:	f040 80a8 	bne.w	800cee8 <_ZN5BTHID7ACLDataEPh+0x8a4>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	3309      	adds	r3, #9
 800cd9c:	7819      	ldrb	r1, [r3, #0]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	330a      	adds	r3, #10
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	461a      	mov	r2, r3
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 fb4c 	bl	800d444 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800cdac:	e09c      	b.n	800cee8 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	3306      	adds	r3, #6
 800cdb2:	781a      	ldrb	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d166      	bne.n	800ce8c <_ZN5BTHID7ACLDataEPh+0x848>
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	3307      	adds	r3, #7
 800cdc2:	781a      	ldrb	r2, [r3, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d15e      	bne.n	800ce8c <_ZN5BTHID7ACLDataEPh+0x848>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	3308      	adds	r3, #8
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2ba1      	cmp	r3, #161	; 0xa1
 800cdd6:	f040 8089 	bne.w	800ceec <_ZN5BTHID7ACLDataEPh+0x8a8>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800cdda:	f7f4 fedd 	bl	8001b98 <HAL_GetTick>
 800cdde:	4603      	mov	r3, r0
 800cde0:	4a48      	ldr	r2, [pc, #288]	; (800cf04 <_ZN5BTHID7ACLDataEPh+0x8c0>)
 800cde2:	fba2 2303 	umull	r2, r3, r2, r3
 800cde6:	099a      	lsrs	r2, r3, #6
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	3305      	adds	r3, #5
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	021b      	lsls	r3, r3, #8
 800cdf4:	b21a      	sxth	r2, r3
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	b21b      	sxth	r3, r3
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	b21b      	sxth	r3, r3
 800ce02:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	3314      	adds	r3, #20
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	89fa      	ldrh	r2, [r7, #14]
 800ce0e:	b2d2      	uxtb	r2, r2
 800ce10:	3a01      	subs	r2, #1
 800ce12:	b2d1      	uxtb	r1, r2
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	3209      	adds	r2, #9
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	3309      	adds	r3, #9
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d002      	beq.n	800ce2c <_ZN5BTHID7ACLDataEPh+0x7e8>
 800ce26:	2b02      	cmp	r3, #2
 800ce28:	d016      	beq.n	800ce58 <_ZN5BTHID7ACLDataEPh+0x814>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800ce2a:	e05f      	b.n	800ceec <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6a1b      	ldr	r3, [r3, #32]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d027      	beq.n	800ce84 <_ZN5BTHID7ACLDataEPh+0x840>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a18      	ldr	r0, [r3, #32]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6a1b      	ldr	r3, [r3, #32]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	681c      	ldr	r4, [r3, #0]
 800ce40:	89fb      	ldrh	r3, [r7, #14]
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	3b02      	subs	r3, #2
 800ce46:	b2da      	uxtb	r2, r3
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	330a      	adds	r3, #10
 800ce4c:	9300      	str	r3, [sp, #0]
 800ce4e:	4613      	mov	r3, r2
 800ce50:	2200      	movs	r2, #0
 800ce52:	6879      	ldr	r1, [r7, #4]
 800ce54:	47a0      	blx	r4
                                                break;
 800ce56:	e015      	b.n	800ce84 <_ZN5BTHID7ACLDataEPh+0x840>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d013      	beq.n	800ce88 <_ZN5BTHID7ACLDataEPh+0x844>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	681c      	ldr	r4, [r3, #0]
 800ce6c:	89fb      	ldrh	r3, [r7, #14]
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	3b02      	subs	r3, #2
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	330a      	adds	r3, #10
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	6879      	ldr	r1, [r7, #4]
 800ce80:	47a0      	blx	r4
                                                break;
 800ce82:	e001      	b.n	800ce88 <_ZN5BTHID7ACLDataEPh+0x844>
                                                break;
 800ce84:	bf00      	nop
 800ce86:	e031      	b.n	800ceec <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                break;
 800ce88:	bf00      	nop
                        }
 800ce8a:	e02f      	b.n	800ceec <_ZN5BTHID7ACLDataEPh+0x8a8>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	3306      	adds	r3, #6
 800ce90:	781a      	ldrb	r2, [r3, #0]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d128      	bne.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	3307      	adds	r3, #7
 800cea0:	781a      	ldrb	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d120      	bne.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	3308      	adds	r3, #8
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	2ba3      	cmp	r3, #163	; 0xa3
 800ceb4:	d11b      	bne.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	3305      	adds	r3, #5
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	021b      	lsls	r3, r3, #8
 800cebe:	b21a      	sxth	r2, r3
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	3304      	adds	r3, #4
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	b21b      	sxth	r3, r3
 800cec8:	4313      	orrs	r3, r2
 800ceca:	b21b      	sxth	r3, r3
 800cecc:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	3318      	adds	r3, #24
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	89ba      	ldrh	r2, [r7, #12]
 800ced8:	b2d2      	uxtb	r2, r2
 800ceda:	3a01      	subs	r2, #1
 800cedc:	b2d1      	uxtb	r1, r2
 800cede:	683a      	ldr	r2, [r7, #0]
 800cee0:	3209      	adds	r2, #9
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	4798      	blx	r3
 800cee6:	e002      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800cee8:	bf00      	nop
 800ceea:	e000      	b.n	800ceee <_ZN5BTHID7ACLDataEPh+0x8aa>
                        }
 800ceec:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 f80a 	bl	800cf08 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 f8b9 	bl	800d06c <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800cefa:	bf00      	nop
 800cefc:	3714      	adds	r7, #20
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd90      	pop	{r4, r7, pc}
 800cf02:	bf00      	nop
 800cf04:	10624dd3 	.word	0x10624dd3

0800cf08 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800cf08:	b5b0      	push	{r4, r5, r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af02      	add	r7, sp, #8
 800cf0e:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	7e9b      	ldrb	r3, [r3, #26]
 800cf14:	2b0e      	cmp	r3, #14
 800cf16:	f000 8086 	beq.w	800d026 <_ZN5BTHID8SDP_taskEv+0x11e>
 800cf1a:	2b0e      	cmp	r3, #14
 800cf1c:	f300 80a1 	bgt.w	800d062 <_ZN5BTHID8SDP_taskEv+0x15a>
 800cf20:	2b0a      	cmp	r3, #10
 800cf22:	d002      	beq.n	800cf2a <_ZN5BTHID8SDP_taskEv+0x22>
 800cf24:	2b0b      	cmp	r3, #11
 800cf26:	d06a      	beq.n	800cffe <_ZN5BTHID8SDP_taskEv+0xf6>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800cf28:	e09b      	b.n	800d062 <_ZN5BTHID8SDP_taskEv+0x15a>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	691b      	ldr	r3, [r3, #16]
 800cf2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d043      	beq.n	800cfbe <_ZN5BTHID8SDP_taskEv+0xb6>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6898      	ldr	r0, [r3, #8]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	8999      	ldrh	r1, [r3, #12]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	7d1a      	ldrb	r2, [r3, #20]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	331b      	adds	r3, #27
 800cf58:	2501      	movs	r5, #1
 800cf5a:	9501      	str	r5, [sp, #4]
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	4623      	mov	r3, r4
 800cf60:	f7fe fc22 	bl	800b7a8 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800cf64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cf68:	f7f4 fe22 	bl	8001bb0 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6898      	ldr	r0, [r3, #8]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	8999      	ldrh	r1, [r3, #12]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	7d1a      	ldrb	r2, [r3, #20]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	331b      	adds	r3, #27
 800cf82:	2500      	movs	r5, #0
 800cf84:	9501      	str	r5, [sp, #4]
 800cf86:	9300      	str	r3, [sp, #0]
 800cf88:	4623      	mov	r3, r4
 800cf8a:	f7fe fc0d 	bl	800b7a8 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	7d1b      	ldrb	r3, [r3, #20]
 800cf92:	3301      	adds	r3, #1
 800cf94:	b2da      	uxtb	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800cf9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cf9e:	f7f4 fe07 	bl	8001bb0 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6898      	ldr	r0, [r3, #8]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	8999      	ldrh	r1, [r3, #12]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	7d1a      	ldrb	r2, [r3, #20]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	331b      	adds	r3, #27
 800cfb2:	f7fe fc46 	bl	800b842 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	220b      	movs	r2, #11
 800cfba:	769a      	strb	r2, [r3, #26]
                        break;
 800cfbc:	e04c      	b.n	800d058 <_ZN5BTHID8SDP_taskEv+0x150>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d046      	beq.n	800d058 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	691b      	ldr	r3, [r3, #16]
 800cfce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6898      	ldr	r0, [r3, #8]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	8999      	ldrh	r1, [r3, #12]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	7d1a      	ldrb	r2, [r3, #20]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	331b      	adds	r3, #27
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	4623      	mov	r3, r4
 800cff8:	f7fe fcfe 	bl	800b9f8 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 800cffc:	e02c      	b.n	800d058 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	691b      	ldr	r3, [r3, #16]
 800d002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d006:	2b00      	cmp	r3, #0
 800d008:	d028      	beq.n	800d05c <_ZN5BTHID8SDP_taskEv+0x154>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	691b      	ldr	r3, [r3, #16]
 800d00e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2201      	movs	r2, #1
 800d01a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	220a      	movs	r2, #10
 800d022:	769a      	strb	r2, [r3, #26]
                        break;
 800d024:	e01a      	b.n	800d05c <_ZN5BTHID8SDP_taskEv+0x154>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d016      	beq.n	800d060 <_ZN5BTHID8SDP_taskEv+0x158>
                                pBtd->hci_disconnect(hci_handle);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	689a      	ldr	r2, [r3, #8]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	899b      	ldrh	r3, [r3, #12]
 800d03a:	4619      	mov	r1, r3
 800d03c:	4610      	mov	r0, r2
 800d03e:	f7fe fa84 	bl	800b54a <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d048:	819a      	strh	r2, [r3, #12]
                                Reset();
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	3308      	adds	r3, #8
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	4798      	blx	r3
                        break;
 800d056:	e003      	b.n	800d060 <_ZN5BTHID8SDP_taskEv+0x158>
                        break;
 800d058:	bf00      	nop
 800d05a:	e002      	b.n	800d062 <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800d05c:	bf00      	nop
 800d05e:	e000      	b.n	800d062 <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800d060:	bf00      	nop
}
 800d062:	bf00      	nop
 800d064:	3708      	adds	r7, #8
 800d066:	46bd      	mov	sp, r7
 800d068:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d06c <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 800d06c:	b5b0      	push	{r4, r5, r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af02      	add	r7, sp, #8
 800d072:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d07a:	3b01      	subs	r3, #1
 800d07c:	2b08      	cmp	r3, #8
 800d07e:	f200 812f 	bhi.w	800d2e0 <_ZN5BTHID10L2CAP_taskEv+0x274>
 800d082:	a201      	add	r2, pc, #4	; (adr r2, 800d088 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 800d084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d088:	0800d2bf 	.word	0x0800d2bf
 800d08c:	0800d157 	.word	0x0800d157
 800d090:	0800d18f 	.word	0x0800d18f
 800d094:	0800d0ad 	.word	0x0800d0ad
 800d098:	0800d28b 	.word	0x0800d28b
 800d09c:	0800d0cb 	.word	0x0800d0cb
 800d0a0:	0800d1d9 	.word	0x0800d1d9
 800d0a4:	0800d20f 	.word	0x0800d20f
 800d0a8:	0800d24b 	.word	0x0800d24b
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	691b      	ldr	r3, [r3, #16]
 800d0b0:	f003 0302 	and.w	r3, r3, #2
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f000 8104 	beq.w	800d2c2 <_ZN5BTHID10L2CAP_taskEv+0x256>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 f9fd 	bl	800d4ba <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2206      	movs	r2, #6
 800d0c4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d0c8:	e0fb      	b.n	800d2c2 <_ZN5BTHID10L2CAP_taskEv+0x256>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	f003 0310 	and.w	r3, r3, #16
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f000 80f7 	beq.w	800d2c6 <_ZN5BTHID10L2CAP_taskEv+0x25a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6898      	ldr	r0, [r3, #8]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	8999      	ldrh	r1, [r3, #12]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	7d1a      	ldrb	r2, [r3, #20]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	3318      	adds	r3, #24
 800d0ee:	2501      	movs	r5, #1
 800d0f0:	9501      	str	r5, [sp, #4]
 800d0f2:	9300      	str	r3, [sp, #0]
 800d0f4:	4623      	mov	r3, r4
 800d0f6:	f7fe fb57 	bl	800b7a8 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d0fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d0fe:	f7f4 fd57 	bl	8001bb0 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6898      	ldr	r0, [r3, #8]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	8999      	ldrh	r1, [r3, #12]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	7d1a      	ldrb	r2, [r3, #20]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	3318      	adds	r3, #24
 800d118:	2500      	movs	r5, #0
 800d11a:	9501      	str	r5, [sp, #4]
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	4623      	mov	r3, r4
 800d120:	f7fe fb42 	bl	800b7a8 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	7d1b      	ldrb	r3, [r3, #20]
 800d128:	3301      	adds	r3, #1
 800d12a:	b2da      	uxtb	r2, r3
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d134:	f7f4 fd3c 	bl	8001bb0 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6898      	ldr	r0, [r3, #8]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	8999      	ldrh	r1, [r3, #12]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	7d1a      	ldrb	r2, [r3, #20]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	3318      	adds	r3, #24
 800d148:	f7fe fb7b 	bl	800b842 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2208      	movs	r2, #8
 800d150:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d154:	e0b7      	b.n	800d2c6 <_ZN5BTHID10L2CAP_taskEv+0x25a>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	691b      	ldr	r3, [r3, #16]
 800d15a:	f003 0304 	and.w	r3, r3, #4
 800d15e:	2b00      	cmp	r3, #0
 800d160:	f000 80b3 	beq.w	800d2ca <_ZN5BTHID10L2CAP_taskEv+0x25e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	7d1b      	ldrb	r3, [r3, #20]
 800d168:	3301      	adds	r3, #1
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6898      	ldr	r0, [r3, #8]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	8999      	ldrh	r1, [r3, #12]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	7d1a      	ldrb	r2, [r3, #20]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	3316      	adds	r3, #22
 800d180:	f7fe fb5f 	bl	800b842 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2203      	movs	r2, #3
 800d188:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d18c:	e09d      	b.n	800d2ca <_ZN5BTHID10L2CAP_taskEv+0x25e>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	f003 0302 	and.w	r3, r3, #2
 800d196:	2b00      	cmp	r3, #0
 800d198:	f000 8099 	beq.w	800d2ce <_ZN5BTHID10L2CAP_taskEv+0x262>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 f98c 	bl	800d4ba <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 800d1a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d1a6:	f7f4 fd03 	bl	8001bb0 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	7d1b      	ldrb	r3, [r3, #20]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6898      	ldr	r0, [r3, #8]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	8999      	ldrh	r1, [r3, #12]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	7d1a      	ldrb	r2, [r3, #20]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	336d      	adds	r3, #109	; 0x6d
 800d1c6:	2413      	movs	r4, #19
 800d1c8:	9400      	str	r4, [sp, #0]
 800d1ca:	f7fe faaf 	bl	800b72c <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2207      	movs	r2, #7
 800d1d2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d1d6:	e07a      	b.n	800d2ce <_ZN5BTHID10L2CAP_taskEv+0x262>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d076      	beq.n	800d2d2 <_ZN5BTHID10L2CAP_taskEv+0x266>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	7d1b      	ldrb	r3, [r3, #20]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6898      	ldr	r0, [r3, #8]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	8999      	ldrh	r1, [r3, #12]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	7d1a      	ldrb	r2, [r3, #20]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	3318      	adds	r3, #24
 800d200:	f7fe fb1f 	bl	800b842 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2208      	movs	r2, #8
 800d208:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d20c:	e061      	b.n	800d2d2 <_ZN5BTHID10L2CAP_taskEv+0x266>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	691b      	ldr	r3, [r3, #16]
 800d212:	f003 0320 	and.w	r3, r3, #32
 800d216:	2b00      	cmp	r3, #0
 800d218:	d05d      	beq.n	800d2d6 <_ZN5BTHID10L2CAP_taskEv+0x26a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	689b      	ldr	r3, [r3, #8]
 800d21e:	2200      	movs	r2, #0
 800d220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	2200      	movs	r2, #0
 800d22a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	755a      	strb	r2, [r3, #21]
                                onInit();
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	3310      	adds	r3, #16
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d248:	e045      	b.n	800d2d6 <_ZN5BTHID10L2CAP_taskEv+0x26a>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d252:	2b00      	cmp	r3, #0
 800d254:	d041      	beq.n	800d2da <_ZN5BTHID10L2CAP_taskEv+0x26e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	7d1b      	ldrb	r3, [r3, #20]
 800d25a:	3301      	adds	r3, #1
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6898      	ldr	r0, [r3, #8]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	8999      	ldrh	r1, [r3, #12]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	7d1a      	ldrb	r2, [r3, #20]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f103 0416 	add.w	r4, r3, #22
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	336b      	adds	r3, #107	; 0x6b
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	4623      	mov	r3, r4
 800d27c:	f7fe fb7f 	bl	800b97e <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2205      	movs	r2, #5
 800d284:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d288:	e027      	b.n	800d2da <_ZN5BTHID10L2CAP_taskEv+0x26e>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	f003 0308 	and.w	r3, r3, #8
 800d292:	2b00      	cmp	r3, #0
 800d294:	d023      	beq.n	800d2de <_ZN5BTHID10L2CAP_taskEv+0x272>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	689a      	ldr	r2, [r3, #8]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	899b      	ldrh	r3, [r3, #12]
 800d29e:	4619      	mov	r1, r3
 800d2a0:	4610      	mov	r0, r2
 800d2a2:	f7fe f952 	bl	800b54a <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2ac:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d2bc:	e00f      	b.n	800d2de <_ZN5BTHID10L2CAP_taskEv+0x272>
                        break;
 800d2be:	bf00      	nop
 800d2c0:	e00e      	b.n	800d2e0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d2c2:	bf00      	nop
 800d2c4:	e00c      	b.n	800d2e0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d2c6:	bf00      	nop
 800d2c8:	e00a      	b.n	800d2e0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d2ca:	bf00      	nop
 800d2cc:	e008      	b.n	800d2e0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d2ce:	bf00      	nop
 800d2d0:	e006      	b.n	800d2e0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d2d2:	bf00      	nop
 800d2d4:	e004      	b.n	800d2e0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d2d6:	bf00      	nop
 800d2d8:	e002      	b.n	800d2e0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d2da:	bf00      	nop
 800d2dc:	e000      	b.n	800d2e0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d2de:	bf00      	nop
        }
}
 800d2e0:	bf00      	nop
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bdb0      	pop	{r4, r5, r7, pc}

0800d2e8 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 800d2e8:	b5b0      	push	{r4, r5, r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af02      	add	r7, sp, #8
 800d2ee:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f040 8086 	bne.w	800d408 <_ZN5BTHID3RunEv+0x120>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d304:	2b00      	cmp	r3, #0
 800d306:	d03a      	beq.n	800d37e <_ZN5BTHID3RunEv+0x96>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	7a5b      	ldrb	r3, [r3, #9]
 800d30e:	f083 0301 	eor.w	r3, r3, #1
 800d312:	b2db      	uxtb	r3, r3
 800d314:	2b00      	cmp	r3, #0
 800d316:	d032      	beq.n	800d37e <_ZN5BTHID3RunEv+0x96>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	7d5b      	ldrb	r3, [r3, #21]
 800d31c:	f083 0301 	eor.w	r3, r3, #1
 800d320:	b2db      	uxtb	r3, r3
 800d322:	2b00      	cmp	r3, #0
 800d324:	d02b      	beq.n	800d37e <_ZN5BTHID3RunEv+0x96>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d32c:	f083 0301 	eor.w	r3, r3, #1
 800d330:	b2db      	uxtb	r3, r3
 800d332:	2b00      	cmp	r3, #0
 800d334:	d023      	beq.n	800d37e <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	2201      	movs	r2, #1
 800d33c:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2201      	movs	r2, #1
 800d342:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	8b5a      	ldrh	r2, [r3, #26]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2200      	movs	r2, #0
 800d35a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6898      	ldr	r0, [r3, #8]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	8999      	ldrh	r1, [r3, #12]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	7d1a      	ldrb	r2, [r3, #20]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	336b      	adds	r3, #107	; 0x6b
 800d36c:	2411      	movs	r4, #17
 800d36e:	9400      	str	r4, [sp, #0]
 800d370:	f7fe f9dc 	bl	800b72c <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2202      	movs	r2, #2
 800d378:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 800d37c:	e043      	b.n	800d406 <_ZN5BTHID3RunEv+0x11e>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	691b      	ldr	r3, [r3, #16]
 800d382:	f003 0301 	and.w	r3, r3, #1
 800d386:	2b00      	cmp	r3, #0
 800d388:	d03d      	beq.n	800d406 <_ZN5BTHID3RunEv+0x11e>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6898      	ldr	r0, [r3, #8]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	8999      	ldrh	r1, [r3, #12]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	7d1a      	ldrb	r2, [r3, #20]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	3316      	adds	r3, #22
 800d3a0:	2501      	movs	r5, #1
 800d3a2:	9501      	str	r5, [sp, #4]
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	4623      	mov	r3, r4
 800d3a8:	f7fe f9fe 	bl	800b7a8 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d3ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d3b0:	f7f4 fbfe 	bl	8001bb0 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6898      	ldr	r0, [r3, #8]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	8999      	ldrh	r1, [r3, #12]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	7d1a      	ldrb	r2, [r3, #20]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	3316      	adds	r3, #22
 800d3ca:	2500      	movs	r5, #0
 800d3cc:	9501      	str	r5, [sp, #4]
 800d3ce:	9300      	str	r3, [sp, #0]
 800d3d0:	4623      	mov	r3, r4
 800d3d2:	f7fe f9e9 	bl	800b7a8 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	7d1b      	ldrb	r3, [r3, #20]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d3e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d3e6:	f7f4 fbe3 	bl	8001bb0 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6898      	ldr	r0, [r3, #8]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	8999      	ldrh	r1, [r3, #12]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	7d1a      	ldrb	r2, [r3, #20]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	3316      	adds	r3, #22
 800d3fa:	f7fe fa22 	bl	800b842 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2204      	movs	r2, #4
 800d402:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 800d406:	bf00      	nop
        }
}
 800d408:	bf00      	nop
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bdb0      	pop	{r4, r5, r7, pc}

0800d410 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 800d410:	b590      	push	{r4, r7, lr}
 800d412:	b087      	sub	sp, #28
 800d414:	af02      	add	r7, sp, #8
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	4613      	mov	r3, r2
 800d41c:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6898      	ldr	r0, [r3, #8]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	8999      	ldrh	r1, [r3, #12]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	7edb      	ldrb	r3, [r3, #27]
 800d42a:	68fa      	ldr	r2, [r7, #12]
 800d42c:	7f12      	ldrb	r2, [r2, #28]
 800d42e:	79fc      	ldrb	r4, [r7, #7]
 800d430:	9201      	str	r2, [sp, #4]
 800d432:	9300      	str	r3, [sp, #0]
 800d434:	4623      	mov	r3, r4
 800d436:	68ba      	ldr	r2, [r7, #8]
 800d438:	f7fe f8e6 	bl	800b608 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800d43c:	bf00      	nop
 800d43e:	3714      	adds	r7, #20
 800d440:	46bd      	mov	sp, r7
 800d442:	bd90      	pop	{r4, r7, pc}

0800d444 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	460b      	mov	r3, r1
 800d44e:	70fb      	strb	r3, [r7, #3]
 800d450:	4613      	mov	r3, r2
 800d452:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2207      	movs	r2, #7
 800d458:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	78fa      	ldrb	r2, [r7, #3]
 800d460:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	78ba      	ldrb	r2, [r7, #2]
 800d468:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2205      	movs	r2, #5
 800d478:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2202      	movs	r2, #2
 800d488:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2235      	movs	r2, #53	; 0x35
 800d490:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	3328      	adds	r3, #40	; 0x28
 800d4a8:	220a      	movs	r2, #10
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f7ff ffaf 	bl	800d410 <_ZN5BTHID11SDP_CommandEPhh>
}
 800d4b2:	bf00      	nop
 800d4b4:	3708      	adds	r7, #8
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 800d4ba:	b590      	push	{r4, r7, lr}
 800d4bc:	b087      	sub	sp, #28
 800d4be:	af02      	add	r7, sp, #8
 800d4c0:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d008      	beq.n	800d4de <_ZN5BTHID11setProtocolEv+0x24>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d003      	beq.n	800d4de <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d4e4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6898      	ldr	r0, [r3, #8]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	8999      	ldrh	r1, [r3, #12]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	7d9b      	ldrb	r3, [r3, #22]
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	7dd2      	ldrb	r2, [r2, #23]
 800d4fc:	f107 040f 	add.w	r4, r7, #15
 800d500:	9201      	str	r2, [sp, #4]
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	2301      	movs	r3, #1
 800d506:	4622      	mov	r2, r4
 800d508:	f7fe f87e 	bl	800b608 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800d50c:	bf00      	nop
 800d50e:	3714      	adds	r7, #20
 800d510:	46bd      	mov	sp, r7
 800d512:	bd90      	pop	{r4, r7, pc}

0800d514 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	460b      	mov	r3, r1
 800d51e:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 800d520:	78fb      	ldrb	r3, [r7, #3]
 800d522:	2b03      	cmp	r3, #3
 800d524:	d86e      	bhi.n	800d604 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 800d526:	a201      	add	r2, pc, #4	; (adr r2, 800d52c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 800d528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d52c:	0800d53d 	.word	0x0800d53d
 800d530:	0800d56f 	.word	0x0800d56f
 800d534:	0800d5a1 	.word	0x0800d5a1
 800d538:	0800d5d3 	.word	0x0800d5d3
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	7a1b      	ldrb	r3, [r3, #8]
 800d540:	f003 030f 	and.w	r3, r3, #15
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b07      	cmp	r3, #7
 800d548:	d00d      	beq.n	800d566 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	7a1b      	ldrb	r3, [r3, #8]
 800d54e:	f003 030f 	and.w	r3, r3, #15
 800d552:	b2db      	uxtb	r3, r3
 800d554:	2b00      	cmp	r3, #0
 800d556:	d006      	beq.n	800d566 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	7a1b      	ldrb	r3, [r3, #8]
 800d55c:	f003 030f 	and.w	r3, r3, #15
 800d560:	b2db      	uxtb	r3, r3
 800d562:	2b01      	cmp	r3, #1
 800d564:	d101      	bne.n	800d56a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 800d566:	2301      	movs	r3, #1
 800d568:	e04d      	b.n	800d606 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d56a:	2300      	movs	r3, #0
 800d56c:	e04b      	b.n	800d606 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	7a1b      	ldrb	r3, [r3, #8]
 800d572:	f003 030f 	and.w	r3, r3, #15
 800d576:	b2db      	uxtb	r3, r3
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d00d      	beq.n	800d598 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	7a1b      	ldrb	r3, [r3, #8]
 800d580:	f003 030f 	and.w	r3, r3, #15
 800d584:	b2db      	uxtb	r3, r3
 800d586:	2b02      	cmp	r3, #2
 800d588:	d006      	beq.n	800d598 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	7a1b      	ldrb	r3, [r3, #8]
 800d58e:	f003 030f 	and.w	r3, r3, #15
 800d592:	b2db      	uxtb	r3, r3
 800d594:	2b03      	cmp	r3, #3
 800d596:	d101      	bne.n	800d59c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 800d598:	2301      	movs	r3, #1
 800d59a:	e034      	b.n	800d606 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d59c:	2300      	movs	r3, #0
 800d59e:	e032      	b.n	800d606 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	7a1b      	ldrb	r3, [r3, #8]
 800d5a4:	f003 030f 	and.w	r3, r3, #15
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	2b03      	cmp	r3, #3
 800d5ac:	d00d      	beq.n	800d5ca <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	7a1b      	ldrb	r3, [r3, #8]
 800d5b2:	f003 030f 	and.w	r3, r3, #15
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	2b04      	cmp	r3, #4
 800d5ba:	d006      	beq.n	800d5ca <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	7a1b      	ldrb	r3, [r3, #8]
 800d5c0:	f003 030f 	and.w	r3, r3, #15
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	2b05      	cmp	r3, #5
 800d5c8:	d101      	bne.n	800d5ce <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e01b      	b.n	800d606 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	e019      	b.n	800d606 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	7a1b      	ldrb	r3, [r3, #8]
 800d5d6:	f003 030f 	and.w	r3, r3, #15
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	2b05      	cmp	r3, #5
 800d5de:	d00d      	beq.n	800d5fc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	7a1b      	ldrb	r3, [r3, #8]
 800d5e4:	f003 030f 	and.w	r3, r3, #15
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	2b06      	cmp	r3, #6
 800d5ec:	d006      	beq.n	800d5fc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	7a1b      	ldrb	r3, [r3, #8]
 800d5f2:	f003 030f 	and.w	r3, r3, #15
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	2b07      	cmp	r3, #7
 800d5fa:	d101      	bne.n	800d600 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e002      	b.n	800d606 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d600:	2300      	movs	r3, #0
 800d602:	e000      	b.n	800d606 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 800d604:	2300      	movs	r3, #0
        }
}
 800d606:	4618      	mov	r0, r3
 800d608:	370c      	adds	r7, #12
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop

0800d614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	460b      	mov	r3, r1
 800d61e:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 800d620:	78fb      	ldrb	r3, [r7, #3]
 800d622:	2b03      	cmp	r3, #3
 800d624:	d806      	bhi.n	800d634 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 800d626:	78fb      	ldrb	r3, [r7, #3]
 800d628:	4619      	mov	r1, r3
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7ff ff72 	bl	800d514 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d630:	4603      	mov	r3, r0
 800d632:	e011      	b.n	800d658 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	689b      	ldr	r3, [r3, #8]
 800d638:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d63c:	4619      	mov	r1, r3
 800d63e:	78fb      	ldrb	r3, [r7, #3]
 800d640:	4a07      	ldr	r2, [pc, #28]	; (800d660 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 800d642:	4413      	add	r3, r2
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	fa21 f303 	lsr.w	r3, r1, r3
 800d64a:	f003 0301 	and.w	r3, r3, #1
 800d64e:	2b00      	cmp	r3, #0
 800d650:	bf14      	ite	ne
 800d652:	2301      	movne	r3, #1
 800d654:	2300      	moveq	r3, #0
 800d656:	b2db      	uxtb	r3, r3
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	0800f844 	.word	0x0800f844

0800d664 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 800d664:	b480      	push	{r7}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 800d670:	78fb      	ldrb	r3, [r7, #3]
 800d672:	4a1b      	ldr	r2, [pc, #108]	; (800d6e0 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 800d674:	4413      	add	r3, r2
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	461a      	mov	r2, r3
 800d67a:	2301      	movs	r3, #1
 800d67c:	4093      	lsls	r3, r2
 800d67e:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d68a:	021b      	lsls	r3, r3, #8
 800d68c:	4313      	orrs	r3, r2
 800d68e:	461a      	mov	r2, r3
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	4013      	ands	r3, r2
 800d694:	2b00      	cmp	r3, #0
 800d696:	bf14      	ite	ne
 800d698:	2301      	movne	r3, #1
 800d69a:	2300      	moveq	r3, #0
 800d69c:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d6a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d6a8:	021b      	lsls	r3, r3, #8
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	43db      	mvns	r3, r3
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	b2d1      	uxtb	r1, r2
 800d6bc:	2000      	movs	r0, #0
 800d6be:	4301      	orrs	r1, r0
 800d6c0:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800d6c4:	0a12      	lsrs	r2, r2, #8
 800d6c6:	b292      	uxth	r2, r2
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	430a      	orrs	r2, r1
 800d6cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 800d6d0:	7afb      	ldrb	r3, [r7, #11]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3714      	adds	r7, #20
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	0800f844 	.word	0x0800f844

0800d6e4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 800d6f0:	78fb      	ldrb	r3, [r7, #3]
 800d6f2:	2b08      	cmp	r3, #8
 800d6f4:	d102      	bne.n	800d6fc <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	7adb      	ldrb	r3, [r3, #11]
 800d6fa:	e006      	b.n	800d70a <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 800d6fc:	78fb      	ldrb	r3, [r7, #3]
 800d6fe:	2b09      	cmp	r3, #9
 800d700:	d102      	bne.n	800d708 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	7b1b      	ldrb	r3, [r3, #12]
 800d706:	e000      	b.n	800d70a <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 800d708:	2300      	movs	r3, #0
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	370c      	adds	r7, #12
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr

0800d716 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 800d716:	b480      	push	{r7}
 800d718:	b083      	sub	sp, #12
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
 800d71e:	460b      	mov	r3, r1
 800d720:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 800d722:	78fb      	ldrb	r3, [r7, #3]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	4413      	add	r3, r2
 800d728:	791b      	ldrb	r3, [r3, #4]
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	370c      	adds	r7, #12
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr

0800d736 <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 800d736:	b580      	push	{r7, lr}
 800d738:	b086      	sub	sp, #24
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	60f8      	str	r0, [r7, #12]
 800d73e:	460b      	mov	r3, r1
 800d740:	607a      	str	r2, [r7, #4]
 800d742:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 800d744:	7afb      	ldrb	r3, [r7, #11]
 800d746:	2b01      	cmp	r3, #1
 800d748:	f240 80a6 	bls.w	800d898 <_ZN9PS4Parser5ParseEhPh+0x162>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	f000 80a2 	beq.w	800d898 <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d10e      	bne.n	800d77a <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	1d18      	adds	r0, r3, #4
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	1c59      	adds	r1, r3, #1
 800d764:	7afb      	ldrb	r3, [r7, #11]
 800d766:	3b01      	subs	r3, #1
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	2b3c      	cmp	r3, #60	; 0x3c
 800d76c:	bf28      	it	cs
 800d76e:	233c      	movcs	r3, #60	; 0x3c
 800d770:	b2db      	uxtb	r3, r3
 800d772:	461a      	mov	r2, r3
 800d774:	f001 fe8e 	bl	800f494 <memcpy>
 800d778:	e016      	b.n	800d7a8 <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	2b11      	cmp	r3, #17
 800d780:	f040 8098 	bne.w	800d8b4 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 800d784:	7afb      	ldrb	r3, [r7, #11]
 800d786:	2b03      	cmp	r3, #3
 800d788:	f240 8096 	bls.w	800d8b8 <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	1d18      	adds	r0, r3, #4
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	1cd9      	adds	r1, r3, #3
 800d794:	7afb      	ldrb	r3, [r7, #11]
 800d796:	3b03      	subs	r3, #3
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	2b3c      	cmp	r3, #60	; 0x3c
 800d79c:	bf28      	it	cs
 800d79e:	233c      	movcs	r3, #60	; 0x3c
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	f001 fe76 	bl	800f494 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	f3c3 0217 	ubfx	r2, r3, #0, #24
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b4:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d06d      	beq.n	800d898 <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ca:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d7ce:	43db      	mvns	r3, r3
 800d7d0:	4013      	ands	r3, r2
 800d7d2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	b2d1      	uxtb	r1, r2
 800d7da:	2000      	movs	r0, #0
 800d7dc:	4301      	orrs	r1, r0
 800d7de:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800d7e2:	0a12      	lsrs	r2, r2, #8
 800d7e4:	b292      	uxth	r2, r2
 800d7e6:	2100      	movs	r1, #0
 800d7e8:	430a      	orrs	r2, r1
 800d7ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d7fa:	f361 0317 	bfi	r3, r1, #0, #24
 800d7fe:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 800d800:	2300      	movs	r3, #0
 800d802:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 800d804:	2100      	movs	r1, #0
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f7ff fe84 	bl	800d514 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d003      	beq.n	800d81a <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 800d812:	7dfb      	ldrb	r3, [r7, #23]
 800d814:	f043 0301 	orr.w	r3, r3, #1
 800d818:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 800d81a:	2101      	movs	r1, #1
 800d81c:	68f8      	ldr	r0, [r7, #12]
 800d81e:	f7ff fe79 	bl	800d514 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d003      	beq.n	800d830 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 800d828:	7dfb      	ldrb	r3, [r7, #23]
 800d82a:	f043 0302 	orr.w	r3, r3, #2
 800d82e:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 800d830:	2102      	movs	r1, #2
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f7ff fe6e 	bl	800d514 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d003      	beq.n	800d846 <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 800d83e:	7dfb      	ldrb	r3, [r7, #23]
 800d840:	f043 0304 	orr.w	r3, r3, #4
 800d844:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 800d846:	2103      	movs	r1, #3
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	f7ff fe63 	bl	800d514 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d003      	beq.n	800d85c <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 800d854:	7dfb      	ldrb	r3, [r7, #23]
 800d856:	f043 0308 	orr.w	r3, r3, #8
 800d85a:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d862:	7dfa      	ldrb	r2, [r7, #23]
 800d864:	429a      	cmp	r2, r3
 800d866:	d017      	beq.n	800d898 <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d86e:	b25b      	sxtb	r3, r3
 800d870:	43db      	mvns	r3, r3
 800d872:	b25a      	sxtb	r2, r3
 800d874:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d878:	4013      	ands	r3, r2
 800d87a:	b25b      	sxtb	r3, r3
 800d87c:	f003 030f 	and.w	r3, r3, #15
 800d880:	b2d9      	uxtb	r1, r3
 800d882:	68fa      	ldr	r2, [r7, #12]
 800d884:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800d888:	f361 0303 	bfi	r3, r1, #0, #4
 800d88c:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	7dfa      	ldrb	r2, [r7, #23]
 800d894:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00b      	beq.n	800d8ba <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68fa      	ldr	r2, [r7, #12]
 800d8aa:	3246      	adds	r2, #70	; 0x46
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	68f8      	ldr	r0, [r7, #12]
 800d8b0:	4798      	blx	r3
 800d8b2:	e002      	b.n	800d8ba <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 800d8b4:	bf00      	nop
 800d8b6:	e000      	b.n	800d8ba <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 800d8b8:	bf00      	nop
}
 800d8ba:	3718      	adds	r7, #24
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	73fb      	strb	r3, [r7, #15]
 800d8cc:	7bfb      	ldrb	r3, [r7, #15]
 800d8ce:	2b03      	cmp	r3, #3
 800d8d0:	d808      	bhi.n	800d8e4 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	4413      	add	r3, r2
 800d8d8:	227f      	movs	r2, #127	; 0x7f
 800d8da:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	73fb      	strb	r3, [r7, #15]
 800d8e2:	e7f3      	b.n	800d8cc <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	6893      	ldr	r3, [r2, #8]
 800d8e8:	f36f 0317 	bfc	r3, #0, #24
 800d8ec:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d8f2:	f36f 0317 	bfc	r3, #0, #24
 800d8f6:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	73fb      	strb	r3, [r7, #15]
 800d8fc:	7bfb      	ldrb	r3, [r7, #15]
 800d8fe:	2b01      	cmp	r3, #1
 800d900:	d808      	bhi.n	800d914 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 800d902:	7bfb      	ldrb	r3, [r7, #15]
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	4413      	add	r3, r2
 800d908:	2200      	movs	r2, #0
 800d90a:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
 800d90e:	3301      	adds	r3, #1
 800d910:	73fb      	strb	r3, [r7, #15]
 800d912:	e7f3      	b.n	800d8fc <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800d914:	2300      	movs	r3, #0
 800d916:	73fb      	strb	r3, [r7, #15]
 800d918:	7bfb      	ldrb	r3, [r7, #15]
 800d91a:	2b02      	cmp	r3, #2
 800d91c:	d81b      	bhi.n	800d956 <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800d91e:	2300      	movs	r3, #0
 800d920:	73bb      	strb	r3, [r7, #14]
 800d922:	7bbb      	ldrb	r3, [r7, #14]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d812      	bhi.n	800d94e <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 800d928:	7bfa      	ldrb	r2, [r7, #15]
 800d92a:	7bbb      	ldrb	r3, [r7, #14]
 800d92c:	6879      	ldr	r1, [r7, #4]
 800d92e:	0098      	lsls	r0, r3, #2
 800d930:	4613      	mov	r3, r2
 800d932:	00db      	lsls	r3, r3, #3
 800d934:	4413      	add	r3, r2
 800d936:	4403      	add	r3, r0
 800d938:	440b      	add	r3, r1
 800d93a:	f103 0220 	add.w	r2, r3, #32
 800d93e:	7993      	ldrb	r3, [r2, #6]
 800d940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d944:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800d946:	7bbb      	ldrb	r3, [r7, #14]
 800d948:	3301      	adds	r3, #1
 800d94a:	73bb      	strb	r3, [r7, #14]
 800d94c:	e7e9      	b.n	800d922 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800d94e:	7bfb      	ldrb	r3, [r7, #15]
 800d950:	3301      	adds	r3, #1
 800d952:	73fb      	strb	r3, [r7, #15]
 800d954:	e7e0      	b.n	800d918 <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	7a13      	ldrb	r3, [r2, #8]
 800d95a:	2108      	movs	r1, #8
 800d95c:	f361 0303 	bfi	r3, r1, #0, #4
 800d960:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d968:	2108      	movs	r1, #8
 800d96a:	f361 0303 	bfi	r3, r1, #0, #4
 800d96e:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800d978:	f36f 0303 	bfc	r3, #0, #4
 800d97c:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 800d9d8:	bf00      	nop
 800d9da:	3714      	adds	r7, #20
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	2180      	movs	r1, #128	; 0x80
 800d9ea:	4803      	ldr	r0, [pc, #12]	; (800d9f8 <_ZN2P95IsSetEv+0x14>)
 800d9ec:	f7f4 fbc6 	bl	800217c <HAL_GPIO_ReadPin>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	40020800 	.word	0x40020800

0800d9fc <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f001 f9f3 	bl	800edf0 <_ZN8MAX3421eI3P102P9EC1Ev>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4618      	mov	r0, r3
 800da0e:	f001 fa0b 	bl	800ee28 <_ZN15AddressPoolImplILh16EEC1Ev>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 800da1a:	4b05      	ldr	r3, [pc, #20]	; (800da30 <_ZN3USBC1Ev+0x34>)
 800da1c:	2211      	movs	r2, #17
 800da1e:	701a      	strb	r2, [r3, #0]
        init();
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 f807 	bl	800da34 <_ZN3USB4initEv>
}
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	4618      	mov	r0, r3
 800da2a:	3708      	adds	r7, #8
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	2000066d 	.word	0x2000066d

0800da34 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	460b      	mov	r3, r1
 800da5a:	70fb      	strb	r3, [r7, #3]
 800da5c:	4613      	mov	r3, r2
 800da5e:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	78fa      	ldrb	r2, [r7, #3]
 800da64:	4611      	mov	r1, r2
 800da66:	4618      	mov	r0, r3
 800da68:	f001 fa18 	bl	800ee9c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800da6c:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d003      	beq.n	800da7c <_ZN3USB14getEpInfoEntryEhh+0x2c>
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d101      	bne.n	800da80 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 800da7c:	2300      	movs	r3, #0
 800da7e:	e018      	b.n	800dab2 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 800da86:	2300      	movs	r3, #0
 800da88:	74fb      	strb	r3, [r7, #19]
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	795b      	ldrb	r3, [r3, #5]
 800da8e:	7cfa      	ldrb	r2, [r7, #19]
 800da90:	429a      	cmp	r2, r3
 800da92:	d20d      	bcs.n	800dab0 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	78ba      	ldrb	r2, [r7, #2]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d101      	bne.n	800daa2 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	e007      	b.n	800dab2 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	3303      	adds	r3, #3
 800daa6:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 800daa8:	7cfb      	ldrb	r3, [r7, #19]
 800daaa:	3301      	adds	r3, #1
 800daac:	74fb      	strb	r3, [r7, #19]
 800daae:	e7ec      	b.n	800da8a <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3718      	adds	r7, #24
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 800daba:	b580      	push	{r7, lr}
 800dabc:	b086      	sub	sp, #24
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	60f8      	str	r0, [r7, #12]
 800dac2:	607b      	str	r3, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	72fb      	strb	r3, [r7, #11]
 800dac8:	4613      	mov	r3, r2
 800daca:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d101      	bne.n	800dad6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 800dad2:	23d8      	movs	r3, #216	; 0xd8
 800dad4:	e015      	b.n	800db02 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	7afa      	ldrb	r2, [r7, #11]
 800dada:	4611      	mov	r1, r2
 800dadc:	4618      	mov	r0, r3
 800dade:	f001 f9dd 	bl	800ee9c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800dae2:	6178      	str	r0, [r7, #20]

        if(!p)
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d101      	bne.n	800daee <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800daea:	23d6      	movs	r3, #214	; 0xd6
 800daec:	e009      	b.n	800db02 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	7afa      	ldrb	r2, [r7, #11]
 800daf2:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	7aba      	ldrb	r2, [r7, #10]
 800dafe:	715a      	strb	r2, [r3, #5]

        return 0;
 800db00:	2300      	movs	r3, #0
}
 800db02:	4618      	mov	r0, r3
 800db04:	3718      	adds	r7, #24
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}

0800db0a <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b086      	sub	sp, #24
 800db0e:	af00      	add	r7, sp, #0
 800db10:	60f8      	str	r0, [r7, #12]
 800db12:	607b      	str	r3, [r7, #4]
 800db14:	460b      	mov	r3, r1
 800db16:	72fb      	strb	r3, [r7, #11]
 800db18:	4613      	mov	r3, r2
 800db1a:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	7afa      	ldrb	r2, [r7, #11]
 800db20:	4611      	mov	r1, r2
 800db22:	4618      	mov	r0, r3
 800db24:	f001 f9ba 	bl	800ee9c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800db28:	6178      	str	r0, [r7, #20]

        if(!p)
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d101      	bne.n	800db34 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800db30:	23d6      	movs	r3, #214	; 0xd6
 800db32:	e04e      	b.n	800dbd2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d101      	bne.n	800db40 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 800db3c:	23d7      	movs	r3, #215	; 0xd7
 800db3e:	e048      	b.n	800dbd2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 800db40:	7aba      	ldrb	r2, [r7, #10]
 800db42:	7afb      	ldrb	r3, [r7, #11]
 800db44:	4619      	mov	r1, r3
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f7ff ff82 	bl	800da50 <_ZN3USB14getEpInfoEntryEhh>
 800db4c:	4602      	mov	r2, r0
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d101      	bne.n	800db5e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 800db5a:	23db      	movs	r3, #219	; 0xdb
 800db5c:	e039      	b.n	800dbd2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	789b      	ldrb	r3, [r3, #2]
 800db64:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	2b0f      	cmp	r3, #15
 800db6c:	bf28      	it	cs
 800db6e:	230f      	movcs	r3, #15
 800db70:	b2db      	uxtb	r3, r3
 800db72:	461a      	mov	r2, r3
 800db74:	2301      	movs	r3, #1
 800db76:	4093      	lsls	r3, r2
 800db78:	b29a      	uxth	r2, r3
 800db7a:	6a3b      	ldr	r3, [r7, #32]
 800db7c:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 800db7e:	6a3b      	ldr	r3, [r7, #32]
 800db80:	881b      	ldrh	r3, [r3, #0]
 800db82:	3b01      	subs	r3, #1
 800db84:	b29a      	uxth	r2, r3
 800db86:	6a3b      	ldr	r3, [r7, #32]
 800db88:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 800db8a:	7afb      	ldrb	r3, [r7, #11]
 800db8c:	461a      	mov	r2, r3
 800db8e:	21e0      	movs	r1, #224	; 0xe0
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f7f3 fd11 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 800db96:	21d8      	movs	r1, #216	; 0xd8
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	f7f3 fd5f 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800db9e:	4603      	mov	r3, r0
 800dba0:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	799b      	ldrb	r3, [r3, #6]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d009      	beq.n	800dbbe <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 800dbb0:	7cfb      	ldrb	r3, [r7, #19]
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	f043 0302 	orr.w	r3, r3, #2
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	e003      	b.n	800dbc6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 800dbbe:	7cfb      	ldrb	r3, [r7, #19]
 800dbc0:	f023 0306 	bic.w	r3, r3, #6
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	21d8      	movs	r1, #216	; 0xd8
 800dbca:	68f8      	ldr	r0, [r7, #12]
 800dbcc:	f7f3 fcf4 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3718      	adds	r7, #24
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 800dbda:	b590      	push	{r4, r7, lr}
 800dbdc:	b08b      	sub	sp, #44	; 0x2c
 800dbde:	af02      	add	r7, sp, #8
 800dbe0:	6078      	str	r0, [r7, #4]
 800dbe2:	4608      	mov	r0, r1
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	4603      	mov	r3, r0
 800dbea:	70fb      	strb	r3, [r7, #3]
 800dbec:	460b      	mov	r3, r1
 800dbee:	70bb      	strb	r3, [r7, #2]
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800dc00:	f107 000c 	add.w	r0, r7, #12
 800dc04:	78ba      	ldrb	r2, [r7, #2]
 800dc06:	78f9      	ldrb	r1, [r7, #3]
 800dc08:	f107 030a 	add.w	r3, r7, #10
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	4603      	mov	r3, r0
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f7ff ff7a 	bl	800db0a <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800dc16:	4603      	mov	r3, r0
 800dc18:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 800dc1a:	7ffb      	ldrb	r3, [r7, #31]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 800dc20:	7ffb      	ldrb	r3, [r7, #31]
 800dc22:	e0ae      	b.n	800dd82 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 800dc24:	787b      	ldrb	r3, [r7, #1]
 800dc26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	bfcc      	ite	gt
 800dc2e:	2301      	movgt	r3, #1
 800dc30:	2300      	movle	r3, #0
 800dc32:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 800dc34:	787b      	ldrb	r3, [r7, #1]
 800dc36:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 800dc38:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800dc3c:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 800dc3e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800dc42:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 800dc44:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800dc48:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 800dc4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dc4c:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 800dc4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dc52:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 800dc54:	f107 0310 	add.w	r3, r7, #16
 800dc58:	2208      	movs	r2, #8
 800dc5a:	2120      	movs	r1, #32
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f001 f943 	bl	800eee8 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 800dc62:	897b      	ldrh	r3, [r7, #10]
 800dc64:	78ba      	ldrb	r2, [r7, #2]
 800dc66:	2110      	movs	r1, #16
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 fb01 	bl	800e270 <_ZN3USB11dispatchPktEhht>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 800dc72:	7ffb      	ldrb	r3, [r7, #31]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d001      	beq.n	800dc7c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 800dc78:	7ffb      	ldrb	r3, [r7, #31]
 800dc7a:	e082      	b.n	800dd82 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 800dc7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d072      	beq.n	800dd68 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 800dc82:	7efb      	ldrb	r3, [r7, #27]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d057      	beq.n	800dd38 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 800dc88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dc8c:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	7893      	ldrb	r3, [r2, #2]
 800dc92:	f043 0302 	orr.w	r3, r3, #2
 800dc96:	7093      	strb	r3, [r2, #2]

                        while(left) {
 800dc98:	8bbb      	ldrh	r3, [r7, #28]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d05f      	beq.n	800dd5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 800dc9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dca2:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 800dca4:	68f9      	ldr	r1, [r7, #12]
 800dca6:	897a      	ldrh	r2, [r7, #10]
 800dca8:	f107 0008 	add.w	r0, r7, #8
 800dcac:	2300      	movs	r3, #0
 800dcae:	9301      	str	r3, [sp, #4]
 800dcb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcb2:	9300      	str	r3, [sp, #0]
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 f8a6 	bl	800de08 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 800dcc0:	7ffb      	ldrb	r3, [r7, #31]
 800dcc2:	2b06      	cmp	r3, #6
 800dcc4:	d114      	bne.n	800dcf0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800dcc6:	21f8      	movs	r1, #248	; 0xf8
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f7f3 fcc7 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	f003 0320 	and.w	r3, r3, #32
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	bf0c      	ite	eq
 800dcd8:	2301      	moveq	r3, #1
 800dcda:	2300      	movne	r3, #0
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	f003 0301 	and.w	r3, r3, #1
 800dce4:	b2d9      	uxtb	r1, r3
 800dce6:	7893      	ldrb	r3, [r2, #2]
 800dce8:	f361 0341 	bfi	r3, r1, #1, #1
 800dcec:	7093      	strb	r3, [r2, #2]
 800dcee:	e7d3      	b.n	800dc98 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 800dcf0:	7ffb      	ldrb	r3, [r7, #31]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d001      	beq.n	800dcfa <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 800dcf6:	7ffb      	ldrb	r3, [r7, #31]
 800dcf8:	e043      	b.n	800dd82 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 800dcfa:	7ffb      	ldrb	r3, [r7, #31]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d111      	bne.n	800dd24 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 800dd00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d00e      	beq.n	800dd24 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 800dd06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	681c      	ldr	r4, [r3, #0]
 800dd0c:	8939      	ldrh	r1, [r7, #8]
 800dd0e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800dd12:	8bbb      	ldrh	r3, [r7, #28]
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	833b      	strh	r3, [r7, #24]
 800dd1a:	f107 0318 	add.w	r3, r7, #24
 800dd1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd20:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dd22:	47a0      	blx	r4

                                left -= read;
 800dd24:	893b      	ldrh	r3, [r7, #8]
 800dd26:	8bba      	ldrh	r2, [r7, #28]
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 800dd2c:	893b      	ldrh	r3, [r7, #8]
 800dd2e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d812      	bhi.n	800dd5c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 800dd36:	e7af      	b.n	800dc98 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	7893      	ldrb	r3, [r2, #2]
 800dd3c:	f043 0301 	orr.w	r3, r3, #1
 800dd40:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 800dd42:	68f9      	ldr	r1, [r7, #12]
 800dd44:	897a      	ldrh	r2, [r7, #10]
 800dd46:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 800dd4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd4c:	9300      	str	r3, [sp, #0]
 800dd4e:	4603      	mov	r3, r0
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f000 f957 	bl	800e004 <_ZN3USB11OutTransferEP6EpInfottPh>
 800dd56:	4603      	mov	r3, r0
 800dd58:	77fb      	strb	r3, [r7, #31]
 800dd5a:	e000      	b.n	800dd5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 800dd5c:	bf00      	nop
                }
                if(rcode) //return error
 800dd5e:	7ffb      	ldrb	r3, [r7, #31]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d001      	beq.n	800dd68 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 800dd64:	7ffb      	ldrb	r3, [r7, #31]
 800dd66:	e00c      	b.n	800dd82 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 800dd68:	7efb      	ldrb	r3, [r7, #27]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 800dd6e:	21a0      	movs	r1, #160	; 0xa0
 800dd70:	e000      	b.n	800dd74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 800dd72:	2180      	movs	r1, #128	; 0x80
 800dd74:	897b      	ldrh	r3, [r7, #10]
 800dd76:	78ba      	ldrb	r2, [r7, #2]
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 fa79 	bl	800e270 <_ZN3USB11dispatchPktEhht>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	bf00      	nop
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3724      	adds	r7, #36	; 0x24
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd90      	pop	{r4, r7, pc}

0800dd8a <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b08a      	sub	sp, #40	; 0x28
 800dd8e:	af02      	add	r7, sp, #8
 800dd90:	60f8      	str	r0, [r7, #12]
 800dd92:	607b      	str	r3, [r7, #4]
 800dd94:	460b      	mov	r3, r1
 800dd96:	72fb      	strb	r3, [r7, #11]
 800dd98:	4613      	mov	r3, r2
 800dd9a:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 800dda0:	2300      	movs	r3, #0
 800dda2:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800dda4:	f107 0018 	add.w	r0, r7, #24
 800dda8:	7aba      	ldrb	r2, [r7, #10]
 800ddaa:	7af9      	ldrb	r1, [r7, #11]
 800ddac:	f107 0316 	add.w	r3, r7, #22
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f7ff fea8 	bl	800db0a <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 800ddbe:	7ffb      	ldrb	r3, [r7, #31]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d010      	beq.n	800dde6 <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 800ddc4:	7ffb      	ldrb	r3, [r7, #31]
 800ddc6:	2181      	movs	r1, #129	; 0x81
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f001 f8bb 	bl	800ef44 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 800ddce:	7afb      	ldrb	r3, [r7, #11]
 800ddd0:	2181      	movs	r1, #129	; 0x81
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f001 f8b6 	bl	800ef44 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 800ddd8:	7abb      	ldrb	r3, [r7, #10]
 800ddda:	2181      	movs	r1, #129	; 0x81
 800dddc:	4618      	mov	r0, r3
 800ddde:	f001 f8b1 	bl	800ef44 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 800dde2:	7ffb      	ldrb	r3, [r7, #31]
 800dde4:	e00c      	b.n	800de00 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 800dde6:	69b9      	ldr	r1, [r7, #24]
 800dde8:	8afa      	ldrh	r2, [r7, #22]
 800ddea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ddee:	9301      	str	r3, [sp, #4]
 800ddf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	68f8      	ldr	r0, [r7, #12]
 800ddf8:	f000 f806 	bl	800de08 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	bf00      	nop
}
 800de00:	4618      	mov	r0, r3
 800de02:	3720      	adds	r7, #32
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800de08:	b580      	push	{r7, lr}
 800de0a:	b086      	sub	sp, #24
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	603b      	str	r3, [r7, #0]
 800de14:	4613      	mov	r3, r2
 800de16:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 800de18:	2300      	movs	r3, #0
 800de1a:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	881b      	ldrh	r3, [r3, #0]
 800de20:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	785b      	ldrb	r3, [r3, #1]
 800de26:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	2200      	movs	r2, #0
 800de2c:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	789b      	ldrb	r3, [r3, #2]
 800de32:	f003 0302 	and.w	r3, r3, #2
 800de36:	b2db      	uxtb	r3, r3
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d001      	beq.n	800de40 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 800de3c:	2320      	movs	r3, #32
 800de3e:	e000      	b.n	800de42 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 800de40:	2310      	movs	r3, #16
 800de42:	461a      	mov	r2, r3
 800de44:	21e8      	movs	r1, #232	; 0xe8
 800de46:	68f8      	ldr	r0, [r7, #12]
 800de48:	f7f3 fbb6 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	781a      	ldrb	r2, [r3, #0]
 800de50:	88fb      	ldrh	r3, [r7, #6]
 800de52:	2100      	movs	r1, #0
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f000 fa0b 	bl	800e270 <_ZN3USB11dispatchPktEhht>
 800de5a:	4603      	mov	r3, r0
 800de5c:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 800de5e:	7dfb      	ldrb	r3, [r7, #23]
 800de60:	2b06      	cmp	r3, #6
 800de62:	d123      	bne.n	800deac <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 800de64:	21f8      	movs	r1, #248	; 0xf8
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f7f3 fbf8 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800de6c:	4603      	mov	r3, r0
 800de6e:	f003 0310 	and.w	r3, r3, #16
 800de72:	2b00      	cmp	r3, #0
 800de74:	bf0c      	ite	eq
 800de76:	2301      	moveq	r3, #1
 800de78:	2300      	movne	r3, #0
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	f003 0301 	and.w	r3, r3, #1
 800de80:	b2d9      	uxtb	r1, r3
 800de82:	68ba      	ldr	r2, [r7, #8]
 800de84:	7893      	ldrb	r3, [r2, #2]
 800de86:	f361 0341 	bfi	r3, r1, #1, #1
 800de8a:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	789b      	ldrb	r3, [r3, #2]
 800de90:	f003 0302 	and.w	r3, r3, #2
 800de94:	b2db      	uxtb	r3, r3
 800de96:	2b00      	cmp	r3, #0
 800de98:	d001      	beq.n	800de9e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 800de9a:	2320      	movs	r3, #32
 800de9c:	e000      	b.n	800dea0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 800de9e:	2310      	movs	r3, #16
 800dea0:	461a      	mov	r2, r3
 800dea2:	21e8      	movs	r1, #232	; 0xe8
 800dea4:	68f8      	ldr	r0, [r7, #12]
 800dea6:	f7f3 fb87 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 800deaa:	e072      	b.n	800df92 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18a>
                }
                if(rcode) {
 800deac:	7dfb      	ldrb	r3, [r7, #23]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d170      	bne.n	800df94 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18c>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 800deb2:	21c8      	movs	r1, #200	; 0xc8
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	f7f3 fbd1 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800deba:	4603      	mov	r3, r0
 800debc:	f003 0304 	and.w	r3, r3, #4
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	bf0c      	ite	eq
 800dec4:	2301      	moveq	r3, #1
 800dec6:	2300      	movne	r3, #0
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	2b00      	cmp	r3, #0
 800decc:	d002      	beq.n	800ded4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 800dece:	23f0      	movs	r3, #240	; 0xf0
 800ded0:	75fb      	strb	r3, [r7, #23]
                        break;
 800ded2:	e060      	b.n	800df96 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 800ded4:	2130      	movs	r1, #48	; 0x30
 800ded6:	68f8      	ldr	r0, [r7, #12]
 800ded8:	f7f3 fbc0 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800dedc:	4603      	mov	r3, r0
 800dede:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 800dee0:	7dba      	ldrb	r2, [r7, #22]
 800dee2:	8a7b      	ldrh	r3, [r7, #18]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	dd01      	ble.n	800deec <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 800dee8:	8a7b      	ldrh	r3, [r7, #18]
 800deea:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800def2:	b29b      	uxth	r3, r3
 800def4:	8a7a      	ldrh	r2, [r7, #18]
 800def6:	1ad3      	subs	r3, r2, r3
 800def8:	b29b      	uxth	r3, r3
 800defa:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 800defc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800df00:	2b00      	cmp	r3, #0
 800df02:	da01      	bge.n	800df08 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 800df04:	2300      	movs	r3, #0
 800df06:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 800df08:	7dba      	ldrb	r2, [r7, #22]
 800df0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800df0e:	4293      	cmp	r3, r2
 800df10:	bfa8      	it	ge
 800df12:	4613      	movge	r3, r2
 800df14:	b2da      	uxtb	r2, r3
 800df16:	6a3b      	ldr	r3, [r7, #32]
 800df18:	2108      	movs	r1, #8
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	f001 f81e 	bl	800ef5c <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 800df20:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 800df22:	2204      	movs	r2, #4
 800df24:	21c8      	movs	r1, #200	; 0xc8
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	f7f3 fb46 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	881a      	ldrh	r2, [r3, #0]
 800df30:	7dbb      	ldrb	r3, [r7, #22]
 800df32:	b29b      	uxth	r3, r3
 800df34:	4413      	add	r3, r2
 800df36:	b29a      	uxth	r2, r3
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 800df3c:	7dba      	ldrb	r2, [r7, #22]
 800df3e:	7c7b      	ldrb	r3, [r7, #17]
 800df40:	429a      	cmp	r2, r3
 800df42:	d304      	bcc.n	800df4e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	881b      	ldrh	r3, [r3, #0]
 800df48:	8a7a      	ldrh	r2, [r7, #18]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d813      	bhi.n	800df76 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 800df4e:	21f8      	movs	r1, #248	; 0xf8
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	f7f3 fb83 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800df56:	4603      	mov	r3, r0
 800df58:	f003 0310 	and.w	r3, r3, #16
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d001      	beq.n	800df64 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 800df60:	2101      	movs	r1, #1
 800df62:	e000      	b.n	800df66 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 800df64:	2100      	movs	r1, #0
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	7893      	ldrb	r3, [r2, #2]
 800df6a:	f361 0341 	bfi	r3, r1, #1, #1
 800df6e:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 800df70:	2300      	movs	r3, #0
 800df72:	75fb      	strb	r3, [r7, #23]
                        break;
 800df74:	e00f      	b.n	800df96 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                } else if(bInterval > 0)
 800df76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f43f af66 	beq.w	800de4c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 800df80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800df88:	fb02 f303 	mul.w	r3, r2, r3
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7f3 fe0f 	bl	8001bb0 <HAL_Delay>
        } //while( 1 )
 800df92:	e75b      	b.n	800de4c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 800df94:	bf00      	nop
        return ( rcode);
 800df96:	7dfb      	ldrb	r3, [r7, #23]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3718      	adds	r7, #24
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b088      	sub	sp, #32
 800dfa4:	af02      	add	r7, sp, #8
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	4608      	mov	r0, r1
 800dfaa:	4611      	mov	r1, r2
 800dfac:	461a      	mov	r2, r3
 800dfae:	4603      	mov	r3, r0
 800dfb0:	70fb      	strb	r3, [r7, #3]
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	70bb      	strb	r3, [r7, #2]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800dfc2:	f107 0010 	add.w	r0, r7, #16
 800dfc6:	78ba      	ldrb	r2, [r7, #2]
 800dfc8:	78f9      	ldrb	r1, [r7, #3]
 800dfca:	f107 030e 	add.w	r3, r7, #14
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7ff fd99 	bl	800db0a <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 800dfdc:	7dfb      	ldrb	r3, [r7, #23]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 800dfe2:	7dfb      	ldrb	r3, [r7, #23]
 800dfe4:	e00a      	b.n	800dffc <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 800dfe6:	6939      	ldr	r1, [r7, #16]
 800dfe8:	89fa      	ldrh	r2, [r7, #14]
 800dfea:	8838      	ldrh	r0, [r7, #0]
 800dfec:	6a3b      	ldr	r3, [r7, #32]
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	4603      	mov	r3, r0
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f000 f806 	bl	800e004 <_ZN3USB11OutTransferEP6EpInfottPh>
 800dff8:	4603      	mov	r3, r0
 800dffa:	bf00      	nop
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 800e004:	b580      	push	{r7, lr}
 800e006:	b08a      	sub	sp, #40	; 0x28
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	4611      	mov	r1, r2
 800e010:	461a      	mov	r2, r3
 800e012:	460b      	mov	r3, r1
 800e014:	80fb      	strh	r3, [r7, #6]
 800e016:	4613      	mov	r3, r2
 800e018:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 800e01a:	2300      	movs	r3, #0
 800e01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 800e020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e022:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 800e024:	88bb      	ldrh	r3, [r7, #4]
 800e026:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	785b      	ldrb	r3, [r3, #1]
 800e02c:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 800e02e:	7efb      	ldrb	r3, [r7, #27]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d002      	beq.n	800e03a <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 800e034:	7efb      	ldrb	r3, [r7, #27]
 800e036:	2b40      	cmp	r3, #64	; 0x40
 800e038:	d901      	bls.n	800e03e <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 800e03a:	23da      	movs	r3, #218	; 0xda
 800e03c:	e111      	b.n	800e262 <_ZN3USB11OutTransferEP6EpInfottPh+0x25e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800e03e:	f7f3 fdab 	bl	8001b98 <HAL_GetTick>
 800e042:	4603      	mov	r3, r0
 800e044:	4a89      	ldr	r2, [pc, #548]	; (800e26c <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800e046:	fba2 2303 	umull	r2, r3, r2, r3
 800e04a:	099b      	lsrs	r3, r3, #6
 800e04c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e050:	3308      	adds	r3, #8
 800e052:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	789b      	ldrb	r3, [r3, #2]
 800e058:	f003 0301 	and.w	r3, r3, #1
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d001      	beq.n	800e066 <_ZN3USB11OutTransferEP6EpInfottPh+0x62>
 800e062:	2380      	movs	r3, #128	; 0x80
 800e064:	e000      	b.n	800e068 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
 800e066:	2340      	movs	r3, #64	; 0x40
 800e068:	461a      	mov	r2, r3
 800e06a:	21e8      	movs	r1, #232	; 0xe8
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f7f3 faa3 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 800e072:	8bbb      	ldrh	r3, [r7, #28]
 800e074:	2b00      	cmp	r3, #0
 800e076:	f000 80de 	beq.w	800e236 <_ZN3USB11OutTransferEP6EpInfottPh+0x232>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 800e07a:	2300      	movs	r3, #0
 800e07c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 800e080:	2300      	movs	r3, #0
 800e082:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 800e084:	7efb      	ldrb	r3, [r7, #27]
 800e086:	b29b      	uxth	r3, r3
 800e088:	8bba      	ldrh	r2, [r7, #28]
 800e08a:	4293      	cmp	r3, r2
 800e08c:	bf28      	it	cs
 800e08e:	4613      	movcs	r3, r2
 800e090:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 800e092:	8a7b      	ldrh	r3, [r7, #18]
 800e094:	b2da      	uxtb	r2, r3
 800e096:	6a3b      	ldr	r3, [r7, #32]
 800e098:	2110      	movs	r1, #16
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	f000 ff24 	bl	800eee8 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 800e0a0:	8a7b      	ldrh	r3, [r7, #18]
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	2138      	movs	r1, #56	; 0x38
 800e0a8:	68f8      	ldr	r0, [r7, #12]
 800e0aa:	f7f3 fa85 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	f043 0320 	orr.w	r3, r3, #32
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	21f0      	movs	r1, #240	; 0xf0
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f7f3 fa7b 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800e0c2:	21c8      	movs	r1, #200	; 0xc8
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f7f3 fac9 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	b25b      	sxtb	r3, r3
 800e0ce:	43db      	mvns	r3, r3
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	09db      	lsrs	r3, r3, #7
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d000      	beq.n	800e0dc <_ZN3USB11OutTransferEP6EpInfottPh+0xd8>
 800e0da:	e7f2      	b.n	800e0c2 <_ZN3USB11OutTransferEP6EpInfottPh+0xbe>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800e0dc:	2280      	movs	r2, #128	; 0x80
 800e0de:	21c8      	movs	r1, #200	; 0xc8
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f7f3 fa69 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 800e0e6:	21f8      	movs	r1, #248	; 0xf8
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f7f3 fab7 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	f003 030f 	and.w	r3, r3, #15
 800e0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800e0f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d00c      	beq.n	800e11a <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800e100:	f7f3 fd4a 	bl	8001b98 <HAL_GetTick>
 800e104:	4603      	mov	r3, r0
 800e106:	4a59      	ldr	r2, [pc, #356]	; (800e26c <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800e108:	fba2 2303 	umull	r2, r3, r2, r3
 800e10c:	099a      	lsrs	r2, r3, #6
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	1ad3      	subs	r3, r2, r3
 800e112:	2b00      	cmp	r3, #0
 800e114:	da01      	bge.n	800e11a <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800e116:	2301      	movs	r3, #1
 800e118:	e000      	b.n	800e11c <_ZN3USB11OutTransferEP6EpInfottPh+0x118>
 800e11a:	2300      	movs	r3, #0
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f000 8081 	beq.w	800e224 <_ZN3USB11OutTransferEP6EpInfottPh+0x220>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 800e122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e126:	2b0e      	cmp	r3, #14
 800e128:	d012      	beq.n	800e150 <_ZN3USB11OutTransferEP6EpInfottPh+0x14c>
 800e12a:	2b0e      	cmp	r3, #14
 800e12c:	f300 8085 	bgt.w	800e23a <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
 800e130:	2b04      	cmp	r3, #4
 800e132:	d002      	beq.n	800e13a <_ZN3USB11OutTransferEP6EpInfottPh+0x136>
 800e134:	2b06      	cmp	r3, #6
 800e136:	d015      	beq.n	800e164 <_ZN3USB11OutTransferEP6EpInfottPh+0x160>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 800e138:	e07f      	b.n	800e23a <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
                                        nak_count++;
 800e13a:	8bfb      	ldrh	r3, [r7, #30]
 800e13c:	3301      	adds	r3, #1
 800e13e:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 800e140:	88fb      	ldrh	r3, [r7, #6]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d032      	beq.n	800e1ac <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
 800e146:	8bfa      	ldrh	r2, [r7, #30]
 800e148:	88fb      	ldrh	r3, [r7, #6]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d12e      	bne.n	800e1ac <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
                                                goto breakout;
 800e14e:	e075      	b.n	800e23c <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        retry_count++;
 800e150:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e154:	3301      	adds	r3, #1
 800e156:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 800e15a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e15e:	2b03      	cmp	r3, #3
 800e160:	d126      	bne.n	800e1b0 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ac>
                                                goto breakout;
 800e162:	e06b      	b.n	800e23c <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800e164:	21f8      	movs	r1, #248	; 0xf8
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f7f3 fa78 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e16c:	4603      	mov	r3, r0
 800e16e:	f003 0320 	and.w	r3, r3, #32
 800e172:	2b00      	cmp	r3, #0
 800e174:	bf0c      	ite	eq
 800e176:	2301      	moveq	r3, #1
 800e178:	2300      	movne	r3, #0
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	f003 0301 	and.w	r3, r3, #1
 800e180:	b2d9      	uxtb	r1, r3
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	7893      	ldrb	r3, [r2, #2]
 800e186:	f361 0300 	bfi	r3, r1, #0, #1
 800e18a:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	789b      	ldrb	r3, [r3, #2]
 800e190:	f003 0301 	and.w	r3, r3, #1
 800e194:	b2db      	uxtb	r3, r3
 800e196:	2b00      	cmp	r3, #0
 800e198:	d001      	beq.n	800e19e <_ZN3USB11OutTransferEP6EpInfottPh+0x19a>
 800e19a:	2380      	movs	r3, #128	; 0x80
 800e19c:	e000      	b.n	800e1a0 <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
 800e19e:	2340      	movs	r3, #64	; 0x40
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	21e8      	movs	r1, #232	; 0xe8
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f7f3 fa07 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 800e1aa:	e002      	b.n	800e1b2 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800e1ac:	bf00      	nop
 800e1ae:	e000      	b.n	800e1b2 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800e1b0:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	2138      	movs	r1, #56	; 0x38
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f7f3 f9fe 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 800e1bc:	6a3b      	ldr	r3, [r7, #32]
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	461a      	mov	r2, r3
 800e1c2:	2110      	movs	r1, #16
 800e1c4:	68f8      	ldr	r0, [r7, #12]
 800e1c6:	f7f3 f9f7 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 800e1ca:	8a7b      	ldrh	r3, [r7, #18]
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	2138      	movs	r1, #56	; 0x38
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	f7f3 f9f0 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	f043 0320 	orr.w	r3, r3, #32
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	21f0      	movs	r1, #240	; 0xf0
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	f7f3 f9e6 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800e1ec:	21c8      	movs	r1, #200	; 0xc8
 800e1ee:	68f8      	ldr	r0, [r7, #12]
 800e1f0:	f7f3 fa34 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	b25b      	sxtb	r3, r3
 800e1f8:	43db      	mvns	r3, r3
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	09db      	lsrs	r3, r3, #7
 800e1fe:	b2db      	uxtb	r3, r3
 800e200:	2b00      	cmp	r3, #0
 800e202:	d000      	beq.n	800e206 <_ZN3USB11OutTransferEP6EpInfottPh+0x202>
 800e204:	e7f2      	b.n	800e1ec <_ZN3USB11OutTransferEP6EpInfottPh+0x1e8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800e206:	2280      	movs	r2, #128	; 0x80
 800e208:	21c8      	movs	r1, #200	; 0xc8
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	f7f3 f9d4 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 800e210:	21f8      	movs	r1, #248	; 0xf8
 800e212:	68f8      	ldr	r0, [r7, #12]
 800e214:	f7f3 fa22 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e218:	4603      	mov	r3, r0
 800e21a:	f003 030f 	and.w	r3, r3, #15
 800e21e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800e222:	e769      	b.n	800e0f8 <_ZN3USB11OutTransferEP6EpInfottPh+0xf4>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 800e224:	8bba      	ldrh	r2, [r7, #28]
 800e226:	8a7b      	ldrh	r3, [r7, #18]
 800e228:	1ad3      	subs	r3, r2, r3
 800e22a:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 800e22c:	8a7b      	ldrh	r3, [r7, #18]
 800e22e:	6a3a      	ldr	r2, [r7, #32]
 800e230:	4413      	add	r3, r2
 800e232:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 800e234:	e71d      	b.n	800e072 <_ZN3USB11OutTransferEP6EpInfottPh+0x6e>
        }//while( bytes_left...
breakout:
 800e236:	bf00      	nop
 800e238:	e000      	b.n	800e23c <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        goto breakout;
 800e23a:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 800e23c:	21f8      	movs	r1, #248	; 0xf8
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f7f3 fa0c 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e244:	4603      	mov	r3, r0
 800e246:	f003 0320 	and.w	r3, r3, #32
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d001      	beq.n	800e252 <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>
 800e24e:	2101      	movs	r1, #1
 800e250:	e000      	b.n	800e254 <_ZN3USB11OutTransferEP6EpInfottPh+0x250>
 800e252:	2100      	movs	r1, #0
 800e254:	68ba      	ldr	r2, [r7, #8]
 800e256:	7893      	ldrb	r3, [r2, #2]
 800e258:	f361 0300 	bfi	r3, r1, #0, #1
 800e25c:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 800e25e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e262:	4618      	mov	r0, r3
 800e264:	3728      	adds	r7, #40	; 0x28
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	10624dd3 	.word	0x10624dd3

0800e270 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 800e270:	b580      	push	{r7, lr}
 800e272:	b086      	sub	sp, #24
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	4608      	mov	r0, r1
 800e27a:	4611      	mov	r1, r2
 800e27c:	461a      	mov	r2, r3
 800e27e:	4603      	mov	r3, r0
 800e280:	70fb      	strb	r3, [r7, #3]
 800e282:	460b      	mov	r3, r1
 800e284:	70bb      	strb	r3, [r7, #2]
 800e286:	4613      	mov	r3, r2
 800e288:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800e28a:	f7f3 fc85 	bl	8001b98 <HAL_GetTick>
 800e28e:	4603      	mov	r3, r0
 800e290:	4a38      	ldr	r2, [pc, #224]	; (800e374 <_ZN3USB11dispatchPktEhht+0x104>)
 800e292:	fba2 2303 	umull	r2, r3, r2, r3
 800e296:	099b      	lsrs	r3, r3, #6
 800e298:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e29c:	3308      	adds	r3, #8
 800e29e:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800e2ac:	f7f3 fc74 	bl	8001b98 <HAL_GetTick>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	4a30      	ldr	r2, [pc, #192]	; (800e374 <_ZN3USB11dispatchPktEhht+0x104>)
 800e2b4:	fba2 2303 	umull	r2, r3, r2, r3
 800e2b8:	099a      	lsrs	r2, r3, #6
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	1ad3      	subs	r3, r2, r3
 800e2be:	0fdb      	lsrs	r3, r3, #31
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d050      	beq.n	800e368 <_ZN3USB11dispatchPktEhht+0xf8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 800e2c6:	78fa      	ldrb	r2, [r7, #3]
 800e2c8:	78bb      	ldrb	r3, [r7, #2]
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	21f0      	movs	r1, #240	; 0xf0
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f7f3 f970 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 800e2d8:	23ff      	movs	r3, #255	; 0xff
 800e2da:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 800e2dc:	f7f3 fc5c 	bl	8001b98 <HAL_GetTick>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	4a24      	ldr	r2, [pc, #144]	; (800e374 <_ZN3USB11dispatchPktEhht+0x104>)
 800e2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800e2e8:	099a      	lsrs	r2, r3, #6
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	1ad3      	subs	r3, r2, r3
 800e2ee:	0fdb      	lsrs	r3, r3, #31
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d010      	beq.n	800e318 <_ZN3USB11dispatchPktEhht+0xa8>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 800e2f6:	21c8      	movs	r1, #200	; 0xc8
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f7f3 f9af 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e2fe:	4603      	mov	r3, r0
 800e300:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 800e302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e306:	2b00      	cmp	r3, #0
 800e308:	dae8      	bge.n	800e2dc <_ZN3USB11dispatchPktEhht+0x6c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 800e30a:	2280      	movs	r2, #128	; 0x80
 800e30c:	21c8      	movs	r1, #200	; 0xc8
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f7f3 f952 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 800e314:	2300      	movs	r3, #0
 800e316:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 800e318:	21f8      	movs	r1, #248	; 0xf8
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7f3 f99e 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e320:	4603      	mov	r3, r0
 800e322:	f003 030f 	and.w	r3, r3, #15
 800e326:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 800e328:	7dfb      	ldrb	r3, [r7, #23]
 800e32a:	2b04      	cmp	r3, #4
 800e32c:	d002      	beq.n	800e334 <_ZN3USB11dispatchPktEhht+0xc4>
 800e32e:	2b0e      	cmp	r3, #14
 800e330:	d00c      	beq.n	800e34c <_ZN3USB11dispatchPktEhht+0xdc>
 800e332:	e013      	b.n	800e35c <_ZN3USB11dispatchPktEhht+0xec>
                        case hrNAK:
                                nak_count++;
 800e334:	8abb      	ldrh	r3, [r7, #20]
 800e336:	3301      	adds	r3, #1
 800e338:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 800e33a:	883b      	ldrh	r3, [r7, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d00f      	beq.n	800e360 <_ZN3USB11dispatchPktEhht+0xf0>
 800e340:	8aba      	ldrh	r2, [r7, #20]
 800e342:	883b      	ldrh	r3, [r7, #0]
 800e344:	429a      	cmp	r2, r3
 800e346:	d10b      	bne.n	800e360 <_ZN3USB11dispatchPktEhht+0xf0>
                                        return (rcode);
 800e348:	7dfb      	ldrb	r3, [r7, #23]
 800e34a:	e00e      	b.n	800e36a <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 800e34c:	7dbb      	ldrb	r3, [r7, #22]
 800e34e:	3301      	adds	r3, #1
 800e350:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 800e352:	7dbb      	ldrb	r3, [r7, #22]
 800e354:	2b03      	cmp	r3, #3
 800e356:	d105      	bne.n	800e364 <_ZN3USB11dispatchPktEhht+0xf4>
                                        return (rcode);
 800e358:	7dfb      	ldrb	r3, [r7, #23]
 800e35a:	e006      	b.n	800e36a <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        default:
                                return (rcode);
 800e35c:	7dfb      	ldrb	r3, [r7, #23]
 800e35e:	e004      	b.n	800e36a <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
 800e360:	bf00      	nop
 800e362:	e7a3      	b.n	800e2ac <_ZN3USB11dispatchPktEhht+0x3c>
                                break;
 800e364:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800e366:	e7a1      	b.n	800e2ac <_ZN3USB11dispatchPktEhht+0x3c>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 800e368:	7dfb      	ldrb	r3, [r7, #23]
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3718      	adds	r7, #24
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	10624dd3 	.word	0x10624dd3

0800e378 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 800e380:	2300      	movs	r3, #0
 800e382:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f000 fe17 	bl	800efb8 <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fe2c 	bl	800efe8 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 800e390:	4603      	mov	r3, r0
 800e392:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 800e394:	7b3b      	ldrb	r3, [r7, #12]
 800e396:	2b03      	cmp	r3, #3
 800e398:	d832      	bhi.n	800e400 <_ZN3USB4TaskEv+0x88>
 800e39a:	a201      	add	r2, pc, #4	; (adr r2, 800e3a0 <_ZN3USB4TaskEv+0x28>)
 800e39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a0:	0800e3bd 	.word	0x0800e3bd
 800e3a4:	0800e3b1 	.word	0x0800e3b1
 800e3a8:	0800e3d9 	.word	0x0800e3d9
 800e3ac:	0800e3d5 	.word	0x0800e3d5
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 800e3b0:	4bc7      	ldr	r3, [pc, #796]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e3b2:	2213      	movs	r2, #19
 800e3b4:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	73fb      	strb	r3, [r7, #15]
                        break;
 800e3ba:	e021      	b.n	800e400 <_ZN3USB4TaskEv+0x88>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 800e3bc:	4bc4      	ldr	r3, [pc, #784]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3c4:	2b10      	cmp	r3, #16
 800e3c6:	d002      	beq.n	800e3ce <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 800e3c8:	4bc1      	ldr	r3, [pc, #772]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e3ca:	2211      	movs	r2, #17
 800e3cc:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	73fb      	strb	r3, [r7, #15]
                        break;
 800e3d2:	e015      	b.n	800e400 <_ZN3USB4TaskEv+0x88>
                case LSHOST:

                        lowspeed = true;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 800e3d8:	4bbd      	ldr	r3, [pc, #756]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3e0:	2b10      	cmp	r3, #16
 800e3e2:	d10c      	bne.n	800e3fe <_ZN3USB4TaskEv+0x86>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 800e3e4:	f7f3 fbd8 	bl	8001b98 <HAL_GetTick>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	4aba      	ldr	r2, [pc, #744]	; (800e6d4 <_ZN3USB4TaskEv+0x35c>)
 800e3ec:	fba2 2303 	umull	r2, r3, r2, r3
 800e3f0:	099b      	lsrs	r3, r3, #6
 800e3f2:	33c8      	adds	r3, #200	; 0xc8
 800e3f4:	4ab8      	ldr	r2, [pc, #736]	; (800e6d8 <_ZN3USB4TaskEv+0x360>)
 800e3f6:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 800e3f8:	4bb5      	ldr	r3, [pc, #724]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e3fa:	2220      	movs	r2, #32
 800e3fc:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 800e3fe:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e400:	2300      	movs	r3, #0
 800e402:	73bb      	strb	r3, [r7, #14]
 800e404:	7bbb      	ldrb	r3, [r7, #14]
 800e406:	2b0f      	cmp	r3, #15
 800e408:	d81b      	bhi.n	800e442 <_ZN3USB4TaskEv+0xca>
                if(devConfig[i])
 800e40a:	7bba      	ldrb	r2, [r7, #14]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	321e      	adds	r2, #30
 800e410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d010      	beq.n	800e43a <_ZN3USB4TaskEv+0xc2>
                        rcode = devConfig[i]->Poll();
 800e418:	7bba      	ldrb	r2, [r7, #14]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	321e      	adds	r2, #30
 800e41e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e422:	7bba      	ldrb	r2, [r7, #14]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	321e      	adds	r2, #30
 800e428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	330c      	adds	r3, #12
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4608      	mov	r0, r1
 800e434:	4798      	blx	r3
 800e436:	4603      	mov	r3, r0
 800e438:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e43a:	7bbb      	ldrb	r3, [r7, #14]
 800e43c:	3301      	adds	r3, #1
 800e43e:	73bb      	strb	r3, [r7, #14]
 800e440:	e7e0      	b.n	800e404 <_ZN3USB4TaskEv+0x8c>

        switch(usb_task_state) {
 800e442:	4ba3      	ldr	r3, [pc, #652]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	2ba0      	cmp	r3, #160	; 0xa0
 800e448:	f000 812f 	beq.w	800e6aa <_ZN3USB4TaskEv+0x332>
 800e44c:	2ba0      	cmp	r3, #160	; 0xa0
 800e44e:	f300 813b 	bgt.w	800e6c8 <_ZN3USB4TaskEv+0x350>
 800e452:	2b90      	cmp	r3, #144	; 0x90
 800e454:	f000 812b 	beq.w	800e6ae <_ZN3USB4TaskEv+0x336>
 800e458:	2b90      	cmp	r3, #144	; 0x90
 800e45a:	f300 8135 	bgt.w	800e6c8 <_ZN3USB4TaskEv+0x350>
 800e45e:	2b80      	cmp	r3, #128	; 0x80
 800e460:	f000 810a 	beq.w	800e678 <_ZN3USB4TaskEv+0x300>
 800e464:	2b80      	cmp	r3, #128	; 0x80
 800e466:	f300 812f 	bgt.w	800e6c8 <_ZN3USB4TaskEv+0x350>
 800e46a:	2b51      	cmp	r3, #81	; 0x51
 800e46c:	f000 80f2 	beq.w	800e654 <_ZN3USB4TaskEv+0x2dc>
 800e470:	2b51      	cmp	r3, #81	; 0x51
 800e472:	f300 8129 	bgt.w	800e6c8 <_ZN3USB4TaskEv+0x350>
 800e476:	2b40      	cmp	r3, #64	; 0x40
 800e478:	dc6a      	bgt.n	800e550 <_ZN3USB4TaskEv+0x1d8>
 800e47a:	2b11      	cmp	r3, #17
 800e47c:	f2c0 8124 	blt.w	800e6c8 <_ZN3USB4TaskEv+0x350>
 800e480:	3b11      	subs	r3, #17
 800e482:	2b2f      	cmp	r3, #47	; 0x2f
 800e484:	f200 8120 	bhi.w	800e6c8 <_ZN3USB4TaskEv+0x350>
 800e488:	a201      	add	r2, pc, #4	; (adr r2, 800e490 <_ZN3USB4TaskEv+0x118>)
 800e48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e48e:	bf00      	nop
 800e490:	0800e557 	.word	0x0800e557
 800e494:	0800e6b3 	.word	0x0800e6b3
 800e498:	0800e6b3 	.word	0x0800e6b3
 800e49c:	0800e6c9 	.word	0x0800e6c9
 800e4a0:	0800e6c9 	.word	0x0800e6c9
 800e4a4:	0800e6c9 	.word	0x0800e6c9
 800e4a8:	0800e6c9 	.word	0x0800e6c9
 800e4ac:	0800e6c9 	.word	0x0800e6c9
 800e4b0:	0800e6c9 	.word	0x0800e6c9
 800e4b4:	0800e6c9 	.word	0x0800e6c9
 800e4b8:	0800e6c9 	.word	0x0800e6c9
 800e4bc:	0800e6c9 	.word	0x0800e6c9
 800e4c0:	0800e6c9 	.word	0x0800e6c9
 800e4c4:	0800e6c9 	.word	0x0800e6c9
 800e4c8:	0800e6c9 	.word	0x0800e6c9
 800e4cc:	0800e5a7 	.word	0x0800e5a7
 800e4d0:	0800e6c9 	.word	0x0800e6c9
 800e4d4:	0800e6c9 	.word	0x0800e6c9
 800e4d8:	0800e6c9 	.word	0x0800e6c9
 800e4dc:	0800e6c9 	.word	0x0800e6c9
 800e4e0:	0800e6c9 	.word	0x0800e6c9
 800e4e4:	0800e6c9 	.word	0x0800e6c9
 800e4e8:	0800e6c9 	.word	0x0800e6c9
 800e4ec:	0800e6c9 	.word	0x0800e6c9
 800e4f0:	0800e6c9 	.word	0x0800e6c9
 800e4f4:	0800e6c9 	.word	0x0800e6c9
 800e4f8:	0800e6c9 	.word	0x0800e6c9
 800e4fc:	0800e6c9 	.word	0x0800e6c9
 800e500:	0800e6c9 	.word	0x0800e6c9
 800e504:	0800e6c9 	.word	0x0800e6c9
 800e508:	0800e6c9 	.word	0x0800e6c9
 800e50c:	0800e5cb 	.word	0x0800e5cb
 800e510:	0800e6c9 	.word	0x0800e6c9
 800e514:	0800e6c9 	.word	0x0800e6c9
 800e518:	0800e6c9 	.word	0x0800e6c9
 800e51c:	0800e6c9 	.word	0x0800e6c9
 800e520:	0800e6c9 	.word	0x0800e6c9
 800e524:	0800e6c9 	.word	0x0800e6c9
 800e528:	0800e6c9 	.word	0x0800e6c9
 800e52c:	0800e6c9 	.word	0x0800e6c9
 800e530:	0800e6c9 	.word	0x0800e6c9
 800e534:	0800e6c9 	.word	0x0800e6c9
 800e538:	0800e6c9 	.word	0x0800e6c9
 800e53c:	0800e6c9 	.word	0x0800e6c9
 800e540:	0800e6c9 	.word	0x0800e6c9
 800e544:	0800e6c9 	.word	0x0800e6c9
 800e548:	0800e6c9 	.word	0x0800e6c9
 800e54c:	0800e5dd 	.word	0x0800e5dd
 800e550:	2b50      	cmp	r3, #80	; 0x50
 800e552:	d063      	beq.n	800e61c <_ZN3USB4TaskEv+0x2a4>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 800e554:	e0b8      	b.n	800e6c8 <_ZN3USB4TaskEv+0x350>
                        init();
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7ff fa6c 	bl	800da34 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e55c:	2300      	movs	r3, #0
 800e55e:	737b      	strb	r3, [r7, #13]
 800e560:	7b7b      	ldrb	r3, [r7, #13]
 800e562:	2b0f      	cmp	r3, #15
 800e564:	d81b      	bhi.n	800e59e <_ZN3USB4TaskEv+0x226>
                                if(devConfig[i])
 800e566:	7b7a      	ldrb	r2, [r7, #13]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	321e      	adds	r2, #30
 800e56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d010      	beq.n	800e596 <_ZN3USB4TaskEv+0x21e>
                                        rcode = devConfig[i]->Release();
 800e574:	7b7a      	ldrb	r2, [r7, #13]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	321e      	adds	r2, #30
 800e57a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e57e:	7b7a      	ldrb	r2, [r7, #13]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	321e      	adds	r2, #30
 800e584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	3308      	adds	r3, #8
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	4608      	mov	r0, r1
 800e590:	4798      	blx	r3
 800e592:	4603      	mov	r3, r0
 800e594:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e596:	7b7b      	ldrb	r3, [r7, #13]
 800e598:	3301      	adds	r3, #1
 800e59a:	737b      	strb	r3, [r7, #13]
 800e59c:	e7e0      	b.n	800e560 <_ZN3USB4TaskEv+0x1e8>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 800e59e:	4b4c      	ldr	r3, [pc, #304]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e5a0:	2212      	movs	r2, #18
 800e5a2:	701a      	strb	r2, [r3, #0]
                        break;
 800e5a4:	e090      	b.n	800e6c8 <_ZN3USB4TaskEv+0x350>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 800e5a6:	f7f3 faf7 	bl	8001b98 <HAL_GetTick>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	4a49      	ldr	r2, [pc, #292]	; (800e6d4 <_ZN3USB4TaskEv+0x35c>)
 800e5ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e5b2:	099a      	lsrs	r2, r3, #6
 800e5b4:	4b48      	ldr	r3, [pc, #288]	; (800e6d8 <_ZN3USB4TaskEv+0x360>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	1ad3      	subs	r3, r2, r3
 800e5ba:	43db      	mvns	r3, r3
 800e5bc:	0fdb      	lsrs	r3, r3, #31
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d078      	beq.n	800e6b6 <_ZN3USB4TaskEv+0x33e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 800e5c4:	4b42      	ldr	r3, [pc, #264]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e5c6:	2230      	movs	r2, #48	; 0x30
 800e5c8:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	21e8      	movs	r1, #232	; 0xe8
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7f2 fff2 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 800e5d4:	4b3e      	ldr	r3, [pc, #248]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e5d6:	2240      	movs	r2, #64	; 0x40
 800e5d8:	701a      	strb	r2, [r3, #0]
                        break;
 800e5da:	e075      	b.n	800e6c8 <_ZN3USB4TaskEv+0x350>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 800e5dc:	21e8      	movs	r1, #232	; 0xe8
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f7f3 f83c 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	f003 0301 	and.w	r3, r3, #1
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	bf0c      	ite	eq
 800e5ee:	2301      	moveq	r3, #1
 800e5f0:	2300      	movne	r3, #0
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d060      	beq.n	800e6ba <_ZN3USB4TaskEv+0x342>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 800e5f8:	21d8      	movs	r1, #216	; 0xd8
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f7f3 f82e 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e600:	4603      	mov	r3, r0
 800e602:	f043 0308 	orr.w	r3, r3, #8
 800e606:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 800e608:	7b3b      	ldrb	r3, [r7, #12]
 800e60a:	461a      	mov	r2, r3
 800e60c:	21d8      	movs	r1, #216	; 0xd8
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7f2 ffd2 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 800e614:	4b2e      	ldr	r3, [pc, #184]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e616:	2250      	movs	r2, #80	; 0x50
 800e618:	701a      	strb	r2, [r3, #0]
                        break;
 800e61a:	e04e      	b.n	800e6ba <_ZN3USB4TaskEv+0x342>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 800e61c:	21c8      	movs	r1, #200	; 0xc8
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7f3 f81c 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e624:	4603      	mov	r3, r0
 800e626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	bf14      	ite	ne
 800e62e:	2301      	movne	r3, #1
 800e630:	2300      	moveq	r3, #0
 800e632:	b2db      	uxtb	r3, r3
 800e634:	2b00      	cmp	r3, #0
 800e636:	d042      	beq.n	800e6be <_ZN3USB4TaskEv+0x346>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 800e638:	4b25      	ldr	r3, [pc, #148]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e63a:	2251      	movs	r2, #81	; 0x51
 800e63c:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 800e63e:	f7f3 faab 	bl	8001b98 <HAL_GetTick>
 800e642:	4603      	mov	r3, r0
 800e644:	4a23      	ldr	r2, [pc, #140]	; (800e6d4 <_ZN3USB4TaskEv+0x35c>)
 800e646:	fba2 2303 	umull	r2, r3, r2, r3
 800e64a:	099b      	lsrs	r3, r3, #6
 800e64c:	3314      	adds	r3, #20
 800e64e:	4a22      	ldr	r2, [pc, #136]	; (800e6d8 <_ZN3USB4TaskEv+0x360>)
 800e650:	6013      	str	r3, [r2, #0]
                        break;
 800e652:	e034      	b.n	800e6be <_ZN3USB4TaskEv+0x346>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 800e654:	f7f3 faa0 	bl	8001b98 <HAL_GetTick>
 800e658:	4603      	mov	r3, r0
 800e65a:	4a1e      	ldr	r2, [pc, #120]	; (800e6d4 <_ZN3USB4TaskEv+0x35c>)
 800e65c:	fba2 2303 	umull	r2, r3, r2, r3
 800e660:	099a      	lsrs	r2, r3, #6
 800e662:	4b1d      	ldr	r3, [pc, #116]	; (800e6d8 <_ZN3USB4TaskEv+0x360>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	1ad3      	subs	r3, r2, r3
 800e668:	43db      	mvns	r3, r3
 800e66a:	0fdb      	lsrs	r3, r3, #31
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d027      	beq.n	800e6c2 <_ZN3USB4TaskEv+0x34a>
 800e672:	4b17      	ldr	r3, [pc, #92]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e674:	2280      	movs	r2, #128	; 0x80
 800e676:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 800e678:	7bfb      	ldrb	r3, [r7, #15]
 800e67a:	2200      	movs	r2, #0
 800e67c:	2100      	movs	r1, #0
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f928 	bl	800e8d4 <_ZN3USB11ConfiguringEhhb>
 800e684:	4603      	mov	r3, r0
 800e686:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 800e688:	7afb      	ldrb	r3, [r7, #11]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d009      	beq.n	800e6a2 <_ZN3USB4TaskEv+0x32a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 800e68e:	7afb      	ldrb	r3, [r7, #11]
 800e690:	2bd2      	cmp	r3, #210	; 0xd2
 800e692:	d018      	beq.n	800e6c6 <_ZN3USB4TaskEv+0x34e>
                                        usb_error = rcode;
 800e694:	4a11      	ldr	r2, [pc, #68]	; (800e6dc <_ZN3USB4TaskEv+0x364>)
 800e696:	7afb      	ldrb	r3, [r7, #11]
 800e698:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 800e69a:	4b0d      	ldr	r3, [pc, #52]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e69c:	22a0      	movs	r2, #160	; 0xa0
 800e69e:	701a      	strb	r2, [r3, #0]
                        break;
 800e6a0:	e011      	b.n	800e6c6 <_ZN3USB4TaskEv+0x34e>
                                usb_task_state = USB_STATE_RUNNING;
 800e6a2:	4b0b      	ldr	r3, [pc, #44]	; (800e6d0 <_ZN3USB4TaskEv+0x358>)
 800e6a4:	2290      	movs	r2, #144	; 0x90
 800e6a6:	701a      	strb	r2, [r3, #0]
                        break;
 800e6a8:	e00d      	b.n	800e6c6 <_ZN3USB4TaskEv+0x34e>
                        break;
 800e6aa:	bf00      	nop
 800e6ac:	e00c      	b.n	800e6c8 <_ZN3USB4TaskEv+0x350>
                        break;
 800e6ae:	bf00      	nop
 800e6b0:	e00a      	b.n	800e6c8 <_ZN3USB4TaskEv+0x350>
                        break;
 800e6b2:	bf00      	nop
 800e6b4:	e008      	b.n	800e6c8 <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800e6b6:	bf00      	nop
 800e6b8:	e006      	b.n	800e6c8 <_ZN3USB4TaskEv+0x350>
                        break;
 800e6ba:	bf00      	nop
 800e6bc:	e004      	b.n	800e6c8 <_ZN3USB4TaskEv+0x350>
                        break;
 800e6be:	bf00      	nop
 800e6c0:	e002      	b.n	800e6c8 <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800e6c2:	bf00      	nop
 800e6c4:	e000      	b.n	800e6c8 <_ZN3USB4TaskEv+0x350>
                        break;
 800e6c6:	bf00      	nop
}
 800e6c8:	bf00      	nop
 800e6ca:	3710      	adds	r7, #16
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	2000066d 	.word	0x2000066d
 800e6d4:	10624dd3 	.word	0x10624dd3
 800e6d8:	20000670 	.word	0x20000670
 800e6dc:	2000066c 	.word	0x2000066c

0800e6e0 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	4608      	mov	r0, r1
 800e6ea:	4611      	mov	r1, r2
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	70fb      	strb	r3, [r7, #3]
 800e6f2:	460b      	mov	r3, r1
 800e6f4:	70bb      	strb	r3, [r7, #2]
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	617b      	str	r3, [r7, #20]
 800e6fe:	2300      	movs	r3, #0
 800e700:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2100      	movs	r1, #0
 800e706:	4618      	mov	r0, r3
 800e708:	f000 fbc8 	bl	800ee9c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800e70c:	6178      	str	r0, [r7, #20]

        if(!p0)
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d101      	bne.n	800e718 <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e714:	23d6      	movs	r3, #214	; 0xd6
 800e716:	e03a      	b.n	800e78e <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d101      	bne.n	800e724 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 800e720:	23d7      	movs	r3, #215	; 0xd7
 800e722:	e034      	b.n	800e78e <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	787a      	ldrb	r2, [r7, #1]
 800e728:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	78bb      	ldrb	r3, [r7, #2]
 800e72e:	78f9      	ldrb	r1, [r7, #3]
 800e730:	2200      	movs	r2, #0
 800e732:	f000 fc67 	bl	800f004 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 800e736:	4603      	mov	r3, r0
 800e738:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 800e73a:	7bfb      	ldrb	r3, [r7, #15]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d101      	bne.n	800e744 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800e740:	23d4      	movs	r3, #212	; 0xd4
 800e742:	e024      	b.n	800e78e <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	7bfa      	ldrb	r2, [r7, #15]
 800e748:	4611      	mov	r1, r2
 800e74a:	4618      	mov	r0, r3
 800e74c:	f000 fba6 	bl	800ee9c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800e750:	6138      	str	r0, [r7, #16]

        if(!p)
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d101      	bne.n	800e75c <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e758:	23d6      	movs	r3, #214	; 0xd6
 800e75a:	e018      	b.n	800e78e <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	787a      	ldrb	r2, [r7, #1]
 800e760:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 800e762:	7bfb      	ldrb	r3, [r7, #15]
 800e764:	2200      	movs	r2, #0
 800e766:	2100      	movs	r1, #0
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 fae9 	bl	800ed40 <_ZN3USB7setAddrEhhh>
 800e76e:	4603      	mov	r3, r0
 800e770:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 800e772:	7bbb      	ldrb	r3, [r7, #14]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d009      	beq.n	800e78c <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	7bfa      	ldrb	r2, [r7, #15]
 800e77c:	4611      	mov	r1, r2
 800e77e:	4618      	mov	r0, r3
 800e780:	f000 fcd8 	bl	800f134 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 800e784:	2300      	movs	r3, #0
 800e786:	73fb      	strb	r3, [r7, #15]
                return rcode;
 800e788:	7bbb      	ldrb	r3, [r7, #14]
 800e78a:	e000      	b.n	800e78e <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 800e78c:	2300      	movs	r3, #0
};
 800e78e:	4618      	mov	r0, r3
 800e790:	3718      	adds	r7, #24
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
	...

0800e798 <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 800e798:	b590      	push	{r4, r7, lr}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	4608      	mov	r0, r1
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	70fb      	strb	r3, [r7, #3]
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	70bb      	strb	r3, [r7, #2]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 800e7b6:	78fa      	ldrb	r2, [r7, #3]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	321e      	adds	r2, #30
 800e7bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e7c0:	78fa      	ldrb	r2, [r7, #3]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	321e      	adds	r2, #30
 800e7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	3304      	adds	r3, #4
 800e7ce:	681c      	ldr	r4, [r3, #0]
 800e7d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e7d4:	787a      	ldrb	r2, [r7, #1]
 800e7d6:	78b9      	ldrb	r1, [r7, #2]
 800e7d8:	47a0      	blx	r4
 800e7da:	4603      	mov	r3, r0
 800e7dc:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 800e7de:	7bbb      	ldrb	r3, [r7, #14]
 800e7e0:	2be0      	cmp	r3, #224	; 0xe0
 800e7e2:	d11c      	bne.n	800e81e <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 800e7e4:	78bb      	ldrb	r3, [r7, #2]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d108      	bne.n	800e7fc <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	21e8      	movs	r1, #232	; 0xe8
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7f2 fee2 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800e7f4:	4835      	ldr	r0, [pc, #212]	; (800e8cc <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800e7f6:	f7f3 f9db 	bl	8001bb0 <HAL_Delay>
 800e7fa:	e022      	b.n	800e842 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800e7fc:	78ba      	ldrb	r2, [r7, #2]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	321e      	adds	r2, #30
 800e802:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e806:	78ba      	ldrb	r2, [r7, #2]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	321e      	adds	r2, #30
 800e80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	3314      	adds	r3, #20
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	787a      	ldrb	r2, [r7, #1]
 800e818:	4611      	mov	r1, r2
 800e81a:	4798      	blx	r3
 800e81c:	e011      	b.n	800e842 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800e81e:	7bbb      	ldrb	r3, [r7, #14]
 800e820:	2b0d      	cmp	r3, #13
 800e822:	d109      	bne.n	800e838 <_ZN3USB13AttemptConfigEhhhb+0xa0>
 800e824:	7bfb      	ldrb	r3, [r7, #15]
 800e826:	2b02      	cmp	r3, #2
 800e828:	d806      	bhi.n	800e838 <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 800e82a:	4829      	ldr	r0, [pc, #164]	; (800e8d0 <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800e82c:	f7f3 f9c0 	bl	8001bb0 <HAL_Delay>
                retries++;
 800e830:	7bfb      	ldrb	r3, [r7, #15]
 800e832:	3301      	adds	r3, #1
 800e834:	73fb      	strb	r3, [r7, #15]
                goto again;
 800e836:	e7be      	b.n	800e7b6 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 800e838:	7bbb      	ldrb	r3, [r7, #14]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 800e83e:	7bbb      	ldrb	r3, [r7, #14]
 800e840:	e03f      	b.n	800e8c2 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 800e842:	78fa      	ldrb	r2, [r7, #3]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	321e      	adds	r2, #30
 800e848:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e84c:	78fa      	ldrb	r2, [r7, #3]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	321e      	adds	r2, #30
 800e852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681c      	ldr	r4, [r3, #0]
 800e85a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e85e:	787a      	ldrb	r2, [r7, #1]
 800e860:	78b9      	ldrb	r1, [r7, #2]
 800e862:	47a0      	blx	r4
 800e864:	4603      	mov	r3, r0
 800e866:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800e868:	7bbb      	ldrb	r3, [r7, #14]
 800e86a:	2b0d      	cmp	r3, #13
 800e86c:	d109      	bne.n	800e882 <_ZN3USB13AttemptConfigEhhhb+0xea>
 800e86e:	7bfb      	ldrb	r3, [r7, #15]
 800e870:	2b02      	cmp	r3, #2
 800e872:	d806      	bhi.n	800e882 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 800e874:	4816      	ldr	r0, [pc, #88]	; (800e8d0 <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800e876:	f7f3 f99b 	bl	8001bb0 <HAL_Delay>
                retries++;
 800e87a:	7bfb      	ldrb	r3, [r7, #15]
 800e87c:	3301      	adds	r3, #1
 800e87e:	73fb      	strb	r3, [r7, #15]
                goto again;
 800e880:	e799      	b.n	800e7b6 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 800e882:	7bbb      	ldrb	r3, [r7, #14]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d01b      	beq.n	800e8c0 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 800e888:	78bb      	ldrb	r3, [r7, #2]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d108      	bne.n	800e8a0 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800e88e:	2201      	movs	r2, #1
 800e890:	21e8      	movs	r1, #232	; 0xe8
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7f2 fe90 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800e898:	480c      	ldr	r0, [pc, #48]	; (800e8cc <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800e89a:	f7f3 f989 	bl	8001bb0 <HAL_Delay>
 800e89e:	e00f      	b.n	800e8c0 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800e8a0:	78ba      	ldrb	r2, [r7, #2]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	321e      	adds	r2, #30
 800e8a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e8aa:	78ba      	ldrb	r2, [r7, #2]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	321e      	adds	r2, #30
 800e8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	3314      	adds	r3, #20
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	787a      	ldrb	r2, [r7, #1]
 800e8bc:	4611      	mov	r1, r2
 800e8be:	4798      	blx	r3
                }
        }
        return rcode;
 800e8c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3714      	adds	r7, #20
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd90      	pop	{r4, r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	00018e70 	.word	0x00018e70
 800e8d0:	000186a0 	.word	0x000186a0

0800e8d4 <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b090      	sub	sp, #64	; 0x40
 800e8d8:	af02      	add	r7, sp, #8
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	4608      	mov	r0, r1
 800e8de:	4611      	mov	r1, r2
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	70fb      	strb	r3, [r7, #3]
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	70bb      	strb	r3, [r7, #2]
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 800e8f4:	f107 030c 	add.w	r3, r7, #12
 800e8f8:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 800e8fe:	2300      	movs	r3, #0
 800e900:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 800e902:	2300      	movs	r3, #0
 800e904:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 800e906:	2308      	movs	r3, #8
 800e908:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 800e90a:	7abb      	ldrb	r3, [r7, #10]
 800e90c:	f36f 0300 	bfc	r3, #0, #1
 800e910:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 800e912:	7abb      	ldrb	r3, [r7, #10]
 800e914:	f36f 0341 	bfc	r3, #1, #1
 800e918:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 800e91a:	7abb      	ldrb	r3, [r7, #10]
 800e91c:	220f      	movs	r2, #15
 800e91e:	f362 0387 	bfi	r3, r2, #2, #6
 800e922:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f7fa fcbb 	bl	80092a0 <_ZN3USB14GetAddressPoolEv>
 800e92a:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 800e92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2100      	movs	r1, #0
 800e934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e936:	4798      	blx	r3
 800e938:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 800e93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d101      	bne.n	800e944 <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e940:	23d6      	movs	r3, #214	; 0xd6
 800e942:	e15c      	b.n	800ebfe <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 800e944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 800e94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94c:	f107 0208 	add.w	r2, r7, #8
 800e950:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	787a      	ldrb	r2, [r7, #1]
 800e956:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 800e958:	f107 030c 	add.w	r3, r7, #12
 800e95c:	9300      	str	r3, [sp, #0]
 800e95e:	2312      	movs	r3, #18
 800e960:	2200      	movs	r2, #0
 800e962:	2100      	movs	r1, #0
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 f94e 	bl	800ec06 <_ZN3USB11getDevDescrEhhtPh>
 800e96a:	4603      	mov	r3, r0
 800e96c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 800e970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e974:	601a      	str	r2, [r3, #0]

        if(rcode) {
 800e976:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d002      	beq.n	800e984 <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 800e97e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e982:	e13c      	b.n	800ebfe <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 800e984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e986:	7a1a      	ldrb	r2, [r3, #8]
 800e988:	7a5b      	ldrb	r3, [r3, #9]
 800e98a:	021b      	lsls	r3, r3, #8
 800e98c:	4313      	orrs	r3, r2
 800e98e:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 800e990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e992:	7a9a      	ldrb	r2, [r3, #10]
 800e994:	7adb      	ldrb	r3, [r3, #11]
 800e996:	021b      	lsls	r3, r3, #8
 800e998:	4313      	orrs	r3, r2
 800e99a:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 800e99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99e:	791b      	ldrb	r3, [r3, #4]
 800e9a0:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 800e9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a4:	795b      	ldrb	r3, [r3, #5]
 800e9a6:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e9ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9b2:	2b0f      	cmp	r3, #15
 800e9b4:	f200 8081 	bhi.w	800eaba <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800e9b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	321e      	adds	r2, #30
 800e9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d06e      	beq.n	800eaa6 <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800e9c8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	321e      	adds	r2, #30
 800e9d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e9d4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	321e      	adds	r2, #30
 800e9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	3310      	adds	r3, #16
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4608      	mov	r0, r1
 800e9e8:	4798      	blx	r3
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	bf14      	ite	ne
 800e9f0:	2301      	movne	r3, #1
 800e9f2:	2300      	moveq	r3, #0
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d157      	bne.n	800eaaa <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 800e9fa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	321e      	adds	r2, #30
 800ea02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ea06:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	321e      	adds	r2, #30
 800ea0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	3320      	adds	r3, #32
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	7fba      	ldrb	r2, [r7, #30]
 800ea1a:	4611      	mov	r1, r2
 800ea1c:	4798      	blx	r3
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d02b      	beq.n	800ea7c <_ZN3USB11ConfiguringEhhb+0x1a8>
 800ea24:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	321e      	adds	r2, #30
 800ea2c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ea30:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	321e      	adds	r2, #30
 800ea38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	3318      	adds	r3, #24
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	8c3a      	ldrh	r2, [r7, #32]
 800ea44:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800ea46:	4798      	blx	r3
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d114      	bne.n	800ea78 <_ZN3USB11ConfiguringEhhb+0x1a4>
 800ea4e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	321e      	adds	r2, #30
 800ea56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ea5a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	321e      	adds	r2, #30
 800ea62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	331c      	adds	r3, #28
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	7ffa      	ldrb	r2, [r7, #31]
 800ea6e:	4611      	mov	r1, r2
 800ea70:	4798      	blx	r3
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d001      	beq.n	800ea7c <_ZN3USB11ConfiguringEhhb+0x1a8>
 800ea78:	2301      	movs	r3, #1
 800ea7a:	e000      	b.n	800ea7e <_ZN3USB11ConfiguringEhhb+0x1aa>
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d014      	beq.n	800eaac <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800ea82:	78b8      	ldrb	r0, [r7, #2]
 800ea84:	78fa      	ldrb	r2, [r7, #3]
 800ea86:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ea8a:	787b      	ldrb	r3, [r7, #1]
 800ea8c:	9300      	str	r3, [sp, #0]
 800ea8e:	4603      	mov	r3, r0
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f7ff fe81 	bl	800e798 <_ZN3USB13AttemptConfigEhhhb>
 800ea96:	4603      	mov	r3, r0
 800ea98:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 800ea9c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eaa0:	2bd1      	cmp	r3, #209	; 0xd1
 800eaa2:	d109      	bne.n	800eab8 <_ZN3USB11ConfiguringEhhb+0x1e4>
 800eaa4:	e002      	b.n	800eaac <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800eaa6:	bf00      	nop
 800eaa8:	e000      	b.n	800eaac <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800eaaa:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800eaac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eab0:	3301      	adds	r3, #1
 800eab2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eab6:	e77a      	b.n	800e9ae <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 800eab8:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 800eaba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eabe:	2b0f      	cmp	r3, #15
 800eac0:	d802      	bhi.n	800eac8 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 800eac2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eac6:	e09a      	b.n	800ebfe <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800eac8:	2300      	movs	r3, #0
 800eaca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eace:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ead2:	2b0f      	cmp	r3, #15
 800ead4:	f200 8088 	bhi.w	800ebe8 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 800ead8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	321e      	adds	r2, #30
 800eae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d074      	beq.n	800ebd2 <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800eae8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	321e      	adds	r2, #30
 800eaf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eaf4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	321e      	adds	r2, #30
 800eafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	3310      	adds	r3, #16
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	4608      	mov	r0, r1
 800eb08:	4798      	blx	r3
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	bf14      	ite	ne
 800eb10:	2301      	movne	r3, #1
 800eb12:	2300      	moveq	r3, #0
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d15d      	bne.n	800ebd6 <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800eb1a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	321e      	adds	r2, #30
 800eb22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eb26:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	321e      	adds	r2, #30
 800eb2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	3320      	adds	r3, #32
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	7fba      	ldrb	r2, [r7, #30]
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	4798      	blx	r3
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d02b      	beq.n	800eb9c <_ZN3USB11ConfiguringEhhb+0x2c8>
 800eb44:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	321e      	adds	r2, #30
 800eb4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eb50:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	321e      	adds	r2, #30
 800eb58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	3318      	adds	r3, #24
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	8c3a      	ldrh	r2, [r7, #32]
 800eb64:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800eb66:	4798      	blx	r3
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d114      	bne.n	800eb98 <_ZN3USB11ConfiguringEhhb+0x2c4>
 800eb6e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	321e      	adds	r2, #30
 800eb76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eb7a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	321e      	adds	r2, #30
 800eb82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	331c      	adds	r3, #28
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	7ffa      	ldrb	r2, [r7, #31]
 800eb8e:	4611      	mov	r1, r2
 800eb90:	4798      	blx	r3
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d001      	beq.n	800eb9c <_ZN3USB11ConfiguringEhhb+0x2c8>
 800eb98:	2301      	movs	r3, #1
 800eb9a:	e000      	b.n	800eb9e <_ZN3USB11ConfiguringEhhb+0x2ca>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d11b      	bne.n	800ebda <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800eba2:	78b8      	ldrb	r0, [r7, #2]
 800eba4:	78fa      	ldrb	r2, [r7, #3]
 800eba6:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ebaa:	787b      	ldrb	r3, [r7, #1]
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	4603      	mov	r3, r0
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7ff fdf1 	bl	800e798 <_ZN3USB13AttemptConfigEhhhb>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 800ebbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ebc0:	2bd1      	cmp	r3, #209	; 0xd1
 800ebc2:	d00b      	beq.n	800ebdc <_ZN3USB11ConfiguringEhhb+0x308>
 800ebc4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ebc8:	2bd9      	cmp	r3, #217	; 0xd9
 800ebca:	d007      	beq.n	800ebdc <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 800ebcc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ebd0:	e015      	b.n	800ebfe <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 800ebd2:	bf00      	nop
 800ebd4:	e002      	b.n	800ebdc <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ebd6:	bf00      	nop
 800ebd8:	e000      	b.n	800ebdc <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800ebda:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ebdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ebe6:	e772      	b.n	800eace <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 800ebe8:	787b      	ldrb	r3, [r7, #1]
 800ebea:	78ba      	ldrb	r2, [r7, #2]
 800ebec:	78f9      	ldrb	r1, [r7, #3]
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f7ff fd76 	bl	800e6e0 <_ZN3USB17DefaultAddressingEhhb>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 800ebfa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3738      	adds	r7, #56	; 0x38
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b08a      	sub	sp, #40	; 0x28
 800ec0a:	af08      	add	r7, sp, #32
 800ec0c:	6078      	str	r0, [r7, #4]
 800ec0e:	4608      	mov	r0, r1
 800ec10:	4611      	mov	r1, r2
 800ec12:	461a      	mov	r2, r3
 800ec14:	4603      	mov	r3, r0
 800ec16:	70fb      	strb	r3, [r7, #3]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	70bb      	strb	r3, [r7, #2]
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 800ec20:	78ba      	ldrb	r2, [r7, #2]
 800ec22:	78f9      	ldrb	r1, [r7, #3]
 800ec24:	2300      	movs	r3, #0
 800ec26:	9307      	str	r3, [sp, #28]
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	9306      	str	r3, [sp, #24]
 800ec2c:	883b      	ldrh	r3, [r7, #0]
 800ec2e:	9305      	str	r3, [sp, #20]
 800ec30:	883b      	ldrh	r3, [r7, #0]
 800ec32:	9304      	str	r3, [sp, #16]
 800ec34:	2300      	movs	r3, #0
 800ec36:	9303      	str	r3, [sp, #12]
 800ec38:	2301      	movs	r3, #1
 800ec3a:	9302      	str	r3, [sp, #8]
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	9301      	str	r3, [sp, #4]
 800ec40:	2306      	movs	r3, #6
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	2380      	movs	r3, #128	; 0x80
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f7fe ffc7 	bl	800dbda <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ec4c:	4603      	mov	r3, r0
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3708      	adds	r7, #8
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}

0800ec56 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b08a      	sub	sp, #40	; 0x28
 800ec5a:	af08      	add	r7, sp, #32
 800ec5c:	6078      	str	r0, [r7, #4]
 800ec5e:	4608      	mov	r0, r1
 800ec60:	4611      	mov	r1, r2
 800ec62:	461a      	mov	r2, r3
 800ec64:	4603      	mov	r3, r0
 800ec66:	70fb      	strb	r3, [r7, #3]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	70bb      	strb	r3, [r7, #2]
 800ec6c:	4613      	mov	r3, r2
 800ec6e:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 800ec70:	78ba      	ldrb	r2, [r7, #2]
 800ec72:	78f9      	ldrb	r1, [r7, #3]
 800ec74:	2300      	movs	r3, #0
 800ec76:	9307      	str	r3, [sp, #28]
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	9306      	str	r3, [sp, #24]
 800ec7c:	883b      	ldrh	r3, [r7, #0]
 800ec7e:	9305      	str	r3, [sp, #20]
 800ec80:	883b      	ldrh	r3, [r7, #0]
 800ec82:	9304      	str	r3, [sp, #16]
 800ec84:	2300      	movs	r3, #0
 800ec86:	9303      	str	r3, [sp, #12]
 800ec88:	2302      	movs	r3, #2
 800ec8a:	9302      	str	r3, [sp, #8]
 800ec8c:	7c3b      	ldrb	r3, [r7, #16]
 800ec8e:	9301      	str	r3, [sp, #4]
 800ec90:	2306      	movs	r3, #6
 800ec92:	9300      	str	r3, [sp, #0]
 800ec94:	2380      	movs	r3, #128	; 0x80
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7fe ff9f 	bl	800dbda <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ec9c:	4603      	mov	r3, r0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 800eca6:	b580      	push	{r7, lr}
 800eca8:	b09e      	sub	sp, #120	; 0x78
 800ecaa:	af08      	add	r7, sp, #32
 800ecac:	6078      	str	r0, [r7, #4]
 800ecae:	4608      	mov	r0, r1
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	70fb      	strb	r3, [r7, #3]
 800ecb8:	460b      	mov	r3, r1
 800ecba:	70bb      	strb	r3, [r7, #2]
 800ecbc:	4613      	mov	r3, r2
 800ecbe:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 800ecc0:	2340      	movs	r3, #64	; 0x40
 800ecc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 800ecc6:	f107 030c 	add.w	r3, r7, #12
 800ecca:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 800eccc:	78ba      	ldrb	r2, [r7, #2]
 800ecce:	78f9      	ldrb	r1, [r7, #3]
 800ecd0:	f107 030c 	add.w	r3, r7, #12
 800ecd4:	9301      	str	r3, [sp, #4]
 800ecd6:	787b      	ldrb	r3, [r7, #1]
 800ecd8:	9300      	str	r3, [sp, #0]
 800ecda:	2309      	movs	r3, #9
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7ff ffba 	bl	800ec56 <_ZN3USB12getConfDescrEhhthPh>
 800ece2:	4603      	mov	r3, r0
 800ece4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 800ece8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d002      	beq.n	800ecf6 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 800ecf0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ecf4:	e020      	b.n	800ed38 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 800ecf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecf8:	789a      	ldrb	r2, [r3, #2]
 800ecfa:	78db      	ldrb	r3, [r3, #3]
 800ecfc:	021b      	lsls	r3, r3, #8
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 800ed04:	78ba      	ldrb	r2, [r7, #2]
 800ed06:	78f9      	ldrb	r1, [r7, #3]
 800ed08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed0a:	9307      	str	r3, [sp, #28]
 800ed0c:	f107 030c 	add.w	r3, r7, #12
 800ed10:	9306      	str	r3, [sp, #24]
 800ed12:	2340      	movs	r3, #64	; 0x40
 800ed14:	9305      	str	r3, [sp, #20]
 800ed16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ed1a:	9304      	str	r3, [sp, #16]
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	9303      	str	r3, [sp, #12]
 800ed20:	2302      	movs	r3, #2
 800ed22:	9302      	str	r3, [sp, #8]
 800ed24:	787b      	ldrb	r3, [r7, #1]
 800ed26:	9301      	str	r3, [sp, #4]
 800ed28:	2306      	movs	r3, #6
 800ed2a:	9300      	str	r3, [sp, #0]
 800ed2c:	2380      	movs	r3, #128	; 0x80
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f7fe ff53 	bl	800dbda <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ed34:	4603      	mov	r3, r0
 800ed36:	bf00      	nop
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3758      	adds	r7, #88	; 0x58
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b08c      	sub	sp, #48	; 0x30
 800ed44:	af08      	add	r7, sp, #32
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	4608      	mov	r0, r1
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	4603      	mov	r3, r0
 800ed50:	70fb      	strb	r3, [r7, #3]
 800ed52:	460b      	mov	r3, r1
 800ed54:	70bb      	strb	r3, [r7, #2]
 800ed56:	4613      	mov	r3, r2
 800ed58:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 800ed5a:	78ba      	ldrb	r2, [r7, #2]
 800ed5c:	78f9      	ldrb	r1, [r7, #3]
 800ed5e:	2300      	movs	r3, #0
 800ed60:	9307      	str	r3, [sp, #28]
 800ed62:	2300      	movs	r3, #0
 800ed64:	9306      	str	r3, [sp, #24]
 800ed66:	2300      	movs	r3, #0
 800ed68:	9305      	str	r3, [sp, #20]
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	9304      	str	r3, [sp, #16]
 800ed6e:	2300      	movs	r3, #0
 800ed70:	9303      	str	r3, [sp, #12]
 800ed72:	2300      	movs	r3, #0
 800ed74:	9302      	str	r3, [sp, #8]
 800ed76:	787b      	ldrb	r3, [r7, #1]
 800ed78:	9301      	str	r3, [sp, #4]
 800ed7a:	2305      	movs	r3, #5
 800ed7c:	9300      	str	r3, [sp, #0]
 800ed7e:	2300      	movs	r3, #0
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f7fe ff2a 	bl	800dbda <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ed86:	4603      	mov	r3, r0
 800ed88:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 800ed8a:	4804      	ldr	r0, [pc, #16]	; (800ed9c <_ZN3USB7setAddrEhhh+0x5c>)
 800ed8c:	f7f2 ff10 	bl	8001bb0 <HAL_Delay>
        return rcode;
 800ed90:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	000493e0 	.word	0x000493e0

0800eda0 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b08a      	sub	sp, #40	; 0x28
 800eda4:	af08      	add	r7, sp, #32
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	4608      	mov	r0, r1
 800edaa:	4611      	mov	r1, r2
 800edac:	461a      	mov	r2, r3
 800edae:	4603      	mov	r3, r0
 800edb0:	70fb      	strb	r3, [r7, #3]
 800edb2:	460b      	mov	r3, r1
 800edb4:	70bb      	strb	r3, [r7, #2]
 800edb6:	4613      	mov	r3, r2
 800edb8:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 800edba:	78ba      	ldrb	r2, [r7, #2]
 800edbc:	78f9      	ldrb	r1, [r7, #3]
 800edbe:	2300      	movs	r3, #0
 800edc0:	9307      	str	r3, [sp, #28]
 800edc2:	2300      	movs	r3, #0
 800edc4:	9306      	str	r3, [sp, #24]
 800edc6:	2300      	movs	r3, #0
 800edc8:	9305      	str	r3, [sp, #20]
 800edca:	2300      	movs	r3, #0
 800edcc:	9304      	str	r3, [sp, #16]
 800edce:	2300      	movs	r3, #0
 800edd0:	9303      	str	r3, [sp, #12]
 800edd2:	2300      	movs	r3, #0
 800edd4:	9302      	str	r3, [sp, #8]
 800edd6:	787b      	ldrb	r3, [r7, #1]
 800edd8:	9301      	str	r3, [sp, #4]
 800edda:	2309      	movs	r3, #9
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	2300      	movs	r3, #0
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f7fe fefa 	bl	800dbda <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ede6:	4603      	mov	r3, r0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
};
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4618      	mov	r0, r3
 800edfc:	370c      	adds	r7, #12
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr
	...

0800ee08 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	4a04      	ldr	r2, [pc, #16]	; (800ee24 <_ZN11AddressPoolC1Ev+0x1c>)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	601a      	str	r2, [r3, #0]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	4618      	mov	r0, r3
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr
 800ee24:	0800f874 	.word	0x0800f874

0800ee28 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7ff ffe8 	bl	800ee08 <_ZN11AddressPoolC1Ev>
 800ee38:	4a17      	ldr	r2, [pc, #92]	; (800ee98 <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	601a      	str	r2, [r3, #0]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2200      	movs	r2, #0
 800ee42:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 800ee44:	2100      	movs	r1, #0
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f000 f990 	bl	800f16c <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	1d1a      	adds	r2, r3, #4
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2208      	movs	r2, #8
 800ee64:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	7993      	ldrb	r3, [r2, #6]
 800ee6a:	f36f 0300 	bfc	r3, #0, #1
 800ee6e:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	7993      	ldrb	r3, [r2, #6]
 800ee74:	f36f 0341 	bfc	r3, #1, #1
 800ee78:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	7993      	ldrb	r3, [r2, #6]
 800ee7e:	210f      	movs	r1, #15
 800ee80:	f361 0387 	bfi	r3, r1, #2, #6
 800ee84:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f000 f9a1 	bl	800f1ce <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3708      	adds	r7, #8
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	0800f860 	.word	0x0800f860

0800ee9c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	460b      	mov	r3, r1
 800eea6:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 800eea8:	78fb      	ldrb	r3, [r7, #3]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d102      	bne.n	800eeb4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	3308      	adds	r3, #8
 800eeb2:	e014      	b.n	800eede <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 800eeb4:	78fb      	ldrb	r3, [r7, #3]
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 f9a1 	bl	800f200 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800eebe:	4603      	mov	r3, r0
 800eec0:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 800eec2:	7bfb      	ldrb	r3, [r7, #15]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d008      	beq.n	800eeda <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f103 0108 	add.w	r1, r3, #8
 800eece:	7bfa      	ldrb	r2, [r7, #15]
 800eed0:	4613      	mov	r3, r2
 800eed2:	00db      	lsls	r3, r3, #3
 800eed4:	1a9b      	subs	r3, r3, r2
 800eed6:	440b      	add	r3, r1
 800eed8:	e000      	b.n	800eedc <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 800eeda:	2300      	movs	r3, #0
 800eedc:	bf00      	nop
        };
 800eede:	4618      	mov	r0, r3
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
	...

0800eee8 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b086      	sub	sp, #24
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	607b      	str	r3, [r7, #4]
 800eef2:	460b      	mov	r3, r1
 800eef4:	72fb      	strb	r3, [r7, #11]
 800eef6:	4613      	mov	r3, r2
 800eef8:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800eefa:	f7f1 fccb 	bl	8000894 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 800eefe:	7afb      	ldrb	r3, [r7, #11]
 800ef00:	f043 0302 	orr.w	r3, r3, #2
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 800ef08:	f107 0117 	add.w	r1, r7, #23
 800ef0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef10:	2201      	movs	r2, #1
 800ef12:	480b      	ldr	r0, [pc, #44]	; (800ef40 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800ef14:	f7f5 fc37 	bl	8004786 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800ef18:	7abb      	ldrb	r3, [r7, #10]
 800ef1a:	b29a      	uxth	r2, r3
 800ef1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef20:	6879      	ldr	r1, [r7, #4]
 800ef22:	4807      	ldr	r0, [pc, #28]	; (800ef40 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800ef24:	f7f5 fc2f 	bl	8004786 <HAL_SPI_Transmit>
        data_p += nbytes;
 800ef28:	7abb      	ldrb	r3, [r7, #10]
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800ef30:	f7f1 fca4 	bl	800087c <_ZN3P103SetEv>
        return ( data_p);
 800ef34:	687b      	ldr	r3, [r7, #4]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3718      	adds	r7, #24
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	20000304 	.word	0x20000304

0800ef44 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	6039      	str	r1, [r7, #0]
 800ef4e:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 800ef50:	bf00      	nop
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	607b      	str	r3, [r7, #4]
 800ef66:	460b      	mov	r3, r1
 800ef68:	72fb      	strb	r3, [r7, #11]
 800ef6a:	4613      	mov	r3, r2
 800ef6c:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800ef6e:	f7f1 fc91 	bl	8000894 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 800ef72:	f107 010b 	add.w	r1, r7, #11
 800ef76:	f04f 33ff 	mov.w	r3, #4294967295
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	480d      	ldr	r0, [pc, #52]	; (800efb4 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800ef7e:	f7f5 fc02 	bl	8004786 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 800ef82:	7abb      	ldrb	r3, [r7, #10]
 800ef84:	461a      	mov	r2, r3
 800ef86:	2100      	movs	r1, #0
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 fa91 	bl	800f4b0 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800ef8e:	7abb      	ldrb	r3, [r7, #10]
 800ef90:	b29a      	uxth	r2, r3
 800ef92:	f04f 33ff 	mov.w	r3, #4294967295
 800ef96:	6879      	ldr	r1, [r7, #4]
 800ef98:	4806      	ldr	r0, [pc, #24]	; (800efb4 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800ef9a:	f7f5 fd30 	bl	80049fe <HAL_SPI_Receive>
        data_p += nbytes;
 800ef9e:	7abb      	ldrb	r3, [r7, #10]
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	4413      	add	r3, r2
 800efa4:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800efa6:	f7f1 fc69 	bl	800087c <_ZN3P103SetEv>
        return ( data_p);
 800efaa:	687b      	ldr	r3, [r7, #4]
}
 800efac:	4618      	mov	r0, r3
 800efae:	3710      	adds	r7, #16
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	20000304 	.word	0x20000304

0800efb8 <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 800efc0:	2300      	movs	r3, #0
 800efc2:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 800efc4:	f7fe fd0e 	bl	800d9e4 <_ZN2P95IsSetEv>
 800efc8:	4603      	mov	r3, r0
 800efca:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 800efcc:	7bbb      	ldrb	r3, [r7, #14]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d104      	bne.n	800efdc <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 f937 	bl	800f246 <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 800efd8:	4603      	mov	r3, r0
 800efda:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 800efdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3710      	adds	r7, #16
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
	...

0800efe8 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
                return vbusState;
 800eff0:	4b03      	ldr	r3, [pc, #12]	; (800f000 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 800eff2:	781b      	ldrb	r3, [r3, #0]
        };
 800eff4:	4618      	mov	r0, r3
 800eff6:	370c      	adds	r7, #12
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr
 800f000:	20000655 	.word	0x20000655

0800f004 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	4608      	mov	r0, r1
 800f00e:	4611      	mov	r1, r2
 800f010:	461a      	mov	r2, r3
 800f012:	4603      	mov	r3, r0
 800f014:	70fb      	strb	r3, [r7, #3]
 800f016:	460b      	mov	r3, r1
 800f018:	70bb      	strb	r3, [r7, #2]
 800f01a:	4613      	mov	r3, r2
 800f01c:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 800f01e:	78fb      	ldrb	r3, [r7, #3]
 800f020:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 800f022:	7b3b      	ldrb	r3, [r7, #12]
 800f024:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d102      	bne.n	800f034 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 800f02e:	787b      	ldrb	r3, [r7, #1]
 800f030:	2b07      	cmp	r3, #7
 800f032:	d901      	bls.n	800f038 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 800f034:	2300      	movs	r3, #0
 800f036:	e079      	b.n	800f12c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 800f038:	78bb      	ldrb	r3, [r7, #2]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d005      	beq.n	800f04a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	79db      	ldrb	r3, [r3, #7]
 800f042:	2b07      	cmp	r3, #7
 800f044:	d101      	bne.n	800f04a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 800f046:	2300      	movs	r3, #0
 800f048:	e070      	b.n	800f12c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 800f04a:	2100      	movs	r1, #0
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 f8d7 	bl	800f200 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f052:	4603      	mov	r3, r0
 800f054:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 800f056:	7bfb      	ldrb	r3, [r7, #15]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d101      	bne.n	800f060 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 800f05c:	2300      	movs	r3, #0
 800f05e:	e065      	b.n	800f12c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 800f060:	7b3b      	ldrb	r3, [r7, #12]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d124      	bne.n	800f0b0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 800f066:	78bb      	ldrb	r3, [r7, #2]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d00f      	beq.n	800f08c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 800f06c:	7bfa      	ldrb	r2, [r7, #15]
 800f06e:	6879      	ldr	r1, [r7, #4]
 800f070:	4613      	mov	r3, r2
 800f072:	00db      	lsls	r3, r3, #3
 800f074:	1a9b      	subs	r3, r3, r2
 800f076:	440b      	add	r3, r1
 800f078:	330c      	adds	r3, #12
 800f07a:	2241      	movs	r2, #65	; 0x41
 800f07c:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	79db      	ldrb	r3, [r3, #7]
 800f082:	3301      	adds	r3, #1
 800f084:	b2da      	uxtb	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	71da      	strb	r2, [r3, #7]
 800f08a:	e008      	b.n	800f09e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 800f08c:	7bfa      	ldrb	r2, [r7, #15]
 800f08e:	6879      	ldr	r1, [r7, #4]
 800f090:	4613      	mov	r3, r2
 800f092:	00db      	lsls	r3, r3, #3
 800f094:	1a9b      	subs	r3, r3, r2
 800f096:	440b      	add	r3, r1
 800f098:	330c      	adds	r3, #12
 800f09a:	2201      	movs	r2, #1
 800f09c:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 800f09e:	7bfa      	ldrb	r2, [r7, #15]
 800f0a0:	6879      	ldr	r1, [r7, #4]
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	00db      	lsls	r3, r3, #3
 800f0a6:	1a9b      	subs	r3, r3, r2
 800f0a8:	440b      	add	r3, r1
 800f0aa:	330c      	adds	r3, #12
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	e03d      	b.n	800f12c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 800f0b4:	7b3b      	ldrb	r3, [r7, #12]
 800f0b6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f0ba:	b2da      	uxtb	r2, r3
 800f0bc:	7a3b      	ldrb	r3, [r7, #8]
 800f0be:	f362 03c5 	bfi	r3, r2, #3, #3
 800f0c2:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 800f0c4:	78bb      	ldrb	r3, [r7, #2]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d013      	beq.n	800f0f2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 800f0ca:	7a3b      	ldrb	r3, [r7, #8]
 800f0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0d0:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	79db      	ldrb	r3, [r3, #7]
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	b2da      	uxtb	r2, r3
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	71da      	strb	r2, [r3, #7]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	79db      	ldrb	r3, [r3, #7]
 800f0e2:	f003 0307 	and.w	r3, r3, #7
 800f0e6:	b2da      	uxtb	r2, r3
 800f0e8:	7a3b      	ldrb	r3, [r7, #8]
 800f0ea:	f362 0302 	bfi	r3, r2, #0, #3
 800f0ee:	723b      	strb	r3, [r7, #8]
 800f0f0:	e00b      	b.n	800f10a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 800f0f2:	7a3b      	ldrb	r3, [r7, #8]
 800f0f4:	f36f 1386 	bfc	r3, #6, #1
 800f0f8:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 800f0fa:	787b      	ldrb	r3, [r7, #1]
 800f0fc:	f003 0307 	and.w	r3, r3, #7
 800f100:	b2da      	uxtb	r2, r3
 800f102:	7a3b      	ldrb	r3, [r7, #8]
 800f104:	f362 0302 	bfi	r3, r2, #0, #3
 800f108:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 800f10a:	7bfa      	ldrb	r2, [r7, #15]
 800f10c:	6879      	ldr	r1, [r7, #4]
 800f10e:	4613      	mov	r3, r2
 800f110:	00db      	lsls	r3, r3, #3
 800f112:	1a9b      	subs	r3, r3, r2
 800f114:	440b      	add	r3, r1
 800f116:	330c      	adds	r3, #12
 800f118:	7a3a      	ldrb	r2, [r7, #8]
 800f11a:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 800f11c:	7bfa      	ldrb	r2, [r7, #15]
 800f11e:	6879      	ldr	r1, [r7, #4]
 800f120:	4613      	mov	r3, r2
 800f122:	00db      	lsls	r3, r3, #3
 800f124:	1a9b      	subs	r3, r3, r2
 800f126:	440b      	add	r3, r1
 800f128:	330c      	adds	r3, #12
 800f12a:	781b      	ldrb	r3, [r3, #0]
        };
 800f12c:	4618      	mov	r0, r3
 800f12e:	3710      	adds	r7, #16
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	460b      	mov	r3, r1
 800f13e:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 800f140:	78fb      	ldrb	r3, [r7, #3]
 800f142:	2b41      	cmp	r3, #65	; 0x41
 800f144:	d103      	bne.n	800f14e <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 f841 	bl	800f1ce <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 800f14c:	e00b      	b.n	800f166 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 800f14e:	78fb      	ldrb	r3, [r7, #3]
 800f150:	4619      	mov	r1, r3
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 f854 	bl	800f200 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f158:	4603      	mov	r3, r0
 800f15a:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 800f15c:	7bfb      	ldrb	r3, [r7, #15]
 800f15e:	4619      	mov	r1, r3
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 f893 	bl	800f28c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	460b      	mov	r3, r1
 800f176:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 800f178:	78fa      	ldrb	r2, [r7, #3]
 800f17a:	6879      	ldr	r1, [r7, #4]
 800f17c:	4613      	mov	r3, r2
 800f17e:	00db      	lsls	r3, r3, #3
 800f180:	1a9b      	subs	r3, r3, r2
 800f182:	440b      	add	r3, r1
 800f184:	330c      	adds	r3, #12
 800f186:	2200      	movs	r2, #0
 800f188:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 800f18a:	78fa      	ldrb	r2, [r7, #3]
 800f18c:	6879      	ldr	r1, [r7, #4]
 800f18e:	4613      	mov	r3, r2
 800f190:	00db      	lsls	r3, r3, #3
 800f192:	1a9b      	subs	r3, r3, r2
 800f194:	440b      	add	r3, r1
 800f196:	330d      	adds	r3, #13
 800f198:	2201      	movs	r2, #1
 800f19a:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 800f19c:	78fa      	ldrb	r2, [r7, #3]
 800f19e:	6879      	ldr	r1, [r7, #4]
 800f1a0:	4613      	mov	r3, r2
 800f1a2:	00db      	lsls	r3, r3, #3
 800f1a4:	1a9b      	subs	r3, r3, r2
 800f1a6:	440b      	add	r3, r1
 800f1a8:	330e      	adds	r3, #14
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 800f1ae:	78fa      	ldrb	r2, [r7, #3]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	1d19      	adds	r1, r3, #4
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	00db      	lsls	r3, r3, #3
 800f1ba:	1a9b      	subs	r3, r3, r2
 800f1bc:	4403      	add	r3, r0
 800f1be:	3308      	adds	r3, #8
 800f1c0:	6019      	str	r1, [r3, #0]
        };
 800f1c2:	bf00      	nop
 800f1c4:	370c      	adds	r7, #12
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr

0800f1ce <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 800f1ce:	b580      	push	{r7, lr}
 800f1d0:	b084      	sub	sp, #16
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	73fb      	strb	r3, [r7, #15]
 800f1da:	7bfb      	ldrb	r3, [r7, #15]
 800f1dc:	2b0f      	cmp	r3, #15
 800f1de:	d808      	bhi.n	800f1f2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 800f1e0:	7bfb      	ldrb	r3, [r7, #15]
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f7ff ffc1 	bl	800f16c <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f1ea:	7bfb      	ldrb	r3, [r7, #15]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	73fb      	strb	r3, [r7, #15]
 800f1f0:	e7f3      	b.n	800f1da <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	71da      	strb	r2, [r3, #7]
        };
 800f1f8:	bf00      	nop
 800f1fa:	3710      	adds	r7, #16
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 800f200:	b480      	push	{r7}
 800f202:	b085      	sub	sp, #20
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	460b      	mov	r3, r1
 800f20a:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f20c:	2301      	movs	r3, #1
 800f20e:	73fb      	strb	r3, [r7, #15]
 800f210:	7bfb      	ldrb	r3, [r7, #15]
 800f212:	2b0f      	cmp	r3, #15
 800f214:	d810      	bhi.n	800f238 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 800f216:	7bfa      	ldrb	r2, [r7, #15]
 800f218:	6879      	ldr	r1, [r7, #4]
 800f21a:	4613      	mov	r3, r2
 800f21c:	00db      	lsls	r3, r3, #3
 800f21e:	1a9b      	subs	r3, r3, r2
 800f220:	440b      	add	r3, r1
 800f222:	330c      	adds	r3, #12
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	78fa      	ldrb	r2, [r7, #3]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d101      	bne.n	800f230 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 800f22c:	7bfb      	ldrb	r3, [r7, #15]
 800f22e:	e004      	b.n	800f23a <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f230:	7bfb      	ldrb	r3, [r7, #15]
 800f232:	3301      	adds	r3, #1
 800f234:	73fb      	strb	r3, [r7, #15]
 800f236:	e7eb      	b.n	800f210 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 800f238:	2300      	movs	r3, #0
        };
 800f23a:	4618      	mov	r0, r3
 800f23c:	3714      	adds	r7, #20
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr

0800f246 <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 800f246:	b580      	push	{r7, lr}
 800f248:	b084      	sub	sp, #16
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 800f24e:	2300      	movs	r3, #0
 800f250:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 800f252:	21c8      	movs	r1, #200	; 0xc8
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f7f2 fa01 	bl	800165c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f25a:	4603      	mov	r3, r0
 800f25c:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 800f25e:	7bbb      	ldrb	r3, [r7, #14]
 800f260:	f003 0320 	and.w	r3, r3, #32
 800f264:	2b00      	cmp	r3, #0
 800f266:	d006      	beq.n	800f276 <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f7f2 fa19 	bl	80016a0 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
 800f270:	f043 0320 	orr.w	r3, r3, #32
 800f274:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 800f276:	7bfb      	ldrb	r3, [r7, #15]
 800f278:	461a      	mov	r2, r3
 800f27a:	21c8      	movs	r1, #200	; 0xc8
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f7f2 f99b 	bl	80015b8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 800f282:	7bfb      	ldrb	r3, [r7, #15]
}
 800f284:	4618      	mov	r0, r3
 800f286:	3710      	adds	r7, #16
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	460b      	mov	r3, r1
 800f296:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 800f298:	78fb      	ldrb	r3, [r7, #3]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d03a      	beq.n	800f314 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 800f29e:	78fa      	ldrb	r2, [r7, #3]
 800f2a0:	6879      	ldr	r1, [r7, #4]
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	00db      	lsls	r3, r3, #3
 800f2a6:	1a9b      	subs	r3, r3, r2
 800f2a8:	440b      	add	r3, r1
 800f2aa:	330c      	adds	r3, #12
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 800f2b0:	7b3b      	ldrb	r3, [r7, #12]
 800f2b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d025      	beq.n	800f308 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800f2bc:	2301      	movs	r3, #1
 800f2be:	73fb      	strb	r3, [r7, #15]
 800f2c0:	7bfb      	ldrb	r3, [r7, #15]
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	7b39      	ldrb	r1, [r7, #12]
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 f828 	bl	800f31c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	73fb      	strb	r3, [r7, #15]
 800f2d0:	7bfb      	ldrb	r3, [r7, #15]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	bf14      	ite	ne
 800f2d6:	2301      	movne	r3, #1
 800f2d8:	2300      	moveq	r3, #0
 800f2da:	b2db      	uxtb	r3, r3
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d005      	beq.n	800f2ec <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 800f2e0:	7bfb      	ldrb	r3, [r7, #15]
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7ff ffd1 	bl	800f28c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800f2ea:	e7e9      	b.n	800f2c0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	79db      	ldrb	r3, [r3, #7]
 800f2f0:	7b3a      	ldrb	r2, [r7, #12]
 800f2f2:	f3c2 0202 	ubfx	r2, r2, #0, #3
 800f2f6:	b2d2      	uxtb	r2, r2
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d105      	bne.n	800f308 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	79db      	ldrb	r3, [r3, #7]
 800f300:	3b01      	subs	r3, #1
 800f302:	b2da      	uxtb	r2, r3
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 800f308:	78fb      	ldrb	r3, [r7, #3]
 800f30a:	4619      	mov	r1, r3
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f7ff ff2d 	bl	800f16c <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 800f312:	e000      	b.n	800f316 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 800f314:	bf00      	nop
        }
 800f316:	3710      	adds	r7, #16
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 800f31c:	b480      	push	{r7}
 800f31e:	b085      	sub	sp, #20
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	7039      	strb	r1, [r7, #0]
 800f326:	4613      	mov	r3, r2
 800f328:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800f32a:	78fb      	ldrb	r3, [r7, #3]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d004      	beq.n	800f33a <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800f330:	78fb      	ldrb	r3, [r7, #3]
 800f332:	2b0f      	cmp	r3, #15
 800f334:	d801      	bhi.n	800f33a <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800f336:	78fb      	ldrb	r3, [r7, #3]
 800f338:	e000      	b.n	800f33c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 800f33a:	2301      	movs	r3, #1
 800f33c:	73fb      	strb	r3, [r7, #15]
 800f33e:	7bfb      	ldrb	r3, [r7, #15]
 800f340:	2b0f      	cmp	r3, #15
 800f342:	d816      	bhi.n	800f372 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 800f344:	7bfa      	ldrb	r2, [r7, #15]
 800f346:	6879      	ldr	r1, [r7, #4]
 800f348:	4613      	mov	r3, r2
 800f34a:	00db      	lsls	r3, r3, #3
 800f34c:	1a9b      	subs	r3, r3, r2
 800f34e:	440b      	add	r3, r1
 800f350:	3308      	adds	r3, #8
 800f352:	791b      	ldrb	r3, [r3, #4]
 800f354:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800f358:	b2da      	uxtb	r2, r3
 800f35a:	783b      	ldrb	r3, [r7, #0]
 800f35c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f360:	b2db      	uxtb	r3, r3
 800f362:	429a      	cmp	r2, r3
 800f364:	d101      	bne.n	800f36a <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 800f366:	7bfb      	ldrb	r3, [r7, #15]
 800f368:	e004      	b.n	800f374 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800f36a:	7bfb      	ldrb	r3, [r7, #15]
 800f36c:	3301      	adds	r3, #1
 800f36e:	73fb      	strb	r3, [r7, #15]
 800f370:	e7e5      	b.n	800f33e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 800f372:	2300      	movs	r3, #0
        };
 800f374:	4618      	mov	r0, r3
 800f376:	3714      	adds	r7, #20
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 800f380:	b480      	push	{r7}
 800f382:	b085      	sub	sp, #20
 800f384:	af00      	add	r7, sp, #0
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	60b9      	str	r1, [r7, #8]
 800f38a:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d101      	bne.n	800f398 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 800f394:	2300      	movs	r3, #0
 800f396:	e031      	b.n	800f3fc <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	791b      	ldrb	r3, [r3, #4]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d022      	beq.n	800f3e6 <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	881b      	ldrh	r3, [r3, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d01e      	beq.n	800f3e6 <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	68f9      	ldr	r1, [r7, #12]
 800f3b2:	7949      	ldrb	r1, [r1, #5]
 800f3b4:	4608      	mov	r0, r1
 800f3b6:	68f9      	ldr	r1, [r7, #12]
 800f3b8:	7909      	ldrb	r1, [r1, #4]
 800f3ba:	1a41      	subs	r1, r0, r1
 800f3bc:	440b      	add	r3, r1
 800f3be:	7812      	ldrb	r2, [r2, #0]
 800f3c0:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	791b      	ldrb	r3, [r3, #4]
 800f3c6:	3b01      	subs	r3, #1
 800f3c8:	b2da      	uxtb	r2, r3
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	711a      	strb	r2, [r3, #4]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	881b      	ldrh	r3, [r3, #0]
 800f3d2:	3b01      	subs	r3, #1
 800f3d4:	b29a      	uxth	r2, r3
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	801a      	strh	r2, [r3, #0]
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	1c5a      	adds	r2, r3, #1
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	e7d8      	b.n	800f398 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	791b      	ldrb	r3, [r3, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d001      	beq.n	800f3f2 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	e004      	b.n	800f3fc <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	795a      	ldrb	r2, [r3, #5]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	711a      	strb	r2, [r3, #4]
        return true;
 800f3fa:	2301      	movs	r3, #1
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3714      	adds	r7, #20
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <__cxa_pure_virtual>:
 800f408:	b508      	push	{r3, lr}
 800f40a:	f000 f80d 	bl	800f428 <_ZSt9terminatev>

0800f40e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f40e:	b508      	push	{r3, lr}
 800f410:	4780      	blx	r0
 800f412:	f000 f80e 	bl	800f432 <abort>
	...

0800f418 <_ZSt13get_terminatev>:
 800f418:	4b02      	ldr	r3, [pc, #8]	; (800f424 <_ZSt13get_terminatev+0xc>)
 800f41a:	6818      	ldr	r0, [r3, #0]
 800f41c:	f3bf 8f5b 	dmb	ish
 800f420:	4770      	bx	lr
 800f422:	bf00      	nop
 800f424:	20000174 	.word	0x20000174

0800f428 <_ZSt9terminatev>:
 800f428:	b508      	push	{r3, lr}
 800f42a:	f7ff fff5 	bl	800f418 <_ZSt13get_terminatev>
 800f42e:	f7ff ffee 	bl	800f40e <_ZN10__cxxabiv111__terminateEPFvvE>

0800f432 <abort>:
 800f432:	b508      	push	{r3, lr}
 800f434:	2006      	movs	r0, #6
 800f436:	f000 f86b 	bl	800f510 <raise>
 800f43a:	2001      	movs	r0, #1
 800f43c:	f7f2 fafc 	bl	8001a38 <_exit>

0800f440 <__errno>:
 800f440:	4b01      	ldr	r3, [pc, #4]	; (800f448 <__errno+0x8>)
 800f442:	6818      	ldr	r0, [r3, #0]
 800f444:	4770      	bx	lr
 800f446:	bf00      	nop
 800f448:	20000178 	.word	0x20000178

0800f44c <__libc_init_array>:
 800f44c:	b570      	push	{r4, r5, r6, lr}
 800f44e:	4d0d      	ldr	r5, [pc, #52]	; (800f484 <__libc_init_array+0x38>)
 800f450:	4c0d      	ldr	r4, [pc, #52]	; (800f488 <__libc_init_array+0x3c>)
 800f452:	1b64      	subs	r4, r4, r5
 800f454:	10a4      	asrs	r4, r4, #2
 800f456:	2600      	movs	r6, #0
 800f458:	42a6      	cmp	r6, r4
 800f45a:	d109      	bne.n	800f470 <__libc_init_array+0x24>
 800f45c:	4d0b      	ldr	r5, [pc, #44]	; (800f48c <__libc_init_array+0x40>)
 800f45e:	4c0c      	ldr	r4, [pc, #48]	; (800f490 <__libc_init_array+0x44>)
 800f460:	f000 f884 	bl	800f56c <_init>
 800f464:	1b64      	subs	r4, r4, r5
 800f466:	10a4      	asrs	r4, r4, #2
 800f468:	2600      	movs	r6, #0
 800f46a:	42a6      	cmp	r6, r4
 800f46c:	d105      	bne.n	800f47a <__libc_init_array+0x2e>
 800f46e:	bd70      	pop	{r4, r5, r6, pc}
 800f470:	f855 3b04 	ldr.w	r3, [r5], #4
 800f474:	4798      	blx	r3
 800f476:	3601      	adds	r6, #1
 800f478:	e7ee      	b.n	800f458 <__libc_init_array+0xc>
 800f47a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f47e:	4798      	blx	r3
 800f480:	3601      	adds	r6, #1
 800f482:	e7f2      	b.n	800f46a <__libc_init_array+0x1e>
 800f484:	0800f8e8 	.word	0x0800f8e8
 800f488:	0800f8e8 	.word	0x0800f8e8
 800f48c:	0800f8e8 	.word	0x0800f8e8
 800f490:	0800f8f0 	.word	0x0800f8f0

0800f494 <memcpy>:
 800f494:	440a      	add	r2, r1
 800f496:	4291      	cmp	r1, r2
 800f498:	f100 33ff 	add.w	r3, r0, #4294967295
 800f49c:	d100      	bne.n	800f4a0 <memcpy+0xc>
 800f49e:	4770      	bx	lr
 800f4a0:	b510      	push	{r4, lr}
 800f4a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4aa:	4291      	cmp	r1, r2
 800f4ac:	d1f9      	bne.n	800f4a2 <memcpy+0xe>
 800f4ae:	bd10      	pop	{r4, pc}

0800f4b0 <memset>:
 800f4b0:	4402      	add	r2, r0
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d100      	bne.n	800f4ba <memset+0xa>
 800f4b8:	4770      	bx	lr
 800f4ba:	f803 1b01 	strb.w	r1, [r3], #1
 800f4be:	e7f9      	b.n	800f4b4 <memset+0x4>

0800f4c0 <_raise_r>:
 800f4c0:	291f      	cmp	r1, #31
 800f4c2:	b538      	push	{r3, r4, r5, lr}
 800f4c4:	4604      	mov	r4, r0
 800f4c6:	460d      	mov	r5, r1
 800f4c8:	d904      	bls.n	800f4d4 <_raise_r+0x14>
 800f4ca:	2316      	movs	r3, #22
 800f4cc:	6003      	str	r3, [r0, #0]
 800f4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d2:	bd38      	pop	{r3, r4, r5, pc}
 800f4d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f4d6:	b112      	cbz	r2, 800f4de <_raise_r+0x1e>
 800f4d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4dc:	b94b      	cbnz	r3, 800f4f2 <_raise_r+0x32>
 800f4de:	4620      	mov	r0, r4
 800f4e0:	f000 f830 	bl	800f544 <_getpid_r>
 800f4e4:	462a      	mov	r2, r5
 800f4e6:	4601      	mov	r1, r0
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4ee:	f000 b817 	b.w	800f520 <_kill_r>
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	d00a      	beq.n	800f50c <_raise_r+0x4c>
 800f4f6:	1c59      	adds	r1, r3, #1
 800f4f8:	d103      	bne.n	800f502 <_raise_r+0x42>
 800f4fa:	2316      	movs	r3, #22
 800f4fc:	6003      	str	r3, [r0, #0]
 800f4fe:	2001      	movs	r0, #1
 800f500:	e7e7      	b.n	800f4d2 <_raise_r+0x12>
 800f502:	2400      	movs	r4, #0
 800f504:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f508:	4628      	mov	r0, r5
 800f50a:	4798      	blx	r3
 800f50c:	2000      	movs	r0, #0
 800f50e:	e7e0      	b.n	800f4d2 <_raise_r+0x12>

0800f510 <raise>:
 800f510:	4b02      	ldr	r3, [pc, #8]	; (800f51c <raise+0xc>)
 800f512:	4601      	mov	r1, r0
 800f514:	6818      	ldr	r0, [r3, #0]
 800f516:	f7ff bfd3 	b.w	800f4c0 <_raise_r>
 800f51a:	bf00      	nop
 800f51c:	20000178 	.word	0x20000178

0800f520 <_kill_r>:
 800f520:	b538      	push	{r3, r4, r5, lr}
 800f522:	4d07      	ldr	r5, [pc, #28]	; (800f540 <_kill_r+0x20>)
 800f524:	2300      	movs	r3, #0
 800f526:	4604      	mov	r4, r0
 800f528:	4608      	mov	r0, r1
 800f52a:	4611      	mov	r1, r2
 800f52c:	602b      	str	r3, [r5, #0]
 800f52e:	f7f2 fa73 	bl	8001a18 <_kill>
 800f532:	1c43      	adds	r3, r0, #1
 800f534:	d102      	bne.n	800f53c <_kill_r+0x1c>
 800f536:	682b      	ldr	r3, [r5, #0]
 800f538:	b103      	cbz	r3, 800f53c <_kill_r+0x1c>
 800f53a:	6023      	str	r3, [r4, #0]
 800f53c:	bd38      	pop	{r3, r4, r5, pc}
 800f53e:	bf00      	nop
 800f540:	20000f50 	.word	0x20000f50

0800f544 <_getpid_r>:
 800f544:	f7f2 ba60 	b.w	8001a08 <_getpid>

0800f548 <strncmp>:
 800f548:	b510      	push	{r4, lr}
 800f54a:	b16a      	cbz	r2, 800f568 <strncmp+0x20>
 800f54c:	3901      	subs	r1, #1
 800f54e:	1884      	adds	r4, r0, r2
 800f550:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f554:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f558:	4293      	cmp	r3, r2
 800f55a:	d103      	bne.n	800f564 <strncmp+0x1c>
 800f55c:	42a0      	cmp	r0, r4
 800f55e:	d001      	beq.n	800f564 <strncmp+0x1c>
 800f560:	2b00      	cmp	r3, #0
 800f562:	d1f5      	bne.n	800f550 <strncmp+0x8>
 800f564:	1a98      	subs	r0, r3, r2
 800f566:	bd10      	pop	{r4, pc}
 800f568:	4610      	mov	r0, r2
 800f56a:	e7fc      	b.n	800f566 <strncmp+0x1e>

0800f56c <_init>:
 800f56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56e:	bf00      	nop
 800f570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f572:	bc08      	pop	{r3}
 800f574:	469e      	mov	lr, r3
 800f576:	4770      	bx	lr

0800f578 <_fini>:
 800f578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f57a:	bf00      	nop
 800f57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f57e:	bc08      	pop	{r3}
 800f580:	469e      	mov	lr, r3
 800f582:	4770      	bx	lr
