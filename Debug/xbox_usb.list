
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001662c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021f4  080167fc  080167fc  000267fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080189f0  080189f0  00030188  2**0
                  CONTENTS
  4 .ARM          00000008  080189f0  080189f0  000289f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080189f8  080189f8  00030188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080189f8  080189f8  000289f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018a00  08018a00  00028a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08018a04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f6c  20000188  08018b8c  00030188  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200060f4  08018b8c  000360f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00073cd1  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ab2c  00000000  00000000  000a3e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e50  00000000  00000000  000ae9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002c68  00000000  00000000  000b1808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff6c  00000000  00000000  000b4470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000385d3  00000000  00000000  000e43dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa10c  00000000  00000000  0011c9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00216abb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cc30  00000000  00000000  00216b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000188 	.word	0x20000188
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080167e4 	.word	0x080167e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000018c 	.word	0x2000018c
 800020c:	080167e4 	.word	0x080167e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d101      	bne.n	80005cc <_ZN5Print5writeEPKc+0x14>
 80005c8:	2300      	movs	r3, #0
 80005ca:	e00d      	b.n	80005e8 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3304      	adds	r3, #4
 80005d2:	681c      	ldr	r4, [r3, #0]
 80005d4:	6838      	ldr	r0, [r7, #0]
 80005d6:	f7ff fe1b 	bl	8000210 <strlen>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	6839      	ldr	r1, [r7, #0]
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	47a0      	blx	r4
 80005e4:	4603      	mov	r3, r0
 80005e6:	bf00      	nop
    }
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd90      	pop	{r4, r7, pc}

080005f0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	1e5a      	subs	r2, r3, #1
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	bf14      	ite	ne
 800060a:	2301      	movne	r3, #1
 800060c:	2300      	moveq	r3, #0
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	d00e      	beq.n	8000632 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	1c59      	adds	r1, r3, #1
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4619      	mov	r1, r3
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	4790      	blx	r2
 8000628:	4602      	mov	r2, r0
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	4413      	add	r3, r2
 800062e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000630:	e7e6      	b.n	8000600 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000632:	697b      	ldr	r3, [r7, #20]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 8000646:	6839      	ldr	r1, [r7, #0]
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f805 	bl	8000658 <_ZN5Print5printEPKc>
 800064e:	4603      	mov	r3, r0
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
  return write(str);
 8000662:	6839      	ldr	r1, [r7, #0]
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ffa7 	bl	80005b8 <_ZN5Print5writeEPKc>
 800066a:	4603      	mov	r3, r0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
  return write(c);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	78fa      	ldrb	r2, [r7, #3]
 8000688:	4611      	mov	r1, r2
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	4798      	blx	r3
 800068e:	4603      	mov	r3, r0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	68b9      	ldr	r1, [r7, #8]
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	f000 f805 	bl	80006b8 <_ZN5Print5printEli>
 80006ae:	4603      	mov	r3, r0
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d109      	bne.n	80006de <_ZN5Print5printEli+0x26>
    return write(n);
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	4611      	mov	r1, r2
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	4798      	blx	r3
 80006da:	4603      	mov	r3, r0
 80006dc:	e029      	b.n	8000732 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b0a      	cmp	r3, #10
 80006e2:	d11d      	bne.n	8000720 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	da12      	bge.n	8000710 <_ZN5Print5printEli+0x58>
      int t = print('-');
 80006ea:	212d      	movs	r1, #45	; 0x2d
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f7ff ffc1 	bl	8000674 <_ZN5Print5printEc>
 80006f2:	4603      	mov	r3, r0
 80006f4:	617b      	str	r3, [r7, #20]
      n = -n;
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	425b      	negs	r3, r3
 80006fa:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	220a      	movs	r2, #10
 8000700:	4619      	mov	r1, r3
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f000 f819 	bl	800073a <_ZN5Print11printNumberEmh>
 8000708:	4602      	mov	r2, r0
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	4413      	add	r3, r2
 800070e:	e010      	b.n	8000732 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	220a      	movs	r2, #10
 8000714:	4619      	mov	r1, r3
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f000 f80f 	bl	800073a <_ZN5Print11printNumberEmh>
 800071c:	4603      	mov	r3, r0
 800071e:	e008      	b.n	8000732 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	4619      	mov	r1, r3
 8000728:	68f8      	ldr	r0, [r7, #12]
 800072a:	f000 f806 	bl	800073a <_ZN5Print11printNumberEmh>
 800072e:	4603      	mov	r3, r0
 8000730:	bf00      	nop
  }
}
 8000732:	4618      	mov	r0, r3
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800073a:	b580      	push	{r7, lr}
 800073c:	b090      	sub	sp, #64	; 0x40
 800073e:	af00      	add	r7, sp, #0
 8000740:	60f8      	str	r0, [r7, #12]
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	4613      	mov	r3, r2
 8000746:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	3320      	adds	r3, #32
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 8000750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d801      	bhi.n	8000760 <_ZN5Print11printNumberEmh+0x26>
 800075c:	230a      	movs	r3, #10
 800075e:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	fbb2 f3f3 	udiv	r3, r2, r3
 800076c:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 800076e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000770:	b2da      	uxtb	r2, r3
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	79f9      	ldrb	r1, [r7, #7]
 8000778:	fb11 f303 	smulbb	r3, r1, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8000784:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000788:	2b09      	cmp	r3, #9
 800078a:	d804      	bhi.n	8000796 <_ZN5Print11printNumberEmh+0x5c>
 800078c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000790:	3330      	adds	r3, #48	; 0x30
 8000792:	b2db      	uxtb	r3, r3
 8000794:	e003      	b.n	800079e <_ZN5Print11printNumberEmh+0x64>
 8000796:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800079a:	3337      	adds	r3, #55	; 0x37
 800079c:	b2db      	uxtb	r3, r3
 800079e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007a0:	3a01      	subs	r2, #1
 80007a2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80007a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007a6:	7013      	strb	r3, [r2, #0]
  } while(n);
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d000      	beq.n	80007b0 <_ZN5Print11printNumberEmh+0x76>
  do {
 80007ae:	e7d7      	b.n	8000760 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 80007b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	f7ff ff00 	bl	80005b8 <_ZN5Print5writeEPKc>
 80007b8:	4603      	mov	r3, r0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3740      	adds	r7, #64	; 0x40
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	460b      	mov	r3, r1
 80007cc:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3304      	adds	r3, #4
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	1cf9      	adds	r1, r7, #3
 80007d8:	2201      	movs	r2, #1
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	4798      	blx	r3
 80007de:	4603      	mov	r3, r0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	6918      	ldr	r0, [r3, #16]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	f04f 33ff 	mov.w	r3, #4294967295
 8000804:	6979      	ldr	r1, [r7, #20]
 8000806:	f007 f912 	bl	8007a2e <HAL_UART_Transmit>
	return size;
 800080a:	687b      	ldr	r3, [r7, #4]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6918      	ldr	r0, [r3, #16]
 8000820:	f107 010f 	add.w	r1, r7, #15
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
 8000828:	2201      	movs	r2, #1
 800082a:	f007 f992 	bl	8007b52 <HAL_UART_Receive>
	return data;
 800082e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	return -1;
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	return -1;
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800085c:	4618      	mov	r0, r3
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <eeprom_read_byte>:
  * @brief  Function reads a byte from emulated eeprom (flash)
  * @param  pos : address to read
  * @retval byte : data read from eeprom
  */
uint8_t eeprom_read_byte(const uint32_t pos)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    /* with actual EEPROM, pos is a relative address */
    data = *(__IO uint8_t *)(DATA_EEPROM_BASE + pos);
  }
  return (uint8_t)data;
#else
  eeprom_buffer_fill();
 8000884:	f000 f83e 	bl	8000904 <eeprom_buffer_fill>
  return eeprom_buffered_read_byte(pos);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 f817 	bl	80008bc <eeprom_buffered_read_byte>
 800088e:	4603      	mov	r3, r0
#endif /* _EEPROM_BASE */
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <eeprom_write_byte>:
  * @param  pos : address to write
  * @param  value : value to write
  * @retval none
  */
void eeprom_write_byte(uint32_t pos, uint8_t value)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]
      HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, (pos + DATA_EEPROM_BASE), (uint32_t)value);
      HAL_FLASHEx_DATAEEPROM_Lock();
    }
  }
#else
  eeprom_buffered_write_byte(pos, value);
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	4619      	mov	r1, r3
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f000 f817 	bl	80008dc <eeprom_buffered_write_byte>
  eeprom_buffer_flush();
 80008ae:	f000 f83b 	bl	8000928 <eeprom_buffer_flush>
#endif /* _EEPROM_BASE */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <eeprom_buffered_read_byte>:
  * @brief  Function reads a byte from the eeprom buffer
  * @param  pos : address to read
  * @retval byte : data read from eeprom
  */
uint8_t eeprom_buffered_read_byte(const uint32_t pos)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  return eeprom_buffer[pos];
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <eeprom_buffered_read_byte+0x1c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	200001a8 	.word	0x200001a8

080008dc <eeprom_buffered_write_byte>:
  * @param  pos : address to write
  * @param  value : value to write
  * @retval none
  */
void eeprom_buffered_write_byte(uint32_t pos, uint8_t value)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
  eeprom_buffer[pos] = value;
 80008e8:	4a05      	ldr	r2, [pc, #20]	; (8000900 <eeprom_buffered_write_byte+0x24>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	78fa      	ldrb	r2, [r7, #3]
 80008f0:	701a      	strb	r2, [r3, #0]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	200001a8 	.word	0x200001a8

08000904 <eeprom_buffer_fill>:
  * @brief  This function copies the data from flash into the buffer
  * @param  none
  * @retval none
  */
void eeprom_buffer_fill(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  memcpy(eeprom_buffer, (uint8_t *)(FLASH_BASE_ADDRESS), E2END + 1);
 8000908:	4a05      	ldr	r2, [pc, #20]	; (8000920 <eeprom_buffer_fill+0x1c>)
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <eeprom_buffer_fill+0x20>)
 800090c:	4610      	mov	r0, r2
 800090e:	4619      	mov	r1, r3
 8000910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000914:	461a      	mov	r2, r3
 8000916:	f015 fad9 	bl	8015ecc <memcpy>
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200001a8 	.word	0x200001a8
 8000924:	0807fe00 	.word	0x0807fe00

08000928 <eeprom_buffer_flush>:
  * @brief  This function writes the buffer content into the flash
  * @param  none
  * @retval none
  */
void eeprom_buffer_flush(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t offset = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t address = FLASH_BASE_ADDRESS;
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <eeprom_buffer_flush+0x8c>)
 8000934:	623b      	str	r3, [r7, #32]
  uint32_t address_end = FLASH_BASE_ADDRESS + E2END;
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <eeprom_buffer_flush+0x90>)
 8000938:	61fb      	str	r3, [r7, #28]
      }
    }
    HAL_FLASH_Lock();
  }
#else
  uint32_t SectorError = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
#if defined(STM32H7xx)
  uint64_t data[4] = {0x0000};
#else
  uint32_t data = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
#endif

  /* ERASING page */
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
#if defined(STM32H7xx)
  EraseInitStruct.Banks = FLASH_BANK_NUMBER;
#endif
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
  EraseInitStruct.Sector = FLASH_DATA_SECTOR;
 800094a:	2307      	movs	r3, #7
 800094c:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	617b      	str	r3, [r7, #20]

  HAL_FLASH_Unlock();
 8000952:	f002 fca1 	bl	8003298 <HAL_FLASH_Unlock>

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) == HAL_OK) {
 8000956:	1d3a      	adds	r2, r7, #4
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fe0c 	bl	800357c <HAL_FLASHEx_Erase>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d11e      	bne.n	80009a8 <eeprom_buffer_flush+0x80>
    while (address <= address_end) {
 800096a:	e019      	b.n	80009a0 <eeprom_buffer_flush+0x78>
      memcpy(&data, eeprom_buffer + offset, 8 * sizeof(uint32_t));
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, address, (uint32_t)data) == HAL_OK) {
        address += 32;
        offset += 32;
#else
      memcpy(&data, eeprom_buffer + offset, sizeof(uint32_t));
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	4a13      	ldr	r2, [pc, #76]	; (80009bc <eeprom_buffer_flush+0x94>)
 8000970:	4413      	add	r3, r2
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	603b      	str	r3, [r7, #0]
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) == HAL_OK) {
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	f04f 0300 	mov.w	r3, #0
 800097e:	6a39      	ldr	r1, [r7, #32]
 8000980:	2002      	movs	r0, #2
 8000982:	f002 fc35 	bl	80031f0 <HAL_FLASH_Program>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d106      	bne.n	800099a <eeprom_buffer_flush+0x72>
        address += 4;
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	3304      	adds	r3, #4
 8000990:	623b      	str	r3, [r7, #32]
        offset += 4;
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	3304      	adds	r3, #4
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
 8000998:	e002      	b.n	80009a0 <eeprom_buffer_flush+0x78>
#endif
      } else {
        address = address_end + 1;
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3301      	adds	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
    while (address <= address_end) {
 80009a0:	6a3a      	ldr	r2, [r7, #32]
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d9e1      	bls.n	800096c <eeprom_buffer_flush+0x44>
      }
    }
  }
  HAL_FLASH_Lock();
 80009a8:	f002 fc98 	bl	80032dc <HAL_FLASH_Lock>
#endif
}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	0807fe00 	.word	0x0807fe00
 80009b8:	0807ffff 	.word	0x0807ffff
 80009bc:	200001a8 	.word	0x200001a8

080009c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009c4:	f3bf 8f4f 	dsb	sy
}
 80009c8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <__NVIC_SystemReset+0x24>)
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80009d2:	4904      	ldr	r1, [pc, #16]	; (80009e4 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <__NVIC_SystemReset+0x28>)
 80009d6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80009d8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80009da:	f3bf 8f4f 	dsb	sy
}
 80009de:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <__NVIC_SystemReset+0x20>
 80009e4:	e000ed00 	.word	0xe000ed00
 80009e8:	05fa0004 	.word	0x05fa0004

080009ec <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <_ZN5PrintC1Ev+0x24>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	080178e4 	.word	0x080178e4

08000a14 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ffe4 	bl	80009ec <_ZN5PrintC1Ev>
 8000a24:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <_ZN6StreamC1Ev+0x28>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	08017aa0 	.word	0x08017aa0

08000a40 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ffe1 	bl	8000a14 <_ZN6StreamC1Ev>
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	611a      	str	r2, [r3, #16]
	};
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	080178f4 	.word	0x080178f4

08000a6c <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <_ZN2P910SetDirReadEv+0x24>)
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <_ZN2P910SetDirReadEv+0x24>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <_ZN2P910SetDirReadEv+0x24>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	4903      	ldr	r1, [pc, #12]	; (8000a90 <_ZN2P910SetDirReadEv+0x24>)
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <_ZN2P910SetDirReadEv+0x28>)
 8000a86:	f002 fe9b 	bl	80037c0 <HAL_GPIO_Init>
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200003a8 	.word	0x200003a8
 8000a94:	40020800 	.word	0x40020800

08000a98 <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <_ZN3P103SetEv+0x14>)
 8000aa2:	f003 f839 	bl	8003b18 <HAL_GPIO_WritePin>
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40020400 	.word	0x40020400

08000ab0 <_ZN3P105ClearEv>:
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2140      	movs	r1, #64	; 0x40
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <_ZN3P105ClearEv+0x14>)
 8000aba:	f003 f82d 	bl	8003b18 <HAL_GPIO_WritePin>
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <_ZN3P1011SetDirWriteEv>:
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <_ZN3P1011SetDirWriteEv+0x28>)
 8000ace:	2240      	movs	r2, #64	; 0x40
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <_ZN3P1011SetDirWriteEv+0x28>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <_ZN3P1011SetDirWriteEv+0x28>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <_ZN3P1011SetDirWriteEv+0x28>)
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	4902      	ldr	r1, [pc, #8]	; (8000af0 <_ZN3P1011SetDirWriteEv+0x28>)
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <_ZN3P1011SetDirWriteEv+0x2c>)
 8000ae8:	f002 fe6a 	bl	80037c0 <HAL_GPIO_Init>
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200003bc 	.word	0x200003bc
 8000af4:	40020400 	.word	0x40020400

08000af8 <_ZN5EERefC1Ei>:
    This class has an overhead of two bytes, similar to storing a pointer to an EEPROM cell.
***/

struct EERef {

  EERef(const int index)
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    : index(index)                 {}
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <_ZNK5EERefdeEv>:

  //Access/read members.
  uint8_t operator*() const
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  {
    return eeprom_read_byte(/*(uint8_t*)*/ index);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff feaa 	bl	800087c <eeprom_read_byte>
 8000b28:	4603      	mov	r3, r0
  }
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_ZNK5EERefcvhEv>:
  operator uint8_t() const
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  {
    return **this;
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ffeb 	bl	8000b16 <_ZNK5EERefdeEv>
 8000b40:	4603      	mov	r3, r0
  }
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_ZN5EERefaSEh>:
  //Assignment/write members.
  EERef &operator=(const EERef &ref)
  {
    return *this = *ref;
  }
  EERef &operator=(uint8_t in)
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	70fb      	strb	r3, [r7, #3]
  {
    return eeprom_write_byte(/*(uint8_t*)*/ index, in), *this;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4610      	mov	r0, r2
 8000b62:	f7ff fe99 	bl	8000898 <eeprom_write_byte>
 8000b66:	687b      	ldr	r3, [r7, #4]
  }
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_ZN11EEPROMClass4readEi>:
  //Basic user access methods.
  EERef operator[](const int idx)
  {
    return idx;
  }
  uint8_t read(int idx)
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  {
    return EERef(idx);
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	6839      	ldr	r1, [r7, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ffb9 	bl	8000af8 <_ZN5EERefC1Ei>
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ffd1 	bl	8000b32 <_ZNK5EERefcvhEv>
 8000b90:	4603      	mov	r3, r0
  }
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_ZN11EEPROMClass5writeEih>:
  void write(int idx, uint8_t val)
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	71fb      	strb	r3, [r7, #7]
  {
    (EERef(idx)) = val;
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ffa2 	bl	8000af8 <_ZN5EERefC1Ei>
 8000bb4:	79fa      	ldrb	r2, [r7, #7]
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ffc4 	bl	8000b4a <_ZN5EERefaSEh>
  }
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_ZN3BTD11pairWithHIDEv>:

        /** True if an Xbox One S Controller is Connecting. */
        bool incomingXboxOneS;
 
        /** Call this function to pair with a HID device */
        void pairWithHID() {
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2206      	movs	r2, #6
 8000be4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
        };
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
                if(pBtd)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d004      	beq.n	8000c0e <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ffde 	bl	8000bca <_ZN3BTD11pairWithHIDEv>
        };
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	4798      	blx	r3
                OnInitBTHID();
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	331c      	adds	r3, #28
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	4798      	blx	r3
        };
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	72fb      	strb	r3, [r7, #11]
                return;
 8000c4e:	bf00      	nop
        }
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <_ZN9PS4ParserC1Ev+0x20>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	601a      	str	r2, [r3, #0]
                Reset();
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f012 ffae 	bl	8013bcc <_ZN9PS4Parser5ResetEv>
        };
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	08017a94 	.word	0x08017a94

08000c80 <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 f81c 	bl	8000cca <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 8000ca6:	78fb      	ldrb	r3, [r7, #3]
 8000ca8:	2b20      	cmp	r3, #32
 8000caa:	d105      	bne.n	8000cb8 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 8000cac:	22ff      	movs	r2, #255	; 0xff
 8000cae:	2100      	movs	r1, #0
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f000 f80a 	bl	8000cca <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8000cb6:	e004      	b.n	8000cc2 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	21ff      	movs	r1, #255	; 0xff
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 f804 	bl	8000cca <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	70fb      	strb	r3, [r7, #3]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	78fa      	ldrb	r2, [r7, #3]
 8000cde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	78ba      	ldrb	r2, [r7, #2]
 8000ce6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2201      	movs	r2, #1
 8000cee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	4608      	mov	r0, r1
 8000d08:	4611      	mov	r1, r2
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	70fb      	strb	r3, [r7, #3]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70bb      	strb	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	78fa      	ldrb	r2, [r7, #3]
 8000d1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	78ba      	ldrb	r2, [r7, #2]
 8000d24:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	787a      	ldrb	r2, [r7, #1]
 8000d2c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	141b      	asrs	r3, r3, #16
 8000d52:	b2d9      	uxtb	r1, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	121b      	asrs	r3, r3, #8
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffcd 	bl	8000cfe <_ZN9PS4Parser6setLedEhhh>
        };
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000d7c:	68f8      	ldr	r0, [r7, #12]
 8000d7e:	79fa      	ldrb	r2, [r7, #7]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68b9      	ldr	r1, [r7, #8]
 8000d84:	f011 fc56 	bl	8012634 <_ZN5BTHIDC1EP3BTDbPKc>
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3378      	adds	r3, #120	; 0x78
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff65 	bl	8000c5c <_ZN9PS4ParserC1Ev>
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	3378      	adds	r3, #120	; 0x78
 8000da2:	4618      	mov	r0, r3
 8000da4:	f012 ff12 	bl	8013bcc <_ZN9PS4Parser5ResetEv>
        };
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	08017a58 	.word	0x08017a58
 8000db8:	08017a88 	.word	0x08017a88

08000dbc <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	72fb      	strb	r3, [r7, #11]
                if(incomingPSController_global)
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <_ZN5PS4BT14ParseBTHIDDataEhPh+0x2c>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d006      	beq.n	8000df8 <_ZN5PS4BT14ParseBTHIDDataEhPh+0x24>
                PS4Parser::Parse(len, buf);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3378      	adds	r3, #120	; 0x78
 8000dee:	7af9      	ldrb	r1, [r7, #11]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f012 fe10 	bl	8013a18 <_ZN9PS4Parser5ParseEhPh>
        };
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200003d1 	.word	0x200003d1

08000e04 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3378      	adds	r3, #120	; 0x78
 8000e10:	4618      	mov	r0, r3
 8000e12:	f012 fedb 	bl	8013bcc <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 f855 	bl	8000ec6 <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d105      	bne.n	8000e30 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3378      	adds	r3, #120	; 0x78
 8000e28:	21ff      	movs	r1, #255	; 0xff
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff8a 	bl	8000d44 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3378      	adds	r3, #120	; 0x78
 8000e44:	4618      	mov	r0, r3
 8000e46:	f012 fec1 	bl	8013bcc <_ZN9PS4Parser5ResetEv>
        };
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b096      	sub	sp, #88	; 0x58
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]

                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	224f      	movs	r2, #79	; 0x4f
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f015 f859 	bl	8015f1c <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000e6a:	2352      	movs	r3, #82	; 0x52
 8000e6c:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000e6e:	2311      	movs	r3, #17
 8000e70:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000e76:	23ff      	movs	r3, #255	; 0xff
 8000e78:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	785b      	ldrb	r3, [r3, #1]
 8000e7e:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	789b      	ldrb	r3, [r3, #2]
 8000e8a:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	78db      	ldrb	r3, [r3, #3]
 8000e90:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	791b      	ldrb	r3, [r3, #4]
 8000e96:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	795b      	ldrb	r3, [r3, #5]
 8000e9c:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	799b      	ldrb	r3, [r3, #6]
 8000ea2:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	71da      	strb	r2, [r3, #7]
                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	224f      	movs	r2, #79	; 0x4f
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 f81a 	bl	8000eec <_ZN5PS4BT11HID_CommandEPhh>

        };
 8000eb8:	bf00      	nop
 8000eba:	3758      	adds	r7, #88	; 0x58
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000ec0:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000ec4:	e7c5      	b.n	8000e52 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000ec6 <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000ece:	2343      	movs	r3, #67	; 0x43
 8000ed0:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2202      	movs	r2, #2
 8000edc:	4619      	mov	r1, r3
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 f804 	bl	8000eec <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6898      	ldr	r0, [r3, #8]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	8999      	ldrh	r1, [r3, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	7d9b      	ldrb	r3, [r3, #22]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	7dd2      	ldrb	r2, [r2, #23]
 8000f0a:	79fc      	ldrb	r4, [r7, #7]
 8000f0c:	9201      	str	r2, [sp, #4]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	4623      	mov	r3, r4
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f010 fbc8 	bl	80116a8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd90      	pop	{r4, r7, pc}

08000f20 <_ZN14XBOXONESParserC1Ev>:

/** This class parses all the data sent by the Xbox One S controller */
class XBOXONESParser {
public:
        /** Constructor for the XBOXONESParser class. */
        XBOXONESParser() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <_ZN14XBOXONESParserC1Ev+0x20>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]
                Reset();
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f014 fdb8 	bl	8015aa4 <_ZN14XBOXONESParser5ResetEv>
        };
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	08017a4c 	.word	0x08017a4c

08000f44 <_ZN10XBOXONESBTC1EP3BTDb>:
        /**
         * Constructor for the XBOXONESBT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         */
        XBOXONESBT(BTD *p, bool pair = false) :
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair) {
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	79fa      	ldrb	r2, [r7, #7]
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <_ZN10XBOXONESBTC1EP3BTDb+0x50>)
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	f011 fb6b 	bl	8012634 <_ZN5BTHIDC1EP3BTDbPKc>
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3378      	adds	r3, #120	; 0x78
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ffdc 	bl	8000f20 <_ZN14XBOXONESParserC1Ev>
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <_ZN10XBOXONESBTC1EP3BTDb+0x54>)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <_ZN10XBOXONESBTC1EP3BTDb+0x58>)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	679a      	str	r2, [r3, #120]	; 0x78
                XBOXONESParser::Reset();
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3378      	adds	r3, #120	; 0x78
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f014 fd93 	bl	8015aa4 <_ZN14XBOXONESParser5ResetEv>
                pBtd->useSimplePairing = true; // The Xbox One S controller only works via simple pairing
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
        };
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	080167fc 	.word	0x080167fc
 8000f98:	08017a10 	.word	0x08017a10
 8000f9c:	08017a40 	.word	0x08017a40

08000fa0 <_ZN10XBOXONESBT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	72fb      	strb	r3, [r7, #11]

                XBOXONESParser::Parse(len, buf);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3378      	adds	r3, #120	; 0x78
 8000fb2:	7af9      	ldrb	r1, [r7, #11]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f014 fc7e 	bl	80158b8 <_ZN14XBOXONESParser5ParseEhPh>

        };
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_ZN10XBOXONESBT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
                XBOXONESParser::Reset();
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3378      	adds	r3, #120	; 0x78
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f014 fd67 	bl	8015aa4 <_ZN14XBOXONESParser5ResetEv>
        };
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_ZN10XBOXONESBT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
                XBOXONESParser::Reset();
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3378      	adds	r3, #120	; 0x78
 8000fea:	4618      	mov	r0, r3
 8000fec:	f014 fd5a 	bl	8015aa4 <_ZN14XBOXONESParser5ResetEv>
        };
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_ZN10XBOXONESBT16sendOutputReportEPhh>:
        /**@}*/

        /** @name XBOXONESParser implementation */
        virtual void sendOutputReport(uint8_t *data, uint8_t nbytes) {
 8000ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	4613      	mov	r3, r2
 8001004:	71fb      	strb	r3, [r7, #7]
                buf[0] = 0xA2; // HID BT DATA (0xA0) | Report Type (Output 0x02)
                buf[1] = 0x03; // Report ID
                memcpy(buf + 2, data, nbytes);

                // Send the Bluetooth DATA output report on the interrupt channel
                pBtd->L2CAP_Command(hci_handle, buf, sizeof(buf), interrupt_scid[0], interrupt_scid[1]);
 8001006:	466b      	mov	r3, sp
 8001008:	461e      	mov	r6, r3
                uint8_t buf[nbytes + 2];
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	1c5c      	adds	r4, r3, #1
 800100e:	617c      	str	r4, [r7, #20]
 8001010:	4623      	mov	r3, r4
 8001012:	3301      	adds	r3, #1
 8001014:	4618      	mov	r0, r3
 8001016:	f04f 0100 	mov.w	r1, #0
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	00cb      	lsls	r3, r1, #3
 8001024:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001028:	00c2      	lsls	r2, r0, #3
 800102a:	4623      	mov	r3, r4
 800102c:	3301      	adds	r3, #1
 800102e:	4618      	mov	r0, r3
 8001030:	f04f 0100 	mov.w	r1, #0
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	00cb      	lsls	r3, r1, #3
 800103e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001042:	00c2      	lsls	r2, r0, #3
 8001044:	4623      	mov	r3, r4
 8001046:	3301      	adds	r3, #1
 8001048:	3307      	adds	r3, #7
 800104a:	08db      	lsrs	r3, r3, #3
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	ebad 0d03 	sub.w	sp, sp, r3
 8001052:	ab02      	add	r3, sp, #8
 8001054:	3300      	adds	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
                buf[0] = 0xA2; // HID BT DATA (0xA0) | Report Type (Output 0x02)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	22a2      	movs	r2, #162	; 0xa2
 800105c:	701a      	strb	r2, [r3, #0]
                buf[1] = 0x03; // Report ID
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	2203      	movs	r2, #3
 8001062:	705a      	strb	r2, [r3, #1]
                memcpy(buf + 2, data, nbytes);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	3302      	adds	r3, #2
 8001068:	79fa      	ldrb	r2, [r7, #7]
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	4618      	mov	r0, r3
 800106e:	f014 ff2d 	bl	8015ecc <memcpy>
                pBtd->L2CAP_Command(hci_handle, buf, sizeof(buf), interrupt_scid[0], interrupt_scid[1]);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6898      	ldr	r0, [r3, #8]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	8999      	ldrh	r1, [r3, #12]
 800107a:	693d      	ldr	r5, [r7, #16]
 800107c:	b2e3      	uxtb	r3, r4
 800107e:	3301      	adds	r3, #1
 8001080:	b2dc      	uxtb	r4, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	7e1b      	ldrb	r3, [r3, #24]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	7e52      	ldrb	r2, [r2, #25]
 800108a:	9201      	str	r2, [sp, #4]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4623      	mov	r3, r4
 8001090:	462a      	mov	r2, r5
 8001092:	f010 fb09 	bl	80116a8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
 8001096:	46b5      	mov	sp, r6
        };
 8001098:	bf00      	nop
 800109a:	371c      	adds	r7, #28
 800109c:	46bd      	mov	sp, r7
 800109e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010a0 <_ZThn120_N10XBOXONESBT16sendOutputReportEPhh>:
        virtual void sendOutputReport(uint8_t *data, uint8_t nbytes) {
 80010a0:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 80010a4:	e7a8      	b.n	8000ff8 <_ZN10XBOXONESBT16sendOutputReportEPhh>
	...

080010a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
    {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ac:	f001 ff58 	bl	8002f60 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b0:	f000 f904 	bl	80012bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b4:	f000 fa62 	bl	800157c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80010b8:	f000 fa32 	bl	8001520 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 80010bc:	f000 f9f4 	bl	80014a8 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 80010c0:	f00c ff1c 	bl	800defc <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 80010c4:	f000 f992 	bl	80013ec <_ZL13MX_TIM14_Initv>
  MX_I2C1_Init();
 80010c8:	f000 f9ba 	bl	8001440 <_ZL12MX_I2C1_Initv>

  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* For the USB Host Shield Library*/
  SPI_Handle = hspi1;
 80010cc:	4a54      	ldr	r2, [pc, #336]	; (8001220 <main+0x178>)
 80010ce:	4b55      	ldr	r3, [pc, #340]	; (8001224 <main+0x17c>)
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	2358      	movs	r3, #88	; 0x58
 80010d6:	461a      	mov	r2, r3
 80010d8:	f014 fef8 	bl	8015ecc <memcpy>
  UART_Handle = huart2;
 80010dc:	4a52      	ldr	r2, [pc, #328]	; (8001228 <main+0x180>)
 80010de:	4b53      	ldr	r3, [pc, #332]	; (800122c <main+0x184>)
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	2344      	movs	r3, #68	; 0x44
 80010e6:	461a      	mov	r2, r3
 80010e8:	f014 fef0 	bl	8015ecc <memcpy>
  //ssd1306_TestFPS();
  /* The Primary Timer, since using freeRTOS, not using systick */
  HAL_TIM_Base_Start_IT(&htim14);
 80010ec:	4850      	ldr	r0, [pc, #320]	; (8001230 <main+0x188>)
 80010ee:	f006 f9fd 	bl	80074ec <HAL_TIM_Base_Start_IT>

  /* Verify our CPU Frequency
   * We should get a 500ms delay here */
  Serial.print(F("\r\nCPU Frequency is: "));
 80010f2:	4950      	ldr	r1, [pc, #320]	; (8001234 <main+0x18c>)
 80010f4:	4850      	ldr	r0, [pc, #320]	; (8001238 <main+0x190>)
 80010f6:	f7ff faa1 	bl	800063c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq() / 1000000;
 80010fa:	f004 fc1f 	bl	800593c <HAL_RCC_GetHCLKFreq>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a4e      	ldr	r2, [pc, #312]	; (800123c <main+0x194>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	0c9b      	lsrs	r3, r3, #18
 8001108:	4a4d      	ldr	r2, [pc, #308]	; (8001240 <main+0x198>)
 800110a:	6013      	str	r3, [r2, #0]
  Serial.print((int) cpu_freq);
 800110c:	4b4c      	ldr	r3, [pc, #304]	; (8001240 <main+0x198>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	220a      	movs	r2, #10
 8001112:	4619      	mov	r1, r3
 8001114:	4848      	ldr	r0, [pc, #288]	; (8001238 <main+0x190>)
 8001116:	f7ff fabf 	bl	8000698 <_ZN5Print5printEii>
  Serial.print("MHz");
 800111a:	494a      	ldr	r1, [pc, #296]	; (8001244 <main+0x19c>)
 800111c:	4846      	ldr	r0, [pc, #280]	; (8001238 <main+0x190>)
 800111e:	f7ff fa9b 	bl	8000658 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8001122:	4949      	ldr	r1, [pc, #292]	; (8001248 <main+0x1a0>)
 8001124:	4844      	ldr	r0, [pc, #272]	; (8001238 <main+0x190>)
 8001126:	f7ff fa97 	bl	8000658 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 800112a:	4b41      	ldr	r3, [pc, #260]	; (8001230 <main+0x188>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b46      	ldr	r3, [pc, #280]	; (800124c <main+0x1a4>)
 8001134:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500);
 8001136:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800113a:	f001 ff53 	bl	8002fe4 <HAL_Delay>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <main+0x188>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <main+0x1a4>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <main+0x1a4>)
 8001150:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8001152:	493f      	ldr	r1, [pc, #252]	; (8001250 <main+0x1a8>)
 8001154:	4838      	ldr	r0, [pc, #224]	; (8001238 <main+0x190>)
 8001156:	f7ff fa7f 	bl	8000658 <_ZN5Print5printEPKc>
  Serial.print((int) timer_val / 10);
 800115a:	4b3c      	ldr	r3, [pc, #240]	; (800124c <main+0x1a4>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	4a3d      	ldr	r2, [pc, #244]	; (8001254 <main+0x1ac>)
 8001160:	fba2 2303 	umull	r2, r3, r2, r3
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	b29b      	uxth	r3, r3
 8001168:	220a      	movs	r2, #10
 800116a:	4619      	mov	r1, r3
 800116c:	4832      	ldr	r0, [pc, #200]	; (8001238 <main+0x190>)
 800116e:	f7ff fa93 	bl	8000698 <_ZN5Print5printEii>
  Serial.print(" ms");
 8001172:	4939      	ldr	r1, [pc, #228]	; (8001258 <main+0x1b0>)
 8001174:	4830      	ldr	r0, [pc, #192]	; (8001238 <main+0x190>)
 8001176:	f7ff fa6f 	bl	8000658 <_ZN5Print5printEPKc>

//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;
  Serial.print((int) hal_gettick);
 800117a:	4b38      	ldr	r3, [pc, #224]	; (800125c <main+0x1b4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	220a      	movs	r2, #10
 8001180:	4619      	mov	r1, r3
 8001182:	482d      	ldr	r0, [pc, #180]	; (8001238 <main+0x190>)
 8001184:	f7ff fa88 	bl	8000698 <_ZN5Print5printEii>

  /* USER CODE END 2 */
  /* Init scheduler */

  ssd1306_Init();
 8001188:	f008 faf2 	bl	8009770 <ssd1306_Init>

  /* If the user requested to pair, we reboot then run this code
   * We pair the controller here and then reboot
   * This is done because pairing is very sensitive to bugs, so running it clean reduces them
   */
  system_state_machine = EEPROM.read(40);
 800118c:	2128      	movs	r1, #40	; 0x28
 800118e:	4834      	ldr	r0, [pc, #208]	; (8001260 <main+0x1b8>)
 8001190:	f7ff fcee 	bl	8000b70 <_ZN11EEPROMClass4readEi>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b32      	ldr	r3, [pc, #200]	; (8001264 <main+0x1bc>)
 800119a:	701a      	strb	r2, [r3, #0]
  osKernelInitialize();
 800119c:	f00a f960 	bl	800b460 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  if(system_state_machine == SYS_PAIRING) {
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <main+0x1bc>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d108      	bne.n	80011ba <main+0x112>
    pairingHandle = osThreadNew(StartPairing, NULL, &pairing_attributes);
 80011a8:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <main+0x1c0>)
 80011aa:	2100      	movs	r1, #0
 80011ac:	482f      	ldr	r0, [pc, #188]	; (800126c <main+0x1c4>)
 80011ae:	f00a f9a1 	bl	800b4f4 <osThreadNew>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <main+0x1c8>)
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	e02f      	b.n	800121a <main+0x172>
  } else {
    getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 80011ba:	4a2e      	ldr	r2, [pc, #184]	; (8001274 <main+0x1cc>)
 80011bc:	2100      	movs	r1, #0
 80011be:	482e      	ldr	r0, [pc, #184]	; (8001278 <main+0x1d0>)
 80011c0:	f00a f998 	bl	800b4f4 <osThreadNew>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a2d      	ldr	r2, [pc, #180]	; (800127c <main+0x1d4>)
 80011c8:	6013      	str	r3, [r2, #0]

    /* creation of sendUSB */
    sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 80011ca:	4a2d      	ldr	r2, [pc, #180]	; (8001280 <main+0x1d8>)
 80011cc:	2100      	movs	r1, #0
 80011ce:	482d      	ldr	r0, [pc, #180]	; (8001284 <main+0x1dc>)
 80011d0:	f00a f990 	bl	800b4f4 <osThreadNew>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a2c      	ldr	r2, [pc, #176]	; (8001288 <main+0x1e0>)
 80011d8:	6013      	str	r3, [r2, #0]

    /* creation of controllerJoin */
    controllerJoinHandle = osThreadNew(StartControllerJoin, NULL, &controllerJoin_attributes);
 80011da:	4a2c      	ldr	r2, [pc, #176]	; (800128c <main+0x1e4>)
 80011dc:	2100      	movs	r1, #0
 80011de:	482c      	ldr	r0, [pc, #176]	; (8001290 <main+0x1e8>)
 80011e0:	f00a f988 	bl	800b4f4 <osThreadNew>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a2b      	ldr	r2, [pc, #172]	; (8001294 <main+0x1ec>)
 80011e8:	6013      	str	r3, [r2, #0]

    /* creation of buttonPress */
    buttonPressHandle = osThreadNew(StartButtonPress, NULL, &buttonPress_attributes);
 80011ea:	4a2b      	ldr	r2, [pc, #172]	; (8001298 <main+0x1f0>)
 80011ec:	2100      	movs	r1, #0
 80011ee:	482b      	ldr	r0, [pc, #172]	; (800129c <main+0x1f4>)
 80011f0:	f00a f980 	bl	800b4f4 <osThreadNew>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <main+0x1f8>)
 80011f8:	6013      	str	r3, [r2, #0]

    /* creation of updateLCD */
    updateLCDHandle = osThreadNew(StartUpdateLCD, NULL, &updateLCD_attributes);
 80011fa:	4a2a      	ldr	r2, [pc, #168]	; (80012a4 <main+0x1fc>)
 80011fc:	2100      	movs	r1, #0
 80011fe:	482a      	ldr	r0, [pc, #168]	; (80012a8 <main+0x200>)
 8001200:	f00a f978 	bl	800b4f4 <osThreadNew>
 8001204:	4603      	mov	r3, r0
 8001206:	4a29      	ldr	r2, [pc, #164]	; (80012ac <main+0x204>)
 8001208:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN RTOS_THREADS */
    /* creation of getLatencies, Used to Meaesure latencies of tasks*/
    getLatencies = osThreadNew(StartGetLatencies, NULL, &getLatencies_attributes);
 800120a:	4a29      	ldr	r2, [pc, #164]	; (80012b0 <main+0x208>)
 800120c:	2100      	movs	r1, #0
 800120e:	4829      	ldr	r0, [pc, #164]	; (80012b4 <main+0x20c>)
 8001210:	f00a f970 	bl	800b4f4 <osThreadNew>
 8001214:	4603      	mov	r3, r0
 8001216:	4a28      	ldr	r2, [pc, #160]	; (80012b8 <main+0x210>)
 8001218:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800121a:	f00a f945 	bl	800b4a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800121e:	e7fe      	b.n	800121e <main+0x176>
 8001220:	20000530 	.word	0x20000530
 8001224:	20000430 	.word	0x20000430
 8001228:	20000588 	.word	0x20000588
 800122c:	20000488 	.word	0x20000488
 8001230:	200004cc 	.word	0x200004cc
 8001234:	08016854 	.word	0x08016854
 8001238:	200005cc 	.word	0x200005cc
 800123c:	431bde83 	.word	0x431bde83
 8001240:	200009b4 	.word	0x200009b4
 8001244:	0801686c 	.word	0x0801686c
 8001248:	08016870 	.word	0x08016870
 800124c:	200009b8 	.word	0x200009b8
 8001250:	08016878 	.word	0x08016878
 8001254:	cccccccd 	.word	0xcccccccd
 8001258:	0801688c 	.word	0x0801688c
 800125c:	200009bc 	.word	0x200009bc
 8001260:	200003d0 	.word	0x200003d0
 8001264:	200005e0 	.word	0x200005e0
 8001268:	080179e4 	.word	0x080179e4
 800126c:	0800231d 	.word	0x0800231d
 8001270:	2000052c 	.word	0x2000052c
 8001274:	0801790c 	.word	0x0801790c
 8001278:	080017a5 	.word	0x080017a5
 800127c:	20000514 	.word	0x20000514
 8001280:	08017930 	.word	0x08017930
 8001284:	08002275 	.word	0x08002275
 8001288:	20000518 	.word	0x20000518
 800128c:	08017954 	.word	0x08017954
 8001290:	080022c5 	.word	0x080022c5
 8001294:	2000051c 	.word	0x2000051c
 8001298:	08017978 	.word	0x08017978
 800129c:	080024a9 	.word	0x080024a9
 80012a0:	20000520 	.word	0x20000520
 80012a4:	0801799c 	.word	0x0801799c
 80012a8:	08002555 	.word	0x08002555
 80012ac:	20000524 	.word	0x20000524
 80012b0:	080179c0 	.word	0x080179c0
 80012b4:	08001741 	.word	0x08001741
 80012b8:	20000528 	.word	0x20000528

080012bc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
    {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0ac      	sub	sp, #176	; 0xb0
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012c6:	2234      	movs	r2, #52	; 0x34
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f014 fe26 	bl	8015f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	225c      	movs	r2, #92	; 0x5c
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f014 fe17 	bl	8015f1c <memset>

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b3c      	ldr	r3, [pc, #240]	; (80013e4 <SystemClock_Config+0x128>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a3b      	ldr	r2, [pc, #236]	; (80013e4 <SystemClock_Config+0x128>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <SystemClock_Config+0x128>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <SystemClock_Config+0x12c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a35      	ldr	r2, [pc, #212]	; (80013e8 <SystemClock_Config+0x12c>)
 8001314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <SystemClock_Config+0x12c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001326:	2301      	movs	r3, #1
 8001328:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800132a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001338:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800133c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001340:	2304      	movs	r3, #4
 8001342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001346:	23a8      	movs	r3, #168	; 0xa8
 8001348:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001352:	2307      	movs	r3, #7
 8001354:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001358:	2302      	movs	r3, #2
 800135a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001362:	4618      	mov	r0, r3
 8001364:	f005 f82c 	bl	80063c0 <HAL_RCC_OscConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	bf14      	ite	ne
 800136e:	2301      	movne	r3, #1
 8001370:	2300      	moveq	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0xc0>
      {
    Error_Handler();
 8001378:	f001 fa12 	bl	80027a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	66bb      	str	r3, [r7, #104]	; 0x68
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2302      	movs	r3, #2
 8001382:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001388:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800138c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001394:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001398:	2105      	movs	r1, #5
 800139a:	4618      	mov	r0, r3
 800139c:	f004 f9e8 	bl	8005770 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bf14      	ite	ne
 80013a6:	2301      	movne	r3, #1
 80013a8:	2300      	moveq	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0xf8>
      {
    Error_Handler();
 80013b0:	f001 f9f6 	bl	80027a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80013ba:	2300      	movs	r3, #0
 80013bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4618      	mov	r0, r3
 80013c4:	f004 fb20 	bl	8005a08 <HAL_RCCEx_PeriphCLKConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	bf14      	ite	ne
 80013ce:	2301      	movne	r3, #1
 80013d0:	2300      	moveq	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x120>
      {
    Error_Handler();
 80013d8:	f001 f9e2 	bl	80027a0 <Error_Handler>
  }
}
 80013dc:	bf00      	nop
 80013de:	37b0      	adds	r7, #176	; 0xb0
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40007000 	.word	0x40007000

080013ec <_ZL13MX_TIM14_Initv>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
    {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <_ZL13MX_TIM14_Initv+0x4c>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <_ZL13MX_TIM14_Initv+0x50>)
 80013f4:	601a      	str	r2, [r3, #0]
  //htim14.Init.Prescaler = (168 / 2) * 100 - 1;
  htim14.Init.Prescaler = (168*100)/2 - 1;
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <_ZL13MX_TIM14_Initv+0x4c>)
 80013f8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80013fc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <_ZL13MX_TIM14_Initv+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <_ZL13MX_TIM14_Initv+0x4c>)
 8001406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <_ZL13MX_TIM14_Initv+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <_ZL13MX_TIM14_Initv+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <_ZL13MX_TIM14_Initv+0x4c>)
 800141a:	f006 f817 	bl	800744c <HAL_TIM_Base_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf14      	ite	ne
 8001424:	2301      	movne	r3, #1
 8001426:	2300      	moveq	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <_ZL13MX_TIM14_Initv+0x46>
      {
    Error_Handler();
 800142e:	f001 f9b7 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200004cc 	.word	0x200004cc
 800143c:	40002000 	.word	0x40002000

08001440 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
    {
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <_ZL12MX_I2C1_Initv+0x5c>)
 8001446:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <_ZL12MX_I2C1_Initv+0x60>)
 8001448:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <_ZL12MX_I2C1_Initv+0x5c>)
 800144c:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <_ZL12MX_I2C1_Initv+0x64>)
 800144e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <_ZL12MX_I2C1_Initv+0x5c>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <_ZL12MX_I2C1_Initv+0x5c>)
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <_ZL12MX_I2C1_Initv+0x5c>)
 800145e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001462:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <_ZL12MX_I2C1_Initv+0x5c>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <_ZL12MX_I2C1_Initv+0x5c>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <_ZL12MX_I2C1_Initv+0x5c>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <_ZL12MX_I2C1_Initv+0x5c>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800147c:	4807      	ldr	r0, [pc, #28]	; (800149c <_ZL12MX_I2C1_Initv+0x5c>)
 800147e:	f002 fb65 	bl	8003b4c <HAL_I2C_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	bf14      	ite	ne
 8001488:	2301      	movne	r3, #1
 800148a:	2300      	moveq	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <_ZL12MX_I2C1_Initv+0x56>
      {
    Error_Handler();
 8001492:	f001 f985 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200003dc 	.word	0x200003dc
 80014a0:	40005400 	.word	0x40005400
 80014a4:	000186a0 	.word	0x000186a0

080014a8 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
    {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <_ZL12MX_SPI1_Initv+0x70>)
 80014ae:	4a1b      	ldr	r2, [pc, #108]	; (800151c <_ZL12MX_SPI1_Initv+0x74>)
 80014b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <_ZL12MX_SPI1_Initv+0x70>)
 80014b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <_ZL12MX_SPI1_Initv+0x70>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <_ZL12MX_SPI1_Initv+0x70>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <_ZL12MX_SPI1_Initv+0x70>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <_ZL12MX_SPI1_Initv+0x70>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_ZL12MX_SPI1_Initv+0x70>)
 80014d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <_ZL12MX_SPI1_Initv+0x70>)
 80014dc:	2218      	movs	r2, #24
 80014de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <_ZL12MX_SPI1_Initv+0x70>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <_ZL12MX_SPI1_Initv+0x70>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <_ZL12MX_SPI1_Initv+0x70>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <_ZL12MX_SPI1_Initv+0x70>)
 80014f4:	220a      	movs	r2, #10
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014f8:	4807      	ldr	r0, [pc, #28]	; (8001518 <_ZL12MX_SPI1_Initv+0x70>)
 80014fa:	f005 f9ff 	bl	80068fc <HAL_SPI_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	bf14      	ite	ne
 8001504:	2301      	movne	r3, #1
 8001506:	2300      	moveq	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <_ZL12MX_SPI1_Initv+0x6a>
      {
    Error_Handler();
 800150e:	f001 f947 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000430 	.word	0x20000430
 800151c:	40013000 	.word	0x40013000

08001520 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
    {
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001526:	4a14      	ldr	r2, [pc, #80]	; (8001578 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001558:	f006 fa1c 	bl	8007994 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <_ZL19MX_USART2_UART_Initv+0x50>
      {
    Error_Handler();
 800156c:	f001 f918 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000488 	.word	0x20000488
 8001578:	40004400 	.word	0x40004400

0800157c <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
    {
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b36      	ldr	r3, [pc, #216]	; (8001670 <_ZL12MX_GPIO_Initv+0xf4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a35      	ldr	r2, [pc, #212]	; (8001670 <_ZL12MX_GPIO_Initv+0xf4>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b33      	ldr	r3, [pc, #204]	; (8001670 <_ZL12MX_GPIO_Initv+0xf4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <_ZL12MX_GPIO_Initv+0xf4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a2e      	ldr	r2, [pc, #184]	; (8001670 <_ZL12MX_GPIO_Initv+0xf4>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <_ZL12MX_GPIO_Initv+0xf4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b28      	ldr	r3, [pc, #160]	; (8001670 <_ZL12MX_GPIO_Initv+0xf4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a27      	ldr	r2, [pc, #156]	; (8001670 <_ZL12MX_GPIO_Initv+0xf4>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <_ZL12MX_GPIO_Initv+0xf4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <_ZL12MX_GPIO_Initv+0xf4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a20      	ldr	r2, [pc, #128]	; (8001670 <_ZL12MX_GPIO_Initv+0xf4>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <_ZL12MX_GPIO_Initv+0xf4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <_ZL12MX_GPIO_Initv+0xf8>)
 800160a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	4818      	ldr	r0, [pc, #96]	; (8001678 <_ZL12MX_GPIO_Initv+0xfc>)
 8001618:	f002 f8d2 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800161c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001626:	2301      	movs	r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4812      	ldr	r0, [pc, #72]	; (800167c <_ZL12MX_GPIO_Initv+0x100>)
 8001632:	f002 f8c5 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001636:	2310      	movs	r3, #16
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163e:	2301      	movs	r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <_ZL12MX_GPIO_Initv+0x104>)
 800164a:	f002 f8b9 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800164e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001658:	2301      	movs	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4807      	ldr	r0, [pc, #28]	; (8001680 <_ZL12MX_GPIO_Initv+0x104>)
 8001664:	f002 f8ac 	bl	80037c0 <HAL_GPIO_Init>
}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	; 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	10210000 	.word	0x10210000
 8001678:	40020800 	.word	0x40020800
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400

08001684 <_Z23ProcessKeyCodeInContexth>:

/* USER CODE BEGIN 4 */
void ProcessKeyCodeInContext(uint8_t keyCode)
    {
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  /*Updates the display_no
   * We could also just call display funcitons directly here, but since we have extra processing speed
   * Let's play with freeRTOS */
  if (display_no == 0) { /* This is the status screen, show if controller or not connected */
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <_Z23ProcessKeyCodeInContexth+0x78>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10d      	bne.n	80016b2 <_Z23ProcessKeyCodeInContexth+0x2e>
    if (keyCode == BACK_BTN)
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d103      	bne.n	80016a4 <_Z23ProcessKeyCodeInContexth+0x20>
      display_no = 1;
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <_Z23ProcessKeyCodeInContexth+0x78>)
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	e01e      	b.n	80016e2 <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == FORWARD_BTN)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d11b      	bne.n	80016e2 <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 1;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <_Z23ProcessKeyCodeInContexth+0x78>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	e017      	b.n	80016e2 <_Z23ProcessKeyCodeInContexth+0x5e>
  } else if (display_no == 1) { /* Pair Controller Screen */
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <_Z23ProcessKeyCodeInContexth+0x78>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d113      	bne.n	80016e2 <_Z23ProcessKeyCodeInContexth+0x5e>
    if (keyCode == BACK_BTN)
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d103      	bne.n	80016c8 <_Z23ProcessKeyCodeInContexth+0x44>
      display_no = 0;
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <_Z23ProcessKeyCodeInContexth+0x78>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	e00c      	b.n	80016e2 <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == FORWARD_BTN)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d103      	bne.n	80016d6 <_Z23ProcessKeyCodeInContexth+0x52>
      display_no = 0;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <_Z23ProcessKeyCodeInContexth+0x78>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
 80016d4:	e005      	b.n	80016e2 <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == SELECT_BTN) {
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d102      	bne.n	80016e2 <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 7; /* Only get to the pair status screen from here */
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <_Z23ProcessKeyCodeInContexth+0x78>)
 80016de:	2207      	movs	r2, #7
 80016e0:	701a      	strb	r2, [r3, #0]
  } else if (display_no == 2) {

  }
//  Serial.print("\r\nDisplay no is: ");
//  Serial.print(display_no);
  display_run_once = 0;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <_Z23ProcessKeyCodeInContexth+0x7c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
  display_force_update = 1;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <_Z23ProcessKeyCodeInContexth+0x80>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200009c0 	.word	0x200009c0
 8001700:	200009c4 	.word	0x200009c4
 8001704:	200009c3 	.word	0x200009c3

08001708 <_Z3maplllll>:
//From wiring project
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	69b9      	ldr	r1, [r7, #24]
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	1a8a      	subs	r2, r1, r2
 8001722:	fb02 f203 	mul.w	r2, r2, r3
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1acb      	subs	r3, r1, r3
 800172c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	4413      	add	r3, r2
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_Z17StartGetLatenciesPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerJoin */
void StartGetLatencies(void *argument)
    {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetLatencies */
  /* Infinite loop */
  for (;;)
      {
#if rtos_delay_view //this is just used to measure the delay of StartGetBT task
    if (timer_val_getBT >= 7) {
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <_Z17StartGetLatenciesPv+0x50>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	2b06      	cmp	r3, #6
 800174e:	d90a      	bls.n	8001766 <_Z17StartGetLatenciesPv+0x26>
      Serial.print("\r\nWarning High CPU/BT Latency, getBT latency is: ");
 8001750:	4910      	ldr	r1, [pc, #64]	; (8001794 <_Z17StartGetLatenciesPv+0x54>)
 8001752:	4811      	ldr	r0, [pc, #68]	; (8001798 <_Z17StartGetLatenciesPv+0x58>)
 8001754:	f7fe ff80 	bl	8000658 <_ZN5Print5printEPKc>
      Serial.print(timer_val_getBT);
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <_Z17StartGetLatenciesPv+0x50>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	220a      	movs	r2, #10
 800175e:	4619      	mov	r1, r3
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <_Z17StartGetLatenciesPv+0x58>)
 8001762:	f7fe ff99 	bl	8000698 <_ZN5Print5printEii>
    }
    if (timer_val_getUSB >= 4) {
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <_Z17StartGetLatenciesPv+0x5c>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d90a      	bls.n	8001784 <_Z17StartGetLatenciesPv+0x44>
      Serial.print("\r\nWarning High CPU/USB Latency, getUSB latency is: ");
 800176e:	490c      	ldr	r1, [pc, #48]	; (80017a0 <_Z17StartGetLatenciesPv+0x60>)
 8001770:	4809      	ldr	r0, [pc, #36]	; (8001798 <_Z17StartGetLatenciesPv+0x58>)
 8001772:	f7fe ff71 	bl	8000658 <_ZN5Print5printEPKc>
      Serial.print(timer_val_getUSB);
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <_Z17StartGetLatenciesPv+0x5c>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	220a      	movs	r2, #10
 800177c:	4619      	mov	r1, r3
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <_Z17StartGetLatenciesPv+0x58>)
 8001780:	f7fe ff8a 	bl	8000698 <_ZN5Print5printEii>
    //Serial.print(" ");
//    Serial.print(rumble_brequest_sent);
    //Serial.print("\r\nController Idle Time: ");
//    Serial.print(button_press_idle);
#endif
    osDelay(1000);
 8001784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001788:	f009 ff46 	bl	800b618 <osDelay>
    if (timer_val_getBT >= 7) {
 800178c:	e7dc      	b.n	8001748 <_Z17StartGetLatenciesPv+0x8>
 800178e:	bf00      	nop
 8001790:	200009c6 	.word	0x200009c6
 8001794:	08016890 	.word	0x08016890
 8001798:	200005cc 	.word	0x200005cc
 800179c:	200009c8 	.word	0x200009c8
 80017a0:	080168c4 	.word	0x080168c4

080017a4 <_Z10StartGetBTPv>:
  /* USER CODE END StartGetLatencies */
}
/* USER CODE END 4 */

void StartGetBT(void *argument)
    {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 80017ac:	48ac      	ldr	r0, [pc, #688]	; (8001a60 <_Z10StartGetBTPv+0x2bc>)
 80017ae:	f001 f805 	bl	80027bc <_ZN8MAX3421eI3P102P9E4InitEv>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	bf0c      	ite	eq
 80017ba:	2301      	moveq	r3, #1
 80017bc:	2300      	movne	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <_Z10StartGetBTPv+0x2a>
    Serial.print(F("\r\nOSC did not start"));
 80017c4:	49a7      	ldr	r1, [pc, #668]	; (8001a64 <_Z10StartGetBTPv+0x2c0>)
 80017c6:	48a8      	ldr	r0, [pc, #672]	; (8001a68 <_Z10StartGetBTPv+0x2c4>)
 80017c8:	f7fe ff38 	bl	800063c <_ZN5Print5printEPK19__FlashStringHelper>
    while (1)
 80017cc:	e7fe      	b.n	80017cc <_Z10StartGetBTPv+0x28>
      ; // Halt
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 80017ce:	49a7      	ldr	r1, [pc, #668]	; (8001a6c <_Z10StartGetBTPv+0x2c8>)
 80017d0:	48a5      	ldr	r0, [pc, #660]	; (8001a68 <_Z10StartGetBTPv+0x2c4>)
 80017d2:	f7fe ff33 	bl	800063c <_ZN5Print5printEPK19__FlashStringHelper>

  /*Initialize our gamepad, this is for use on a PC*/
  gameHID.JoyX = 0;
 80017d6:	4ba6      	ldr	r3, [pc, #664]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 80017dc:	4ba4      	ldr	r3, [pc, #656]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 80017de:	2200      	movs	r2, #0
 80017e0:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 80017e2:	4ba3      	ldr	r3, [pc, #652]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 80017e8:	4ba1      	ldr	r3, [pc, #644]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 80017ee:	4ba0      	ldr	r3, [pc, #640]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 80017f4:	4b9e      	ldr	r3, [pc, #632]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 80017fa:	4a9d      	ldr	r2, [pc, #628]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 80017fc:	7993      	ldrb	r3, [r2, #6]
 80017fe:	f36f 0300 	bfc	r3, #0, #1
 8001802:	7193      	strb	r3, [r2, #6]

  /* Initalize our Xbox Controller data that we will send in our hid reports */
  xboxHID.startByte = 0x00;
 8001804:	4b9b      	ldr	r3, [pc, #620]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 800180a:	4b9a      	ldr	r3, [pc, #616]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 800180c:	2214      	movs	r2, #20
 800180e:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0x00;
 8001810:	4b98      	ldr	r3, [pc, #608]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001812:	2200      	movs	r2, #0
 8001814:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 8001816:	4b97      	ldr	r3, [pc, #604]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001818:	2200      	movs	r2, #0
 800181a:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 800181c:	4b95      	ldr	r3, [pc, #596]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 800181e:	2200      	movs	r2, #0
 8001820:	715a      	strb	r2, [r3, #5]
  xboxHID.X = 0;
 8001822:	4b94      	ldr	r3, [pc, #592]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001824:	2200      	movs	r2, #0
 8001826:	719a      	strb	r2, [r3, #6]
  xboxHID.Y = 0;
 8001828:	4b92      	ldr	r3, [pc, #584]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 800182a:	2200      	movs	r2, #0
 800182c:	71da      	strb	r2, [r3, #7]
  xboxHID.BLACK = 0;
 800182e:	4b91      	ldr	r3, [pc, #580]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001830:	2200      	movs	r2, #0
 8001832:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 8001834:	4b8f      	ldr	r3, [pc, #572]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001836:	2200      	movs	r2, #0
 8001838:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 800183a:	4b8e      	ldr	r3, [pc, #568]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 800183c:	2200      	movs	r2, #0
 800183e:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 8001840:	4b8c      	ldr	r3, [pc, #560]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001842:	2200      	movs	r2, #0
 8001844:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 8001846:	4b8b      	ldr	r3, [pc, #556]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001848:	2200      	movs	r2, #0
 800184a:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 800184c:	4b89      	ldr	r3, [pc, #548]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 800184e:	2200      	movs	r2, #0
 8001850:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 8001852:	4b88      	ldr	r3, [pc, #544]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001854:	2200      	movs	r2, #0
 8001856:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 8001858:	4b86      	ldr	r3, [pc, #536]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 800185a:	2200      	movs	r2, #0
 800185c:	825a      	strh	r2, [r3, #18]
//		}
//		if(usb_failed || usb_failed2) {
//			Serial.print("\r\nUSBd failed");
//		}
#if rtos_delay_view
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 800185e:	4b86      	ldr	r3, [pc, #536]	; (8001a78 <_Z10StartGetBTPv+0x2d4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b85      	ldr	r3, [pc, #532]	; (8001a7c <_Z10StartGetBTPv+0x2d8>)
 8001868:	801a      	strh	r2, [r3, #0]
#endif
    Usb.Task();
 800186a:	487d      	ldr	r0, [pc, #500]	; (8001a60 <_Z10StartGetBTPv+0x2bc>)
 800186c:	f012 ff0e 	bl	801468c <_ZN3USB4TaskEv>
    incomingPSController_global = Btd.incomingPSController;
 8001870:	4b83      	ldr	r3, [pc, #524]	; (8001a80 <_Z10StartGetBTPv+0x2dc>)
 8001872:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8001876:	4b83      	ldr	r3, [pc, #524]	; (8001a84 <_Z10StartGetBTPv+0x2e0>)
 8001878:	701a      	strb	r2, [r3, #0]
    incomingXboxOneSontroller_global = Btd.incomingXboxOneS;
 800187a:	4b81      	ldr	r3, [pc, #516]	; (8001a80 <_Z10StartGetBTPv+0x2dc>)
 800187c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001880:	4b81      	ldr	r3, [pc, #516]	; (8001a88 <_Z10StartGetBTPv+0x2e4>)
 8001882:	701a      	strb	r2, [r3, #0]
    if (PS4.connected() == 1 && Btd.incomingPSController) {
 8001884:	4881      	ldr	r0, [pc, #516]	; (8001a8c <_Z10StartGetBTPv+0x2e8>)
 8001886:	f7ff fa99 	bl	8000dbc <_ZN5PS4BT9connectedEv>
 800188a:	4603      	mov	r3, r0
 800188c:	2b01      	cmp	r3, #1
 800188e:	d106      	bne.n	800189e <_Z10StartGetBTPv+0xfa>
 8001890:	4b7b      	ldr	r3, [pc, #492]	; (8001a80 <_Z10StartGetBTPv+0x2dc>)
 8001892:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <_Z10StartGetBTPv+0xfa>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <_Z10StartGetBTPv+0xfc>
 800189e:	2300      	movs	r3, #0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 82cd 	beq.w	8001e40 <_Z10StartGetBTPv+0x69c>
      Serial.print("\rps4 controller connected");
 80018a6:	497a      	ldr	r1, [pc, #488]	; (8001a90 <_Z10StartGetBTPv+0x2ec>)
 80018a8:	486f      	ldr	r0, [pc, #444]	; (8001a68 <_Z10StartGetBTPv+0x2c4>)
 80018aa:	f7fe fed5 	bl	8000658 <_ZN5Print5printEPKc>
      ps4_connected = 1;
 80018ae:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <_Z10StartGetBTPv+0x2f0>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
      LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 80018b4:	2100      	movs	r1, #0
 80018b6:	4878      	ldr	r0, [pc, #480]	; (8001a98 <_Z10StartGetBTPv+0x2f4>)
 80018b8:	f012 f89d 	bl	80139f6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <_Z10StartGetBTPv+0x2f8>)
 80018c2:	701a      	strb	r2, [r3, #0]
      LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 80018c4:	2101      	movs	r1, #1
 80018c6:	4874      	ldr	r0, [pc, #464]	; (8001a98 <_Z10StartGetBTPv+0x2f4>)
 80018c8:	f012 f895 	bl	80139f6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <_Z10StartGetBTPv+0x2fc>)
 80018d2:	701a      	strb	r2, [r3, #0]
      RightHatX_val = PS4.getAnalogHat(RightHatX);
 80018d4:	2102      	movs	r1, #2
 80018d6:	4870      	ldr	r0, [pc, #448]	; (8001a98 <_Z10StartGetBTPv+0x2f4>)
 80018d8:	f012 f88d 	bl	80139f6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <_Z10StartGetBTPv+0x300>)
 80018e2:	701a      	strb	r2, [r3, #0]
      RightHatY_val = PS4.getAnalogHat(RightHatY);
 80018e4:	2103      	movs	r1, #3
 80018e6:	486c      	ldr	r0, [pc, #432]	; (8001a98 <_Z10StartGetBTPv+0x2f4>)
 80018e8:	f012 f885 	bl	80139f6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <_Z10StartGetBTPv+0x304>)
 80018f2:	701a      	strb	r2, [r3, #0]
				gameHID.Joy2Y = 0;
				xboxHID.rightStickX = 0;
				xboxHID.rightStickY = 0;
			}
#elif !deadzone_enable
      gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 80018f4:	2100      	movs	r1, #0
 80018f6:	4868      	ldr	r0, [pc, #416]	; (8001a98 <_Z10StartGetBTPv+0x2f4>)
 80018f8:	f012 f87d 	bl	80139f6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80018fc:	4603      	mov	r3, r0
 80018fe:	3b80      	subs	r3, #128	; 0x80
 8001900:	b2db      	uxtb	r3, r3
 8001902:	b25a      	sxtb	r2, r3
 8001904:	4b5a      	ldr	r3, [pc, #360]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 8001906:	709a      	strb	r2, [r3, #2]
      gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8001908:	2101      	movs	r1, #1
 800190a:	4863      	ldr	r0, [pc, #396]	; (8001a98 <_Z10StartGetBTPv+0x2f4>)
 800190c:	f012 f873 	bl	80139f6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001910:	4603      	mov	r3, r0
 8001912:	3b80      	subs	r3, #128	; 0x80
 8001914:	b2db      	uxtb	r3, r3
 8001916:	b25a      	sxtb	r2, r3
 8001918:	4b55      	ldr	r3, [pc, #340]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 800191a:	70da      	strb	r2, [r3, #3]
      xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 800191c:	4b54      	ldr	r3, [pc, #336]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 800191e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b21a      	sxth	r2, r3
 8001926:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001928:	819a      	strh	r2, [r3, #12]
      xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 800192a:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 800192c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b21a      	sxth	r2, r3
 8001934:	4b4f      	ldr	r3, [pc, #316]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001936:	81da      	strh	r2, [r3, #14]
      /* The Y axis by default is inverted on the Xbox */
      xboxHID.leftStickY = -xboxHID.leftStickY - 128;
 8001938:	4b4e      	ldr	r3, [pc, #312]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 800193a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800193e:	b29a      	uxth	r2, r3
 8001940:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	b21a      	sxth	r2, r3
 800194a:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 800194c:	81da      	strh	r2, [r3, #14]

      gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 800194e:	2102      	movs	r1, #2
 8001950:	4851      	ldr	r0, [pc, #324]	; (8001a98 <_Z10StartGetBTPv+0x2f4>)
 8001952:	f012 f850 	bl	80139f6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001956:	4603      	mov	r3, r0
 8001958:	3b80      	subs	r3, #128	; 0x80
 800195a:	b2db      	uxtb	r3, r3
 800195c:	b25a      	sxtb	r2, r3
 800195e:	4b44      	ldr	r3, [pc, #272]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 8001960:	711a      	strb	r2, [r3, #4]
      gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8001962:	2103      	movs	r1, #3
 8001964:	484c      	ldr	r0, [pc, #304]	; (8001a98 <_Z10StartGetBTPv+0x2f4>)
 8001966:	f012 f846 	bl	80139f6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800196a:	4603      	mov	r3, r0
 800196c:	3b80      	subs	r3, #128	; 0x80
 800196e:	b2db      	uxtb	r3, r3
 8001970:	b25a      	sxtb	r2, r3
 8001972:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 8001974:	715a      	strb	r2, [r3, #5]
      xboxHID.rightStickX = gameHID.Joy2X << 8;
 8001976:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 8001978:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b21a      	sxth	r2, r3
 8001980:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001982:	821a      	strh	r2, [r3, #16]
      xboxHID.rightStickY = gameHID.Joy2Y << 8;
 8001984:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 8001986:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b21a      	sxth	r2, r3
 800198e:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001990:	825a      	strh	r2, [r3, #18]

      /* The Y axis by default is inverted on the Xbox */
      xboxHID.rightStickY = -xboxHID.rightStickY - 128;
 8001992:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001994:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001998:	b29a      	uxth	r2, r3
 800199a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 80019a6:	825a      	strh	r2, [r3, #18]
#endif
      xboxHID.L = PS4.getAnalogButton(L2);
 80019a8:	2108      	movs	r1, #8
 80019aa:	483b      	ldr	r0, [pc, #236]	; (8001a98 <_Z10StartGetBTPv+0x2f4>)
 80019ac:	f012 f80a 	bl	80139c4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 80019b6:	729a      	strb	r2, [r3, #10]
      xboxHID.R = PS4.getAnalogButton(R2);
 80019b8:	2109      	movs	r1, #9
 80019ba:	4837      	ldr	r0, [pc, #220]	; (8001a98 <_Z10StartGetBTPv+0x2f4>)
 80019bc:	f012 f802 	bl	80139c4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 80019c6:	72da      	strb	r2, [r3, #11]
      gameHID.Joy_LT = xboxHID.L - 128;
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 80019ca:	7a9b      	ldrb	r3, [r3, #10]
 80019cc:	3b80      	subs	r3, #128	; 0x80
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	b25a      	sxtb	r2, r3
 80019d2:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 80019d4:	701a      	strb	r2, [r3, #0]
      gameHID.Joy_RT = xboxHID.R - 128;
 80019d6:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 80019d8:	7adb      	ldrb	r3, [r3, #11]
 80019da:	3b80      	subs	r3, #128	; 0x80
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 80019e2:	705a      	strb	r2, [r3, #1]

      if (PS4.getButtonClick(PS)) {
 80019e4:	2110      	movs	r1, #16
 80019e6:	482c      	ldr	r0, [pc, #176]	; (8001a98 <_Z10StartGetBTPv+0x2f4>)
 80019e8:	f011 ffac 	bl	8013944 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <_Z10StartGetBTPv+0x260>
        PS4.disconnect();
 80019f2:	4826      	ldr	r0, [pc, #152]	; (8001a8c <_Z10StartGetBTPv+0x2e8>)
 80019f4:	f010 fe8f 	bl	8012716 <_ZN5BTHID10disconnectEv>
        display_run_once = 0;
 80019f8:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <_Z10StartGetBTPv+0x308>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
        rumble_once = 0;
 80019fe:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <_Z10StartGetBTPv+0x30c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
      }

      if (PS4.getButtonPress(TRIANGLE)) {
 8001a04:	210c      	movs	r1, #12
 8001a06:	4824      	ldr	r0, [pc, #144]	; (8001a98 <_Z10StartGetBTPv+0x2f4>)
 8001a08:	f011 ff74 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00b      	beq.n	8001a2a <_Z10StartGetBTPv+0x286>
        gameHID.ps4ButtonsTag.button_triangle = 1;
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 8001a14:	79d3      	ldrb	r3, [r2, #7]
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	71d3      	strb	r3, [r2, #7]
        xboxHID.Y = 0xFF;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001a1e:	22ff      	movs	r2, #255	; 0xff
 8001a20:	71da      	strb	r2, [r3, #7]
        button_press_idle = 0;
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <_Z10StartGetBTPv+0x310>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e007      	b.n	8001a3a <_Z10StartGetBTPv+0x296>
      } else {
        gameHID.ps4ButtonsTag.button_triangle = 0;
 8001a2a:	4a11      	ldr	r2, [pc, #68]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 8001a2c:	79d3      	ldrb	r3, [r2, #7]
 8001a2e:	f36f 0300 	bfc	r3, #0, #1
 8001a32:	71d3      	strb	r3, [r2, #7]
        xboxHID.Y = 0;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	71da      	strb	r2, [r3, #7]
      }

      if (PS4.getButtonPress(CIRCLE)) {
 8001a3a:	210d      	movs	r1, #13
 8001a3c:	4816      	ldr	r0, [pc, #88]	; (8001a98 <_Z10StartGetBTPv+0x2f4>)
 8001a3e:	f011 ff59 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d037      	beq.n	8001ab8 <_Z10StartGetBTPv+0x314>
        gameHID.ps4ButtonsTag.button_circle = 1;
 8001a48:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <_Z10StartGetBTPv+0x2cc>)
 8001a4a:	7993      	ldrb	r3, [r2, #6]
 8001a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a50:	7193      	strb	r3, [r2, #6]
        xboxHID.B = 0xFF;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <_Z10StartGetBTPv+0x2d0>)
 8001a54:	22ff      	movs	r2, #255	; 0xff
 8001a56:	715a      	strb	r2, [r3, #5]
        button_press_idle = 0;
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <_Z10StartGetBTPv+0x310>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e033      	b.n	8001ac8 <_Z10StartGetBTPv+0x324>
 8001a60:	200005e4 	.word	0x200005e4
 8001a64:	080168f8 	.word	0x080168f8
 8001a68:	200005cc 	.word	0x200005cc
 8001a6c:	0801690c 	.word	0x0801690c
 8001a70:	200009cc 	.word	0x200009cc
 8001a74:	200009d4 	.word	0x200009d4
 8001a78:	200004cc 	.word	0x200004cc
 8001a7c:	200009c6 	.word	0x200009c6
 8001a80:	200006a0 	.word	0x200006a0
 8001a84:	200003d1 	.word	0x200003d1
 8001a88:	200003d2 	.word	0x200003d2
 8001a8c:	200007d0 	.word	0x200007d0
 8001a90:	0801692c 	.word	0x0801692c
 8001a94:	200009ad 	.word	0x200009ad
 8001a98:	20000848 	.word	0x20000848
 8001a9c:	200009ae 	.word	0x200009ae
 8001aa0:	200009af 	.word	0x200009af
 8001aa4:	200009b0 	.word	0x200009b0
 8001aa8:	200009b1 	.word	0x200009b1
 8001aac:	200009c4 	.word	0x200009c4
 8001ab0:	200009ac 	.word	0x200009ac
 8001ab4:	200009ec 	.word	0x200009ec
      } else {
        gameHID.ps4ButtonsTag.button_circle = 0;
 8001ab8:	4aa8      	ldr	r2, [pc, #672]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001aba:	7993      	ldrb	r3, [r2, #6]
 8001abc:	f36f 13c7 	bfc	r3, #7, #1
 8001ac0:	7193      	strb	r3, [r2, #6]
        xboxHID.B = 0;
 8001ac2:	4ba7      	ldr	r3, [pc, #668]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	715a      	strb	r2, [r3, #5]
      }

      if (PS4.getButtonPress(CROSS)) {
 8001ac8:	210e      	movs	r1, #14
 8001aca:	48a6      	ldr	r0, [pc, #664]	; (8001d64 <_Z10StartGetBTPv+0x5c0>)
 8001acc:	f011 ff12 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00b      	beq.n	8001aee <_Z10StartGetBTPv+0x34a>
        gameHID.ps4ButtonsTag.button_cross = 1;
 8001ad6:	4aa1      	ldr	r2, [pc, #644]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001ad8:	7993      	ldrb	r3, [r2, #6]
 8001ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ade:	7193      	strb	r3, [r2, #6]
        xboxHID.A = 0xFF;
 8001ae0:	4b9f      	ldr	r3, [pc, #636]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001ae2:	22ff      	movs	r2, #255	; 0xff
 8001ae4:	711a      	strb	r2, [r3, #4]
        button_press_idle = 0;
 8001ae6:	4ba0      	ldr	r3, [pc, #640]	; (8001d68 <_Z10StartGetBTPv+0x5c4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	e007      	b.n	8001afe <_Z10StartGetBTPv+0x35a>
      } else {
        gameHID.ps4ButtonsTag.button_cross = 0;
 8001aee:	4a9b      	ldr	r2, [pc, #620]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001af0:	7993      	ldrb	r3, [r2, #6]
 8001af2:	f36f 1386 	bfc	r3, #6, #1
 8001af6:	7193      	strb	r3, [r2, #6]
        xboxHID.A = 0;
 8001af8:	4b99      	ldr	r3, [pc, #612]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	711a      	strb	r2, [r3, #4]
      }

      if (PS4.getButtonPress(SQUARE)) {
 8001afe:	210f      	movs	r1, #15
 8001b00:	4898      	ldr	r0, [pc, #608]	; (8001d64 <_Z10StartGetBTPv+0x5c0>)
 8001b02:	f011 fef7 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00b      	beq.n	8001b24 <_Z10StartGetBTPv+0x380>
        gameHID.ps4ButtonsTag.button_square = 1;
 8001b0c:	4a93      	ldr	r2, [pc, #588]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001b0e:	79d3      	ldrb	r3, [r2, #7]
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	71d3      	strb	r3, [r2, #7]
        xboxHID.X = 0xFF;
 8001b16:	4b92      	ldr	r3, [pc, #584]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001b18:	22ff      	movs	r2, #255	; 0xff
 8001b1a:	719a      	strb	r2, [r3, #6]
        button_press_idle = 0;
 8001b1c:	4b92      	ldr	r3, [pc, #584]	; (8001d68 <_Z10StartGetBTPv+0x5c4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e007      	b.n	8001b34 <_Z10StartGetBTPv+0x390>
      } else {
        gameHID.ps4ButtonsTag.button_square = 0;
 8001b24:	4a8d      	ldr	r2, [pc, #564]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001b26:	79d3      	ldrb	r3, [r2, #7]
 8001b28:	f36f 0341 	bfc	r3, #1, #1
 8001b2c:	71d3      	strb	r3, [r2, #7]
        xboxHID.X = 0;
 8001b2e:	4b8c      	ldr	r3, [pc, #560]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	719a      	strb	r2, [r3, #6]
      }

      if (PS4.getButtonPress(UP)) {
 8001b34:	2100      	movs	r1, #0
 8001b36:	488b      	ldr	r0, [pc, #556]	; (8001d64 <_Z10StartGetBTPv+0x5c0>)
 8001b38:	f011 fedc 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <_Z10StartGetBTPv+0x3b8>
        gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8001b42:	4a86      	ldr	r2, [pc, #536]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001b44:	79d3      	ldrb	r3, [r2, #7]
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DUP;
 8001b4c:	4b84      	ldr	r3, [pc, #528]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001b4e:	789b      	ldrb	r3, [r3, #2]
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b82      	ldr	r3, [pc, #520]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001b58:	709a      	strb	r2, [r3, #2]
 8001b5a:	e00b      	b.n	8001b74 <_Z10StartGetBTPv+0x3d0>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8001b5c:	4a7f      	ldr	r2, [pc, #508]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001b5e:	79d3      	ldrb	r3, [r2, #7]
 8001b60:	f36f 0382 	bfc	r3, #2, #1
 8001b64:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 8001b66:	4b7e      	ldr	r3, [pc, #504]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001b68:	789b      	ldrb	r3, [r3, #2]
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	4b7b      	ldr	r3, [pc, #492]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001b72:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(RIGHT)) {
 8001b74:	2101      	movs	r1, #1
 8001b76:	487b      	ldr	r0, [pc, #492]	; (8001d64 <_Z10StartGetBTPv+0x5c0>)
 8001b78:	f011 febc 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00c      	beq.n	8001b9c <_Z10StartGetBTPv+0x3f8>
        gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8001b82:	4a76      	ldr	r2, [pc, #472]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001b84:	79d3      	ldrb	r3, [r2, #7]
 8001b86:	f043 0308 	orr.w	r3, r3, #8
 8001b8a:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DRIGHT;
 8001b8c:	4b74      	ldr	r3, [pc, #464]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001b8e:	789b      	ldrb	r3, [r3, #2]
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001b98:	709a      	strb	r2, [r3, #2]
 8001b9a:	e00b      	b.n	8001bb4 <_Z10StartGetBTPv+0x410>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8001b9c:	4a6f      	ldr	r2, [pc, #444]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001b9e:	79d3      	ldrb	r3, [r2, #7]
 8001ba0:	f36f 03c3 	bfc	r3, #3, #1
 8001ba4:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 8001ba6:	4b6e      	ldr	r3, [pc, #440]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001ba8:	789b      	ldrb	r3, [r3, #2]
 8001baa:	f023 0308 	bic.w	r3, r3, #8
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001bb2:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(DOWN)) {
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	486b      	ldr	r0, [pc, #428]	; (8001d64 <_Z10StartGetBTPv+0x5c0>)
 8001bb8:	f011 fe9c 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00c      	beq.n	8001bdc <_Z10StartGetBTPv+0x438>
        gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8001bc2:	4a66      	ldr	r2, [pc, #408]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001bc4:	79d3      	ldrb	r3, [r2, #7]
 8001bc6:	f043 0320 	orr.w	r3, r3, #32
 8001bca:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DDOWN;
 8001bcc:	4b64      	ldr	r3, [pc, #400]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001bd8:	709a      	strb	r2, [r3, #2]
 8001bda:	e00b      	b.n	8001bf4 <_Z10StartGetBTPv+0x450>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_down = 0;
 8001bdc:	4a5f      	ldr	r2, [pc, #380]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001bde:	79d3      	ldrb	r3, [r2, #7]
 8001be0:	f36f 1345 	bfc	r3, #5, #1
 8001be4:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 8001be6:	4b5e      	ldr	r3, [pc, #376]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001be8:	789b      	ldrb	r3, [r3, #2]
 8001bea:	f023 0302 	bic.w	r3, r3, #2
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	4b5b      	ldr	r3, [pc, #364]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001bf2:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(LEFT)) {
 8001bf4:	2103      	movs	r1, #3
 8001bf6:	485b      	ldr	r0, [pc, #364]	; (8001d64 <_Z10StartGetBTPv+0x5c0>)
 8001bf8:	f011 fe7c 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00c      	beq.n	8001c1c <_Z10StartGetBTPv+0x478>
        gameHID.ps4ButtonsTag.button_dpad_left = 1;
 8001c02:	4a56      	ldr	r2, [pc, #344]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001c04:	79d3      	ldrb	r3, [r2, #7]
 8001c06:	f043 0310 	orr.w	r3, r3, #16
 8001c0a:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DLEFT;
 8001c0c:	4b54      	ldr	r3, [pc, #336]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001c0e:	789b      	ldrb	r3, [r3, #2]
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b52      	ldr	r3, [pc, #328]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001c18:	709a      	strb	r2, [r3, #2]
 8001c1a:	e00b      	b.n	8001c34 <_Z10StartGetBTPv+0x490>

      } else {
        gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8001c1c:	4a4f      	ldr	r2, [pc, #316]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001c1e:	79d3      	ldrb	r3, [r2, #7]
 8001c20:	f36f 1304 	bfc	r3, #4, #1
 8001c24:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 8001c26:	4b4e      	ldr	r3, [pc, #312]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001c28:	789b      	ldrb	r3, [r3, #2]
 8001c2a:	f023 0304 	bic.w	r3, r3, #4
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001c32:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(L1)) {
 8001c34:	210a      	movs	r1, #10
 8001c36:	484b      	ldr	r0, [pc, #300]	; (8001d64 <_Z10StartGetBTPv+0x5c0>)
 8001c38:	f011 fe5c 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <_Z10StartGetBTPv+0x4b6>
        gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8001c42:	4a46      	ldr	r2, [pc, #280]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001c44:	7993      	ldrb	r3, [r2, #6]
 8001c46:	f043 0320 	orr.w	r3, r3, #32
 8001c4a:	7193      	strb	r3, [r2, #6]
        xboxHID.WHITE = 0xFF;
 8001c4c:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001c4e:	22ff      	movs	r2, #255	; 0xff
 8001c50:	725a      	strb	r2, [r3, #9]
        button_press_idle = 0;
 8001c52:	4b45      	ldr	r3, [pc, #276]	; (8001d68 <_Z10StartGetBTPv+0x5c4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e007      	b.n	8001c6a <_Z10StartGetBTPv+0x4c6>

      } else {
        gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001c5a:	4a40      	ldr	r2, [pc, #256]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001c5c:	7993      	ldrb	r3, [r2, #6]
 8001c5e:	f36f 1345 	bfc	r3, #5, #1
 8001c62:	7193      	strb	r3, [r2, #6]
        xboxHID.WHITE = 0;
 8001c64:	4b3e      	ldr	r3, [pc, #248]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	725a      	strb	r2, [r3, #9]
      }

      if (PS4.getButtonPress(L3)) {
 8001c6a:	2106      	movs	r1, #6
 8001c6c:	483d      	ldr	r0, [pc, #244]	; (8001d64 <_Z10StartGetBTPv+0x5c0>)
 8001c6e:	f011 fe41 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00f      	beq.n	8001c98 <_Z10StartGetBTPv+0x4f4>
        gameHID.ps4ButtonsTag.button_left_thumb = 1;
 8001c78:	4a38      	ldr	r2, [pc, #224]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001c7a:	79d3      	ldrb	r3, [r2, #7]
 8001c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c80:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_LS_BTN;
 8001c82:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001c84:	789b      	ldrb	r3, [r3, #2]
 8001c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001c8e:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001c90:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <_Z10StartGetBTPv+0x5c4>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e00b      	b.n	8001cb0 <_Z10StartGetBTPv+0x50c>
      } else {
        gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8001c98:	4a30      	ldr	r2, [pc, #192]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001c9a:	79d3      	ldrb	r3, [r2, #7]
 8001c9c:	f36f 1386 	bfc	r3, #6, #1
 8001ca0:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001ca4:	789b      	ldrb	r3, [r3, #2]
 8001ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001cae:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(R1)) {
 8001cb0:	210b      	movs	r1, #11
 8001cb2:	482c      	ldr	r0, [pc, #176]	; (8001d64 <_Z10StartGetBTPv+0x5c0>)
 8001cb4:	f011 fe1e 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <_Z10StartGetBTPv+0x532>
        gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8001cbe:	4a27      	ldr	r2, [pc, #156]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001cc0:	7993      	ldrb	r3, [r2, #6]
 8001cc2:	f043 0310 	orr.w	r3, r3, #16
 8001cc6:	7193      	strb	r3, [r2, #6]
        xboxHID.BLACK = 0xFF;
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001cca:	22ff      	movs	r2, #255	; 0xff
 8001ccc:	721a      	strb	r2, [r3, #8]
        button_press_idle = 0;
 8001cce:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <_Z10StartGetBTPv+0x5c4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e007      	b.n	8001ce6 <_Z10StartGetBTPv+0x542>
      } else {
        gameHID.ps4ButtonsTag.button_right_trigger = 0;
 8001cd6:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001cd8:	7993      	ldrb	r3, [r2, #6]
 8001cda:	f36f 1304 	bfc	r3, #4, #1
 8001cde:	7193      	strb	r3, [r2, #6]
        xboxHID.BLACK = 0;
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	721a      	strb	r2, [r3, #8]
      }

      if (PS4.getButtonPress(R3)) {
 8001ce6:	2107      	movs	r1, #7
 8001ce8:	481e      	ldr	r0, [pc, #120]	; (8001d64 <_Z10StartGetBTPv+0x5c0>)
 8001cea:	f011 fe03 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00f      	beq.n	8001d14 <_Z10StartGetBTPv+0x570>
        gameHID.ps4ButtonsTag.button_right_thumb = 1;
 8001cf4:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001cf6:	79d3      	ldrb	r3, [r2, #7]
 8001cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cfc:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_RS_BTN;
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001d00:	789b      	ldrb	r3, [r3, #2]
 8001d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001d0a:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <_Z10StartGetBTPv+0x5c4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e00b      	b.n	8001d2c <_Z10StartGetBTPv+0x588>
      } else {
        gameHID.ps4ButtonsTag.button_right_thumb = 0;
 8001d14:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001d16:	79d3      	ldrb	r3, [r2, #7]
 8001d18:	f36f 13c7 	bfc	r3, #7, #1
 8001d1c:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001d20:	789b      	ldrb	r3, [r3, #2]
 8001d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001d2a:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(SHARE)) {
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	480d      	ldr	r0, [pc, #52]	; (8001d64 <_Z10StartGetBTPv+0x5c0>)
 8001d30:	f011 fde0 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d018      	beq.n	8001d6c <_Z10StartGetBTPv+0x5c8>
        gameHID.ps4ButtonsTag.button_share = 1;
 8001d3a:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <_Z10StartGetBTPv+0x5b8>)
 8001d3c:	7993      	ldrb	r3, [r2, #6]
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons |= XBOX_BACK_BTN;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001d46:	789b      	ldrb	r3, [r3, #2]
 8001d48:	f043 0320 	orr.w	r3, r3, #32
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <_Z10StartGetBTPv+0x5bc>)
 8001d50:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <_Z10StartGetBTPv+0x5c4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e014      	b.n	8001d84 <_Z10StartGetBTPv+0x5e0>
 8001d5a:	bf00      	nop
 8001d5c:	200009cc 	.word	0x200009cc
 8001d60:	200009d4 	.word	0x200009d4
 8001d64:	20000848 	.word	0x20000848
 8001d68:	200009ec 	.word	0x200009ec
      } else {
        gameHID.ps4ButtonsTag.button_share = 0;
 8001d6c:	4aa4      	ldr	r2, [pc, #656]	; (8002000 <_Z10StartGetBTPv+0x85c>)
 8001d6e:	7993      	ldrb	r3, [r2, #6]
 8001d70:	f36f 03c3 	bfc	r3, #3, #1
 8001d74:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 8001d76:	4ba3      	ldr	r3, [pc, #652]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001d78:	789b      	ldrb	r3, [r3, #2]
 8001d7a:	f023 0320 	bic.w	r3, r3, #32
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4ba0      	ldr	r3, [pc, #640]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001d82:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(OPTIONS)) {
 8001d84:	2105      	movs	r1, #5
 8001d86:	48a0      	ldr	r0, [pc, #640]	; (8002008 <_Z10StartGetBTPv+0x864>)
 8001d88:	f011 fdb4 	bl	80138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00f      	beq.n	8001db2 <_Z10StartGetBTPv+0x60e>
        gameHID.ps4ButtonsTag.button_start = 1;
 8001d92:	4a9b      	ldr	r2, [pc, #620]	; (8002000 <_Z10StartGetBTPv+0x85c>)
 8001d94:	7993      	ldrb	r3, [r2, #6]
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons |= XBOX_START_BTN;
 8001d9c:	4b99      	ldr	r3, [pc, #612]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001d9e:	789b      	ldrb	r3, [r3, #2]
 8001da0:	f043 0310 	orr.w	r3, r3, #16
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4b97      	ldr	r3, [pc, #604]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001da8:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001daa:	4b98      	ldr	r3, [pc, #608]	; (800200c <_Z10StartGetBTPv+0x868>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e00b      	b.n	8001dca <_Z10StartGetBTPv+0x626>
      } else {
        gameHID.ps4ButtonsTag.button_start = 0;
 8001db2:	4a93      	ldr	r2, [pc, #588]	; (8002000 <_Z10StartGetBTPv+0x85c>)
 8001db4:	7993      	ldrb	r3, [r2, #6]
 8001db6:	f36f 0382 	bfc	r3, #2, #1
 8001dba:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 8001dbc:	4b91      	ldr	r3, [pc, #580]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001dbe:	789b      	ldrb	r3, [r3, #2]
 8001dc0:	f023 0310 	bic.w	r3, r3, #16
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b8f      	ldr	r3, [pc, #572]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001dc8:	709a      	strb	r2, [r3, #2]
      }

      /*We don't want to spam the PS4 controller with rumble updates
       * If we do not do this, latency increases greatly */
      new_rumble_val_L = rx_buf[3];
 8001dca:	4b91      	ldr	r3, [pc, #580]	; (8002010 <_Z10StartGetBTPv+0x86c>)
 8001dcc:	78da      	ldrb	r2, [r3, #3]
 8001dce:	4b91      	ldr	r3, [pc, #580]	; (8002014 <_Z10StartGetBTPv+0x870>)
 8001dd0:	701a      	strb	r2, [r3, #0]
      new_rumble_val_R = rx_buf[5];
 8001dd2:	4b8f      	ldr	r3, [pc, #572]	; (8002010 <_Z10StartGetBTPv+0x86c>)
 8001dd4:	795a      	ldrb	r2, [r3, #5]
 8001dd6:	4b90      	ldr	r3, [pc, #576]	; (8002018 <_Z10StartGetBTPv+0x874>)
 8001dd8:	701a      	strb	r2, [r3, #0]

      if (new_rumble_val_L != old_rumble_val_L || new_rumble_val_R != old_rumble_val_R) {
 8001dda:	4b8e      	ldr	r3, [pc, #568]	; (8002014 <_Z10StartGetBTPv+0x870>)
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	4b8f      	ldr	r3, [pc, #572]	; (800201c <_Z10StartGetBTPv+0x878>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d105      	bne.n	8001df2 <_Z10StartGetBTPv+0x64e>
 8001de6:	4b8c      	ldr	r3, [pc, #560]	; (8002018 <_Z10StartGetBTPv+0x874>)
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	4b8d      	ldr	r3, [pc, #564]	; (8002020 <_Z10StartGetBTPv+0x87c>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d00f      	beq.n	8001e12 <_Z10StartGetBTPv+0x66e>
        PS4.setRumbleOn(new_rumble_val_L, new_rumble_val_R);
 8001df2:	4b88      	ldr	r3, [pc, #544]	; (8002014 <_Z10StartGetBTPv+0x870>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4a88      	ldr	r2, [pc, #544]	; (8002018 <_Z10StartGetBTPv+0x874>)
 8001df8:	7812      	ldrb	r2, [r2, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4882      	ldr	r0, [pc, #520]	; (8002008 <_Z10StartGetBTPv+0x864>)
 8001dfe:	f7fe ff64 	bl	8000cca <_ZN9PS4Parser11setRumbleOnEhh>
        old_rumble_val_L = new_rumble_val_L;
 8001e02:	4b84      	ldr	r3, [pc, #528]	; (8002014 <_Z10StartGetBTPv+0x870>)
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	4b85      	ldr	r3, [pc, #532]	; (800201c <_Z10StartGetBTPv+0x878>)
 8001e08:	701a      	strb	r2, [r3, #0]
        old_rumble_val_R = new_rumble_val_R;
 8001e0a:	4b83      	ldr	r3, [pc, #524]	; (8002018 <_Z10StartGetBTPv+0x874>)
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	4b84      	ldr	r3, [pc, #528]	; (8002020 <_Z10StartGetBTPv+0x87c>)
 8001e10:	701a      	strb	r2, [r3, #0]
      }
      /* After roughly 5+minutes of idle time, disconnect controller
       * Not the best solution since the rate the counter increases is based on BT Latency */
      if (button_press_idle > 400000) {
 8001e12:	4b7e      	ldr	r3, [pc, #504]	; (800200c <_Z10StartGetBTPv+0x868>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a83      	ldr	r2, [pc, #524]	; (8002024 <_Z10StartGetBTPv+0x880>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d90b      	bls.n	8001e34 <_Z10StartGetBTPv+0x690>
        PS4.disconnect();
 8001e1c:	4882      	ldr	r0, [pc, #520]	; (8002028 <_Z10StartGetBTPv+0x884>)
 8001e1e:	f010 fc7a 	bl	8012716 <_ZN5BTHID10disconnectEv>
        rumble_once = 0;
 8001e22:	4b82      	ldr	r3, [pc, #520]	; (800202c <_Z10StartGetBTPv+0x888>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
        button_press_idle = 0;
 8001e28:	4b78      	ldr	r3, [pc, #480]	; (800200c <_Z10StartGetBTPv+0x868>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
        display_run_once = 0;
 8001e2e:	4b80      	ldr	r3, [pc, #512]	; (8002030 <_Z10StartGetBTPv+0x88c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
      }
      button_press_idle++;
 8001e34:	4b75      	ldr	r3, [pc, #468]	; (800200c <_Z10StartGetBTPv+0x868>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	4a74      	ldr	r2, [pc, #464]	; (800200c <_Z10StartGetBTPv+0x868>)
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e1eb      	b.n	8002218 <_Z10StartGetBTPv+0xa74>

    } else if(Btd.incomingXboxOneS) {
 8001e40:	4b7c      	ldr	r3, [pc, #496]	; (8002034 <_Z10StartGetBTPv+0x890>)
 8001e42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 81e6 	beq.w	8002218 <_Z10StartGetBTPv+0xa74>
      xboxHID.leftStickX = XboxOneS.getAnalogHat(LeftHatX);
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	487a      	ldr	r0, [pc, #488]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001e50:	f013 fd1c 	bl	801588c <_ZN14XBOXONESParser12getAnalogHatE13AnalogHatEnum>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001e5a:	819a      	strh	r2, [r3, #12]
      xboxHID.leftStickY = -XboxOneS.getAnalogHat(LeftHatY);
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4876      	ldr	r0, [pc, #472]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001e60:	f013 fd14 	bl	801588c <_ZN14XBOXONESParser12getAnalogHatE13AnalogHatEnum>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	425b      	negs	r3, r3
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	4b65      	ldr	r3, [pc, #404]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001e70:	81da      	strh	r2, [r3, #14]
      /* The Y axis by default is inverted on the Xbox */
      xboxHID.rightStickX = XboxOneS.getAnalogHat(RightHatX);
 8001e72:	2102      	movs	r1, #2
 8001e74:	4870      	ldr	r0, [pc, #448]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001e76:	f013 fd09 	bl	801588c <_ZN14XBOXONESParser12getAnalogHatE13AnalogHatEnum>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b61      	ldr	r3, [pc, #388]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001e80:	821a      	strh	r2, [r3, #16]
      xboxHID.rightStickY = -XboxOneS.getAnalogHat(RightHatY);
 8001e82:	2103      	movs	r1, #3
 8001e84:	486c      	ldr	r0, [pc, #432]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001e86:	f013 fd01 	bl	801588c <_ZN14XBOXONESParser12getAnalogHatE13AnalogHatEnum>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	425b      	negs	r3, r3
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	b21a      	sxth	r2, r3
 8001e94:	4b5b      	ldr	r3, [pc, #364]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001e96:	825a      	strh	r2, [r3, #18]

      xboxHID.L = map(XboxOneS.getButtonPress(L2), 0, 1023, 0, 255);
 8001e98:	2108      	movs	r1, #8
 8001e9a:	4867      	ldr	r0, [pc, #412]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001e9c:	f013 fc54 	bl	8015748 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	23ff      	movs	r3, #255	; 0xff
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001eae:	2100      	movs	r1, #0
 8001eb0:	f7ff fc2a 	bl	8001708 <_Z3maplllll>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	4b52      	ldr	r3, [pc, #328]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001eba:	729a      	strb	r2, [r3, #10]
      xboxHID.R = map(XboxOneS.getButtonPress(R2), 0, 1023, 0, 255);
 8001ebc:	2109      	movs	r1, #9
 8001ebe:	485e      	ldr	r0, [pc, #376]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001ec0:	f013 fc42 	bl	8015748 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	23ff      	movs	r3, #255	; 0xff
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	f7ff fc18 	bl	8001708 <_Z3maplllll>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	4b49      	ldr	r3, [pc, #292]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001ede:	72da      	strb	r2, [r3, #11]

      if (XboxOneS.getButtonClick(XBOX)) {
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	4855      	ldr	r0, [pc, #340]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001ee4:	f013 fc6a 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <_Z10StartGetBTPv+0x75c>
        XboxOneS.disconnect();
 8001eee:	4853      	ldr	r0, [pc, #332]	; (800203c <_Z10StartGetBTPv+0x898>)
 8001ef0:	f010 fc11 	bl	8012716 <_ZN5BTHID10disconnectEv>
        display_run_once = 0;
 8001ef4:	4b4e      	ldr	r3, [pc, #312]	; (8002030 <_Z10StartGetBTPv+0x88c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
        rumble_once = 0;
 8001efa:	4b4c      	ldr	r3, [pc, #304]	; (800202c <_Z10StartGetBTPv+0x888>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
      }

      if(XboxOneS.getButtonClick(A)) {
 8001f00:	210d      	movs	r1, #13
 8001f02:	484d      	ldr	r0, [pc, #308]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001f04:	f013 fc5a 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <_Z10StartGetBTPv+0x778>
        xboxHID.A = 0xFF;
 8001f0e:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001f10:	22ff      	movs	r2, #255	; 0xff
 8001f12:	711a      	strb	r2, [r3, #4]
        button_press_idle = 0;
 8001f14:	4b3d      	ldr	r3, [pc, #244]	; (800200c <_Z10StartGetBTPv+0x868>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e002      	b.n	8001f22 <_Z10StartGetBTPv+0x77e>
      } else {
        xboxHID.A = 0;
 8001f1c:	4b39      	ldr	r3, [pc, #228]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	711a      	strb	r2, [r3, #4]
      }

      if(XboxOneS.getButtonClick(B)) {
 8001f22:	210c      	movs	r1, #12
 8001f24:	4844      	ldr	r0, [pc, #272]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001f26:	f013 fc49 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <_Z10StartGetBTPv+0x79a>
        xboxHID.B = 0xFF;
 8001f30:	4b34      	ldr	r3, [pc, #208]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	715a      	strb	r2, [r3, #5]
        button_press_idle = 0;
 8001f36:	4b35      	ldr	r3, [pc, #212]	; (800200c <_Z10StartGetBTPv+0x868>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	e002      	b.n	8001f44 <_Z10StartGetBTPv+0x7a0>
      } else {
        xboxHID.B = 0;
 8001f3e:	4b31      	ldr	r3, [pc, #196]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	715a      	strb	r2, [r3, #5]
      }

      if(XboxOneS.getButtonClick(X)) {
 8001f44:	210e      	movs	r1, #14
 8001f46:	483c      	ldr	r0, [pc, #240]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001f48:	f013 fc38 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <_Z10StartGetBTPv+0x7bc>
        xboxHID.X = 0xFF;
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001f54:	22ff      	movs	r2, #255	; 0xff
 8001f56:	719a      	strb	r2, [r3, #6]
        button_press_idle = 0;
 8001f58:	4b2c      	ldr	r3, [pc, #176]	; (800200c <_Z10StartGetBTPv+0x868>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e002      	b.n	8001f66 <_Z10StartGetBTPv+0x7c2>
      } else {
        xboxHID.X = 0;
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	719a      	strb	r2, [r3, #6]
      }

      if(XboxOneS.getButtonClick(Y)) {
 8001f66:	210f      	movs	r1, #15
 8001f68:	4833      	ldr	r0, [pc, #204]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001f6a:	f013 fc27 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <_Z10StartGetBTPv+0x7de>
        xboxHID.Y = 0xFF;
 8001f74:	4b23      	ldr	r3, [pc, #140]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001f76:	22ff      	movs	r2, #255	; 0xff
 8001f78:	71da      	strb	r2, [r3, #7]
        button_press_idle = 0;
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <_Z10StartGetBTPv+0x868>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	e002      	b.n	8001f88 <_Z10StartGetBTPv+0x7e4>
      } else {
        xboxHID.Y = 0;
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	71da      	strb	r2, [r3, #7]
      }

      if(XboxOneS.getButtonClick(UP)) {
 8001f88:	2100      	movs	r1, #0
 8001f8a:	482b      	ldr	r0, [pc, #172]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001f8c:	f013 fc16 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <_Z10StartGetBTPv+0x802>
        xboxHID.dButtons |= XBOX_DUP;
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001f98:	789b      	ldrb	r3, [r3, #2]
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001fa2:	709a      	strb	r2, [r3, #2]
 8001fa4:	e006      	b.n	8001fb4 <_Z10StartGetBTPv+0x810>
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001fa8:	789b      	ldrb	r3, [r3, #2]
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001fb2:	709a      	strb	r2, [r3, #2]
      }

      if(XboxOneS.getButtonClick(RIGHT)) {
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4820      	ldr	r0, [pc, #128]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001fb8:	f013 fc00 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <_Z10StartGetBTPv+0x82e>
        xboxHID.dButtons |= XBOX_DRIGHT;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001fc4:	789b      	ldrb	r3, [r3, #2]
 8001fc6:	f043 0308 	orr.w	r3, r3, #8
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001fce:	709a      	strb	r2, [r3, #2]
 8001fd0:	e006      	b.n	8001fe0 <_Z10StartGetBTPv+0x83c>
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001fd4:	789b      	ldrb	r3, [r3, #2]
 8001fd6:	f023 0308 	bic.w	r3, r3, #8
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001fde:	709a      	strb	r2, [r3, #2]
      }

      if(XboxOneS.getButtonClick(DOWN)) {
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	4815      	ldr	r0, [pc, #84]	; (8002038 <_Z10StartGetBTPv+0x894>)
 8001fe4:	f013 fbea 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d028      	beq.n	8002040 <_Z10StartGetBTPv+0x89c>
        xboxHID.dButtons |= XBOX_DDOWN;
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001ff0:	789b      	ldrb	r3, [r3, #2]
 8001ff2:	f043 0302 	orr.w	r3, r3, #2
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	4b02      	ldr	r3, [pc, #8]	; (8002004 <_Z10StartGetBTPv+0x860>)
 8001ffa:	709a      	strb	r2, [r3, #2]
 8001ffc:	e027      	b.n	800204e <_Z10StartGetBTPv+0x8aa>
 8001ffe:	bf00      	nop
 8002000:	200009cc 	.word	0x200009cc
 8002004:	200009d4 	.word	0x200009d4
 8002008:	20000848 	.word	0x20000848
 800200c:	200009ec 	.word	0x200009ec
 8002010:	200003d4 	.word	0x200003d4
 8002014:	200009ea 	.word	0x200009ea
 8002018:	200009eb 	.word	0x200009eb
 800201c:	200009e8 	.word	0x200009e8
 8002020:	200009e9 	.word	0x200009e9
 8002024:	00061a80 	.word	0x00061a80
 8002028:	200007d0 	.word	0x200007d0
 800202c:	200009ac 	.word	0x200009ac
 8002030:	200009c4 	.word	0x200009c4
 8002034:	200006a0 	.word	0x200006a0
 8002038:	20000910 	.word	0x20000910
 800203c:	20000898 	.word	0x20000898
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 8002040:	4b7d      	ldr	r3, [pc, #500]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 8002042:	789b      	ldrb	r3, [r3, #2]
 8002044:	f023 0302 	bic.w	r3, r3, #2
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b7b      	ldr	r3, [pc, #492]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 800204c:	709a      	strb	r2, [r3, #2]
      }

      if(XboxOneS.getButtonClick(LEFT)) {
 800204e:	2103      	movs	r1, #3
 8002050:	487a      	ldr	r0, [pc, #488]	; (800223c <_Z10StartGetBTPv+0xa98>)
 8002052:	f013 fbb3 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <_Z10StartGetBTPv+0x8c8>
        xboxHID.dButtons |= XBOX_DLEFT;
 800205c:	4b76      	ldr	r3, [pc, #472]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 800205e:	789b      	ldrb	r3, [r3, #2]
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b74      	ldr	r3, [pc, #464]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 8002068:	709a      	strb	r2, [r3, #2]
 800206a:	e006      	b.n	800207a <_Z10StartGetBTPv+0x8d6>
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 800206c:	4b72      	ldr	r3, [pc, #456]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 800206e:	789b      	ldrb	r3, [r3, #2]
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b70      	ldr	r3, [pc, #448]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 8002078:	709a      	strb	r2, [r3, #2]
      }

      if(XboxOneS.getButtonClick(L1)) {
 800207a:	210a      	movs	r1, #10
 800207c:	486f      	ldr	r0, [pc, #444]	; (800223c <_Z10StartGetBTPv+0xa98>)
 800207e:	f013 fb9d 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <_Z10StartGetBTPv+0x8f2>
        xboxHID.WHITE = 0xFF;
 8002088:	4b6b      	ldr	r3, [pc, #428]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 800208a:	22ff      	movs	r2, #255	; 0xff
 800208c:	725a      	strb	r2, [r3, #9]
        button_press_idle = 0;
 800208e:	4b6c      	ldr	r3, [pc, #432]	; (8002240 <_Z10StartGetBTPv+0xa9c>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e002      	b.n	800209c <_Z10StartGetBTPv+0x8f8>
      } else {
        xboxHID.WHITE = 0;
 8002096:	4b68      	ldr	r3, [pc, #416]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 8002098:	2200      	movs	r2, #0
 800209a:	725a      	strb	r2, [r3, #9]
      }

      if(XboxOneS.getButtonClick(R1)) {
 800209c:	210b      	movs	r1, #11
 800209e:	4867      	ldr	r0, [pc, #412]	; (800223c <_Z10StartGetBTPv+0xa98>)
 80020a0:	f013 fb8c 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d006      	beq.n	80020b8 <_Z10StartGetBTPv+0x914>
        xboxHID.BLACK = 0xFF;
 80020aa:	4b63      	ldr	r3, [pc, #396]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 80020ac:	22ff      	movs	r2, #255	; 0xff
 80020ae:	721a      	strb	r2, [r3, #8]
        button_press_idle = 0;
 80020b0:	4b63      	ldr	r3, [pc, #396]	; (8002240 <_Z10StartGetBTPv+0xa9c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	e002      	b.n	80020be <_Z10StartGetBTPv+0x91a>
      } else {
        xboxHID.BLACK = 0;
 80020b8:	4b5f      	ldr	r3, [pc, #380]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	721a      	strb	r2, [r3, #8]
      }

      if (XboxOneS.getButtonClick(L3)) {
 80020be:	2106      	movs	r1, #6
 80020c0:	485e      	ldr	r0, [pc, #376]	; (800223c <_Z10StartGetBTPv+0xa98>)
 80020c2:	f013 fb7b 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00f      	beq.n	80020ec <_Z10StartGetBTPv+0x948>
        gameHID.ps4ButtonsTag.button_left_thumb = 1;
 80020cc:	4a5d      	ldr	r2, [pc, #372]	; (8002244 <_Z10StartGetBTPv+0xaa0>)
 80020ce:	79d3      	ldrb	r3, [r2, #7]
 80020d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d4:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_LS_BTN;
 80020d6:	4b58      	ldr	r3, [pc, #352]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 80020d8:	789b      	ldrb	r3, [r3, #2]
 80020da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b55      	ldr	r3, [pc, #340]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 80020e2:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 80020e4:	4b56      	ldr	r3, [pc, #344]	; (8002240 <_Z10StartGetBTPv+0xa9c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	e00b      	b.n	8002104 <_Z10StartGetBTPv+0x960>
      } else {
        gameHID.ps4ButtonsTag.button_left_thumb = 0;
 80020ec:	4a55      	ldr	r2, [pc, #340]	; (8002244 <_Z10StartGetBTPv+0xaa0>)
 80020ee:	79d3      	ldrb	r3, [r2, #7]
 80020f0:	f36f 1386 	bfc	r3, #6, #1
 80020f4:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 80020f6:	4b50      	ldr	r3, [pc, #320]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 80020f8:	789b      	ldrb	r3, [r3, #2]
 80020fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b4d      	ldr	r3, [pc, #308]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 8002102:	709a      	strb	r2, [r3, #2]
      }

      if (XboxOneS.getButtonClick(R3)) {
 8002104:	2107      	movs	r1, #7
 8002106:	484d      	ldr	r0, [pc, #308]	; (800223c <_Z10StartGetBTPv+0xa98>)
 8002108:	f013 fb58 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <_Z10StartGetBTPv+0x984>
        xboxHID.dButtons |= XBOX_RS_BTN;
 8002112:	4b49      	ldr	r3, [pc, #292]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 8002114:	789b      	ldrb	r3, [r3, #2]
 8002116:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b46      	ldr	r3, [pc, #280]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 800211e:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8002120:	4b47      	ldr	r3, [pc, #284]	; (8002240 <_Z10StartGetBTPv+0xa9c>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e006      	b.n	8002136 <_Z10StartGetBTPv+0x992>
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 8002128:	4b43      	ldr	r3, [pc, #268]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 800212a:	789b      	ldrb	r3, [r3, #2]
 800212c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b41      	ldr	r3, [pc, #260]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 8002134:	709a      	strb	r2, [r3, #2]
      }

      if (XboxOneS.getButtonClick(VIEW)) {
 8002136:	2104      	movs	r1, #4
 8002138:	4840      	ldr	r0, [pc, #256]	; (800223c <_Z10StartGetBTPv+0xa98>)
 800213a:	f013 fb3f 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <_Z10StartGetBTPv+0x9b6>
        xboxHID.dButtons |= XBOX_BACK_BTN;
 8002144:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 8002146:	789b      	ldrb	r3, [r3, #2]
 8002148:	f043 0320 	orr.w	r3, r3, #32
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 8002150:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8002152:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <_Z10StartGetBTPv+0xa9c>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e006      	b.n	8002168 <_Z10StartGetBTPv+0x9c4>
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 800215c:	789b      	ldrb	r3, [r3, #2]
 800215e:	f023 0320 	bic.w	r3, r3, #32
 8002162:	b2da      	uxtb	r2, r3
 8002164:	4b34      	ldr	r3, [pc, #208]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 8002166:	709a      	strb	r2, [r3, #2]
      }

      if (XboxOneS.getButtonClick(MENU)) {
 8002168:	2105      	movs	r1, #5
 800216a:	4834      	ldr	r0, [pc, #208]	; (800223c <_Z10StartGetBTPv+0xa98>)
 800216c:	f013 fb26 	bl	80157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <_Z10StartGetBTPv+0x9e8>
        xboxHID.dButtons |= XBOX_START_BTN;
 8002176:	4b30      	ldr	r3, [pc, #192]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 8002178:	789b      	ldrb	r3, [r3, #2]
 800217a:	f043 0310 	orr.w	r3, r3, #16
 800217e:	b2da      	uxtb	r2, r3
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 8002182:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8002184:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <_Z10StartGetBTPv+0xa9c>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e006      	b.n	800219a <_Z10StartGetBTPv+0x9f6>
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 800218c:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 800218e:	789b      	ldrb	r3, [r3, #2]
 8002190:	f023 0310 	bic.w	r3, r3, #16
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b28      	ldr	r3, [pc, #160]	; (8002238 <_Z10StartGetBTPv+0xa94>)
 8002198:	709a      	strb	r2, [r3, #2]
      }

      /*We don't want to spam the XboxOneS controller with rumble updates
       * If we do not do this, latency increases greatly */
      new_rumble_val_L = rx_buf[3];
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <_Z10StartGetBTPv+0xaa4>)
 800219c:	78da      	ldrb	r2, [r3, #3]
 800219e:	4b2b      	ldr	r3, [pc, #172]	; (800224c <_Z10StartGetBTPv+0xaa8>)
 80021a0:	701a      	strb	r2, [r3, #0]
      new_rumble_val_R = rx_buf[5];
 80021a2:	4b29      	ldr	r3, [pc, #164]	; (8002248 <_Z10StartGetBTPv+0xaa4>)
 80021a4:	795a      	ldrb	r2, [r3, #5]
 80021a6:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <_Z10StartGetBTPv+0xaac>)
 80021a8:	701a      	strb	r2, [r3, #0]

      if (new_rumble_val_L != old_rumble_val_L || new_rumble_val_R != old_rumble_val_R) {
 80021aa:	4b28      	ldr	r3, [pc, #160]	; (800224c <_Z10StartGetBTPv+0xaa8>)
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <_Z10StartGetBTPv+0xab0>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d105      	bne.n	80021c2 <_Z10StartGetBTPv+0xa1e>
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <_Z10StartGetBTPv+0xaac>)
 80021b8:	781a      	ldrb	r2, [r3, #0]
 80021ba:	4b27      	ldr	r3, [pc, #156]	; (8002258 <_Z10StartGetBTPv+0xab4>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d014      	beq.n	80021ec <_Z10StartGetBTPv+0xa48>
        XboxOneS.setRumbleOn(new_rumble_val_L, new_rumble_val_R, new_rumble_val_L, new_rumble_val_R);
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <_Z10StartGetBTPv+0xaa8>)
 80021c4:	7819      	ldrb	r1, [r3, #0]
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <_Z10StartGetBTPv+0xaac>)
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <_Z10StartGetBTPv+0xaa8>)
 80021cc:	7818      	ldrb	r0, [r3, #0]
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <_Z10StartGetBTPv+0xaac>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	4603      	mov	r3, r0
 80021d6:	4819      	ldr	r0, [pc, #100]	; (800223c <_Z10StartGetBTPv+0xa98>)
 80021d8:	f013 fcaa 	bl	8015b30 <_ZN14XBOXONESParser11setRumbleOnEhhhh>
        old_rumble_val_L = new_rumble_val_L;
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <_Z10StartGetBTPv+0xaa8>)
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <_Z10StartGetBTPv+0xab0>)
 80021e2:	701a      	strb	r2, [r3, #0]
        old_rumble_val_R = new_rumble_val_R;
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <_Z10StartGetBTPv+0xaac>)
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <_Z10StartGetBTPv+0xab4>)
 80021ea:	701a      	strb	r2, [r3, #0]
      }

      /* After roughly 5+minutes of idle time, disconnect controller
       * Not the best solution since the rate the counter increases is based on BT Latency */
      if (button_press_idle > 400000) {
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <_Z10StartGetBTPv+0xa9c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1a      	ldr	r2, [pc, #104]	; (800225c <_Z10StartGetBTPv+0xab8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d90b      	bls.n	800220e <_Z10StartGetBTPv+0xa6a>
        XboxOneS.disconnect();
 80021f6:	481a      	ldr	r0, [pc, #104]	; (8002260 <_Z10StartGetBTPv+0xabc>)
 80021f8:	f010 fa8d 	bl	8012716 <_ZN5BTHID10disconnectEv>
        rumble_once = 0;
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <_Z10StartGetBTPv+0xac0>)
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
        button_press_idle = 0;
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <_Z10StartGetBTPv+0xa9c>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
        display_run_once = 0;
 8002208:	4b17      	ldr	r3, [pc, #92]	; (8002268 <_Z10StartGetBTPv+0xac4>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
      }
      button_press_idle++;
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <_Z10StartGetBTPv+0xa9c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <_Z10StartGetBTPv+0xa9c>)
 8002216:	6013      	str	r3, [r2, #0]
    }


#if rtos_delay_view
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getBT;
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <_Z10StartGetBTPv+0xac8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	b29a      	uxth	r2, r3
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <_Z10StartGetBTPv+0xacc>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	b29a      	uxth	r2, r3
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <_Z10StartGetBTPv+0xacc>)
 800222a:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(1);
 800222c:	2001      	movs	r0, #1
 800222e:	f009 f9f3 	bl	800b618 <osDelay>
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 8002232:	f7ff bb14 	b.w	800185e <_Z10StartGetBTPv+0xba>
 8002236:	bf00      	nop
 8002238:	200009d4 	.word	0x200009d4
 800223c:	20000910 	.word	0x20000910
 8002240:	200009ec 	.word	0x200009ec
 8002244:	200009cc 	.word	0x200009cc
 8002248:	200003d4 	.word	0x200003d4
 800224c:	200009ea 	.word	0x200009ea
 8002250:	200009eb 	.word	0x200009eb
 8002254:	200009e8 	.word	0x200009e8
 8002258:	200009e9 	.word	0x200009e9
 800225c:	00061a80 	.word	0x00061a80
 8002260:	20000898 	.word	0x20000898
 8002264:	200009ac 	.word	0x200009ac
 8002268:	200009c4 	.word	0x200009c4
 800226c:	200004cc 	.word	0x200004cc
 8002270:	200009c6 	.word	0x200009c6

08002274 <_Z12StartSendUSBPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
    {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
  MX_USB_DEVICE_Init();
 800227c:	f00b fe3e 	bl	800defc <MX_USB_DEVICE_Init>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
#endif

#if OG_XBOX_SETUP
#if rtos_delay_view
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <_Z12StartSendUSBPv+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	b29a      	uxth	r2, r3
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <_Z12StartSendUSBPv+0x44>)
 800228a:	801a      	strh	r2, [r3, #0]
#endif
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 800228c:	2214      	movs	r2, #20
 800228e:	490b      	ldr	r1, [pc, #44]	; (80022bc <_Z12StartSendUSBPv+0x48>)
 8002290:	480b      	ldr	r0, [pc, #44]	; (80022c0 <_Z12StartSendUSBPv+0x4c>)
 8002292:	f007 fe5d 	bl	8009f50 <USBD_HID_SendReport>
#if rtos_delay_view
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getUSB;
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <_Z12StartSendUSBPv+0x40>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	b29a      	uxth	r2, r3
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <_Z12StartSendUSBPv+0x44>)
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <_Z12StartSendUSBPv+0x44>)
 80022a8:	801a      	strh	r2, [r3, #0]
#endif
#endif
    osDelay(1);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f009 f9b4 	bl	800b618 <osDelay>
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 80022b0:	e7e6      	b.n	8002280 <_Z12StartSendUSBPv+0xc>
 80022b2:	bf00      	nop
 80022b4:	200004cc 	.word	0x200004cc
 80022b8:	200009c8 	.word	0x200009c8
 80022bc:	200009d4 	.word	0x200009d4
 80022c0:	2000580c 	.word	0x2000580c

080022c4 <_Z19StartControllerJoinPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerJoin */
void StartControllerJoin(void *argument)
    {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerJoin */
  /* Infinite loop */
  for (;;)
      {
    if (PS4.connected() && !rumble_once) {
 80022cc:	4810      	ldr	r0, [pc, #64]	; (8002310 <_Z19StartControllerJoinPv+0x4c>)
 80022ce:	f7fe fd75 	bl	8000dbc <_ZN5PS4BT9connectedEv>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <_Z19StartControllerJoinPv+0x20>
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <_Z19StartControllerJoinPv+0x50>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <_Z19StartControllerJoinPv+0x20>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <_Z19StartControllerJoinPv+0x22>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00d      	beq.n	8002306 <_Z19StartControllerJoinPv+0x42>
      PS4.setRumbleOn(RumbleLow);
 80022ea:	2120      	movs	r1, #32
 80022ec:	480a      	ldr	r0, [pc, #40]	; (8002318 <_Z19StartControllerJoinPv+0x54>)
 80022ee:	f7fe fcd4 	bl	8000c9a <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
      osDelay(500);
 80022f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022f6:	f009 f98f 	bl	800b618 <osDelay>
      PS4.setRumbleOff();
 80022fa:	4807      	ldr	r0, [pc, #28]	; (8002318 <_Z19StartControllerJoinPv+0x54>)
 80022fc:	f7fe fcc0 	bl	8000c80 <_ZN9PS4Parser12setRumbleOffEv>
      rumble_once = 1;
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <_Z19StartControllerJoinPv+0x50>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
    }
    osDelay(300);
 8002306:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800230a:	f009 f985 	bl	800b618 <osDelay>
    if (PS4.connected() && !rumble_once) {
 800230e:	e7dd      	b.n	80022cc <_Z19StartControllerJoinPv+0x8>
 8002310:	200007d0 	.word	0x200007d0
 8002314:	200009ac 	.word	0x200009ac
 8002318:	20000848 	.word	0x20000848

0800231c <_Z12StartPairingPv>:
  }
  /* USER CODE END StartControllerJoin */
}

void StartPairing(void *argument)
    {
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPairing */
      ssd1306_Fill(Black_);
 8002324:	2000      	movs	r0, #0
 8002326:	f007 fa8d 	bl	8009844 <ssd1306_Fill>
      ssd1306_UpdateScreen();
 800232a:	f007 faaf 	bl	800988c <ssd1306_UpdateScreen>
      ssd1306_SetCursor((128 - 11 * 10) / 2, 0);
 800232e:	2100      	movs	r1, #0
 8002330:	2009      	movs	r0, #9
 8002332:	f007 fbe1 	bl	8009af8 <ssd1306_SetCursor>
      ssd1306_WriteString("Pairing...", Font_11x18, White_);
 8002336:	4a4b      	ldr	r2, [pc, #300]	; (8002464 <_Z12StartPairingPv+0x148>)
 8002338:	2301      	movs	r3, #1
 800233a:	ca06      	ldmia	r2, {r1, r2}
 800233c:	484a      	ldr	r0, [pc, #296]	; (8002468 <_Z12StartPairingPv+0x14c>)
 800233e:	f007 fbb5 	bl	8009aac <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 8002342:	f007 faa3 	bl	800988c <ssd1306_UpdateScreen>

      if (Usb.Init() == -1) {
 8002346:	4849      	ldr	r0, [pc, #292]	; (800246c <_Z12StartPairingPv+0x150>)
 8002348:	f000 fa38 	bl	80027bc <_ZN8MAX3421eI3P102P9E4InitEv>
 800234c:	4603      	mov	r3, r0
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <_Z12StartPairingPv+0x4c>
              Serial.print(F("\r\nOSC did not start"));
 800235e:	4944      	ldr	r1, [pc, #272]	; (8002470 <_Z12StartPairingPv+0x154>)
 8002360:	4844      	ldr	r0, [pc, #272]	; (8002474 <_Z12StartPairingPv+0x158>)
 8002362:	f7fe f96b 	bl	800063c <_ZN5Print5printEPK19__FlashStringHelper>
              while (1)
 8002366:	e7fe      	b.n	8002366 <_Z12StartPairingPv+0x4a>
                ; // Halt
          } else {
            Serial.print("\nStarting pairing\r\n");
 8002368:	4943      	ldr	r1, [pc, #268]	; (8002478 <_Z12StartPairingPv+0x15c>)
 800236a:	4842      	ldr	r0, [pc, #264]	; (8002474 <_Z12StartPairingPv+0x158>)
 800236c:	f7fe f974 	bl	8000658 <_ZN5Print5printEPKc>
          }
      Usb.Task();
 8002370:	483e      	ldr	r0, [pc, #248]	; (800246c <_Z12StartPairingPv+0x150>)
 8002372:	f012 f98b 	bl	801468c <_ZN3USB4TaskEv>
      BT_TEST.pair();
 8002376:	4841      	ldr	r0, [pc, #260]	; (800247c <_Z12StartPairingPv+0x160>)
 8002378:	f7fe fc3c 	bl	8000bf4 <_ZN5BTHID4pairEv>

      while(Btd.connectToHIDDevice == 0) {
 800237c:	4b40      	ldr	r3, [pc, #256]	; (8002480 <_Z12StartPairingPv+0x164>)
 800237e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002382:	2b00      	cmp	r3, #0
 8002384:	d14d      	bne.n	8002422 <_Z12StartPairingPv+0x106>
            Usb.Task();
 8002386:	4839      	ldr	r0, [pc, #228]	; (800246c <_Z12StartPairingPv+0x150>)
 8002388:	f012 f980 	bl	801468c <_ZN3USB4TaskEv>
            if(state == 0) {
 800238c:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <_Z12StartPairingPv+0x168>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d107      	bne.n	80023a4 <_Z12StartPairingPv+0x88>
              free_start = xTaskGetTickCount();
 8002394:	f00a fa18 	bl	800c7c8 <xTaskGetTickCount>
 8002398:	4603      	mov	r3, r0
 800239a:	4a3b      	ldr	r2, [pc, #236]	; (8002488 <_Z12StartPairingPv+0x16c>)
 800239c:	6013      	str	r3, [r2, #0]
              state = 1;
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <_Z12StartPairingPv+0x168>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
            }
            if (state == 1) {
 80023a4:	4b37      	ldr	r3, [pc, #220]	; (8002484 <_Z12StartPairingPv+0x168>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d104      	bne.n	80023b6 <_Z12StartPairingPv+0x9a>
              free_start_2 = xTaskGetTickCount();
 80023ac:	f00a fa0c 	bl	800c7c8 <xTaskGetTickCount>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4a36      	ldr	r2, [pc, #216]	; (800248c <_Z12StartPairingPv+0x170>)
 80023b4:	6013      	str	r3, [r2, #0]
            }
            if(time_up > 100) {
 80023b6:	4b36      	ldr	r3, [pc, #216]	; (8002490 <_Z12StartPairingPv+0x174>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b64      	cmp	r3, #100	; 0x64
 80023bc:	d906      	bls.n	80023cc <_Z12StartPairingPv+0xb0>
              EEPROM.write(40, SYS_DEFAULT);
 80023be:	2200      	movs	r2, #0
 80023c0:	2128      	movs	r1, #40	; 0x28
 80023c2:	4834      	ldr	r0, [pc, #208]	; (8002494 <_Z12StartPairingPv+0x178>)
 80023c4:	f7fe fbe9 	bl	8000b9a <_ZN11EEPROMClass5writeEih>
              NVIC_SystemReset();
 80023c8:	f7fe fafa 	bl	80009c0 <__NVIC_SystemReset>
            }
            if(free_start_2 - free_start >= 1000) {
 80023cc:	4b2f      	ldr	r3, [pc, #188]	; (800248c <_Z12StartPairingPv+0x170>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <_Z12StartPairingPv+0x16c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023da:	d3cf      	bcc.n	800237c <_Z12StartPairingPv+0x60>
              state = 0;
 80023dc:	4b29      	ldr	r3, [pc, #164]	; (8002484 <_Z12StartPairingPv+0x168>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
              time_up++;
 80023e2:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <_Z12StartPairingPv+0x174>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	3301      	adds	r3, #1
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b29      	ldr	r3, [pc, #164]	; (8002490 <_Z12StartPairingPv+0x174>)
 80023ec:	701a      	strb	r2, [r3, #0]
              sprintf(timer_str, "%d", (100-time_up));
 80023ee:	4b28      	ldr	r3, [pc, #160]	; (8002490 <_Z12StartPairingPv+0x174>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80023f6:	461a      	mov	r2, r3
 80023f8:	4927      	ldr	r1, [pc, #156]	; (8002498 <_Z12StartPairingPv+0x17c>)
 80023fa:	4828      	ldr	r0, [pc, #160]	; (800249c <_Z12StartPairingPv+0x180>)
 80023fc:	f013 fe94 	bl	8016128 <siprintf>
              ssd1306_SetCursor((128 - 3 * 10) / 2, 26);
 8002400:	211a      	movs	r1, #26
 8002402:	2031      	movs	r0, #49	; 0x31
 8002404:	f007 fb78 	bl	8009af8 <ssd1306_SetCursor>
              ssd1306_WriteString(timer_str, Font_11x18, White_);
 8002408:	4a16      	ldr	r2, [pc, #88]	; (8002464 <_Z12StartPairingPv+0x148>)
 800240a:	2301      	movs	r3, #1
 800240c:	ca06      	ldmia	r2, {r1, r2}
 800240e:	4823      	ldr	r0, [pc, #140]	; (800249c <_Z12StartPairingPv+0x180>)
 8002410:	f007 fb4c 	bl	8009aac <ssd1306_WriteString>
              ssd1306_UpdateScreen();
 8002414:	f007 fa3a 	bl	800988c <ssd1306_UpdateScreen>
              osDelay(1000);
 8002418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800241c:	f009 f8fc 	bl	800b618 <osDelay>
      while(Btd.connectToHIDDevice == 0) {
 8002420:	e7ac      	b.n	800237c <_Z12StartPairingPv+0x60>
            }

          }

          ssd1306_Fill(Black_);
 8002422:	2000      	movs	r0, #0
 8002424:	f007 fa0e 	bl	8009844 <ssd1306_Fill>
          ssd1306_UpdateScreen();
 8002428:	f007 fa30 	bl	800988c <ssd1306_UpdateScreen>
          ssd1306_SetCursor((128 - 7 * 10) / 2, 0);
 800242c:	2100      	movs	r1, #0
 800242e:	201d      	movs	r0, #29
 8002430:	f007 fb62 	bl	8009af8 <ssd1306_SetCursor>
          ssd1306_WriteString("Paired!", Font_11x18, White_);
 8002434:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <_Z12StartPairingPv+0x148>)
 8002436:	2301      	movs	r3, #1
 8002438:	ca06      	ldmia	r2, {r1, r2}
 800243a:	4819      	ldr	r0, [pc, #100]	; (80024a0 <_Z12StartPairingPv+0x184>)
 800243c:	f007 fb36 	bl	8009aac <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8002440:	f007 fa24 	bl	800988c <ssd1306_UpdateScreen>


          osDelay(10000);
 8002444:	f242 7010 	movw	r0, #10000	; 0x2710
 8002448:	f009 f8e6 	bl	800b618 <osDelay>

          Serial.print("\r\nConnected!");
 800244c:	4915      	ldr	r1, [pc, #84]	; (80024a4 <_Z12StartPairingPv+0x188>)
 800244e:	4809      	ldr	r0, [pc, #36]	; (8002474 <_Z12StartPairingPv+0x158>)
 8002450:	f7fe f902 	bl	8000658 <_ZN5Print5printEPKc>
          EEPROM.write(40, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2128      	movs	r1, #40	; 0x28
 8002458:	480e      	ldr	r0, [pc, #56]	; (8002494 <_Z12StartPairingPv+0x178>)
 800245a:	f7fe fb9e 	bl	8000b9a <_ZN11EEPROMClass5writeEih>
          NVIC_SystemReset();
 800245e:	f7fe faaf 	bl	80009c0 <__NVIC_SystemReset>
 8002462:	bf00      	nop
 8002464:	20000010 	.word	0x20000010
 8002468:	08016948 	.word	0x08016948
 800246c:	200005e4 	.word	0x200005e4
 8002470:	080168f8 	.word	0x080168f8
 8002474:	200005cc 	.word	0x200005cc
 8002478:	08016954 	.word	0x08016954
 800247c:	20000934 	.word	0x20000934
 8002480:	200006a0 	.word	0x200006a0
 8002484:	20000a04 	.word	0x20000a04
 8002488:	200009fc 	.word	0x200009fc
 800248c:	20000a00 	.word	0x20000a00
 8002490:	200009f0 	.word	0x200009f0
 8002494:	200003d0 	.word	0x200003d0
 8002498:	08016968 	.word	0x08016968
 800249c:	200009f4 	.word	0x200009f4
 80024a0:	0801696c 	.word	0x0801696c
 80024a4:	08016974 	.word	0x08016974

080024a8 <_Z16StartButtonPressPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonPress */
void StartButtonPress(void *argument)
    {
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPress */
  /* Infinite loop */
  for (;;)
      {
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 80024b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b4:	4820      	ldr	r0, [pc, #128]	; (8002538 <_Z16StartButtonPressPv+0x90>)
 80024b6:	f001 fb17 	bl	8003ae8 <HAL_GPIO_ReadPin>
 80024ba:	4603      	mov	r3, r0
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	b25c      	sxtb	r4, r3
        (HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 80024c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024c4:	481d      	ldr	r0, [pc, #116]	; (800253c <_Z16StartButtonPressPv+0x94>)
 80024c6:	f001 fb0f 	bl	8003ae8 <HAL_GPIO_ReadPin>
 80024ca:	4603      	mov	r3, r0
 80024cc:	005b      	lsls	r3, r3, #1
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 80024ce:	b25b      	sxtb	r3, r3
 80024d0:	4323      	orrs	r3, r4
 80024d2:	b25c      	sxtb	r4, r3
        (HAL_GPIO_ReadPin(FORWARD_BTN_GPIO) << 0);
 80024d4:	2110      	movs	r1, #16
 80024d6:	4819      	ldr	r0, [pc, #100]	; (800253c <_Z16StartButtonPressPv+0x94>)
 80024d8:	f001 fb06 	bl	8003ae8 <HAL_GPIO_ReadPin>
 80024dc:	4603      	mov	r3, r0
 80024de:	b25b      	sxtb	r3, r3
        (HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 80024e0:	4323      	orrs	r3, r4
 80024e2:	b25b      	sxtb	r3, r3
 80024e4:	b2da      	uxtb	r2, r3
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <_Z16StartButtonPressPv+0x98>)
 80024e8:	701a      	strb	r2, [r3, #0]

    if (BUTTON_PRESSED) {
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <_Z16StartButtonPressPv+0x98>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b07      	cmp	r3, #7
 80024f0:	d018      	beq.n	8002524 <_Z16StartButtonPressPv+0x7c>
      if (buttonDebounced == 1) {  // you only get here if the same button combination has been pressed for 100mS
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <_Z16StartButtonPressPv+0x9c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d110      	bne.n	800251c <_Z16StartButtonPressPv+0x74>
        if (buttonProcessed == 0) { // here's where we do the real work on the keyboard, and ensure we only do it once/keypress
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <_Z16StartButtonPressPv+0xa0>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d116      	bne.n	8002530 <_Z16StartButtonPressPv+0x88>
          buttonProcessed = 1;
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <_Z16StartButtonPressPv+0xa0>)
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
          ProcessKeyCodeInContext(keyCode);
 8002508:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <_Z16StartButtonPressPv+0x98>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f8b9 	bl	8001684 <_Z23ProcessKeyCodeInContexth>
          Serial.print("Button Pressed\n");
 8002512:	490e      	ldr	r1, [pc, #56]	; (800254c <_Z16StartButtonPressPv+0xa4>)
 8002514:	480e      	ldr	r0, [pc, #56]	; (8002550 <_Z16StartButtonPressPv+0xa8>)
 8002516:	f7fe f89f 	bl	8000658 <_ZN5Print5printEPKc>
 800251a:	e009      	b.n	8002530 <_Z16StartButtonPressPv+0x88>
        }
      } else {
        buttonDebounced = true;
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <_Z16StartButtonPressPv+0x9c>)
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	e005      	b.n	8002530 <_Z16StartButtonPressPv+0x88>
      }
    } else {
      buttonDebounced = false;
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <_Z16StartButtonPressPv+0x9c>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
      buttonProcessed = false;
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <_Z16StartButtonPressPv+0xa0>)
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
    }
//  	Serial.print("\r\n");
//  	Serial.print(keyCode);
    osDelay(100);
 8002530:	2064      	movs	r0, #100	; 0x64
 8002532:	f009 f871 	bl	800b618 <osDelay>
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8002536:	e7bb      	b.n	80024b0 <_Z16StartButtonPressPv+0x8>
 8002538:	40020000 	.word	0x40020000
 800253c:	40020400 	.word	0x40020400
 8002540:	20000000 	.word	0x20000000
 8002544:	200009c1 	.word	0x200009c1
 8002548:	200009c2 	.word	0x200009c2
 800254c:	08016984 	.word	0x08016984
 8002550:	200005cc 	.word	0x200005cc

08002554 <_Z14StartUpdateLCDPv>:
 * @brief Function implementing the updateLCD thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUpdateLCD */
void StartUpdateLCD(void *argument) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  //ssd1306_TestAll();
  //ssd1306_Fill(Black_);
  //ssd1306_UpdateScreen();
  for (;;) {
#if rtos_delay_view
    timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14);
 800255c:	4b76      	ldr	r3, [pc, #472]	; (8002738 <_Z14StartUpdateLCDPv+0x1e4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b75      	ldr	r3, [pc, #468]	; (800273c <_Z14StartUpdateLCDPv+0x1e8>)
 8002566:	801a      	strh	r2, [r3, #0]
#endif
    if (display_run_once == 0) {
 8002568:	4b75      	ldr	r3, [pc, #468]	; (8002740 <_Z14StartUpdateLCDPv+0x1ec>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	f040 80d5 	bne.w	800271c <_Z14StartUpdateLCDPv+0x1c8>
      ssd1306_Fill(Black_);
 8002572:	2000      	movs	r0, #0
 8002574:	f007 f966 	bl	8009844 <ssd1306_Fill>
      ssd1306_UpdateScreen();
 8002578:	f007 f988 	bl	800988c <ssd1306_UpdateScreen>
      switch (display_no) {
 800257c:	4b71      	ldr	r3, [pc, #452]	; (8002744 <_Z14StartUpdateLCDPv+0x1f0>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b07      	cmp	r3, #7
 8002582:	f000 80a8 	beq.w	80026d6 <_Z14StartUpdateLCDPv+0x182>
 8002586:	2b07      	cmp	r3, #7
 8002588:	f300 80c8 	bgt.w	800271c <_Z14StartUpdateLCDPv+0x1c8>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <_Z14StartUpdateLCDPv+0x44>
 8002590:	2b01      	cmp	r3, #1
 8002592:	f000 808a 	beq.w	80026aa <_Z14StartUpdateLCDPv+0x156>
 8002596:	e0c1      	b.n	800271c <_Z14StartUpdateLCDPv+0x1c8>
        case 0: {
          Serial.print("\nInside case 0\n");
 8002598:	496b      	ldr	r1, [pc, #428]	; (8002748 <_Z14StartUpdateLCDPv+0x1f4>)
 800259a:	486c      	ldr	r0, [pc, #432]	; (800274c <_Z14StartUpdateLCDPv+0x1f8>)
 800259c:	f7fe f85c 	bl	8000658 <_ZN5Print5printEPKc>
          uint8_t alternate_print = 1;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
          if (!PS4.connected()) {
 80025a4:	486a      	ldr	r0, [pc, #424]	; (8002750 <_Z14StartUpdateLCDPv+0x1fc>)
 80025a6:	f7fe fc09 	bl	8000dbc <_ZN5PS4BT9connectedEv>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f083 0301 	eor.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d017      	beq.n	80025e6 <_Z14StartUpdateLCDPv+0x92>
            ssd1306_SetCursor((128 - 11 * 3) / 2, 0);
 80025b6:	2100      	movs	r1, #0
 80025b8:	202f      	movs	r0, #47	; 0x2f
 80025ba:	f007 fa9d 	bl	8009af8 <ssd1306_SetCursor>
            ssd1306_WriteString("Not", Font_11x18, White_);
 80025be:	4a65      	ldr	r2, [pc, #404]	; (8002754 <_Z14StartUpdateLCDPv+0x200>)
 80025c0:	2301      	movs	r3, #1
 80025c2:	ca06      	ldmia	r2, {r1, r2}
 80025c4:	4864      	ldr	r0, [pc, #400]	; (8002758 <_Z14StartUpdateLCDPv+0x204>)
 80025c6:	f007 fa71 	bl	8009aac <ssd1306_WriteString>
            display_force_update = 0;
 80025ca:	4b64      	ldr	r3, [pc, #400]	; (800275c <_Z14StartUpdateLCDPv+0x208>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
            ssd1306_SetCursor((128 - 11 * 9) / 2, 26);
 80025d0:	211a      	movs	r1, #26
 80025d2:	200e      	movs	r0, #14
 80025d4:	f007 fa90 	bl	8009af8 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected", Font_11x18, White_);
 80025d8:	4a5e      	ldr	r2, [pc, #376]	; (8002754 <_Z14StartUpdateLCDPv+0x200>)
 80025da:	2301      	movs	r3, #1
 80025dc:	ca06      	ldmia	r2, {r1, r2}
 80025de:	4860      	ldr	r0, [pc, #384]	; (8002760 <_Z14StartUpdateLCDPv+0x20c>)
 80025e0:	f007 fa64 	bl	8009aac <ssd1306_WriteString>
 80025e4:	e017      	b.n	8002616 <_Z14StartUpdateLCDPv+0xc2>
          } else if (PS4.connected()) {
 80025e6:	485a      	ldr	r0, [pc, #360]	; (8002750 <_Z14StartUpdateLCDPv+0x1fc>)
 80025e8:	f7fe fbe8 	bl	8000dbc <_ZN5PS4BT9connectedEv>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d011      	beq.n	8002616 <_Z14StartUpdateLCDPv+0xc2>
            ssd1306_SetCursor((128 - 11 * 9) / 2, 26);
 80025f2:	211a      	movs	r1, #26
 80025f4:	200e      	movs	r0, #14
 80025f6:	f007 fa7f 	bl	8009af8 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected", Font_11x18, White_);
 80025fa:	4a56      	ldr	r2, [pc, #344]	; (8002754 <_Z14StartUpdateLCDPv+0x200>)
 80025fc:	2301      	movs	r3, #1
 80025fe:	ca06      	ldmia	r2, {r1, r2}
 8002600:	4857      	ldr	r0, [pc, #348]	; (8002760 <_Z14StartUpdateLCDPv+0x20c>)
 8002602:	f007 fa53 	bl	8009aac <ssd1306_WriteString>
            alternate_print = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
            display_run_once = 1;
 800260a:	4b4d      	ldr	r3, [pc, #308]	; (8002740 <_Z14StartUpdateLCDPv+0x1ec>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
            display_force_update = 0;
 8002610:	4b52      	ldr	r3, [pc, #328]	; (800275c <_Z14StartUpdateLCDPv+0x208>)
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
          }
          ssd1306_UpdateScreen();
 8002616:	f007 f939 	bl	800988c <ssd1306_UpdateScreen>
          Serial.print("\nInside case 0-1\n");
 800261a:	4952      	ldr	r1, [pc, #328]	; (8002764 <_Z14StartUpdateLCDPv+0x210>)
 800261c:	484b      	ldr	r0, [pc, #300]	; (800274c <_Z14StartUpdateLCDPv+0x1f8>)
 800261e:	f7fe f81b 	bl	8000658 <_ZN5Print5printEPKc>
          while (!PS4.connected() && display_force_update == 0) {
 8002622:	484b      	ldr	r0, [pc, #300]	; (8002750 <_Z14StartUpdateLCDPv+0x1fc>)
 8002624:	f7fe fbca 	bl	8000dbc <_ZN5PS4BT9connectedEv>
 8002628:	4603      	mov	r3, r0
 800262a:	f083 0301 	eor.w	r3, r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <_Z14StartUpdateLCDPv+0xec>
 8002634:	4b49      	ldr	r3, [pc, #292]	; (800275c <_Z14StartUpdateLCDPv+0x208>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <_Z14StartUpdateLCDPv+0xec>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <_Z14StartUpdateLCDPv+0xee>
 8002640:	2300      	movs	r3, #0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <_Z14StartUpdateLCDPv+0xfa>
            osDelay(100);
 8002646:	2064      	movs	r0, #100	; 0x64
 8002648:	f008 ffe6 	bl	800b618 <osDelay>
          while (!PS4.connected() && display_force_update == 0) {
 800264c:	e7e9      	b.n	8002622 <_Z14StartUpdateLCDPv+0xce>
          }
          /* If the user presses a Button, interrupt and show next screen */
          if (display_force_update == 1) {
 800264e:	4b43      	ldr	r3, [pc, #268]	; (800275c <_Z14StartUpdateLCDPv+0x208>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d106      	bne.n	8002664 <_Z14StartUpdateLCDPv+0x110>
            display_force_update = 0;
 8002656:	4b41      	ldr	r3, [pc, #260]	; (800275c <_Z14StartUpdateLCDPv+0x208>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
            display_run_once = 0;
 800265c:	4b38      	ldr	r3, [pc, #224]	; (8002740 <_Z14StartUpdateLCDPv+0x1ec>)
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
            break;
 8002662:	e05b      	b.n	800271c <_Z14StartUpdateLCDPv+0x1c8>
          }
          /* When the controller is finally paired, update current screen
           * Only runs if the first PS4.connected() above does not run*/
          if (PS4.connected() && alternate_print) {
 8002664:	483a      	ldr	r0, [pc, #232]	; (8002750 <_Z14StartUpdateLCDPv+0x1fc>)
 8002666:	f7fe fba9 	bl	8000dbc <_ZN5PS4BT9connectedEv>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <_Z14StartUpdateLCDPv+0x126>
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <_Z14StartUpdateLCDPv+0x126>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <_Z14StartUpdateLCDPv+0x128>
 800267a:	2300      	movs	r3, #0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d04c      	beq.n	800271a <_Z14StartUpdateLCDPv+0x1c6>
            ssd1306_Fill(Black_);
 8002680:	2000      	movs	r0, #0
 8002682:	f007 f8df 	bl	8009844 <ssd1306_Fill>
            ssd1306_UpdateScreen();
 8002686:	f007 f901 	bl	800988c <ssd1306_UpdateScreen>
            //				    ssd1306_SetCursor(25,0);
            //				    ssd1306_WriteString("Status:", Font_11x18, White_);
            ssd1306_SetCursor((128 - 11 * 10) / 2, 26);
 800268a:	211a      	movs	r1, #26
 800268c:	2009      	movs	r0, #9
 800268e:	f007 fa33 	bl	8009af8 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected!", Font_11x18, White_);
 8002692:	4a30      	ldr	r2, [pc, #192]	; (8002754 <_Z14StartUpdateLCDPv+0x200>)
 8002694:	2301      	movs	r3, #1
 8002696:	ca06      	ldmia	r2, {r1, r2}
 8002698:	4833      	ldr	r0, [pc, #204]	; (8002768 <_Z14StartUpdateLCDPv+0x214>)
 800269a:	f007 fa07 	bl	8009aac <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 800269e:	f007 f8f5 	bl	800988c <ssd1306_UpdateScreen>
            display_run_once = 1;
 80026a2:	4b27      	ldr	r3, [pc, #156]	; (8002740 <_Z14StartUpdateLCDPv+0x1ec>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
          }
          break;
 80026a8:	e037      	b.n	800271a <_Z14StartUpdateLCDPv+0x1c6>
        }

        case 1:
          display_run_once = 1;
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <_Z14StartUpdateLCDPv+0x1ec>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
          display_force_update = 0;
 80026b0:	4b2a      	ldr	r3, [pc, #168]	; (800275c <_Z14StartUpdateLCDPv+0x208>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
          ssd1306_Fill(Black_);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f007 f8c4 	bl	8009844 <ssd1306_Fill>
          ssd1306_SetCursor((128 - 11 * 5) / 2, 0);
 80026bc:	2100      	movs	r1, #0
 80026be:	2024      	movs	r0, #36	; 0x24
 80026c0:	f007 fa1a 	bl	8009af8 <ssd1306_SetCursor>
          ssd1306_WriteString("Pair?", Font_11x18, White_);
 80026c4:	4a23      	ldr	r2, [pc, #140]	; (8002754 <_Z14StartUpdateLCDPv+0x200>)
 80026c6:	2301      	movs	r3, #1
 80026c8:	ca06      	ldmia	r2, {r1, r2}
 80026ca:	4828      	ldr	r0, [pc, #160]	; (800276c <_Z14StartUpdateLCDPv+0x218>)
 80026cc:	f007 f9ee 	bl	8009aac <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 80026d0:	f007 f8dc 	bl	800988c <ssd1306_UpdateScreen>
          break;
 80026d4:	e022      	b.n	800271c <_Z14StartUpdateLCDPv+0x1c8>

        case 7:
          Serial.print("Hi");
 80026d6:	4926      	ldr	r1, [pc, #152]	; (8002770 <_Z14StartUpdateLCDPv+0x21c>)
 80026d8:	481c      	ldr	r0, [pc, #112]	; (800274c <_Z14StartUpdateLCDPv+0x1f8>)
 80026da:	f7fd ffbd 	bl	8000658 <_ZN5Print5printEPKc>
          display_run_once = 1;
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <_Z14StartUpdateLCDPv+0x1ec>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
          display_force_update = 0;
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <_Z14StartUpdateLCDPv+0x208>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
          ssd1306_Fill(Black_);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f007 f8aa 	bl	8009844 <ssd1306_Fill>
          ssd1306_UpdateScreen();
 80026f0:	f007 f8cc 	bl	800988c <ssd1306_UpdateScreen>
          ssd1306_SetCursor((128 - 11 * 10) / 2, 0);
 80026f4:	2100      	movs	r1, #0
 80026f6:	2009      	movs	r0, #9
 80026f8:	f007 f9fe 	bl	8009af8 <ssd1306_SetCursor>
          ssd1306_WriteString("Pairing...", Font_11x18, White_);
 80026fc:	4a15      	ldr	r2, [pc, #84]	; (8002754 <_Z14StartUpdateLCDPv+0x200>)
 80026fe:	2301      	movs	r3, #1
 8002700:	ca06      	ldmia	r2, {r1, r2}
 8002702:	481c      	ldr	r0, [pc, #112]	; (8002774 <_Z14StartUpdateLCDPv+0x220>)
 8002704:	f007 f9d2 	bl	8009aac <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8002708:	f007 f8c0 	bl	800988c <ssd1306_UpdateScreen>

          /* Prepare to reboot system to pair mode */
          EEPROM.write(40, 1);
 800270c:	2201      	movs	r2, #1
 800270e:	2128      	movs	r1, #40	; 0x28
 8002710:	4819      	ldr	r0, [pc, #100]	; (8002778 <_Z14StartUpdateLCDPv+0x224>)
 8002712:	f7fe fa42 	bl	8000b9a <_ZN11EEPROMClass5writeEih>
          NVIC_SystemReset();
 8002716:	f7fe f953 	bl	80009c0 <__NVIC_SystemReset>
          break;
 800271a:	bf00      	nop
          //ssd1306_UpdateScreen();
          break;
      }
    }
#if rtos_delay_view
    timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_LCD;
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <_Z14StartUpdateLCDPv+0x1e4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	b29a      	uxth	r2, r3
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <_Z14StartUpdateLCDPv+0x1e8>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	b29a      	uxth	r2, r3
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <_Z14StartUpdateLCDPv+0x1e8>)
 800272e:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(100);
 8002730:	2064      	movs	r0, #100	; 0x64
 8002732:	f008 ff71 	bl	800b618 <osDelay>
  }
 8002736:	e711      	b.n	800255c <_Z14StartUpdateLCDPv+0x8>
 8002738:	200004cc 	.word	0x200004cc
 800273c:	200009ca 	.word	0x200009ca
 8002740:	200009c4 	.word	0x200009c4
 8002744:	200009c0 	.word	0x200009c0
 8002748:	08016994 	.word	0x08016994
 800274c:	200005cc 	.word	0x200005cc
 8002750:	200007d0 	.word	0x200007d0
 8002754:	20000010 	.word	0x20000010
 8002758:	080169a4 	.word	0x080169a4
 800275c:	200009c3 	.word	0x200009c3
 8002760:	080169a8 	.word	0x080169a8
 8002764:	080169b4 	.word	0x080169b4
 8002768:	080169c8 	.word	0x080169c8
 800276c:	080169d4 	.word	0x080169d4
 8002770:	080169dc 	.word	0x080169dc
 8002774:	08016948 	.word	0x08016948
 8002778:	200003d0 	.word	0x200003d0

0800277c <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END StartUpdateLCD */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    {
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a04      	ldr	r2, [pc, #16]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800278e:	f000 fc09 	bl	8002fa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40001c00 	.word	0x40001c00

080027a0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
    {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  Serial.print("\r\nSomething went wrong!");
 80027a4:	4903      	ldr	r1, [pc, #12]	; (80027b4 <Error_Handler+0x14>)
 80027a6:	4804      	ldr	r0, [pc, #16]	; (80027b8 <Error_Handler+0x18>)
 80027a8:	f7fd ff56 	bl	8000658 <_ZN5Print5printEPKc>
  __ASM volatile ("cpsid i" : : : "memory");
 80027ac:	b672      	cpsid	i
}
 80027ae:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <Error_Handler+0x10>
 80027b2:	bf00      	nop
 80027b4:	080169e0 	.word	0x080169e0
 80027b8:	200005cc 	.word	0x200005cc

080027bc <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 80027c4:	f7fe f980 	bl	8000ac8 <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 80027c8:	f7fe f966 	bl	8000a98 <_ZN3P103SetEv>
        spi::init();
 80027cc:	f000 f845 	bl	800285a <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 80027d0:	f7fe f94c 	bl	8000a6c <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 80027d4:	2218      	movs	r2, #24
 80027d6:	2188      	movs	r1, #136	; 0x88
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f845 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f864 	bl	80028ac <_ZN8MAX3421eI3P102P9E5resetEv>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
 80027f8:	e02b      	b.n	8002852 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 80027fa:	22c1      	movs	r2, #193	; 0xc1
 80027fc:	21d8      	movs	r1, #216	; 0xd8
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f832 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 8002804:	2260      	movs	r2, #96	; 0x60
 8002806:	21d0      	movs	r1, #208	; 0xd0
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f82d 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 800280e:	2204      	movs	r2, #4
 8002810:	21e8      	movs	r1, #232	; 0xe8
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f828 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 8002818:	21e8      	movs	r1, #232	; 0xe8
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f876 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002820:	4603      	mov	r3, r0
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf0c      	ite	eq
 800282a:	2301      	moveq	r3, #1
 800282c:	2300      	movne	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d000      	beq.n	8002836 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8002834:	e7f0      	b.n	8002818 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f88a 	bl	8002950 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 800283c:	2220      	movs	r2, #32
 800283e:	21c8      	movs	r1, #200	; 0xc8
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f811 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8002846:	2201      	movs	r2, #1
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f80c 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
        }
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	70fb      	strb	r3, [r7, #3]
 8002874:	4613      	mov	r3, r2
 8002876:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8002878:	f7fe f91a 	bl	8000ab0 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	f043 0302 	orr.w	r3, r3, #2
 8002882:	b2db      	uxtb	r3, r3
 8002884:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 8002886:	78bb      	ldrb	r3, [r7, #2]
 8002888:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 800288a:	f107 010c 	add.w	r1, r7, #12
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
 8002892:	2202      	movs	r2, #2
 8002894:	4804      	ldr	r0, [pc, #16]	; (80028a8 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 8002896:	f004 f8ba 	bl	8006a0e <HAL_SPI_Transmit>
        SPI_SS::Set();
 800289a:	f7fe f8fd 	bl	8000a98 <_ZN3P103SetEv>
        return;
 800289e:	bf00      	nop
};
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000530 	.word	0x20000530

080028ac <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 80028b8:	2220      	movs	r2, #32
 80028ba:	2178      	movs	r1, #120	; 0x78
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ffd3 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2178      	movs	r1, #120	; 0x78
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ffce 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 80028cc:	89fb      	ldrh	r3, [r7, #14]
 80028ce:	3301      	adds	r3, #1
 80028d0:	81fb      	strh	r3, [r7, #14]
 80028d2:	89fb      	ldrh	r3, [r7, #14]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf14      	ite	ne
 80028d8:	2301      	movne	r3, #1
 80028da:	2300      	moveq	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00f      	beq.n	8002902 <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 80028e2:	2168      	movs	r1, #104	; 0x68
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f811 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf14      	ite	ne
 80028f4:	2301      	movne	r3, #1
 80028f6:	2300      	moveq	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d100      	bne.n	8002900 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 80028fe:	e7e5      	b.n	80028cc <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8002900:	bf00      	nop
        return ( i);
 8002902:	89fb      	ldrh	r3, [r7, #14]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 8002918:	f7fe f8ca 	bl	8000ab0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 800291c:	1cf9      	adds	r1, r7, #3
 800291e:	f04f 33ff 	mov.w	r3, #4294967295
 8002922:	2201      	movs	r2, #1
 8002924:	4809      	ldr	r0, [pc, #36]	; (800294c <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8002926:	f004 f872 	bl	8006a0e <HAL_SPI_Transmit>
        uint8_t rv = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 800292e:	f107 010f 	add.w	r1, r7, #15
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	2201      	movs	r2, #1
 8002938:	4804      	ldr	r0, [pc, #16]	; (800294c <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800293a:	f004 f9a4 	bl	8006c86 <HAL_SPI_Receive>
        SPI_SS::Set();
 800293e:	f7fe f8ab 	bl	8000a98 <_ZN3P103SetEv>
        return (rv);
 8002942:	7bfb      	ldrb	r3, [r7, #15]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000530 	.word	0x20000530

08002950 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8002958:	21f8      	movs	r1, #248	; 0xf8
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ffd6 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002960:	4603      	mov	r3, r0
 8002962:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800296a:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	2bc0      	cmp	r3, #192	; 0xc0
 8002970:	d04a      	beq.n	8002a08 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 8002972:	2bc0      	cmp	r3, #192	; 0xc0
 8002974:	dc55      	bgt.n	8002a22 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8002976:	2b80      	cmp	r3, #128	; 0x80
 8002978:	d006      	beq.n	8002988 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 800297a:	2b80      	cmp	r3, #128	; 0x80
 800297c:	dc51      	bgt.n	8002a22 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800297e:	2b00      	cmp	r3, #0
 8002980:	d046      	beq.n	8002a10 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	d020      	beq.n	80029c8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 8002986:	e04c      	b.n	8002a22 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8002988:	21d8      	movs	r1, #216	; 0xd8
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffbe 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002990:	4603      	mov	r3, r0
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	bf0c      	ite	eq
 800299a:	2301      	moveq	r3, #1
 800299c:	2300      	movne	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80029a4:	22c9      	movs	r2, #201	; 0xc9
 80029a6:	21d8      	movs	r1, #216	; 0xd8
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff5d 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80029ae:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80029b0:	2202      	movs	r2, #2
 80029b2:	701a      	strb	r2, [r3, #0]
                        break;
 80029b4:	e035      	b.n	8002a22 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 80029b6:	22cb      	movs	r2, #203	; 0xcb
 80029b8:	21d8      	movs	r1, #216	; 0xd8
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ff54 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80029c2:	2203      	movs	r2, #3
 80029c4:	701a      	strb	r2, [r3, #0]
                        break;
 80029c6:	e02c      	b.n	8002a22 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80029c8:	21d8      	movs	r1, #216	; 0xd8
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff ff9e 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 80029e4:	22cb      	movs	r2, #203	; 0xcb
 80029e6:	21d8      	movs	r1, #216	; 0xd8
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ff3d 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80029f0:	2203      	movs	r2, #3
 80029f2:	701a      	strb	r2, [r3, #0]
                        break;
 80029f4:	e015      	b.n	8002a22 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80029f6:	22c9      	movs	r2, #201	; 0xc9
 80029f8:	21d8      	movs	r1, #216	; 0xd8
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff ff34 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002a02:	2202      	movs	r2, #2
 8002a04:	701a      	strb	r2, [r3, #0]
                        break;
 8002a06:	e00c      	b.n	8002a22 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
                        break;
 8002a0e:	e008      	b.n	8002a22 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8002a10:	22d1      	movs	r2, #209	; 0xd1
 8002a12:	21d8      	movs	r1, #216	; 0xd8
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ff27 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
                        break;
 8002a20:	bf00      	nop
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000a05 	.word	0x20000a05

08002a30 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d120      	bne.n	8002a82 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d11b      	bne.n	8002a82 <_Z41__static_initialization_and_destruction_0ii+0x52>
SerialClass Serial(&huart2);
 8002a4a:	4910      	ldr	r1, [pc, #64]	; (8002a8c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002a4c:	4810      	ldr	r0, [pc, #64]	; (8002a90 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002a4e:	f7fd fff7 	bl	8000a40 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 8002a52:	4810      	ldr	r0, [pc, #64]	; (8002a94 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002a54:	f011 f958 	bl	8013d08 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8002a58:	490e      	ldr	r1, [pc, #56]	; (8002a94 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002a5a:	480f      	ldr	r0, [pc, #60]	; (8002a98 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002a5c:	f00c f8ec 	bl	800ec38 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	490c      	ldr	r1, [pc, #48]	; (8002a98 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002a66:	480e      	ldr	r0, [pc, #56]	; (8002aa0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002a68:	f7fe f980 	bl	8000d6c <_ZN5PS4BTC1EP3BTDbPKc>
XBOXONESBT XboxOneS(&Btd);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	490a      	ldr	r1, [pc, #40]	; (8002a98 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002a70:	480c      	ldr	r0, [pc, #48]	; (8002aa4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002a72:	f7fe fa67 	bl	8000f44 <_ZN10XBOXONESBTC1EP3BTDb>
BTHID BT_TEST(&Btd);
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	4907      	ldr	r1, [pc, #28]	; (8002a98 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002a7c:	480a      	ldr	r0, [pc, #40]	; (8002aa8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002a7e:	f00f fdd9 	bl	8012634 <_ZN5BTHIDC1EP3BTDbPKc>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000488 	.word	0x20000488
 8002a90:	200005cc 	.word	0x200005cc
 8002a94:	200005e4 	.word	0x200005e4
 8002a98:	200006a0 	.word	0x200006a0
 8002a9c:	080167fc 	.word	0x080167fc
 8002aa0:	200007d0 	.word	0x200007d0
 8002aa4:	20000898 	.word	0x20000898
 8002aa8:	20000934 	.word	0x20000934

08002aac <_GLOBAL__sub_I_incomingPSController_global>:
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	f7ff ffbb 	bl	8002a30 <_Z41__static_initialization_and_destruction_0ii>
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_MspInit+0x54>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4a11      	ldr	r2, [pc, #68]	; (8002b10 <HAL_MspInit+0x54>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_MspInit+0x54>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ada:	607b      	str	r3, [r7, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	603b      	str	r3, [r7, #0]
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_MspInit+0x54>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <HAL_MspInit+0x54>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_MspInit+0x54>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002afa:	2200      	movs	r2, #0
 8002afc:	210f      	movs	r1, #15
 8002afe:	f06f 0001 	mvn.w	r0, #1
 8002b02:	f000 fb4b 	bl	800319c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800

08002b14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	; 0x28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a19      	ldr	r2, [pc, #100]	; (8002b98 <HAL_I2C_MspInit+0x84>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d12c      	bne.n	8002b90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <HAL_I2C_MspInit+0x88>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a17      	ldr	r2, [pc, #92]	; (8002b9c <HAL_I2C_MspInit+0x88>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <HAL_I2C_MspInit+0x88>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b58:	2312      	movs	r3, #18
 8002b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b60:	2303      	movs	r3, #3
 8002b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b64:	2304      	movs	r3, #4
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	480c      	ldr	r0, [pc, #48]	; (8002ba0 <HAL_I2C_MspInit+0x8c>)
 8002b70:	f000 fe26 	bl	80037c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_I2C_MspInit+0x88>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <HAL_I2C_MspInit+0x88>)
 8002b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b82:	6413      	str	r3, [r2, #64]	; 0x40
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_I2C_MspInit+0x88>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b90:	bf00      	nop
 8002b92:	3728      	adds	r7, #40	; 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40005400 	.word	0x40005400
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40020400 	.word	0x40020400

08002ba4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <HAL_SPI_MspInit+0x84>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d12b      	bne.n	8002c1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <HAL_SPI_MspInit+0x88>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <HAL_SPI_MspInit+0x88>)
 8002bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd6:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <HAL_SPI_MspInit+0x88>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_SPI_MspInit+0x88>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	4a10      	ldr	r2, [pc, #64]	; (8002c2c <HAL_SPI_MspInit+0x88>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <HAL_SPI_MspInit+0x88>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002bfe:	23e0      	movs	r3, #224	; 0xe0
 8002c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c0e:	2305      	movs	r3, #5
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	4619      	mov	r1, r3
 8002c18:	4805      	ldr	r0, [pc, #20]	; (8002c30 <HAL_SPI_MspInit+0x8c>)
 8002c1a:	f000 fdd1 	bl	80037c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c1e:	bf00      	nop
 8002c20:	3728      	adds	r7, #40	; 0x28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40013000 	.word	0x40013000
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020000 	.word	0x40020000

08002c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <HAL_TIM_Base_MspInit+0x48>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d115      	bne.n	8002c72 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <HAL_TIM_Base_MspInit+0x4c>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a0c      	ldr	r2, [pc, #48]	; (8002c80 <HAL_TIM_Base_MspInit+0x4c>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_TIM_Base_MspInit+0x4c>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2105      	movs	r1, #5
 8002c66:	202d      	movs	r0, #45	; 0x2d
 8002c68:	f000 fa98 	bl	800319c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002c6c:	202d      	movs	r0, #45	; 0x2d
 8002c6e:	f000 fab1 	bl	80031d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40002000 	.word	0x40002000
 8002c80:	40023800 	.word	0x40023800

08002c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <HAL_UART_MspInit+0x84>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d12b      	bne.n	8002cfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <HAL_UART_MspInit+0x88>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <HAL_UART_MspInit+0x88>)
 8002cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <HAL_UART_MspInit+0x88>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <HAL_UART_MspInit+0x88>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a10      	ldr	r2, [pc, #64]	; (8002d0c <HAL_UART_MspInit+0x88>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <HAL_UART_MspInit+0x88>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cde:	230c      	movs	r3, #12
 8002ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cea:	2303      	movs	r3, #3
 8002cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cee:	2307      	movs	r3, #7
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4805      	ldr	r0, [pc, #20]	; (8002d10 <HAL_UART_MspInit+0x8c>)
 8002cfa:	f000 fd61 	bl	80037c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cfe:	bf00      	nop
 8002d00:	3728      	adds	r7, #40	; 0x28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40004400 	.word	0x40004400
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40020000 	.word	0x40020000

08002d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08c      	sub	sp, #48	; 0x30
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	202c      	movs	r0, #44	; 0x2c
 8002d2a:	f000 fa37 	bl	800319c <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002d2e:	202c      	movs	r0, #44	; 0x2c
 8002d30:	f000 fa50 	bl	80031d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	4b1f      	ldr	r3, [pc, #124]	; (8002db8 <HAL_InitTick+0xa4>)
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	4a1e      	ldr	r2, [pc, #120]	; (8002db8 <HAL_InitTick+0xa4>)
 8002d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d42:	6413      	str	r3, [r2, #64]	; 0x40
 8002d44:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <HAL_InitTick+0xa4>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d50:	f107 0210 	add.w	r2, r7, #16
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f002 fe22 	bl	80059a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002d60:	f002 fdf8 	bl	8005954 <HAL_RCC_GetPCLK1Freq>
 8002d64:	4603      	mov	r3, r0
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <HAL_InitTick+0xa8>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	0c9b      	lsrs	r3, r3, #18
 8002d74:	3b01      	subs	r3, #1
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <HAL_InitTick+0xac>)
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <HAL_InitTick+0xb0>)
 8002d7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <HAL_InitTick+0xac>)
 8002d80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d84:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8002d86:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <HAL_InitTick+0xac>)
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <HAL_InitTick+0xac>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_InitTick+0xac>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8002d98:	4809      	ldr	r0, [pc, #36]	; (8002dc0 <HAL_InitTick+0xac>)
 8002d9a:	f004 fb57 	bl	800744c <HAL_TIM_Base_Init>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8002da4:	4806      	ldr	r0, [pc, #24]	; (8002dc0 <HAL_InitTick+0xac>)
 8002da6:	f004 fba1 	bl	80074ec <HAL_TIM_Base_Start_IT>
 8002daa:	4603      	mov	r3, r0
 8002dac:	e000      	b.n	8002db0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3730      	adds	r7, #48	; 0x30
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	431bde83 	.word	0x431bde83
 8002dc0:	20005760 	.word	0x20005760
 8002dc4:	40001c00 	.word	0x40001c00

08002dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <NMI_Handler+0x4>

08002dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd2:	e7fe      	b.n	8002dd2 <HardFault_Handler+0x4>

08002dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <MemManage_Handler+0x4>

08002dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <BusFault_Handler+0x4>

08002de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <UsageFault_Handler+0x4>

08002de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002dfa:	f004 fbe7 	bl	80075cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20005760 	.word	0x20005760

08002e08 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002e0e:	f004 fbdd 	bl	80075cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200004cc 	.word	0x200004cc

08002e1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e20:	4802      	ldr	r0, [pc, #8]	; (8002e2c <OTG_FS_IRQHandler+0x10>)
 8002e22:	f001 fc45 	bl	80046b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20005cdc 	.word	0x20005cdc

08002e30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
	return 1;
 8002e34:	2301      	movs	r3, #1
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <_kill>:

int _kill(int pid, int sig)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e4a:	f013 f815 	bl	8015e78 <__errno>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2216      	movs	r2, #22
 8002e52:	601a      	str	r2, [r3, #0]
	return -1;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_exit>:

void _exit (int status)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ffe7 	bl	8002e40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e72:	e7fe      	b.n	8002e72 <_exit+0x12>

08002e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e7c:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <_sbrk+0x5c>)
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <_sbrk+0x60>)
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e88:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <_sbrk+0x64>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <_sbrk+0x64>)
 8002e92:	4a12      	ldr	r2, [pc, #72]	; (8002edc <_sbrk+0x68>)
 8002e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <_sbrk+0x64>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d207      	bcs.n	8002eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ea4:	f012 ffe8 	bl	8015e78 <__errno>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	220c      	movs	r2, #12
 8002eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eae:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb2:	e009      	b.n	8002ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eb4:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <_sbrk+0x64>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <_sbrk+0x64>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <_sbrk+0x64>)
 8002ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20020000 	.word	0x20020000
 8002ed4:	00000400 	.word	0x00000400
 8002ed8:	20000a08 	.word	0x20000a08
 8002edc:	200060f8 	.word	0x200060f8

08002ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <SystemInit+0x28>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eea:	4a07      	ldr	r2, [pc, #28]	; (8002f08 <SystemInit+0x28>)
 8002eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <SystemInit+0x28>)
 8002ef6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002efa:	609a      	str	r2, [r3, #8]
#endif
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f12:	e003      	b.n	8002f1c <LoopCopyDataInit>

08002f14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f1a:	3104      	adds	r1, #4

08002f1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f1c:	480b      	ldr	r0, [pc, #44]	; (8002f4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f24:	d3f6      	bcc.n	8002f14 <CopyDataInit>
  ldr  r2, =_sbss
 8002f26:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f28:	e002      	b.n	8002f30 <LoopFillZerobss>

08002f2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f2c:	f842 3b04 	str.w	r3, [r2], #4

08002f30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f34:	d3f9      	bcc.n	8002f2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f36:	f7ff ffd3 	bl	8002ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f3a:	f012 ffa3 	bl	8015e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f3e:	f7fe f8b3 	bl	80010a8 <main>
  bx  lr    
 8002f42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f48:	08018a04 	.word	0x08018a04
  ldr  r0, =_sdata
 8002f4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f50:	20000188 	.word	0x20000188
  ldr  r2, =_sbss
 8002f54:	20000188 	.word	0x20000188
  ldr  r3, = _ebss
 8002f58:	200060f4 	.word	0x200060f4

08002f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f5c:	e7fe      	b.n	8002f5c <ADC_IRQHandler>
	...

08002f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f64:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <HAL_Init+0x40>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <HAL_Init+0x40>)
 8002f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_Init+0x40>)
 8002f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <HAL_Init+0x40>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a07      	ldr	r2, [pc, #28]	; (8002fa0 <HAL_Init+0x40>)
 8002f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f88:	2003      	movs	r0, #3
 8002f8a:	f000 f8fc 	bl	8003186 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f7ff fec0 	bl	8002d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f94:	f7ff fd92 	bl	8002abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023c00 	.word	0x40023c00

08002fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x20>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	2000000c 	.word	0x2000000c
 8002fc8:	200057a8 	.word	0x200057a8

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_GetTick+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	200057a8 	.word	0x200057a8

08002fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff ffee 	bl	8002fcc <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_Delay+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800300a:	bf00      	nop
 800300c:	f7ff ffde 	bl	8002fcc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	2000000c 	.word	0x2000000c

0800302c <__NVIC_SetPriorityGrouping>:
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4907      	ldr	r1, [pc, #28]	; (80030c8 <__NVIC_EnableIRQ+0x38>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	; (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ff4c 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ae:	f7ff ff61 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	6978      	ldr	r0, [r7, #20]
 80031ba:	f7ff ffb1 	bl	8003120 <NVIC_EncodePriority>
 80031be:	4602      	mov	r2, r0
 80031c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff80 	bl	80030cc <__NVIC_SetPriority>
}
 80031cc:	bf00      	nop
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff ff54 	bl	8003090 <__NVIC_EnableIRQ>
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <HAL_FLASH_Program+0xa0>)
 8003204:	7e1b      	ldrb	r3, [r3, #24]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_FLASH_Program+0x1e>
 800320a:	2302      	movs	r3, #2
 800320c:	e03b      	b.n	8003286 <HAL_FLASH_Program+0x96>
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_FLASH_Program+0xa0>)
 8003210:	2201      	movs	r2, #1
 8003212:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003214:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003218:	f000 f870 	bl	80032fc <FLASH_WaitForLastOperation>
 800321c:	4603      	mov	r3, r0
 800321e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d12b      	bne.n	800327e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800322c:	783b      	ldrb	r3, [r7, #0]
 800322e:	4619      	mov	r1, r3
 8003230:	68b8      	ldr	r0, [r7, #8]
 8003232:	f000 f91b 	bl	800346c <FLASH_Program_Byte>
 8003236:	e016      	b.n	8003266 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d105      	bne.n	800324a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800323e:	883b      	ldrh	r3, [r7, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	68b8      	ldr	r0, [r7, #8]
 8003244:	f000 f8ee 	bl	8003424 <FLASH_Program_HalfWord>
 8003248:	e00d      	b.n	8003266 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d105      	bne.n	800325c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4619      	mov	r1, r3
 8003254:	68b8      	ldr	r0, [r7, #8]
 8003256:	f000 f8c3 	bl	80033e0 <FLASH_Program_Word>
 800325a:	e004      	b.n	8003266 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800325c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003260:	68b8      	ldr	r0, [r7, #8]
 8003262:	f000 f88b 	bl	800337c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003266:	f24c 3050 	movw	r0, #50000	; 0xc350
 800326a:	f000 f847 	bl	80032fc <FLASH_WaitForLastOperation>
 800326e:	4603      	mov	r3, r0
 8003270:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_FLASH_Program+0xa4>)
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	4a07      	ldr	r2, [pc, #28]	; (8003294 <HAL_FLASH_Program+0xa4>)
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <HAL_FLASH_Program+0xa0>)
 8003280:	2200      	movs	r2, #0
 8003282:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003284:	7dfb      	ldrb	r3, [r7, #23]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200057ac 	.word	0x200057ac
 8003294:	40023c00 	.word	0x40023c00

08003298 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_FLASH_Unlock+0x38>)
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	da0b      	bge.n	80032c2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80032aa:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <HAL_FLASH_Unlock+0x38>)
 80032ac:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <HAL_FLASH_Unlock+0x3c>)
 80032ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <HAL_FLASH_Unlock+0x38>)
 80032b2:	4a09      	ldr	r2, [pc, #36]	; (80032d8 <HAL_FLASH_Unlock+0x40>)
 80032b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_FLASH_Unlock+0x38>)
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	da01      	bge.n	80032c2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80032c2:	79fb      	ldrb	r3, [r7, #7]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40023c00 	.word	0x40023c00
 80032d4:	45670123 	.word	0x45670123
 80032d8:	cdef89ab 	.word	0xcdef89ab

080032dc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_FLASH_Lock+0x1c>)
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	4a04      	ldr	r2, [pc, #16]	; (80032f8 <HAL_FLASH_Lock+0x1c>)
 80032e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032ea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40023c00 	.word	0x40023c00

080032fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <FLASH_WaitForLastOperation+0x78>)
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800330e:	f7ff fe5d 	bl	8002fcc <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003314:	e010      	b.n	8003338 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d00c      	beq.n	8003338 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <FLASH_WaitForLastOperation+0x38>
 8003324:	f7ff fe52 	bl	8002fcc <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	429a      	cmp	r2, r3
 8003332:	d201      	bcs.n	8003338 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e019      	b.n	800336c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <FLASH_WaitForLastOperation+0x7c>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e8      	bne.n	8003316 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <FLASH_WaitForLastOperation+0x7c>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <FLASH_WaitForLastOperation+0x7c>)
 8003352:	2201      	movs	r2, #1
 8003354:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003356:	4b08      	ldr	r3, [pc, #32]	; (8003378 <FLASH_WaitForLastOperation+0x7c>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003362:	f000 f8a5 	bl	80034b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
  
}  
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	200057ac 	.word	0x200057ac
 8003378:	40023c00 	.word	0x40023c00

0800337c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003388:	4b14      	ldr	r3, [pc, #80]	; (80033dc <FLASH_Program_DoubleWord+0x60>)
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	4a13      	ldr	r2, [pc, #76]	; (80033dc <FLASH_Program_DoubleWord+0x60>)
 800338e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003392:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003394:	4b11      	ldr	r3, [pc, #68]	; (80033dc <FLASH_Program_DoubleWord+0x60>)
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	4a10      	ldr	r2, [pc, #64]	; (80033dc <FLASH_Program_DoubleWord+0x60>)
 800339a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800339e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <FLASH_Program_DoubleWord+0x60>)
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <FLASH_Program_DoubleWord+0x60>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80033b2:	f3bf 8f6f 	isb	sy
}
 80033b6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80033b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	000a      	movs	r2, r1
 80033c6:	2300      	movs	r3, #0
 80033c8:	68f9      	ldr	r1, [r7, #12]
 80033ca:	3104      	adds	r1, #4
 80033cc:	4613      	mov	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	40023c00 	.word	0x40023c00

080033e0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80033ea:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <FLASH_Program_Word+0x40>)
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	4a0c      	ldr	r2, [pc, #48]	; (8003420 <FLASH_Program_Word+0x40>)
 80033f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <FLASH_Program_Word+0x40>)
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <FLASH_Program_Word+0x40>)
 80033fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003400:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <FLASH_Program_Word+0x40>)
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	4a06      	ldr	r2, [pc, #24]	; (8003420 <FLASH_Program_Word+0x40>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	601a      	str	r2, [r3, #0]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40023c00 	.word	0x40023c00

08003424 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <FLASH_Program_HalfWord+0x44>)
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <FLASH_Program_HalfWord+0x44>)
 8003436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <FLASH_Program_HalfWord+0x44>)
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	4a09      	ldr	r2, [pc, #36]	; (8003468 <FLASH_Program_HalfWord+0x44>)
 8003442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003446:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003448:	4b07      	ldr	r3, [pc, #28]	; (8003468 <FLASH_Program_HalfWord+0x44>)
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	4a06      	ldr	r2, [pc, #24]	; (8003468 <FLASH_Program_HalfWord+0x44>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	801a      	strh	r2, [r3, #0]
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40023c00 	.word	0x40023c00

0800346c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <FLASH_Program_Byte+0x40>)
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	4a0b      	ldr	r2, [pc, #44]	; (80034ac <FLASH_Program_Byte+0x40>)
 800347e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003482:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <FLASH_Program_Byte+0x40>)
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <FLASH_Program_Byte+0x40>)
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <FLASH_Program_Byte+0x40>)
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	4a06      	ldr	r2, [pc, #24]	; (80034ac <FLASH_Program_Byte+0x40>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	701a      	strb	r2, [r3, #0]
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40023c00 	.word	0x40023c00

080034b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80034b4:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <FLASH_SetErrorCode+0xc4>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80034c0:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <FLASH_SetErrorCode+0xc8>)
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	f043 0310 	orr.w	r3, r3, #16
 80034c8:	4a2b      	ldr	r2, [pc, #172]	; (8003578 <FLASH_SetErrorCode+0xc8>)
 80034ca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80034cc:	4b29      	ldr	r3, [pc, #164]	; (8003574 <FLASH_SetErrorCode+0xc4>)
 80034ce:	2210      	movs	r2, #16
 80034d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80034d2:	4b28      	ldr	r3, [pc, #160]	; (8003574 <FLASH_SetErrorCode+0xc4>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80034de:	4b26      	ldr	r3, [pc, #152]	; (8003578 <FLASH_SetErrorCode+0xc8>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f043 0308 	orr.w	r3, r3, #8
 80034e6:	4a24      	ldr	r2, [pc, #144]	; (8003578 <FLASH_SetErrorCode+0xc8>)
 80034e8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80034ea:	4b22      	ldr	r3, [pc, #136]	; (8003574 <FLASH_SetErrorCode+0xc4>)
 80034ec:	2220      	movs	r2, #32
 80034ee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80034f0:	4b20      	ldr	r3, [pc, #128]	; (8003574 <FLASH_SetErrorCode+0xc4>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80034fc:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <FLASH_SetErrorCode+0xc8>)
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <FLASH_SetErrorCode+0xc8>)
 8003506:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003508:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <FLASH_SetErrorCode+0xc4>)
 800350a:	2240      	movs	r2, #64	; 0x40
 800350c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800350e:	4b19      	ldr	r3, [pc, #100]	; (8003574 <FLASH_SetErrorCode+0xc4>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003516:	2b00      	cmp	r3, #0
 8003518:	d008      	beq.n	800352c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800351a:	4b17      	ldr	r3, [pc, #92]	; (8003578 <FLASH_SetErrorCode+0xc8>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f043 0302 	orr.w	r3, r3, #2
 8003522:	4a15      	ldr	r2, [pc, #84]	; (8003578 <FLASH_SetErrorCode+0xc8>)
 8003524:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <FLASH_SetErrorCode+0xc4>)
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <FLASH_SetErrorCode+0xc4>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d009      	beq.n	800354c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003538:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <FLASH_SetErrorCode+0xc8>)
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	4a0d      	ldr	r2, [pc, #52]	; (8003578 <FLASH_SetErrorCode+0xc8>)
 8003542:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <FLASH_SetErrorCode+0xc4>)
 8003546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800354a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <FLASH_SetErrorCode+0xc4>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <FLASH_SetErrorCode+0xc8>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f043 0320 	orr.w	r3, r3, #32
 8003560:	4a05      	ldr	r2, [pc, #20]	; (8003578 <FLASH_SetErrorCode+0xc8>)
 8003562:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <FLASH_SetErrorCode+0xc4>)
 8003566:	2202      	movs	r2, #2
 8003568:	60da      	str	r2, [r3, #12]
  }
}
 800356a:	bf00      	nop
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40023c00 	.word	0x40023c00
 8003578:	200057ac 	.word	0x200057ac

0800357c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800358e:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_FLASHEx_Erase+0xd8>)
 8003590:	7e1b      	ldrb	r3, [r3, #24]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_FLASHEx_Erase+0x1e>
 8003596:	2302      	movs	r3, #2
 8003598:	e058      	b.n	800364c <HAL_FLASHEx_Erase+0xd0>
 800359a:	4b2e      	ldr	r3, [pc, #184]	; (8003654 <HAL_FLASHEx_Erase+0xd8>)
 800359c:	2201      	movs	r2, #1
 800359e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035a4:	f7ff feaa 	bl	80032fc <FLASH_WaitForLastOperation>
 80035a8:	4603      	mov	r3, r0
 80035aa:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d148      	bne.n	8003644 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295
 80035b8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d115      	bne.n	80035ee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f000 f844 	bl	800365c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035d8:	f7ff fe90 	bl	80032fc <FLASH_WaitForLastOperation>
 80035dc:	4603      	mov	r3, r0
 80035de:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HAL_FLASHEx_Erase+0xdc>)
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_FLASHEx_Erase+0xdc>)
 80035e6:	f023 0304 	bic.w	r3, r3, #4
 80035ea:	6113      	str	r3, [r2, #16]
 80035ec:	e028      	b.n	8003640 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	e01c      	b.n	8003630 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	4619      	mov	r1, r3
 80035fe:	68b8      	ldr	r0, [r7, #8]
 8003600:	f000 f850 	bl	80036a4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003604:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003608:	f7ff fe78 	bl	80032fc <FLASH_WaitForLastOperation>
 800360c:	4603      	mov	r3, r0
 800360e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_FLASHEx_Erase+0xdc>)
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	4a10      	ldr	r2, [pc, #64]	; (8003658 <HAL_FLASHEx_Erase+0xdc>)
 8003616:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800361a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	601a      	str	r2, [r3, #0]
          break;
 8003628:	e00a      	b.n	8003640 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	3301      	adds	r3, #1
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4413      	add	r3, r2
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	429a      	cmp	r2, r3
 800363e:	d3da      	bcc.n	80035f6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8003640:	f000 f878 	bl	8003734 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <HAL_FLASHEx_Erase+0xd8>)
 8003646:	2200      	movs	r2, #0
 8003648:	761a      	strb	r2, [r3, #24]

  return status;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	200057ac 	.word	0x200057ac
 8003658:	40023c00 	.word	0x40023c00

0800365c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	6039      	str	r1, [r7, #0]
 8003666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <FLASH_MassErase+0x44>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	4a0c      	ldr	r2, [pc, #48]	; (80036a0 <FLASH_MassErase+0x44>)
 800366e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003672:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <FLASH_MassErase+0x44>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <FLASH_MassErase+0x44>)
 800367a:	f043 0304 	orr.w	r3, r3, #4
 800367e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8003680:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <FLASH_MassErase+0x44>)
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	4313      	orrs	r3, r2
 800368a:	4a05      	ldr	r2, [pc, #20]	; (80036a0 <FLASH_MassErase+0x44>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003690:	6113      	str	r3, [r2, #16]
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40023c00 	.word	0x40023c00

080036a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	e010      	b.n	80036e2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d103      	bne.n	80036ce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80036c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	e009      	b.n	80036e2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d103      	bne.n	80036dc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80036d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e002      	b.n	80036e2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80036dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036e0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80036e2:	4b13      	ldr	r3, [pc, #76]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 80036e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	490f      	ldr	r1, [pc, #60]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 8003700:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003704:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4313      	orrs	r3, r2
 8003710:	4a07      	ldr	r2, [pc, #28]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 8003712:	f043 0302 	orr.w	r3, r3, #2
 8003716:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 800371e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003722:	6113      	str	r3, [r2, #16]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	40023c00 	.word	0x40023c00

08003734 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003738:	4b20      	ldr	r3, [pc, #128]	; (80037bc <FLASH_FlushCaches+0x88>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003740:	2b00      	cmp	r3, #0
 8003742:	d017      	beq.n	8003774 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <FLASH_FlushCaches+0x88>)
 800374a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800374e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a19      	ldr	r2, [pc, #100]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003756:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <FLASH_FlushCaches+0x88>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a16      	ldr	r2, [pc, #88]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003766:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <FLASH_FlushCaches+0x88>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a13      	ldr	r2, [pc, #76]	; (80037bc <FLASH_FlushCaches+0x88>)
 800376e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003772:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377c:	2b00      	cmp	r3, #0
 800377e:	d017      	beq.n	80037b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800378a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <FLASH_FlushCaches+0x88>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003792:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <FLASH_FlushCaches+0x88>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a07      	ldr	r2, [pc, #28]	; (80037bc <FLASH_FlushCaches+0x88>)
 800379e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <FLASH_FlushCaches+0x88>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a04      	ldr	r2, [pc, #16]	; (80037bc <FLASH_FlushCaches+0x88>)
 80037aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ae:	6013      	str	r3, [r2, #0]
  }
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40023c00 	.word	0x40023c00

080037c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	; 0x24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	e165      	b.n	8003aa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037dc:	2201      	movs	r2, #1
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	f040 8154 	bne.w	8003aa2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b01      	cmp	r3, #1
 8003804:	d005      	beq.n	8003812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800380e:	2b02      	cmp	r3, #2
 8003810:	d130      	bne.n	8003874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	2203      	movs	r2, #3
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 0201 	and.w	r2, r3, #1
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b03      	cmp	r3, #3
 800387e:	d017      	beq.n	80038b0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	2203      	movs	r2, #3
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d123      	bne.n	8003904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	08da      	lsrs	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3208      	adds	r2, #8
 80038c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	220f      	movs	r2, #15
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	08da      	lsrs	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3208      	adds	r2, #8
 80038fe:	69b9      	ldr	r1, [r7, #24]
 8003900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	2203      	movs	r2, #3
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0203 	and.w	r2, r3, #3
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80ae 	beq.w	8003aa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	4b5d      	ldr	r3, [pc, #372]	; (8003ac0 <HAL_GPIO_Init+0x300>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	4a5c      	ldr	r2, [pc, #368]	; (8003ac0 <HAL_GPIO_Init+0x300>)
 8003950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003954:	6453      	str	r3, [r2, #68]	; 0x44
 8003956:	4b5a      	ldr	r3, [pc, #360]	; (8003ac0 <HAL_GPIO_Init+0x300>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003962:	4a58      	ldr	r2, [pc, #352]	; (8003ac4 <HAL_GPIO_Init+0x304>)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	3302      	adds	r3, #2
 800396a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	220f      	movs	r2, #15
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4f      	ldr	r2, [pc, #316]	; (8003ac8 <HAL_GPIO_Init+0x308>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d025      	beq.n	80039da <HAL_GPIO_Init+0x21a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a4e      	ldr	r2, [pc, #312]	; (8003acc <HAL_GPIO_Init+0x30c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01f      	beq.n	80039d6 <HAL_GPIO_Init+0x216>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a4d      	ldr	r2, [pc, #308]	; (8003ad0 <HAL_GPIO_Init+0x310>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d019      	beq.n	80039d2 <HAL_GPIO_Init+0x212>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4c      	ldr	r2, [pc, #304]	; (8003ad4 <HAL_GPIO_Init+0x314>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <HAL_GPIO_Init+0x20e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a4b      	ldr	r2, [pc, #300]	; (8003ad8 <HAL_GPIO_Init+0x318>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00d      	beq.n	80039ca <HAL_GPIO_Init+0x20a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a4a      	ldr	r2, [pc, #296]	; (8003adc <HAL_GPIO_Init+0x31c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <HAL_GPIO_Init+0x206>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a49      	ldr	r2, [pc, #292]	; (8003ae0 <HAL_GPIO_Init+0x320>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <HAL_GPIO_Init+0x202>
 80039be:	2306      	movs	r3, #6
 80039c0:	e00c      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039c2:	2307      	movs	r3, #7
 80039c4:	e00a      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039c6:	2305      	movs	r3, #5
 80039c8:	e008      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039ca:	2304      	movs	r3, #4
 80039cc:	e006      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039ce:	2303      	movs	r3, #3
 80039d0:	e004      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e002      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039da:	2300      	movs	r3, #0
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	f002 0203 	and.w	r2, r2, #3
 80039e2:	0092      	lsls	r2, r2, #2
 80039e4:	4093      	lsls	r3, r2
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039ec:	4935      	ldr	r1, [pc, #212]	; (8003ac4 <HAL_GPIO_Init+0x304>)
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	089b      	lsrs	r3, r3, #2
 80039f2:	3302      	adds	r3, #2
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039fa:	4b3a      	ldr	r3, [pc, #232]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	43db      	mvns	r3, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a1e:	4a31      	ldr	r2, [pc, #196]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a24:	4b2f      	ldr	r3, [pc, #188]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a48:	4a26      	ldr	r2, [pc, #152]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a4e:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a72:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a78:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a9c:	4a11      	ldr	r2, [pc, #68]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b0f      	cmp	r3, #15
 8003aac:	f67f ae96 	bls.w	80037dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40013800 	.word	0x40013800
 8003ac8:	40020000 	.word	0x40020000
 8003acc:	40020400 	.word	0x40020400
 8003ad0:	40020800 	.word	0x40020800
 8003ad4:	40020c00 	.word	0x40020c00
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40021400 	.word	0x40021400
 8003ae0:	40021800 	.word	0x40021800
 8003ae4:	40013c00 	.word	0x40013c00

08003ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	887b      	ldrh	r3, [r7, #2]
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
 8003b04:	e001      	b.n	8003b0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	807b      	strh	r3, [r7, #2]
 8003b24:	4613      	mov	r3, r2
 8003b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b28:	787b      	ldrb	r3, [r7, #1]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b34:	e003      	b.n	8003b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	041a      	lsls	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	619a      	str	r2, [r3, #24]
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e12b      	b.n	8003db6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fe ffce 	bl	8002b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2224      	movs	r2, #36	; 0x24
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0201 	bic.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bb0:	f001 fed0 	bl	8005954 <HAL_RCC_GetPCLK1Freq>
 8003bb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4a81      	ldr	r2, [pc, #516]	; (8003dc0 <HAL_I2C_Init+0x274>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d807      	bhi.n	8003bd0 <HAL_I2C_Init+0x84>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a80      	ldr	r2, [pc, #512]	; (8003dc4 <HAL_I2C_Init+0x278>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	bf94      	ite	ls
 8003bc8:	2301      	movls	r3, #1
 8003bca:	2300      	movhi	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e006      	b.n	8003bde <HAL_I2C_Init+0x92>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a7d      	ldr	r2, [pc, #500]	; (8003dc8 <HAL_I2C_Init+0x27c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	bf94      	ite	ls
 8003bd8:	2301      	movls	r3, #1
 8003bda:	2300      	movhi	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0e7      	b.n	8003db6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4a78      	ldr	r2, [pc, #480]	; (8003dcc <HAL_I2C_Init+0x280>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	0c9b      	lsrs	r3, r3, #18
 8003bf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4a6a      	ldr	r2, [pc, #424]	; (8003dc0 <HAL_I2C_Init+0x274>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d802      	bhi.n	8003c20 <HAL_I2C_Init+0xd4>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	e009      	b.n	8003c34 <HAL_I2C_Init+0xe8>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	4a69      	ldr	r2, [pc, #420]	; (8003dd0 <HAL_I2C_Init+0x284>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	099b      	lsrs	r3, r3, #6
 8003c32:	3301      	adds	r3, #1
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	495c      	ldr	r1, [pc, #368]	; (8003dc0 <HAL_I2C_Init+0x274>)
 8003c50:	428b      	cmp	r3, r1
 8003c52:	d819      	bhi.n	8003c88 <HAL_I2C_Init+0x13c>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1e59      	subs	r1, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c62:	1c59      	adds	r1, r3, #1
 8003c64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c68:	400b      	ands	r3, r1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_I2C_Init+0x138>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	1e59      	subs	r1, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c82:	e051      	b.n	8003d28 <HAL_I2C_Init+0x1dc>
 8003c84:	2304      	movs	r3, #4
 8003c86:	e04f      	b.n	8003d28 <HAL_I2C_Init+0x1dc>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d111      	bne.n	8003cb4 <HAL_I2C_Init+0x168>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1e58      	subs	r0, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	440b      	add	r3, r1
 8003c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e012      	b.n	8003cda <HAL_I2C_Init+0x18e>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1e58      	subs	r0, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6859      	ldr	r1, [r3, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	0099      	lsls	r1, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_Init+0x196>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e022      	b.n	8003d28 <HAL_I2C_Init+0x1dc>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10e      	bne.n	8003d08 <HAL_I2C_Init+0x1bc>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1e58      	subs	r0, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6859      	ldr	r1, [r3, #4]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	440b      	add	r3, r1
 8003cf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d06:	e00f      	b.n	8003d28 <HAL_I2C_Init+0x1dc>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1e58      	subs	r0, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	0099      	lsls	r1, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	6809      	ldr	r1, [r1, #0]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69da      	ldr	r2, [r3, #28]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6911      	ldr	r1, [r2, #16]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68d2      	ldr	r2, [r2, #12]
 8003d62:	4311      	orrs	r1, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6812      	ldr	r2, [r2, #0]
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	000186a0 	.word	0x000186a0
 8003dc4:	001e847f 	.word	0x001e847f
 8003dc8:	003d08ff 	.word	0x003d08ff
 8003dcc:	431bde83 	.word	0x431bde83
 8003dd0:	10624dd3 	.word	0x10624dd3

08003dd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	4608      	mov	r0, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	461a      	mov	r2, r3
 8003de2:	4603      	mov	r3, r0
 8003de4:	817b      	strh	r3, [r7, #10]
 8003de6:	460b      	mov	r3, r1
 8003de8:	813b      	strh	r3, [r7, #8]
 8003dea:	4613      	mov	r3, r2
 8003dec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dee:	f7ff f8ed 	bl	8002fcc <HAL_GetTick>
 8003df2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	f040 80d9 	bne.w	8003fb4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	2319      	movs	r3, #25
 8003e08:	2201      	movs	r2, #1
 8003e0a:	496d      	ldr	r1, [pc, #436]	; (8003fc0 <HAL_I2C_Mem_Write+0x1ec>)
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f971 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e0cc      	b.n	8003fb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_I2C_Mem_Write+0x56>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e0c5      	b.n	8003fb6 <HAL_I2C_Mem_Write+0x1e2>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d007      	beq.n	8003e50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2221      	movs	r2, #33	; 0x21
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2240      	movs	r2, #64	; 0x40
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a3a      	ldr	r2, [r7, #32]
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4a4d      	ldr	r2, [pc, #308]	; (8003fc4 <HAL_I2C_Mem_Write+0x1f0>)
 8003e90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e92:	88f8      	ldrh	r0, [r7, #6]
 8003e94:	893a      	ldrh	r2, [r7, #8]
 8003e96:	8979      	ldrh	r1, [r7, #10]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f890 	bl	8003fc8 <I2C_RequestMemoryWrite>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d052      	beq.n	8003f54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e081      	b.n	8003fb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f9f2 	bl	80042a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00d      	beq.n	8003ede <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d107      	bne.n	8003eda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e06b      	b.n	8003fb6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	781a      	ldrb	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d11b      	bne.n	8003f54 <HAL_I2C_Mem_Write+0x180>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d017      	beq.n	8003f54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1aa      	bne.n	8003eb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f9de 	bl	8004322 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00d      	beq.n	8003f88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d107      	bne.n	8003f84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e016      	b.n	8003fb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	00100002 	.word	0x00100002
 8003fc4:	ffff0000 	.word	0xffff0000

08003fc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	817b      	strh	r3, [r7, #10]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	813b      	strh	r3, [r7, #8]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f878 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004018:	d103      	bne.n	8004022 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e05f      	b.n	80040e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004026:	897b      	ldrh	r3, [r7, #10]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004034:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	6a3a      	ldr	r2, [r7, #32]
 800403a:	492d      	ldr	r1, [pc, #180]	; (80040f0 <I2C_RequestMemoryWrite+0x128>)
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f8b0 	bl	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e04c      	b.n	80040e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004064:	6a39      	ldr	r1, [r7, #32]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f91a 	bl	80042a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00d      	beq.n	800408e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	2b04      	cmp	r3, #4
 8004078:	d107      	bne.n	800408a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004088:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e02b      	b.n	80040e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004094:	893b      	ldrh	r3, [r7, #8]
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]
 800409e:	e021      	b.n	80040e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040a0:	893b      	ldrh	r3, [r7, #8]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f8f4 	bl	80042a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d107      	bne.n	80040d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e005      	b.n	80040e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040da:	893b      	ldrh	r3, [r7, #8]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	00010002 	.word	0x00010002

080040f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004104:	e025      	b.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d021      	beq.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7fe ff5d 	bl	8002fcc <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d116      	bne.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e023      	b.n	800419a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d10d      	bne.n	8004178 <I2C_WaitOnFlagUntilTimeout+0x84>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	43da      	mvns	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	e00c      	b.n	8004192 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	43da      	mvns	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4013      	ands	r3, r2
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	429a      	cmp	r2, r3
 8004196:	d0b6      	beq.n	8004106 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041b0:	e051      	b.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c0:	d123      	bne.n	800420a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f043 0204 	orr.w	r2, r3, #4
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e046      	b.n	8004298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d021      	beq.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004212:	f7fe fedb 	bl	8002fcc <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d302      	bcc.n	8004228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d116      	bne.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e020      	b.n	8004298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	d10c      	bne.n	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	43da      	mvns	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	e00b      	b.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	43da      	mvns	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d18d      	bne.n	80041b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ac:	e02d      	b.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f878 	bl	80043a4 <I2C_IsAcknowledgeFailed>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e02d      	b.n	800431a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d021      	beq.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c6:	f7fe fe81 	bl	8002fcc <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d302      	bcc.n	80042dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d116      	bne.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e007      	b.n	800431a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	2b80      	cmp	r3, #128	; 0x80
 8004316:	d1ca      	bne.n	80042ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800432e:	e02d      	b.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f837 	bl	80043a4 <I2C_IsAcknowledgeFailed>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e02d      	b.n	800439c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d021      	beq.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004348:	f7fe fe40 	bl	8002fcc <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	429a      	cmp	r2, r3
 8004356:	d302      	bcc.n	800435e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d116      	bne.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e007      	b.n	800439c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b04      	cmp	r3, #4
 8004398:	d1ca      	bne.n	8004330 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d11b      	bne.n	80043f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f043 0204 	orr.w	r2, r3, #4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004404:	b08f      	sub	sp, #60	; 0x3c
 8004406:	af0a      	add	r7, sp, #40	; 0x28
 8004408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e116      	b.n	8004642 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f009 fea4 	bl	800e17c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2203      	movs	r2, #3
 8004438:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f003 ff47 	bl	80082e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	687e      	ldr	r6, [r7, #4]
 8004460:	466d      	mov	r5, sp
 8004462:	f106 0410 	add.w	r4, r6, #16
 8004466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800446a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800446c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800446e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004472:	e885 0003 	stmia.w	r5, {r0, r1}
 8004476:	1d33      	adds	r3, r6, #4
 8004478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800447a:	6838      	ldr	r0, [r7, #0]
 800447c:	f003 fe1e 	bl	80080bc <USB_CoreInit>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e0d7      	b.n	8004642 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f003 ff35 	bl	8008308 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800449e:	2300      	movs	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]
 80044a2:	e04a      	b.n	800453a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044a4:	7bfa      	ldrb	r2, [r7, #15]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	333d      	adds	r3, #61	; 0x3d
 80044b4:	2201      	movs	r2, #1
 80044b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044b8:	7bfa      	ldrb	r2, [r7, #15]
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	333c      	adds	r3, #60	; 0x3c
 80044c8:	7bfa      	ldrb	r2, [r7, #15]
 80044ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044cc:	7bfa      	ldrb	r2, [r7, #15]
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	b298      	uxth	r0, r3
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	3342      	adds	r3, #66	; 0x42
 80044e0:	4602      	mov	r2, r0
 80044e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044e4:	7bfa      	ldrb	r2, [r7, #15]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	333f      	adds	r3, #63	; 0x3f
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044f8:	7bfa      	ldrb	r2, [r7, #15]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	3344      	adds	r3, #68	; 0x44
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800450c:	7bfa      	ldrb	r2, [r7, #15]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	3348      	adds	r3, #72	; 0x48
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004520:	7bfa      	ldrb	r2, [r7, #15]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	3350      	adds	r3, #80	; 0x50
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	3301      	adds	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
 800453a:	7bfa      	ldrb	r2, [r7, #15]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	d3af      	bcc.n	80044a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004544:	2300      	movs	r3, #0
 8004546:	73fb      	strb	r3, [r7, #15]
 8004548:	e044      	b.n	80045d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800454a:	7bfa      	ldrb	r2, [r7, #15]
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004560:	7bfa      	ldrb	r2, [r7, #15]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004572:	7bfa      	ldrb	r2, [r7, #15]
 8004574:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004576:	7bfa      	ldrb	r2, [r7, #15]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800458c:	7bfa      	ldrb	r2, [r7, #15]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045a2:	7bfa      	ldrb	r2, [r7, #15]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045b8:	7bfa      	ldrb	r2, [r7, #15]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
 80045d0:	3301      	adds	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
 80045d4:	7bfa      	ldrb	r2, [r7, #15]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d3b5      	bcc.n	800454a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	687e      	ldr	r6, [r7, #4]
 80045e6:	466d      	mov	r5, sp
 80045e8:	f106 0410 	add.w	r4, r6, #16
 80045ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80045fc:	1d33      	adds	r3, r6, #4
 80045fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004600:	6838      	ldr	r0, [r7, #0]
 8004602:	f003 feab 	bl	800835c <USB_DevInit>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e014      	b.n	8004642 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	2b01      	cmp	r3, #1
 800462e:	d102      	bne.n	8004636 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f001 f879 	bl	8005728 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f004 fee6 	bl	800940c <USB_DevDisconnect>

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800464a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_PCD_Start+0x1c>
 8004662:	2302      	movs	r3, #2
 8004664:	e020      	b.n	80046a8 <HAL_PCD_Start+0x5e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	2b01      	cmp	r3, #1
 8004674:	d109      	bne.n	800468a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800467a:	2b01      	cmp	r3, #1
 800467c:	d005      	beq.n	800468a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f003 fe18 	bl	80082c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f004 fe96 	bl	80093ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b08d      	sub	sp, #52	; 0x34
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f004 ff54 	bl	8009574 <USB_GetMode>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 83ca 	bne.w	8004e68 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f004 feb8 	bl	800944e <USB_ReadInterrupts>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 83c0 	beq.w	8004e66 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f004 feaf 	bl	800944e <USB_ReadInterrupts>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d107      	bne.n	800470a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f002 0202 	and.w	r2, r2, #2
 8004708:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f004 fe9d 	bl	800944e <USB_ReadInterrupts>
 8004714:	4603      	mov	r3, r0
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	2b10      	cmp	r3, #16
 800471c:	d161      	bne.n	80047e2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699a      	ldr	r2, [r3, #24]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0210 	bic.w	r2, r2, #16
 800472c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f003 020f 	and.w	r2, r3, #15
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	3304      	adds	r3, #4
 800474c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	0c5b      	lsrs	r3, r3, #17
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	2b02      	cmp	r3, #2
 8004758:	d124      	bne.n	80047a4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004760:	4013      	ands	r3, r2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d035      	beq.n	80047d2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004774:	b29b      	uxth	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	6a38      	ldr	r0, [r7, #32]
 800477a:	f004 fd03 	bl	8009184 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800478a:	441a      	add	r2, r3
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	699a      	ldr	r2, [r3, #24]
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800479c:	441a      	add	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	619a      	str	r2, [r3, #24]
 80047a2:	e016      	b.n	80047d2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	0c5b      	lsrs	r3, r3, #17
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	2b06      	cmp	r3, #6
 80047ae:	d110      	bne.n	80047d2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047b6:	2208      	movs	r2, #8
 80047b8:	4619      	mov	r1, r3
 80047ba:	6a38      	ldr	r0, [r7, #32]
 80047bc:	f004 fce2 	bl	8009184 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	699a      	ldr	r2, [r3, #24]
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	091b      	lsrs	r3, r3, #4
 80047c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047cc:	441a      	add	r2, r3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699a      	ldr	r2, [r3, #24]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0210 	orr.w	r2, r2, #16
 80047e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f004 fe31 	bl	800944e <USB_ReadInterrupts>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047f6:	d16e      	bne.n	80048d6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f004 fe37 	bl	8009474 <USB_ReadDevAllOutEpInterrupt>
 8004806:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004808:	e062      	b.n	80048d0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d057      	beq.n	80048c4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f004 fe5c 	bl	80094dc <USB_ReadDevOutEPInterrupt>
 8004824:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00c      	beq.n	800484a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483c:	461a      	mov	r2, r3
 800483e:	2301      	movs	r3, #1
 8004840:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fdc5 	bl	80053d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00c      	beq.n	800486e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004860:	461a      	mov	r2, r3
 8004862:	2308      	movs	r3, #8
 8004864:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004866:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 febf 	bl	80055ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004884:	461a      	mov	r2, r3
 8004886:	2310      	movs	r3, #16
 8004888:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	461a      	mov	r2, r3
 80048a2:	2320      	movs	r3, #32
 80048a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d009      	beq.n	80048c4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048bc:	461a      	mov	r2, r3
 80048be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	3301      	adds	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d199      	bne.n	800480a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f004 fdb7 	bl	800944e <USB_ReadInterrupts>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048ea:	f040 80c0 	bne.w	8004a6e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f004 fdd8 	bl	80094a8 <USB_ReadDevAllInEpInterrupt>
 80048f8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80048fe:	e0b2      	b.n	8004a66 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 80a7 	beq.w	8004a5a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f004 fdfe 	bl	8009518 <USB_ReadDevInEPInterrupt>
 800491c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d057      	beq.n	80049d8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	2201      	movs	r2, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	43db      	mvns	r3, r3
 8004942:	69f9      	ldr	r1, [r7, #28]
 8004944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004948:	4013      	ands	r3, r2
 800494a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	461a      	mov	r2, r3
 800495a:	2301      	movs	r3, #1
 800495c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d132      	bne.n	80049cc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496a:	4613      	mov	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	3348      	adds	r3, #72	; 0x48
 8004976:	6819      	ldr	r1, [r3, #0]
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497c:	4613      	mov	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4403      	add	r3, r0
 8004986:	3344      	adds	r3, #68	; 0x44
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4419      	add	r1, r3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004990:	4613      	mov	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4403      	add	r3, r0
 800499a:	3348      	adds	r3, #72	; 0x48
 800499c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d113      	bne.n	80049cc <HAL_PCD_IRQHandler+0x31c>
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a8:	4613      	mov	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	3350      	adds	r3, #80	; 0x50
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d108      	bne.n	80049cc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049c4:	461a      	mov	r2, r3
 80049c6:	2101      	movs	r1, #1
 80049c8:	f004 fe06 	bl	80095d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	4619      	mov	r1, r3
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f009 fc53 	bl	800e27e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	461a      	mov	r2, r3
 80049f0:	2308      	movs	r3, #8
 80049f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f003 0310 	and.w	r3, r3, #16
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d008      	beq.n	8004a10 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d008      	beq.n	8004a2c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a26:	461a      	mov	r2, r3
 8004a28:	2340      	movs	r3, #64	; 0x40
 8004a2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a42:	461a      	mov	r2, r3
 8004a44:	2302      	movs	r3, #2
 8004a46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fc30 	bl	80052ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f47f af49 	bne.w	8004900 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f004 fceb 	bl	800944e <USB_ReadInterrupts>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a82:	d122      	bne.n	8004aca <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d108      	bne.n	8004ab4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004aaa:	2100      	movs	r1, #0
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f009 fe23 	bl	800e6f8 <HAL_PCDEx_LPM_Callback>
 8004ab2:	e002      	b.n	8004aba <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f009 fc59 	bl	800e36c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f004 fcbd 	bl	800944e <USB_ReadInterrupts>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ade:	d112      	bne.n	8004b06 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d102      	bne.n	8004af6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f009 fc15 	bl	800e320 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004b04:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f004 fc9f 	bl	800944e <USB_ReadInterrupts>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b1a:	d121      	bne.n	8004b60 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004b2a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d111      	bne.n	8004b5a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	f003 020f 	and.w	r2, r3, #15
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004b50:	2101      	movs	r1, #1
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f009 fdd0 	bl	800e6f8 <HAL_PCDEx_LPM_Callback>
 8004b58:	e002      	b.n	8004b60 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f009 fbe0 	bl	800e320 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f004 fc72 	bl	800944e <USB_ReadInterrupts>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b74:	f040 80c7 	bne.w	8004d06 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2110      	movs	r1, #16
 8004b92:	4618      	mov	r0, r3
 8004b94:	f003 fd40 	bl	8008618 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9c:	e056      	b.n	8004c4c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004baa:	461a      	mov	r2, r3
 8004bac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bb0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bc2:	0151      	lsls	r1, r2, #5
 8004bc4:	69fa      	ldr	r2, [r7, #28]
 8004bc6:	440a      	add	r2, r1
 8004bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bd0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be2:	0151      	lsls	r1, r2, #5
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	440a      	add	r2, r1
 8004be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bf0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c04:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c36:	0151      	lsls	r1, r2, #5
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	440a      	add	r2, r1
 8004c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c44:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	3301      	adds	r3, #1
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d3a3      	bcc.n	8004b9e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c64:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004c68:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d016      	beq.n	8004ca0 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c82:	f043 030b 	orr.w	r3, r3, #11
 8004c86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c98:	f043 030b 	orr.w	r3, r3, #11
 8004c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c9e:	e015      	b.n	8004ccc <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cb2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004cb6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc6:	f043 030b 	orr.w	r3, r3, #11
 8004cca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004cde:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f004 fc71 	bl	80095d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695a      	ldr	r2, [r3, #20]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f004 fb9f 	bl	800944e <USB_ReadInterrupts>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1a:	d124      	bne.n	8004d66 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f004 fc35 	bl	8009590 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f003 fcd5 	bl	80086da <USB_GetDevSpeed>
 8004d30:	4603      	mov	r3, r0
 8004d32:	461a      	mov	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681c      	ldr	r4, [r3, #0]
 8004d3c:	f000 fdfe 	bl	800593c <HAL_RCC_GetHCLKFreq>
 8004d40:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f003 fa18 	bl	8008180 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f009 fabc 	bl	800e2ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f004 fb6f 	bl	800944e <USB_ReadInterrupts>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d10a      	bne.n	8004d90 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f009 fa99 	bl	800e2b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f002 0208 	and.w	r2, r2, #8
 8004d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f004 fb5a 	bl	800944e <USB_ReadInterrupts>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004da4:	d10f      	bne.n	8004dc6 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f009 fafb 	bl	800e3ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695a      	ldr	r2, [r3, #20]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f004 fb3f 	bl	800944e <USB_ReadInterrupts>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dda:	d10f      	bne.n	8004dfc <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	4619      	mov	r1, r3
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f009 face 	bl	800e388 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f004 fb24 	bl	800944e <USB_ReadInterrupts>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e10:	d10a      	bne.n	8004e28 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f009 fadc 	bl	800e3d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695a      	ldr	r2, [r3, #20]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f004 fb0e 	bl	800944e <USB_ReadInterrupts>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d115      	bne.n	8004e68 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f009 facc 	bl	800e3ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6859      	ldr	r1, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	605a      	str	r2, [r3, #4]
 8004e64:	e000      	b.n	8004e68 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004e66:	bf00      	nop
    }
  }
}
 8004e68:	3734      	adds	r7, #52	; 0x34
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd90      	pop	{r4, r7, pc}

08004e6e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_PCD_SetAddress+0x1a>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e013      	b.n	8004eb0 <HAL_PCD_SetAddress+0x42>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	78fa      	ldrb	r2, [r7, #3]
 8004e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	78fa      	ldrb	r2, [r7, #3]
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f004 fa6c 	bl	800937e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	70fb      	strb	r3, [r7, #3]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	803b      	strh	r3, [r7, #0]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da0f      	bge.n	8004efe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	f003 020f 	and.w	r2, r3, #15
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	3338      	adds	r3, #56	; 0x38
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	705a      	strb	r2, [r3, #1]
 8004efc:	e00f      	b.n	8004f1e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	f003 020f 	and.w	r2, r3, #15
 8004f04:	4613      	mov	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	4413      	add	r3, r2
 8004f14:	3304      	adds	r3, #4
 8004f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f2a:	883a      	ldrh	r2, [r7, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	78ba      	ldrb	r2, [r7, #2]
 8004f34:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	785b      	ldrb	r3, [r3, #1]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f48:	78bb      	ldrb	r3, [r7, #2]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d102      	bne.n	8004f54 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_PCD_EP_Open+0xaa>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e00e      	b.n	8004f80 <HAL_PCD_EP_Open+0xc8>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68f9      	ldr	r1, [r7, #12]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f003 fbd7 	bl	8008724 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004f7e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	da0f      	bge.n	8004fbc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	f003 020f 	and.w	r2, r3, #15
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	3338      	adds	r3, #56	; 0x38
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	4413      	add	r3, r2
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	705a      	strb	r2, [r3, #1]
 8004fba:	e00f      	b.n	8004fdc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	f003 020f 	and.w	r2, r3, #15
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_PCD_EP_Close+0x6e>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e00e      	b.n	8005014 <HAL_PCD_EP_Close+0x8c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	4618      	mov	r0, r3
 8005006:	f003 fc15 	bl	8008834 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	460b      	mov	r3, r1
 800502a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800502c:	7afb      	ldrb	r3, [r7, #11]
 800502e:	f003 020f 	and.w	r2, r3, #15
 8005032:	4613      	mov	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	3304      	adds	r3, #4
 8005044:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2200      	movs	r2, #0
 8005056:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2200      	movs	r2, #0
 800505c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800505e:	7afb      	ldrb	r3, [r7, #11]
 8005060:	f003 030f 	and.w	r3, r3, #15
 8005064:	b2da      	uxtb	r2, r3
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d102      	bne.n	8005078 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005078:	7afb      	ldrb	r3, [r7, #11]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	6979      	ldr	r1, [r7, #20]
 8005090:	f003 fef0 	bl	8008e74 <USB_EP0StartXfer>
 8005094:	e008      	b.n	80050a8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	6979      	ldr	r1, [r7, #20]
 80050a4:	f003 fca2 	bl	80089ec <USB_EPStartXfer>
  }

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b086      	sub	sp, #24
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
 80050be:	460b      	mov	r3, r1
 80050c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050c2:	7afb      	ldrb	r3, [r7, #11]
 80050c4:	f003 020f 	and.w	r2, r3, #15
 80050c8:	4613      	mov	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	1a9b      	subs	r3, r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	3338      	adds	r3, #56	; 0x38
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	3304      	adds	r3, #4
 80050d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2200      	movs	r2, #0
 80050ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2201      	movs	r2, #1
 80050f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050f2:	7afb      	ldrb	r3, [r7, #11]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d102      	bne.n	800510c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800510c:	7afb      	ldrb	r3, [r7, #11]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	6979      	ldr	r1, [r7, #20]
 8005124:	f003 fea6 	bl	8008e74 <USB_EP0StartXfer>
 8005128:	e008      	b.n	800513c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	6979      	ldr	r1, [r7, #20]
 8005138:	f003 fc58 	bl	80089ec <USB_EPStartXfer>
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	460b      	mov	r3, r1
 8005150:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	f003 020f 	and.w	r2, r3, #15
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	429a      	cmp	r2, r3
 800515e:	d901      	bls.n	8005164 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e050      	b.n	8005206 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005168:	2b00      	cmp	r3, #0
 800516a:	da0f      	bge.n	800518c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	f003 020f 	and.w	r2, r3, #15
 8005172:	4613      	mov	r3, r2
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	3338      	adds	r3, #56	; 0x38
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	4413      	add	r3, r2
 8005180:	3304      	adds	r3, #4
 8005182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	705a      	strb	r2, [r3, #1]
 800518a:	e00d      	b.n	80051a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800518c:	78fa      	ldrb	r2, [r7, #3]
 800518e:	4613      	mov	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	1a9b      	subs	r3, r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	3304      	adds	r3, #4
 80051a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_PCD_EP_SetStall+0x82>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e01e      	b.n	8005206 <HAL_PCD_EP_SetStall+0xc0>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68f9      	ldr	r1, [r7, #12]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f003 fffd 	bl	80091d6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	b2d9      	uxtb	r1, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051f6:	461a      	mov	r2, r3
 80051f8:	f004 f9ee 	bl	80095d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	460b      	mov	r3, r1
 8005218:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	f003 020f 	and.w	r2, r3, #15
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	d901      	bls.n	800522c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e042      	b.n	80052b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800522c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005230:	2b00      	cmp	r3, #0
 8005232:	da0f      	bge.n	8005254 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	f003 020f 	and.w	r2, r3, #15
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	3338      	adds	r3, #56	; 0x38
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	4413      	add	r3, r2
 8005248:	3304      	adds	r3, #4
 800524a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	705a      	strb	r2, [r3, #1]
 8005252:	e00f      	b.n	8005274 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	f003 020f 	and.w	r2, r3, #15
 800525a:	4613      	mov	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	4413      	add	r3, r2
 800526a:	3304      	adds	r3, #4
 800526c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	b2da      	uxtb	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_PCD_EP_ClrStall+0x86>
 8005290:	2302      	movs	r3, #2
 8005292:	e00e      	b.n	80052b2 <HAL_PCD_EP_ClrStall+0xa4>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68f9      	ldr	r1, [r7, #12]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f004 f805 	bl	80092b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b08a      	sub	sp, #40	; 0x28
 80052be:	af02      	add	r7, sp, #8
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	3338      	adds	r3, #56	; 0x38
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	3304      	adds	r3, #4
 80052e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d901      	bls.n	80052f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e06c      	b.n	80053cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	695a      	ldr	r2, [r3, #20]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	429a      	cmp	r2, r3
 8005306:	d902      	bls.n	800530e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	3303      	adds	r3, #3
 8005312:	089b      	lsrs	r3, r3, #2
 8005314:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005316:	e02b      	b.n	8005370 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	429a      	cmp	r2, r3
 800532c:	d902      	bls.n	8005334 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	3303      	adds	r3, #3
 8005338:	089b      	lsrs	r3, r3, #2
 800533a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	68d9      	ldr	r1, [r3, #12]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800534c:	b2db      	uxtb	r3, r3
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	4603      	mov	r3, r0
 8005352:	6978      	ldr	r0, [r7, #20]
 8005354:	f003 fee1 	bl	800911a <USB_WritePacket>

    ep->xfer_buff  += len;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	441a      	add	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	699a      	ldr	r2, [r3, #24]
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	441a      	add	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	b29b      	uxth	r3, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	429a      	cmp	r2, r3
 8005384:	d809      	bhi.n	800539a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800538e:	429a      	cmp	r2, r3
 8005390:	d203      	bcs.n	800539a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1be      	bne.n	8005318 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d811      	bhi.n	80053ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	2201      	movs	r2, #1
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	43db      	mvns	r3, r3
 80053c0:	6939      	ldr	r1, [r7, #16]
 80053c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c6:	4013      	ands	r3, r2
 80053c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3720      	adds	r7, #32
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	333c      	adds	r3, #60	; 0x3c
 80053ec:	3304      	adds	r3, #4
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b01      	cmp	r3, #1
 8005408:	f040 80a0 	bne.w	800554c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d015      	beq.n	8005442 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4a72      	ldr	r2, [pc, #456]	; (80055e4 <PCD_EP_OutXfrComplete_int+0x210>)
 800541a:	4293      	cmp	r3, r2
 800541c:	f240 80dd 	bls.w	80055da <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 80d7 	beq.w	80055da <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	461a      	mov	r2, r3
 800543a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543e:	6093      	str	r3, [r2, #8]
 8005440:	e0cb      	b.n	80055da <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b00      	cmp	r3, #0
 800544a:	d009      	beq.n	8005460 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	461a      	mov	r2, r3
 800545a:	2320      	movs	r3, #32
 800545c:	6093      	str	r3, [r2, #8]
 800545e:	e0bc      	b.n	80055da <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005466:	2b00      	cmp	r3, #0
 8005468:	f040 80b7 	bne.w	80055da <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4a5d      	ldr	r2, [pc, #372]	; (80055e4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d90f      	bls.n	8005494 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	461a      	mov	r2, r3
 800548c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005490:	6093      	str	r3, [r2, #8]
 8005492:	e0a2      	b.n	80055da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80054a6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	0159      	lsls	r1, r3, #5
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	440b      	add	r3, r1
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80054ba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4403      	add	r3, r0
 80054ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80054ce:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	4613      	mov	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4403      	add	r3, r0
 80054f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4419      	add	r1, r3
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	4613      	mov	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4403      	add	r3, r0
 8005508:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800550c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d114      	bne.n	800553e <PCD_EP_OutXfrComplete_int+0x16a>
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d108      	bne.n	800553e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005536:	461a      	mov	r2, r3
 8005538:	2101      	movs	r1, #1
 800553a:	f004 f84d 	bl	80095d8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f008 fe7f 	bl	800e248 <HAL_PCD_DataOutStageCallback>
 800554a:	e046      	b.n	80055da <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a26      	ldr	r2, [pc, #152]	; (80055e8 <PCD_EP_OutXfrComplete_int+0x214>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d124      	bne.n	800559e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	461a      	mov	r2, r3
 800556c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005570:	6093      	str	r3, [r2, #8]
 8005572:	e032      	b.n	80055da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d008      	beq.n	8005590 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	461a      	mov	r2, r3
 800558c:	2320      	movs	r3, #32
 800558e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f008 fe56 	bl	800e248 <HAL_PCD_DataOutStageCallback>
 800559c:	e01d      	b.n	80055da <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d114      	bne.n	80055ce <PCD_EP_OutXfrComplete_int+0x1fa>
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	4613      	mov	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	1a9b      	subs	r3, r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d108      	bne.n	80055ce <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055c6:	461a      	mov	r2, r3
 80055c8:	2100      	movs	r1, #0
 80055ca:	f004 f805 	bl	80095d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f008 fe37 	bl	800e248 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	4f54300a 	.word	0x4f54300a
 80055e8:	4f54310a 	.word	0x4f54310a

080055ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	333c      	adds	r3, #60	; 0x3c
 8005604:	3304      	adds	r3, #4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4a15      	ldr	r2, [pc, #84]	; (8005674 <PCD_EP_OutSetupPacket_int+0x88>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d90e      	bls.n	8005640 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005638:	461a      	mov	r2, r3
 800563a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800563e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f008 fdef 	bl	800e224 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4a0a      	ldr	r2, [pc, #40]	; (8005674 <PCD_EP_OutSetupPacket_int+0x88>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d90c      	bls.n	8005668 <PCD_EP_OutSetupPacket_int+0x7c>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d108      	bne.n	8005668 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005660:	461a      	mov	r2, r3
 8005662:	2101      	movs	r1, #1
 8005664:	f003 ffb8 	bl	80095d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	4f54300a 	.word	0x4f54300a

08005678 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	70fb      	strb	r3, [r7, #3]
 8005684:	4613      	mov	r3, r2
 8005686:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d107      	bne.n	80056a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005696:	883b      	ldrh	r3, [r7, #0]
 8005698:	0419      	lsls	r1, r3, #16
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	629a      	str	r2, [r3, #40]	; 0x28
 80056a4:	e028      	b.n	80056f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	0c1b      	lsrs	r3, r3, #16
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	4413      	add	r3, r2
 80056b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056b4:	2300      	movs	r3, #0
 80056b6:	73fb      	strb	r3, [r7, #15]
 80056b8:	e00d      	b.n	80056d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	3340      	adds	r3, #64	; 0x40
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	0c1b      	lsrs	r3, r3, #16
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	4413      	add	r3, r2
 80056ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	3301      	adds	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
 80056d6:	7bfa      	ldrb	r2, [r7, #15]
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	3b01      	subs	r3, #1
 80056dc:	429a      	cmp	r2, r3
 80056de:	d3ec      	bcc.n	80056ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80056e0:	883b      	ldrh	r3, [r7, #0]
 80056e2:	0418      	lsls	r0, r3, #16
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6819      	ldr	r1, [r3, #0]
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	4302      	orrs	r2, r0
 80056f0:	3340      	adds	r3, #64	; 0x40
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	460b      	mov	r3, r1
 8005710:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	887a      	ldrh	r2, [r7, #2]
 8005718:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575a:	f043 0303 	orr.w	r3, r3, #3
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e0cc      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005784:	4b68      	ldr	r3, [pc, #416]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 030f 	and.w	r3, r3, #15
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d90c      	bls.n	80057ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005792:	4b65      	ldr	r3, [pc, #404]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800579a:	4b63      	ldr	r3, [pc, #396]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d001      	beq.n	80057ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e0b8      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d020      	beq.n	80057fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057c4:	4b59      	ldr	r3, [pc, #356]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	4a58      	ldr	r2, [pc, #352]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057dc:	4b53      	ldr	r3, [pc, #332]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4a52      	ldr	r2, [pc, #328]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e8:	4b50      	ldr	r3, [pc, #320]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	494d      	ldr	r1, [pc, #308]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d044      	beq.n	8005890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d107      	bne.n	800581e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580e:	4b47      	ldr	r3, [pc, #284]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d119      	bne.n	800584e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e07f      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d003      	beq.n	800582e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800582a:	2b03      	cmp	r3, #3
 800582c:	d107      	bne.n	800583e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800582e:	4b3f      	ldr	r3, [pc, #252]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d109      	bne.n	800584e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e06f      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800583e:	4b3b      	ldr	r3, [pc, #236]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e067      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800584e:	4b37      	ldr	r3, [pc, #220]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f023 0203 	bic.w	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4934      	ldr	r1, [pc, #208]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	4313      	orrs	r3, r2
 800585e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005860:	f7fd fbb4 	bl	8002fcc <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005866:	e00a      	b.n	800587e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005868:	f7fd fbb0 	bl	8002fcc <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f241 3288 	movw	r2, #5000	; 0x1388
 8005876:	4293      	cmp	r3, r2
 8005878:	d901      	bls.n	800587e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e04f      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587e:	4b2b      	ldr	r3, [pc, #172]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 020c 	and.w	r2, r3, #12
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	429a      	cmp	r2, r3
 800588e:	d1eb      	bne.n	8005868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005890:	4b25      	ldr	r3, [pc, #148]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d20c      	bcs.n	80058b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589e:	4b22      	ldr	r3, [pc, #136]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a6:	4b20      	ldr	r3, [pc, #128]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e032      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d008      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058c4:	4b19      	ldr	r3, [pc, #100]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4916      	ldr	r1, [pc, #88]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d009      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	490e      	ldr	r1, [pc, #56]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058f6:	f000 fbb1 	bl	800605c <HAL_RCC_GetSysClockFreq>
 80058fa:	4602      	mov	r2, r0
 80058fc:	4b0b      	ldr	r3, [pc, #44]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	091b      	lsrs	r3, r3, #4
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	490a      	ldr	r1, [pc, #40]	; (8005930 <HAL_RCC_ClockConfig+0x1c0>)
 8005908:	5ccb      	ldrb	r3, [r1, r3]
 800590a:	fa22 f303 	lsr.w	r3, r2, r3
 800590e:	4a09      	ldr	r2, [pc, #36]	; (8005934 <HAL_RCC_ClockConfig+0x1c4>)
 8005910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <HAL_RCC_ClockConfig+0x1c8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f7fd f9fc 	bl	8002d14 <HAL_InitTick>

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40023c00 	.word	0x40023c00
 800592c:	40023800 	.word	0x40023800
 8005930:	08017ab8 	.word	0x08017ab8
 8005934:	20000004 	.word	0x20000004
 8005938:	20000008 	.word	0x20000008

0800593c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005940:	4b03      	ldr	r3, [pc, #12]	; (8005950 <HAL_RCC_GetHCLKFreq+0x14>)
 8005942:	681b      	ldr	r3, [r3, #0]
}
 8005944:	4618      	mov	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20000004 	.word	0x20000004

08005954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005958:	f7ff fff0 	bl	800593c <HAL_RCC_GetHCLKFreq>
 800595c:	4602      	mov	r2, r0
 800595e:	4b05      	ldr	r3, [pc, #20]	; (8005974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	0a9b      	lsrs	r3, r3, #10
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	4903      	ldr	r1, [pc, #12]	; (8005978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800596a:	5ccb      	ldrb	r3, [r1, r3]
 800596c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005970:	4618      	mov	r0, r3
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40023800 	.word	0x40023800
 8005978:	08017ac8 	.word	0x08017ac8

0800597c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005980:	f7ff ffdc 	bl	800593c <HAL_RCC_GetHCLKFreq>
 8005984:	4602      	mov	r2, r0
 8005986:	4b05      	ldr	r3, [pc, #20]	; (800599c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	0b5b      	lsrs	r3, r3, #13
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	4903      	ldr	r1, [pc, #12]	; (80059a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005992:	5ccb      	ldrb	r3, [r1, r3]
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005998:	4618      	mov	r0, r3
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40023800 	.word	0x40023800
 80059a0:	08017ac8 	.word	0x08017ac8

080059a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	220f      	movs	r2, #15
 80059b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80059b4:	4b12      	ldr	r3, [pc, #72]	; (8005a00 <HAL_RCC_GetClockConfig+0x5c>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0203 	and.w	r2, r3, #3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80059c0:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <HAL_RCC_GetClockConfig+0x5c>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80059cc:	4b0c      	ldr	r3, [pc, #48]	; (8005a00 <HAL_RCC_GetClockConfig+0x5c>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80059d8:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <HAL_RCC_GetClockConfig+0x5c>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	08db      	lsrs	r3, r3, #3
 80059de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059e6:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <HAL_RCC_GetClockConfig+0x60>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 020f 	and.w	r2, r3, #15
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	601a      	str	r2, [r3, #0]
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40023800 	.word	0x40023800
 8005a04:	40023c00 	.word	0x40023c00

08005a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08c      	sub	sp, #48	; 0x30
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d010      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005a40:	4b6f      	ldr	r3, [pc, #444]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a46:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	496c      	ldr	r1, [pc, #432]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d010      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005a6e:	4b64      	ldr	r3, [pc, #400]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a74:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7c:	4960      	ldr	r1, [pc, #384]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d017      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a9c:	4b58      	ldr	r3, [pc, #352]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	4955      	ldr	r1, [pc, #340]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aba:	d101      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005abc:	2301      	movs	r3, #1
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d017      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ad8:	4b49      	ldr	r3, [pc, #292]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ade:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	4946      	ldr	r1, [pc, #280]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005af6:	d101      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005af8:	2301      	movs	r3, #1
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005b04:	2301      	movs	r3, #1
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 808a 	beq.w	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	4b39      	ldr	r3, [pc, #228]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	4a38      	ldr	r2, [pc, #224]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b24:	6413      	str	r3, [r2, #64]	; 0x40
 8005b26:	4b36      	ldr	r3, [pc, #216]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b2e:	60bb      	str	r3, [r7, #8]
 8005b30:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b32:	4b34      	ldr	r3, [pc, #208]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a33      	ldr	r2, [pc, #204]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b3e:	f7fd fa45 	bl	8002fcc <HAL_GetTick>
 8005b42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b44:	e008      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b46:	f7fd fa41 	bl	8002fcc <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e278      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b58:	4b2a      	ldr	r3, [pc, #168]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0f0      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b64:	4b26      	ldr	r3, [pc, #152]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b6c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d02f      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7c:	6a3a      	ldr	r2, [r7, #32]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d028      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b82:	4b1f      	ldr	r3, [pc, #124]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b8c:	4b1e      	ldr	r3, [pc, #120]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b92:	4b1d      	ldr	r3, [pc, #116]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b98:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b9e:	4b18      	ldr	r3, [pc, #96]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d114      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005baa:	f7fd fa0f 	bl	8002fcc <HAL_GetTick>
 8005bae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb0:	e00a      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bb2:	f7fd fa0b 	bl	8002fcc <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e240      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc8:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ee      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be0:	d114      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005be2:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf6:	4902      	ldr	r1, [pc, #8]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	608b      	str	r3, [r1, #8]
 8005bfc:	e00c      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005bfe:	bf00      	nop
 8005c00:	40023800 	.word	0x40023800
 8005c04:	40007000 	.word	0x40007000
 8005c08:	42470e40 	.word	0x42470e40
 8005c0c:	4b4a      	ldr	r3, [pc, #296]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	4a49      	ldr	r2, [pc, #292]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c16:	6093      	str	r3, [r2, #8]
 8005c18:	4b47      	ldr	r3, [pc, #284]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c24:	4944      	ldr	r1, [pc, #272]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0310 	and.w	r3, r3, #16
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d004      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005c3c:	4b3f      	ldr	r3, [pc, #252]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005c3e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005c4c:	4b3a      	ldr	r3, [pc, #232]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5a:	4937      	ldr	r1, [pc, #220]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c6e:	4b32      	ldr	r3, [pc, #200]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c74:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c7c:	492e      	ldr	r1, [pc, #184]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d011      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c90:	4b29      	ldr	r3, [pc, #164]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c96:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9e:	4926      	ldr	r1, [pc, #152]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005caa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cae:	d101      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cce:	491a      	ldr	r1, [pc, #104]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d011      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005ce2:	4b15      	ldr	r3, [pc, #84]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf0:	4911      	ldr	r1, [pc, #68]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d00:	d101      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005d02:	2301      	movs	r3, #1
 8005d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d14:	f040 80ff 	bne.w	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d18:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d1e:	f7fd f955 	bl	8002fcc <HAL_GetTick>
 8005d22:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d24:	e00e      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d26:	f7fd f951 	bl	8002fcc <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d907      	bls.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e188      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	424711e0 	.word	0x424711e0
 8005d40:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d44:	4b7e      	ldr	r3, [pc, #504]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1ea      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d009      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d028      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d124      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005d78:	4b71      	ldr	r3, [pc, #452]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d7e:	0c1b      	lsrs	r3, r3, #16
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	3301      	adds	r3, #1
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d8a:	4b6d      	ldr	r3, [pc, #436]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d90:	0e1b      	lsrs	r3, r3, #24
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	019b      	lsls	r3, r3, #6
 8005da2:	431a      	orrs	r2, r3
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	3b01      	subs	r3, #1
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	431a      	orrs	r2, r3
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	061b      	lsls	r3, r3, #24
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	071b      	lsls	r3, r3, #28
 8005dba:	4961      	ldr	r1, [pc, #388]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d004      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd6:	d00a      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d035      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dec:	d130      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005dee:	4b54      	ldr	r3, [pc, #336]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df4:	0c1b      	lsrs	r3, r3, #16
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e00:	4b4f      	ldr	r3, [pc, #316]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e06:	0f1b      	lsrs	r3, r3, #28
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	019b      	lsls	r3, r3, #6
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	085b      	lsrs	r3, r3, #1
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	041b      	lsls	r3, r3, #16
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	061b      	lsls	r3, r3, #24
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	071b      	lsls	r3, r3, #28
 8005e30:	4943      	ldr	r1, [pc, #268]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e38:	4b41      	ldr	r3, [pc, #260]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e3e:	f023 021f 	bic.w	r2, r3, #31
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e46:	3b01      	subs	r3, #1
 8005e48:	493d      	ldr	r1, [pc, #244]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d029      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e64:	d124      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005e66:	4b36      	ldr	r3, [pc, #216]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e6c:	0c1b      	lsrs	r3, r3, #16
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	3301      	adds	r3, #1
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e78:	4b31      	ldr	r3, [pc, #196]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e7e:	0f1b      	lsrs	r3, r3, #28
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	019b      	lsls	r3, r3, #6
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	061b      	lsls	r3, r3, #24
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	071b      	lsls	r3, r3, #28
 8005ea8:	4925      	ldr	r1, [pc, #148]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d016      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	019b      	lsls	r3, r3, #6
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	085b      	lsrs	r3, r3, #1
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	041b      	lsls	r3, r3, #16
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	061b      	lsls	r3, r3, #24
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	071b      	lsls	r3, r3, #28
 8005ee2:	4917      	ldr	r1, [pc, #92]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005eea:	4b16      	ldr	r3, [pc, #88]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005eec:	2201      	movs	r2, #1
 8005eee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ef0:	f7fd f86c 	bl	8002fcc <HAL_GetTick>
 8005ef4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ef8:	f7fd f868 	bl	8002fcc <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e09f      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f0a:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0f0      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	f040 8095 	bne.w	8006048 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f24:	f7fd f852 	bl	8002fcc <HAL_GetTick>
 8005f28:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f2a:	e00f      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f2c:	f7fd f84e 	bl	8002fcc <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d908      	bls.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e085      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005f3e:	bf00      	nop
 8005f40:	40023800 	.word	0x40023800
 8005f44:	42470068 	.word	0x42470068
 8005f48:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f4c:	4b41      	ldr	r3, [pc, #260]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f58:	d0e8      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d02b      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d127      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005f82:	4b34      	ldr	r3, [pc, #208]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f88:	0c1b      	lsrs	r3, r3, #16
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	3301      	adds	r3, #1
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699a      	ldr	r2, [r3, #24]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	019b      	lsls	r3, r3, #6
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	085b      	lsrs	r3, r3, #1
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	061b      	lsls	r3, r3, #24
 8005fb0:	4928      	ldr	r1, [pc, #160]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005fb8:	4b26      	ldr	r3, [pc, #152]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fbe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	4922      	ldr	r1, [pc, #136]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d01d      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fe6:	d118      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fe8:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fee:	0e1b      	lsrs	r3, r3, #24
 8005ff0:	f003 030f 	and.w	r3, r3, #15
 8005ff4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	019b      	lsls	r3, r3, #6
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	085b      	lsrs	r3, r3, #1
 8006008:	3b01      	subs	r3, #1
 800600a:	041b      	lsls	r3, r3, #16
 800600c:	431a      	orrs	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	061b      	lsls	r3, r3, #24
 8006012:	4910      	ldr	r1, [pc, #64]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006014:	4313      	orrs	r3, r2
 8006016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800601a:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800601c:	2201      	movs	r2, #1
 800601e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006020:	f7fc ffd4 	bl	8002fcc <HAL_GetTick>
 8006024:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006026:	e008      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006028:	f7fc ffd0 	bl	8002fcc <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e007      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800603a:	4b06      	ldr	r3, [pc, #24]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006046:	d1ef      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3730      	adds	r7, #48	; 0x30
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40023800 	.word	0x40023800
 8006058:	42470070 	.word	0x42470070

0800605c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800605c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006060:	b088      	sub	sp, #32
 8006062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006078:	4bce      	ldr	r3, [pc, #824]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 030c 	and.w	r3, r3, #12
 8006080:	2b0c      	cmp	r3, #12
 8006082:	f200 818d 	bhi.w	80063a0 <HAL_RCC_GetSysClockFreq+0x344>
 8006086:	a201      	add	r2, pc, #4	; (adr r2, 800608c <HAL_RCC_GetSysClockFreq+0x30>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080063a1 	.word	0x080063a1
 8006094:	080063a1 	.word	0x080063a1
 8006098:	080063a1 	.word	0x080063a1
 800609c:	080060c7 	.word	0x080060c7
 80060a0:	080063a1 	.word	0x080063a1
 80060a4:	080063a1 	.word	0x080063a1
 80060a8:	080063a1 	.word	0x080063a1
 80060ac:	080060cd 	.word	0x080060cd
 80060b0:	080063a1 	.word	0x080063a1
 80060b4:	080063a1 	.word	0x080063a1
 80060b8:	080063a1 	.word	0x080063a1
 80060bc:	08006241 	.word	0x08006241
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060c0:	4bbd      	ldr	r3, [pc, #756]	; (80063b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80060c2:	61bb      	str	r3, [r7, #24]
       break;
 80060c4:	e16f      	b.n	80063a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060c6:	4bbd      	ldr	r3, [pc, #756]	; (80063bc <HAL_RCC_GetSysClockFreq+0x360>)
 80060c8:	61bb      	str	r3, [r7, #24]
      break;
 80060ca:	e16c      	b.n	80063a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060cc:	4bb9      	ldr	r3, [pc, #740]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060d4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060d6:	4bb7      	ldr	r3, [pc, #732]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d053      	beq.n	800618a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060e2:	4bb4      	ldr	r3, [pc, #720]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	099b      	lsrs	r3, r3, #6
 80060e8:	461a      	mov	r2, r3
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060f2:	f04f 0100 	mov.w	r1, #0
 80060f6:	ea02 0400 	and.w	r4, r2, r0
 80060fa:	603c      	str	r4, [r7, #0]
 80060fc:	400b      	ands	r3, r1
 80060fe:	607b      	str	r3, [r7, #4]
 8006100:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006104:	4620      	mov	r0, r4
 8006106:	4629      	mov	r1, r5
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	f04f 0300 	mov.w	r3, #0
 8006110:	014b      	lsls	r3, r1, #5
 8006112:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006116:	0142      	lsls	r2, r0, #5
 8006118:	4610      	mov	r0, r2
 800611a:	4619      	mov	r1, r3
 800611c:	4623      	mov	r3, r4
 800611e:	1ac0      	subs	r0, r0, r3
 8006120:	462b      	mov	r3, r5
 8006122:	eb61 0103 	sbc.w	r1, r1, r3
 8006126:	f04f 0200 	mov.w	r2, #0
 800612a:	f04f 0300 	mov.w	r3, #0
 800612e:	018b      	lsls	r3, r1, #6
 8006130:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006134:	0182      	lsls	r2, r0, #6
 8006136:	1a12      	subs	r2, r2, r0
 8006138:	eb63 0301 	sbc.w	r3, r3, r1
 800613c:	f04f 0000 	mov.w	r0, #0
 8006140:	f04f 0100 	mov.w	r1, #0
 8006144:	00d9      	lsls	r1, r3, #3
 8006146:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800614a:	00d0      	lsls	r0, r2, #3
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4621      	mov	r1, r4
 8006152:	1852      	adds	r2, r2, r1
 8006154:	4629      	mov	r1, r5
 8006156:	eb43 0101 	adc.w	r1, r3, r1
 800615a:	460b      	mov	r3, r1
 800615c:	f04f 0000 	mov.w	r0, #0
 8006160:	f04f 0100 	mov.w	r1, #0
 8006164:	0259      	lsls	r1, r3, #9
 8006166:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800616a:	0250      	lsls	r0, r2, #9
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4610      	mov	r0, r2
 8006172:	4619      	mov	r1, r3
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	461a      	mov	r2, r3
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	f7fa f8a0 	bl	80002c0 <__aeabi_uldivmod>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	4613      	mov	r3, r2
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	e04c      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800618a:	4b8a      	ldr	r3, [pc, #552]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	099b      	lsrs	r3, r3, #6
 8006190:	461a      	mov	r2, r3
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	f240 10ff 	movw	r0, #511	; 0x1ff
 800619a:	f04f 0100 	mov.w	r1, #0
 800619e:	ea02 0a00 	and.w	sl, r2, r0
 80061a2:	ea03 0b01 	and.w	fp, r3, r1
 80061a6:	4650      	mov	r0, sl
 80061a8:	4659      	mov	r1, fp
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	014b      	lsls	r3, r1, #5
 80061b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061b8:	0142      	lsls	r2, r0, #5
 80061ba:	4610      	mov	r0, r2
 80061bc:	4619      	mov	r1, r3
 80061be:	ebb0 000a 	subs.w	r0, r0, sl
 80061c2:	eb61 010b 	sbc.w	r1, r1, fp
 80061c6:	f04f 0200 	mov.w	r2, #0
 80061ca:	f04f 0300 	mov.w	r3, #0
 80061ce:	018b      	lsls	r3, r1, #6
 80061d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061d4:	0182      	lsls	r2, r0, #6
 80061d6:	1a12      	subs	r2, r2, r0
 80061d8:	eb63 0301 	sbc.w	r3, r3, r1
 80061dc:	f04f 0000 	mov.w	r0, #0
 80061e0:	f04f 0100 	mov.w	r1, #0
 80061e4:	00d9      	lsls	r1, r3, #3
 80061e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061ea:	00d0      	lsls	r0, r2, #3
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	eb12 020a 	adds.w	r2, r2, sl
 80061f4:	eb43 030b 	adc.w	r3, r3, fp
 80061f8:	f04f 0000 	mov.w	r0, #0
 80061fc:	f04f 0100 	mov.w	r1, #0
 8006200:	0299      	lsls	r1, r3, #10
 8006202:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006206:	0290      	lsls	r0, r2, #10
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4610      	mov	r0, r2
 800620e:	4619      	mov	r1, r3
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	461a      	mov	r2, r3
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	f7fa f852 	bl	80002c0 <__aeabi_uldivmod>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4613      	mov	r3, r2
 8006222:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006224:	4b63      	ldr	r3, [pc, #396]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	0c1b      	lsrs	r3, r3, #16
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	3301      	adds	r3, #1
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	fbb2 f3f3 	udiv	r3, r2, r3
 800623c:	61bb      	str	r3, [r7, #24]
      break;
 800623e:	e0b2      	b.n	80063a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006240:	4b5c      	ldr	r3, [pc, #368]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006248:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800624a:	4b5a      	ldr	r3, [pc, #360]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d04d      	beq.n	80062f2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006256:	4b57      	ldr	r3, [pc, #348]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	099b      	lsrs	r3, r3, #6
 800625c:	461a      	mov	r2, r3
 800625e:	f04f 0300 	mov.w	r3, #0
 8006262:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006266:	f04f 0100 	mov.w	r1, #0
 800626a:	ea02 0800 	and.w	r8, r2, r0
 800626e:	ea03 0901 	and.w	r9, r3, r1
 8006272:	4640      	mov	r0, r8
 8006274:	4649      	mov	r1, r9
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	f04f 0300 	mov.w	r3, #0
 800627e:	014b      	lsls	r3, r1, #5
 8006280:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006284:	0142      	lsls	r2, r0, #5
 8006286:	4610      	mov	r0, r2
 8006288:	4619      	mov	r1, r3
 800628a:	ebb0 0008 	subs.w	r0, r0, r8
 800628e:	eb61 0109 	sbc.w	r1, r1, r9
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	018b      	lsls	r3, r1, #6
 800629c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80062a0:	0182      	lsls	r2, r0, #6
 80062a2:	1a12      	subs	r2, r2, r0
 80062a4:	eb63 0301 	sbc.w	r3, r3, r1
 80062a8:	f04f 0000 	mov.w	r0, #0
 80062ac:	f04f 0100 	mov.w	r1, #0
 80062b0:	00d9      	lsls	r1, r3, #3
 80062b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062b6:	00d0      	lsls	r0, r2, #3
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	eb12 0208 	adds.w	r2, r2, r8
 80062c0:	eb43 0309 	adc.w	r3, r3, r9
 80062c4:	f04f 0000 	mov.w	r0, #0
 80062c8:	f04f 0100 	mov.w	r1, #0
 80062cc:	0259      	lsls	r1, r3, #9
 80062ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80062d2:	0250      	lsls	r0, r2, #9
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4610      	mov	r0, r2
 80062da:	4619      	mov	r1, r3
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	461a      	mov	r2, r3
 80062e0:	f04f 0300 	mov.w	r3, #0
 80062e4:	f7f9 ffec 	bl	80002c0 <__aeabi_uldivmod>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4613      	mov	r3, r2
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	e04a      	b.n	8006388 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062f2:	4b30      	ldr	r3, [pc, #192]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	099b      	lsrs	r3, r3, #6
 80062f8:	461a      	mov	r2, r3
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006302:	f04f 0100 	mov.w	r1, #0
 8006306:	ea02 0400 	and.w	r4, r2, r0
 800630a:	ea03 0501 	and.w	r5, r3, r1
 800630e:	4620      	mov	r0, r4
 8006310:	4629      	mov	r1, r5
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	014b      	lsls	r3, r1, #5
 800631c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006320:	0142      	lsls	r2, r0, #5
 8006322:	4610      	mov	r0, r2
 8006324:	4619      	mov	r1, r3
 8006326:	1b00      	subs	r0, r0, r4
 8006328:	eb61 0105 	sbc.w	r1, r1, r5
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	018b      	lsls	r3, r1, #6
 8006336:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800633a:	0182      	lsls	r2, r0, #6
 800633c:	1a12      	subs	r2, r2, r0
 800633e:	eb63 0301 	sbc.w	r3, r3, r1
 8006342:	f04f 0000 	mov.w	r0, #0
 8006346:	f04f 0100 	mov.w	r1, #0
 800634a:	00d9      	lsls	r1, r3, #3
 800634c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006350:	00d0      	lsls	r0, r2, #3
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	1912      	adds	r2, r2, r4
 8006358:	eb45 0303 	adc.w	r3, r5, r3
 800635c:	f04f 0000 	mov.w	r0, #0
 8006360:	f04f 0100 	mov.w	r1, #0
 8006364:	0299      	lsls	r1, r3, #10
 8006366:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800636a:	0290      	lsls	r0, r2, #10
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4610      	mov	r0, r2
 8006372:	4619      	mov	r1, r3
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	461a      	mov	r2, r3
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	f7f9 ffa0 	bl	80002c0 <__aeabi_uldivmod>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4613      	mov	r3, r2
 8006386:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006388:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	0f1b      	lsrs	r3, r3, #28
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	61bb      	str	r3, [r7, #24]
      break;
 800639e:	e002      	b.n	80063a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80063a2:	61bb      	str	r3, [r7, #24]
      break;
 80063a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063a6:	69bb      	ldr	r3, [r7, #24]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3720      	adds	r7, #32
 80063ac:	46bd      	mov	sp, r7
 80063ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b2:	bf00      	nop
 80063b4:	40023800 	.word	0x40023800
 80063b8:	00f42400 	.word	0x00f42400
 80063bc:	007a1200 	.word	0x007a1200

080063c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e28d      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 8083 	beq.w	80064e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80063e0:	4b94      	ldr	r3, [pc, #592]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 030c 	and.w	r3, r3, #12
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d019      	beq.n	8006420 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063ec:	4b91      	ldr	r3, [pc, #580]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d106      	bne.n	8006406 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063f8:	4b8e      	ldr	r3, [pc, #568]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006404:	d00c      	beq.n	8006420 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006406:	4b8b      	ldr	r3, [pc, #556]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800640e:	2b0c      	cmp	r3, #12
 8006410:	d112      	bne.n	8006438 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006412:	4b88      	ldr	r3, [pc, #544]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800641a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800641e:	d10b      	bne.n	8006438 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006420:	4b84      	ldr	r3, [pc, #528]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d05b      	beq.n	80064e4 <HAL_RCC_OscConfig+0x124>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d157      	bne.n	80064e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e25a      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006440:	d106      	bne.n	8006450 <HAL_RCC_OscConfig+0x90>
 8006442:	4b7c      	ldr	r3, [pc, #496]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a7b      	ldr	r2, [pc, #492]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e01d      	b.n	800648c <HAL_RCC_OscConfig+0xcc>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006458:	d10c      	bne.n	8006474 <HAL_RCC_OscConfig+0xb4>
 800645a:	4b76      	ldr	r3, [pc, #472]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a75      	ldr	r2, [pc, #468]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	4b73      	ldr	r3, [pc, #460]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a72      	ldr	r2, [pc, #456]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e00b      	b.n	800648c <HAL_RCC_OscConfig+0xcc>
 8006474:	4b6f      	ldr	r3, [pc, #444]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a6e      	ldr	r2, [pc, #440]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 800647a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	4b6c      	ldr	r3, [pc, #432]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a6b      	ldr	r2, [pc, #428]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800648a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d013      	beq.n	80064bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006494:	f7fc fd9a 	bl	8002fcc <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800649c:	f7fc fd96 	bl	8002fcc <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b64      	cmp	r3, #100	; 0x64
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e21f      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ae:	4b61      	ldr	r3, [pc, #388]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f0      	beq.n	800649c <HAL_RCC_OscConfig+0xdc>
 80064ba:	e014      	b.n	80064e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064bc:	f7fc fd86 	bl	8002fcc <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064c4:	f7fc fd82 	bl	8002fcc <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b64      	cmp	r3, #100	; 0x64
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e20b      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d6:	4b57      	ldr	r3, [pc, #348]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0x104>
 80064e2:	e000      	b.n	80064e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d06f      	beq.n	80065d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80064f2:	4b50      	ldr	r3, [pc, #320]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d017      	beq.n	800652e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064fe:	4b4d      	ldr	r3, [pc, #308]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006506:	2b08      	cmp	r3, #8
 8006508:	d105      	bne.n	8006516 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800650a:	4b4a      	ldr	r3, [pc, #296]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00b      	beq.n	800652e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006516:	4b47      	ldr	r3, [pc, #284]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800651e:	2b0c      	cmp	r3, #12
 8006520:	d11c      	bne.n	800655c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006522:	4b44      	ldr	r3, [pc, #272]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d116      	bne.n	800655c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800652e:	4b41      	ldr	r3, [pc, #260]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <HAL_RCC_OscConfig+0x186>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d001      	beq.n	8006546 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e1d3      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006546:	4b3b      	ldr	r3, [pc, #236]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	4937      	ldr	r1, [pc, #220]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006556:	4313      	orrs	r3, r2
 8006558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800655a:	e03a      	b.n	80065d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d020      	beq.n	80065a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006564:	4b34      	ldr	r3, [pc, #208]	; (8006638 <HAL_RCC_OscConfig+0x278>)
 8006566:	2201      	movs	r2, #1
 8006568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656a:	f7fc fd2f 	bl	8002fcc <HAL_GetTick>
 800656e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006570:	e008      	b.n	8006584 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006572:	f7fc fd2b 	bl	8002fcc <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e1b4      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006584:	4b2b      	ldr	r3, [pc, #172]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0f0      	beq.n	8006572 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006590:	4b28      	ldr	r3, [pc, #160]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	00db      	lsls	r3, r3, #3
 800659e:	4925      	ldr	r1, [pc, #148]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	600b      	str	r3, [r1, #0]
 80065a4:	e015      	b.n	80065d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065a6:	4b24      	ldr	r3, [pc, #144]	; (8006638 <HAL_RCC_OscConfig+0x278>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ac:	f7fc fd0e 	bl	8002fcc <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065b4:	f7fc fd0a 	bl	8002fcc <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e193      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065c6:	4b1b      	ldr	r3, [pc, #108]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f0      	bne.n	80065b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d036      	beq.n	800664c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d016      	beq.n	8006614 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065e6:	4b15      	ldr	r3, [pc, #84]	; (800663c <HAL_RCC_OscConfig+0x27c>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ec:	f7fc fcee 	bl	8002fcc <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065f4:	f7fc fcea 	bl	8002fcc <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e173      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006606:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 8006608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0f0      	beq.n	80065f4 <HAL_RCC_OscConfig+0x234>
 8006612:	e01b      	b.n	800664c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006614:	4b09      	ldr	r3, [pc, #36]	; (800663c <HAL_RCC_OscConfig+0x27c>)
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800661a:	f7fc fcd7 	bl	8002fcc <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006620:	e00e      	b.n	8006640 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006622:	f7fc fcd3 	bl	8002fcc <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d907      	bls.n	8006640 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e15c      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
 8006634:	40023800 	.word	0x40023800
 8006638:	42470000 	.word	0x42470000
 800663c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006640:	4b8a      	ldr	r3, [pc, #552]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 8006642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1ea      	bne.n	8006622 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 8097 	beq.w	8006788 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800665a:	2300      	movs	r3, #0
 800665c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800665e:	4b83      	ldr	r3, [pc, #524]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10f      	bne.n	800668a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800666a:	2300      	movs	r3, #0
 800666c:	60bb      	str	r3, [r7, #8]
 800666e:	4b7f      	ldr	r3, [pc, #508]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	4a7e      	ldr	r2, [pc, #504]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 8006674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006678:	6413      	str	r3, [r2, #64]	; 0x40
 800667a:	4b7c      	ldr	r3, [pc, #496]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800668a:	4b79      	ldr	r3, [pc, #484]	; (8006870 <HAL_RCC_OscConfig+0x4b0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006692:	2b00      	cmp	r3, #0
 8006694:	d118      	bne.n	80066c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006696:	4b76      	ldr	r3, [pc, #472]	; (8006870 <HAL_RCC_OscConfig+0x4b0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a75      	ldr	r2, [pc, #468]	; (8006870 <HAL_RCC_OscConfig+0x4b0>)
 800669c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066a2:	f7fc fc93 	bl	8002fcc <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a8:	e008      	b.n	80066bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066aa:	f7fc fc8f 	bl	8002fcc <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e118      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066bc:	4b6c      	ldr	r3, [pc, #432]	; (8006870 <HAL_RCC_OscConfig+0x4b0>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0f0      	beq.n	80066aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d106      	bne.n	80066de <HAL_RCC_OscConfig+0x31e>
 80066d0:	4b66      	ldr	r3, [pc, #408]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	4a65      	ldr	r2, [pc, #404]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 80066d6:	f043 0301 	orr.w	r3, r3, #1
 80066da:	6713      	str	r3, [r2, #112]	; 0x70
 80066dc:	e01c      	b.n	8006718 <HAL_RCC_OscConfig+0x358>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b05      	cmp	r3, #5
 80066e4:	d10c      	bne.n	8006700 <HAL_RCC_OscConfig+0x340>
 80066e6:	4b61      	ldr	r3, [pc, #388]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	4a60      	ldr	r2, [pc, #384]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 80066ec:	f043 0304 	orr.w	r3, r3, #4
 80066f0:	6713      	str	r3, [r2, #112]	; 0x70
 80066f2:	4b5e      	ldr	r3, [pc, #376]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 80066f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f6:	4a5d      	ldr	r2, [pc, #372]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 80066f8:	f043 0301 	orr.w	r3, r3, #1
 80066fc:	6713      	str	r3, [r2, #112]	; 0x70
 80066fe:	e00b      	b.n	8006718 <HAL_RCC_OscConfig+0x358>
 8006700:	4b5a      	ldr	r3, [pc, #360]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 8006702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006704:	4a59      	ldr	r2, [pc, #356]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 8006706:	f023 0301 	bic.w	r3, r3, #1
 800670a:	6713      	str	r3, [r2, #112]	; 0x70
 800670c:	4b57      	ldr	r3, [pc, #348]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 800670e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006710:	4a56      	ldr	r2, [pc, #344]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 8006712:	f023 0304 	bic.w	r3, r3, #4
 8006716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d015      	beq.n	800674c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006720:	f7fc fc54 	bl	8002fcc <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006726:	e00a      	b.n	800673e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006728:	f7fc fc50 	bl	8002fcc <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	f241 3288 	movw	r2, #5000	; 0x1388
 8006736:	4293      	cmp	r3, r2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e0d7      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800673e:	4b4b      	ldr	r3, [pc, #300]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 8006740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0ee      	beq.n	8006728 <HAL_RCC_OscConfig+0x368>
 800674a:	e014      	b.n	8006776 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800674c:	f7fc fc3e 	bl	8002fcc <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006752:	e00a      	b.n	800676a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006754:	f7fc fc3a 	bl	8002fcc <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006762:	4293      	cmp	r3, r2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e0c1      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800676a:	4b40      	ldr	r3, [pc, #256]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 800676c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1ee      	bne.n	8006754 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d105      	bne.n	8006788 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800677c:	4b3b      	ldr	r3, [pc, #236]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	4a3a      	ldr	r2, [pc, #232]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 8006782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80ad 	beq.w	80068ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006792:	4b36      	ldr	r3, [pc, #216]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 030c 	and.w	r3, r3, #12
 800679a:	2b08      	cmp	r3, #8
 800679c:	d060      	beq.n	8006860 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d145      	bne.n	8006832 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a6:	4b33      	ldr	r3, [pc, #204]	; (8006874 <HAL_RCC_OscConfig+0x4b4>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7fc fc0e 	bl	8002fcc <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b4:	f7fc fc0a 	bl	8002fcc <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e093      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c6:	4b29      	ldr	r3, [pc, #164]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f0      	bne.n	80067b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69da      	ldr	r2, [r3, #28]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	019b      	lsls	r3, r3, #6
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e8:	085b      	lsrs	r3, r3, #1
 80067ea:	3b01      	subs	r3, #1
 80067ec:	041b      	lsls	r3, r3, #16
 80067ee:	431a      	orrs	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	061b      	lsls	r3, r3, #24
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fc:	071b      	lsls	r3, r3, #28
 80067fe:	491b      	ldr	r1, [pc, #108]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 8006800:	4313      	orrs	r3, r2
 8006802:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006804:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <HAL_RCC_OscConfig+0x4b4>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680a:	f7fc fbdf 	bl	8002fcc <HAL_GetTick>
 800680e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006810:	e008      	b.n	8006824 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006812:	f7fc fbdb 	bl	8002fcc <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e064      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006824:	4b11      	ldr	r3, [pc, #68]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f0      	beq.n	8006812 <HAL_RCC_OscConfig+0x452>
 8006830:	e05c      	b.n	80068ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006832:	4b10      	ldr	r3, [pc, #64]	; (8006874 <HAL_RCC_OscConfig+0x4b4>)
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006838:	f7fc fbc8 	bl	8002fcc <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006840:	f7fc fbc4 	bl	8002fcc <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e04d      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006852:	4b06      	ldr	r3, [pc, #24]	; (800686c <HAL_RCC_OscConfig+0x4ac>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <HAL_RCC_OscConfig+0x480>
 800685e:	e045      	b.n	80068ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d107      	bne.n	8006878 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e040      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
 800686c:	40023800 	.word	0x40023800
 8006870:	40007000 	.word	0x40007000
 8006874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006878:	4b1f      	ldr	r3, [pc, #124]	; (80068f8 <HAL_RCC_OscConfig+0x538>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d030      	beq.n	80068e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006890:	429a      	cmp	r2, r3
 8006892:	d129      	bne.n	80068e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800689e:	429a      	cmp	r2, r3
 80068a0:	d122      	bne.n	80068e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068a8:	4013      	ands	r3, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d119      	bne.n	80068e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	3b01      	subs	r3, #1
 80068c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d10f      	bne.n	80068e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d107      	bne.n	80068e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d001      	beq.n	80068ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e000      	b.n	80068ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	40023800 	.word	0x40023800

080068fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e07b      	b.n	8006a06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	2b00      	cmp	r3, #0
 8006914:	d108      	bne.n	8006928 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800691e:	d009      	beq.n	8006934 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	61da      	str	r2, [r3, #28]
 8006926:	e005      	b.n	8006934 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fc f928 	bl	8002ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800696a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b8:	ea42 0103 	orr.w	r1, r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	0c1b      	lsrs	r3, r3, #16
 80069d2:	f003 0104 	and.w	r1, r3, #4
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	f003 0210 	and.w	r2, r3, #16
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b088      	sub	sp, #32
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_SPI_Transmit+0x22>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e126      	b.n	8006c7e <HAL_SPI_Transmit+0x270>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a38:	f7fc fac8 	bl	8002fcc <HAL_GetTick>
 8006a3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d002      	beq.n	8006a54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a52:	e10b      	b.n	8006c6c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <HAL_SPI_Transmit+0x52>
 8006a5a:	88fb      	ldrh	r3, [r7, #6]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a64:	e102      	b.n	8006c6c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2203      	movs	r2, #3
 8006a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	88fa      	ldrh	r2, [r7, #6]
 8006a7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	88fa      	ldrh	r2, [r7, #6]
 8006a84:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aac:	d10f      	bne.n	8006ace <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006abc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006acc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad8:	2b40      	cmp	r3, #64	; 0x40
 8006ada:	d007      	beq.n	8006aec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af4:	d14b      	bne.n	8006b8e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_SPI_Transmit+0xf6>
 8006afe:	8afb      	ldrh	r3, [r7, #22]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d13e      	bne.n	8006b82 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	881a      	ldrh	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	1c9a      	adds	r2, r3, #2
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b28:	e02b      	b.n	8006b82 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d112      	bne.n	8006b5e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3c:	881a      	ldrh	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b48:	1c9a      	adds	r2, r3, #2
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b5c:	e011      	b.n	8006b82 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b5e:	f7fc fa35 	bl	8002fcc <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d803      	bhi.n	8006b76 <HAL_SPI_Transmit+0x168>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b74:	d102      	bne.n	8006b7c <HAL_SPI_Transmit+0x16e>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d102      	bne.n	8006b82 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b80:	e074      	b.n	8006c6c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1ce      	bne.n	8006b2a <HAL_SPI_Transmit+0x11c>
 8006b8c:	e04c      	b.n	8006c28 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <HAL_SPI_Transmit+0x18e>
 8006b96:	8afb      	ldrh	r3, [r7, #22]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d140      	bne.n	8006c1e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	330c      	adds	r3, #12
 8006ba6:	7812      	ldrb	r2, [r2, #0]
 8006ba8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006bc2:	e02c      	b.n	8006c1e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d113      	bne.n	8006bfa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	7812      	ldrb	r2, [r2, #0]
 8006bde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006bf8:	e011      	b.n	8006c1e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bfa:	f7fc f9e7 	bl	8002fcc <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d803      	bhi.n	8006c12 <HAL_SPI_Transmit+0x204>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c10:	d102      	bne.n	8006c18 <HAL_SPI_Transmit+0x20a>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c1c:	e026      	b.n	8006c6c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1cd      	bne.n	8006bc4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 fbcb 	bl	80073c8 <SPI_EndRxTxTransaction>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10a      	bne.n	8006c5c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c46:	2300      	movs	r3, #0
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	613b      	str	r3, [r7, #16]
 8006c5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	77fb      	strb	r3, [r7, #31]
 8006c68:	e000      	b.n	8006c6c <HAL_SPI_Transmit+0x25e>
  }

error:
 8006c6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3720      	adds	r7, #32
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b088      	sub	sp, #32
 8006c8a:	af02      	add	r7, sp, #8
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	603b      	str	r3, [r7, #0]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ca2:	d112      	bne.n	8006cca <HAL_SPI_Receive+0x44>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10e      	bne.n	8006cca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2204      	movs	r2, #4
 8006cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006cb4:	88fa      	ldrh	r2, [r7, #6]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f8f1 	bl	8006ea8 <HAL_SPI_TransmitReceive>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	e0ea      	b.n	8006ea0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_SPI_Receive+0x52>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e0e3      	b.n	8006ea0 <HAL_SPI_Receive+0x21a>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ce0:	f7fc f974 	bl	8002fcc <HAL_GetTick>
 8006ce4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d002      	beq.n	8006cf8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cf6:	e0ca      	b.n	8006e8e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <HAL_SPI_Receive+0x7e>
 8006cfe:	88fb      	ldrh	r3, [r7, #6]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d102      	bne.n	8006d0a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d08:	e0c1      	b.n	8006e8e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2204      	movs	r2, #4
 8006d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	88fa      	ldrh	r2, [r7, #6]
 8006d22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d50:	d10f      	bne.n	8006d72 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7c:	2b40      	cmp	r3, #64	; 0x40
 8006d7e:	d007      	beq.n	8006d90 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d162      	bne.n	8006e5e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d98:	e02e      	b.n	8006df8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d115      	bne.n	8006dd4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f103 020c 	add.w	r2, r3, #12
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db4:	7812      	ldrb	r2, [r2, #0]
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dd2:	e011      	b.n	8006df8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dd4:	f7fc f8fa 	bl	8002fcc <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d803      	bhi.n	8006dec <HAL_SPI_Receive+0x166>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dea:	d102      	bne.n	8006df2 <HAL_SPI_Receive+0x16c>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d102      	bne.n	8006df8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006df6:	e04a      	b.n	8006e8e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1cb      	bne.n	8006d9a <HAL_SPI_Receive+0x114>
 8006e02:	e031      	b.n	8006e68 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d113      	bne.n	8006e3a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1c:	b292      	uxth	r2, r2
 8006e1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	1c9a      	adds	r2, r3, #2
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	3b01      	subs	r3, #1
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e38:	e011      	b.n	8006e5e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e3a:	f7fc f8c7 	bl	8002fcc <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d803      	bhi.n	8006e52 <HAL_SPI_Receive+0x1cc>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d102      	bne.n	8006e58 <HAL_SPI_Receive+0x1d2>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d102      	bne.n	8006e5e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e5c:	e017      	b.n	8006e8e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1cd      	bne.n	8006e04 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fa45 	bl	80072fc <SPI_EndRxTransaction>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	75fb      	strb	r3, [r7, #23]
 8006e8a:	e000      	b.n	8006e8e <HAL_SPI_Receive+0x208>
  }

error :
 8006e8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08c      	sub	sp, #48	; 0x30
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d101      	bne.n	8006ece <HAL_SPI_TransmitReceive+0x26>
 8006eca:	2302      	movs	r3, #2
 8006ecc:	e18a      	b.n	80071e4 <HAL_SPI_TransmitReceive+0x33c>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ed6:	f7fc f879 	bl	8002fcc <HAL_GetTick>
 8006eda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006eec:	887b      	ldrh	r3, [r7, #2]
 8006eee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d00f      	beq.n	8006f18 <HAL_SPI_TransmitReceive+0x70>
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006efe:	d107      	bne.n	8006f10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d103      	bne.n	8006f10 <HAL_SPI_TransmitReceive+0x68>
 8006f08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d003      	beq.n	8006f18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006f10:	2302      	movs	r3, #2
 8006f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f16:	e15b      	b.n	80071d0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <HAL_SPI_TransmitReceive+0x82>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <HAL_SPI_TransmitReceive+0x82>
 8006f24:	887b      	ldrh	r3, [r7, #2]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d103      	bne.n	8006f32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f30:	e14e      	b.n	80071d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d003      	beq.n	8006f46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2205      	movs	r2, #5
 8006f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	887a      	ldrh	r2, [r7, #2]
 8006f56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	887a      	ldrh	r2, [r7, #2]
 8006f5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	887a      	ldrh	r2, [r7, #2]
 8006f68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	887a      	ldrh	r2, [r7, #2]
 8006f6e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f86:	2b40      	cmp	r3, #64	; 0x40
 8006f88:	d007      	beq.n	8006f9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fa2:	d178      	bne.n	8007096 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <HAL_SPI_TransmitReceive+0x10a>
 8006fac:	8b7b      	ldrh	r3, [r7, #26]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d166      	bne.n	8007080 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb6:	881a      	ldrh	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc2:	1c9a      	adds	r2, r3, #2
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fd6:	e053      	b.n	8007080 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d11b      	bne.n	800701e <HAL_SPI_TransmitReceive+0x176>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d016      	beq.n	800701e <HAL_SPI_TransmitReceive+0x176>
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d113      	bne.n	800701e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffa:	881a      	ldrh	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	1c9a      	adds	r2, r3, #2
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007010:	b29b      	uxth	r3, r3
 8007012:	3b01      	subs	r3, #1
 8007014:	b29a      	uxth	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b01      	cmp	r3, #1
 800702a:	d119      	bne.n	8007060 <HAL_SPI_TransmitReceive+0x1b8>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d014      	beq.n	8007060 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68da      	ldr	r2, [r3, #12]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	b292      	uxth	r2, r2
 8007042:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007048:	1c9a      	adds	r2, r3, #2
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800705c:	2301      	movs	r3, #1
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007060:	f7fb ffb4 	bl	8002fcc <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800706c:	429a      	cmp	r2, r3
 800706e:	d807      	bhi.n	8007080 <HAL_SPI_TransmitReceive+0x1d8>
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	d003      	beq.n	8007080 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800707e:	e0a7      	b.n	80071d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1a6      	bne.n	8006fd8 <HAL_SPI_TransmitReceive+0x130>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1a1      	bne.n	8006fd8 <HAL_SPI_TransmitReceive+0x130>
 8007094:	e07c      	b.n	8007190 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <HAL_SPI_TransmitReceive+0x1fc>
 800709e:	8b7b      	ldrh	r3, [r7, #26]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d16b      	bne.n	800717c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	330c      	adds	r3, #12
 80070ae:	7812      	ldrb	r2, [r2, #0]
 80070b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ca:	e057      	b.n	800717c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d11c      	bne.n	8007114 <HAL_SPI_TransmitReceive+0x26c>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070de:	b29b      	uxth	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d017      	beq.n	8007114 <HAL_SPI_TransmitReceive+0x26c>
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d114      	bne.n	8007114 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	330c      	adds	r3, #12
 80070f4:	7812      	ldrb	r2, [r2, #0]
 80070f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b01      	cmp	r3, #1
 8007120:	d119      	bne.n	8007156 <HAL_SPI_TransmitReceive+0x2ae>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	d014      	beq.n	8007156 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007148:	b29b      	uxth	r3, r3
 800714a:	3b01      	subs	r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007152:	2301      	movs	r3, #1
 8007154:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007156:	f7fb ff39 	bl	8002fcc <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007162:	429a      	cmp	r2, r3
 8007164:	d803      	bhi.n	800716e <HAL_SPI_TransmitReceive+0x2c6>
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716c:	d102      	bne.n	8007174 <HAL_SPI_TransmitReceive+0x2cc>
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800717a:	e029      	b.n	80071d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1a2      	bne.n	80070cc <HAL_SPI_TransmitReceive+0x224>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d19d      	bne.n	80070cc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007192:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f917 	bl	80073c8 <SPI_EndRxTxTransaction>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d006      	beq.n	80071ae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2220      	movs	r2, #32
 80071aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80071ac:	e010      	b.n	80071d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10b      	bne.n	80071ce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	617b      	str	r3, [r7, #20]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	e000      	b.n	80071d0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80071ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3730      	adds	r7, #48	; 0x30
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	4613      	mov	r3, r2
 80071fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071fc:	f7fb fee6 	bl	8002fcc <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	4413      	add	r3, r2
 800720a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800720c:	f7fb fede 	bl	8002fcc <HAL_GetTick>
 8007210:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007212:	4b39      	ldr	r3, [pc, #228]	; (80072f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	015b      	lsls	r3, r3, #5
 8007218:	0d1b      	lsrs	r3, r3, #20
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	fb02 f303 	mul.w	r3, r2, r3
 8007220:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007222:	e054      	b.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722a:	d050      	beq.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800722c:	f7fb fece 	bl	8002fcc <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	429a      	cmp	r2, r3
 800723a:	d902      	bls.n	8007242 <SPI_WaitFlagStateUntilTimeout+0x56>
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d13d      	bne.n	80072be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007250:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800725a:	d111      	bne.n	8007280 <SPI_WaitFlagStateUntilTimeout+0x94>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007264:	d004      	beq.n	8007270 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800726e:	d107      	bne.n	8007280 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800727e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007288:	d10f      	bne.n	80072aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e017      	b.n	80072ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4013      	ands	r3, r2
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	429a      	cmp	r2, r3
 80072dc:	bf0c      	ite	eq
 80072de:	2301      	moveq	r3, #1
 80072e0:	2300      	movne	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d19b      	bne.n	8007224 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3720      	adds	r7, #32
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000004 	.word	0x20000004

080072fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af02      	add	r7, sp, #8
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007310:	d111      	bne.n	8007336 <SPI_EndRxTransaction+0x3a>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800731a:	d004      	beq.n	8007326 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007324:	d107      	bne.n	8007336 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007334:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800733e:	d12a      	bne.n	8007396 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007348:	d012      	beq.n	8007370 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2200      	movs	r2, #0
 8007352:	2180      	movs	r1, #128	; 0x80
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff ff49 	bl	80071ec <SPI_WaitFlagStateUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d02d      	beq.n	80073bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007364:	f043 0220 	orr.w	r2, r3, #32
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e026      	b.n	80073be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2200      	movs	r2, #0
 8007378:	2101      	movs	r1, #1
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f7ff ff36 	bl	80071ec <SPI_WaitFlagStateUntilTimeout>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d01a      	beq.n	80073bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738a:	f043 0220 	orr.w	r2, r3, #32
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e013      	b.n	80073be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2200      	movs	r2, #0
 800739e:	2101      	movs	r1, #1
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f7ff ff23 	bl	80071ec <SPI_WaitFlagStateUntilTimeout>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d007      	beq.n	80073bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b0:	f043 0220 	orr.w	r2, r3, #32
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e000      	b.n	80073be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80073d4:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <SPI_EndRxTxTransaction+0x7c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a1b      	ldr	r2, [pc, #108]	; (8007448 <SPI_EndRxTxTransaction+0x80>)
 80073da:	fba2 2303 	umull	r2, r3, r2, r3
 80073de:	0d5b      	lsrs	r3, r3, #21
 80073e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073e4:	fb02 f303 	mul.w	r3, r2, r3
 80073e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f2:	d112      	bne.n	800741a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2200      	movs	r2, #0
 80073fc:	2180      	movs	r1, #128	; 0x80
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f7ff fef4 	bl	80071ec <SPI_WaitFlagStateUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d016      	beq.n	8007438 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740e:	f043 0220 	orr.w	r2, r3, #32
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e00f      	b.n	800743a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	3b01      	subs	r3, #1
 8007424:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007430:	2b80      	cmp	r3, #128	; 0x80
 8007432:	d0f2      	beq.n	800741a <SPI_EndRxTxTransaction+0x52>
 8007434:	e000      	b.n	8007438 <SPI_EndRxTxTransaction+0x70>
        break;
 8007436:	bf00      	nop
  }

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	20000004 	.word	0x20000004
 8007448:	165e9f81 	.word	0x165e9f81

0800744c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e041      	b.n	80074e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d106      	bne.n	8007478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fb fbde 	bl	8002c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3304      	adds	r3, #4
 8007488:	4619      	mov	r1, r3
 800748a:	4610      	mov	r0, r2
 800748c:	f000 f9ce 	bl	800782c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
	...

080074ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d001      	beq.n	8007504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e04e      	b.n	80075a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a23      	ldr	r2, [pc, #140]	; (80075b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d022      	beq.n	800756c <HAL_TIM_Base_Start_IT+0x80>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800752e:	d01d      	beq.n	800756c <HAL_TIM_Base_Start_IT+0x80>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a1f      	ldr	r2, [pc, #124]	; (80075b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d018      	beq.n	800756c <HAL_TIM_Base_Start_IT+0x80>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1e      	ldr	r2, [pc, #120]	; (80075b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d013      	beq.n	800756c <HAL_TIM_Base_Start_IT+0x80>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a1c      	ldr	r2, [pc, #112]	; (80075bc <HAL_TIM_Base_Start_IT+0xd0>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d00e      	beq.n	800756c <HAL_TIM_Base_Start_IT+0x80>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a1b      	ldr	r2, [pc, #108]	; (80075c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d009      	beq.n	800756c <HAL_TIM_Base_Start_IT+0x80>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a19      	ldr	r2, [pc, #100]	; (80075c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d004      	beq.n	800756c <HAL_TIM_Base_Start_IT+0x80>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a18      	ldr	r2, [pc, #96]	; (80075c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d111      	bne.n	8007590 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 0307 	and.w	r3, r3, #7
 8007576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b06      	cmp	r3, #6
 800757c:	d010      	beq.n	80075a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f042 0201 	orr.w	r2, r2, #1
 800758c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758e:	e007      	b.n	80075a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f042 0201 	orr.w	r2, r2, #1
 800759e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40010000 	.word	0x40010000
 80075b4:	40000400 	.word	0x40000400
 80075b8:	40000800 	.word	0x40000800
 80075bc:	40000c00 	.word	0x40000c00
 80075c0:	40010400 	.word	0x40010400
 80075c4:	40014000 	.word	0x40014000
 80075c8:	40001800 	.word	0x40001800

080075cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d122      	bne.n	8007628 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d11b      	bne.n	8007628 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0202 	mvn.w	r2, #2
 80075f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	f003 0303 	and.w	r3, r3, #3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f8ee 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 8007614:	e005      	b.n	8007622 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f8e0 	bl	80077dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f8f1 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	2b04      	cmp	r3, #4
 8007634:	d122      	bne.n	800767c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b04      	cmp	r3, #4
 8007642:	d11b      	bne.n	800767c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f06f 0204 	mvn.w	r2, #4
 800764c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2202      	movs	r2, #2
 8007652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8c4 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 8007668:	e005      	b.n	8007676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f8b6 	bl	80077dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f8c7 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f003 0308 	and.w	r3, r3, #8
 8007686:	2b08      	cmp	r3, #8
 8007688:	d122      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f003 0308 	and.w	r3, r3, #8
 8007694:	2b08      	cmp	r3, #8
 8007696:	d11b      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f06f 0208 	mvn.w	r2, #8
 80076a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2204      	movs	r2, #4
 80076a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f89a 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 80076bc:	e005      	b.n	80076ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f88c 	bl	80077dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f89d 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0310 	and.w	r3, r3, #16
 80076da:	2b10      	cmp	r3, #16
 80076dc:	d122      	bne.n	8007724 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	2b10      	cmp	r3, #16
 80076ea:	d11b      	bne.n	8007724 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f06f 0210 	mvn.w	r2, #16
 80076f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2208      	movs	r2, #8
 80076fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f870 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 8007710:	e005      	b.n	800771e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f862 	bl	80077dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f873 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b01      	cmp	r3, #1
 8007730:	d10e      	bne.n	8007750 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b01      	cmp	r3, #1
 800773e:	d107      	bne.n	8007750 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f06f 0201 	mvn.w	r2, #1
 8007748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fb f816 	bl	800277c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775a:	2b80      	cmp	r3, #128	; 0x80
 800775c:	d10e      	bne.n	800777c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007768:	2b80      	cmp	r3, #128	; 0x80
 800776a:	d107      	bne.n	800777c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f902 	bl	8007980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007786:	2b40      	cmp	r3, #64	; 0x40
 8007788:	d10e      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007794:	2b40      	cmp	r3, #64	; 0x40
 8007796:	d107      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f838 	bl	8007818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f003 0320 	and.w	r3, r3, #32
 80077b2:	2b20      	cmp	r3, #32
 80077b4:	d10e      	bne.n	80077d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f003 0320 	and.w	r3, r3, #32
 80077c0:	2b20      	cmp	r3, #32
 80077c2:	d107      	bne.n	80077d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0220 	mvn.w	r2, #32
 80077cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f8cc 	bl	800796c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077d4:	bf00      	nop
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a40      	ldr	r2, [pc, #256]	; (8007940 <TIM_Base_SetConfig+0x114>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d013      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800784a:	d00f      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a3d      	ldr	r2, [pc, #244]	; (8007944 <TIM_Base_SetConfig+0x118>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00b      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a3c      	ldr	r2, [pc, #240]	; (8007948 <TIM_Base_SetConfig+0x11c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d007      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a3b      	ldr	r2, [pc, #236]	; (800794c <TIM_Base_SetConfig+0x120>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d003      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a3a      	ldr	r2, [pc, #232]	; (8007950 <TIM_Base_SetConfig+0x124>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d108      	bne.n	800787e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a2f      	ldr	r2, [pc, #188]	; (8007940 <TIM_Base_SetConfig+0x114>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d02b      	beq.n	80078de <TIM_Base_SetConfig+0xb2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788c:	d027      	beq.n	80078de <TIM_Base_SetConfig+0xb2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a2c      	ldr	r2, [pc, #176]	; (8007944 <TIM_Base_SetConfig+0x118>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d023      	beq.n	80078de <TIM_Base_SetConfig+0xb2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a2b      	ldr	r2, [pc, #172]	; (8007948 <TIM_Base_SetConfig+0x11c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d01f      	beq.n	80078de <TIM_Base_SetConfig+0xb2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a2a      	ldr	r2, [pc, #168]	; (800794c <TIM_Base_SetConfig+0x120>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d01b      	beq.n	80078de <TIM_Base_SetConfig+0xb2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a29      	ldr	r2, [pc, #164]	; (8007950 <TIM_Base_SetConfig+0x124>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d017      	beq.n	80078de <TIM_Base_SetConfig+0xb2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a28      	ldr	r2, [pc, #160]	; (8007954 <TIM_Base_SetConfig+0x128>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d013      	beq.n	80078de <TIM_Base_SetConfig+0xb2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a27      	ldr	r2, [pc, #156]	; (8007958 <TIM_Base_SetConfig+0x12c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00f      	beq.n	80078de <TIM_Base_SetConfig+0xb2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a26      	ldr	r2, [pc, #152]	; (800795c <TIM_Base_SetConfig+0x130>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d00b      	beq.n	80078de <TIM_Base_SetConfig+0xb2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a25      	ldr	r2, [pc, #148]	; (8007960 <TIM_Base_SetConfig+0x134>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d007      	beq.n	80078de <TIM_Base_SetConfig+0xb2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a24      	ldr	r2, [pc, #144]	; (8007964 <TIM_Base_SetConfig+0x138>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d003      	beq.n	80078de <TIM_Base_SetConfig+0xb2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a23      	ldr	r2, [pc, #140]	; (8007968 <TIM_Base_SetConfig+0x13c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d108      	bne.n	80078f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a0a      	ldr	r2, [pc, #40]	; (8007940 <TIM_Base_SetConfig+0x114>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d003      	beq.n	8007924 <TIM_Base_SetConfig+0xf8>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a0c      	ldr	r2, [pc, #48]	; (8007950 <TIM_Base_SetConfig+0x124>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d103      	bne.n	800792c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	615a      	str	r2, [r3, #20]
}
 8007932:	bf00      	nop
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	40010000 	.word	0x40010000
 8007944:	40000400 	.word	0x40000400
 8007948:	40000800 	.word	0x40000800
 800794c:	40000c00 	.word	0x40000c00
 8007950:	40010400 	.word	0x40010400
 8007954:	40014000 	.word	0x40014000
 8007958:	40014400 	.word	0x40014400
 800795c:	40014800 	.word	0x40014800
 8007960:	40001800 	.word	0x40001800
 8007964:	40001c00 	.word	0x40001c00
 8007968:	40002000 	.word	0x40002000

0800796c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e03f      	b.n	8007a26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d106      	bne.n	80079c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fb f962 	bl	8002c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2224      	movs	r2, #36	; 0x24
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68da      	ldr	r2, [r3, #12]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f9a7 	bl	8007d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	691a      	ldr	r2, [r3, #16]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	695a      	ldr	r2, [r3, #20]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68da      	ldr	r2, [r3, #12]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b08a      	sub	sp, #40	; 0x28
 8007a32:	af02      	add	r7, sp, #8
 8007a34:	60f8      	str	r0, [r7, #12]
 8007a36:	60b9      	str	r1, [r7, #8]
 8007a38:	603b      	str	r3, [r7, #0]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d17c      	bne.n	8007b48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <HAL_UART_Transmit+0x2c>
 8007a54:	88fb      	ldrh	r3, [r7, #6]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e075      	b.n	8007b4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_UART_Transmit+0x3e>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e06e      	b.n	8007b4a <HAL_UART_Transmit+0x11c>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2221      	movs	r2, #33	; 0x21
 8007a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a82:	f7fb faa3 	bl	8002fcc <HAL_GetTick>
 8007a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	88fa      	ldrh	r2, [r7, #6]
 8007a8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	88fa      	ldrh	r2, [r7, #6]
 8007a92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a9c:	d108      	bne.n	8007ab0 <HAL_UART_Transmit+0x82>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d104      	bne.n	8007ab0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	e003      	b.n	8007ab8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ac0:	e02a      	b.n	8007b18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2180      	movs	r1, #128	; 0x80
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 f8e2 	bl	8007c96 <UART_WaitOnFlagUntilTimeout>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e036      	b.n	8007b4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10b      	bne.n	8007afa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007af0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	3302      	adds	r3, #2
 8007af6:	61bb      	str	r3, [r7, #24]
 8007af8:	e007      	b.n	8007b0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	781a      	ldrb	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	3301      	adds	r3, #1
 8007b08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1cf      	bne.n	8007ac2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	2140      	movs	r1, #64	; 0x40
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 f8b2 	bl	8007c96 <UART_WaitOnFlagUntilTimeout>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e006      	b.n	8007b4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	e000      	b.n	8007b4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b48:	2302      	movs	r3, #2
  }
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3720      	adds	r7, #32
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b08a      	sub	sp, #40	; 0x28
 8007b56:	af02      	add	r7, sp, #8
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	603b      	str	r3, [r7, #0]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	f040 808c 	bne.w	8007c8c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <HAL_UART_Receive+0x2e>
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e084      	b.n	8007c8e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d101      	bne.n	8007b92 <HAL_UART_Receive+0x40>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	e07d      	b.n	8007c8e <HAL_UART_Receive+0x13c>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2222      	movs	r2, #34	; 0x22
 8007ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bae:	f7fb fa0d 	bl	8002fcc <HAL_GetTick>
 8007bb2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	88fa      	ldrh	r2, [r7, #6]
 8007bb8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	88fa      	ldrh	r2, [r7, #6]
 8007bbe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bc8:	d108      	bne.n	8007bdc <HAL_UART_Receive+0x8a>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d104      	bne.n	8007bdc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	61bb      	str	r3, [r7, #24]
 8007bda:	e003      	b.n	8007be4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007be0:	2300      	movs	r3, #0
 8007be2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007bec:	e043      	b.n	8007c76 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2120      	movs	r1, #32
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 f84c 	bl	8007c96 <UART_WaitOnFlagUntilTimeout>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e042      	b.n	8007c8e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10c      	bne.n	8007c28 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	3302      	adds	r3, #2
 8007c24:	61bb      	str	r3, [r7, #24]
 8007c26:	e01f      	b.n	8007c68 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c30:	d007      	beq.n	8007c42 <HAL_UART_Receive+0xf0>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <HAL_UART_Receive+0xfe>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d106      	bne.n	8007c50 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	701a      	strb	r2, [r3, #0]
 8007c4e:	e008      	b.n	8007c62 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	3301      	adds	r3, #1
 8007c66:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1b6      	bne.n	8007bee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2220      	movs	r2, #32
 8007c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	e000      	b.n	8007c8e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007c8c:	2302      	movs	r3, #2
  }
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3720      	adds	r7, #32
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	603b      	str	r3, [r7, #0]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ca6:	e02c      	b.n	8007d02 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cae:	d028      	beq.n	8007d02 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d007      	beq.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cb6:	f7fb f989 	bl	8002fcc <HAL_GetTick>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d21d      	bcs.n	8007d02 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68da      	ldr	r2, [r3, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007cd4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	695a      	ldr	r2, [r3, #20]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 0201 	bic.w	r2, r2, #1
 8007ce4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e00f      	b.n	8007d22 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	bf0c      	ite	eq
 8007d12:	2301      	moveq	r3, #1
 8007d14:	2300      	movne	r3, #0
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	79fb      	ldrb	r3, [r7, #7]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d0c3      	beq.n	8007ca8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
	...

08007d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d30:	b09f      	sub	sp, #124	; 0x7c
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d42:	68d9      	ldr	r1, [r3, #12]
 8007d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	ea40 0301 	orr.w	r3, r0, r1
 8007d4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d70:	f021 010c 	bic.w	r1, r1, #12
 8007d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d7a:	430b      	orrs	r3, r1
 8007d7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d8a:	6999      	ldr	r1, [r3, #24]
 8007d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	ea40 0301 	orr.w	r3, r0, r1
 8007d94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	4bc5      	ldr	r3, [pc, #788]	; (80080b0 <UART_SetConfig+0x384>)
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d004      	beq.n	8007daa <UART_SetConfig+0x7e>
 8007da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	4bc3      	ldr	r3, [pc, #780]	; (80080b4 <UART_SetConfig+0x388>)
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d103      	bne.n	8007db2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007daa:	f7fd fde7 	bl	800597c <HAL_RCC_GetPCLK2Freq>
 8007dae:	6778      	str	r0, [r7, #116]	; 0x74
 8007db0:	e002      	b.n	8007db8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007db2:	f7fd fdcf 	bl	8005954 <HAL_RCC_GetPCLK1Freq>
 8007db6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc0:	f040 80b6 	bne.w	8007f30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dc6:	461c      	mov	r4, r3
 8007dc8:	f04f 0500 	mov.w	r5, #0
 8007dcc:	4622      	mov	r2, r4
 8007dce:	462b      	mov	r3, r5
 8007dd0:	1891      	adds	r1, r2, r2
 8007dd2:	6439      	str	r1, [r7, #64]	; 0x40
 8007dd4:	415b      	adcs	r3, r3
 8007dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8007dd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ddc:	1912      	adds	r2, r2, r4
 8007dde:	eb45 0303 	adc.w	r3, r5, r3
 8007de2:	f04f 0000 	mov.w	r0, #0
 8007de6:	f04f 0100 	mov.w	r1, #0
 8007dea:	00d9      	lsls	r1, r3, #3
 8007dec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007df0:	00d0      	lsls	r0, r2, #3
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	1911      	adds	r1, r2, r4
 8007df8:	6639      	str	r1, [r7, #96]	; 0x60
 8007dfa:	416b      	adcs	r3, r5
 8007dfc:	667b      	str	r3, [r7, #100]	; 0x64
 8007dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	461a      	mov	r2, r3
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	1891      	adds	r1, r2, r2
 8007e0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e0c:	415b      	adcs	r3, r3
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007e18:	f7f8 fa52 	bl	80002c0 <__aeabi_uldivmod>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4ba5      	ldr	r3, [pc, #660]	; (80080b8 <UART_SetConfig+0x38c>)
 8007e22:	fba3 2302 	umull	r2, r3, r3, r2
 8007e26:	095b      	lsrs	r3, r3, #5
 8007e28:	011e      	lsls	r6, r3, #4
 8007e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e2c:	461c      	mov	r4, r3
 8007e2e:	f04f 0500 	mov.w	r5, #0
 8007e32:	4622      	mov	r2, r4
 8007e34:	462b      	mov	r3, r5
 8007e36:	1891      	adds	r1, r2, r2
 8007e38:	6339      	str	r1, [r7, #48]	; 0x30
 8007e3a:	415b      	adcs	r3, r3
 8007e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007e42:	1912      	adds	r2, r2, r4
 8007e44:	eb45 0303 	adc.w	r3, r5, r3
 8007e48:	f04f 0000 	mov.w	r0, #0
 8007e4c:	f04f 0100 	mov.w	r1, #0
 8007e50:	00d9      	lsls	r1, r3, #3
 8007e52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e56:	00d0      	lsls	r0, r2, #3
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	1911      	adds	r1, r2, r4
 8007e5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e60:	416b      	adcs	r3, r5
 8007e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f04f 0300 	mov.w	r3, #0
 8007e6e:	1891      	adds	r1, r2, r2
 8007e70:	62b9      	str	r1, [r7, #40]	; 0x28
 8007e72:	415b      	adcs	r3, r3
 8007e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007e7e:	f7f8 fa1f 	bl	80002c0 <__aeabi_uldivmod>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4b8c      	ldr	r3, [pc, #560]	; (80080b8 <UART_SetConfig+0x38c>)
 8007e88:	fba3 1302 	umull	r1, r3, r3, r2
 8007e8c:	095b      	lsrs	r3, r3, #5
 8007e8e:	2164      	movs	r1, #100	; 0x64
 8007e90:	fb01 f303 	mul.w	r3, r1, r3
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	3332      	adds	r3, #50	; 0x32
 8007e9a:	4a87      	ldr	r2, [pc, #540]	; (80080b8 <UART_SetConfig+0x38c>)
 8007e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea0:	095b      	lsrs	r3, r3, #5
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ea8:	441e      	add	r6, r3
 8007eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eac:	4618      	mov	r0, r3
 8007eae:	f04f 0100 	mov.w	r1, #0
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	1894      	adds	r4, r2, r2
 8007eb8:	623c      	str	r4, [r7, #32]
 8007eba:	415b      	adcs	r3, r3
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ebe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ec2:	1812      	adds	r2, r2, r0
 8007ec4:	eb41 0303 	adc.w	r3, r1, r3
 8007ec8:	f04f 0400 	mov.w	r4, #0
 8007ecc:	f04f 0500 	mov.w	r5, #0
 8007ed0:	00dd      	lsls	r5, r3, #3
 8007ed2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ed6:	00d4      	lsls	r4, r2, #3
 8007ed8:	4622      	mov	r2, r4
 8007eda:	462b      	mov	r3, r5
 8007edc:	1814      	adds	r4, r2, r0
 8007ede:	653c      	str	r4, [r7, #80]	; 0x50
 8007ee0:	414b      	adcs	r3, r1
 8007ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8007ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	f04f 0300 	mov.w	r3, #0
 8007eee:	1891      	adds	r1, r2, r2
 8007ef0:	61b9      	str	r1, [r7, #24]
 8007ef2:	415b      	adcs	r3, r3
 8007ef4:	61fb      	str	r3, [r7, #28]
 8007ef6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007efa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007efe:	f7f8 f9df 	bl	80002c0 <__aeabi_uldivmod>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	4b6c      	ldr	r3, [pc, #432]	; (80080b8 <UART_SetConfig+0x38c>)
 8007f08:	fba3 1302 	umull	r1, r3, r3, r2
 8007f0c:	095b      	lsrs	r3, r3, #5
 8007f0e:	2164      	movs	r1, #100	; 0x64
 8007f10:	fb01 f303 	mul.w	r3, r1, r3
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	3332      	adds	r3, #50	; 0x32
 8007f1a:	4a67      	ldr	r2, [pc, #412]	; (80080b8 <UART_SetConfig+0x38c>)
 8007f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f20:	095b      	lsrs	r3, r3, #5
 8007f22:	f003 0207 	and.w	r2, r3, #7
 8007f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4432      	add	r2, r6
 8007f2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f2e:	e0b9      	b.n	80080a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f32:	461c      	mov	r4, r3
 8007f34:	f04f 0500 	mov.w	r5, #0
 8007f38:	4622      	mov	r2, r4
 8007f3a:	462b      	mov	r3, r5
 8007f3c:	1891      	adds	r1, r2, r2
 8007f3e:	6139      	str	r1, [r7, #16]
 8007f40:	415b      	adcs	r3, r3
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f48:	1912      	adds	r2, r2, r4
 8007f4a:	eb45 0303 	adc.w	r3, r5, r3
 8007f4e:	f04f 0000 	mov.w	r0, #0
 8007f52:	f04f 0100 	mov.w	r1, #0
 8007f56:	00d9      	lsls	r1, r3, #3
 8007f58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f5c:	00d0      	lsls	r0, r2, #3
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	eb12 0804 	adds.w	r8, r2, r4
 8007f66:	eb43 0905 	adc.w	r9, r3, r5
 8007f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f04f 0100 	mov.w	r1, #0
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	f04f 0300 	mov.w	r3, #0
 8007f7c:	008b      	lsls	r3, r1, #2
 8007f7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f82:	0082      	lsls	r2, r0, #2
 8007f84:	4640      	mov	r0, r8
 8007f86:	4649      	mov	r1, r9
 8007f88:	f7f8 f99a 	bl	80002c0 <__aeabi_uldivmod>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4b49      	ldr	r3, [pc, #292]	; (80080b8 <UART_SetConfig+0x38c>)
 8007f92:	fba3 2302 	umull	r2, r3, r3, r2
 8007f96:	095b      	lsrs	r3, r3, #5
 8007f98:	011e      	lsls	r6, r3, #4
 8007f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f04f 0100 	mov.w	r1, #0
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	1894      	adds	r4, r2, r2
 8007fa8:	60bc      	str	r4, [r7, #8]
 8007faa:	415b      	adcs	r3, r3
 8007fac:	60fb      	str	r3, [r7, #12]
 8007fae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fb2:	1812      	adds	r2, r2, r0
 8007fb4:	eb41 0303 	adc.w	r3, r1, r3
 8007fb8:	f04f 0400 	mov.w	r4, #0
 8007fbc:	f04f 0500 	mov.w	r5, #0
 8007fc0:	00dd      	lsls	r5, r3, #3
 8007fc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fc6:	00d4      	lsls	r4, r2, #3
 8007fc8:	4622      	mov	r2, r4
 8007fca:	462b      	mov	r3, r5
 8007fcc:	1814      	adds	r4, r2, r0
 8007fce:	64bc      	str	r4, [r7, #72]	; 0x48
 8007fd0:	414b      	adcs	r3, r1
 8007fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f04f 0100 	mov.w	r1, #0
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	f04f 0300 	mov.w	r3, #0
 8007fe6:	008b      	lsls	r3, r1, #2
 8007fe8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007fec:	0082      	lsls	r2, r0, #2
 8007fee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007ff2:	f7f8 f965 	bl	80002c0 <__aeabi_uldivmod>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4b2f      	ldr	r3, [pc, #188]	; (80080b8 <UART_SetConfig+0x38c>)
 8007ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8008000:	095b      	lsrs	r3, r3, #5
 8008002:	2164      	movs	r1, #100	; 0x64
 8008004:	fb01 f303 	mul.w	r3, r1, r3
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	3332      	adds	r3, #50	; 0x32
 800800e:	4a2a      	ldr	r2, [pc, #168]	; (80080b8 <UART_SetConfig+0x38c>)
 8008010:	fba2 2303 	umull	r2, r3, r2, r3
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800801a:	441e      	add	r6, r3
 800801c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800801e:	4618      	mov	r0, r3
 8008020:	f04f 0100 	mov.w	r1, #0
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	1894      	adds	r4, r2, r2
 800802a:	603c      	str	r4, [r7, #0]
 800802c:	415b      	adcs	r3, r3
 800802e:	607b      	str	r3, [r7, #4]
 8008030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008034:	1812      	adds	r2, r2, r0
 8008036:	eb41 0303 	adc.w	r3, r1, r3
 800803a:	f04f 0400 	mov.w	r4, #0
 800803e:	f04f 0500 	mov.w	r5, #0
 8008042:	00dd      	lsls	r5, r3, #3
 8008044:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008048:	00d4      	lsls	r4, r2, #3
 800804a:	4622      	mov	r2, r4
 800804c:	462b      	mov	r3, r5
 800804e:	eb12 0a00 	adds.w	sl, r2, r0
 8008052:	eb43 0b01 	adc.w	fp, r3, r1
 8008056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	4618      	mov	r0, r3
 800805c:	f04f 0100 	mov.w	r1, #0
 8008060:	f04f 0200 	mov.w	r2, #0
 8008064:	f04f 0300 	mov.w	r3, #0
 8008068:	008b      	lsls	r3, r1, #2
 800806a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800806e:	0082      	lsls	r2, r0, #2
 8008070:	4650      	mov	r0, sl
 8008072:	4659      	mov	r1, fp
 8008074:	f7f8 f924 	bl	80002c0 <__aeabi_uldivmod>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	4b0e      	ldr	r3, [pc, #56]	; (80080b8 <UART_SetConfig+0x38c>)
 800807e:	fba3 1302 	umull	r1, r3, r3, r2
 8008082:	095b      	lsrs	r3, r3, #5
 8008084:	2164      	movs	r1, #100	; 0x64
 8008086:	fb01 f303 	mul.w	r3, r1, r3
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	011b      	lsls	r3, r3, #4
 800808e:	3332      	adds	r3, #50	; 0x32
 8008090:	4a09      	ldr	r2, [pc, #36]	; (80080b8 <UART_SetConfig+0x38c>)
 8008092:	fba2 2303 	umull	r2, r3, r2, r3
 8008096:	095b      	lsrs	r3, r3, #5
 8008098:	f003 020f 	and.w	r2, r3, #15
 800809c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4432      	add	r2, r6
 80080a2:	609a      	str	r2, [r3, #8]
}
 80080a4:	bf00      	nop
 80080a6:	377c      	adds	r7, #124	; 0x7c
 80080a8:	46bd      	mov	sp, r7
 80080aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ae:	bf00      	nop
 80080b0:	40011000 	.word	0x40011000
 80080b4:	40011400 	.word	0x40011400
 80080b8:	51eb851f 	.word	0x51eb851f

080080bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080bc:	b084      	sub	sp, #16
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	f107 001c 	add.w	r0, r7, #28
 80080ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d122      	bne.n	800811a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80080e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d105      	bne.n	800810e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 fac0 	bl	8009694 <USB_CoreReset>
 8008114:	4603      	mov	r3, r0
 8008116:	73fb      	strb	r3, [r7, #15]
 8008118:	e01a      	b.n	8008150 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 fab4 	bl	8009694 <USB_CoreReset>
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	639a      	str	r2, [r3, #56]	; 0x38
 8008142:	e005      	b.n	8008150 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008148:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	2b01      	cmp	r3, #1
 8008154:	d10b      	bne.n	800816e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f043 0206 	orr.w	r2, r3, #6
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f043 0220 	orr.w	r2, r3, #32
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800817a:	b004      	add	sp, #16
 800817c:	4770      	bx	lr
	...

08008180 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	4613      	mov	r3, r2
 800818c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800818e:	79fb      	ldrb	r3, [r7, #7]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d165      	bne.n	8008260 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4a41      	ldr	r2, [pc, #260]	; (800829c <USB_SetTurnaroundTime+0x11c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d906      	bls.n	80081aa <USB_SetTurnaroundTime+0x2a>
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4a40      	ldr	r2, [pc, #256]	; (80082a0 <USB_SetTurnaroundTime+0x120>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d202      	bcs.n	80081aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80081a4:	230f      	movs	r3, #15
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e062      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	4a3c      	ldr	r2, [pc, #240]	; (80082a0 <USB_SetTurnaroundTime+0x120>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d306      	bcc.n	80081c0 <USB_SetTurnaroundTime+0x40>
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	4a3b      	ldr	r2, [pc, #236]	; (80082a4 <USB_SetTurnaroundTime+0x124>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d202      	bcs.n	80081c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80081ba:	230e      	movs	r3, #14
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	e057      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4a38      	ldr	r2, [pc, #224]	; (80082a4 <USB_SetTurnaroundTime+0x124>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d306      	bcc.n	80081d6 <USB_SetTurnaroundTime+0x56>
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4a37      	ldr	r2, [pc, #220]	; (80082a8 <USB_SetTurnaroundTime+0x128>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d202      	bcs.n	80081d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80081d0:	230d      	movs	r3, #13
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e04c      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4a33      	ldr	r2, [pc, #204]	; (80082a8 <USB_SetTurnaroundTime+0x128>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d306      	bcc.n	80081ec <USB_SetTurnaroundTime+0x6c>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4a32      	ldr	r2, [pc, #200]	; (80082ac <USB_SetTurnaroundTime+0x12c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d802      	bhi.n	80081ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80081e6:	230c      	movs	r3, #12
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	e041      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4a2f      	ldr	r2, [pc, #188]	; (80082ac <USB_SetTurnaroundTime+0x12c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d906      	bls.n	8008202 <USB_SetTurnaroundTime+0x82>
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4a2e      	ldr	r2, [pc, #184]	; (80082b0 <USB_SetTurnaroundTime+0x130>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d802      	bhi.n	8008202 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081fc:	230b      	movs	r3, #11
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	e036      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	4a2a      	ldr	r2, [pc, #168]	; (80082b0 <USB_SetTurnaroundTime+0x130>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d906      	bls.n	8008218 <USB_SetTurnaroundTime+0x98>
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	4a29      	ldr	r2, [pc, #164]	; (80082b4 <USB_SetTurnaroundTime+0x134>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d802      	bhi.n	8008218 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008212:	230a      	movs	r3, #10
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e02b      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4a26      	ldr	r2, [pc, #152]	; (80082b4 <USB_SetTurnaroundTime+0x134>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d906      	bls.n	800822e <USB_SetTurnaroundTime+0xae>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4a25      	ldr	r2, [pc, #148]	; (80082b8 <USB_SetTurnaroundTime+0x138>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d202      	bcs.n	800822e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008228:	2309      	movs	r3, #9
 800822a:	617b      	str	r3, [r7, #20]
 800822c:	e020      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	4a21      	ldr	r2, [pc, #132]	; (80082b8 <USB_SetTurnaroundTime+0x138>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d306      	bcc.n	8008244 <USB_SetTurnaroundTime+0xc4>
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	4a20      	ldr	r2, [pc, #128]	; (80082bc <USB_SetTurnaroundTime+0x13c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d802      	bhi.n	8008244 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800823e:	2308      	movs	r3, #8
 8008240:	617b      	str	r3, [r7, #20]
 8008242:	e015      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	4a1d      	ldr	r2, [pc, #116]	; (80082bc <USB_SetTurnaroundTime+0x13c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d906      	bls.n	800825a <USB_SetTurnaroundTime+0xda>
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	4a1c      	ldr	r2, [pc, #112]	; (80082c0 <USB_SetTurnaroundTime+0x140>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d202      	bcs.n	800825a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008254:	2307      	movs	r3, #7
 8008256:	617b      	str	r3, [r7, #20]
 8008258:	e00a      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800825a:	2306      	movs	r3, #6
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e007      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d102      	bne.n	800826c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008266:	2309      	movs	r3, #9
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	e001      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800826c:	2309      	movs	r3, #9
 800826e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	029b      	lsls	r3, r3, #10
 8008284:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008288:	431a      	orrs	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	371c      	adds	r7, #28
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	00d8acbf 	.word	0x00d8acbf
 80082a0:	00e4e1c0 	.word	0x00e4e1c0
 80082a4:	00f42400 	.word	0x00f42400
 80082a8:	01067380 	.word	0x01067380
 80082ac:	011a499f 	.word	0x011a499f
 80082b0:	01312cff 	.word	0x01312cff
 80082b4:	014ca43f 	.word	0x014ca43f
 80082b8:	016e3600 	.word	0x016e3600
 80082bc:	01a6ab1f 	.word	0x01a6ab1f
 80082c0:	01e84800 	.word	0x01e84800

080082c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f043 0201 	orr.w	r2, r3, #1
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f023 0201 	bic.w	r2, r3, #1
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d106      	bne.n	8008334 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	60da      	str	r2, [r3, #12]
 8008332:	e00b      	b.n	800834c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008334:	78fb      	ldrb	r3, [r7, #3]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d106      	bne.n	8008348 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	60da      	str	r2, [r3, #12]
 8008346:	e001      	b.n	800834c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e003      	b.n	8008354 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800834c:	2032      	movs	r0, #50	; 0x32
 800834e:	f7fa fe49 	bl	8002fe4 <HAL_Delay>

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800835c:	b084      	sub	sp, #16
 800835e:	b580      	push	{r7, lr}
 8008360:	b086      	sub	sp, #24
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800836a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008376:	2300      	movs	r3, #0
 8008378:	613b      	str	r3, [r7, #16]
 800837a:	e009      	b.n	8008390 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	3340      	adds	r3, #64	; 0x40
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	2200      	movs	r2, #0
 8008388:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	3301      	adds	r3, #1
 800838e:	613b      	str	r3, [r7, #16]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	2b0e      	cmp	r3, #14
 8008394:	d9f2      	bls.n	800837c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008398:	2b00      	cmp	r3, #0
 800839a:	d11c      	bne.n	80083d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083aa:	f043 0302 	orr.w	r3, r3, #2
 80083ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	e005      	b.n	80083e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083e8:	461a      	mov	r2, r3
 80083ea:	2300      	movs	r3, #0
 80083ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f4:	4619      	mov	r1, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fc:	461a      	mov	r2, r3
 80083fe:	680b      	ldr	r3, [r1, #0]
 8008400:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	2b01      	cmp	r3, #1
 8008406:	d10c      	bne.n	8008422 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	2b00      	cmp	r3, #0
 800840c:	d104      	bne.n	8008418 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800840e:	2100      	movs	r1, #0
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f949 	bl	80086a8 <USB_SetDevSpeed>
 8008416:	e008      	b.n	800842a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008418:	2101      	movs	r1, #1
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f944 	bl	80086a8 <USB_SetDevSpeed>
 8008420:	e003      	b.n	800842a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008422:	2103      	movs	r1, #3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f93f 	bl	80086a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800842a:	2110      	movs	r1, #16
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f8f3 	bl	8008618 <USB_FlushTxFifo>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f911 	bl	8008664 <USB_FlushRxFifo>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008452:	461a      	mov	r2, r3
 8008454:	2300      	movs	r3, #0
 8008456:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	461a      	mov	r2, r3
 8008460:	2300      	movs	r3, #0
 8008462:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846a:	461a      	mov	r2, r3
 800846c:	2300      	movs	r3, #0
 800846e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008470:	2300      	movs	r3, #0
 8008472:	613b      	str	r3, [r7, #16]
 8008474:	e043      	b.n	80084fe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800848c:	d118      	bne.n	80084c0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10a      	bne.n	80084aa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a0:	461a      	mov	r2, r3
 80084a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	e013      	b.n	80084d2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b6:	461a      	mov	r2, r3
 80084b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084bc:	6013      	str	r3, [r2, #0]
 80084be:	e008      	b.n	80084d2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084cc:	461a      	mov	r2, r3
 80084ce:	2300      	movs	r3, #0
 80084d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084de:	461a      	mov	r2, r3
 80084e0:	2300      	movs	r3, #0
 80084e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f0:	461a      	mov	r2, r3
 80084f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	3301      	adds	r3, #1
 80084fc:	613b      	str	r3, [r7, #16]
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	429a      	cmp	r2, r3
 8008504:	d3b7      	bcc.n	8008476 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008506:	2300      	movs	r3, #0
 8008508:	613b      	str	r3, [r7, #16]
 800850a:	e043      	b.n	8008594 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800851e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008522:	d118      	bne.n	8008556 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10a      	bne.n	8008540 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008536:	461a      	mov	r2, r3
 8008538:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	e013      	b.n	8008568 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854c:	461a      	mov	r2, r3
 800854e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	e008      	b.n	8008568 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008562:	461a      	mov	r2, r3
 8008564:	2300      	movs	r3, #0
 8008566:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008574:	461a      	mov	r2, r3
 8008576:	2300      	movs	r3, #0
 8008578:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008586:	461a      	mov	r2, r3
 8008588:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800858c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	3301      	adds	r3, #1
 8008592:	613b      	str	r3, [r7, #16]
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	429a      	cmp	r2, r3
 800859a:	d3b7      	bcc.n	800850c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d105      	bne.n	80085d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	f043 0210 	orr.w	r2, r3, #16
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	699a      	ldr	r2, [r3, #24]
 80085d4:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <USB_DevInit+0x2b8>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d005      	beq.n	80085ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	f043 0208 	orr.w	r2, r3, #8
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d107      	bne.n	8008604 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085fc:	f043 0304 	orr.w	r3, r3, #4
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008604:	7dfb      	ldrb	r3, [r7, #23]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008610:	b004      	add	sp, #16
 8008612:	4770      	bx	lr
 8008614:	803c3800 	.word	0x803c3800

08008618 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008622:	2300      	movs	r3, #0
 8008624:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	019b      	lsls	r3, r3, #6
 800862a:	f043 0220 	orr.w	r2, r3, #32
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3301      	adds	r3, #1
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4a09      	ldr	r2, [pc, #36]	; (8008660 <USB_FlushTxFifo+0x48>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d901      	bls.n	8008644 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e006      	b.n	8008652 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b20      	cmp	r3, #32
 800864e:	d0f0      	beq.n	8008632 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	00030d40 	.word	0x00030d40

08008664 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2210      	movs	r2, #16
 8008674:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4a09      	ldr	r2, [pc, #36]	; (80086a4 <USB_FlushRxFifo+0x40>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d901      	bls.n	8008688 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e006      	b.n	8008696 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	2b10      	cmp	r3, #16
 8008692:	d0f0      	beq.n	8008676 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	00030d40 	.word	0x00030d40

080086a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	68f9      	ldr	r1, [r7, #12]
 80086c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086c8:	4313      	orrs	r3, r2
 80086ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80086da:	b480      	push	{r7}
 80086dc:	b087      	sub	sp, #28
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f003 0306 	and.w	r3, r3, #6
 80086f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d102      	bne.n	8008700 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80086fa:	2300      	movs	r3, #0
 80086fc:	75fb      	strb	r3, [r7, #23]
 80086fe:	e00a      	b.n	8008716 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2b02      	cmp	r3, #2
 8008704:	d002      	beq.n	800870c <USB_GetDevSpeed+0x32>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b06      	cmp	r3, #6
 800870a:	d102      	bne.n	8008712 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800870c:	2302      	movs	r3, #2
 800870e:	75fb      	strb	r3, [r7, #23]
 8008710:	e001      	b.n	8008716 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008712:	230f      	movs	r3, #15
 8008714:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008716:	7dfb      	ldrb	r3, [r7, #23]
}
 8008718:	4618      	mov	r0, r3
 800871a:	371c      	adds	r7, #28
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d13a      	bne.n	80087b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	f003 030f 	and.w	r3, r3, #15
 8008750:	2101      	movs	r1, #1
 8008752:	fa01 f303 	lsl.w	r3, r1, r3
 8008756:	b29b      	uxth	r3, r3
 8008758:	68f9      	ldr	r1, [r7, #12]
 800875a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800875e:	4313      	orrs	r3, r2
 8008760:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d155      	bne.n	8008824 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	78db      	ldrb	r3, [r3, #3]
 8008792:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008794:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	059b      	lsls	r3, r3, #22
 800879a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800879c:	4313      	orrs	r3, r2
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	0151      	lsls	r1, r2, #5
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	440a      	add	r2, r1
 80087a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	e036      	b.n	8008824 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087bc:	69da      	ldr	r2, [r3, #28]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	f003 030f 	and.w	r3, r3, #15
 80087c6:	2101      	movs	r1, #1
 80087c8:	fa01 f303 	lsl.w	r3, r1, r3
 80087cc:	041b      	lsls	r3, r3, #16
 80087ce:	68f9      	ldr	r1, [r7, #12]
 80087d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087d4:	4313      	orrs	r3, r2
 80087d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d11a      	bne.n	8008824 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	78db      	ldrb	r3, [r3, #3]
 8008808:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800880a:	430b      	orrs	r3, r1
 800880c:	4313      	orrs	r3, r2
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	0151      	lsls	r1, r2, #5
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	440a      	add	r2, r1
 8008816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800881a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800881e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008822:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
	...

08008834 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	785b      	ldrb	r3, [r3, #1]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d161      	bne.n	8008914 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008866:	d11f      	bne.n	80088a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	0151      	lsls	r1, r2, #5
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	440a      	add	r2, r1
 800887e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008886:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	440a      	add	r2, r1
 800889e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	f003 030f 	and.w	r3, r3, #15
 80088b8:	2101      	movs	r1, #1
 80088ba:	fa01 f303 	lsl.w	r3, r1, r3
 80088be:	b29b      	uxth	r3, r3
 80088c0:	43db      	mvns	r3, r3
 80088c2:	68f9      	ldr	r1, [r7, #12]
 80088c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088c8:	4013      	ands	r3, r2
 80088ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d2:	69da      	ldr	r2, [r3, #28]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	f003 030f 	and.w	r3, r3, #15
 80088dc:	2101      	movs	r1, #1
 80088de:	fa01 f303 	lsl.w	r3, r1, r3
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	43db      	mvns	r3, r3
 80088e6:	68f9      	ldr	r1, [r7, #12]
 80088e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088ec:	4013      	ands	r3, r2
 80088ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	0159      	lsls	r1, r3, #5
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	440b      	add	r3, r1
 8008906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800890a:	4619      	mov	r1, r3
 800890c:	4b35      	ldr	r3, [pc, #212]	; (80089e4 <USB_DeactivateEndpoint+0x1b0>)
 800890e:	4013      	ands	r3, r2
 8008910:	600b      	str	r3, [r1, #0]
 8008912:	e060      	b.n	80089d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800892a:	d11f      	bne.n	800896c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	0151      	lsls	r1, r2, #5
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	440a      	add	r2, r1
 8008942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008946:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800894a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	0151      	lsls	r1, r2, #5
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	440a      	add	r2, r1
 8008962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008966:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800896a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f003 030f 	and.w	r3, r3, #15
 800897c:	2101      	movs	r1, #1
 800897e:	fa01 f303 	lsl.w	r3, r1, r3
 8008982:	041b      	lsls	r3, r3, #16
 8008984:	43db      	mvns	r3, r3
 8008986:	68f9      	ldr	r1, [r7, #12]
 8008988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800898c:	4013      	ands	r3, r2
 800898e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008996:	69da      	ldr	r2, [r3, #28]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	f003 030f 	and.w	r3, r3, #15
 80089a0:	2101      	movs	r1, #1
 80089a2:	fa01 f303 	lsl.w	r3, r1, r3
 80089a6:	041b      	lsls	r3, r3, #16
 80089a8:	43db      	mvns	r3, r3
 80089aa:	68f9      	ldr	r1, [r7, #12]
 80089ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089b0:	4013      	ands	r3, r2
 80089b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	0159      	lsls	r1, r3, #5
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	440b      	add	r3, r1
 80089ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ce:	4619      	mov	r1, r3
 80089d0:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <USB_DeactivateEndpoint+0x1b4>)
 80089d2:	4013      	ands	r3, r2
 80089d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	ec337800 	.word	0xec337800
 80089e8:	eff37800 	.word	0xeff37800

080089ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08a      	sub	sp, #40	; 0x28
 80089f0:	af02      	add	r7, sp, #8
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	4613      	mov	r3, r2
 80089f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	785b      	ldrb	r3, [r3, #1]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	f040 815c 	bne.w	8008cc6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d132      	bne.n	8008a7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	0151      	lsls	r1, r2, #5
 8008a28:	69fa      	ldr	r2, [r7, #28]
 8008a2a:	440a      	add	r2, r1
 8008a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	0151      	lsls	r1, r2, #5
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	440a      	add	r2, r1
 8008a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	0151      	lsls	r1, r2, #5
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	440a      	add	r2, r1
 8008a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a74:	0cdb      	lsrs	r3, r3, #19
 8008a76:	04db      	lsls	r3, r3, #19
 8008a78:	6113      	str	r3, [r2, #16]
 8008a7a:	e074      	b.n	8008b66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	0151      	lsls	r1, r2, #5
 8008a8e:	69fa      	ldr	r2, [r7, #28]
 8008a90:	440a      	add	r2, r1
 8008a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a96:	0cdb      	lsrs	r3, r3, #19
 8008a98:	04db      	lsls	r3, r3, #19
 8008a9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	0151      	lsls	r1, r2, #5
 8008aae:	69fa      	ldr	r2, [r7, #28]
 8008ab0:	440a      	add	r2, r1
 8008ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008aba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008abe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008acc:	691a      	ldr	r2, [r3, #16]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	6959      	ldr	r1, [r3, #20]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	440b      	add	r3, r1
 8008ad8:	1e59      	subs	r1, r3, #1
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ae2:	04d9      	lsls	r1, r3, #19
 8008ae4:	4b9d      	ldr	r3, [pc, #628]	; (8008d5c <USB_EPStartXfer+0x370>)
 8008ae6:	400b      	ands	r3, r1
 8008ae8:	69b9      	ldr	r1, [r7, #24]
 8008aea:	0148      	lsls	r0, r1, #5
 8008aec:	69f9      	ldr	r1, [r7, #28]
 8008aee:	4401      	add	r1, r0
 8008af0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008af4:	4313      	orrs	r3, r2
 8008af6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b04:	691a      	ldr	r2, [r3, #16]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b0e:	69b9      	ldr	r1, [r7, #24]
 8008b10:	0148      	lsls	r0, r1, #5
 8008b12:	69f9      	ldr	r1, [r7, #28]
 8008b14:	4401      	add	r1, r0
 8008b16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	78db      	ldrb	r3, [r3, #3]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d11f      	bne.n	8008b66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	0151      	lsls	r1, r2, #5
 8008b38:	69fa      	ldr	r2, [r7, #28]
 8008b3a:	440a      	add	r2, r1
 8008b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008b44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	0151      	lsls	r1, r2, #5
 8008b58:	69fa      	ldr	r2, [r7, #28]
 8008b5a:	440a      	add	r2, r1
 8008b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d14b      	bne.n	8008c04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d009      	beq.n	8008b88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b80:	461a      	mov	r2, r3
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	78db      	ldrb	r3, [r3, #3]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d128      	bne.n	8008be2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d110      	bne.n	8008bc2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	0151      	lsls	r1, r2, #5
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	440a      	add	r2, r1
 8008bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	e00f      	b.n	8008be2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	0151      	lsls	r1, r2, #5
 8008bd4:	69fa      	ldr	r2, [r7, #28]
 8008bd6:	440a      	add	r2, r1
 8008bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008be0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	0151      	lsls	r1, r2, #5
 8008bf4:	69fa      	ldr	r2, [r7, #28]
 8008bf6:	440a      	add	r2, r1
 8008bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	e12f      	b.n	8008e64 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	0151      	lsls	r1, r2, #5
 8008c16:	69fa      	ldr	r2, [r7, #28]
 8008c18:	440a      	add	r2, r1
 8008c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	78db      	ldrb	r3, [r3, #3]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d015      	beq.n	8008c58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 8117 	beq.w	8008e64 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	f003 030f 	and.w	r3, r3, #15
 8008c46:	2101      	movs	r1, #1
 8008c48:	fa01 f303 	lsl.w	r3, r1, r3
 8008c4c:	69f9      	ldr	r1, [r7, #28]
 8008c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c52:	4313      	orrs	r3, r2
 8008c54:	634b      	str	r3, [r1, #52]	; 0x34
 8008c56:	e105      	b.n	8008e64 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d110      	bne.n	8008c8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	0151      	lsls	r1, r2, #5
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	440a      	add	r2, r1
 8008c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	e00f      	b.n	8008caa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	0151      	lsls	r1, r2, #5
 8008c9c:	69fa      	ldr	r2, [r7, #28]
 8008c9e:	440a      	add	r2, r1
 8008ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ca8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	68d9      	ldr	r1, [r3, #12]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	781a      	ldrb	r2, [r3, #0]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	b298      	uxth	r0, r3
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f000 fa2b 	bl	800911a <USB_WritePacket>
 8008cc4:	e0ce      	b.n	8008e64 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	0151      	lsls	r1, r2, #5
 8008cd8:	69fa      	ldr	r2, [r7, #28]
 8008cda:	440a      	add	r2, r1
 8008cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce0:	0cdb      	lsrs	r3, r3, #19
 8008ce2:	04db      	lsls	r3, r3, #19
 8008ce4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	0151      	lsls	r1, r2, #5
 8008cf8:	69fa      	ldr	r2, [r7, #28]
 8008cfa:	440a      	add	r2, r1
 8008cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d126      	bne.n	8008d60 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1e:	691a      	ldr	r2, [r3, #16]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d28:	69b9      	ldr	r1, [r7, #24]
 8008d2a:	0148      	lsls	r0, r1, #5
 8008d2c:	69f9      	ldr	r1, [r7, #28]
 8008d2e:	4401      	add	r1, r0
 8008d30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d34:	4313      	orrs	r3, r2
 8008d36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	0151      	lsls	r1, r2, #5
 8008d4a:	69fa      	ldr	r2, [r7, #28]
 8008d4c:	440a      	add	r2, r1
 8008d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d56:	6113      	str	r3, [r2, #16]
 8008d58:	e036      	b.n	8008dc8 <USB_EPStartXfer+0x3dc>
 8008d5a:	bf00      	nop
 8008d5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	695a      	ldr	r2, [r3, #20]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	4413      	add	r3, r2
 8008d6a:	1e5a      	subs	r2, r3, #1
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d74:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	8afb      	ldrh	r3, [r7, #22]
 8008d86:	04d9      	lsls	r1, r3, #19
 8008d88:	4b39      	ldr	r3, [pc, #228]	; (8008e70 <USB_EPStartXfer+0x484>)
 8008d8a:	400b      	ands	r3, r1
 8008d8c:	69b9      	ldr	r1, [r7, #24]
 8008d8e:	0148      	lsls	r0, r1, #5
 8008d90:	69f9      	ldr	r1, [r7, #28]
 8008d92:	4401      	add	r1, r0
 8008d94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da8:	691a      	ldr	r2, [r3, #16]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	8af9      	ldrh	r1, [r7, #22]
 8008db0:	fb01 f303 	mul.w	r3, r1, r3
 8008db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008db8:	69b9      	ldr	r1, [r7, #24]
 8008dba:	0148      	lsls	r0, r1, #5
 8008dbc:	69f9      	ldr	r1, [r7, #28]
 8008dbe:	4401      	add	r1, r0
 8008dc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d10d      	bne.n	8008dea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d009      	beq.n	8008dea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	68d9      	ldr	r1, [r3, #12]
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de6:	460a      	mov	r2, r1
 8008de8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	78db      	ldrb	r3, [r3, #3]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d128      	bne.n	8008e44 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d110      	bne.n	8008e24 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	0151      	lsls	r1, r2, #5
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	440a      	add	r2, r1
 8008e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	e00f      	b.n	8008e44 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	69fa      	ldr	r2, [r7, #28]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3720      	adds	r7, #32
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	1ff80000 	.word	0x1ff80000

08008e74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	785b      	ldrb	r3, [r3, #1]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	f040 80cd 	bne.w	8009030 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d132      	bne.n	8008f04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	0151      	lsls	r1, r2, #5
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	440a      	add	r2, r1
 8008eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ebc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ec0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	0151      	lsls	r1, r2, #5
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	440a      	add	r2, r1
 8008ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008edc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	0151      	lsls	r1, r2, #5
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	440a      	add	r2, r1
 8008ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008efc:	0cdb      	lsrs	r3, r3, #19
 8008efe:	04db      	lsls	r3, r3, #19
 8008f00:	6113      	str	r3, [r2, #16]
 8008f02:	e04e      	b.n	8008fa2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	0151      	lsls	r1, r2, #5
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	440a      	add	r2, r1
 8008f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f1e:	0cdb      	lsrs	r3, r3, #19
 8008f20:	04db      	lsls	r3, r3, #19
 8008f22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	0151      	lsls	r1, r2, #5
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	440a      	add	r2, r1
 8008f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f46:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	695a      	ldr	r2, [r3, #20]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d903      	bls.n	8008f5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	689a      	ldr	r2, [r3, #8]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	0151      	lsls	r1, r2, #5
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	440a      	add	r2, r1
 8008f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f88:	691a      	ldr	r2, [r3, #16]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f92:	6939      	ldr	r1, [r7, #16]
 8008f94:	0148      	lsls	r0, r1, #5
 8008f96:	6979      	ldr	r1, [r7, #20]
 8008f98:	4401      	add	r1, r0
 8008f9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008fa2:	79fb      	ldrb	r3, [r7, #7]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d11e      	bne.n	8008fe6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d009      	beq.n	8008fc4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	015a      	lsls	r2, r3, #5
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	0151      	lsls	r1, r2, #5
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	440a      	add	r2, r1
 8008fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fe2:	6013      	str	r3, [r2, #0]
 8008fe4:	e092      	b.n	800910c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	0151      	lsls	r1, r2, #5
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	440a      	add	r2, r1
 8008ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009000:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009004:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d07e      	beq.n	800910c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	f003 030f 	and.w	r3, r3, #15
 800901e:	2101      	movs	r1, #1
 8009020:	fa01 f303 	lsl.w	r3, r1, r3
 8009024:	6979      	ldr	r1, [r7, #20]
 8009026:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800902a:	4313      	orrs	r3, r2
 800902c:	634b      	str	r3, [r1, #52]	; 0x34
 800902e:	e06d      	b.n	800910c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	015a      	lsls	r2, r3, #5
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	4413      	add	r3, r2
 8009038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	0151      	lsls	r1, r2, #5
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	440a      	add	r2, r1
 8009046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800904a:	0cdb      	lsrs	r3, r3, #19
 800904c:	04db      	lsls	r3, r3, #19
 800904e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	4413      	add	r3, r2
 8009058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	0151      	lsls	r1, r2, #5
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	440a      	add	r2, r1
 8009066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800906a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800906e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009072:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	689a      	ldr	r2, [r3, #8]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	0151      	lsls	r1, r2, #5
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	440a      	add	r2, r1
 800909a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800909e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b0:	691a      	ldr	r2, [r3, #16]
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ba:	6939      	ldr	r1, [r7, #16]
 80090bc:	0148      	lsls	r0, r1, #5
 80090be:	6979      	ldr	r1, [r7, #20]
 80090c0:	4401      	add	r1, r0
 80090c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090c6:	4313      	orrs	r3, r2
 80090c8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80090ca:	79fb      	ldrb	r3, [r7, #7]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d10d      	bne.n	80090ec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d009      	beq.n	80090ec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	68d9      	ldr	r1, [r3, #12]
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e8:	460a      	mov	r2, r1
 80090ea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	0151      	lsls	r1, r2, #5
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	440a      	add	r2, r1
 8009102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009106:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800910a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800911a:	b480      	push	{r7}
 800911c:	b089      	sub	sp, #36	; 0x24
 800911e:	af00      	add	r7, sp, #0
 8009120:	60f8      	str	r0, [r7, #12]
 8009122:	60b9      	str	r1, [r7, #8]
 8009124:	4611      	mov	r1, r2
 8009126:	461a      	mov	r2, r3
 8009128:	460b      	mov	r3, r1
 800912a:	71fb      	strb	r3, [r7, #7]
 800912c:	4613      	mov	r3, r2
 800912e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009138:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800913c:	2b00      	cmp	r3, #0
 800913e:	d11a      	bne.n	8009176 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009140:	88bb      	ldrh	r3, [r7, #4]
 8009142:	3303      	adds	r3, #3
 8009144:	089b      	lsrs	r3, r3, #2
 8009146:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009148:	2300      	movs	r3, #0
 800914a:	61bb      	str	r3, [r7, #24]
 800914c:	e00f      	b.n	800916e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	031a      	lsls	r2, r3, #12
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	4413      	add	r3, r2
 8009156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800915a:	461a      	mov	r2, r3
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	3304      	adds	r3, #4
 8009166:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	3301      	adds	r3, #1
 800916c:	61bb      	str	r3, [r7, #24]
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	429a      	cmp	r2, r3
 8009174:	d3eb      	bcc.n	800914e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3724      	adds	r7, #36	; 0x24
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009184:	b480      	push	{r7}
 8009186:	b089      	sub	sp, #36	; 0x24
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	4613      	mov	r3, r2
 8009190:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800919a:	88fb      	ldrh	r3, [r7, #6]
 800919c:	3303      	adds	r3, #3
 800919e:	089b      	lsrs	r3, r3, #2
 80091a0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80091a2:	2300      	movs	r3, #0
 80091a4:	61bb      	str	r3, [r7, #24]
 80091a6:	e00b      	b.n	80091c0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	3304      	adds	r3, #4
 80091b8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	3301      	adds	r3, #1
 80091be:	61bb      	str	r3, [r7, #24]
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d3ef      	bcc.n	80091a8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80091c8:	69fb      	ldr	r3, [r7, #28]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3724      	adds	r7, #36	; 0x24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b085      	sub	sp, #20
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	785b      	ldrb	r3, [r3, #1]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d12c      	bne.n	800924c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	db12      	blt.n	800922a <USB_EPSetStall+0x54>
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00f      	beq.n	800922a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	0151      	lsls	r1, r2, #5
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	440a      	add	r2, r1
 8009220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009224:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009228:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	0151      	lsls	r1, r2, #5
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	440a      	add	r2, r1
 8009240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009248:	6013      	str	r3, [r2, #0]
 800924a:	e02b      	b.n	80092a4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	db12      	blt.n	8009284 <USB_EPSetStall+0xae>
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00f      	beq.n	8009284 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	0151      	lsls	r1, r2, #5
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	440a      	add	r2, r1
 800927a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800927e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009282:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	0151      	lsls	r1, r2, #5
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	440a      	add	r2, r1
 800929a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800929e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b085      	sub	sp, #20
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	785b      	ldrb	r3, [r3, #1]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d128      	bne.n	8009320 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	015a      	lsls	r2, r3, #5
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	4413      	add	r3, r2
 80092d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	0151      	lsls	r1, r2, #5
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	440a      	add	r2, r1
 80092e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	78db      	ldrb	r3, [r3, #3]
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d003      	beq.n	80092fe <USB_EPClearStall+0x4c>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	78db      	ldrb	r3, [r3, #3]
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d138      	bne.n	8009370 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	4413      	add	r3, r2
 8009306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	0151      	lsls	r1, r2, #5
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	440a      	add	r2, r1
 8009314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	e027      	b.n	8009370 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	0151      	lsls	r1, r2, #5
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	440a      	add	r2, r1
 8009336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800933a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800933e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	78db      	ldrb	r3, [r3, #3]
 8009344:	2b03      	cmp	r3, #3
 8009346:	d003      	beq.n	8009350 <USB_EPClearStall+0x9e>
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	78db      	ldrb	r3, [r3, #3]
 800934c:	2b02      	cmp	r3, #2
 800934e:	d10f      	bne.n	8009370 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	0151      	lsls	r1, r2, #5
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	440a      	add	r2, r1
 8009366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800936a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800936e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800937e:	b480      	push	{r7}
 8009380:	b085      	sub	sp, #20
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	460b      	mov	r3, r1
 8009388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800939c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80093a0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	78fb      	ldrb	r3, [r7, #3]
 80093ac:	011b      	lsls	r3, r3, #4
 80093ae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80093b2:	68f9      	ldr	r1, [r7, #12]
 80093b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093b8:	4313      	orrs	r3, r2
 80093ba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093e4:	f023 0303 	bic.w	r3, r3, #3
 80093e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093f8:	f023 0302 	bic.w	r3, r3, #2
 80093fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009426:	f023 0303 	bic.w	r3, r3, #3
 800942a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800943a:	f043 0302 	orr.w	r3, r3, #2
 800943e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800944e:	b480      	push	{r7}
 8009450:	b085      	sub	sp, #20
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	695b      	ldr	r3, [r3, #20]
 800945a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	4013      	ands	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009466:	68fb      	ldr	r3, [r7, #12]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	4013      	ands	r3, r2
 8009496:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	0c1b      	lsrs	r3, r3, #16
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	4013      	ands	r3, r2
 80094ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	b29b      	uxth	r3, r3
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009502:	695b      	ldr	r3, [r3, #20]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	4013      	ands	r3, r2
 8009508:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800950a:	68bb      	ldr	r3, [r7, #8]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800953c:	78fb      	ldrb	r3, [r7, #3]
 800953e:	f003 030f 	and.w	r3, r3, #15
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	fa22 f303 	lsr.w	r3, r2, r3
 8009548:	01db      	lsls	r3, r3, #7
 800954a:	b2db      	uxtb	r3, r3
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	4313      	orrs	r3, r2
 8009550:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	4413      	add	r3, r2
 800955a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4013      	ands	r3, r2
 8009564:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009566:	68bb      	ldr	r3, [r7, #8]
}
 8009568:	4618      	mov	r0, r3
 800956a:	371c      	adds	r7, #28
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	695b      	ldr	r3, [r3, #20]
 8009580:	f003 0301 	and.w	r3, r3, #1
}
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80095ae:	f023 0307 	bic.w	r3, r3, #7
 80095b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
	...

080095d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	460b      	mov	r3, r1
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	333c      	adds	r3, #60	; 0x3c
 80095ee:	3304      	adds	r3, #4
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	4a26      	ldr	r2, [pc, #152]	; (8009690 <USB_EP0_OutStart+0xb8>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d90a      	bls.n	8009612 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800960c:	d101      	bne.n	8009612 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	e037      	b.n	8009682 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009618:	461a      	mov	r2, r3
 800961a:	2300      	movs	r3, #0
 800961c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800962c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009630:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009640:	f043 0318 	orr.w	r3, r3, #24
 8009644:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009654:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009658:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800965a:	7afb      	ldrb	r3, [r7, #11]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d10f      	bne.n	8009680 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009666:	461a      	mov	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800967a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800967e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	371c      	adds	r7, #28
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	4f54300a 	.word	0x4f54300a

08009694 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800969c:	2300      	movs	r3, #0
 800969e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	3301      	adds	r3, #1
 80096a4:	60fb      	str	r3, [r7, #12]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4a13      	ldr	r2, [pc, #76]	; (80096f8 <USB_CoreReset+0x64>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d901      	bls.n	80096b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80096ae:	2303      	movs	r3, #3
 80096b0:	e01b      	b.n	80096ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	daf2      	bge.n	80096a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	f043 0201 	orr.w	r2, r3, #1
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3301      	adds	r3, #1
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4a09      	ldr	r2, [pc, #36]	; (80096f8 <USB_CoreReset+0x64>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d901      	bls.n	80096dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	e006      	b.n	80096ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	f003 0301 	and.w	r3, r3, #1
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d0f0      	beq.n	80096ca <USB_CoreReset+0x36>

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	00030d40 	.word	0x00030d40

080096fc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80096fc:	b480      	push	{r7}
 80096fe:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8009700:	bf00      	nop
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
	...

0800970c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af04      	add	r7, sp, #16
 8009712:	4603      	mov	r3, r0
 8009714:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8009716:	f04f 33ff 	mov.w	r3, #4294967295
 800971a:	9302      	str	r3, [sp, #8]
 800971c:	2301      	movs	r3, #1
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	1dfb      	adds	r3, r7, #7
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	2301      	movs	r3, #1
 8009726:	2200      	movs	r2, #0
 8009728:	2178      	movs	r1, #120	; 0x78
 800972a:	4803      	ldr	r0, [pc, #12]	; (8009738 <ssd1306_WriteCommand+0x2c>)
 800972c:	f7fa fb52 	bl	8003dd4 <HAL_I2C_Mem_Write>
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	200003dc 	.word	0x200003dc

0800973c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af04      	add	r7, sp, #16
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	b29b      	uxth	r3, r3
 800974a:	f04f 32ff 	mov.w	r2, #4294967295
 800974e:	9202      	str	r2, [sp, #8]
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	2301      	movs	r3, #1
 8009758:	2240      	movs	r2, #64	; 0x40
 800975a:	2178      	movs	r1, #120	; 0x78
 800975c:	4803      	ldr	r0, [pc, #12]	; (800976c <ssd1306_WriteData+0x30>)
 800975e:	f7fa fb39 	bl	8003dd4 <HAL_I2C_Mem_Write>
}
 8009762:	bf00      	nop
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	200003dc 	.word	0x200003dc

08009770 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8009770:	b580      	push	{r7, lr}
 8009772:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8009774:	f7ff ffc2 	bl	80096fc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8009778:	2064      	movs	r0, #100	; 0x64
 800977a:	f7f9 fc33 	bl	8002fe4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800977e:	2000      	movs	r0, #0
 8009780:	f000 f9e6 	bl	8009b50 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8009784:	2020      	movs	r0, #32
 8009786:	f7ff ffc1 	bl	800970c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800978a:	2000      	movs	r0, #0
 800978c:	f7ff ffbe 	bl	800970c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8009790:	20b0      	movs	r0, #176	; 0xb0
 8009792:	f7ff ffbb 	bl	800970c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8009796:	20c8      	movs	r0, #200	; 0xc8
 8009798:	f7ff ffb8 	bl	800970c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800979c:	2000      	movs	r0, #0
 800979e:	f7ff ffb5 	bl	800970c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80097a2:	2010      	movs	r0, #16
 80097a4:	f7ff ffb2 	bl	800970c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80097a8:	2040      	movs	r0, #64	; 0x40
 80097aa:	f7ff ffaf 	bl	800970c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80097ae:	20ff      	movs	r0, #255	; 0xff
 80097b0:	f000 f9ba 	bl	8009b28 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80097b4:	20a1      	movs	r0, #161	; 0xa1
 80097b6:	f7ff ffa9 	bl	800970c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80097ba:	20a6      	movs	r0, #166	; 0xa6
 80097bc:	f7ff ffa6 	bl	800970c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80097c0:	20a8      	movs	r0, #168	; 0xa8
 80097c2:	f7ff ffa3 	bl	800970c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80097c6:	203f      	movs	r0, #63	; 0x3f
 80097c8:	f7ff ffa0 	bl	800970c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80097cc:	20a4      	movs	r0, #164	; 0xa4
 80097ce:	f7ff ff9d 	bl	800970c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80097d2:	20d3      	movs	r0, #211	; 0xd3
 80097d4:	f7ff ff9a 	bl	800970c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80097d8:	2000      	movs	r0, #0
 80097da:	f7ff ff97 	bl	800970c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80097de:	20d5      	movs	r0, #213	; 0xd5
 80097e0:	f7ff ff94 	bl	800970c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80097e4:	20f0      	movs	r0, #240	; 0xf0
 80097e6:	f7ff ff91 	bl	800970c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80097ea:	20d9      	movs	r0, #217	; 0xd9
 80097ec:	f7ff ff8e 	bl	800970c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80097f0:	2022      	movs	r0, #34	; 0x22
 80097f2:	f7ff ff8b 	bl	800970c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80097f6:	20da      	movs	r0, #218	; 0xda
 80097f8:	f7ff ff88 	bl	800970c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80097fc:	2012      	movs	r0, #18
 80097fe:	f7ff ff85 	bl	800970c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8009802:	20db      	movs	r0, #219	; 0xdb
 8009804:	f7ff ff82 	bl	800970c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8009808:	2020      	movs	r0, #32
 800980a:	f7ff ff7f 	bl	800970c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800980e:	208d      	movs	r0, #141	; 0x8d
 8009810:	f7ff ff7c 	bl	800970c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8009814:	2014      	movs	r0, #20
 8009816:	f7ff ff79 	bl	800970c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800981a:	2001      	movs	r0, #1
 800981c:	f000 f998 	bl	8009b50 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black_);
 8009820:	2000      	movs	r0, #0
 8009822:	f000 f80f 	bl	8009844 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8009826:	f000 f831 	bl	800988c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800982a:	4b05      	ldr	r3, [pc, #20]	; (8009840 <ssd1306_Init+0xd0>)
 800982c:	2200      	movs	r2, #0
 800982e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8009830:	4b03      	ldr	r3, [pc, #12]	; (8009840 <ssd1306_Init+0xd0>)
 8009832:	2200      	movs	r2, #0
 8009834:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8009836:	4b02      	ldr	r3, [pc, #8]	; (8009840 <ssd1306_Init+0xd0>)
 8009838:	2201      	movs	r2, #1
 800983a:	715a      	strb	r2, [r3, #5]
}
 800983c:	bf00      	nop
 800983e:	bd80      	pop	{r7, pc}
 8009840:	20000e0c 	.word	0x20000e0c

08009844 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800984e:	2300      	movs	r3, #0
 8009850:	60fb      	str	r3, [r7, #12]
 8009852:	e00d      	b.n	8009870 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black_) ? 0x00 : 0xFF;
 8009854:	79fb      	ldrb	r3, [r7, #7]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <ssd1306_Fill+0x1a>
 800985a:	2100      	movs	r1, #0
 800985c:	e000      	b.n	8009860 <ssd1306_Fill+0x1c>
 800985e:	21ff      	movs	r1, #255	; 0xff
 8009860:	4a09      	ldr	r2, [pc, #36]	; (8009888 <ssd1306_Fill+0x44>)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	4413      	add	r3, r2
 8009866:	460a      	mov	r2, r1
 8009868:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3301      	adds	r3, #1
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009876:	d3ed      	bcc.n	8009854 <ssd1306_Fill+0x10>
    }
}
 8009878:	bf00      	nop
 800987a:	bf00      	nop
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	20000a0c 	.word	0x20000a0c

0800988c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8009892:	2300      	movs	r3, #0
 8009894:	71fb      	strb	r3, [r7, #7]
 8009896:	e016      	b.n	80098c6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	3b50      	subs	r3, #80	; 0x50
 800989c:	b2db      	uxtb	r3, r3
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff ff34 	bl	800970c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80098a4:	2000      	movs	r0, #0
 80098a6:	f7ff ff31 	bl	800970c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80098aa:	2010      	movs	r0, #16
 80098ac:	f7ff ff2e 	bl	800970c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80098b0:	79fb      	ldrb	r3, [r7, #7]
 80098b2:	01db      	lsls	r3, r3, #7
 80098b4:	4a08      	ldr	r2, [pc, #32]	; (80098d8 <ssd1306_UpdateScreen+0x4c>)
 80098b6:	4413      	add	r3, r2
 80098b8:	2180      	movs	r1, #128	; 0x80
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7ff ff3e 	bl	800973c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80098c0:	79fb      	ldrb	r3, [r7, #7]
 80098c2:	3301      	adds	r3, #1
 80098c4:	71fb      	strb	r3, [r7, #7]
 80098c6:	79fb      	ldrb	r3, [r7, #7]
 80098c8:	2b07      	cmp	r3, #7
 80098ca:	d9e5      	bls.n	8009898 <ssd1306_UpdateScreen+0xc>
    }
}
 80098cc:	bf00      	nop
 80098ce:	bf00      	nop
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20000a0c 	.word	0x20000a0c

080098dc <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	4603      	mov	r3, r0
 80098e4:	71fb      	strb	r3, [r7, #7]
 80098e6:	460b      	mov	r3, r1
 80098e8:	71bb      	strb	r3, [r7, #6]
 80098ea:	4613      	mov	r3, r2
 80098ec:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80098ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	db48      	blt.n	8009988 <ssd1306_DrawPixel+0xac>
 80098f6:	79bb      	ldrb	r3, [r7, #6]
 80098f8:	2b3f      	cmp	r3, #63	; 0x3f
 80098fa:	d845      	bhi.n	8009988 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80098fc:	4b25      	ldr	r3, [pc, #148]	; (8009994 <ssd1306_DrawPixel+0xb8>)
 80098fe:	791b      	ldrb	r3, [r3, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d006      	beq.n	8009912 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8009904:	797b      	ldrb	r3, [r7, #5]
 8009906:	2b00      	cmp	r3, #0
 8009908:	bf0c      	ite	eq
 800990a:	2301      	moveq	r3, #1
 800990c:	2300      	movne	r3, #0
 800990e:	b2db      	uxtb	r3, r3
 8009910:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White_) {
 8009912:	797b      	ldrb	r3, [r7, #5]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d11a      	bne.n	800994e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8009918:	79fa      	ldrb	r2, [r7, #7]
 800991a:	79bb      	ldrb	r3, [r7, #6]
 800991c:	08db      	lsrs	r3, r3, #3
 800991e:	b2d8      	uxtb	r0, r3
 8009920:	4603      	mov	r3, r0
 8009922:	01db      	lsls	r3, r3, #7
 8009924:	4413      	add	r3, r2
 8009926:	4a1c      	ldr	r2, [pc, #112]	; (8009998 <ssd1306_DrawPixel+0xbc>)
 8009928:	5cd3      	ldrb	r3, [r2, r3]
 800992a:	b25a      	sxtb	r2, r3
 800992c:	79bb      	ldrb	r3, [r7, #6]
 800992e:	f003 0307 	and.w	r3, r3, #7
 8009932:	2101      	movs	r1, #1
 8009934:	fa01 f303 	lsl.w	r3, r1, r3
 8009938:	b25b      	sxtb	r3, r3
 800993a:	4313      	orrs	r3, r2
 800993c:	b259      	sxtb	r1, r3
 800993e:	79fa      	ldrb	r2, [r7, #7]
 8009940:	4603      	mov	r3, r0
 8009942:	01db      	lsls	r3, r3, #7
 8009944:	4413      	add	r3, r2
 8009946:	b2c9      	uxtb	r1, r1
 8009948:	4a13      	ldr	r2, [pc, #76]	; (8009998 <ssd1306_DrawPixel+0xbc>)
 800994a:	54d1      	strb	r1, [r2, r3]
 800994c:	e01d      	b.n	800998a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800994e:	79fa      	ldrb	r2, [r7, #7]
 8009950:	79bb      	ldrb	r3, [r7, #6]
 8009952:	08db      	lsrs	r3, r3, #3
 8009954:	b2d8      	uxtb	r0, r3
 8009956:	4603      	mov	r3, r0
 8009958:	01db      	lsls	r3, r3, #7
 800995a:	4413      	add	r3, r2
 800995c:	4a0e      	ldr	r2, [pc, #56]	; (8009998 <ssd1306_DrawPixel+0xbc>)
 800995e:	5cd3      	ldrb	r3, [r2, r3]
 8009960:	b25a      	sxtb	r2, r3
 8009962:	79bb      	ldrb	r3, [r7, #6]
 8009964:	f003 0307 	and.w	r3, r3, #7
 8009968:	2101      	movs	r1, #1
 800996a:	fa01 f303 	lsl.w	r3, r1, r3
 800996e:	b25b      	sxtb	r3, r3
 8009970:	43db      	mvns	r3, r3
 8009972:	b25b      	sxtb	r3, r3
 8009974:	4013      	ands	r3, r2
 8009976:	b259      	sxtb	r1, r3
 8009978:	79fa      	ldrb	r2, [r7, #7]
 800997a:	4603      	mov	r3, r0
 800997c:	01db      	lsls	r3, r3, #7
 800997e:	4413      	add	r3, r2
 8009980:	b2c9      	uxtb	r1, r1
 8009982:	4a05      	ldr	r2, [pc, #20]	; (8009998 <ssd1306_DrawPixel+0xbc>)
 8009984:	54d1      	strb	r1, [r2, r3]
 8009986:	e000      	b.n	800998a <ssd1306_DrawPixel+0xae>
        return;
 8009988:	bf00      	nop
    }
}
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	20000e0c 	.word	0x20000e0c
 8009998:	20000a0c 	.word	0x20000a0c

0800999c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black_ or White_
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800999c:	b590      	push	{r4, r7, lr}
 800999e:	b089      	sub	sp, #36	; 0x24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4604      	mov	r4, r0
 80099a4:	1d38      	adds	r0, r7, #4
 80099a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80099aa:	461a      	mov	r2, r3
 80099ac:	4623      	mov	r3, r4
 80099ae:	73fb      	strb	r3, [r7, #15]
 80099b0:	4613      	mov	r3, r2
 80099b2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	2b1f      	cmp	r3, #31
 80099b8:	d902      	bls.n	80099c0 <ssd1306_WriteChar+0x24>
 80099ba:	7bfb      	ldrb	r3, [r7, #15]
 80099bc:	2b7e      	cmp	r3, #126	; 0x7e
 80099be:	d901      	bls.n	80099c4 <ssd1306_WriteChar+0x28>
        return 0;
 80099c0:	2300      	movs	r3, #0
 80099c2:	e06d      	b.n	8009aa0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80099c4:	4b38      	ldr	r3, [pc, #224]	; (8009aa8 <ssd1306_WriteChar+0x10c>)
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	461a      	mov	r2, r3
 80099ca:	793b      	ldrb	r3, [r7, #4]
 80099cc:	4413      	add	r3, r2
 80099ce:	2b80      	cmp	r3, #128	; 0x80
 80099d0:	dc06      	bgt.n	80099e0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80099d2:	4b35      	ldr	r3, [pc, #212]	; (8009aa8 <ssd1306_WriteChar+0x10c>)
 80099d4:	885b      	ldrh	r3, [r3, #2]
 80099d6:	461a      	mov	r2, r3
 80099d8:	797b      	ldrb	r3, [r7, #5]
 80099da:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80099dc:	2b40      	cmp	r3, #64	; 0x40
 80099de:	dd01      	ble.n	80099e4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	e05d      	b.n	8009aa0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80099e4:	2300      	movs	r3, #0
 80099e6:	61fb      	str	r3, [r7, #28]
 80099e8:	e04c      	b.n	8009a84 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	3b20      	subs	r3, #32
 80099f0:	7979      	ldrb	r1, [r7, #5]
 80099f2:	fb01 f303 	mul.w	r3, r1, r3
 80099f6:	4619      	mov	r1, r3
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	440b      	add	r3, r1
 80099fc:	005b      	lsls	r3, r3, #1
 80099fe:	4413      	add	r3, r2
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8009a04:	2300      	movs	r3, #0
 8009a06:	61bb      	str	r3, [r7, #24]
 8009a08:	e034      	b.n	8009a74 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d012      	beq.n	8009a40 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8009a1a:	4b23      	ldr	r3, [pc, #140]	; (8009aa8 <ssd1306_WriteChar+0x10c>)
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	4413      	add	r3, r2
 8009a26:	b2d8      	uxtb	r0, r3
 8009a28:	4b1f      	ldr	r3, [pc, #124]	; (8009aa8 <ssd1306_WriteChar+0x10c>)
 8009a2a:	885b      	ldrh	r3, [r3, #2]
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	4413      	add	r3, r2
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	7bba      	ldrb	r2, [r7, #14]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	f7ff ff4f 	bl	80098dc <ssd1306_DrawPixel>
 8009a3e:	e016      	b.n	8009a6e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8009a40:	4b19      	ldr	r3, [pc, #100]	; (8009aa8 <ssd1306_WriteChar+0x10c>)
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	4413      	add	r3, r2
 8009a4c:	b2d8      	uxtb	r0, r3
 8009a4e:	4b16      	ldr	r3, [pc, #88]	; (8009aa8 <ssd1306_WriteChar+0x10c>)
 8009a50:	885b      	ldrh	r3, [r3, #2]
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	4413      	add	r3, r2
 8009a5a:	b2d9      	uxtb	r1, r3
 8009a5c:	7bbb      	ldrb	r3, [r7, #14]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	bf0c      	ite	eq
 8009a62:	2301      	moveq	r3, #1
 8009a64:	2300      	movne	r3, #0
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	461a      	mov	r2, r3
 8009a6a:	f7ff ff37 	bl	80098dc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	3301      	adds	r3, #1
 8009a72:	61bb      	str	r3, [r7, #24]
 8009a74:	793b      	ldrb	r3, [r7, #4]
 8009a76:	461a      	mov	r2, r3
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d3c5      	bcc.n	8009a0a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	3301      	adds	r3, #1
 8009a82:	61fb      	str	r3, [r7, #28]
 8009a84:	797b      	ldrb	r3, [r7, #5]
 8009a86:	461a      	mov	r2, r3
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d3ad      	bcc.n	80099ea <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8009a8e:	4b06      	ldr	r3, [pc, #24]	; (8009aa8 <ssd1306_WriteChar+0x10c>)
 8009a90:	881a      	ldrh	r2, [r3, #0]
 8009a92:	793b      	ldrb	r3, [r7, #4]
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	4413      	add	r3, r2
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	4b03      	ldr	r3, [pc, #12]	; (8009aa8 <ssd1306_WriteChar+0x10c>)
 8009a9c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3724      	adds	r7, #36	; 0x24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd90      	pop	{r4, r7, pc}
 8009aa8:	20000e0c 	.word	0x20000e0c

08009aac <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	1d38      	adds	r0, r7, #4
 8009ab6:	e880 0006 	stmia.w	r0, {r1, r2}
 8009aba:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8009abc:	e012      	b.n	8009ae4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	7818      	ldrb	r0, [r3, #0]
 8009ac2:	78fb      	ldrb	r3, [r7, #3]
 8009ac4:	1d3a      	adds	r2, r7, #4
 8009ac6:	ca06      	ldmia	r2, {r1, r2}
 8009ac8:	f7ff ff68 	bl	800999c <ssd1306_WriteChar>
 8009acc:	4603      	mov	r3, r0
 8009ace:	461a      	mov	r2, r3
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d002      	beq.n	8009ade <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	e008      	b.n	8009af0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e8      	bne.n	8009abe <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	781b      	ldrb	r3, [r3, #0]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	4603      	mov	r3, r0
 8009b00:	460a      	mov	r2, r1
 8009b02:	71fb      	strb	r3, [r7, #7]
 8009b04:	4613      	mov	r3, r2
 8009b06:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8009b08:	79fb      	ldrb	r3, [r7, #7]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	4b05      	ldr	r3, [pc, #20]	; (8009b24 <ssd1306_SetCursor+0x2c>)
 8009b0e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8009b10:	79bb      	ldrb	r3, [r7, #6]
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	4b03      	ldr	r3, [pc, #12]	; (8009b24 <ssd1306_SetCursor+0x2c>)
 8009b16:	805a      	strh	r2, [r3, #2]
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	20000e0c 	.word	0x20000e0c

08009b28 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8009b32:	2381      	movs	r3, #129	; 0x81
 8009b34:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8009b36:	7bfb      	ldrb	r3, [r7, #15]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7ff fde7 	bl	800970c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7ff fde3 	bl	800970c <ssd1306_WriteCommand>
}
 8009b46:	bf00      	nop
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
	...

08009b50 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d005      	beq.n	8009b6c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8009b60:	23af      	movs	r3, #175	; 0xaf
 8009b62:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8009b64:	4b08      	ldr	r3, [pc, #32]	; (8009b88 <ssd1306_SetDisplayOn+0x38>)
 8009b66:	2201      	movs	r2, #1
 8009b68:	719a      	strb	r2, [r3, #6]
 8009b6a:	e004      	b.n	8009b76 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8009b6c:	23ae      	movs	r3, #174	; 0xae
 8009b6e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8009b70:	4b05      	ldr	r3, [pc, #20]	; (8009b88 <ssd1306_SetDisplayOn+0x38>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7ff fdc7 	bl	800970c <ssd1306_WriteCommand>
}
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20000e0c 	.word	0x20000e0c

08009b8c <USBD_HID_Init>:
  * @retval status
  */
/* We have to add the dataout/ep_out function here to get USB pipe data out
 * This is only used with XBCD or THPS 2, every other XBOX game sends rumble through control requests */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009b98:	2010      	movs	r0, #16
 8009b9a:	f004 fdfb 	bl	800e794 <USBD_static_malloc>
 8009b9e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d105      	bne.n	8009bb2 <USBD_HID_Init+0x26>
  {
	  //usb_failed = 1;
    pdev->pClassData = NULL;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009bae:	2302      	movs	r3, #2
 8009bb0:	e033      	b.n	8009c1a <USBD_HID_Init+0x8e>
  }

  pdev->pClassData = (void *)hhid;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	7c1b      	ldrb	r3, [r3, #16]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d107      	bne.n	8009bd2 <USBD_HID_Init+0x46>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2207      	movs	r2, #7
 8009bc6:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2207      	movs	r2, #7
 8009bcc:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
 8009bd0:	e006      	b.n	8009be0 <USBD_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2204      	movs	r2, #4
 8009bd6:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2204      	movs	r2, #4
 8009bdc:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009be0:	2320      	movs	r3, #32
 8009be2:	2203      	movs	r2, #3
 8009be4:	2181      	movs	r1, #129	; 0x81
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f004 fc75 	bl	800e4d6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8009bf2:	2306      	movs	r3, #6
 8009bf4:	2203      	movs	r2, #3
 8009bf6:	2102      	movs	r1, #2
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f004 fc6c 	bl	800e4d6 <USBD_LL_OpenEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  (void)USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR,(uint8_t*)rx_buf, HID_EPOUT_SIZE);
 8009c06:	2306      	movs	r3, #6
 8009c08:	4a06      	ldr	r2, [pc, #24]	; (8009c24 <USBD_HID_Init+0x98>)
 8009c0a:	2102      	movs	r1, #2
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f004 fd51 	bl	800e6b4 <USBD_LL_PrepareReceive>

  hhid->state = HID_IDLE;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	731a      	strb	r2, [r3, #12]

  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();

  /* Prepare Out endpoint to receive 1st packet */

  return (uint8_t)USBD_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	200003d4 	.word	0x200003d4

08009c28 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8009c34:	2181      	movs	r1, #129	; 0x81
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f004 fc73 	bl	800e522 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, HID_EPOUT_ADDR);
 8009c48:	2102      	movs	r1, #2
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f004 fc69 	bl	800e522 <USBD_LL_CloseEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d009      	beq.n	8009c7e <USBD_HID_DeInit+0x56>
  {
    (void)USBD_free(pdev->pClassData);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c70:	4618      	mov	r0, r3
 8009c72:	f004 fd9d 	bl	800e7b0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c98:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d104      	bne.n	8009cb2 <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 8009ca8:	4b9f      	ldr	r3, [pc, #636]	; (8009f28 <USBD_HID_Setup+0x2a0>)
 8009caa:	2201      	movs	r2, #1
 8009cac:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e136      	b.n	8009f20 <USBD_HID_Setup+0x298>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cba:	2b40      	cmp	r3, #64	; 0x40
 8009cbc:	f000 80e1 	beq.w	8009e82 <USBD_HID_Setup+0x1fa>
 8009cc0:	2b40      	cmp	r3, #64	; 0x40
 8009cc2:	f200 8124 	bhi.w	8009f0e <USBD_HID_Setup+0x286>
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d058      	beq.n	8009d7c <USBD_HID_Setup+0xf4>
 8009cca:	2b20      	cmp	r3, #32
 8009ccc:	f040 811f 	bne.w	8009f0e <USBD_HID_Setup+0x286>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	785b      	ldrb	r3, [r3, #1]
 8009cd4:	3b02      	subs	r3, #2
 8009cd6:	2b09      	cmp	r3, #9
 8009cd8:	d848      	bhi.n	8009d6c <USBD_HID_Setup+0xe4>
 8009cda:	a201      	add	r2, pc, #4	; (adr r2, 8009ce0 <USBD_HID_Setup+0x58>)
 8009cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce0:	08009d37 	.word	0x08009d37
 8009ce4:	08009d17 	.word	0x08009d17
 8009ce8:	08009d6d 	.word	0x08009d6d
 8009cec:	08009d6d 	.word	0x08009d6d
 8009cf0:	08009d6d 	.word	0x08009d6d
 8009cf4:	08009d6d 	.word	0x08009d6d
 8009cf8:	08009d6d 	.word	0x08009d6d
 8009cfc:	08009d47 	.word	0x08009d47
 8009d00:	08009d25 	.word	0x08009d25
 8009d04:	08009d09 	.word	0x08009d09
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	885b      	ldrh	r3, [r3, #2]
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	461a      	mov	r2, r3
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	601a      	str	r2, [r3, #0]
          break;
 8009d14:	e031      	b.n	8009d7a <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f001 fada 	bl	800b2d6 <USBD_CtlSendData>
          break;
 8009d22:	e02a      	b.n	8009d7a <USBD_HID_Setup+0xf2>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	885b      	ldrh	r3, [r3, #2]
 8009d28:	0a1b      	lsrs	r3, r3, #8
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	461a      	mov	r2, r3
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	605a      	str	r2, [r3, #4]
          break;
 8009d34:	e021      	b.n	8009d7a <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	3304      	adds	r3, #4
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f001 fac9 	bl	800b2d6 <USBD_CtlSendData>
          break;
 8009d44:	e019      	b.n	8009d7a <USBD_HID_Setup+0xf2>

        /*We need to get Control request data for the rumble data from the XBOX, we have to add this ourselves */
        case HID_REQ_SET_REPORT:
          rumble_flag = 1;
 8009d46:	4b79      	ldr	r3, [pc, #484]	; (8009f2c <USBD_HID_Setup+0x2a4>)
 8009d48:	2201      	movs	r2, #1
 8009d4a:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_ID = (uint8_t)(req->wValue);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	885b      	ldrh	r3, [r3, #2]
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	4b77      	ldr	r3, [pc, #476]	; (8009f30 <USBD_HID_Setup+0x2a8>)
 8009d54:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_LENGTH = (uint8_t)(req->wLength);
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	88db      	ldrh	r3, [r3, #6]
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	4b75      	ldr	r3, [pc, #468]	; (8009f34 <USBD_HID_Setup+0x2ac>)
 8009d5e:	701a      	strb	r2, [r3, #0]
          USBD_CtlPrepareRx (pdev, ctl_report_buf, HID_EPOUT_SIZE);
 8009d60:	2206      	movs	r2, #6
 8009d62:	4975      	ldr	r1, [pc, #468]	; (8009f38 <USBD_HID_Setup+0x2b0>)
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f001 fae2 	bl	800b32e <USBD_CtlPrepareRx>
          break;
 8009d6a:	e006      	b.n	8009d7a <USBD_HID_Setup+0xf2>
//                            (uint8_t *)&Report_buf,
//                            8);
//          break;

        default:
          USBD_CtlError(pdev, req);
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f001 fa40 	bl	800b1f4 <USBD_CtlError>
          ret = USBD_FAIL;
 8009d74:	2303      	movs	r3, #3
 8009d76:	77fb      	strb	r3, [r7, #31]
          break;
 8009d78:	bf00      	nop
      }
      break;
 8009d7a:	e0d0      	b.n	8009f1e <USBD_HID_Setup+0x296>
    case USB_REQ_TYPE_STANDARD:

      switch (req->bRequest)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	785b      	ldrb	r3, [r3, #1]
 8009d80:	2b0b      	cmp	r3, #11
 8009d82:	d875      	bhi.n	8009e70 <USBD_HID_Setup+0x1e8>
 8009d84:	a201      	add	r2, pc, #4	; (adr r2, 8009d8c <USBD_HID_Setup+0x104>)
 8009d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8a:	bf00      	nop
 8009d8c:	08009dbd 	.word	0x08009dbd
 8009d90:	08009e7f 	.word	0x08009e7f
 8009d94:	08009e71 	.word	0x08009e71
 8009d98:	08009e71 	.word	0x08009e71
 8009d9c:	08009e71 	.word	0x08009e71
 8009da0:	08009e71 	.word	0x08009e71
 8009da4:	08009de7 	.word	0x08009de7
 8009da8:	08009e71 	.word	0x08009e71
 8009dac:	08009e71 	.word	0x08009e71
 8009db0:	08009e71 	.word	0x08009e71
 8009db4:	08009e1f 	.word	0x08009e1f
 8009db8:	08009e49 	.word	0x08009e49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d107      	bne.n	8009dd8 <USBD_HID_Setup+0x150>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009dc8:	f107 030e 	add.w	r3, r7, #14
 8009dcc:	2202      	movs	r2, #2
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f001 fa80 	bl	800b2d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009dd6:	e053      	b.n	8009e80 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f001 fa0a 	bl	800b1f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009de0:	2303      	movs	r3, #3
 8009de2:	77fb      	strb	r3, [r7, #31]
          break;
 8009de4:	e04c      	b.n	8009e80 <USBD_HID_Setup+0x1f8>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	885b      	ldrh	r3, [r3, #2]
 8009dea:	0a1b      	lsrs	r3, r3, #8
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	2b21      	cmp	r3, #33	; 0x21
 8009df0:	d10e      	bne.n	8009e10 <USBD_HID_Setup+0x188>
          {
            pbuf = USBD_HID_Desc;
 8009df2:	4b52      	ldr	r3, [pc, #328]	; (8009f3c <USBD_HID_Setup+0x2b4>)
 8009df4:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	88db      	ldrh	r3, [r3, #6]
 8009dfa:	2b12      	cmp	r3, #18
 8009dfc:	bf28      	it	cs
 8009dfe:	2312      	movcs	r3, #18
 8009e00:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e02:	8afb      	ldrh	r3, [r7, #22]
 8009e04:	461a      	mov	r2, r3
 8009e06:	6939      	ldr	r1, [r7, #16]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f001 fa64 	bl	800b2d6 <USBD_CtlSendData>
          break;
 8009e0e:	e037      	b.n	8009e80 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f001 f9ee 	bl	800b1f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	77fb      	strb	r3, [r7, #31]
            break;
 8009e1c:	e030      	b.n	8009e80 <USBD_HID_Setup+0x1f8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b03      	cmp	r3, #3
 8009e28:	d107      	bne.n	8009e3a <USBD_HID_Setup+0x1b2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	2201      	movs	r2, #1
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f001 fa4f 	bl	800b2d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e38:	e022      	b.n	8009e80 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 f9d9 	bl	800b1f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e42:	2303      	movs	r3, #3
 8009e44:	77fb      	strb	r3, [r7, #31]
          break;
 8009e46:	e01b      	b.n	8009e80 <USBD_HID_Setup+0x1f8>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d106      	bne.n	8009e62 <USBD_HID_Setup+0x1da>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	885b      	ldrh	r3, [r3, #2]
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e60:	e00e      	b.n	8009e80 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f001 f9c5 	bl	800b1f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	77fb      	strb	r3, [r7, #31]
          break;
 8009e6e:	e007      	b.n	8009e80 <USBD_HID_Setup+0x1f8>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f001 f9be 	bl	800b1f4 <USBD_CtlError>
          ret = USBD_FAIL;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	77fb      	strb	r3, [r7, #31]
          break;
 8009e7c:	e000      	b.n	8009e80 <USBD_HID_Setup+0x1f8>
          break;
 8009e7e:	bf00      	nop
      }
      break;
 8009e80:	e04d      	b.n	8009f1e <USBD_HID_Setup+0x296>
    /*This is for the og XBOX, this is the custom vendor request
     * We intercept these and return either the controller's capabilities
     * This is equivalent to the USB HID Descriptor which would normally be used for most devices */
    case (0xC1 & USB_REQ_TYPE_MASK):
    	 hid_setup_ran++;
 8009e82:	4b2f      	ldr	r3, [pc, #188]	; (8009f40 <USBD_HID_Setup+0x2b8>)
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	3301      	adds	r3, #1
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	4b2d      	ldr	r3, [pc, #180]	; (8009f40 <USBD_HID_Setup+0x2b8>)
 8009e8c:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	785b      	ldrb	r3, [r3, #1]
 8009e92:	2b06      	cmp	r3, #6
 8009e94:	d10f      	bne.n	8009eb6 <USBD_HID_Setup+0x22e>
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	885b      	ldrh	r3, [r3, #2]
 8009e9a:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8009e9e:	d10a      	bne.n	8009eb6 <USBD_HID_Setup+0x22e>
    		len = 16;
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 8009ea4:	4b25      	ldr	r3, [pc, #148]	; (8009f3c <USBD_HID_Setup+0x2b4>)
 8009ea6:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8009ea8:	8afb      	ldrh	r3, [r7, #22]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	6939      	ldr	r1, [r7, #16]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f001 fa11 	bl	800b2d6 <USBD_CtlSendData>
 8009eb4:	e02a      	b.n	8009f0c <USBD_HID_Setup+0x284>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	785b      	ldrb	r3, [r3, #1]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d10f      	bne.n	8009ede <USBD_HID_Setup+0x256>
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	885b      	ldrh	r3, [r3, #2]
 8009ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ec6:	d10a      	bne.n	8009ede <USBD_HID_Setup+0x256>
    		len = 20;
 8009ec8:	2314      	movs	r3, #20
 8009eca:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8009ecc:	4b1d      	ldr	r3, [pc, #116]	; (8009f44 <USBD_HID_Setup+0x2bc>)
 8009ece:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8009ed0:	8afb      	ldrh	r3, [r7, #22]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	6939      	ldr	r1, [r7, #16]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f001 f9fd 	bl	800b2d6 <USBD_CtlSendData>
 8009edc:	e016      	b.n	8009f0c <USBD_HID_Setup+0x284>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	785b      	ldrb	r3, [r3, #1]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d11a      	bne.n	8009f1c <USBD_HID_Setup+0x294>
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	885b      	ldrh	r3, [r3, #2]
 8009eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eee:	d115      	bne.n	8009f1c <USBD_HID_Setup+0x294>
    		rumble_brequest_sent = 1;
 8009ef0:	4b15      	ldr	r3, [pc, #84]	; (8009f48 <USBD_HID_Setup+0x2c0>)
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	701a      	strb	r2, [r3, #0]
    		len = 6;
 8009ef6:	2306      	movs	r3, #6
 8009ef8:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8009efa:	4b14      	ldr	r3, [pc, #80]	; (8009f4c <USBD_HID_Setup+0x2c4>)
 8009efc:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8009efe:	8afb      	ldrh	r3, [r7, #22]
 8009f00:	461a      	mov	r2, r3
 8009f02:	6939      	ldr	r1, [r7, #16]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f001 f9e6 	bl	800b2d6 <USBD_CtlSendData>
    	}
    break;
 8009f0a:	e007      	b.n	8009f1c <USBD_HID_Setup+0x294>
 8009f0c:	e006      	b.n	8009f1c <USBD_HID_Setup+0x294>

    default:
      USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f001 f96f 	bl	800b1f4 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f16:	2303      	movs	r3, #3
 8009f18:	77fb      	strb	r3, [r7, #31]
      break;
 8009f1a:	e000      	b.n	8009f1e <USBD_HID_Setup+0x296>
    break;
 8009f1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3720      	adds	r7, #32
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	20000e16 	.word	0x20000e16
 8009f2c:	20000e22 	.word	0x20000e22
 8009f30:	20000e18 	.word	0x20000e18
 8009f34:	20000e19 	.word	0x20000e19
 8009f38:	20000e1c 	.word	0x20000e1c
 8009f3c:	20000090 	.word	0x20000090
 8009f40:	20000e14 	.word	0x20000e14
 8009f44:	200000ac 	.word	0x200000ac
 8009f48:	20000e17 	.word	0x20000e17
 8009f4c:	200000c0 	.word	0x200000c0

08009f50 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f64:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d101      	bne.n	8009f70 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e013      	b.n	8009f98 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d10c      	bne.n	8009f96 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	7b1b      	ldrb	r3, [r3, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d108      	bne.n	8009f96 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2201      	movs	r2, #1
 8009f88:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8009f8a:	88fb      	ldrh	r3, [r7, #6]
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	2181      	movs	r1, #129	; 0x81
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f004 fb6e 	bl	800e672 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2220      	movs	r2, #32
 8009fac:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8009fae:	4b03      	ldr	r3, [pc, #12]	; (8009fbc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	20000050 	.word	0x20000050

08009fc0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8009fc8:	bf00      	nop
 8009fca:	4618      	mov	r0, r3
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
	...

08009fd8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8009fe6:	4b03      	ldr	r3, [pc, #12]	; (8009ff4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	20000070 	.word	0x20000070

08009ff8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a00a:	2200      	movs	r2, #0
 800a00c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <USBD_HID_DataOut>:
/* DataOut will only run for THPS 2 or activating rumble in XBCD on a PC */
static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	70fb      	strb	r3, [r7, #3]
	dataout_ran++;
 800a028:	4b08      	ldr	r3, [pc, #32]	; (800a04c <USBD_HID_DataOut+0x30>)
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	3301      	adds	r3, #1
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	4b06      	ldr	r3, [pc, #24]	; (800a04c <USBD_HID_DataOut+0x30>)
 800a032:	701a      	strb	r2, [r3, #0]
	USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, (uint8_t*) (rx_buf), HID_EPOUT_SIZE);
 800a034:	2306      	movs	r3, #6
 800a036:	4a06      	ldr	r2, [pc, #24]	; (800a050 <USBD_HID_DataOut+0x34>)
 800a038:	2102      	movs	r1, #2
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f004 fb3a 	bl	800e6b4 <USBD_LL_PrepareReceive>
	return USBD_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20000e15 	.word	0x20000e15
 800a050:	200003d4 	.word	0x200003d4

0800a054 <USBD_HID_EP0_RxReady>:
  * @retval status
  */
/*This is to put the rumble data from the USB control requests into rx_buf so we can read that in main
 * This is the standard way XBOX sends rumble data, this different from a PC which would send data through USB Out Pipe */
static uint8_t USBD_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
	if (rumble_flag) {
 800a05c:	4b10      	ldr	r3, [pc, #64]	; (800a0a0 <USBD_HID_EP0_RxReady+0x4c>)
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d015      	beq.n	800a090 <USBD_HID_EP0_RxReady+0x3c>
		rumble_flag = 0;
 800a064:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <USBD_HID_EP0_RxReady+0x4c>)
 800a066:	2200      	movs	r2, #0
 800a068:	701a      	strb	r2, [r3, #0]
		if (USBD_HID_Report_LENGTH == HID_EPOUT_SIZE) {
 800a06a:	4b0e      	ldr	r3, [pc, #56]	; (800a0a4 <USBD_HID_EP0_RxReady+0x50>)
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	2b06      	cmp	r3, #6
 800a070:	d10e      	bne.n	800a090 <USBD_HID_EP0_RxReady+0x3c>
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 800a072:	2300      	movs	r3, #0
 800a074:	73fb      	strb	r3, [r7, #15]
 800a076:	e008      	b.n	800a08a <USBD_HID_EP0_RxReady+0x36>
				rx_buf[i] = ctl_report_buf[i];
 800a078:	7bfa      	ldrb	r2, [r7, #15]
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
 800a07c:	490a      	ldr	r1, [pc, #40]	; (800a0a8 <USBD_HID_EP0_RxReady+0x54>)
 800a07e:	5c89      	ldrb	r1, [r1, r2]
 800a080:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <USBD_HID_EP0_RxReady+0x58>)
 800a082:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 800a084:	7bfb      	ldrb	r3, [r7, #15]
 800a086:	3301      	adds	r3, #1
 800a088:	73fb      	strb	r3, [r7, #15]
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
 800a08c:	2b05      	cmp	r3, #5
 800a08e:	d9f3      	bls.n	800a078 <USBD_HID_EP0_RxReady+0x24>
			}
		}
	}
	return (uint8_t) USBD_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	20000e22 	.word	0x20000e22
 800a0a4:	20000e19 	.word	0x20000e19
 800a0a8:	20000e1c 	.word	0x20000e1c
 800a0ac:	200003d4 	.word	0x200003d4

0800a0b0 <USBD_HID_EP0_TxSent>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_HID_EP0_TxSent(USBD_HandleTypeDef *pdev)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
//    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
//                                                              hhid->Report_buf[1]);
//    hhid->IsReportAvailable = 0U;
//  }

  return (uint8_t)USBD_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	370c      	adds	r7, #12
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
	...

0800a0c8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	220a      	movs	r2, #10
 800a0d4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800a0d6:	4b03      	ldr	r3, [pc, #12]	; (800a0e4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	200000a0 	.word	0x200000a0

0800a0e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e01f      	b.n	800a140 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d003      	beq.n	800a126 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	79fa      	ldrb	r2, [r7, #7]
 800a132:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f004 f967 	bl	800e408 <USBD_LL_Init>
 800a13a:	4603      	mov	r3, r0
 800a13c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a13e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3718      	adds	r7, #24
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a152:	2300      	movs	r3, #0
 800a154:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e016      	b.n	800a18e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	683a      	ldr	r2, [r7, #0]
 800a164:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00b      	beq.n	800a18c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	f107 020e 	add.w	r2, r7, #14
 800a180:	4610      	mov	r0, r2
 800a182:	4798      	blx	r3
 800a184:	4602      	mov	r2, r0
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f004 f97e 	bl	800e4a0 <USBD_LL_Start>
 800a1a4:	4603      	mov	r3, r0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b083      	sub	sp, #12
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d009      	beq.n	800a1f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	78fa      	ldrb	r2, [r7, #3]
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	4798      	blx	r3
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d007      	beq.n	800a222 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	78fa      	ldrb	r2, [r7, #3]
 800a21c:	4611      	mov	r1, r2
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	4798      	blx	r3
  }

  return USBD_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 ff9e 	bl	800b180 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a252:	461a      	mov	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a260:	f003 031f 	and.w	r3, r3, #31
 800a264:	2b02      	cmp	r3, #2
 800a266:	d01a      	beq.n	800a29e <USBD_LL_SetupStage+0x72>
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d822      	bhi.n	800a2b2 <USBD_LL_SetupStage+0x86>
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d002      	beq.n	800a276 <USBD_LL_SetupStage+0x4a>
 800a270:	2b01      	cmp	r3, #1
 800a272:	d00a      	beq.n	800a28a <USBD_LL_SetupStage+0x5e>
 800a274:	e01d      	b.n	800a2b2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a27c:	4619      	mov	r1, r3
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fa62 	bl	800a748 <USBD_StdDevReq>
 800a284:	4603      	mov	r3, r0
 800a286:	73fb      	strb	r3, [r7, #15]
      break;
 800a288:	e020      	b.n	800a2cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a290:	4619      	mov	r1, r3
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fad4 	bl	800a840 <USBD_StdItfReq>
 800a298:	4603      	mov	r3, r0
 800a29a:	73fb      	strb	r3, [r7, #15]
      break;
 800a29c:	e016      	b.n	800a2cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fb13 	bl	800a8d2 <USBD_StdEPReq>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a2b0:	e00c      	b.n	800a2cc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a2b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f004 f94d 	bl	800e560 <USBD_LL_StallEP>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ca:	bf00      	nop
  }

  return ret;
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b086      	sub	sp, #24
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	60f8      	str	r0, [r7, #12]
 800a2de:	460b      	mov	r3, r1
 800a2e0:	607a      	str	r2, [r7, #4]
 800a2e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a2e4:	7afb      	ldrb	r3, [r7, #11]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d138      	bne.n	800a35c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a2f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d14a      	bne.n	800a392 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	429a      	cmp	r2, r3
 800a306:	d913      	bls.n	800a330 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	689a      	ldr	r2, [r3, #8]
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	1ad2      	subs	r2, r2, r3
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	4293      	cmp	r3, r2
 800a320:	bf28      	it	cs
 800a322:	4613      	movcs	r3, r2
 800a324:	461a      	mov	r2, r3
 800a326:	6879      	ldr	r1, [r7, #4]
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f001 f81d 	bl	800b368 <USBD_CtlContinueRx>
 800a32e:	e030      	b.n	800a392 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a336:	b2db      	uxtb	r3, r3
 800a338:	2b03      	cmp	r3, #3
 800a33a:	d10b      	bne.n	800a354 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d005      	beq.n	800a354 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f001 f818 	bl	800b38a <USBD_CtlSendStatus>
 800a35a:	e01a      	b.n	800a392 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b03      	cmp	r3, #3
 800a366:	d114      	bne.n	800a392 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00e      	beq.n	800a392 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	7afa      	ldrb	r2, [r7, #11]
 800a37e:	4611      	mov	r1, r2
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	4798      	blx	r3
 800a384:	4603      	mov	r3, r0
 800a386:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a388:	7dfb      	ldrb	r3, [r7, #23]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
 800a390:	e000      	b.n	800a394 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3718      	adds	r7, #24
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a3aa:	7afb      	ldrb	r3, [r7, #11]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d16b      	bne.n	800a488 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3314      	adds	r3, #20
 800a3b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d156      	bne.n	800a46e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	689a      	ldr	r2, [r3, #8]
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d914      	bls.n	800a3f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	689a      	ldr	r2, [r3, #8]
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	1ad2      	subs	r2, r2, r3
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	6879      	ldr	r1, [r7, #4]
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 ff92 	bl	800b30c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f004 f960 	bl	800e6b4 <USBD_LL_PrepareReceive>
 800a3f4:	e03b      	b.n	800a46e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	68da      	ldr	r2, [r3, #12]
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d11c      	bne.n	800a43c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d316      	bcc.n	800a43c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	685a      	ldr	r2, [r3, #4]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a418:	429a      	cmp	r2, r3
 800a41a:	d20f      	bcs.n	800a43c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a41c:	2200      	movs	r2, #0
 800a41e:	2100      	movs	r1, #0
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f000 ff73 	bl	800b30c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a42e:	2300      	movs	r3, #0
 800a430:	2200      	movs	r2, #0
 800a432:	2100      	movs	r1, #0
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f004 f93d 	bl	800e6b4 <USBD_LL_PrepareReceive>
 800a43a:	e018      	b.n	800a46e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b03      	cmp	r3, #3
 800a446:	d10b      	bne.n	800a460 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d005      	beq.n	800a460 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a460:	2180      	movs	r1, #128	; 0x80
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f004 f87c 	bl	800e560 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f000 ffa1 	bl	800b3b0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a474:	2b01      	cmp	r3, #1
 800a476:	d122      	bne.n	800a4be <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f7ff fe98 	bl	800a1ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a486:	e01a      	b.n	800a4be <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	2b03      	cmp	r3, #3
 800a492:	d114      	bne.n	800a4be <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00e      	beq.n	800a4be <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	7afa      	ldrb	r2, [r7, #11]
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	4798      	blx	r3
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
 800a4bc:	e000      	b.n	800a4c0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3718      	adds	r7, #24
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e02f      	b.n	800a55c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00f      	beq.n	800a526 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d009      	beq.n	800a526 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	6852      	ldr	r2, [r2, #4]
 800a51e:	b2d2      	uxtb	r2, r2
 800a520:	4611      	mov	r1, r2
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a526:	2340      	movs	r3, #64	; 0x40
 800a528:	2200      	movs	r2, #0
 800a52a:	2100      	movs	r1, #0
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f003 ffd2 	bl	800e4d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2201      	movs	r2, #1
 800a536:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2240      	movs	r2, #64	; 0x40
 800a53e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a542:	2340      	movs	r3, #64	; 0x40
 800a544:	2200      	movs	r2, #0
 800a546:	2180      	movs	r1, #128	; 0x80
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f003 ffc4 	bl	800e4d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2240      	movs	r2, #64	; 0x40
 800a558:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	460b      	mov	r3, r1
 800a56e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	78fa      	ldrb	r2, [r7, #3]
 800a574:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a592:	b2da      	uxtb	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2204      	movs	r2, #4
 800a59e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b04      	cmp	r3, #4
 800a5c2:	d106      	bne.n	800a5d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d101      	bne.n	800a5f6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e012      	b.n	800a61c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b03      	cmp	r3, #3
 800a600:	d10b      	bne.n	800a61a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d005      	beq.n	800a61a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a614:	69db      	ldr	r3, [r3, #28]
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a63a:	2303      	movs	r3, #3
 800a63c:	e014      	b.n	800a668 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b03      	cmp	r3, #3
 800a648:	d10d      	bne.n	800a666 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a650:	6a1b      	ldr	r3, [r3, #32]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d007      	beq.n	800a666 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	78fa      	ldrb	r2, [r7, #3]
 800a660:	4611      	mov	r1, r2
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a686:	2303      	movs	r3, #3
 800a688:	e014      	b.n	800a6b4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b03      	cmp	r3, #3
 800a694:	d10d      	bne.n	800a6b2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d007      	beq.n	800a6b2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6aa:	78fa      	ldrb	r2, [r7, #3]
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d009      	beq.n	800a700 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	6852      	ldr	r2, [r2, #4]
 800a6f8:	b2d2      	uxtb	r2, r2
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	4798      	blx	r3
  }

  return USBD_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b087      	sub	sp, #28
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	3301      	adds	r3, #1
 800a720:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a728:	8a3b      	ldrh	r3, [r7, #16]
 800a72a:	021b      	lsls	r3, r3, #8
 800a72c:	b21a      	sxth	r2, r3
 800a72e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a732:	4313      	orrs	r3, r2
 800a734:	b21b      	sxth	r3, r3
 800a736:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a738:	89fb      	ldrh	r3, [r7, #14]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	371c      	adds	r7, #28
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
	...

0800a748 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	73fb      	strb	r3, [r7, #15]

	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	4798      	blx	r3
 800a764:	4603      	mov	r3, r0
 800a766:	73fb      	strb	r3, [r7, #15]

	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a770:	2b40      	cmp	r3, #64	; 0x40
 800a772:	d005      	beq.n	800a780 <USBD_StdDevReq+0x38>
 800a774:	2b40      	cmp	r3, #64	; 0x40
 800a776:	d854      	bhi.n	800a822 <USBD_StdDevReq+0xda>
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00b      	beq.n	800a794 <USBD_StdDevReq+0x4c>
 800a77c:	2b20      	cmp	r3, #32
 800a77e:	d150      	bne.n	800a822 <USBD_StdDevReq+0xda>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	4798      	blx	r3
 800a78e:	4603      	mov	r3, r0
 800a790:	73fb      	strb	r3, [r7, #15]
		  break;
 800a792:	e04e      	b.n	800a832 <USBD_StdDevReq+0xea>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	785b      	ldrb	r3, [r3, #1]
 800a798:	2b09      	cmp	r3, #9
 800a79a:	d83c      	bhi.n	800a816 <USBD_StdDevReq+0xce>
 800a79c:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <USBD_StdDevReq+0x5c>)
 800a79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a2:	bf00      	nop
 800a7a4:	0800a7f9 	.word	0x0800a7f9
 800a7a8:	0800a80d 	.word	0x0800a80d
 800a7ac:	0800a817 	.word	0x0800a817
 800a7b0:	0800a803 	.word	0x0800a803
 800a7b4:	0800a817 	.word	0x0800a817
 800a7b8:	0800a7d7 	.word	0x0800a7d7
 800a7bc:	0800a7cd 	.word	0x0800a7cd
 800a7c0:	0800a817 	.word	0x0800a817
 800a7c4:	0800a7ef 	.word	0x0800a7ef
 800a7c8:	0800a7e1 	.word	0x0800a7e1
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 800a7cc:	6839      	ldr	r1, [r7, #0]
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f9e2 	bl	800ab98 <USBD_GetDescriptor>
			  break;
 800a7d4:	e024      	b.n	800a820 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fb47 	bl	800ae6c <USBD_SetAddress>
			  break;
 800a7de:	e01f      	b.n	800a820 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fb86 	bl	800aef4 <USBD_SetConfig>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	73fb      	strb	r3, [r7, #15]
			  break;
 800a7ec:	e018      	b.n	800a820 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fc25 	bl	800b040 <USBD_GetConfig>
			  break;
 800a7f6:	e013      	b.n	800a820 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fc56 	bl	800b0ac <USBD_GetStatus>
			  break;
 800a800:	e00e      	b.n	800a820 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 800a802:	6839      	ldr	r1, [r7, #0]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fc85 	bl	800b114 <USBD_SetFeature>
			  break;
 800a80a:	e009      	b.n	800a820 <USBD_StdDevReq+0xd8>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fc94 	bl	800b13c <USBD_ClrFeature>
			  break;
 800a814:	e004      	b.n	800a820 <USBD_StdDevReq+0xd8>

			default:
			  USBD_CtlError(pdev, req);
 800a816:	6839      	ldr	r1, [r7, #0]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fceb 	bl	800b1f4 <USBD_CtlError>
			  break;
 800a81e:	bf00      	nop
		  }
		  break;
 800a820:	e007      	b.n	800a832 <USBD_StdDevReq+0xea>

		default:
		  unknown_bmrequest = 1;
 800a822:	4b06      	ldr	r3, [pc, #24]	; (800a83c <USBD_StdDevReq+0xf4>)
 800a824:	2201      	movs	r2, #1
 800a826:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fce2 	bl	800b1f4 <USBD_CtlError>
		  break;
 800a830:	bf00      	nop
	  }

  return ret;
 800a832:	7bfb      	ldrb	r3, [r7, #15]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	20000e23 	.word	0x20000e23

0800a840 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a84a:	2300      	movs	r3, #0
 800a84c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a856:	2b40      	cmp	r3, #64	; 0x40
 800a858:	d005      	beq.n	800a866 <USBD_StdItfReq+0x26>
 800a85a:	2b40      	cmp	r3, #64	; 0x40
 800a85c:	d82f      	bhi.n	800a8be <USBD_StdItfReq+0x7e>
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <USBD_StdItfReq+0x26>
 800a862:	2b20      	cmp	r3, #32
 800a864:	d12b      	bne.n	800a8be <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	3b01      	subs	r3, #1
 800a870:	2b02      	cmp	r3, #2
 800a872:	d81d      	bhi.n	800a8b0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	889b      	ldrh	r3, [r3, #4]
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d813      	bhi.n	800a8a6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	6839      	ldr	r1, [r7, #0]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	4798      	blx	r3
 800a88c:	4603      	mov	r3, r0
 800a88e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	88db      	ldrh	r3, [r3, #6]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d110      	bne.n	800a8ba <USBD_StdItfReq+0x7a>
 800a898:	7bfb      	ldrb	r3, [r7, #15]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10d      	bne.n	800a8ba <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fd73 	bl	800b38a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a8a4:	e009      	b.n	800a8ba <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fca3 	bl	800b1f4 <USBD_CtlError>
          break;
 800a8ae:	e004      	b.n	800a8ba <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fc9e 	bl	800b1f4 <USBD_CtlError>
          break;
 800a8b8:	e000      	b.n	800a8bc <USBD_StdItfReq+0x7c>
          break;
 800a8ba:	bf00      	nop
      }
      break;
 800a8bc:	e004      	b.n	800a8c8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fc97 	bl	800b1f4 <USBD_CtlError>
      break;
 800a8c6:	bf00      	nop
  }

  return ret;
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	889b      	ldrh	r3, [r3, #4]
 800a8e4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8ee:	2b40      	cmp	r3, #64	; 0x40
 800a8f0:	d007      	beq.n	800a902 <USBD_StdEPReq+0x30>
 800a8f2:	2b40      	cmp	r3, #64	; 0x40
 800a8f4:	f200 8145 	bhi.w	800ab82 <USBD_StdEPReq+0x2b0>
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00c      	beq.n	800a916 <USBD_StdEPReq+0x44>
 800a8fc:	2b20      	cmp	r3, #32
 800a8fe:	f040 8140 	bne.w	800ab82 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	4798      	blx	r3
 800a910:	4603      	mov	r3, r0
 800a912:	73fb      	strb	r3, [r7, #15]
      break;
 800a914:	e13a      	b.n	800ab8c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	785b      	ldrb	r3, [r3, #1]
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d007      	beq.n	800a92e <USBD_StdEPReq+0x5c>
 800a91e:	2b03      	cmp	r3, #3
 800a920:	f300 8129 	bgt.w	800ab76 <USBD_StdEPReq+0x2a4>
 800a924:	2b00      	cmp	r3, #0
 800a926:	d07f      	beq.n	800aa28 <USBD_StdEPReq+0x156>
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d03c      	beq.n	800a9a6 <USBD_StdEPReq+0xd4>
 800a92c:	e123      	b.n	800ab76 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b02      	cmp	r3, #2
 800a938:	d002      	beq.n	800a940 <USBD_StdEPReq+0x6e>
 800a93a:	2b03      	cmp	r3, #3
 800a93c:	d016      	beq.n	800a96c <USBD_StdEPReq+0x9a>
 800a93e:	e02c      	b.n	800a99a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a940:	7bbb      	ldrb	r3, [r7, #14]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00d      	beq.n	800a962 <USBD_StdEPReq+0x90>
 800a946:	7bbb      	ldrb	r3, [r7, #14]
 800a948:	2b80      	cmp	r3, #128	; 0x80
 800a94a:	d00a      	beq.n	800a962 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a94c:	7bbb      	ldrb	r3, [r7, #14]
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f003 fe05 	bl	800e560 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a956:	2180      	movs	r1, #128	; 0x80
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f003 fe01 	bl	800e560 <USBD_LL_StallEP>
 800a95e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a960:	e020      	b.n	800a9a4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fc45 	bl	800b1f4 <USBD_CtlError>
              break;
 800a96a:	e01b      	b.n	800a9a4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	885b      	ldrh	r3, [r3, #2]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10e      	bne.n	800a992 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00b      	beq.n	800a992 <USBD_StdEPReq+0xc0>
 800a97a:	7bbb      	ldrb	r3, [r7, #14]
 800a97c:	2b80      	cmp	r3, #128	; 0x80
 800a97e:	d008      	beq.n	800a992 <USBD_StdEPReq+0xc0>
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	88db      	ldrh	r3, [r3, #6]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d104      	bne.n	800a992 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a988:	7bbb      	ldrb	r3, [r7, #14]
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f003 fde7 	bl	800e560 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fcf9 	bl	800b38a <USBD_CtlSendStatus>

              break;
 800a998:	e004      	b.n	800a9a4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fc29 	bl	800b1f4 <USBD_CtlError>
              break;
 800a9a2:	bf00      	nop
          }
          break;
 800a9a4:	e0ec      	b.n	800ab80 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d002      	beq.n	800a9b8 <USBD_StdEPReq+0xe6>
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d016      	beq.n	800a9e4 <USBD_StdEPReq+0x112>
 800a9b6:	e030      	b.n	800aa1a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9b8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00d      	beq.n	800a9da <USBD_StdEPReq+0x108>
 800a9be:	7bbb      	ldrb	r3, [r7, #14]
 800a9c0:	2b80      	cmp	r3, #128	; 0x80
 800a9c2:	d00a      	beq.n	800a9da <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f003 fdc9 	bl	800e560 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9ce:	2180      	movs	r1, #128	; 0x80
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f003 fdc5 	bl	800e560 <USBD_LL_StallEP>
 800a9d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9d8:	e025      	b.n	800aa26 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fc09 	bl	800b1f4 <USBD_CtlError>
              break;
 800a9e2:	e020      	b.n	800aa26 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	885b      	ldrh	r3, [r3, #2]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d11b      	bne.n	800aa24 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d004      	beq.n	800aa00 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f003 fdcf 	bl	800e59e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fcc2 	bl	800b38a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	4798      	blx	r3
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aa18:	e004      	b.n	800aa24 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fbe9 	bl	800b1f4 <USBD_CtlError>
              break;
 800aa22:	e000      	b.n	800aa26 <USBD_StdEPReq+0x154>
              break;
 800aa24:	bf00      	nop
          }
          break;
 800aa26:	e0ab      	b.n	800ab80 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d002      	beq.n	800aa3a <USBD_StdEPReq+0x168>
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	d032      	beq.n	800aa9e <USBD_StdEPReq+0x1cc>
 800aa38:	e097      	b.n	800ab6a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d007      	beq.n	800aa50 <USBD_StdEPReq+0x17e>
 800aa40:	7bbb      	ldrb	r3, [r7, #14]
 800aa42:	2b80      	cmp	r3, #128	; 0x80
 800aa44:	d004      	beq.n	800aa50 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aa46:	6839      	ldr	r1, [r7, #0]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fbd3 	bl	800b1f4 <USBD_CtlError>
                break;
 800aa4e:	e091      	b.n	800ab74 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	da0b      	bge.n	800aa70 <USBD_StdEPReq+0x19e>
 800aa58:	7bbb      	ldrb	r3, [r7, #14]
 800aa5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa5e:	4613      	mov	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	4413      	add	r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	3310      	adds	r3, #16
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	3304      	adds	r3, #4
 800aa6e:	e00b      	b.n	800aa88 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa70:	7bbb      	ldrb	r3, [r7, #14]
 800aa72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa76:	4613      	mov	r3, r2
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	4413      	add	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	4413      	add	r3, r2
 800aa86:	3304      	adds	r3, #4
 800aa88:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	2202      	movs	r2, #2
 800aa94:	4619      	mov	r1, r3
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fc1d 	bl	800b2d6 <USBD_CtlSendData>
              break;
 800aa9c:	e06a      	b.n	800ab74 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	da11      	bge.n	800aaca <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aaa6:	7bbb      	ldrb	r3, [r7, #14]
 800aaa8:	f003 020f 	and.w	r2, r3, #15
 800aaac:	6879      	ldr	r1, [r7, #4]
 800aaae:	4613      	mov	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	440b      	add	r3, r1
 800aab8:	3324      	adds	r3, #36	; 0x24
 800aaba:	881b      	ldrh	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d117      	bne.n	800aaf0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aac0:	6839      	ldr	r1, [r7, #0]
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fb96 	bl	800b1f4 <USBD_CtlError>
                  break;
 800aac8:	e054      	b.n	800ab74 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aaca:	7bbb      	ldrb	r3, [r7, #14]
 800aacc:	f003 020f 	and.w	r2, r3, #15
 800aad0:	6879      	ldr	r1, [r7, #4]
 800aad2:	4613      	mov	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4413      	add	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	440b      	add	r3, r1
 800aadc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d104      	bne.n	800aaf0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aae6:	6839      	ldr	r1, [r7, #0]
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 fb83 	bl	800b1f4 <USBD_CtlError>
                  break;
 800aaee:	e041      	b.n	800ab74 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	da0b      	bge.n	800ab10 <USBD_StdEPReq+0x23e>
 800aaf8:	7bbb      	ldrb	r3, [r7, #14]
 800aafa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aafe:	4613      	mov	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	3310      	adds	r3, #16
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	e00b      	b.n	800ab28 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab10:	7bbb      	ldrb	r3, [r7, #14]
 800ab12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab16:	4613      	mov	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	4413      	add	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	4413      	add	r3, r2
 800ab26:	3304      	adds	r3, #4
 800ab28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab2a:	7bbb      	ldrb	r3, [r7, #14]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <USBD_StdEPReq+0x264>
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	2b80      	cmp	r3, #128	; 0x80
 800ab34:	d103      	bne.n	800ab3e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	601a      	str	r2, [r3, #0]
 800ab3c:	e00e      	b.n	800ab5c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab3e:	7bbb      	ldrb	r3, [r7, #14]
 800ab40:	4619      	mov	r1, r3
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f003 fd4a 	bl	800e5dc <USBD_LL_IsStallEP>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2201      	movs	r2, #1
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	e002      	b.n	800ab5c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2202      	movs	r2, #2
 800ab60:	4619      	mov	r1, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fbb7 	bl	800b2d6 <USBD_CtlSendData>
              break;
 800ab68:	e004      	b.n	800ab74 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fb41 	bl	800b1f4 <USBD_CtlError>
              break;
 800ab72:	bf00      	nop
          }
          break;
 800ab74:	e004      	b.n	800ab80 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fb3b 	bl	800b1f4 <USBD_CtlError>
          break;
 800ab7e:	bf00      	nop
      }
      break;
 800ab80:	e004      	b.n	800ab8c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fb35 	bl	800b1f4 <USBD_CtlError>
      break;
 800ab8a:	bf00      	nop
  }

  return ret;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aba2:	2300      	movs	r3, #0
 800aba4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abaa:	2300      	movs	r3, #0
 800abac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	885b      	ldrh	r3, [r3, #2]
 800abb2:	0a1b      	lsrs	r3, r3, #8
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	3b01      	subs	r3, #1
 800abb8:	2b06      	cmp	r3, #6
 800abba:	f200 8128 	bhi.w	800ae0e <USBD_GetDescriptor+0x276>
 800abbe:	a201      	add	r2, pc, #4	; (adr r2, 800abc4 <USBD_GetDescriptor+0x2c>)
 800abc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc4:	0800abe1 	.word	0x0800abe1
 800abc8:	0800abf9 	.word	0x0800abf9
 800abcc:	0800ac39 	.word	0x0800ac39
 800abd0:	0800ae0f 	.word	0x0800ae0f
 800abd4:	0800ae0f 	.word	0x0800ae0f
 800abd8:	0800adaf 	.word	0x0800adaf
 800abdc:	0800addb 	.word	0x0800addb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	7c12      	ldrb	r2, [r2, #16]
 800abec:	f107 0108 	add.w	r1, r7, #8
 800abf0:	4610      	mov	r0, r2
 800abf2:	4798      	blx	r3
 800abf4:	60f8      	str	r0, [r7, #12]
      break;
 800abf6:	e112      	b.n	800ae1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	7c1b      	ldrb	r3, [r3, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10d      	bne.n	800ac1c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac08:	f107 0208 	add.w	r2, r7, #8
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4798      	blx	r3
 800ac10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	3301      	adds	r3, #1
 800ac16:	2202      	movs	r2, #2
 800ac18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac1a:	e100      	b.n	800ae1e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac24:	f107 0208 	add.w	r2, r7, #8
 800ac28:	4610      	mov	r0, r2
 800ac2a:	4798      	blx	r3
 800ac2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	3301      	adds	r3, #1
 800ac32:	2202      	movs	r2, #2
 800ac34:	701a      	strb	r2, [r3, #0]
      break;
 800ac36:	e0f2      	b.n	800ae1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	885b      	ldrh	r3, [r3, #2]
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2b05      	cmp	r3, #5
 800ac40:	f200 80ac 	bhi.w	800ad9c <USBD_GetDescriptor+0x204>
 800ac44:	a201      	add	r2, pc, #4	; (adr r2, 800ac4c <USBD_GetDescriptor+0xb4>)
 800ac46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4a:	bf00      	nop
 800ac4c:	0800ac65 	.word	0x0800ac65
 800ac50:	0800ac99 	.word	0x0800ac99
 800ac54:	0800accd 	.word	0x0800accd
 800ac58:	0800ad01 	.word	0x0800ad01
 800ac5c:	0800ad35 	.word	0x0800ad35
 800ac60:	0800ad69 	.word	0x0800ad69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d00b      	beq.n	800ac88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	7c12      	ldrb	r2, [r2, #16]
 800ac7c:	f107 0108 	add.w	r1, r7, #8
 800ac80:	4610      	mov	r0, r2
 800ac82:	4798      	blx	r3
 800ac84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac86:	e091      	b.n	800adac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fab2 	bl	800b1f4 <USBD_CtlError>
            err++;
 800ac90:	7afb      	ldrb	r3, [r7, #11]
 800ac92:	3301      	adds	r3, #1
 800ac94:	72fb      	strb	r3, [r7, #11]
          break;
 800ac96:	e089      	b.n	800adac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00b      	beq.n	800acbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	7c12      	ldrb	r2, [r2, #16]
 800acb0:	f107 0108 	add.w	r1, r7, #8
 800acb4:	4610      	mov	r0, r2
 800acb6:	4798      	blx	r3
 800acb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acba:	e077      	b.n	800adac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fa98 	bl	800b1f4 <USBD_CtlError>
            err++;
 800acc4:	7afb      	ldrb	r3, [r7, #11]
 800acc6:	3301      	adds	r3, #1
 800acc8:	72fb      	strb	r3, [r7, #11]
          break;
 800acca:	e06f      	b.n	800adac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00b      	beq.n	800acf0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	7c12      	ldrb	r2, [r2, #16]
 800ace4:	f107 0108 	add.w	r1, r7, #8
 800ace8:	4610      	mov	r0, r2
 800acea:	4798      	blx	r3
 800acec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acee:	e05d      	b.n	800adac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fa7e 	bl	800b1f4 <USBD_CtlError>
            err++;
 800acf8:	7afb      	ldrb	r3, [r7, #11]
 800acfa:	3301      	adds	r3, #1
 800acfc:	72fb      	strb	r3, [r7, #11]
          break;
 800acfe:	e055      	b.n	800adac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00b      	beq.n	800ad24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	7c12      	ldrb	r2, [r2, #16]
 800ad18:	f107 0108 	add.w	r1, r7, #8
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4798      	blx	r3
 800ad20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad22:	e043      	b.n	800adac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fa64 	bl	800b1f4 <USBD_CtlError>
            err++;
 800ad2c:	7afb      	ldrb	r3, [r7, #11]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	72fb      	strb	r3, [r7, #11]
          break;
 800ad32:	e03b      	b.n	800adac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad3a:	695b      	ldr	r3, [r3, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00b      	beq.n	800ad58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad46:	695b      	ldr	r3, [r3, #20]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	7c12      	ldrb	r2, [r2, #16]
 800ad4c:	f107 0108 	add.w	r1, r7, #8
 800ad50:	4610      	mov	r0, r2
 800ad52:	4798      	blx	r3
 800ad54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad56:	e029      	b.n	800adac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad58:	6839      	ldr	r1, [r7, #0]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 fa4a 	bl	800b1f4 <USBD_CtlError>
            err++;
 800ad60:	7afb      	ldrb	r3, [r7, #11]
 800ad62:	3301      	adds	r3, #1
 800ad64:	72fb      	strb	r3, [r7, #11]
          break;
 800ad66:	e021      	b.n	800adac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad6e:	699b      	ldr	r3, [r3, #24]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00b      	beq.n	800ad8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	7c12      	ldrb	r2, [r2, #16]
 800ad80:	f107 0108 	add.w	r1, r7, #8
 800ad84:	4610      	mov	r0, r2
 800ad86:	4798      	blx	r3
 800ad88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad8a:	e00f      	b.n	800adac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fa30 	bl	800b1f4 <USBD_CtlError>
            err++;
 800ad94:	7afb      	ldrb	r3, [r7, #11]
 800ad96:	3301      	adds	r3, #1
 800ad98:	72fb      	strb	r3, [r7, #11]
          break;
 800ad9a:	e007      	b.n	800adac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fa28 	bl	800b1f4 <USBD_CtlError>
          err++;
 800ada4:	7afb      	ldrb	r3, [r7, #11]
 800ada6:	3301      	adds	r3, #1
 800ada8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800adaa:	bf00      	nop
      }
      break;
 800adac:	e037      	b.n	800ae1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	7c1b      	ldrb	r3, [r3, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d109      	bne.n	800adca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adbe:	f107 0208 	add.w	r2, r7, #8
 800adc2:	4610      	mov	r0, r2
 800adc4:	4798      	blx	r3
 800adc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adc8:	e029      	b.n	800ae1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800adca:	6839      	ldr	r1, [r7, #0]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fa11 	bl	800b1f4 <USBD_CtlError>
        err++;
 800add2:	7afb      	ldrb	r3, [r7, #11]
 800add4:	3301      	adds	r3, #1
 800add6:	72fb      	strb	r3, [r7, #11]
      break;
 800add8:	e021      	b.n	800ae1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	7c1b      	ldrb	r3, [r3, #16]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10d      	bne.n	800adfe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adea:	f107 0208 	add.w	r2, r7, #8
 800adee:	4610      	mov	r0, r2
 800adf0:	4798      	blx	r3
 800adf2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3301      	adds	r3, #1
 800adf8:	2207      	movs	r2, #7
 800adfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adfc:	e00f      	b.n	800ae1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f9f7 	bl	800b1f4 <USBD_CtlError>
        err++;
 800ae06:	7afb      	ldrb	r3, [r7, #11]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae0c:	e007      	b.n	800ae1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f9ef 	bl	800b1f4 <USBD_CtlError>
      err++;
 800ae16:	7afb      	ldrb	r3, [r7, #11]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae1c:	bf00      	nop
  }

  if (err != 0U)
 800ae1e:	7afb      	ldrb	r3, [r7, #11]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d11e      	bne.n	800ae62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	88db      	ldrh	r3, [r3, #6]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d016      	beq.n	800ae5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ae2c:	893b      	ldrh	r3, [r7, #8]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00e      	beq.n	800ae50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	88da      	ldrh	r2, [r3, #6]
 800ae36:	893b      	ldrh	r3, [r7, #8]
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	bf28      	it	cs
 800ae3c:	4613      	movcs	r3, r2
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae42:	893b      	ldrh	r3, [r7, #8]
 800ae44:	461a      	mov	r2, r3
 800ae46:	68f9      	ldr	r1, [r7, #12]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fa44 	bl	800b2d6 <USBD_CtlSendData>
 800ae4e:	e009      	b.n	800ae64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae50:	6839      	ldr	r1, [r7, #0]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f9ce 	bl	800b1f4 <USBD_CtlError>
 800ae58:	e004      	b.n	800ae64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fa95 	bl	800b38a <USBD_CtlSendStatus>
 800ae60:	e000      	b.n	800ae64 <USBD_GetDescriptor+0x2cc>
    return;
 800ae62:	bf00      	nop
  }
}
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop

0800ae6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	889b      	ldrh	r3, [r3, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d131      	bne.n	800aee2 <USBD_SetAddress+0x76>
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	88db      	ldrh	r3, [r3, #6]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d12d      	bne.n	800aee2 <USBD_SetAddress+0x76>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	885b      	ldrh	r3, [r3, #2]
 800ae8a:	2b7f      	cmp	r3, #127	; 0x7f
 800ae8c:	d829      	bhi.n	800aee2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	885b      	ldrh	r3, [r3, #2]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d104      	bne.n	800aeb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f9a3 	bl	800b1f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeae:	e01d      	b.n	800aeec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	7bfa      	ldrb	r2, [r7, #15]
 800aeb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f003 fbb9 	bl	800e634 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fa61 	bl	800b38a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d004      	beq.n	800aed8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2202      	movs	r2, #2
 800aed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed6:	e009      	b.n	800aeec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee0:	e004      	b.n	800aeec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f985 	bl	800b1f4 <USBD_CtlError>
  }
}
 800aeea:	bf00      	nop
 800aeec:	bf00      	nop
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	885b      	ldrh	r3, [r3, #2]
 800af06:	b2da      	uxtb	r2, r3
 800af08:	4b4c      	ldr	r3, [pc, #304]	; (800b03c <USBD_SetConfig+0x148>)
 800af0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af0c:	4b4b      	ldr	r3, [pc, #300]	; (800b03c <USBD_SetConfig+0x148>)
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d905      	bls.n	800af20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 f96c 	bl	800b1f4 <USBD_CtlError>
    return USBD_FAIL;
 800af1c:	2303      	movs	r3, #3
 800af1e:	e088      	b.n	800b032 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af26:	b2db      	uxtb	r3, r3
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d002      	beq.n	800af32 <USBD_SetConfig+0x3e>
 800af2c:	2b03      	cmp	r3, #3
 800af2e:	d025      	beq.n	800af7c <USBD_SetConfig+0x88>
 800af30:	e071      	b.n	800b016 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af32:	4b42      	ldr	r3, [pc, #264]	; (800b03c <USBD_SetConfig+0x148>)
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d01c      	beq.n	800af74 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800af3a:	4b40      	ldr	r3, [pc, #256]	; (800b03c <USBD_SetConfig+0x148>)
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af44:	4b3d      	ldr	r3, [pc, #244]	; (800b03c <USBD_SetConfig+0x148>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	4619      	mov	r1, r3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7ff f93a 	bl	800a1c4 <USBD_SetClassConfig>
 800af50:	4603      	mov	r3, r0
 800af52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af54:	7bfb      	ldrb	r3, [r7, #15]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d004      	beq.n	800af64 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800af5a:	6839      	ldr	r1, [r7, #0]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f949 	bl	800b1f4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af62:	e065      	b.n	800b030 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fa10 	bl	800b38a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2203      	movs	r2, #3
 800af6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af72:	e05d      	b.n	800b030 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fa08 	bl	800b38a <USBD_CtlSendStatus>
      break;
 800af7a:	e059      	b.n	800b030 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af7c:	4b2f      	ldr	r3, [pc, #188]	; (800b03c <USBD_SetConfig+0x148>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d112      	bne.n	800afaa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2202      	movs	r2, #2
 800af88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800af8c:	4b2b      	ldr	r3, [pc, #172]	; (800b03c <USBD_SetConfig+0x148>)
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	461a      	mov	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af96:	4b29      	ldr	r3, [pc, #164]	; (800b03c <USBD_SetConfig+0x148>)
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f7ff f92d 	bl	800a1fc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f9f1 	bl	800b38a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afa8:	e042      	b.n	800b030 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800afaa:	4b24      	ldr	r3, [pc, #144]	; (800b03c <USBD_SetConfig+0x148>)
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	461a      	mov	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d02a      	beq.n	800b00e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	4619      	mov	r1, r3
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f7ff f91b 	bl	800a1fc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800afc6:	4b1d      	ldr	r3, [pc, #116]	; (800b03c <USBD_SetConfig+0x148>)
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afd0:	4b1a      	ldr	r3, [pc, #104]	; (800b03c <USBD_SetConfig+0x148>)
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7ff f8f4 	bl	800a1c4 <USBD_SetClassConfig>
 800afdc:	4603      	mov	r3, r0
 800afde:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00f      	beq.n	800b006 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f903 	bl	800b1f4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	4619      	mov	r1, r3
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f7ff f900 	bl	800a1fc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b004:	e014      	b.n	800b030 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f9bf 	bl	800b38a <USBD_CtlSendStatus>
      break;
 800b00c:	e010      	b.n	800b030 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f9bb 	bl	800b38a <USBD_CtlSendStatus>
      break;
 800b014:	e00c      	b.n	800b030 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b016:	6839      	ldr	r1, [r7, #0]
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 f8eb 	bl	800b1f4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b01e:	4b07      	ldr	r3, [pc, #28]	; (800b03c <USBD_SetConfig+0x148>)
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7ff f8e9 	bl	800a1fc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b02a:	2303      	movs	r3, #3
 800b02c:	73fb      	strb	r3, [r7, #15]
      break;
 800b02e:	bf00      	nop
  }

  return ret;
 800b030:	7bfb      	ldrb	r3, [r7, #15]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	20000e24 	.word	0x20000e24

0800b040 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	88db      	ldrh	r3, [r3, #6]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d004      	beq.n	800b05c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f8cd 	bl	800b1f4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b05a:	e023      	b.n	800b0a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b02      	cmp	r3, #2
 800b066:	dc02      	bgt.n	800b06e <USBD_GetConfig+0x2e>
 800b068:	2b00      	cmp	r3, #0
 800b06a:	dc03      	bgt.n	800b074 <USBD_GetConfig+0x34>
 800b06c:	e015      	b.n	800b09a <USBD_GetConfig+0x5a>
 800b06e:	2b03      	cmp	r3, #3
 800b070:	d00b      	beq.n	800b08a <USBD_GetConfig+0x4a>
 800b072:	e012      	b.n	800b09a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	3308      	adds	r3, #8
 800b07e:	2201      	movs	r2, #1
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f927 	bl	800b2d6 <USBD_CtlSendData>
        break;
 800b088:	e00c      	b.n	800b0a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	3304      	adds	r3, #4
 800b08e:	2201      	movs	r2, #1
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f91f 	bl	800b2d6 <USBD_CtlSendData>
        break;
 800b098:	e004      	b.n	800b0a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b09a:	6839      	ldr	r1, [r7, #0]
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f8a9 	bl	800b1f4 <USBD_CtlError>
        break;
 800b0a2:	bf00      	nop
}
 800b0a4:	bf00      	nop
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d81e      	bhi.n	800b102 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	88db      	ldrh	r3, [r3, #6]
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d004      	beq.n	800b0d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b0cc:	6839      	ldr	r1, [r7, #0]
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f890 	bl	800b1f4 <USBD_CtlError>
        break;
 800b0d4:	e01a      	b.n	800b10c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d005      	beq.n	800b0f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	f043 0202 	orr.w	r2, r3, #2
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	330c      	adds	r3, #12
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f8eb 	bl	800b2d6 <USBD_CtlSendData>
      break;
 800b100:	e004      	b.n	800b10c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b102:	6839      	ldr	r1, [r7, #0]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f875 	bl	800b1f4 <USBD_CtlError>
      break;
 800b10a:	bf00      	nop
  }
}
 800b10c:	bf00      	nop
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	885b      	ldrh	r3, [r3, #2]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d106      	bne.n	800b134 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2201      	movs	r2, #1
 800b12a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f92b 	bl	800b38a <USBD_CtlSendStatus>
  }
}
 800b134:	bf00      	nop
 800b136:	3708      	adds	r7, #8
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	3b01      	subs	r3, #1
 800b150:	2b02      	cmp	r3, #2
 800b152:	d80b      	bhi.n	800b16c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	885b      	ldrh	r3, [r3, #2]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d10c      	bne.n	800b176 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f910 	bl	800b38a <USBD_CtlSendStatus>
      }
      break;
 800b16a:	e004      	b.n	800b176 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f840 	bl	800b1f4 <USBD_CtlError>
      break;
 800b174:	e000      	b.n	800b178 <USBD_ClrFeature+0x3c>
      break;
 800b176:	bf00      	nop
  }
}
 800b178:	bf00      	nop
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	781a      	ldrb	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	3301      	adds	r3, #1
 800b19a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	781a      	ldrb	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7ff faad 	bl	800a70a <SWAPBYTE>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f7ff faa0 	bl	800a70a <SWAPBYTE>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f7ff fa93 	bl	800a70a <SWAPBYTE>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	80da      	strh	r2, [r3, #6]
}
 800b1ec:	bf00      	nop
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1fe:	2180      	movs	r1, #128	; 0x80
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f003 f9ad 	bl	800e560 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b206:	2100      	movs	r1, #0
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f003 f9a9 	bl	800e560 <USBD_LL_StallEP>
}
 800b20e:	bf00      	nop
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b086      	sub	sp, #24
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	60f8      	str	r0, [r7, #12]
 800b21e:	60b9      	str	r1, [r7, #8]
 800b220:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b222:	2300      	movs	r3, #0
 800b224:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d036      	beq.n	800b29a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b230:	6938      	ldr	r0, [r7, #16]
 800b232:	f000 f836 	bl	800b2a2 <USBD_GetLen>
 800b236:	4603      	mov	r3, r0
 800b238:	3301      	adds	r3, #1
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	005b      	lsls	r3, r3, #1
 800b23e:	b29a      	uxth	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b244:	7dfb      	ldrb	r3, [r7, #23]
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	4413      	add	r3, r2
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	7812      	ldrb	r2, [r2, #0]
 800b24e:	701a      	strb	r2, [r3, #0]
  idx++;
 800b250:	7dfb      	ldrb	r3, [r7, #23]
 800b252:	3301      	adds	r3, #1
 800b254:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b256:	7dfb      	ldrb	r3, [r7, #23]
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	4413      	add	r3, r2
 800b25c:	2203      	movs	r2, #3
 800b25e:	701a      	strb	r2, [r3, #0]
  idx++;
 800b260:	7dfb      	ldrb	r3, [r7, #23]
 800b262:	3301      	adds	r3, #1
 800b264:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b266:	e013      	b.n	800b290 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	68ba      	ldr	r2, [r7, #8]
 800b26c:	4413      	add	r3, r2
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	7812      	ldrb	r2, [r2, #0]
 800b272:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	3301      	adds	r3, #1
 800b278:	613b      	str	r3, [r7, #16]
    idx++;
 800b27a:	7dfb      	ldrb	r3, [r7, #23]
 800b27c:	3301      	adds	r3, #1
 800b27e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b280:	7dfb      	ldrb	r3, [r7, #23]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	4413      	add	r3, r2
 800b286:	2200      	movs	r2, #0
 800b288:	701a      	strb	r2, [r3, #0]
    idx++;
 800b28a:	7dfb      	ldrb	r3, [r7, #23]
 800b28c:	3301      	adds	r3, #1
 800b28e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1e7      	bne.n	800b268 <USBD_GetString+0x52>
 800b298:	e000      	b.n	800b29c <USBD_GetString+0x86>
    return;
 800b29a:	bf00      	nop
  }
}
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2a2:	b480      	push	{r7}
 800b2a4:	b085      	sub	sp, #20
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b2b2:	e005      	b.n	800b2c0 <USBD_GetLen+0x1e>
  {
    len++;
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1f5      	bne.n	800b2b4 <USBD_GetLen+0x12>
  }

  return len;
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b084      	sub	sp, #16
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	60f8      	str	r0, [r7, #12]
 800b2de:	60b9      	str	r1, [r7, #8]
 800b2e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2202      	movs	r2, #2
 800b2e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f003 f9b8 	bl	800e672 <USBD_LL_Transmit>

  return USBD_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	2100      	movs	r1, #0
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f003 f9a7 	bl	800e672 <USBD_LL_Transmit>

  return USBD_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b084      	sub	sp, #16
 800b332:	af00      	add	r7, sp, #0
 800b334:	60f8      	str	r0, [r7, #12]
 800b336:	60b9      	str	r1, [r7, #8]
 800b338:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2203      	movs	r2, #3
 800b33e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	2100      	movs	r1, #0
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f003 f9ab 	bl	800e6b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	68ba      	ldr	r2, [r7, #8]
 800b378:	2100      	movs	r1, #0
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f003 f99a 	bl	800e6b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b082      	sub	sp, #8
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2204      	movs	r2, #4
 800b396:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b39a:	2300      	movs	r3, #0
 800b39c:	2200      	movs	r2, #0
 800b39e:	2100      	movs	r1, #0
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f003 f966 	bl	800e672 <USBD_LL_Transmit>

  return USBD_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2205      	movs	r2, #5
 800b3bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f003 f974 	bl	800e6b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
	...

0800b3d8 <__NVIC_SetPriority>:
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	4603      	mov	r3, r0
 800b3e0:	6039      	str	r1, [r7, #0]
 800b3e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b3e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	db0a      	blt.n	800b402 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	b2da      	uxtb	r2, r3
 800b3f0:	490c      	ldr	r1, [pc, #48]	; (800b424 <__NVIC_SetPriority+0x4c>)
 800b3f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3f6:	0112      	lsls	r2, r2, #4
 800b3f8:	b2d2      	uxtb	r2, r2
 800b3fa:	440b      	add	r3, r1
 800b3fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b400:	e00a      	b.n	800b418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	b2da      	uxtb	r2, r3
 800b406:	4908      	ldr	r1, [pc, #32]	; (800b428 <__NVIC_SetPriority+0x50>)
 800b408:	79fb      	ldrb	r3, [r7, #7]
 800b40a:	f003 030f 	and.w	r3, r3, #15
 800b40e:	3b04      	subs	r3, #4
 800b410:	0112      	lsls	r2, r2, #4
 800b412:	b2d2      	uxtb	r2, r2
 800b414:	440b      	add	r3, r1
 800b416:	761a      	strb	r2, [r3, #24]
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	e000e100 	.word	0xe000e100
 800b428:	e000ed00 	.word	0xe000ed00

0800b42c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b42c:	b580      	push	{r7, lr}
 800b42e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b430:	4b05      	ldr	r3, [pc, #20]	; (800b448 <SysTick_Handler+0x1c>)
 800b432:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b434:	f001 fcfe 	bl	800ce34 <xTaskGetSchedulerState>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d001      	beq.n	800b442 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b43e:	f002 fae3 	bl	800da08 <xPortSysTickHandler>
  }
}
 800b442:	bf00      	nop
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	e000e010 	.word	0xe000e010

0800b44c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b44c:	b580      	push	{r7, lr}
 800b44e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b450:	2100      	movs	r1, #0
 800b452:	f06f 0004 	mvn.w	r0, #4
 800b456:	f7ff ffbf 	bl	800b3d8 <__NVIC_SetPriority>
#endif
}
 800b45a:	bf00      	nop
 800b45c:	bd80      	pop	{r7, pc}
	...

0800b460 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b466:	f3ef 8305 	mrs	r3, IPSR
 800b46a:	603b      	str	r3, [r7, #0]
  return(result);
 800b46c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d003      	beq.n	800b47a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b472:	f06f 0305 	mvn.w	r3, #5
 800b476:	607b      	str	r3, [r7, #4]
 800b478:	e00c      	b.n	800b494 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b47a:	4b0a      	ldr	r3, [pc, #40]	; (800b4a4 <osKernelInitialize+0x44>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d105      	bne.n	800b48e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b482:	4b08      	ldr	r3, [pc, #32]	; (800b4a4 <osKernelInitialize+0x44>)
 800b484:	2201      	movs	r2, #1
 800b486:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b488:	2300      	movs	r3, #0
 800b48a:	607b      	str	r3, [r7, #4]
 800b48c:	e002      	b.n	800b494 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b48e:	f04f 33ff 	mov.w	r3, #4294967295
 800b492:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b494:	687b      	ldr	r3, [r7, #4]
}
 800b496:	4618      	mov	r0, r3
 800b498:	370c      	adds	r7, #12
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	20000e28 	.word	0x20000e28

0800b4a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4ae:	f3ef 8305 	mrs	r3, IPSR
 800b4b2:	603b      	str	r3, [r7, #0]
  return(result);
 800b4b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d003      	beq.n	800b4c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b4ba:	f06f 0305 	mvn.w	r3, #5
 800b4be:	607b      	str	r3, [r7, #4]
 800b4c0:	e010      	b.n	800b4e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b4c2:	4b0b      	ldr	r3, [pc, #44]	; (800b4f0 <osKernelStart+0x48>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d109      	bne.n	800b4de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b4ca:	f7ff ffbf 	bl	800b44c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b4ce:	4b08      	ldr	r3, [pc, #32]	; (800b4f0 <osKernelStart+0x48>)
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b4d4:	f001 f866 	bl	800c5a4 <vTaskStartScheduler>
      stat = osOK;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	607b      	str	r3, [r7, #4]
 800b4dc:	e002      	b.n	800b4e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b4de:	f04f 33ff 	mov.w	r3, #4294967295
 800b4e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b4e4:	687b      	ldr	r3, [r7, #4]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20000e28 	.word	0x20000e28

0800b4f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08e      	sub	sp, #56	; 0x38
 800b4f8:	af04      	add	r7, sp, #16
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b500:	2300      	movs	r3, #0
 800b502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b504:	f3ef 8305 	mrs	r3, IPSR
 800b508:	617b      	str	r3, [r7, #20]
  return(result);
 800b50a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d17e      	bne.n	800b60e <osThreadNew+0x11a>
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d07b      	beq.n	800b60e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b516:	2380      	movs	r3, #128	; 0x80
 800b518:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b51a:	2318      	movs	r3, #24
 800b51c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b51e:	2300      	movs	r3, #0
 800b520:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b522:	f04f 33ff 	mov.w	r3, #4294967295
 800b526:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d045      	beq.n	800b5ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d002      	beq.n	800b53c <osThreadNew+0x48>
        name = attr->name;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d002      	beq.n	800b54a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d008      	beq.n	800b562 <osThreadNew+0x6e>
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	2b38      	cmp	r3, #56	; 0x38
 800b554:	d805      	bhi.n	800b562 <osThreadNew+0x6e>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	f003 0301 	and.w	r3, r3, #1
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d001      	beq.n	800b566 <osThreadNew+0x72>
        return (NULL);
 800b562:	2300      	movs	r3, #0
 800b564:	e054      	b.n	800b610 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	695b      	ldr	r3, [r3, #20]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	695b      	ldr	r3, [r3, #20]
 800b572:	089b      	lsrs	r3, r3, #2
 800b574:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00e      	beq.n	800b59c <osThreadNew+0xa8>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	2b5b      	cmp	r3, #91	; 0x5b
 800b584:	d90a      	bls.n	800b59c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d006      	beq.n	800b59c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	695b      	ldr	r3, [r3, #20]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d002      	beq.n	800b59c <osThreadNew+0xa8>
        mem = 1;
 800b596:	2301      	movs	r3, #1
 800b598:	61bb      	str	r3, [r7, #24]
 800b59a:	e010      	b.n	800b5be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10c      	bne.n	800b5be <osThreadNew+0xca>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d108      	bne.n	800b5be <osThreadNew+0xca>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d104      	bne.n	800b5be <osThreadNew+0xca>
          mem = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	61bb      	str	r3, [r7, #24]
 800b5b8:	e001      	b.n	800b5be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d110      	bne.n	800b5e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5cc:	9202      	str	r2, [sp, #8]
 800b5ce:	9301      	str	r3, [sp, #4]
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	6a3a      	ldr	r2, [r7, #32]
 800b5d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f000 fe0c 	bl	800c1f8 <xTaskCreateStatic>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	613b      	str	r3, [r7, #16]
 800b5e4:	e013      	b.n	800b60e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d110      	bne.n	800b60e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b5ec:	6a3b      	ldr	r3, [r7, #32]
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	f107 0310 	add.w	r3, r7, #16
 800b5f4:	9301      	str	r3, [sp, #4]
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f000 fe57 	bl	800c2b2 <xTaskCreate>
 800b604:	4603      	mov	r3, r0
 800b606:	2b01      	cmp	r3, #1
 800b608:	d001      	beq.n	800b60e <osThreadNew+0x11a>
            hTask = NULL;
 800b60a:	2300      	movs	r3, #0
 800b60c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b60e:	693b      	ldr	r3, [r7, #16]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3728      	adds	r7, #40	; 0x28
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b620:	f3ef 8305 	mrs	r3, IPSR
 800b624:	60bb      	str	r3, [r7, #8]
  return(result);
 800b626:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d003      	beq.n	800b634 <osDelay+0x1c>
    stat = osErrorISR;
 800b62c:	f06f 0305 	mvn.w	r3, #5
 800b630:	60fb      	str	r3, [r7, #12]
 800b632:	e007      	b.n	800b644 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b634:	2300      	movs	r3, #0
 800b636:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d002      	beq.n	800b644 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 ff7c 	bl	800c53c <vTaskDelay>
    }
  }

  return (stat);
 800b644:	68fb      	ldr	r3, [r7, #12]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
	...

0800b650 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4a07      	ldr	r2, [pc, #28]	; (800b67c <vApplicationGetIdleTaskMemory+0x2c>)
 800b660:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	4a06      	ldr	r2, [pc, #24]	; (800b680 <vApplicationGetIdleTaskMemory+0x30>)
 800b666:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2280      	movs	r2, #128	; 0x80
 800b66c:	601a      	str	r2, [r3, #0]
}
 800b66e:	bf00      	nop
 800b670:	3714      	adds	r7, #20
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	20000e2c 	.word	0x20000e2c
 800b680:	20000e88 	.word	0x20000e88

0800b684 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	4a07      	ldr	r2, [pc, #28]	; (800b6b0 <vApplicationGetTimerTaskMemory+0x2c>)
 800b694:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	4a06      	ldr	r2, [pc, #24]	; (800b6b4 <vApplicationGetTimerTaskMemory+0x30>)
 800b69a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b6a2:	601a      	str	r2, [r3, #0]
}
 800b6a4:	bf00      	nop
 800b6a6:	3714      	adds	r7, #20
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	20001088 	.word	0x20001088
 800b6b4:	200010e4 	.word	0x200010e4

0800b6b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f103 0208 	add.w	r2, r3, #8
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f103 0208 	add.w	r2, r3, #8
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f103 0208 	add.w	r2, r3, #8
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b706:	bf00      	nop
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b712:	b480      	push	{r7}
 800b714:	b085      	sub	sp, #20
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	689a      	ldr	r2, [r3, #8]
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	683a      	ldr	r2, [r7, #0]
 800b736:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	1c5a      	adds	r2, r3, #1
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	601a      	str	r2, [r3, #0]
}
 800b74e:	bf00      	nop
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr

0800b75a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b75a:	b480      	push	{r7}
 800b75c:	b085      	sub	sp, #20
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
 800b762:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b770:	d103      	bne.n	800b77a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	691b      	ldr	r3, [r3, #16]
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	e00c      	b.n	800b794 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	3308      	adds	r3, #8
 800b77e:	60fb      	str	r3, [r7, #12]
 800b780:	e002      	b.n	800b788 <vListInsert+0x2e>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	60fb      	str	r3, [r7, #12]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	429a      	cmp	r2, r3
 800b792:	d2f6      	bcs.n	800b782 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	685a      	ldr	r2, [r3, #4]
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	683a      	ldr	r2, [r7, #0]
 800b7a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	683a      	ldr	r2, [r7, #0]
 800b7ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	1c5a      	adds	r2, r3, #1
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	601a      	str	r2, [r3, #0]
}
 800b7c0:	bf00      	nop
 800b7c2:	3714      	adds	r7, #20
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	6892      	ldr	r2, [r2, #8]
 800b7e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	6852      	ldr	r2, [r2, #4]
 800b7ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d103      	bne.n	800b800 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	689a      	ldr	r2, [r3, #8]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	1e5a      	subs	r2, r3, #1
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3714      	adds	r7, #20
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10a      	bne.n	800b84a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b84a:	f002 f84b 	bl	800d8e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b856:	68f9      	ldr	r1, [r7, #12]
 800b858:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b85a:	fb01 f303 	mul.w	r3, r1, r3
 800b85e:	441a      	add	r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b87a:	3b01      	subs	r3, #1
 800b87c:	68f9      	ldr	r1, [r7, #12]
 800b87e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b880:	fb01 f303 	mul.w	r3, r1, r3
 800b884:	441a      	add	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	22ff      	movs	r2, #255	; 0xff
 800b88e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	22ff      	movs	r2, #255	; 0xff
 800b896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d114      	bne.n	800b8ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d01a      	beq.n	800b8de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	3310      	adds	r3, #16
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f001 f903 	bl	800cab8 <xTaskRemoveFromEventList>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d012      	beq.n	800b8de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b8b8:	4b0c      	ldr	r3, [pc, #48]	; (800b8ec <xQueueGenericReset+0xcc>)
 800b8ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8be:	601a      	str	r2, [r3, #0]
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	e009      	b.n	800b8de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3310      	adds	r3, #16
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7ff fef2 	bl	800b6b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	3324      	adds	r3, #36	; 0x24
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7ff feed 	bl	800b6b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b8de:	f002 f831 	bl	800d944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b8e2:	2301      	movs	r3, #1
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	e000ed04 	.word	0xe000ed04

0800b8f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b08e      	sub	sp, #56	; 0x38
 800b8f4:	af02      	add	r7, sp, #8
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
 800b8fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10a      	bne.n	800b91a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b916:	bf00      	nop
 800b918:	e7fe      	b.n	800b918 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d10a      	bne.n	800b936 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b924:	f383 8811 	msr	BASEPRI, r3
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b932:	bf00      	nop
 800b934:	e7fe      	b.n	800b934 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d002      	beq.n	800b942 <xQueueGenericCreateStatic+0x52>
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <xQueueGenericCreateStatic+0x56>
 800b942:	2301      	movs	r3, #1
 800b944:	e000      	b.n	800b948 <xQueueGenericCreateStatic+0x58>
 800b946:	2300      	movs	r3, #0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10a      	bne.n	800b962 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	623b      	str	r3, [r7, #32]
}
 800b95e:	bf00      	nop
 800b960:	e7fe      	b.n	800b960 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d102      	bne.n	800b96e <xQueueGenericCreateStatic+0x7e>
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d101      	bne.n	800b972 <xQueueGenericCreateStatic+0x82>
 800b96e:	2301      	movs	r3, #1
 800b970:	e000      	b.n	800b974 <xQueueGenericCreateStatic+0x84>
 800b972:	2300      	movs	r3, #0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d10a      	bne.n	800b98e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97c:	f383 8811 	msr	BASEPRI, r3
 800b980:	f3bf 8f6f 	isb	sy
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	61fb      	str	r3, [r7, #28]
}
 800b98a:	bf00      	nop
 800b98c:	e7fe      	b.n	800b98c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b98e:	2350      	movs	r3, #80	; 0x50
 800b990:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2b50      	cmp	r3, #80	; 0x50
 800b996:	d00a      	beq.n	800b9ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	61bb      	str	r3, [r7, #24]
}
 800b9aa:	bf00      	nop
 800b9ac:	e7fe      	b.n	800b9ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00d      	beq.n	800b9d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9bc:	2201      	movs	r2, #1
 800b9be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	68b9      	ldr	r1, [r7, #8]
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f000 f805 	bl	800b9e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3730      	adds	r7, #48	; 0x30
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
 800b9ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d103      	bne.n	800b9fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	69ba      	ldr	r2, [r7, #24]
 800b9f8:	601a      	str	r2, [r3, #0]
 800b9fa:	e002      	b.n	800ba02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba0e:	2101      	movs	r1, #1
 800ba10:	69b8      	ldr	r0, [r7, #24]
 800ba12:	f7ff ff05 	bl	800b820 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	78fa      	ldrb	r2, [r7, #3]
 800ba1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba1e:	bf00      	nop
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b08e      	sub	sp, #56	; 0x38
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
 800ba34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba36:	2300      	movs	r3, #0
 800ba38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10a      	bne.n	800ba5a <xQueueGenericSend+0x32>
	__asm volatile
 800ba44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba48:	f383 8811 	msr	BASEPRI, r3
 800ba4c:	f3bf 8f6f 	isb	sy
 800ba50:	f3bf 8f4f 	dsb	sy
 800ba54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba56:	bf00      	nop
 800ba58:	e7fe      	b.n	800ba58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d103      	bne.n	800ba68 <xQueueGenericSend+0x40>
 800ba60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d101      	bne.n	800ba6c <xQueueGenericSend+0x44>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e000      	b.n	800ba6e <xQueueGenericSend+0x46>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d10a      	bne.n	800ba88 <xQueueGenericSend+0x60>
	__asm volatile
 800ba72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba84:	bf00      	nop
 800ba86:	e7fe      	b.n	800ba86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d103      	bne.n	800ba96 <xQueueGenericSend+0x6e>
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d101      	bne.n	800ba9a <xQueueGenericSend+0x72>
 800ba96:	2301      	movs	r3, #1
 800ba98:	e000      	b.n	800ba9c <xQueueGenericSend+0x74>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10a      	bne.n	800bab6 <xQueueGenericSend+0x8e>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	623b      	str	r3, [r7, #32]
}
 800bab2:	bf00      	nop
 800bab4:	e7fe      	b.n	800bab4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bab6:	f001 f9bd 	bl	800ce34 <xTaskGetSchedulerState>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d102      	bne.n	800bac6 <xQueueGenericSend+0x9e>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d101      	bne.n	800baca <xQueueGenericSend+0xa2>
 800bac6:	2301      	movs	r3, #1
 800bac8:	e000      	b.n	800bacc <xQueueGenericSend+0xa4>
 800baca:	2300      	movs	r3, #0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10a      	bne.n	800bae6 <xQueueGenericSend+0xbe>
	__asm volatile
 800bad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad4:	f383 8811 	msr	BASEPRI, r3
 800bad8:	f3bf 8f6f 	isb	sy
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	61fb      	str	r3, [r7, #28]
}
 800bae2:	bf00      	nop
 800bae4:	e7fe      	b.n	800bae4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bae6:	f001 fefd 	bl	800d8e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d302      	bcc.n	800bafc <xQueueGenericSend+0xd4>
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d129      	bne.n	800bb50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bafc:	683a      	ldr	r2, [r7, #0]
 800bafe:	68b9      	ldr	r1, [r7, #8]
 800bb00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb02:	f000 fa0b 	bl	800bf1c <prvCopyDataToQueue>
 800bb06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d010      	beq.n	800bb32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb12:	3324      	adds	r3, #36	; 0x24
 800bb14:	4618      	mov	r0, r3
 800bb16:	f000 ffcf 	bl	800cab8 <xTaskRemoveFromEventList>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d013      	beq.n	800bb48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb20:	4b3f      	ldr	r3, [pc, #252]	; (800bc20 <xQueueGenericSend+0x1f8>)
 800bb22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb26:	601a      	str	r2, [r3, #0]
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	e00a      	b.n	800bb48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d007      	beq.n	800bb48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb38:	4b39      	ldr	r3, [pc, #228]	; (800bc20 <xQueueGenericSend+0x1f8>)
 800bb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb3e:	601a      	str	r2, [r3, #0]
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb48:	f001 fefc 	bl	800d944 <vPortExitCritical>
				return pdPASS;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e063      	b.n	800bc18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d103      	bne.n	800bb5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb56:	f001 fef5 	bl	800d944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	e05c      	b.n	800bc18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d106      	bne.n	800bb72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb64:	f107 0314 	add.w	r3, r7, #20
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f001 f809 	bl	800cb80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb72:	f001 fee7 	bl	800d944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb76:	f000 fd7b 	bl	800c670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb7a:	f001 feb3 	bl	800d8e4 <vPortEnterCritical>
 800bb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb84:	b25b      	sxtb	r3, r3
 800bb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb8a:	d103      	bne.n	800bb94 <xQueueGenericSend+0x16c>
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb9a:	b25b      	sxtb	r3, r3
 800bb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba0:	d103      	bne.n	800bbaa <xQueueGenericSend+0x182>
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	2200      	movs	r2, #0
 800bba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbaa:	f001 fecb 	bl	800d944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbae:	1d3a      	adds	r2, r7, #4
 800bbb0:	f107 0314 	add.w	r3, r7, #20
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 fff8 	bl	800cbac <xTaskCheckForTimeOut>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d124      	bne.n	800bc0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bbc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbc4:	f000 faa2 	bl	800c10c <prvIsQueueFull>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d018      	beq.n	800bc00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd0:	3310      	adds	r3, #16
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f000 ff1e 	bl	800ca18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bbdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbde:	f000 fa2d 	bl	800c03c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bbe2:	f000 fd53 	bl	800c68c <xTaskResumeAll>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f47f af7c 	bne.w	800bae6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bbee:	4b0c      	ldr	r3, [pc, #48]	; (800bc20 <xQueueGenericSend+0x1f8>)
 800bbf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf4:	601a      	str	r2, [r3, #0]
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	e772      	b.n	800bae6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bc00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc02:	f000 fa1b 	bl	800c03c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc06:	f000 fd41 	bl	800c68c <xTaskResumeAll>
 800bc0a:	e76c      	b.n	800bae6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc0e:	f000 fa15 	bl	800c03c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc12:	f000 fd3b 	bl	800c68c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3738      	adds	r7, #56	; 0x38
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	e000ed04 	.word	0xe000ed04

0800bc24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b090      	sub	sp, #64	; 0x40
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
 800bc30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10a      	bne.n	800bc52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc4e:	bf00      	nop
 800bc50:	e7fe      	b.n	800bc50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d103      	bne.n	800bc60 <xQueueGenericSendFromISR+0x3c>
 800bc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d101      	bne.n	800bc64 <xQueueGenericSendFromISR+0x40>
 800bc60:	2301      	movs	r3, #1
 800bc62:	e000      	b.n	800bc66 <xQueueGenericSendFromISR+0x42>
 800bc64:	2300      	movs	r3, #0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d10a      	bne.n	800bc80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6e:	f383 8811 	msr	BASEPRI, r3
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc7c:	bf00      	nop
 800bc7e:	e7fe      	b.n	800bc7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d103      	bne.n	800bc8e <xQueueGenericSendFromISR+0x6a>
 800bc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d101      	bne.n	800bc92 <xQueueGenericSendFromISR+0x6e>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e000      	b.n	800bc94 <xQueueGenericSendFromISR+0x70>
 800bc92:	2300      	movs	r3, #0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10a      	bne.n	800bcae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9c:	f383 8811 	msr	BASEPRI, r3
 800bca0:	f3bf 8f6f 	isb	sy
 800bca4:	f3bf 8f4f 	dsb	sy
 800bca8:	623b      	str	r3, [r7, #32]
}
 800bcaa:	bf00      	nop
 800bcac:	e7fe      	b.n	800bcac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcae:	f001 fefb 	bl	800daa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bcb2:	f3ef 8211 	mrs	r2, BASEPRI
 800bcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcba:	f383 8811 	msr	BASEPRI, r3
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f3bf 8f4f 	dsb	sy
 800bcc6:	61fa      	str	r2, [r7, #28]
 800bcc8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bcca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d302      	bcc.n	800bce0 <xQueueGenericSendFromISR+0xbc>
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d12f      	bne.n	800bd40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	68b9      	ldr	r1, [r7, #8]
 800bcf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcf6:	f000 f911 	bl	800bf1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bcfa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bcfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd02:	d112      	bne.n	800bd2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d016      	beq.n	800bd3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0e:	3324      	adds	r3, #36	; 0x24
 800bd10:	4618      	mov	r0, r3
 800bd12:	f000 fed1 	bl	800cab8 <xTaskRemoveFromEventList>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00e      	beq.n	800bd3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00b      	beq.n	800bd3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2201      	movs	r2, #1
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	e007      	b.n	800bd3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd2e:	3301      	adds	r3, #1
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	b25a      	sxtb	r2, r3
 800bd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bd3e:	e001      	b.n	800bd44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd40:	2300      	movs	r3, #0
 800bd42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd46:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3740      	adds	r7, #64	; 0x40
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
	...

0800bd5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08c      	sub	sp, #48	; 0x30
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d10a      	bne.n	800bd8c <xQueueReceive+0x30>
	__asm volatile
 800bd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7a:	f383 8811 	msr	BASEPRI, r3
 800bd7e:	f3bf 8f6f 	isb	sy
 800bd82:	f3bf 8f4f 	dsb	sy
 800bd86:	623b      	str	r3, [r7, #32]
}
 800bd88:	bf00      	nop
 800bd8a:	e7fe      	b.n	800bd8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d103      	bne.n	800bd9a <xQueueReceive+0x3e>
 800bd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d101      	bne.n	800bd9e <xQueueReceive+0x42>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e000      	b.n	800bda0 <xQueueReceive+0x44>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10a      	bne.n	800bdba <xQueueReceive+0x5e>
	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	61fb      	str	r3, [r7, #28]
}
 800bdb6:	bf00      	nop
 800bdb8:	e7fe      	b.n	800bdb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdba:	f001 f83b 	bl	800ce34 <xTaskGetSchedulerState>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d102      	bne.n	800bdca <xQueueReceive+0x6e>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d101      	bne.n	800bdce <xQueueReceive+0x72>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e000      	b.n	800bdd0 <xQueueReceive+0x74>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10a      	bne.n	800bdea <xQueueReceive+0x8e>
	__asm volatile
 800bdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd8:	f383 8811 	msr	BASEPRI, r3
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	61bb      	str	r3, [r7, #24]
}
 800bde6:	bf00      	nop
 800bde8:	e7fe      	b.n	800bde8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdea:	f001 fd7b 	bl	800d8e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d01f      	beq.n	800be3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bdfa:	68b9      	ldr	r1, [r7, #8]
 800bdfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdfe:	f000 f8f7 	bl	800bff0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be04:	1e5a      	subs	r2, r3, #1
 800be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00f      	beq.n	800be32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be14:	3310      	adds	r3, #16
 800be16:	4618      	mov	r0, r3
 800be18:	f000 fe4e 	bl	800cab8 <xTaskRemoveFromEventList>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d007      	beq.n	800be32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be22:	4b3d      	ldr	r3, [pc, #244]	; (800bf18 <xQueueReceive+0x1bc>)
 800be24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be28:	601a      	str	r2, [r3, #0]
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be32:	f001 fd87 	bl	800d944 <vPortExitCritical>
				return pdPASS;
 800be36:	2301      	movs	r3, #1
 800be38:	e069      	b.n	800bf0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d103      	bne.n	800be48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be40:	f001 fd80 	bl	800d944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be44:	2300      	movs	r3, #0
 800be46:	e062      	b.n	800bf0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d106      	bne.n	800be5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be4e:	f107 0310 	add.w	r3, r7, #16
 800be52:	4618      	mov	r0, r3
 800be54:	f000 fe94 	bl	800cb80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be58:	2301      	movs	r3, #1
 800be5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be5c:	f001 fd72 	bl	800d944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be60:	f000 fc06 	bl	800c670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be64:	f001 fd3e 	bl	800d8e4 <vPortEnterCritical>
 800be68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be6e:	b25b      	sxtb	r3, r3
 800be70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be74:	d103      	bne.n	800be7e <xQueueReceive+0x122>
 800be76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be84:	b25b      	sxtb	r3, r3
 800be86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be8a:	d103      	bne.n	800be94 <xQueueReceive+0x138>
 800be8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be94:	f001 fd56 	bl	800d944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be98:	1d3a      	adds	r2, r7, #4
 800be9a:	f107 0310 	add.w	r3, r7, #16
 800be9e:	4611      	mov	r1, r2
 800bea0:	4618      	mov	r0, r3
 800bea2:	f000 fe83 	bl	800cbac <xTaskCheckForTimeOut>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d123      	bne.n	800bef4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800beac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beae:	f000 f917 	bl	800c0e0 <prvIsQueueEmpty>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d017      	beq.n	800bee8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800beb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beba:	3324      	adds	r3, #36	; 0x24
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	4611      	mov	r1, r2
 800bec0:	4618      	mov	r0, r3
 800bec2:	f000 fda9 	bl	800ca18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bec8:	f000 f8b8 	bl	800c03c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800becc:	f000 fbde 	bl	800c68c <xTaskResumeAll>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d189      	bne.n	800bdea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bed6:	4b10      	ldr	r3, [pc, #64]	; (800bf18 <xQueueReceive+0x1bc>)
 800bed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bedc:	601a      	str	r2, [r3, #0]
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	e780      	b.n	800bdea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beea:	f000 f8a7 	bl	800c03c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800beee:	f000 fbcd 	bl	800c68c <xTaskResumeAll>
 800bef2:	e77a      	b.n	800bdea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef6:	f000 f8a1 	bl	800c03c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800befa:	f000 fbc7 	bl	800c68c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800befe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf00:	f000 f8ee 	bl	800c0e0 <prvIsQueueEmpty>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f43f af6f 	beq.w	800bdea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3730      	adds	r7, #48	; 0x30
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	e000ed04 	.word	0xe000ed04

0800bf1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d10d      	bne.n	800bf56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d14d      	bne.n	800bfde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f000 ff92 	bl	800ce70 <xTaskPriorityDisinherit>
 800bf4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2200      	movs	r2, #0
 800bf52:	609a      	str	r2, [r3, #8]
 800bf54:	e043      	b.n	800bfde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d119      	bne.n	800bf90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6858      	ldr	r0, [r3, #4]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf64:	461a      	mov	r2, r3
 800bf66:	68b9      	ldr	r1, [r7, #8]
 800bf68:	f009 ffb0 	bl	8015ecc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	685a      	ldr	r2, [r3, #4]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf74:	441a      	add	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	685a      	ldr	r2, [r3, #4]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d32b      	bcc.n	800bfde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	605a      	str	r2, [r3, #4]
 800bf8e:	e026      	b.n	800bfde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	68d8      	ldr	r0, [r3, #12]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf98:	461a      	mov	r2, r3
 800bf9a:	68b9      	ldr	r1, [r7, #8]
 800bf9c:	f009 ff96 	bl	8015ecc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	68da      	ldr	r2, [r3, #12]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa8:	425b      	negs	r3, r3
 800bfaa:	441a      	add	r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	68da      	ldr	r2, [r3, #12]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d207      	bcs.n	800bfcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc4:	425b      	negs	r3, r3
 800bfc6:	441a      	add	r2, r3
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b02      	cmp	r3, #2
 800bfd0:	d105      	bne.n	800bfde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d002      	beq.n	800bfde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	1c5a      	adds	r2, r3, #1
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bfe6:	697b      	ldr	r3, [r7, #20]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3718      	adds	r7, #24
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d018      	beq.n	800c034 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	68da      	ldr	r2, [r3, #12]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00a:	441a      	add	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	68da      	ldr	r2, [r3, #12]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d303      	bcc.n	800c024 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	68d9      	ldr	r1, [r3, #12]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02c:	461a      	mov	r2, r3
 800c02e:	6838      	ldr	r0, [r7, #0]
 800c030:	f009 ff4c 	bl	8015ecc <memcpy>
	}
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c044:	f001 fc4e 	bl	800d8e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c04e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c050:	e011      	b.n	800c076 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c056:	2b00      	cmp	r3, #0
 800c058:	d012      	beq.n	800c080 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	3324      	adds	r3, #36	; 0x24
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 fd2a 	bl	800cab8 <xTaskRemoveFromEventList>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d001      	beq.n	800c06e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c06a:	f000 fe01 	bl	800cc70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
 800c070:	3b01      	subs	r3, #1
 800c072:	b2db      	uxtb	r3, r3
 800c074:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	dce9      	bgt.n	800c052 <prvUnlockQueue+0x16>
 800c07e:	e000      	b.n	800c082 <prvUnlockQueue+0x46>
					break;
 800c080:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	22ff      	movs	r2, #255	; 0xff
 800c086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c08a:	f001 fc5b 	bl	800d944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c08e:	f001 fc29 	bl	800d8e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c098:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c09a:	e011      	b.n	800c0c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d012      	beq.n	800c0ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	3310      	adds	r3, #16
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 fd05 	bl	800cab8 <xTaskRemoveFromEventList>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d001      	beq.n	800c0b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0b4:	f000 fddc 	bl	800cc70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0b8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	dce9      	bgt.n	800c09c <prvUnlockQueue+0x60>
 800c0c8:	e000      	b.n	800c0cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	22ff      	movs	r2, #255	; 0xff
 800c0d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0d4:	f001 fc36 	bl	800d944 <vPortExitCritical>
}
 800c0d8:	bf00      	nop
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0e8:	f001 fbfc 	bl	800d8e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d102      	bne.n	800c0fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	60fb      	str	r3, [r7, #12]
 800c0f8:	e001      	b.n	800c0fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0fe:	f001 fc21 	bl	800d944 <vPortExitCritical>

	return xReturn;
 800c102:	68fb      	ldr	r3, [r7, #12]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c114:	f001 fbe6 	bl	800d8e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c120:	429a      	cmp	r2, r3
 800c122:	d102      	bne.n	800c12a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c124:	2301      	movs	r3, #1
 800c126:	60fb      	str	r3, [r7, #12]
 800c128:	e001      	b.n	800c12e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c12a:	2300      	movs	r3, #0
 800c12c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c12e:	f001 fc09 	bl	800d944 <vPortExitCritical>

	return xReturn;
 800c132:	68fb      	ldr	r3, [r7, #12]
}
 800c134:	4618      	mov	r0, r3
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c13c:	b480      	push	{r7}
 800c13e:	b085      	sub	sp, #20
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c146:	2300      	movs	r3, #0
 800c148:	60fb      	str	r3, [r7, #12]
 800c14a:	e014      	b.n	800c176 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c14c:	4a0f      	ldr	r2, [pc, #60]	; (800c18c <vQueueAddToRegistry+0x50>)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10b      	bne.n	800c170 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c158:	490c      	ldr	r1, [pc, #48]	; (800c18c <vQueueAddToRegistry+0x50>)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	683a      	ldr	r2, [r7, #0]
 800c15e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c162:	4a0a      	ldr	r2, [pc, #40]	; (800c18c <vQueueAddToRegistry+0x50>)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	00db      	lsls	r3, r3, #3
 800c168:	4413      	add	r3, r2
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c16e:	e006      	b.n	800c17e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	3301      	adds	r3, #1
 800c174:	60fb      	str	r3, [r7, #12]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2b07      	cmp	r3, #7
 800c17a:	d9e7      	bls.n	800c14c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c17c:	bf00      	nop
 800c17e:	bf00      	nop
 800c180:	3714      	adds	r7, #20
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	200057cc 	.word	0x200057cc

0800c190 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c1a0:	f001 fba0 	bl	800d8e4 <vPortEnterCritical>
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1aa:	b25b      	sxtb	r3, r3
 800c1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b0:	d103      	bne.n	800c1ba <vQueueWaitForMessageRestricted+0x2a>
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1c0:	b25b      	sxtb	r3, r3
 800c1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c6:	d103      	bne.n	800c1d0 <vQueueWaitForMessageRestricted+0x40>
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1d0:	f001 fbb8 	bl	800d944 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d106      	bne.n	800c1ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	3324      	adds	r3, #36	; 0x24
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	68b9      	ldr	r1, [r7, #8]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f000 fc3b 	bl	800ca60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c1ea:	6978      	ldr	r0, [r7, #20]
 800c1ec:	f7ff ff26 	bl	800c03c <prvUnlockQueue>
	}
 800c1f0:	bf00      	nop
 800c1f2:	3718      	adds	r7, #24
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b08e      	sub	sp, #56	; 0x38
 800c1fc:	af04      	add	r7, sp, #16
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
 800c204:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10a      	bne.n	800c222 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	623b      	str	r3, [r7, #32]
}
 800c21e:	bf00      	nop
 800c220:	e7fe      	b.n	800c220 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10a      	bne.n	800c23e <xTaskCreateStatic+0x46>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	61fb      	str	r3, [r7, #28]
}
 800c23a:	bf00      	nop
 800c23c:	e7fe      	b.n	800c23c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c23e:	235c      	movs	r3, #92	; 0x5c
 800c240:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	2b5c      	cmp	r3, #92	; 0x5c
 800c246:	d00a      	beq.n	800c25e <xTaskCreateStatic+0x66>
	__asm volatile
 800c248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24c:	f383 8811 	msr	BASEPRI, r3
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	61bb      	str	r3, [r7, #24]
}
 800c25a:	bf00      	nop
 800c25c:	e7fe      	b.n	800c25c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c25e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	2b00      	cmp	r3, #0
 800c264:	d01e      	beq.n	800c2a4 <xTaskCreateStatic+0xac>
 800c266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d01b      	beq.n	800c2a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c274:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c278:	2202      	movs	r2, #2
 800c27a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c27e:	2300      	movs	r3, #0
 800c280:	9303      	str	r3, [sp, #12]
 800c282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c284:	9302      	str	r3, [sp, #8]
 800c286:	f107 0314 	add.w	r3, r7, #20
 800c28a:	9301      	str	r3, [sp, #4]
 800c28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	68b9      	ldr	r1, [r7, #8]
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f000 f850 	bl	800c33c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c29c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c29e:	f000 f8dd 	bl	800c45c <prvAddNewTaskToReadyList>
 800c2a2:	e001      	b.n	800c2a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c2a8:	697b      	ldr	r3, [r7, #20]
	}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3728      	adds	r7, #40	; 0x28
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b08c      	sub	sp, #48	; 0x30
 800c2b6:	af04      	add	r7, sp, #16
 800c2b8:	60f8      	str	r0, [r7, #12]
 800c2ba:	60b9      	str	r1, [r7, #8]
 800c2bc:	603b      	str	r3, [r7, #0]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c2c2:	88fb      	ldrh	r3, [r7, #6]
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f001 fc2e 	bl	800db28 <pvPortMalloc>
 800c2cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00e      	beq.n	800c2f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c2d4:	205c      	movs	r0, #92	; 0x5c
 800c2d6:	f001 fc27 	bl	800db28 <pvPortMalloc>
 800c2da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d003      	beq.n	800c2ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	631a      	str	r2, [r3, #48]	; 0x30
 800c2e8:	e005      	b.n	800c2f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c2ea:	6978      	ldr	r0, [r7, #20]
 800c2ec:	f001 fce8 	bl	800dcc0 <vPortFree>
 800c2f0:	e001      	b.n	800c2f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d017      	beq.n	800c32c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c304:	88fa      	ldrh	r2, [r7, #6]
 800c306:	2300      	movs	r3, #0
 800c308:	9303      	str	r3, [sp, #12]
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	9302      	str	r3, [sp, #8]
 800c30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c310:	9301      	str	r3, [sp, #4]
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	68b9      	ldr	r1, [r7, #8]
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f000 f80e 	bl	800c33c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c320:	69f8      	ldr	r0, [r7, #28]
 800c322:	f000 f89b 	bl	800c45c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c326:	2301      	movs	r3, #1
 800c328:	61bb      	str	r3, [r7, #24]
 800c32a:	e002      	b.n	800c332 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c32c:	f04f 33ff 	mov.w	r3, #4294967295
 800c330:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c332:	69bb      	ldr	r3, [r7, #24]
	}
 800c334:	4618      	mov	r0, r3
 800c336:	3720      	adds	r7, #32
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b088      	sub	sp, #32
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
 800c348:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	461a      	mov	r2, r3
 800c354:	21a5      	movs	r1, #165	; 0xa5
 800c356:	f009 fde1 	bl	8015f1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c364:	3b01      	subs	r3, #1
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	4413      	add	r3, r2
 800c36a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	f023 0307 	bic.w	r3, r3, #7
 800c372:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	f003 0307 	and.w	r3, r3, #7
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00a      	beq.n	800c394 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	617b      	str	r3, [r7, #20]
}
 800c390:	bf00      	nop
 800c392:	e7fe      	b.n	800c392 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d01f      	beq.n	800c3da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c39a:	2300      	movs	r3, #0
 800c39c:	61fb      	str	r3, [r7, #28]
 800c39e:	e012      	b.n	800c3c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	7819      	ldrb	r1, [r3, #0]
 800c3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	3334      	adds	r3, #52	; 0x34
 800c3b0:	460a      	mov	r2, r1
 800c3b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d006      	beq.n	800c3ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	61fb      	str	r3, [r7, #28]
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	2b0f      	cmp	r3, #15
 800c3ca:	d9e9      	bls.n	800c3a0 <prvInitialiseNewTask+0x64>
 800c3cc:	e000      	b.n	800c3d0 <prvInitialiseNewTask+0x94>
			{
				break;
 800c3ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c3d8:	e003      	b.n	800c3e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e4:	2b37      	cmp	r3, #55	; 0x37
 800c3e6:	d901      	bls.n	800c3ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c3e8:	2337      	movs	r3, #55	; 0x37
 800c3ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c400:	3304      	adds	r3, #4
 800c402:	4618      	mov	r0, r3
 800c404:	f7ff f978 	bl	800b6f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	3318      	adds	r3, #24
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7ff f973 	bl	800b6f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c416:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c420:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c426:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42a:	2200      	movs	r2, #0
 800c42c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	2200      	movs	r2, #0
 800c432:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c436:	683a      	ldr	r2, [r7, #0]
 800c438:	68f9      	ldr	r1, [r7, #12]
 800c43a:	69b8      	ldr	r0, [r7, #24]
 800c43c:	f001 f928 	bl	800d690 <pxPortInitialiseStack>
 800c440:	4602      	mov	r2, r0
 800c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c444:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c450:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c452:	bf00      	nop
 800c454:	3720      	adds	r7, #32
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
	...

0800c45c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c464:	f001 fa3e 	bl	800d8e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c468:	4b2d      	ldr	r3, [pc, #180]	; (800c520 <prvAddNewTaskToReadyList+0xc4>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3301      	adds	r3, #1
 800c46e:	4a2c      	ldr	r2, [pc, #176]	; (800c520 <prvAddNewTaskToReadyList+0xc4>)
 800c470:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c472:	4b2c      	ldr	r3, [pc, #176]	; (800c524 <prvAddNewTaskToReadyList+0xc8>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d109      	bne.n	800c48e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c47a:	4a2a      	ldr	r2, [pc, #168]	; (800c524 <prvAddNewTaskToReadyList+0xc8>)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c480:	4b27      	ldr	r3, [pc, #156]	; (800c520 <prvAddNewTaskToReadyList+0xc4>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b01      	cmp	r3, #1
 800c486:	d110      	bne.n	800c4aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c488:	f000 fc16 	bl	800ccb8 <prvInitialiseTaskLists>
 800c48c:	e00d      	b.n	800c4aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c48e:	4b26      	ldr	r3, [pc, #152]	; (800c528 <prvAddNewTaskToReadyList+0xcc>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d109      	bne.n	800c4aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c496:	4b23      	ldr	r3, [pc, #140]	; (800c524 <prvAddNewTaskToReadyList+0xc8>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d802      	bhi.n	800c4aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c4a4:	4a1f      	ldr	r2, [pc, #124]	; (800c524 <prvAddNewTaskToReadyList+0xc8>)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c4aa:	4b20      	ldr	r3, [pc, #128]	; (800c52c <prvAddNewTaskToReadyList+0xd0>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	4a1e      	ldr	r2, [pc, #120]	; (800c52c <prvAddNewTaskToReadyList+0xd0>)
 800c4b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c4b4:	4b1d      	ldr	r3, [pc, #116]	; (800c52c <prvAddNewTaskToReadyList+0xd0>)
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c0:	4b1b      	ldr	r3, [pc, #108]	; (800c530 <prvAddNewTaskToReadyList+0xd4>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d903      	bls.n	800c4d0 <prvAddNewTaskToReadyList+0x74>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4cc:	4a18      	ldr	r2, [pc, #96]	; (800c530 <prvAddNewTaskToReadyList+0xd4>)
 800c4ce:	6013      	str	r3, [r2, #0]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	4413      	add	r3, r2
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	4a15      	ldr	r2, [pc, #84]	; (800c534 <prvAddNewTaskToReadyList+0xd8>)
 800c4de:	441a      	add	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	3304      	adds	r3, #4
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	4610      	mov	r0, r2
 800c4e8:	f7ff f913 	bl	800b712 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c4ec:	f001 fa2a 	bl	800d944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c4f0:	4b0d      	ldr	r3, [pc, #52]	; (800c528 <prvAddNewTaskToReadyList+0xcc>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00e      	beq.n	800c516 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4f8:	4b0a      	ldr	r3, [pc, #40]	; (800c524 <prvAddNewTaskToReadyList+0xc8>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c502:	429a      	cmp	r2, r3
 800c504:	d207      	bcs.n	800c516 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c506:	4b0c      	ldr	r3, [pc, #48]	; (800c538 <prvAddNewTaskToReadyList+0xdc>)
 800c508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c50c:	601a      	str	r2, [r3, #0]
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c516:	bf00      	nop
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	200019b8 	.word	0x200019b8
 800c524:	200014e4 	.word	0x200014e4
 800c528:	200019c4 	.word	0x200019c4
 800c52c:	200019d4 	.word	0x200019d4
 800c530:	200019c0 	.word	0x200019c0
 800c534:	200014e8 	.word	0x200014e8
 800c538:	e000ed04 	.word	0xe000ed04

0800c53c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c544:	2300      	movs	r3, #0
 800c546:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d017      	beq.n	800c57e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c54e:	4b13      	ldr	r3, [pc, #76]	; (800c59c <vTaskDelay+0x60>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00a      	beq.n	800c56c <vTaskDelay+0x30>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	60bb      	str	r3, [r7, #8]
}
 800c568:	bf00      	nop
 800c56a:	e7fe      	b.n	800c56a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c56c:	f000 f880 	bl	800c670 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c570:	2100      	movs	r1, #0
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fcea 	bl	800cf4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c578:	f000 f888 	bl	800c68c <xTaskResumeAll>
 800c57c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d107      	bne.n	800c594 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c584:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <vTaskDelay+0x64>)
 800c586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c58a:	601a      	str	r2, [r3, #0]
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c594:	bf00      	nop
 800c596:	3710      	adds	r7, #16
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	200019e0 	.word	0x200019e0
 800c5a0:	e000ed04 	.word	0xe000ed04

0800c5a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b08a      	sub	sp, #40	; 0x28
 800c5a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c5b2:	463a      	mov	r2, r7
 800c5b4:	1d39      	adds	r1, r7, #4
 800c5b6:	f107 0308 	add.w	r3, r7, #8
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7ff f848 	bl	800b650 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c5c0:	6839      	ldr	r1, [r7, #0]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	68ba      	ldr	r2, [r7, #8]
 800c5c6:	9202      	str	r2, [sp, #8]
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	460a      	mov	r2, r1
 800c5d2:	4921      	ldr	r1, [pc, #132]	; (800c658 <vTaskStartScheduler+0xb4>)
 800c5d4:	4821      	ldr	r0, [pc, #132]	; (800c65c <vTaskStartScheduler+0xb8>)
 800c5d6:	f7ff fe0f 	bl	800c1f8 <xTaskCreateStatic>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	4a20      	ldr	r2, [pc, #128]	; (800c660 <vTaskStartScheduler+0xbc>)
 800c5de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c5e0:	4b1f      	ldr	r3, [pc, #124]	; (800c660 <vTaskStartScheduler+0xbc>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d002      	beq.n	800c5ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	617b      	str	r3, [r7, #20]
 800c5ec:	e001      	b.n	800c5f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d102      	bne.n	800c5fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c5f8:	f000 fcfc 	bl	800cff4 <xTimerCreateTimerTask>
 800c5fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d116      	bne.n	800c632 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c608:	f383 8811 	msr	BASEPRI, r3
 800c60c:	f3bf 8f6f 	isb	sy
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	613b      	str	r3, [r7, #16]
}
 800c616:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c618:	4b12      	ldr	r3, [pc, #72]	; (800c664 <vTaskStartScheduler+0xc0>)
 800c61a:	f04f 32ff 	mov.w	r2, #4294967295
 800c61e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c620:	4b11      	ldr	r3, [pc, #68]	; (800c668 <vTaskStartScheduler+0xc4>)
 800c622:	2201      	movs	r2, #1
 800c624:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c626:	4b11      	ldr	r3, [pc, #68]	; (800c66c <vTaskStartScheduler+0xc8>)
 800c628:	2200      	movs	r2, #0
 800c62a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c62c:	f001 f8b8 	bl	800d7a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c630:	e00e      	b.n	800c650 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c638:	d10a      	bne.n	800c650 <vTaskStartScheduler+0xac>
	__asm volatile
 800c63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63e:	f383 8811 	msr	BASEPRI, r3
 800c642:	f3bf 8f6f 	isb	sy
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	60fb      	str	r3, [r7, #12]
}
 800c64c:	bf00      	nop
 800c64e:	e7fe      	b.n	800c64e <vTaskStartScheduler+0xaa>
}
 800c650:	bf00      	nop
 800c652:	3718      	adds	r7, #24
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	080169f8 	.word	0x080169f8
 800c65c:	0800cc89 	.word	0x0800cc89
 800c660:	200019dc 	.word	0x200019dc
 800c664:	200019d8 	.word	0x200019d8
 800c668:	200019c4 	.word	0x200019c4
 800c66c:	200019bc 	.word	0x200019bc

0800c670 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c670:	b480      	push	{r7}
 800c672:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c674:	4b04      	ldr	r3, [pc, #16]	; (800c688 <vTaskSuspendAll+0x18>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	3301      	adds	r3, #1
 800c67a:	4a03      	ldr	r2, [pc, #12]	; (800c688 <vTaskSuspendAll+0x18>)
 800c67c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c67e:	bf00      	nop
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr
 800c688:	200019e0 	.word	0x200019e0

0800c68c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c692:	2300      	movs	r3, #0
 800c694:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c696:	2300      	movs	r3, #0
 800c698:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c69a:	4b42      	ldr	r3, [pc, #264]	; (800c7a4 <xTaskResumeAll+0x118>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d10a      	bne.n	800c6b8 <xTaskResumeAll+0x2c>
	__asm volatile
 800c6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a6:	f383 8811 	msr	BASEPRI, r3
 800c6aa:	f3bf 8f6f 	isb	sy
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	603b      	str	r3, [r7, #0]
}
 800c6b4:	bf00      	nop
 800c6b6:	e7fe      	b.n	800c6b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c6b8:	f001 f914 	bl	800d8e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c6bc:	4b39      	ldr	r3, [pc, #228]	; (800c7a4 <xTaskResumeAll+0x118>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	4a38      	ldr	r2, [pc, #224]	; (800c7a4 <xTaskResumeAll+0x118>)
 800c6c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6c6:	4b37      	ldr	r3, [pc, #220]	; (800c7a4 <xTaskResumeAll+0x118>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d162      	bne.n	800c794 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c6ce:	4b36      	ldr	r3, [pc, #216]	; (800c7a8 <xTaskResumeAll+0x11c>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d05e      	beq.n	800c794 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6d6:	e02f      	b.n	800c738 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6d8:	4b34      	ldr	r3, [pc, #208]	; (800c7ac <xTaskResumeAll+0x120>)
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	3318      	adds	r3, #24
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7ff f871 	bl	800b7cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7ff f86c 	bl	800b7cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6f8:	4b2d      	ldr	r3, [pc, #180]	; (800c7b0 <xTaskResumeAll+0x124>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d903      	bls.n	800c708 <xTaskResumeAll+0x7c>
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c704:	4a2a      	ldr	r2, [pc, #168]	; (800c7b0 <xTaskResumeAll+0x124>)
 800c706:	6013      	str	r3, [r2, #0]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c70c:	4613      	mov	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4413      	add	r3, r2
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4a27      	ldr	r2, [pc, #156]	; (800c7b4 <xTaskResumeAll+0x128>)
 800c716:	441a      	add	r2, r3
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	3304      	adds	r3, #4
 800c71c:	4619      	mov	r1, r3
 800c71e:	4610      	mov	r0, r2
 800c720:	f7fe fff7 	bl	800b712 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c728:	4b23      	ldr	r3, [pc, #140]	; (800c7b8 <xTaskResumeAll+0x12c>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72e:	429a      	cmp	r2, r3
 800c730:	d302      	bcc.n	800c738 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c732:	4b22      	ldr	r3, [pc, #136]	; (800c7bc <xTaskResumeAll+0x130>)
 800c734:	2201      	movs	r2, #1
 800c736:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c738:	4b1c      	ldr	r3, [pc, #112]	; (800c7ac <xTaskResumeAll+0x120>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1cb      	bne.n	800c6d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d001      	beq.n	800c74a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c746:	f000 fb55 	bl	800cdf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c74a:	4b1d      	ldr	r3, [pc, #116]	; (800c7c0 <xTaskResumeAll+0x134>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d010      	beq.n	800c778 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c756:	f000 f847 	bl	800c7e8 <xTaskIncrementTick>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c760:	4b16      	ldr	r3, [pc, #88]	; (800c7bc <xTaskResumeAll+0x130>)
 800c762:	2201      	movs	r2, #1
 800c764:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	3b01      	subs	r3, #1
 800c76a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1f1      	bne.n	800c756 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c772:	4b13      	ldr	r3, [pc, #76]	; (800c7c0 <xTaskResumeAll+0x134>)
 800c774:	2200      	movs	r2, #0
 800c776:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c778:	4b10      	ldr	r3, [pc, #64]	; (800c7bc <xTaskResumeAll+0x130>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d009      	beq.n	800c794 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c780:	2301      	movs	r3, #1
 800c782:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c784:	4b0f      	ldr	r3, [pc, #60]	; (800c7c4 <xTaskResumeAll+0x138>)
 800c786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c78a:	601a      	str	r2, [r3, #0]
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c794:	f001 f8d6 	bl	800d944 <vPortExitCritical>

	return xAlreadyYielded;
 800c798:	68bb      	ldr	r3, [r7, #8]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	200019e0 	.word	0x200019e0
 800c7a8:	200019b8 	.word	0x200019b8
 800c7ac:	20001978 	.word	0x20001978
 800c7b0:	200019c0 	.word	0x200019c0
 800c7b4:	200014e8 	.word	0x200014e8
 800c7b8:	200014e4 	.word	0x200014e4
 800c7bc:	200019cc 	.word	0x200019cc
 800c7c0:	200019c8 	.word	0x200019c8
 800c7c4:	e000ed04 	.word	0xe000ed04

0800c7c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c7ce:	4b05      	ldr	r3, [pc, #20]	; (800c7e4 <xTaskGetTickCount+0x1c>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c7d4:	687b      	ldr	r3, [r7, #4]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	200019bc 	.word	0x200019bc

0800c7e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7f2:	4b4f      	ldr	r3, [pc, #316]	; (800c930 <xTaskIncrementTick+0x148>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f040 808f 	bne.w	800c91a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c7fc:	4b4d      	ldr	r3, [pc, #308]	; (800c934 <xTaskIncrementTick+0x14c>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	3301      	adds	r3, #1
 800c802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c804:	4a4b      	ldr	r2, [pc, #300]	; (800c934 <xTaskIncrementTick+0x14c>)
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d120      	bne.n	800c852 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c810:	4b49      	ldr	r3, [pc, #292]	; (800c938 <xTaskIncrementTick+0x150>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00a      	beq.n	800c830 <xTaskIncrementTick+0x48>
	__asm volatile
 800c81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81e:	f383 8811 	msr	BASEPRI, r3
 800c822:	f3bf 8f6f 	isb	sy
 800c826:	f3bf 8f4f 	dsb	sy
 800c82a:	603b      	str	r3, [r7, #0]
}
 800c82c:	bf00      	nop
 800c82e:	e7fe      	b.n	800c82e <xTaskIncrementTick+0x46>
 800c830:	4b41      	ldr	r3, [pc, #260]	; (800c938 <xTaskIncrementTick+0x150>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	60fb      	str	r3, [r7, #12]
 800c836:	4b41      	ldr	r3, [pc, #260]	; (800c93c <xTaskIncrementTick+0x154>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a3f      	ldr	r2, [pc, #252]	; (800c938 <xTaskIncrementTick+0x150>)
 800c83c:	6013      	str	r3, [r2, #0]
 800c83e:	4a3f      	ldr	r2, [pc, #252]	; (800c93c <xTaskIncrementTick+0x154>)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6013      	str	r3, [r2, #0]
 800c844:	4b3e      	ldr	r3, [pc, #248]	; (800c940 <xTaskIncrementTick+0x158>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	3301      	adds	r3, #1
 800c84a:	4a3d      	ldr	r2, [pc, #244]	; (800c940 <xTaskIncrementTick+0x158>)
 800c84c:	6013      	str	r3, [r2, #0]
 800c84e:	f000 fad1 	bl	800cdf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c852:	4b3c      	ldr	r3, [pc, #240]	; (800c944 <xTaskIncrementTick+0x15c>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	693a      	ldr	r2, [r7, #16]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d349      	bcc.n	800c8f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c85c:	4b36      	ldr	r3, [pc, #216]	; (800c938 <xTaskIncrementTick+0x150>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d104      	bne.n	800c870 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c866:	4b37      	ldr	r3, [pc, #220]	; (800c944 <xTaskIncrementTick+0x15c>)
 800c868:	f04f 32ff 	mov.w	r2, #4294967295
 800c86c:	601a      	str	r2, [r3, #0]
					break;
 800c86e:	e03f      	b.n	800c8f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c870:	4b31      	ldr	r3, [pc, #196]	; (800c938 <xTaskIncrementTick+0x150>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	68db      	ldr	r3, [r3, #12]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c880:	693a      	ldr	r2, [r7, #16]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	429a      	cmp	r2, r3
 800c886:	d203      	bcs.n	800c890 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c888:	4a2e      	ldr	r2, [pc, #184]	; (800c944 <xTaskIncrementTick+0x15c>)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c88e:	e02f      	b.n	800c8f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	3304      	adds	r3, #4
 800c894:	4618      	mov	r0, r3
 800c896:	f7fe ff99 	bl	800b7cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d004      	beq.n	800c8ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	3318      	adds	r3, #24
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fe ff90 	bl	800b7cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b0:	4b25      	ldr	r3, [pc, #148]	; (800c948 <xTaskIncrementTick+0x160>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d903      	bls.n	800c8c0 <xTaskIncrementTick+0xd8>
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8bc:	4a22      	ldr	r2, [pc, #136]	; (800c948 <xTaskIncrementTick+0x160>)
 800c8be:	6013      	str	r3, [r2, #0]
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	4413      	add	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4a1f      	ldr	r2, [pc, #124]	; (800c94c <xTaskIncrementTick+0x164>)
 800c8ce:	441a      	add	r2, r3
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	3304      	adds	r3, #4
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	f7fe ff1b 	bl	800b712 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e0:	4b1b      	ldr	r3, [pc, #108]	; (800c950 <xTaskIncrementTick+0x168>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d3b8      	bcc.n	800c85c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8ee:	e7b5      	b.n	800c85c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c8f0:	4b17      	ldr	r3, [pc, #92]	; (800c950 <xTaskIncrementTick+0x168>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8f6:	4915      	ldr	r1, [pc, #84]	; (800c94c <xTaskIncrementTick+0x164>)
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	4413      	add	r3, r2
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	440b      	add	r3, r1
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2b01      	cmp	r3, #1
 800c906:	d901      	bls.n	800c90c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c908:	2301      	movs	r3, #1
 800c90a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c90c:	4b11      	ldr	r3, [pc, #68]	; (800c954 <xTaskIncrementTick+0x16c>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d007      	beq.n	800c924 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c914:	2301      	movs	r3, #1
 800c916:	617b      	str	r3, [r7, #20]
 800c918:	e004      	b.n	800c924 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c91a:	4b0f      	ldr	r3, [pc, #60]	; (800c958 <xTaskIncrementTick+0x170>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	3301      	adds	r3, #1
 800c920:	4a0d      	ldr	r2, [pc, #52]	; (800c958 <xTaskIncrementTick+0x170>)
 800c922:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c924:	697b      	ldr	r3, [r7, #20]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3718      	adds	r7, #24
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	200019e0 	.word	0x200019e0
 800c934:	200019bc 	.word	0x200019bc
 800c938:	20001970 	.word	0x20001970
 800c93c:	20001974 	.word	0x20001974
 800c940:	200019d0 	.word	0x200019d0
 800c944:	200019d8 	.word	0x200019d8
 800c948:	200019c0 	.word	0x200019c0
 800c94c:	200014e8 	.word	0x200014e8
 800c950:	200014e4 	.word	0x200014e4
 800c954:	200019cc 	.word	0x200019cc
 800c958:	200019c8 	.word	0x200019c8

0800c95c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c962:	4b28      	ldr	r3, [pc, #160]	; (800ca04 <vTaskSwitchContext+0xa8>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d003      	beq.n	800c972 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c96a:	4b27      	ldr	r3, [pc, #156]	; (800ca08 <vTaskSwitchContext+0xac>)
 800c96c:	2201      	movs	r2, #1
 800c96e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c970:	e041      	b.n	800c9f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c972:	4b25      	ldr	r3, [pc, #148]	; (800ca08 <vTaskSwitchContext+0xac>)
 800c974:	2200      	movs	r2, #0
 800c976:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c978:	4b24      	ldr	r3, [pc, #144]	; (800ca0c <vTaskSwitchContext+0xb0>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	60fb      	str	r3, [r7, #12]
 800c97e:	e010      	b.n	800c9a2 <vTaskSwitchContext+0x46>
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10a      	bne.n	800c99c <vTaskSwitchContext+0x40>
	__asm volatile
 800c986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	607b      	str	r3, [r7, #4]
}
 800c998:	bf00      	nop
 800c99a:	e7fe      	b.n	800c99a <vTaskSwitchContext+0x3e>
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	60fb      	str	r3, [r7, #12]
 800c9a2:	491b      	ldr	r1, [pc, #108]	; (800ca10 <vTaskSwitchContext+0xb4>)
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	4413      	add	r3, r2
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	440b      	add	r3, r1
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d0e4      	beq.n	800c980 <vTaskSwitchContext+0x24>
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4413      	add	r3, r2
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	4a13      	ldr	r2, [pc, #76]	; (800ca10 <vTaskSwitchContext+0xb4>)
 800c9c2:	4413      	add	r3, r2
 800c9c4:	60bb      	str	r3, [r7, #8]
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	685a      	ldr	r2, [r3, #4]
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	605a      	str	r2, [r3, #4]
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	685a      	ldr	r2, [r3, #4]
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	3308      	adds	r3, #8
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d104      	bne.n	800c9e6 <vTaskSwitchContext+0x8a>
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	685a      	ldr	r2, [r3, #4]
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	605a      	str	r2, [r3, #4]
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	4a09      	ldr	r2, [pc, #36]	; (800ca14 <vTaskSwitchContext+0xb8>)
 800c9ee:	6013      	str	r3, [r2, #0]
 800c9f0:	4a06      	ldr	r2, [pc, #24]	; (800ca0c <vTaskSwitchContext+0xb0>)
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6013      	str	r3, [r2, #0]
}
 800c9f6:	bf00      	nop
 800c9f8:	3714      	adds	r7, #20
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	200019e0 	.word	0x200019e0
 800ca08:	200019cc 	.word	0x200019cc
 800ca0c:	200019c0 	.word	0x200019c0
 800ca10:	200014e8 	.word	0x200014e8
 800ca14:	200014e4 	.word	0x200014e4

0800ca18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10a      	bne.n	800ca3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	60fb      	str	r3, [r7, #12]
}
 800ca3a:	bf00      	nop
 800ca3c:	e7fe      	b.n	800ca3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca3e:	4b07      	ldr	r3, [pc, #28]	; (800ca5c <vTaskPlaceOnEventList+0x44>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	3318      	adds	r3, #24
 800ca44:	4619      	mov	r1, r3
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7fe fe87 	bl	800b75a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca4c:	2101      	movs	r1, #1
 800ca4e:	6838      	ldr	r0, [r7, #0]
 800ca50:	f000 fa7c 	bl	800cf4c <prvAddCurrentTaskToDelayedList>
}
 800ca54:	bf00      	nop
 800ca56:	3710      	adds	r7, #16
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	200014e4 	.word	0x200014e4

0800ca60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d10a      	bne.n	800ca88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ca72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca76:	f383 8811 	msr	BASEPRI, r3
 800ca7a:	f3bf 8f6f 	isb	sy
 800ca7e:	f3bf 8f4f 	dsb	sy
 800ca82:	617b      	str	r3, [r7, #20]
}
 800ca84:	bf00      	nop
 800ca86:	e7fe      	b.n	800ca86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca88:	4b0a      	ldr	r3, [pc, #40]	; (800cab4 <vTaskPlaceOnEventListRestricted+0x54>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	3318      	adds	r3, #24
 800ca8e:	4619      	mov	r1, r3
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f7fe fe3e 	bl	800b712 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d002      	beq.n	800caa2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ca9c:	f04f 33ff 	mov.w	r3, #4294967295
 800caa0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800caa2:	6879      	ldr	r1, [r7, #4]
 800caa4:	68b8      	ldr	r0, [r7, #8]
 800caa6:	f000 fa51 	bl	800cf4c <prvAddCurrentTaskToDelayedList>
	}
 800caaa:	bf00      	nop
 800caac:	3718      	adds	r7, #24
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	200014e4 	.word	0x200014e4

0800cab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b086      	sub	sp, #24
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d10a      	bne.n	800cae4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	60fb      	str	r3, [r7, #12]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	3318      	adds	r3, #24
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fe fe6f 	bl	800b7cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caee:	4b1e      	ldr	r3, [pc, #120]	; (800cb68 <xTaskRemoveFromEventList+0xb0>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d11d      	bne.n	800cb32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	3304      	adds	r3, #4
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fe fe66 	bl	800b7cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb04:	4b19      	ldr	r3, [pc, #100]	; (800cb6c <xTaskRemoveFromEventList+0xb4>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d903      	bls.n	800cb14 <xTaskRemoveFromEventList+0x5c>
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb10:	4a16      	ldr	r2, [pc, #88]	; (800cb6c <xTaskRemoveFromEventList+0xb4>)
 800cb12:	6013      	str	r3, [r2, #0]
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb18:	4613      	mov	r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4413      	add	r3, r2
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4a13      	ldr	r2, [pc, #76]	; (800cb70 <xTaskRemoveFromEventList+0xb8>)
 800cb22:	441a      	add	r2, r3
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	3304      	adds	r3, #4
 800cb28:	4619      	mov	r1, r3
 800cb2a:	4610      	mov	r0, r2
 800cb2c:	f7fe fdf1 	bl	800b712 <vListInsertEnd>
 800cb30:	e005      	b.n	800cb3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	3318      	adds	r3, #24
 800cb36:	4619      	mov	r1, r3
 800cb38:	480e      	ldr	r0, [pc, #56]	; (800cb74 <xTaskRemoveFromEventList+0xbc>)
 800cb3a:	f7fe fdea 	bl	800b712 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb42:	4b0d      	ldr	r3, [pc, #52]	; (800cb78 <xTaskRemoveFromEventList+0xc0>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d905      	bls.n	800cb58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cb50:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <xTaskRemoveFromEventList+0xc4>)
 800cb52:	2201      	movs	r2, #1
 800cb54:	601a      	str	r2, [r3, #0]
 800cb56:	e001      	b.n	800cb5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cb5c:	697b      	ldr	r3, [r7, #20]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3718      	adds	r7, #24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	200019e0 	.word	0x200019e0
 800cb6c:	200019c0 	.word	0x200019c0
 800cb70:	200014e8 	.word	0x200014e8
 800cb74:	20001978 	.word	0x20001978
 800cb78:	200014e4 	.word	0x200014e4
 800cb7c:	200019cc 	.word	0x200019cc

0800cb80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb88:	4b06      	ldr	r3, [pc, #24]	; (800cba4 <vTaskInternalSetTimeOutState+0x24>)
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cb90:	4b05      	ldr	r3, [pc, #20]	; (800cba8 <vTaskInternalSetTimeOutState+0x28>)
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	605a      	str	r2, [r3, #4]
}
 800cb98:	bf00      	nop
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr
 800cba4:	200019d0 	.word	0x200019d0
 800cba8:	200019bc 	.word	0x200019bc

0800cbac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b088      	sub	sp, #32
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10a      	bne.n	800cbd2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	613b      	str	r3, [r7, #16]
}
 800cbce:	bf00      	nop
 800cbd0:	e7fe      	b.n	800cbd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d10a      	bne.n	800cbee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbdc:	f383 8811 	msr	BASEPRI, r3
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	f3bf 8f4f 	dsb	sy
 800cbe8:	60fb      	str	r3, [r7, #12]
}
 800cbea:	bf00      	nop
 800cbec:	e7fe      	b.n	800cbec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cbee:	f000 fe79 	bl	800d8e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cbf2:	4b1d      	ldr	r3, [pc, #116]	; (800cc68 <xTaskCheckForTimeOut+0xbc>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	69ba      	ldr	r2, [r7, #24]
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc0a:	d102      	bne.n	800cc12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	61fb      	str	r3, [r7, #28]
 800cc10:	e023      	b.n	800cc5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	4b15      	ldr	r3, [pc, #84]	; (800cc6c <xTaskCheckForTimeOut+0xc0>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d007      	beq.n	800cc2e <xTaskCheckForTimeOut+0x82>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d302      	bcc.n	800cc2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	61fb      	str	r3, [r7, #28]
 800cc2c:	e015      	b.n	800cc5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d20b      	bcs.n	800cc50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	1ad2      	subs	r2, r2, r3
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f7ff ff9b 	bl	800cb80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	61fb      	str	r3, [r7, #28]
 800cc4e:	e004      	b.n	800cc5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	2200      	movs	r2, #0
 800cc54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc56:	2301      	movs	r3, #1
 800cc58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc5a:	f000 fe73 	bl	800d944 <vPortExitCritical>

	return xReturn;
 800cc5e:	69fb      	ldr	r3, [r7, #28]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3720      	adds	r7, #32
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	200019bc 	.word	0x200019bc
 800cc6c:	200019d0 	.word	0x200019d0

0800cc70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc70:	b480      	push	{r7}
 800cc72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc74:	4b03      	ldr	r3, [pc, #12]	; (800cc84 <vTaskMissedYield+0x14>)
 800cc76:	2201      	movs	r2, #1
 800cc78:	601a      	str	r2, [r3, #0]
}
 800cc7a:	bf00      	nop
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr
 800cc84:	200019cc 	.word	0x200019cc

0800cc88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cc90:	f000 f852 	bl	800cd38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cc94:	4b06      	ldr	r3, [pc, #24]	; (800ccb0 <prvIdleTask+0x28>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d9f9      	bls.n	800cc90 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cc9c:	4b05      	ldr	r3, [pc, #20]	; (800ccb4 <prvIdleTask+0x2c>)
 800cc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cca2:	601a      	str	r2, [r3, #0]
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ccac:	e7f0      	b.n	800cc90 <prvIdleTask+0x8>
 800ccae:	bf00      	nop
 800ccb0:	200014e8 	.word	0x200014e8
 800ccb4:	e000ed04 	.word	0xe000ed04

0800ccb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	607b      	str	r3, [r7, #4]
 800ccc2:	e00c      	b.n	800ccde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	4413      	add	r3, r2
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	4a12      	ldr	r2, [pc, #72]	; (800cd18 <prvInitialiseTaskLists+0x60>)
 800ccd0:	4413      	add	r3, r2
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fe fcf0 	bl	800b6b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	607b      	str	r3, [r7, #4]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2b37      	cmp	r3, #55	; 0x37
 800cce2:	d9ef      	bls.n	800ccc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cce4:	480d      	ldr	r0, [pc, #52]	; (800cd1c <prvInitialiseTaskLists+0x64>)
 800cce6:	f7fe fce7 	bl	800b6b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ccea:	480d      	ldr	r0, [pc, #52]	; (800cd20 <prvInitialiseTaskLists+0x68>)
 800ccec:	f7fe fce4 	bl	800b6b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ccf0:	480c      	ldr	r0, [pc, #48]	; (800cd24 <prvInitialiseTaskLists+0x6c>)
 800ccf2:	f7fe fce1 	bl	800b6b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ccf6:	480c      	ldr	r0, [pc, #48]	; (800cd28 <prvInitialiseTaskLists+0x70>)
 800ccf8:	f7fe fcde 	bl	800b6b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ccfc:	480b      	ldr	r0, [pc, #44]	; (800cd2c <prvInitialiseTaskLists+0x74>)
 800ccfe:	f7fe fcdb 	bl	800b6b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cd02:	4b0b      	ldr	r3, [pc, #44]	; (800cd30 <prvInitialiseTaskLists+0x78>)
 800cd04:	4a05      	ldr	r2, [pc, #20]	; (800cd1c <prvInitialiseTaskLists+0x64>)
 800cd06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cd08:	4b0a      	ldr	r3, [pc, #40]	; (800cd34 <prvInitialiseTaskLists+0x7c>)
 800cd0a:	4a05      	ldr	r2, [pc, #20]	; (800cd20 <prvInitialiseTaskLists+0x68>)
 800cd0c:	601a      	str	r2, [r3, #0]
}
 800cd0e:	bf00      	nop
 800cd10:	3708      	adds	r7, #8
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	200014e8 	.word	0x200014e8
 800cd1c:	20001948 	.word	0x20001948
 800cd20:	2000195c 	.word	0x2000195c
 800cd24:	20001978 	.word	0x20001978
 800cd28:	2000198c 	.word	0x2000198c
 800cd2c:	200019a4 	.word	0x200019a4
 800cd30:	20001970 	.word	0x20001970
 800cd34:	20001974 	.word	0x20001974

0800cd38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd3e:	e019      	b.n	800cd74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd40:	f000 fdd0 	bl	800d8e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd44:	4b10      	ldr	r3, [pc, #64]	; (800cd88 <prvCheckTasksWaitingTermination+0x50>)
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	3304      	adds	r3, #4
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fe fd3b 	bl	800b7cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd56:	4b0d      	ldr	r3, [pc, #52]	; (800cd8c <prvCheckTasksWaitingTermination+0x54>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	4a0b      	ldr	r2, [pc, #44]	; (800cd8c <prvCheckTasksWaitingTermination+0x54>)
 800cd5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd60:	4b0b      	ldr	r3, [pc, #44]	; (800cd90 <prvCheckTasksWaitingTermination+0x58>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	3b01      	subs	r3, #1
 800cd66:	4a0a      	ldr	r2, [pc, #40]	; (800cd90 <prvCheckTasksWaitingTermination+0x58>)
 800cd68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd6a:	f000 fdeb 	bl	800d944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 f810 	bl	800cd94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd74:	4b06      	ldr	r3, [pc, #24]	; (800cd90 <prvCheckTasksWaitingTermination+0x58>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1e1      	bne.n	800cd40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd7c:	bf00      	nop
 800cd7e:	bf00      	nop
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	2000198c 	.word	0x2000198c
 800cd8c:	200019b8 	.word	0x200019b8
 800cd90:	200019a0 	.word	0x200019a0

0800cd94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d108      	bne.n	800cdb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f000 ff88 	bl	800dcc0 <vPortFree>
				vPortFree( pxTCB );
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 ff85 	bl	800dcc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cdb6:	e018      	b.n	800cdea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d103      	bne.n	800cdca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 ff7c 	bl	800dcc0 <vPortFree>
	}
 800cdc8:	e00f      	b.n	800cdea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cdd0:	2b02      	cmp	r3, #2
 800cdd2:	d00a      	beq.n	800cdea <prvDeleteTCB+0x56>
	__asm volatile
 800cdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd8:	f383 8811 	msr	BASEPRI, r3
 800cddc:	f3bf 8f6f 	isb	sy
 800cde0:	f3bf 8f4f 	dsb	sy
 800cde4:	60fb      	str	r3, [r7, #12]
}
 800cde6:	bf00      	nop
 800cde8:	e7fe      	b.n	800cde8 <prvDeleteTCB+0x54>
	}
 800cdea:	bf00      	nop
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
	...

0800cdf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdfa:	4b0c      	ldr	r3, [pc, #48]	; (800ce2c <prvResetNextTaskUnblockTime+0x38>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d104      	bne.n	800ce0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ce04:	4b0a      	ldr	r3, [pc, #40]	; (800ce30 <prvResetNextTaskUnblockTime+0x3c>)
 800ce06:	f04f 32ff 	mov.w	r2, #4294967295
 800ce0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ce0c:	e008      	b.n	800ce20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce0e:	4b07      	ldr	r3, [pc, #28]	; (800ce2c <prvResetNextTaskUnblockTime+0x38>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	4a04      	ldr	r2, [pc, #16]	; (800ce30 <prvResetNextTaskUnblockTime+0x3c>)
 800ce1e:	6013      	str	r3, [r2, #0]
}
 800ce20:	bf00      	nop
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr
 800ce2c:	20001970 	.word	0x20001970
 800ce30:	200019d8 	.word	0x200019d8

0800ce34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce3a:	4b0b      	ldr	r3, [pc, #44]	; (800ce68 <xTaskGetSchedulerState+0x34>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d102      	bne.n	800ce48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce42:	2301      	movs	r3, #1
 800ce44:	607b      	str	r3, [r7, #4]
 800ce46:	e008      	b.n	800ce5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce48:	4b08      	ldr	r3, [pc, #32]	; (800ce6c <xTaskGetSchedulerState+0x38>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d102      	bne.n	800ce56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce50:	2302      	movs	r3, #2
 800ce52:	607b      	str	r3, [r7, #4]
 800ce54:	e001      	b.n	800ce5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce56:	2300      	movs	r3, #0
 800ce58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce5a:	687b      	ldr	r3, [r7, #4]
	}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	370c      	adds	r7, #12
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr
 800ce68:	200019c4 	.word	0x200019c4
 800ce6c:	200019e0 	.word	0x200019e0

0800ce70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d056      	beq.n	800cf34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ce86:	4b2e      	ldr	r3, [pc, #184]	; (800cf40 <xTaskPriorityDisinherit+0xd0>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	693a      	ldr	r2, [r7, #16]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d00a      	beq.n	800cea6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ce90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce94:	f383 8811 	msr	BASEPRI, r3
 800ce98:	f3bf 8f6f 	isb	sy
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	60fb      	str	r3, [r7, #12]
}
 800cea2:	bf00      	nop
 800cea4:	e7fe      	b.n	800cea4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10a      	bne.n	800cec4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ceae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	60bb      	str	r3, [r7, #8]
}
 800cec0:	bf00      	nop
 800cec2:	e7fe      	b.n	800cec2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cec8:	1e5a      	subs	r2, r3, #1
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d02c      	beq.n	800cf34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d128      	bne.n	800cf34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	3304      	adds	r3, #4
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7fe fc70 	bl	800b7cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf04:	4b0f      	ldr	r3, [pc, #60]	; (800cf44 <xTaskPriorityDisinherit+0xd4>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d903      	bls.n	800cf14 <xTaskPriorityDisinherit+0xa4>
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf10:	4a0c      	ldr	r2, [pc, #48]	; (800cf44 <xTaskPriorityDisinherit+0xd4>)
 800cf12:	6013      	str	r3, [r2, #0]
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf18:	4613      	mov	r3, r2
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	4413      	add	r3, r2
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4a09      	ldr	r2, [pc, #36]	; (800cf48 <xTaskPriorityDisinherit+0xd8>)
 800cf22:	441a      	add	r2, r3
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	3304      	adds	r3, #4
 800cf28:	4619      	mov	r1, r3
 800cf2a:	4610      	mov	r0, r2
 800cf2c:	f7fe fbf1 	bl	800b712 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cf30:	2301      	movs	r3, #1
 800cf32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf34:	697b      	ldr	r3, [r7, #20]
	}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3718      	adds	r7, #24
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	200014e4 	.word	0x200014e4
 800cf44:	200019c0 	.word	0x200019c0
 800cf48:	200014e8 	.word	0x200014e8

0800cf4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf56:	4b21      	ldr	r3, [pc, #132]	; (800cfdc <prvAddCurrentTaskToDelayedList+0x90>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf5c:	4b20      	ldr	r3, [pc, #128]	; (800cfe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	3304      	adds	r3, #4
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fe fc32 	bl	800b7cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6e:	d10a      	bne.n	800cf86 <prvAddCurrentTaskToDelayedList+0x3a>
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d007      	beq.n	800cf86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf76:	4b1a      	ldr	r3, [pc, #104]	; (800cfe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	3304      	adds	r3, #4
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	4819      	ldr	r0, [pc, #100]	; (800cfe4 <prvAddCurrentTaskToDelayedList+0x98>)
 800cf80:	f7fe fbc7 	bl	800b712 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cf84:	e026      	b.n	800cfd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cf8e:	4b14      	ldr	r3, [pc, #80]	; (800cfe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cf96:	68ba      	ldr	r2, [r7, #8]
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d209      	bcs.n	800cfb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf9e:	4b12      	ldr	r3, [pc, #72]	; (800cfe8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	4b0f      	ldr	r3, [pc, #60]	; (800cfe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	3304      	adds	r3, #4
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	4610      	mov	r0, r2
 800cfac:	f7fe fbd5 	bl	800b75a <vListInsert>
}
 800cfb0:	e010      	b.n	800cfd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfb2:	4b0e      	ldr	r3, [pc, #56]	; (800cfec <prvAddCurrentTaskToDelayedList+0xa0>)
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	4b0a      	ldr	r3, [pc, #40]	; (800cfe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	3304      	adds	r3, #4
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	4610      	mov	r0, r2
 800cfc0:	f7fe fbcb 	bl	800b75a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cfc4:	4b0a      	ldr	r3, [pc, #40]	; (800cff0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d202      	bcs.n	800cfd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cfce:	4a08      	ldr	r2, [pc, #32]	; (800cff0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	6013      	str	r3, [r2, #0]
}
 800cfd4:	bf00      	nop
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	200019bc 	.word	0x200019bc
 800cfe0:	200014e4 	.word	0x200014e4
 800cfe4:	200019a4 	.word	0x200019a4
 800cfe8:	20001974 	.word	0x20001974
 800cfec:	20001970 	.word	0x20001970
 800cff0:	200019d8 	.word	0x200019d8

0800cff4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b08a      	sub	sp, #40	; 0x28
 800cff8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cffa:	2300      	movs	r3, #0
 800cffc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cffe:	f000 fb07 	bl	800d610 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d002:	4b1c      	ldr	r3, [pc, #112]	; (800d074 <xTimerCreateTimerTask+0x80>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d021      	beq.n	800d04e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d00a:	2300      	movs	r3, #0
 800d00c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d00e:	2300      	movs	r3, #0
 800d010:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d012:	1d3a      	adds	r2, r7, #4
 800d014:	f107 0108 	add.w	r1, r7, #8
 800d018:	f107 030c 	add.w	r3, r7, #12
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fe fb31 	bl	800b684 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d022:	6879      	ldr	r1, [r7, #4]
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	68fa      	ldr	r2, [r7, #12]
 800d028:	9202      	str	r2, [sp, #8]
 800d02a:	9301      	str	r3, [sp, #4]
 800d02c:	2302      	movs	r3, #2
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	2300      	movs	r3, #0
 800d032:	460a      	mov	r2, r1
 800d034:	4910      	ldr	r1, [pc, #64]	; (800d078 <xTimerCreateTimerTask+0x84>)
 800d036:	4811      	ldr	r0, [pc, #68]	; (800d07c <xTimerCreateTimerTask+0x88>)
 800d038:	f7ff f8de 	bl	800c1f8 <xTaskCreateStatic>
 800d03c:	4603      	mov	r3, r0
 800d03e:	4a10      	ldr	r2, [pc, #64]	; (800d080 <xTimerCreateTimerTask+0x8c>)
 800d040:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d042:	4b0f      	ldr	r3, [pc, #60]	; (800d080 <xTimerCreateTimerTask+0x8c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d04a:	2301      	movs	r3, #1
 800d04c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d10a      	bne.n	800d06a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d058:	f383 8811 	msr	BASEPRI, r3
 800d05c:	f3bf 8f6f 	isb	sy
 800d060:	f3bf 8f4f 	dsb	sy
 800d064:	613b      	str	r3, [r7, #16]
}
 800d066:	bf00      	nop
 800d068:	e7fe      	b.n	800d068 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d06a:	697b      	ldr	r3, [r7, #20]
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3718      	adds	r7, #24
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	20001a14 	.word	0x20001a14
 800d078:	08016a00 	.word	0x08016a00
 800d07c:	0800d1b9 	.word	0x0800d1b9
 800d080:	20001a18 	.word	0x20001a18

0800d084 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b08a      	sub	sp, #40	; 0x28
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
 800d090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d092:	2300      	movs	r3, #0
 800d094:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10a      	bne.n	800d0b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	623b      	str	r3, [r7, #32]
}
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d0b2:	4b1a      	ldr	r3, [pc, #104]	; (800d11c <xTimerGenericCommand+0x98>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d02a      	beq.n	800d110 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	2b05      	cmp	r3, #5
 800d0ca:	dc18      	bgt.n	800d0fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d0cc:	f7ff feb2 	bl	800ce34 <xTaskGetSchedulerState>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b02      	cmp	r3, #2
 800d0d4:	d109      	bne.n	800d0ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d0d6:	4b11      	ldr	r3, [pc, #68]	; (800d11c <xTimerGenericCommand+0x98>)
 800d0d8:	6818      	ldr	r0, [r3, #0]
 800d0da:	f107 0110 	add.w	r1, r7, #16
 800d0de:	2300      	movs	r3, #0
 800d0e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0e2:	f7fe fca1 	bl	800ba28 <xQueueGenericSend>
 800d0e6:	6278      	str	r0, [r7, #36]	; 0x24
 800d0e8:	e012      	b.n	800d110 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d0ea:	4b0c      	ldr	r3, [pc, #48]	; (800d11c <xTimerGenericCommand+0x98>)
 800d0ec:	6818      	ldr	r0, [r3, #0]
 800d0ee:	f107 0110 	add.w	r1, r7, #16
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f7fe fc97 	bl	800ba28 <xQueueGenericSend>
 800d0fa:	6278      	str	r0, [r7, #36]	; 0x24
 800d0fc:	e008      	b.n	800d110 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d0fe:	4b07      	ldr	r3, [pc, #28]	; (800d11c <xTimerGenericCommand+0x98>)
 800d100:	6818      	ldr	r0, [r3, #0]
 800d102:	f107 0110 	add.w	r1, r7, #16
 800d106:	2300      	movs	r3, #0
 800d108:	683a      	ldr	r2, [r7, #0]
 800d10a:	f7fe fd8b 	bl	800bc24 <xQueueGenericSendFromISR>
 800d10e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d112:	4618      	mov	r0, r3
 800d114:	3728      	adds	r7, #40	; 0x28
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	20001a14 	.word	0x20001a14

0800d120 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b088      	sub	sp, #32
 800d124:	af02      	add	r7, sp, #8
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d12a:	4b22      	ldr	r3, [pc, #136]	; (800d1b4 <prvProcessExpiredTimer+0x94>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	3304      	adds	r3, #4
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fe fb47 	bl	800b7cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d144:	f003 0304 	and.w	r3, r3, #4
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d022      	beq.n	800d192 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	699a      	ldr	r2, [r3, #24]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	18d1      	adds	r1, r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	683a      	ldr	r2, [r7, #0]
 800d158:	6978      	ldr	r0, [r7, #20]
 800d15a:	f000 f8d1 	bl	800d300 <prvInsertTimerInActiveList>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d01f      	beq.n	800d1a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d164:	2300      	movs	r3, #0
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	2300      	movs	r3, #0
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	2100      	movs	r1, #0
 800d16e:	6978      	ldr	r0, [r7, #20]
 800d170:	f7ff ff88 	bl	800d084 <xTimerGenericCommand>
 800d174:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d113      	bne.n	800d1a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d180:	f383 8811 	msr	BASEPRI, r3
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	60fb      	str	r3, [r7, #12]
}
 800d18e:	bf00      	nop
 800d190:	e7fe      	b.n	800d190 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d198:	f023 0301 	bic.w	r3, r3, #1
 800d19c:	b2da      	uxtb	r2, r3
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	6a1b      	ldr	r3, [r3, #32]
 800d1a8:	6978      	ldr	r0, [r7, #20]
 800d1aa:	4798      	blx	r3
}
 800d1ac:	bf00      	nop
 800d1ae:	3718      	adds	r7, #24
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}
 800d1b4:	20001a0c 	.word	0x20001a0c

0800d1b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d1c0:	f107 0308 	add.w	r3, r7, #8
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 f857 	bl	800d278 <prvGetNextExpireTime>
 800d1ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f000 f803 	bl	800d1dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d1d6:	f000 f8d5 	bl	800d384 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d1da:	e7f1      	b.n	800d1c0 <prvTimerTask+0x8>

0800d1dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d1e6:	f7ff fa43 	bl	800c670 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1ea:	f107 0308 	add.w	r3, r7, #8
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 f866 	bl	800d2c0 <prvSampleTimeNow>
 800d1f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d130      	bne.n	800d25e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10a      	bne.n	800d218 <prvProcessTimerOrBlockTask+0x3c>
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	429a      	cmp	r2, r3
 800d208:	d806      	bhi.n	800d218 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d20a:	f7ff fa3f 	bl	800c68c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d20e:	68f9      	ldr	r1, [r7, #12]
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f7ff ff85 	bl	800d120 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d216:	e024      	b.n	800d262 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d008      	beq.n	800d230 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d21e:	4b13      	ldr	r3, [pc, #76]	; (800d26c <prvProcessTimerOrBlockTask+0x90>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d101      	bne.n	800d22c <prvProcessTimerOrBlockTask+0x50>
 800d228:	2301      	movs	r3, #1
 800d22a:	e000      	b.n	800d22e <prvProcessTimerOrBlockTask+0x52>
 800d22c:	2300      	movs	r3, #0
 800d22e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d230:	4b0f      	ldr	r3, [pc, #60]	; (800d270 <prvProcessTimerOrBlockTask+0x94>)
 800d232:	6818      	ldr	r0, [r3, #0]
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	683a      	ldr	r2, [r7, #0]
 800d23c:	4619      	mov	r1, r3
 800d23e:	f7fe ffa7 	bl	800c190 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d242:	f7ff fa23 	bl	800c68c <xTaskResumeAll>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d10a      	bne.n	800d262 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d24c:	4b09      	ldr	r3, [pc, #36]	; (800d274 <prvProcessTimerOrBlockTask+0x98>)
 800d24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d252:	601a      	str	r2, [r3, #0]
 800d254:	f3bf 8f4f 	dsb	sy
 800d258:	f3bf 8f6f 	isb	sy
}
 800d25c:	e001      	b.n	800d262 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d25e:	f7ff fa15 	bl	800c68c <xTaskResumeAll>
}
 800d262:	bf00      	nop
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	20001a10 	.word	0x20001a10
 800d270:	20001a14 	.word	0x20001a14
 800d274:	e000ed04 	.word	0xe000ed04

0800d278 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d278:	b480      	push	{r7}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d280:	4b0e      	ldr	r3, [pc, #56]	; (800d2bc <prvGetNextExpireTime+0x44>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d101      	bne.n	800d28e <prvGetNextExpireTime+0x16>
 800d28a:	2201      	movs	r2, #1
 800d28c:	e000      	b.n	800d290 <prvGetNextExpireTime+0x18>
 800d28e:	2200      	movs	r2, #0
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d105      	bne.n	800d2a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d29c:	4b07      	ldr	r3, [pc, #28]	; (800d2bc <prvGetNextExpireTime+0x44>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	60fb      	str	r3, [r7, #12]
 800d2a6:	e001      	b.n	800d2ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3714      	adds	r7, #20
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	20001a0c 	.word	0x20001a0c

0800d2c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d2c8:	f7ff fa7e 	bl	800c7c8 <xTaskGetTickCount>
 800d2cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d2ce:	4b0b      	ldr	r3, [pc, #44]	; (800d2fc <prvSampleTimeNow+0x3c>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d205      	bcs.n	800d2e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d2d8:	f000 f936 	bl	800d548 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	601a      	str	r2, [r3, #0]
 800d2e2:	e002      	b.n	800d2ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d2ea:	4a04      	ldr	r2, [pc, #16]	; (800d2fc <prvSampleTimeNow+0x3c>)
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	20001a1c 	.word	0x20001a1c

0800d300 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	607a      	str	r2, [r7, #4]
 800d30c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d30e:	2300      	movs	r3, #0
 800d310:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	68ba      	ldr	r2, [r7, #8]
 800d316:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	429a      	cmp	r2, r3
 800d324:	d812      	bhi.n	800d34c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	1ad2      	subs	r2, r2, r3
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	699b      	ldr	r3, [r3, #24]
 800d330:	429a      	cmp	r2, r3
 800d332:	d302      	bcc.n	800d33a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d334:	2301      	movs	r3, #1
 800d336:	617b      	str	r3, [r7, #20]
 800d338:	e01b      	b.n	800d372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d33a:	4b10      	ldr	r3, [pc, #64]	; (800d37c <prvInsertTimerInActiveList+0x7c>)
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3304      	adds	r3, #4
 800d342:	4619      	mov	r1, r3
 800d344:	4610      	mov	r0, r2
 800d346:	f7fe fa08 	bl	800b75a <vListInsert>
 800d34a:	e012      	b.n	800d372 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	429a      	cmp	r2, r3
 800d352:	d206      	bcs.n	800d362 <prvInsertTimerInActiveList+0x62>
 800d354:	68ba      	ldr	r2, [r7, #8]
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d302      	bcc.n	800d362 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d35c:	2301      	movs	r3, #1
 800d35e:	617b      	str	r3, [r7, #20]
 800d360:	e007      	b.n	800d372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d362:	4b07      	ldr	r3, [pc, #28]	; (800d380 <prvInsertTimerInActiveList+0x80>)
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	3304      	adds	r3, #4
 800d36a:	4619      	mov	r1, r3
 800d36c:	4610      	mov	r0, r2
 800d36e:	f7fe f9f4 	bl	800b75a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d372:	697b      	ldr	r3, [r7, #20]
}
 800d374:	4618      	mov	r0, r3
 800d376:	3718      	adds	r7, #24
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	20001a10 	.word	0x20001a10
 800d380:	20001a0c 	.word	0x20001a0c

0800d384 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b08e      	sub	sp, #56	; 0x38
 800d388:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d38a:	e0ca      	b.n	800d522 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	da18      	bge.n	800d3c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d392:	1d3b      	adds	r3, r7, #4
 800d394:	3304      	adds	r3, #4
 800d396:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d10a      	bne.n	800d3b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a2:	f383 8811 	msr	BASEPRI, r3
 800d3a6:	f3bf 8f6f 	isb	sy
 800d3aa:	f3bf 8f4f 	dsb	sy
 800d3ae:	61fb      	str	r3, [r7, #28]
}
 800d3b0:	bf00      	nop
 800d3b2:	e7fe      	b.n	800d3b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3ba:	6850      	ldr	r0, [r2, #4]
 800d3bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3be:	6892      	ldr	r2, [r2, #8]
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f2c0 80aa 	blt.w	800d520 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d2:	695b      	ldr	r3, [r3, #20]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d004      	beq.n	800d3e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3da:	3304      	adds	r3, #4
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fe f9f5 	bl	800b7cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d3e2:	463b      	mov	r3, r7
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7ff ff6b 	bl	800d2c0 <prvSampleTimeNow>
 800d3ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b09      	cmp	r3, #9
 800d3f0:	f200 8097 	bhi.w	800d522 <prvProcessReceivedCommands+0x19e>
 800d3f4:	a201      	add	r2, pc, #4	; (adr r2, 800d3fc <prvProcessReceivedCommands+0x78>)
 800d3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3fa:	bf00      	nop
 800d3fc:	0800d425 	.word	0x0800d425
 800d400:	0800d425 	.word	0x0800d425
 800d404:	0800d425 	.word	0x0800d425
 800d408:	0800d499 	.word	0x0800d499
 800d40c:	0800d4ad 	.word	0x0800d4ad
 800d410:	0800d4f7 	.word	0x0800d4f7
 800d414:	0800d425 	.word	0x0800d425
 800d418:	0800d425 	.word	0x0800d425
 800d41c:	0800d499 	.word	0x0800d499
 800d420:	0800d4ad 	.word	0x0800d4ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d42a:	f043 0301 	orr.w	r3, r3, #1
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d436:	68ba      	ldr	r2, [r7, #8]
 800d438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43a:	699b      	ldr	r3, [r3, #24]
 800d43c:	18d1      	adds	r1, r2, r3
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d444:	f7ff ff5c 	bl	800d300 <prvInsertTimerInActiveList>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d069      	beq.n	800d522 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d450:	6a1b      	ldr	r3, [r3, #32]
 800d452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d454:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d45c:	f003 0304 	and.w	r3, r3, #4
 800d460:	2b00      	cmp	r3, #0
 800d462:	d05e      	beq.n	800d522 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d464:	68ba      	ldr	r2, [r7, #8]
 800d466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d468:	699b      	ldr	r3, [r3, #24]
 800d46a:	441a      	add	r2, r3
 800d46c:	2300      	movs	r3, #0
 800d46e:	9300      	str	r3, [sp, #0]
 800d470:	2300      	movs	r3, #0
 800d472:	2100      	movs	r1, #0
 800d474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d476:	f7ff fe05 	bl	800d084 <xTimerGenericCommand>
 800d47a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d47c:	6a3b      	ldr	r3, [r7, #32]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d14f      	bne.n	800d522 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d486:	f383 8811 	msr	BASEPRI, r3
 800d48a:	f3bf 8f6f 	isb	sy
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	61bb      	str	r3, [r7, #24]
}
 800d494:	bf00      	nop
 800d496:	e7fe      	b.n	800d496 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d49e:	f023 0301 	bic.w	r3, r3, #1
 800d4a2:	b2da      	uxtb	r2, r3
 800d4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d4aa:	e03a      	b.n	800d522 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4b2:	f043 0301 	orr.w	r3, r3, #1
 800d4b6:	b2da      	uxtb	r2, r3
 800d4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d4be:	68ba      	ldr	r2, [r7, #8]
 800d4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c6:	699b      	ldr	r3, [r3, #24]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10a      	bne.n	800d4e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	617b      	str	r3, [r7, #20]
}
 800d4de:	bf00      	nop
 800d4e0:	e7fe      	b.n	800d4e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e4:	699a      	ldr	r2, [r3, #24]
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e8:	18d1      	adds	r1, r2, r3
 800d4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4f0:	f7ff ff06 	bl	800d300 <prvInsertTimerInActiveList>
					break;
 800d4f4:	e015      	b.n	800d522 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4fc:	f003 0302 	and.w	r3, r3, #2
 800d500:	2b00      	cmp	r3, #0
 800d502:	d103      	bne.n	800d50c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d506:	f000 fbdb 	bl	800dcc0 <vPortFree>
 800d50a:	e00a      	b.n	800d522 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d512:	f023 0301 	bic.w	r3, r3, #1
 800d516:	b2da      	uxtb	r2, r3
 800d518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d51e:	e000      	b.n	800d522 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d520:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d522:	4b08      	ldr	r3, [pc, #32]	; (800d544 <prvProcessReceivedCommands+0x1c0>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	1d39      	adds	r1, r7, #4
 800d528:	2200      	movs	r2, #0
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fe fc16 	bl	800bd5c <xQueueReceive>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	f47f af2a 	bne.w	800d38c <prvProcessReceivedCommands+0x8>
	}
}
 800d538:	bf00      	nop
 800d53a:	bf00      	nop
 800d53c:	3730      	adds	r7, #48	; 0x30
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	20001a14 	.word	0x20001a14

0800d548 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b088      	sub	sp, #32
 800d54c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d54e:	e048      	b.n	800d5e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d550:	4b2d      	ldr	r3, [pc, #180]	; (800d608 <prvSwitchTimerLists+0xc0>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d55a:	4b2b      	ldr	r3, [pc, #172]	; (800d608 <prvSwitchTimerLists+0xc0>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	3304      	adds	r3, #4
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fe f92f 	bl	800b7cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d57c:	f003 0304 	and.w	r3, r3, #4
 800d580:	2b00      	cmp	r3, #0
 800d582:	d02e      	beq.n	800d5e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	699b      	ldr	r3, [r3, #24]
 800d588:	693a      	ldr	r2, [r7, #16]
 800d58a:	4413      	add	r3, r2
 800d58c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d58e:	68ba      	ldr	r2, [r7, #8]
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	429a      	cmp	r2, r3
 800d594:	d90e      	bls.n	800d5b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d5a2:	4b19      	ldr	r3, [pc, #100]	; (800d608 <prvSwitchTimerLists+0xc0>)
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	f7fe f8d4 	bl	800b75a <vListInsert>
 800d5b2:	e016      	b.n	800d5e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	693a      	ldr	r2, [r7, #16]
 800d5bc:	2100      	movs	r1, #0
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f7ff fd60 	bl	800d084 <xTimerGenericCommand>
 800d5c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d10a      	bne.n	800d5e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d0:	f383 8811 	msr	BASEPRI, r3
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	f3bf 8f4f 	dsb	sy
 800d5dc:	603b      	str	r3, [r7, #0]
}
 800d5de:	bf00      	nop
 800d5e0:	e7fe      	b.n	800d5e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5e2:	4b09      	ldr	r3, [pc, #36]	; (800d608 <prvSwitchTimerLists+0xc0>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d1b1      	bne.n	800d550 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d5ec:	4b06      	ldr	r3, [pc, #24]	; (800d608 <prvSwitchTimerLists+0xc0>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d5f2:	4b06      	ldr	r3, [pc, #24]	; (800d60c <prvSwitchTimerLists+0xc4>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a04      	ldr	r2, [pc, #16]	; (800d608 <prvSwitchTimerLists+0xc0>)
 800d5f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d5fa:	4a04      	ldr	r2, [pc, #16]	; (800d60c <prvSwitchTimerLists+0xc4>)
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	6013      	str	r3, [r2, #0]
}
 800d600:	bf00      	nop
 800d602:	3718      	adds	r7, #24
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	20001a0c 	.word	0x20001a0c
 800d60c:	20001a10 	.word	0x20001a10

0800d610 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d616:	f000 f965 	bl	800d8e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d61a:	4b15      	ldr	r3, [pc, #84]	; (800d670 <prvCheckForValidListAndQueue+0x60>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d120      	bne.n	800d664 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d622:	4814      	ldr	r0, [pc, #80]	; (800d674 <prvCheckForValidListAndQueue+0x64>)
 800d624:	f7fe f848 	bl	800b6b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d628:	4813      	ldr	r0, [pc, #76]	; (800d678 <prvCheckForValidListAndQueue+0x68>)
 800d62a:	f7fe f845 	bl	800b6b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d62e:	4b13      	ldr	r3, [pc, #76]	; (800d67c <prvCheckForValidListAndQueue+0x6c>)
 800d630:	4a10      	ldr	r2, [pc, #64]	; (800d674 <prvCheckForValidListAndQueue+0x64>)
 800d632:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d634:	4b12      	ldr	r3, [pc, #72]	; (800d680 <prvCheckForValidListAndQueue+0x70>)
 800d636:	4a10      	ldr	r2, [pc, #64]	; (800d678 <prvCheckForValidListAndQueue+0x68>)
 800d638:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d63a:	2300      	movs	r3, #0
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	4b11      	ldr	r3, [pc, #68]	; (800d684 <prvCheckForValidListAndQueue+0x74>)
 800d640:	4a11      	ldr	r2, [pc, #68]	; (800d688 <prvCheckForValidListAndQueue+0x78>)
 800d642:	2110      	movs	r1, #16
 800d644:	200a      	movs	r0, #10
 800d646:	f7fe f953 	bl	800b8f0 <xQueueGenericCreateStatic>
 800d64a:	4603      	mov	r3, r0
 800d64c:	4a08      	ldr	r2, [pc, #32]	; (800d670 <prvCheckForValidListAndQueue+0x60>)
 800d64e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d650:	4b07      	ldr	r3, [pc, #28]	; (800d670 <prvCheckForValidListAndQueue+0x60>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d005      	beq.n	800d664 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d658:	4b05      	ldr	r3, [pc, #20]	; (800d670 <prvCheckForValidListAndQueue+0x60>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	490b      	ldr	r1, [pc, #44]	; (800d68c <prvCheckForValidListAndQueue+0x7c>)
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fe fd6c 	bl	800c13c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d664:	f000 f96e 	bl	800d944 <vPortExitCritical>
}
 800d668:	bf00      	nop
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	20001a14 	.word	0x20001a14
 800d674:	200019e4 	.word	0x200019e4
 800d678:	200019f8 	.word	0x200019f8
 800d67c:	20001a0c 	.word	0x20001a0c
 800d680:	20001a10 	.word	0x20001a10
 800d684:	20001ac0 	.word	0x20001ac0
 800d688:	20001a20 	.word	0x20001a20
 800d68c:	08016a08 	.word	0x08016a08

0800d690 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d690:	b480      	push	{r7}
 800d692:	b085      	sub	sp, #20
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	3b04      	subs	r3, #4
 800d6a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d6a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	3b04      	subs	r3, #4
 800d6ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	f023 0201 	bic.w	r2, r3, #1
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	3b04      	subs	r3, #4
 800d6be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d6c0:	4a0c      	ldr	r2, [pc, #48]	; (800d6f4 <pxPortInitialiseStack+0x64>)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	3b14      	subs	r3, #20
 800d6ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	3b04      	subs	r3, #4
 800d6d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f06f 0202 	mvn.w	r2, #2
 800d6de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	3b20      	subs	r3, #32
 800d6e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3714      	adds	r7, #20
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr
 800d6f4:	0800d6f9 	.word	0x0800d6f9

0800d6f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d6fe:	2300      	movs	r3, #0
 800d700:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d702:	4b12      	ldr	r3, [pc, #72]	; (800d74c <prvTaskExitError+0x54>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d70a:	d00a      	beq.n	800d722 <prvTaskExitError+0x2a>
	__asm volatile
 800d70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	60fb      	str	r3, [r7, #12]
}
 800d71e:	bf00      	nop
 800d720:	e7fe      	b.n	800d720 <prvTaskExitError+0x28>
	__asm volatile
 800d722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d726:	f383 8811 	msr	BASEPRI, r3
 800d72a:	f3bf 8f6f 	isb	sy
 800d72e:	f3bf 8f4f 	dsb	sy
 800d732:	60bb      	str	r3, [r7, #8]
}
 800d734:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d736:	bf00      	nop
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d0fc      	beq.n	800d738 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d73e:	bf00      	nop
 800d740:	bf00      	nop
 800d742:	3714      	adds	r7, #20
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr
 800d74c:	200000c8 	.word	0x200000c8

0800d750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d750:	4b07      	ldr	r3, [pc, #28]	; (800d770 <pxCurrentTCBConst2>)
 800d752:	6819      	ldr	r1, [r3, #0]
 800d754:	6808      	ldr	r0, [r1, #0]
 800d756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d75a:	f380 8809 	msr	PSP, r0
 800d75e:	f3bf 8f6f 	isb	sy
 800d762:	f04f 0000 	mov.w	r0, #0
 800d766:	f380 8811 	msr	BASEPRI, r0
 800d76a:	4770      	bx	lr
 800d76c:	f3af 8000 	nop.w

0800d770 <pxCurrentTCBConst2>:
 800d770:	200014e4 	.word	0x200014e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d774:	bf00      	nop
 800d776:	bf00      	nop

0800d778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d778:	4808      	ldr	r0, [pc, #32]	; (800d79c <prvPortStartFirstTask+0x24>)
 800d77a:	6800      	ldr	r0, [r0, #0]
 800d77c:	6800      	ldr	r0, [r0, #0]
 800d77e:	f380 8808 	msr	MSP, r0
 800d782:	f04f 0000 	mov.w	r0, #0
 800d786:	f380 8814 	msr	CONTROL, r0
 800d78a:	b662      	cpsie	i
 800d78c:	b661      	cpsie	f
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	df00      	svc	0
 800d798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d79a:	bf00      	nop
 800d79c:	e000ed08 	.word	0xe000ed08

0800d7a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d7a6:	4b46      	ldr	r3, [pc, #280]	; (800d8c0 <xPortStartScheduler+0x120>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a46      	ldr	r2, [pc, #280]	; (800d8c4 <xPortStartScheduler+0x124>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d10a      	bne.n	800d7c6 <xPortStartScheduler+0x26>
	__asm volatile
 800d7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b4:	f383 8811 	msr	BASEPRI, r3
 800d7b8:	f3bf 8f6f 	isb	sy
 800d7bc:	f3bf 8f4f 	dsb	sy
 800d7c0:	613b      	str	r3, [r7, #16]
}
 800d7c2:	bf00      	nop
 800d7c4:	e7fe      	b.n	800d7c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d7c6:	4b3e      	ldr	r3, [pc, #248]	; (800d8c0 <xPortStartScheduler+0x120>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a3f      	ldr	r2, [pc, #252]	; (800d8c8 <xPortStartScheduler+0x128>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d10a      	bne.n	800d7e6 <xPortStartScheduler+0x46>
	__asm volatile
 800d7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	60fb      	str	r3, [r7, #12]
}
 800d7e2:	bf00      	nop
 800d7e4:	e7fe      	b.n	800d7e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d7e6:	4b39      	ldr	r3, [pc, #228]	; (800d8cc <xPortStartScheduler+0x12c>)
 800d7e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	22ff      	movs	r2, #255	; 0xff
 800d7f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d800:	78fb      	ldrb	r3, [r7, #3]
 800d802:	b2db      	uxtb	r3, r3
 800d804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d808:	b2da      	uxtb	r2, r3
 800d80a:	4b31      	ldr	r3, [pc, #196]	; (800d8d0 <xPortStartScheduler+0x130>)
 800d80c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d80e:	4b31      	ldr	r3, [pc, #196]	; (800d8d4 <xPortStartScheduler+0x134>)
 800d810:	2207      	movs	r2, #7
 800d812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d814:	e009      	b.n	800d82a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d816:	4b2f      	ldr	r3, [pc, #188]	; (800d8d4 <xPortStartScheduler+0x134>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	3b01      	subs	r3, #1
 800d81c:	4a2d      	ldr	r2, [pc, #180]	; (800d8d4 <xPortStartScheduler+0x134>)
 800d81e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d820:	78fb      	ldrb	r3, [r7, #3]
 800d822:	b2db      	uxtb	r3, r3
 800d824:	005b      	lsls	r3, r3, #1
 800d826:	b2db      	uxtb	r3, r3
 800d828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d82a:	78fb      	ldrb	r3, [r7, #3]
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d832:	2b80      	cmp	r3, #128	; 0x80
 800d834:	d0ef      	beq.n	800d816 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d836:	4b27      	ldr	r3, [pc, #156]	; (800d8d4 <xPortStartScheduler+0x134>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f1c3 0307 	rsb	r3, r3, #7
 800d83e:	2b04      	cmp	r3, #4
 800d840:	d00a      	beq.n	800d858 <xPortStartScheduler+0xb8>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d846:	f383 8811 	msr	BASEPRI, r3
 800d84a:	f3bf 8f6f 	isb	sy
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	60bb      	str	r3, [r7, #8]
}
 800d854:	bf00      	nop
 800d856:	e7fe      	b.n	800d856 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d858:	4b1e      	ldr	r3, [pc, #120]	; (800d8d4 <xPortStartScheduler+0x134>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	021b      	lsls	r3, r3, #8
 800d85e:	4a1d      	ldr	r2, [pc, #116]	; (800d8d4 <xPortStartScheduler+0x134>)
 800d860:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d862:	4b1c      	ldr	r3, [pc, #112]	; (800d8d4 <xPortStartScheduler+0x134>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d86a:	4a1a      	ldr	r2, [pc, #104]	; (800d8d4 <xPortStartScheduler+0x134>)
 800d86c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	b2da      	uxtb	r2, r3
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d876:	4b18      	ldr	r3, [pc, #96]	; (800d8d8 <xPortStartScheduler+0x138>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a17      	ldr	r2, [pc, #92]	; (800d8d8 <xPortStartScheduler+0x138>)
 800d87c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d882:	4b15      	ldr	r3, [pc, #84]	; (800d8d8 <xPortStartScheduler+0x138>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4a14      	ldr	r2, [pc, #80]	; (800d8d8 <xPortStartScheduler+0x138>)
 800d888:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d88c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d88e:	f000 f8dd 	bl	800da4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d892:	4b12      	ldr	r3, [pc, #72]	; (800d8dc <xPortStartScheduler+0x13c>)
 800d894:	2200      	movs	r2, #0
 800d896:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d898:	f000 f8fc 	bl	800da94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d89c:	4b10      	ldr	r3, [pc, #64]	; (800d8e0 <xPortStartScheduler+0x140>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a0f      	ldr	r2, [pc, #60]	; (800d8e0 <xPortStartScheduler+0x140>)
 800d8a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d8a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d8a8:	f7ff ff66 	bl	800d778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d8ac:	f7ff f856 	bl	800c95c <vTaskSwitchContext>
	prvTaskExitError();
 800d8b0:	f7ff ff22 	bl	800d6f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3718      	adds	r7, #24
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	e000ed00 	.word	0xe000ed00
 800d8c4:	410fc271 	.word	0x410fc271
 800d8c8:	410fc270 	.word	0x410fc270
 800d8cc:	e000e400 	.word	0xe000e400
 800d8d0:	20001b10 	.word	0x20001b10
 800d8d4:	20001b14 	.word	0x20001b14
 800d8d8:	e000ed20 	.word	0xe000ed20
 800d8dc:	200000c8 	.word	0x200000c8
 800d8e0:	e000ef34 	.word	0xe000ef34

0800d8e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
	__asm volatile
 800d8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ee:	f383 8811 	msr	BASEPRI, r3
 800d8f2:	f3bf 8f6f 	isb	sy
 800d8f6:	f3bf 8f4f 	dsb	sy
 800d8fa:	607b      	str	r3, [r7, #4]
}
 800d8fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d8fe:	4b0f      	ldr	r3, [pc, #60]	; (800d93c <vPortEnterCritical+0x58>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	3301      	adds	r3, #1
 800d904:	4a0d      	ldr	r2, [pc, #52]	; (800d93c <vPortEnterCritical+0x58>)
 800d906:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d908:	4b0c      	ldr	r3, [pc, #48]	; (800d93c <vPortEnterCritical+0x58>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d10f      	bne.n	800d930 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d910:	4b0b      	ldr	r3, [pc, #44]	; (800d940 <vPortEnterCritical+0x5c>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	b2db      	uxtb	r3, r3
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00a      	beq.n	800d930 <vPortEnterCritical+0x4c>
	__asm volatile
 800d91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91e:	f383 8811 	msr	BASEPRI, r3
 800d922:	f3bf 8f6f 	isb	sy
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	603b      	str	r3, [r7, #0]
}
 800d92c:	bf00      	nop
 800d92e:	e7fe      	b.n	800d92e <vPortEnterCritical+0x4a>
	}
}
 800d930:	bf00      	nop
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	200000c8 	.word	0x200000c8
 800d940:	e000ed04 	.word	0xe000ed04

0800d944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d94a:	4b12      	ldr	r3, [pc, #72]	; (800d994 <vPortExitCritical+0x50>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d10a      	bne.n	800d968 <vPortExitCritical+0x24>
	__asm volatile
 800d952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d956:	f383 8811 	msr	BASEPRI, r3
 800d95a:	f3bf 8f6f 	isb	sy
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	607b      	str	r3, [r7, #4]
}
 800d964:	bf00      	nop
 800d966:	e7fe      	b.n	800d966 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d968:	4b0a      	ldr	r3, [pc, #40]	; (800d994 <vPortExitCritical+0x50>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	3b01      	subs	r3, #1
 800d96e:	4a09      	ldr	r2, [pc, #36]	; (800d994 <vPortExitCritical+0x50>)
 800d970:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d972:	4b08      	ldr	r3, [pc, #32]	; (800d994 <vPortExitCritical+0x50>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d105      	bne.n	800d986 <vPortExitCritical+0x42>
 800d97a:	2300      	movs	r3, #0
 800d97c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	f383 8811 	msr	BASEPRI, r3
}
 800d984:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d986:	bf00      	nop
 800d988:	370c      	adds	r7, #12
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop
 800d994:	200000c8 	.word	0x200000c8
	...

0800d9a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d9a0:	f3ef 8009 	mrs	r0, PSP
 800d9a4:	f3bf 8f6f 	isb	sy
 800d9a8:	4b15      	ldr	r3, [pc, #84]	; (800da00 <pxCurrentTCBConst>)
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	f01e 0f10 	tst.w	lr, #16
 800d9b0:	bf08      	it	eq
 800d9b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d9b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ba:	6010      	str	r0, [r2, #0]
 800d9bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d9c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d9c4:	f380 8811 	msr	BASEPRI, r0
 800d9c8:	f3bf 8f4f 	dsb	sy
 800d9cc:	f3bf 8f6f 	isb	sy
 800d9d0:	f7fe ffc4 	bl	800c95c <vTaskSwitchContext>
 800d9d4:	f04f 0000 	mov.w	r0, #0
 800d9d8:	f380 8811 	msr	BASEPRI, r0
 800d9dc:	bc09      	pop	{r0, r3}
 800d9de:	6819      	ldr	r1, [r3, #0]
 800d9e0:	6808      	ldr	r0, [r1, #0]
 800d9e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e6:	f01e 0f10 	tst.w	lr, #16
 800d9ea:	bf08      	it	eq
 800d9ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d9f0:	f380 8809 	msr	PSP, r0
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	f3af 8000 	nop.w

0800da00 <pxCurrentTCBConst>:
 800da00:	200014e4 	.word	0x200014e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da04:	bf00      	nop
 800da06:	bf00      	nop

0800da08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
	__asm volatile
 800da0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da12:	f383 8811 	msr	BASEPRI, r3
 800da16:	f3bf 8f6f 	isb	sy
 800da1a:	f3bf 8f4f 	dsb	sy
 800da1e:	607b      	str	r3, [r7, #4]
}
 800da20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800da22:	f7fe fee1 	bl	800c7e8 <xTaskIncrementTick>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d003      	beq.n	800da34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800da2c:	4b06      	ldr	r3, [pc, #24]	; (800da48 <xPortSysTickHandler+0x40>)
 800da2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da32:	601a      	str	r2, [r3, #0]
 800da34:	2300      	movs	r3, #0
 800da36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	f383 8811 	msr	BASEPRI, r3
}
 800da3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800da40:	bf00      	nop
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	e000ed04 	.word	0xe000ed04

0800da4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da4c:	b480      	push	{r7}
 800da4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da50:	4b0b      	ldr	r3, [pc, #44]	; (800da80 <vPortSetupTimerInterrupt+0x34>)
 800da52:	2200      	movs	r2, #0
 800da54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da56:	4b0b      	ldr	r3, [pc, #44]	; (800da84 <vPortSetupTimerInterrupt+0x38>)
 800da58:	2200      	movs	r2, #0
 800da5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da5c:	4b0a      	ldr	r3, [pc, #40]	; (800da88 <vPortSetupTimerInterrupt+0x3c>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a0a      	ldr	r2, [pc, #40]	; (800da8c <vPortSetupTimerInterrupt+0x40>)
 800da62:	fba2 2303 	umull	r2, r3, r2, r3
 800da66:	099b      	lsrs	r3, r3, #6
 800da68:	4a09      	ldr	r2, [pc, #36]	; (800da90 <vPortSetupTimerInterrupt+0x44>)
 800da6a:	3b01      	subs	r3, #1
 800da6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da6e:	4b04      	ldr	r3, [pc, #16]	; (800da80 <vPortSetupTimerInterrupt+0x34>)
 800da70:	2207      	movs	r2, #7
 800da72:	601a      	str	r2, [r3, #0]
}
 800da74:	bf00      	nop
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	e000e010 	.word	0xe000e010
 800da84:	e000e018 	.word	0xe000e018
 800da88:	20000004 	.word	0x20000004
 800da8c:	10624dd3 	.word	0x10624dd3
 800da90:	e000e014 	.word	0xe000e014

0800da94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800da94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800daa4 <vPortEnableVFP+0x10>
 800da98:	6801      	ldr	r1, [r0, #0]
 800da9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800da9e:	6001      	str	r1, [r0, #0]
 800daa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800daa2:	bf00      	nop
 800daa4:	e000ed88 	.word	0xe000ed88

0800daa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800daa8:	b480      	push	{r7}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800daae:	f3ef 8305 	mrs	r3, IPSR
 800dab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2b0f      	cmp	r3, #15
 800dab8:	d914      	bls.n	800dae4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800daba:	4a17      	ldr	r2, [pc, #92]	; (800db18 <vPortValidateInterruptPriority+0x70>)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	4413      	add	r3, r2
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dac4:	4b15      	ldr	r3, [pc, #84]	; (800db1c <vPortValidateInterruptPriority+0x74>)
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	7afa      	ldrb	r2, [r7, #11]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d20a      	bcs.n	800dae4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad2:	f383 8811 	msr	BASEPRI, r3
 800dad6:	f3bf 8f6f 	isb	sy
 800dada:	f3bf 8f4f 	dsb	sy
 800dade:	607b      	str	r3, [r7, #4]
}
 800dae0:	bf00      	nop
 800dae2:	e7fe      	b.n	800dae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dae4:	4b0e      	ldr	r3, [pc, #56]	; (800db20 <vPortValidateInterruptPriority+0x78>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800daec:	4b0d      	ldr	r3, [pc, #52]	; (800db24 <vPortValidateInterruptPriority+0x7c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d90a      	bls.n	800db0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800daf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	603b      	str	r3, [r7, #0]
}
 800db06:	bf00      	nop
 800db08:	e7fe      	b.n	800db08 <vPortValidateInterruptPriority+0x60>
	}
 800db0a:	bf00      	nop
 800db0c:	3714      	adds	r7, #20
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop
 800db18:	e000e3f0 	.word	0xe000e3f0
 800db1c:	20001b10 	.word	0x20001b10
 800db20:	e000ed0c 	.word	0xe000ed0c
 800db24:	20001b14 	.word	0x20001b14

0800db28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b08a      	sub	sp, #40	; 0x28
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800db30:	2300      	movs	r3, #0
 800db32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800db34:	f7fe fd9c 	bl	800c670 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800db38:	4b5b      	ldr	r3, [pc, #364]	; (800dca8 <pvPortMalloc+0x180>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d101      	bne.n	800db44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800db40:	f000 f920 	bl	800dd84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db44:	4b59      	ldr	r3, [pc, #356]	; (800dcac <pvPortMalloc+0x184>)
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	4013      	ands	r3, r2
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f040 8093 	bne.w	800dc78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d01d      	beq.n	800db94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800db58:	2208      	movs	r2, #8
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4413      	add	r3, r2
 800db5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f003 0307 	and.w	r3, r3, #7
 800db66:	2b00      	cmp	r3, #0
 800db68:	d014      	beq.n	800db94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f023 0307 	bic.w	r3, r3, #7
 800db70:	3308      	adds	r3, #8
 800db72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f003 0307 	and.w	r3, r3, #7
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d00a      	beq.n	800db94 <pvPortMalloc+0x6c>
	__asm volatile
 800db7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db82:	f383 8811 	msr	BASEPRI, r3
 800db86:	f3bf 8f6f 	isb	sy
 800db8a:	f3bf 8f4f 	dsb	sy
 800db8e:	617b      	str	r3, [r7, #20]
}
 800db90:	bf00      	nop
 800db92:	e7fe      	b.n	800db92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d06e      	beq.n	800dc78 <pvPortMalloc+0x150>
 800db9a:	4b45      	ldr	r3, [pc, #276]	; (800dcb0 <pvPortMalloc+0x188>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d869      	bhi.n	800dc78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dba4:	4b43      	ldr	r3, [pc, #268]	; (800dcb4 <pvPortMalloc+0x18c>)
 800dba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dba8:	4b42      	ldr	r3, [pc, #264]	; (800dcb4 <pvPortMalloc+0x18c>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbae:	e004      	b.n	800dbba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d903      	bls.n	800dbcc <pvPortMalloc+0xa4>
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d1f1      	bne.n	800dbb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dbcc:	4b36      	ldr	r3, [pc, #216]	; (800dca8 <pvPortMalloc+0x180>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d050      	beq.n	800dc78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dbd6:	6a3b      	ldr	r3, [r7, #32]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2208      	movs	r2, #8
 800dbdc:	4413      	add	r3, r2
 800dbde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	6a3b      	ldr	r3, [r7, #32]
 800dbe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbea:	685a      	ldr	r2, [r3, #4]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	1ad2      	subs	r2, r2, r3
 800dbf0:	2308      	movs	r3, #8
 800dbf2:	005b      	lsls	r3, r3, #1
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d91f      	bls.n	800dc38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dbf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	f003 0307 	and.w	r3, r3, #7
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d00a      	beq.n	800dc20 <pvPortMalloc+0xf8>
	__asm volatile
 800dc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0e:	f383 8811 	msr	BASEPRI, r3
 800dc12:	f3bf 8f6f 	isb	sy
 800dc16:	f3bf 8f4f 	dsb	sy
 800dc1a:	613b      	str	r3, [r7, #16]
}
 800dc1c:	bf00      	nop
 800dc1e:	e7fe      	b.n	800dc1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc22:	685a      	ldr	r2, [r3, #4]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	1ad2      	subs	r2, r2, r3
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dc32:	69b8      	ldr	r0, [r7, #24]
 800dc34:	f000 f908 	bl	800de48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc38:	4b1d      	ldr	r3, [pc, #116]	; (800dcb0 <pvPortMalloc+0x188>)
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	4a1b      	ldr	r2, [pc, #108]	; (800dcb0 <pvPortMalloc+0x188>)
 800dc44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc46:	4b1a      	ldr	r3, [pc, #104]	; (800dcb0 <pvPortMalloc+0x188>)
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	4b1b      	ldr	r3, [pc, #108]	; (800dcb8 <pvPortMalloc+0x190>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d203      	bcs.n	800dc5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc52:	4b17      	ldr	r3, [pc, #92]	; (800dcb0 <pvPortMalloc+0x188>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4a18      	ldr	r2, [pc, #96]	; (800dcb8 <pvPortMalloc+0x190>)
 800dc58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5c:	685a      	ldr	r2, [r3, #4]
 800dc5e:	4b13      	ldr	r3, [pc, #76]	; (800dcac <pvPortMalloc+0x184>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	431a      	orrs	r2, r3
 800dc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dc6e:	4b13      	ldr	r3, [pc, #76]	; (800dcbc <pvPortMalloc+0x194>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	3301      	adds	r3, #1
 800dc74:	4a11      	ldr	r2, [pc, #68]	; (800dcbc <pvPortMalloc+0x194>)
 800dc76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dc78:	f7fe fd08 	bl	800c68c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	f003 0307 	and.w	r3, r3, #7
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00a      	beq.n	800dc9c <pvPortMalloc+0x174>
	__asm volatile
 800dc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8a:	f383 8811 	msr	BASEPRI, r3
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	60fb      	str	r3, [r7, #12]
}
 800dc98:	bf00      	nop
 800dc9a:	e7fe      	b.n	800dc9a <pvPortMalloc+0x172>
	return pvReturn;
 800dc9c:	69fb      	ldr	r3, [r7, #28]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3728      	adds	r7, #40	; 0x28
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	20005720 	.word	0x20005720
 800dcac:	20005734 	.word	0x20005734
 800dcb0:	20005724 	.word	0x20005724
 800dcb4:	20005718 	.word	0x20005718
 800dcb8:	20005728 	.word	0x20005728
 800dcbc:	2000572c 	.word	0x2000572c

0800dcc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b086      	sub	sp, #24
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d04d      	beq.n	800dd6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dcd2:	2308      	movs	r3, #8
 800dcd4:	425b      	negs	r3, r3
 800dcd6:	697a      	ldr	r2, [r7, #20]
 800dcd8:	4413      	add	r3, r2
 800dcda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	685a      	ldr	r2, [r3, #4]
 800dce4:	4b24      	ldr	r3, [pc, #144]	; (800dd78 <vPortFree+0xb8>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4013      	ands	r3, r2
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d10a      	bne.n	800dd04 <vPortFree+0x44>
	__asm volatile
 800dcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf2:	f383 8811 	msr	BASEPRI, r3
 800dcf6:	f3bf 8f6f 	isb	sy
 800dcfa:	f3bf 8f4f 	dsb	sy
 800dcfe:	60fb      	str	r3, [r7, #12]
}
 800dd00:	bf00      	nop
 800dd02:	e7fe      	b.n	800dd02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00a      	beq.n	800dd22 <vPortFree+0x62>
	__asm volatile
 800dd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd10:	f383 8811 	msr	BASEPRI, r3
 800dd14:	f3bf 8f6f 	isb	sy
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	60bb      	str	r3, [r7, #8]
}
 800dd1e:	bf00      	nop
 800dd20:	e7fe      	b.n	800dd20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	685a      	ldr	r2, [r3, #4]
 800dd26:	4b14      	ldr	r3, [pc, #80]	; (800dd78 <vPortFree+0xb8>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4013      	ands	r3, r2
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d01e      	beq.n	800dd6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d11a      	bne.n	800dd6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	685a      	ldr	r2, [r3, #4]
 800dd3c:	4b0e      	ldr	r3, [pc, #56]	; (800dd78 <vPortFree+0xb8>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	43db      	mvns	r3, r3
 800dd42:	401a      	ands	r2, r3
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dd48:	f7fe fc92 	bl	800c670 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	685a      	ldr	r2, [r3, #4]
 800dd50:	4b0a      	ldr	r3, [pc, #40]	; (800dd7c <vPortFree+0xbc>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4413      	add	r3, r2
 800dd56:	4a09      	ldr	r2, [pc, #36]	; (800dd7c <vPortFree+0xbc>)
 800dd58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dd5a:	6938      	ldr	r0, [r7, #16]
 800dd5c:	f000 f874 	bl	800de48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dd60:	4b07      	ldr	r3, [pc, #28]	; (800dd80 <vPortFree+0xc0>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	3301      	adds	r3, #1
 800dd66:	4a06      	ldr	r2, [pc, #24]	; (800dd80 <vPortFree+0xc0>)
 800dd68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dd6a:	f7fe fc8f 	bl	800c68c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dd6e:	bf00      	nop
 800dd70:	3718      	adds	r7, #24
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	20005734 	.word	0x20005734
 800dd7c:	20005724 	.word	0x20005724
 800dd80:	20005730 	.word	0x20005730

0800dd84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dd8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dd8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dd90:	4b27      	ldr	r3, [pc, #156]	; (800de30 <prvHeapInit+0xac>)
 800dd92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f003 0307 	and.w	r3, r3, #7
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00c      	beq.n	800ddb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	3307      	adds	r3, #7
 800dda2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f023 0307 	bic.w	r3, r3, #7
 800ddaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ddac:	68ba      	ldr	r2, [r7, #8]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	1ad3      	subs	r3, r2, r3
 800ddb2:	4a1f      	ldr	r2, [pc, #124]	; (800de30 <prvHeapInit+0xac>)
 800ddb4:	4413      	add	r3, r2
 800ddb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ddbc:	4a1d      	ldr	r2, [pc, #116]	; (800de34 <prvHeapInit+0xb0>)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ddc2:	4b1c      	ldr	r3, [pc, #112]	; (800de34 <prvHeapInit+0xb0>)
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	68ba      	ldr	r2, [r7, #8]
 800ddcc:	4413      	add	r3, r2
 800ddce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ddd0:	2208      	movs	r2, #8
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	1a9b      	subs	r3, r3, r2
 800ddd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f023 0307 	bic.w	r3, r3, #7
 800ddde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	4a15      	ldr	r2, [pc, #84]	; (800de38 <prvHeapInit+0xb4>)
 800dde4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dde6:	4b14      	ldr	r3, [pc, #80]	; (800de38 <prvHeapInit+0xb4>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2200      	movs	r2, #0
 800ddec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ddee:	4b12      	ldr	r3, [pc, #72]	; (800de38 <prvHeapInit+0xb4>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	1ad2      	subs	r2, r2, r3
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800de04:	4b0c      	ldr	r3, [pc, #48]	; (800de38 <prvHeapInit+0xb4>)
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	4a0a      	ldr	r2, [pc, #40]	; (800de3c <prvHeapInit+0xb8>)
 800de12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	4a09      	ldr	r2, [pc, #36]	; (800de40 <prvHeapInit+0xbc>)
 800de1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800de1c:	4b09      	ldr	r3, [pc, #36]	; (800de44 <prvHeapInit+0xc0>)
 800de1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800de22:	601a      	str	r2, [r3, #0]
}
 800de24:	bf00      	nop
 800de26:	3714      	adds	r7, #20
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr
 800de30:	20001b18 	.word	0x20001b18
 800de34:	20005718 	.word	0x20005718
 800de38:	20005720 	.word	0x20005720
 800de3c:	20005728 	.word	0x20005728
 800de40:	20005724 	.word	0x20005724
 800de44:	20005734 	.word	0x20005734

0800de48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800de50:	4b28      	ldr	r3, [pc, #160]	; (800def4 <prvInsertBlockIntoFreeList+0xac>)
 800de52:	60fb      	str	r3, [r7, #12]
 800de54:	e002      	b.n	800de5c <prvInsertBlockIntoFreeList+0x14>
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	60fb      	str	r3, [r7, #12]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	429a      	cmp	r2, r3
 800de64:	d8f7      	bhi.n	800de56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	68ba      	ldr	r2, [r7, #8]
 800de70:	4413      	add	r3, r2
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	429a      	cmp	r2, r3
 800de76:	d108      	bne.n	800de8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	685a      	ldr	r2, [r3, #4]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	441a      	add	r2, r3
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	441a      	add	r2, r3
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d118      	bne.n	800ded0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	4b15      	ldr	r3, [pc, #84]	; (800def8 <prvInsertBlockIntoFreeList+0xb0>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d00d      	beq.n	800dec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	685a      	ldr	r2, [r3, #4]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	441a      	add	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	601a      	str	r2, [r3, #0]
 800dec4:	e008      	b.n	800ded8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dec6:	4b0c      	ldr	r3, [pc, #48]	; (800def8 <prvInsertBlockIntoFreeList+0xb0>)
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	601a      	str	r2, [r3, #0]
 800dece:	e003      	b.n	800ded8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d002      	beq.n	800dee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dee6:	bf00      	nop
 800dee8:	3714      	adds	r7, #20
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr
 800def2:	bf00      	nop
 800def4:	20005718 	.word	0x20005718
 800def8:	20005720 	.word	0x20005720

0800defc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800df00:	2201      	movs	r2, #1
 800df02:	4912      	ldr	r1, [pc, #72]	; (800df4c <MX_USB_DEVICE_Init+0x50>)
 800df04:	4812      	ldr	r0, [pc, #72]	; (800df50 <MX_USB_DEVICE_Init+0x54>)
 800df06:	f7fc f8ef 	bl	800a0e8 <USBD_Init>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d004      	beq.n	800df1a <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800df10:	4b10      	ldr	r3, [pc, #64]	; (800df54 <MX_USB_DEVICE_Init+0x58>)
 800df12:	2201      	movs	r2, #1
 800df14:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800df16:	f7f4 fc43 	bl	80027a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800df1a:	490f      	ldr	r1, [pc, #60]	; (800df58 <MX_USB_DEVICE_Init+0x5c>)
 800df1c:	480c      	ldr	r0, [pc, #48]	; (800df50 <MX_USB_DEVICE_Init+0x54>)
 800df1e:	f7fc f913 	bl	800a148 <USBD_RegisterClass>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d004      	beq.n	800df32 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800df28:	4b0a      	ldr	r3, [pc, #40]	; (800df54 <MX_USB_DEVICE_Init+0x58>)
 800df2a:	2201      	movs	r2, #1
 800df2c:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800df2e:	f7f4 fc37 	bl	80027a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df32:	4807      	ldr	r0, [pc, #28]	; (800df50 <MX_USB_DEVICE_Init+0x54>)
 800df34:	f7fc f92f 	bl	800a196 <USBD_Start>
 800df38:	4603      	mov	r3, r0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d004      	beq.n	800df48 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800df3e:	4b05      	ldr	r3, [pc, #20]	; (800df54 <MX_USB_DEVICE_Init+0x58>)
 800df40:	2201      	movs	r2, #1
 800df42:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800df44:	f7f4 fc2c 	bl	80027a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df48:	bf00      	nop
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	200000cc 	.word	0x200000cc
 800df50:	2000580c 	.word	0x2000580c
 800df54:	20005738 	.word	0x20005738
 800df58:	20000018 	.word	0x20000018

0800df5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
 800df62:	4603      	mov	r3, r0
 800df64:	6039      	str	r1, [r7, #0]
 800df66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	2212      	movs	r2, #18
 800df6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800df6e:	4b03      	ldr	r3, [pc, #12]	; (800df7c <USBD_FS_DeviceDescriptor+0x20>)
}
 800df70:	4618      	mov	r0, r3
 800df72:	370c      	adds	r7, #12
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr
 800df7c:	200000e8 	.word	0x200000e8

0800df80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	4603      	mov	r3, r0
 800df88:	6039      	str	r1, [r7, #0]
 800df8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	2204      	movs	r2, #4
 800df90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800df92:	4b03      	ldr	r3, [pc, #12]	; (800dfa0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800df94:	4618      	mov	r0, r3
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr
 800dfa0:	200000fc 	.word	0x200000fc

0800dfa4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	4603      	mov	r3, r0
 800dfac:	6039      	str	r1, [r7, #0]
 800dfae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dfb0:	79fb      	ldrb	r3, [r7, #7]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d105      	bne.n	800dfc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dfb6:	683a      	ldr	r2, [r7, #0]
 800dfb8:	4907      	ldr	r1, [pc, #28]	; (800dfd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dfba:	4808      	ldr	r0, [pc, #32]	; (800dfdc <USBD_FS_ProductStrDescriptor+0x38>)
 800dfbc:	f7fd f92b 	bl	800b216 <USBD_GetString>
 800dfc0:	e004      	b.n	800dfcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dfc2:	683a      	ldr	r2, [r7, #0]
 800dfc4:	4904      	ldr	r1, [pc, #16]	; (800dfd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dfc6:	4805      	ldr	r0, [pc, #20]	; (800dfdc <USBD_FS_ProductStrDescriptor+0x38>)
 800dfc8:	f7fd f925 	bl	800b216 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dfcc:	4b02      	ldr	r3, [pc, #8]	; (800dfd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	20005adc 	.word	0x20005adc
 800dfdc:	08016a10 	.word	0x08016a10

0800dfe0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	6039      	str	r1, [r7, #0]
 800dfea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dfec:	683a      	ldr	r2, [r7, #0]
 800dfee:	4904      	ldr	r1, [pc, #16]	; (800e000 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dff0:	4804      	ldr	r0, [pc, #16]	; (800e004 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dff2:	f7fd f910 	bl	800b216 <USBD_GetString>
  return USBD_StrDesc;
 800dff6:	4b02      	ldr	r3, [pc, #8]	; (800e000 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3708      	adds	r7, #8
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	20005adc 	.word	0x20005adc
 800e004:	08016a28 	.word	0x08016a28

0800e008 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	4603      	mov	r3, r0
 800e010:	6039      	str	r1, [r7, #0]
 800e012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	221a      	movs	r2, #26
 800e018:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e01a:	f000 f843 	bl	800e0a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e01e:	4b02      	ldr	r3, [pc, #8]	; (800e028 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e020:	4618      	mov	r0, r3
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	20000100 	.word	0x20000100

0800e02c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	4603      	mov	r3, r0
 800e034:	6039      	str	r1, [r7, #0]
 800e036:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e038:	79fb      	ldrb	r3, [r7, #7]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d105      	bne.n	800e04a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e03e:	683a      	ldr	r2, [r7, #0]
 800e040:	4907      	ldr	r1, [pc, #28]	; (800e060 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e042:	4808      	ldr	r0, [pc, #32]	; (800e064 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e044:	f7fd f8e7 	bl	800b216 <USBD_GetString>
 800e048:	e004      	b.n	800e054 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e04a:	683a      	ldr	r2, [r7, #0]
 800e04c:	4904      	ldr	r1, [pc, #16]	; (800e060 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e04e:	4805      	ldr	r0, [pc, #20]	; (800e064 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e050:	f7fd f8e1 	bl	800b216 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e054:	4b02      	ldr	r3, [pc, #8]	; (800e060 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e056:	4618      	mov	r0, r3
 800e058:	3708      	adds	r7, #8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	20005adc 	.word	0x20005adc
 800e064:	08016a3c 	.word	0x08016a3c

0800e068 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	4603      	mov	r3, r0
 800e070:	6039      	str	r1, [r7, #0]
 800e072:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e074:	79fb      	ldrb	r3, [r7, #7]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d105      	bne.n	800e086 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e07a:	683a      	ldr	r2, [r7, #0]
 800e07c:	4907      	ldr	r1, [pc, #28]	; (800e09c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e07e:	4808      	ldr	r0, [pc, #32]	; (800e0a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e080:	f7fd f8c9 	bl	800b216 <USBD_GetString>
 800e084:	e004      	b.n	800e090 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e086:	683a      	ldr	r2, [r7, #0]
 800e088:	4904      	ldr	r1, [pc, #16]	; (800e09c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e08a:	4805      	ldr	r0, [pc, #20]	; (800e0a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e08c:	f7fd f8c3 	bl	800b216 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e090:	4b02      	ldr	r3, [pc, #8]	; (800e09c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e092:	4618      	mov	r0, r3
 800e094:	3708      	adds	r7, #8
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	20005adc 	.word	0x20005adc
 800e0a0:	08016a48 	.word	0x08016a48

0800e0a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e0aa:	4b0f      	ldr	r3, [pc, #60]	; (800e0e8 <Get_SerialNum+0x44>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e0b0:	4b0e      	ldr	r3, [pc, #56]	; (800e0ec <Get_SerialNum+0x48>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e0b6:	4b0e      	ldr	r3, [pc, #56]	; (800e0f0 <Get_SerialNum+0x4c>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d009      	beq.n	800e0de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e0ca:	2208      	movs	r2, #8
 800e0cc:	4909      	ldr	r1, [pc, #36]	; (800e0f4 <Get_SerialNum+0x50>)
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f000 f814 	bl	800e0fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e0d4:	2204      	movs	r2, #4
 800e0d6:	4908      	ldr	r1, [pc, #32]	; (800e0f8 <Get_SerialNum+0x54>)
 800e0d8:	68b8      	ldr	r0, [r7, #8]
 800e0da:	f000 f80f 	bl	800e0fc <IntToUnicode>
  }
}
 800e0de:	bf00      	nop
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	1fff7a10 	.word	0x1fff7a10
 800e0ec:	1fff7a14 	.word	0x1fff7a14
 800e0f0:	1fff7a18 	.word	0x1fff7a18
 800e0f4:	20000102 	.word	0x20000102
 800e0f8:	20000112 	.word	0x20000112

0800e0fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b087      	sub	sp, #28
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	4613      	mov	r3, r2
 800e108:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e10e:	2300      	movs	r3, #0
 800e110:	75fb      	strb	r3, [r7, #23]
 800e112:	e027      	b.n	800e164 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	0f1b      	lsrs	r3, r3, #28
 800e118:	2b09      	cmp	r3, #9
 800e11a:	d80b      	bhi.n	800e134 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	0f1b      	lsrs	r3, r3, #28
 800e120:	b2da      	uxtb	r2, r3
 800e122:	7dfb      	ldrb	r3, [r7, #23]
 800e124:	005b      	lsls	r3, r3, #1
 800e126:	4619      	mov	r1, r3
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	440b      	add	r3, r1
 800e12c:	3230      	adds	r2, #48	; 0x30
 800e12e:	b2d2      	uxtb	r2, r2
 800e130:	701a      	strb	r2, [r3, #0]
 800e132:	e00a      	b.n	800e14a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	0f1b      	lsrs	r3, r3, #28
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	7dfb      	ldrb	r3, [r7, #23]
 800e13c:	005b      	lsls	r3, r3, #1
 800e13e:	4619      	mov	r1, r3
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	440b      	add	r3, r1
 800e144:	3237      	adds	r2, #55	; 0x37
 800e146:	b2d2      	uxtb	r2, r2
 800e148:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	011b      	lsls	r3, r3, #4
 800e14e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e150:	7dfb      	ldrb	r3, [r7, #23]
 800e152:	005b      	lsls	r3, r3, #1
 800e154:	3301      	adds	r3, #1
 800e156:	68ba      	ldr	r2, [r7, #8]
 800e158:	4413      	add	r3, r2
 800e15a:	2200      	movs	r2, #0
 800e15c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e15e:	7dfb      	ldrb	r3, [r7, #23]
 800e160:	3301      	adds	r3, #1
 800e162:	75fb      	strb	r3, [r7, #23]
 800e164:	7dfa      	ldrb	r2, [r7, #23]
 800e166:	79fb      	ldrb	r3, [r7, #7]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d3d3      	bcc.n	800e114 <IntToUnicode+0x18>
  }
}
 800e16c:	bf00      	nop
 800e16e:	bf00      	nop
 800e170:	371c      	adds	r7, #28
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr
	...

0800e17c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b08a      	sub	sp, #40	; 0x28
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e184:	f107 0314 	add.w	r3, r7, #20
 800e188:	2200      	movs	r2, #0
 800e18a:	601a      	str	r2, [r3, #0]
 800e18c:	605a      	str	r2, [r3, #4]
 800e18e:	609a      	str	r2, [r3, #8]
 800e190:	60da      	str	r2, [r3, #12]
 800e192:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e19c:	d13a      	bne.n	800e214 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e19e:	2300      	movs	r3, #0
 800e1a0:	613b      	str	r3, [r7, #16]
 800e1a2:	4b1e      	ldr	r3, [pc, #120]	; (800e21c <HAL_PCD_MspInit+0xa0>)
 800e1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1a6:	4a1d      	ldr	r2, [pc, #116]	; (800e21c <HAL_PCD_MspInit+0xa0>)
 800e1a8:	f043 0301 	orr.w	r3, r3, #1
 800e1ac:	6313      	str	r3, [r2, #48]	; 0x30
 800e1ae:	4b1b      	ldr	r3, [pc, #108]	; (800e21c <HAL_PCD_MspInit+0xa0>)
 800e1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b2:	f003 0301 	and.w	r3, r3, #1
 800e1b6:	613b      	str	r3, [r7, #16]
 800e1b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e1ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e1be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1c0:	2302      	movs	r3, #2
 800e1c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e1cc:	230a      	movs	r3, #10
 800e1ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e1d0:	f107 0314 	add.w	r3, r7, #20
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	4812      	ldr	r0, [pc, #72]	; (800e220 <HAL_PCD_MspInit+0xa4>)
 800e1d8:	f7f5 faf2 	bl	80037c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e1dc:	4b0f      	ldr	r3, [pc, #60]	; (800e21c <HAL_PCD_MspInit+0xa0>)
 800e1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1e0:	4a0e      	ldr	r2, [pc, #56]	; (800e21c <HAL_PCD_MspInit+0xa0>)
 800e1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1e6:	6353      	str	r3, [r2, #52]	; 0x34
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	60fb      	str	r3, [r7, #12]
 800e1ec:	4b0b      	ldr	r3, [pc, #44]	; (800e21c <HAL_PCD_MspInit+0xa0>)
 800e1ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1f0:	4a0a      	ldr	r2, [pc, #40]	; (800e21c <HAL_PCD_MspInit+0xa0>)
 800e1f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e1f6:	6453      	str	r3, [r2, #68]	; 0x44
 800e1f8:	4b08      	ldr	r3, [pc, #32]	; (800e21c <HAL_PCD_MspInit+0xa0>)
 800e1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e200:	60fb      	str	r3, [r7, #12]
 800e202:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e204:	2200      	movs	r2, #0
 800e206:	2105      	movs	r1, #5
 800e208:	2043      	movs	r0, #67	; 0x43
 800e20a:	f7f4 ffc7 	bl	800319c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e20e:	2043      	movs	r0, #67	; 0x43
 800e210:	f7f4 ffe0 	bl	80031d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e214:	bf00      	nop
 800e216:	3728      	adds	r7, #40	; 0x28
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	40023800 	.word	0x40023800
 800e220:	40020000 	.word	0x40020000

0800e224 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e238:	4619      	mov	r1, r3
 800e23a:	4610      	mov	r0, r2
 800e23c:	f7fb fff6 	bl	800a22c <USBD_LL_SetupStage>
}
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	460b      	mov	r3, r1
 800e252:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e25a:	78fa      	ldrb	r2, [r7, #3]
 800e25c:	6879      	ldr	r1, [r7, #4]
 800e25e:	4613      	mov	r3, r2
 800e260:	00db      	lsls	r3, r3, #3
 800e262:	1a9b      	subs	r3, r3, r2
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	440b      	add	r3, r1
 800e268:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	78fb      	ldrb	r3, [r7, #3]
 800e270:	4619      	mov	r1, r3
 800e272:	f7fc f830 	bl	800a2d6 <USBD_LL_DataOutStage>
}
 800e276:	bf00      	nop
 800e278:	3708      	adds	r7, #8
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e27e:	b580      	push	{r7, lr}
 800e280:	b082      	sub	sp, #8
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
 800e286:	460b      	mov	r3, r1
 800e288:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e290:	78fa      	ldrb	r2, [r7, #3]
 800e292:	6879      	ldr	r1, [r7, #4]
 800e294:	4613      	mov	r3, r2
 800e296:	00db      	lsls	r3, r3, #3
 800e298:	1a9b      	subs	r3, r3, r2
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	440b      	add	r3, r1
 800e29e:	3348      	adds	r3, #72	; 0x48
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	78fb      	ldrb	r3, [r7, #3]
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	f7fc f879 	bl	800a39c <USBD_LL_DataInStage>
}
 800e2aa:	bf00      	nop
 800e2ac:	3708      	adds	r7, #8
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b082      	sub	sp, #8
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7fc f98d 	bl	800a5e0 <USBD_LL_SOF>
}
 800e2c6:	bf00      	nop
 800e2c8:	3708      	adds	r7, #8
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}

0800e2ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b084      	sub	sp, #16
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d102      	bne.n	800e2e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	73fb      	strb	r3, [r7, #15]
 800e2e6:	e008      	b.n	800e2fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	68db      	ldr	r3, [r3, #12]
 800e2ec:	2b02      	cmp	r3, #2
 800e2ee:	d102      	bne.n	800e2f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	73fb      	strb	r3, [r7, #15]
 800e2f4:	e001      	b.n	800e2fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e2f6:	f7f4 fa53 	bl	80027a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e300:	7bfa      	ldrb	r2, [r7, #15]
 800e302:	4611      	mov	r1, r2
 800e304:	4618      	mov	r0, r3
 800e306:	f7fc f92d 	bl	800a564 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e310:	4618      	mov	r0, r3
 800e312:	f7fc f8d9 	bl	800a4c8 <USBD_LL_Reset>
}
 800e316:	bf00      	nop
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
	...

0800e320 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fc f928 	bl	800a584 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	6812      	ldr	r2, [r2, #0]
 800e342:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e346:	f043 0301 	orr.w	r3, r3, #1
 800e34a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6a1b      	ldr	r3, [r3, #32]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d005      	beq.n	800e360 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e354:	4b04      	ldr	r3, [pc, #16]	; (800e368 <HAL_PCD_SuspendCallback+0x48>)
 800e356:	691b      	ldr	r3, [r3, #16]
 800e358:	4a03      	ldr	r2, [pc, #12]	; (800e368 <HAL_PCD_SuspendCallback+0x48>)
 800e35a:	f043 0306 	orr.w	r3, r3, #6
 800e35e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e360:	bf00      	nop
 800e362:	3708      	adds	r7, #8
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	e000ed00 	.word	0xe000ed00

0800e36c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fc f918 	bl	800a5b0 <USBD_LL_Resume>
}
 800e380:	bf00      	nop
 800e382:	3708      	adds	r7, #8
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	460b      	mov	r3, r1
 800e392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e39a:	78fa      	ldrb	r2, [r7, #3]
 800e39c:	4611      	mov	r1, r2
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fc f966 	bl	800a670 <USBD_LL_IsoOUTIncomplete>
}
 800e3a4:	bf00      	nop
 800e3a6:	3708      	adds	r7, #8
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e3be:	78fa      	ldrb	r2, [r7, #3]
 800e3c0:	4611      	mov	r1, r2
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fc f92e 	bl	800a624 <USBD_LL_IsoINIncomplete>
}
 800e3c8:	bf00      	nop
 800e3ca:	3708      	adds	r7, #8
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fc f96c 	bl	800a6bc <USBD_LL_DevConnected>
}
 800e3e4:	bf00      	nop
 800e3e6:	3708      	adds	r7, #8
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fc f969 	bl	800a6d2 <USBD_LL_DevDisconnected>
}
 800e400:	bf00      	nop
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	2b01      	cmp	r3, #1
 800e416:	d13c      	bne.n	800e492 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e418:	4a20      	ldr	r2, [pc, #128]	; (800e49c <USBD_LL_Init+0x94>)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	4a1e      	ldr	r2, [pc, #120]	; (800e49c <USBD_LL_Init+0x94>)
 800e424:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e428:	4b1c      	ldr	r3, [pc, #112]	; (800e49c <USBD_LL_Init+0x94>)
 800e42a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e42e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e430:	4b1a      	ldr	r3, [pc, #104]	; (800e49c <USBD_LL_Init+0x94>)
 800e432:	2206      	movs	r2, #6
 800e434:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e436:	4b19      	ldr	r3, [pc, #100]	; (800e49c <USBD_LL_Init+0x94>)
 800e438:	2202      	movs	r2, #2
 800e43a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e43c:	4b17      	ldr	r3, [pc, #92]	; (800e49c <USBD_LL_Init+0x94>)
 800e43e:	2200      	movs	r2, #0
 800e440:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e442:	4b16      	ldr	r3, [pc, #88]	; (800e49c <USBD_LL_Init+0x94>)
 800e444:	2202      	movs	r2, #2
 800e446:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e448:	4b14      	ldr	r3, [pc, #80]	; (800e49c <USBD_LL_Init+0x94>)
 800e44a:	2200      	movs	r2, #0
 800e44c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e44e:	4b13      	ldr	r3, [pc, #76]	; (800e49c <USBD_LL_Init+0x94>)
 800e450:	2200      	movs	r2, #0
 800e452:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e454:	4b11      	ldr	r3, [pc, #68]	; (800e49c <USBD_LL_Init+0x94>)
 800e456:	2200      	movs	r2, #0
 800e458:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e45a:	4b10      	ldr	r3, [pc, #64]	; (800e49c <USBD_LL_Init+0x94>)
 800e45c:	2200      	movs	r2, #0
 800e45e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e460:	4b0e      	ldr	r3, [pc, #56]	; (800e49c <USBD_LL_Init+0x94>)
 800e462:	2200      	movs	r2, #0
 800e464:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e466:	480d      	ldr	r0, [pc, #52]	; (800e49c <USBD_LL_Init+0x94>)
 800e468:	f7f5 ffcb 	bl	8004402 <HAL_PCD_Init>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d001      	beq.n	800e476 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e472:	f7f4 f995 	bl	80027a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e476:	2180      	movs	r1, #128	; 0x80
 800e478:	4808      	ldr	r0, [pc, #32]	; (800e49c <USBD_LL_Init+0x94>)
 800e47a:	f7f7 f944 	bl	8005706 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e47e:	2240      	movs	r2, #64	; 0x40
 800e480:	2100      	movs	r1, #0
 800e482:	4806      	ldr	r0, [pc, #24]	; (800e49c <USBD_LL_Init+0x94>)
 800e484:	f7f7 f8f8 	bl	8005678 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e488:	2280      	movs	r2, #128	; 0x80
 800e48a:	2101      	movs	r1, #1
 800e48c:	4803      	ldr	r0, [pc, #12]	; (800e49c <USBD_LL_Init+0x94>)
 800e48e:	f7f7 f8f3 	bl	8005678 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e492:	2300      	movs	r3, #0
}
 800e494:	4618      	mov	r0, r3
 800e496:	3708      	adds	r7, #8
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	20005cdc 	.word	0x20005cdc

0800e4a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7f6 f8c7 	bl	800464a <HAL_PCD_Start>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4c0:	7bfb      	ldrb	r3, [r7, #15]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f000 f97e 	bl	800e7c4 <USBD_Get_USB_Status>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3710      	adds	r7, #16
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}

0800e4d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b084      	sub	sp, #16
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	4608      	mov	r0, r1
 800e4e0:	4611      	mov	r1, r2
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	70fb      	strb	r3, [r7, #3]
 800e4e8:	460b      	mov	r3, r1
 800e4ea:	70bb      	strb	r3, [r7, #2]
 800e4ec:	4613      	mov	r3, r2
 800e4ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e4fe:	78bb      	ldrb	r3, [r7, #2]
 800e500:	883a      	ldrh	r2, [r7, #0]
 800e502:	78f9      	ldrb	r1, [r7, #3]
 800e504:	f7f6 fcd8 	bl	8004eb8 <HAL_PCD_EP_Open>
 800e508:	4603      	mov	r3, r0
 800e50a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e50c:	7bfb      	ldrb	r3, [r7, #15]
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 f958 	bl	800e7c4 <USBD_Get_USB_Status>
 800e514:	4603      	mov	r3, r0
 800e516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e518:	7bbb      	ldrb	r3, [r7, #14]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3710      	adds	r7, #16
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e522:	b580      	push	{r7, lr}
 800e524:	b084      	sub	sp, #16
 800e526:	af00      	add	r7, sp, #0
 800e528:	6078      	str	r0, [r7, #4]
 800e52a:	460b      	mov	r3, r1
 800e52c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e52e:	2300      	movs	r3, #0
 800e530:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e532:	2300      	movs	r3, #0
 800e534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e53c:	78fa      	ldrb	r2, [r7, #3]
 800e53e:	4611      	mov	r1, r2
 800e540:	4618      	mov	r0, r3
 800e542:	f7f6 fd21 	bl	8004f88 <HAL_PCD_EP_Close>
 800e546:	4603      	mov	r3, r0
 800e548:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e54a:	7bfb      	ldrb	r3, [r7, #15]
 800e54c:	4618      	mov	r0, r3
 800e54e:	f000 f939 	bl	800e7c4 <USBD_Get_USB_Status>
 800e552:	4603      	mov	r3, r0
 800e554:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e556:	7bbb      	ldrb	r3, [r7, #14]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3710      	adds	r7, #16
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	460b      	mov	r3, r1
 800e56a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e56c:	2300      	movs	r3, #0
 800e56e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e570:	2300      	movs	r3, #0
 800e572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e57a:	78fa      	ldrb	r2, [r7, #3]
 800e57c:	4611      	mov	r1, r2
 800e57e:	4618      	mov	r0, r3
 800e580:	f7f6 fde1 	bl	8005146 <HAL_PCD_EP_SetStall>
 800e584:	4603      	mov	r3, r0
 800e586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e588:	7bfb      	ldrb	r3, [r7, #15]
 800e58a:	4618      	mov	r0, r3
 800e58c:	f000 f91a 	bl	800e7c4 <USBD_Get_USB_Status>
 800e590:	4603      	mov	r3, r0
 800e592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e594:	7bbb      	ldrb	r3, [r7, #14]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b084      	sub	sp, #16
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e5b8:	78fa      	ldrb	r2, [r7, #3]
 800e5ba:	4611      	mov	r1, r2
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7f6 fe26 	bl	800520e <HAL_PCD_EP_ClrStall>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5c6:	7bfb      	ldrb	r3, [r7, #15]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f000 f8fb 	bl	800e7c4 <USBD_Get_USB_Status>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3710      	adds	r7, #16
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b085      	sub	sp, #20
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e5ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e5f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	da0b      	bge.n	800e610 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e5f8:	78fb      	ldrb	r3, [r7, #3]
 800e5fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e5fe:	68f9      	ldr	r1, [r7, #12]
 800e600:	4613      	mov	r3, r2
 800e602:	00db      	lsls	r3, r3, #3
 800e604:	1a9b      	subs	r3, r3, r2
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	440b      	add	r3, r1
 800e60a:	333e      	adds	r3, #62	; 0x3e
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	e00b      	b.n	800e628 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e610:	78fb      	ldrb	r3, [r7, #3]
 800e612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e616:	68f9      	ldr	r1, [r7, #12]
 800e618:	4613      	mov	r3, r2
 800e61a:	00db      	lsls	r3, r3, #3
 800e61c:	1a9b      	subs	r3, r3, r2
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	440b      	add	r3, r1
 800e622:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e626:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3714      	adds	r7, #20
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr

0800e634 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	460b      	mov	r3, r1
 800e63e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e640:	2300      	movs	r3, #0
 800e642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e644:	2300      	movs	r3, #0
 800e646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e64e:	78fa      	ldrb	r2, [r7, #3]
 800e650:	4611      	mov	r1, r2
 800e652:	4618      	mov	r0, r3
 800e654:	f7f6 fc0b 	bl	8004e6e <HAL_PCD_SetAddress>
 800e658:	4603      	mov	r3, r0
 800e65a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e65c:	7bfb      	ldrb	r3, [r7, #15]
 800e65e:	4618      	mov	r0, r3
 800e660:	f000 f8b0 	bl	800e7c4 <USBD_Get_USB_Status>
 800e664:	4603      	mov	r3, r0
 800e666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e668:	7bbb      	ldrb	r3, [r7, #14]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}

0800e672 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e672:	b580      	push	{r7, lr}
 800e674:	b086      	sub	sp, #24
 800e676:	af00      	add	r7, sp, #0
 800e678:	60f8      	str	r0, [r7, #12]
 800e67a:	607a      	str	r2, [r7, #4]
 800e67c:	603b      	str	r3, [r7, #0]
 800e67e:	460b      	mov	r3, r1
 800e680:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e682:	2300      	movs	r3, #0
 800e684:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e686:	2300      	movs	r3, #0
 800e688:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e690:	7af9      	ldrb	r1, [r7, #11]
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	f7f6 fd0c 	bl	80050b2 <HAL_PCD_EP_Transmit>
 800e69a:	4603      	mov	r3, r0
 800e69c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e69e:	7dfb      	ldrb	r3, [r7, #23]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f000 f88f 	bl	800e7c4 <USBD_Get_USB_Status>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e6aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b086      	sub	sp, #24
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	607a      	str	r2, [r7, #4]
 800e6be:	603b      	str	r3, [r7, #0]
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e6d2:	7af9      	ldrb	r1, [r7, #11]
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	f7f6 fca0 	bl	800501c <HAL_PCD_EP_Receive>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6e0:	7dfb      	ldrb	r3, [r7, #23]
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f000 f86e 	bl	800e7c4 <USBD_Get_USB_Status>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e6ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3718      	adds	r7, #24
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
	...

0800e6f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	460b      	mov	r3, r1
 800e702:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e704:	78fb      	ldrb	r3, [r7, #3]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d002      	beq.n	800e710 <HAL_PCDEx_LPM_Callback+0x18>
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d01f      	beq.n	800e74e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e70e:	e03b      	b.n	800e788 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6a1b      	ldr	r3, [r3, #32]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d007      	beq.n	800e728 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800e718:	f7f2 fdd0 	bl	80012bc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e71c:	4b1c      	ldr	r3, [pc, #112]	; (800e790 <HAL_PCDEx_LPM_Callback+0x98>)
 800e71e:	691b      	ldr	r3, [r3, #16]
 800e720:	4a1b      	ldr	r2, [pc, #108]	; (800e790 <HAL_PCDEx_LPM_Callback+0x98>)
 800e722:	f023 0306 	bic.w	r3, r3, #6
 800e726:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	6812      	ldr	r2, [r2, #0]
 800e736:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e73a:	f023 0301 	bic.w	r3, r3, #1
 800e73e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e746:	4618      	mov	r0, r3
 800e748:	f7fb ff32 	bl	800a5b0 <USBD_LL_Resume>
    break;
 800e74c:	e01c      	b.n	800e788 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	6812      	ldr	r2, [r2, #0]
 800e75c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e760:	f043 0301 	orr.w	r3, r3, #1
 800e764:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7fb ff09 	bl	800a584 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6a1b      	ldr	r3, [r3, #32]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d005      	beq.n	800e786 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e77a:	4b05      	ldr	r3, [pc, #20]	; (800e790 <HAL_PCDEx_LPM_Callback+0x98>)
 800e77c:	691b      	ldr	r3, [r3, #16]
 800e77e:	4a04      	ldr	r2, [pc, #16]	; (800e790 <HAL_PCDEx_LPM_Callback+0x98>)
 800e780:	f043 0306 	orr.w	r3, r3, #6
 800e784:	6113      	str	r3, [r2, #16]
    break;
 800e786:	bf00      	nop
}
 800e788:	bf00      	nop
 800e78a:	3708      	adds	r7, #8
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	e000ed00 	.word	0xe000ed00

0800e794 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e794:	b480      	push	{r7}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e79c:	4b03      	ldr	r3, [pc, #12]	; (800e7ac <USBD_static_malloc+0x18>)
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	370c      	adds	r7, #12
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	2000573c 	.word	0x2000573c

0800e7b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b083      	sub	sp, #12
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]

}
 800e7b8:	bf00      	nop
 800e7ba:	370c      	adds	r7, #12
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b085      	sub	sp, #20
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e7d2:	79fb      	ldrb	r3, [r7, #7]
 800e7d4:	2b03      	cmp	r3, #3
 800e7d6:	d817      	bhi.n	800e808 <USBD_Get_USB_Status+0x44>
 800e7d8:	a201      	add	r2, pc, #4	; (adr r2, 800e7e0 <USBD_Get_USB_Status+0x1c>)
 800e7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7de:	bf00      	nop
 800e7e0:	0800e7f1 	.word	0x0800e7f1
 800e7e4:	0800e7f7 	.word	0x0800e7f7
 800e7e8:	0800e7fd 	.word	0x0800e7fd
 800e7ec:	0800e803 	.word	0x0800e803
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800e7f4:	e00b      	b.n	800e80e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e7f6:	2303      	movs	r3, #3
 800e7f8:	73fb      	strb	r3, [r7, #15]
    break;
 800e7fa:	e008      	b.n	800e80e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800e800:	e005      	b.n	800e80e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e802:	2303      	movs	r3, #3
 800e804:	73fb      	strb	r3, [r7, #15]
    break;
 800e806:	e002      	b.n	800e80e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e808:	2303      	movs	r3, #3
 800e80a:	73fb      	strb	r3, [r7, #15]
    break;
 800e80c:	bf00      	nop
  }
  return usb_status;
 800e80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e810:	4618      	mov	r0, r3
 800e812:	3714      	adds	r7, #20
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	4608      	mov	r0, r1
 800e826:	4611      	mov	r1, r2
 800e828:	461a      	mov	r2, r3
 800e82a:	4603      	mov	r3, r0
 800e82c:	70fb      	strb	r3, [r7, #3]
 800e82e:	460b      	mov	r3, r1
 800e830:	70bb      	strb	r3, [r7, #2]
 800e832:	4613      	mov	r3, r2
 800e834:	707b      	strb	r3, [r7, #1]
                return 0;
 800e836:	2300      	movs	r3, #0
        }
 800e838:	4618      	mov	r0, r3
 800e83a:	370c      	adds	r7, #12
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr

0800e844 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	4608      	mov	r0, r1
 800e84e:	4611      	mov	r1, r2
 800e850:	461a      	mov	r2, r3
 800e852:	4603      	mov	r3, r0
 800e854:	70fb      	strb	r3, [r7, #3]
 800e856:	460b      	mov	r3, r1
 800e858:	70bb      	strb	r3, [r7, #2]
 800e85a:	4613      	mov	r3, r2
 800e85c:	707b      	strb	r3, [r7, #1]
                return 0;
 800e85e:	2300      	movs	r3, #0
        }
 800e860:	4618      	mov	r0, r3
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
                return 0;
 800e874:	2300      	movs	r3, #0
        }
 800e876:	4618      	mov	r0, r3
 800e878:	370c      	adds	r7, #12
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr

0800e882 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800e882:	b480      	push	{r7}
 800e884:	b083      	sub	sp, #12
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
                return 0;
 800e88a:	2300      	movs	r3, #0
        }
 800e88c:	4618      	mov	r0, r3
 800e88e:	370c      	adds	r7, #12
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr

0800e898 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800e898:	b480      	push	{r7}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
                return 0;
 800e8a0:	2300      	movs	r3, #0
        }
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	370c      	adds	r7, #12
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr

0800e8ae <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800e8ae:	b480      	push	{r7}
 800e8b0:	b083      	sub	sp, #12
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	70fb      	strb	r3, [r7, #3]
                return;
 800e8ba:	bf00      	nop
        } // Note used for hubs only!
 800e8bc:	370c      	adds	r7, #12
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr

0800e8c6 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800e8c6:	b480      	push	{r7}
 800e8c8:	b083      	sub	sp, #12
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	807b      	strh	r3, [r7, #2]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	803b      	strh	r3, [r7, #0]
                return false;
 800e8d6:	2300      	movs	r3, #0
        }
 800e8d8:	4618      	mov	r0, r3
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr

0800e8e4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	70fb      	strb	r3, [r7, #3]
                return false;
 800e8f0:	2300      	movs	r3, #0
        }
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	370c      	adds	r7, #12
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr

0800e8fe <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800e8fe:	b480      	push	{r7}
 800e900:	b083      	sub	sp, #12
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
 800e906:	460b      	mov	r3, r1
 800e908:	70fb      	strb	r3, [r7, #3]
                return true;
 800e90a:	2301      	movs	r3, #1
        }
 800e90c:	4618      	mov	r0, r3
 800e90e:	370c      	adds	r7, #12
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800e918:	b480      	push	{r7}
 800e91a:	b083      	sub	sp, #12
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800e920:	687b      	ldr	r3, [r7, #4]
        };
 800e922:	4618      	mov	r0, r3
 800e924:	370c      	adds	r7, #12
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr

0800e92e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800e92e:	b480      	push	{r7}
 800e930:	b085      	sub	sp, #20
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
 800e936:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800e938:	2300      	movs	r3, #0
 800e93a:	73fb      	strb	r3, [r7, #15]
 800e93c:	7bfb      	ldrb	r3, [r7, #15]
 800e93e:	2b0f      	cmp	r3, #15
 800e940:	d812      	bhi.n	800e968 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800e942:	7bfa      	ldrb	r2, [r7, #15]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	321e      	adds	r2, #30
 800e948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d107      	bne.n	800e960 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800e950:	7bfa      	ldrb	r2, [r7, #15]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	321e      	adds	r2, #30
 800e956:	6839      	ldr	r1, [r7, #0]
 800e958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800e95c:	2300      	movs	r3, #0
 800e95e:	e004      	b.n	800e96a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800e960:	7bfb      	ldrb	r3, [r7, #15]
 800e962:	3301      	adds	r3, #1
 800e964:	73fb      	strb	r3, [r7, #15]
 800e966:	e7e9      	b.n	800e93c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800e968:	23d3      	movs	r3, #211	; 0xd3
        };
 800e96a:	4618      	mov	r0, r3
 800e96c:	3714      	adds	r7, #20
 800e96e:	46bd      	mov	sp, r7
 800e970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e974:	4770      	bx	lr

0800e976 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800e976:	b480      	push	{r7}
 800e978:	b083      	sub	sp, #12
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	701a      	strb	r2, [r3, #0]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2200      	movs	r2, #0
 800e988:	705a      	strb	r2, [r3, #1]
 800e98a:	2200      	movs	r2, #0
 800e98c:	709a      	strb	r2, [r3, #2]
 800e98e:	2200      	movs	r2, #0
 800e990:	70da      	strb	r2, [r3, #3]
 800e992:	2200      	movs	r2, #0
 800e994:	711a      	strb	r2, [r3, #4]
        };
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4618      	mov	r0, r3
 800e99a:	370c      	adds	r7, #12
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr

0800e9a4 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	601a      	str	r2, [r3, #0]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	711a      	strb	r2, [r3, #4]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	715a      	strb	r2, [r3, #5]
        };
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	781a      	ldrb	r2, [r3, #0]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	715a      	strb	r2, [r3, #5]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	795a      	ldrb	r2, [r3, #5]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	711a      	strb	r2, [r3, #4]
        };
 800e9f0:	bf00      	nop
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	601a      	str	r2, [r3, #0]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	711a      	strb	r2, [r3, #4]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2200      	movs	r2, #0
 800ea14:	80da      	strh	r2, [r3, #6]
        };
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	4618      	mov	r0, r3
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	80da      	strh	r2, [r3, #6]
        };
 800ea3e:	bf00      	nop
 800ea40:	370c      	adds	r7, #12
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr

0800ea4a <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800ea4a:	b480      	push	{r7}
 800ea4c:	b085      	sub	sp, #20
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	60f8      	str	r0, [r7, #12]
 800ea52:	60b9      	str	r1, [r7, #8]
 800ea54:	607a      	str	r2, [r7, #4]
 800ea56:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	791b      	ldrb	r3, [r3, #4]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d002      	beq.n	800ea66 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d009      	beq.n	800ea78 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800ea64:	e029      	b.n	800eaba <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	887a      	ldrh	r2, [r7, #2]
 800ea6a:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	791b      	ldrb	r3, [r3, #4]
 800ea70:	3301      	adds	r3, #1
 800ea72:	b2da      	uxtb	r2, r3
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	88db      	ldrh	r3, [r3, #6]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d015      	beq.n	800eaac <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	881b      	ldrh	r3, [r3, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d011      	beq.n	800eaac <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	88db      	ldrh	r3, [r3, #6]
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	80da      	strh	r2, [r3, #6]
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	1c5a      	adds	r2, r3, #1
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	601a      	str	r2, [r3, #0]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	881b      	ldrh	r3, [r3, #0]
 800eaa2:	3b01      	subs	r3, #1
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	801a      	strh	r2, [r3, #0]
 800eaaa:	e7e5      	b.n	800ea78 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	88db      	ldrh	r3, [r3, #6]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d102      	bne.n	800eaba <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	88db      	ldrh	r3, [r3, #6]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	bf0c      	ite	eq
 800eac2:	2301      	moveq	r3, #1
 800eac4:	2300      	movne	r3, #0
 800eac6:	b2db      	uxtb	r3, r3
        };
 800eac8:	4618      	mov	r0, r3
 800eaca:	3714      	adds	r7, #20
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	4608      	mov	r0, r1
 800eade:	4611      	mov	r1, r2
 800eae0:	461a      	mov	r2, r3
 800eae2:	4603      	mov	r3, r0
 800eae4:	70fb      	strb	r3, [r7, #3]
 800eae6:	460b      	mov	r3, r1
 800eae8:	70bb      	strb	r3, [r7, #2]
 800eaea:	4613      	mov	r3, r2
 800eaec:	707b      	strb	r3, [r7, #1]
        };
 800eaee:	bf00      	nop
 800eaf0:	370c      	adds	r7, #12
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf8:	4770      	bx	lr
	...

0800eafc <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800eafc:	b480      	push	{r7}
 800eafe:	b083      	sub	sp, #12
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	4a04      	ldr	r2, [pc, #16]	; (800eb18 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	601a      	str	r2, [r3, #0]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr
 800eb18:	080188a4 	.word	0x080188a4

0800eb1c <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	4a04      	ldr	r2, [pc, #16]	; (800eb38 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	601a      	str	r2, [r3, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	370c      	adds	r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr
 800eb38:	0801888c 	.word	0x0801888c

0800eb3c <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
                return bAddress;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
        };
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	370c      	adds	r7, #12
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb54:	4770      	bx	lr

0800eb56 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800eb56:	b480      	push	{r7}
 800eb58:	b083      	sub	sp, #12
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
        };
 800eb64:	4618      	mov	r0, r3
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	460b      	mov	r3, r1
 800eb7a:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800eb7c:	78fb      	ldrb	r3, [r7, #3]
 800eb7e:	2be0      	cmp	r3, #224	; 0xe0
 800eb80:	bf0c      	ite	eq
 800eb82:	2301      	moveq	r3, #1
 800eb84:	2300      	movne	r3, #0
 800eb86:	b2db      	uxtb	r3, r3
        };
 800eb88:	4618      	mov	r0, r3
 800eb8a:	370c      	adds	r7, #12
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr

0800eb94 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	807b      	strh	r3, [r7, #2]
 800eba0:	4613      	mov	r3, r2
 800eba2:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800eba4:	887b      	ldrh	r3, [r7, #2]
 800eba6:	f640 225c 	movw	r2, #2652	; 0xa5c
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d104      	bne.n	800ebb8 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800ebae:	883b      	ldrh	r3, [r7, #0]
 800ebb0:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d009      	beq.n	800ebcc <_ZN3BTD8VIDPIDOKEtt+0x38>
 800ebb8:	887b      	ldrh	r3, [r7, #2]
 800ebba:	f240 520d 	movw	r2, #1293	; 0x50d
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d106      	bne.n	800ebd0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800ebc2:	883b      	ldrh	r3, [r7, #0]
 800ebc4:	f240 625a 	movw	r2, #1626	; 0x65a
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d101      	bne.n	800ebd0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800ebcc:	2301      	movs	r3, #1
 800ebce:	e02d      	b.n	800ec2c <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	7d1b      	ldrb	r3, [r3, #20]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d113      	bne.n	800ec00 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	7d5b      	ldrb	r3, [r3, #21]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d10f      	bne.n	800ec00 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	7d9b      	ldrb	r3, [r3, #22]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d10b      	bne.n	800ec00 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	7ddb      	ldrb	r3, [r3, #23]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d107      	bne.n	800ec00 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	7e1b      	ldrb	r3, [r3, #24]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d103      	bne.n	800ec00 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	7e5b      	ldrb	r3, [r3, #25]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d014      	beq.n	800ec2a <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800ec00:	887b      	ldrh	r3, [r7, #2]
 800ec02:	f240 524c 	movw	r2, #1356	; 0x54c
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d10f      	bne.n	800ec2a <_ZN3BTD8VIDPIDOKEtt+0x96>
 800ec0a:	883b      	ldrh	r3, [r7, #0]
 800ec0c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ec10:	d009      	beq.n	800ec26 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800ec12:	883b      	ldrh	r3, [r7, #0]
 800ec14:	f240 422f 	movw	r2, #1071	; 0x42f
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d004      	beq.n	800ec26 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800ec1c:	883b      	ldrh	r3, [r7, #0]
 800ec1e:	f240 32d5 	movw	r2, #981	; 0x3d5
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d101      	bne.n	800ec2a <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800ec26:	2301      	movs	r3, #1
 800ec28:	e000      	b.n	800ec2c <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800ec2a:	2300      	movs	r3, #0
        };
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr

0800ec38 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7ff ff59 	bl	800eafc <_ZN15USBDeviceConfigC1Ev>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	3304      	adds	r3, #4
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7ff ff64 	bl	800eb1c <_ZN17UsbConfigXtracterC1Ev>
 800ec54:	4a2b      	ldr	r2, [pc, #172]	; (800ed04 <_ZN3BTDC1EP3USB+0xcc>)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	601a      	str	r2, [r3, #0]
 800ec5a:	4a2b      	ldr	r2, [pc, #172]	; (800ed08 <_ZN3BTDC1EP3USB+0xd0>)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	605a      	str	r2, [r3, #4]
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2200      	movs	r2, #0
 800ec64:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2200      	movs	r2, #0
 800ec84:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	683a      	ldr	r2, [r7, #0]
 800ec8c:	665a      	str	r2, [r3, #100]	; 0x64
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2200      	movs	r2, #0
 800ec92:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2201      	movs	r2, #1
 800ec9a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2200      	movs	r2, #0
 800eca2:	679a      	str	r2, [r3, #120]	; 0x78
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	73fb      	strb	r3, [r7, #15]
 800ecc0:	7bfb      	ldrb	r3, [r7, #15]
 800ecc2:	2b03      	cmp	r3, #3
 800ecc4:	d80a      	bhi.n	800ecdc <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800ecc6:	7bfb      	ldrb	r3, [r7, #15]
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	331e      	adds	r3, #30
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	4413      	add	r3, r2
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ecd4:	7bfb      	ldrb	r3, [r7, #15]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	73fb      	strb	r3, [r7, #15]
 800ecda:	e7f1      	b.n	800ecc0 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 fb31 	bl	800f344 <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d006      	beq.n	800ecf8 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7ff fe1b 	bl	800e92e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	0801884c 	.word	0x0801884c
 800ed08:	08018880 	.word	0x08018880

0800ed0c <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800ed0c:	b590      	push	{r4, r7, lr}
 800ed0e:	b08f      	sub	sp, #60	; 0x3c
 800ed10:	af02      	add	r7, sp, #8
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	4608      	mov	r0, r1
 800ed16:	4611      	mov	r1, r2
 800ed18:	461a      	mov	r2, r3
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	70fb      	strb	r3, [r7, #3]
 800ed1e:	460b      	mov	r3, r1
 800ed20:	70bb      	strb	r3, [r7, #2]
 800ed22:	4613      	mov	r3, r2
 800ed24:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800ed26:	2312      	movs	r3, #18
 800ed28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800ed2c:	f107 0308 	add.w	r3, r7, #8
 800ed30:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800ed32:	2300      	movs	r3, #0
 800ed34:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800ed36:	2300      	movs	r3, #0
 800ed38:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 fb02 	bl	800f344 <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7ff fde7 	bl	800e918 <_ZN3USB14GetAddressPoolEv>
 800ed4a:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d005      	beq.n	800ed62 <_ZN3BTD15ConfigureDeviceEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
 800ed56:	2180      	movs	r1, #128	; 0x80
 800ed58:	4852      	ldr	r0, [pc, #328]	; (800eea4 <_ZN3BTD15ConfigureDeviceEhhb+0x198>)
 800ed5a:	f006 ff6b 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800ed5e:	23d9      	movs	r3, #217	; 0xd9
 800ed60:	e09c      	b.n	800ee9c <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2100      	movs	r1, #0
 800ed6a:	69f8      	ldr	r0, [r7, #28]
 800ed6c:	4798      	blx	r3
 800ed6e:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800ed70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d105      	bne.n	800ed82 <_ZN3BTD15ConfigureDeviceEhhb+0x76>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
 800ed76:	2180      	movs	r1, #128	; 0x80
 800ed78:	484b      	ldr	r0, [pc, #300]	; (800eea8 <_ZN3BTD15ConfigureDeviceEhhb+0x19c>)
 800ed7a:	f006 ff5b 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ed7e:	23d6      	movs	r3, #214	; 0xd6
 800ed80:	e08c      	b.n	800ee9c <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        if(!p->epinfo) {
 800ed82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d105      	bne.n	800ed96 <_ZN3BTD15ConfigureDeviceEhhb+0x8a>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
 800ed8a:	2180      	movs	r1, #128	; 0x80
 800ed8c:	4847      	ldr	r0, [pc, #284]	; (800eeac <_ZN3BTD15ConfigureDeviceEhhb+0x1a0>)
 800ed8e:	f006 ff51 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800ed92:	23d7      	movs	r3, #215	; 0xd7
 800ed94:	e082      	b.n	800ee9c <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800ed96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f103 0269 	add.w	r2, r3, #105	; 0x69
 800eda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda4:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800eda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda8:	787a      	ldrb	r2, [r7, #1]
 800edaa:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800edb0:	f107 0308 	add.w	r3, r7, #8
 800edb4:	9300      	str	r3, [sp, #0]
 800edb6:	2312      	movs	r3, #18
 800edb8:	2200      	movs	r2, #0
 800edba:	2100      	movs	r1, #0
 800edbc:	f006 f895 	bl	8014eea <_ZN3USB11getDevDescrEhhtPh>
 800edc0:	4603      	mov	r3, r0
 800edc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800edc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc8:	6a3a      	ldr	r2, [r7, #32]
 800edca:	601a      	str	r2, [r3, #0]

        if(rcode)
 800edcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d14e      	bne.n	800ee72 <_ZN3BTD15ConfigureDeviceEhhb+0x166>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	3304      	adds	r3, #4
 800edda:	681c      	ldr	r4, [r3, #0]
 800eddc:	78bb      	ldrb	r3, [r7, #2]
 800edde:	78f9      	ldrb	r1, [r7, #3]
 800ede0:	2200      	movs	r2, #0
 800ede2:	69f8      	ldr	r0, [r7, #28]
 800ede4:	47a0      	blx	r4
 800ede6:	4603      	mov	r3, r0
 800ede8:	461a      	mov	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

        if(!bAddress) {
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d105      	bne.n	800ee06 <_ZN3BTD15ConfigureDeviceEhhb+0xfa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
 800edfa:	2180      	movs	r1, #128	; 0x80
 800edfc:	482c      	ldr	r0, [pc, #176]	; (800eeb0 <_ZN3BTD15ConfigureDeviceEhhb+0x1a4>)
 800edfe:	f006 ff19 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800ee02:	23d4      	movs	r3, #212	; 0xd4
 800ee04:	e04a      	b.n	800ee9c <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800ee06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee08:	791b      	ldrb	r3, [r3, #4]
 800ee0a:	2b09      	cmp	r3, #9
 800ee0c:	d017      	beq.n	800ee3e <_ZN3BTD15ConfigureDeviceEhhb+0x132>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800ee0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee10:	79da      	ldrb	r2, [r3, #7]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800ee18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1a:	7c5a      	ldrb	r2, [r3, #17]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

        VID = udd->idVendor;
 800ee22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee24:	891b      	ldrh	r3, [r3, #8]
 800ee26:	b29a      	uxth	r2, r3
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        PID = udd->idProduct;
 800ee2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee30:	895b      	ldrh	r3, [r3, #10]
 800ee32:	b29a      	uxth	r2, r3
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800ee3a:	23e0      	movs	r3, #224	; 0xe0
 800ee3c:	e02e      	b.n	800ee9c <_ZN3BTD15ConfigureDeviceEhhb+0x190>
                goto FailHub;
 800ee3e:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
 800ee40:	2180      	movs	r1, #128	; 0x80
 800ee42:	481c      	ldr	r0, [pc, #112]	; (800eeb4 <_ZN3BTD15ConfigureDeviceEhhb+0x1a8>)
 800ee44:	f006 fef6 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800ee52:	2300      	movs	r3, #0
 800ee54:	2200      	movs	r2, #0
 800ee56:	f006 f8e5 	bl	8015024 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800ee5a:	23d1      	movs	r3, #209	; 0xd1
 800ee5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	3308      	adds	r3, #8
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	4798      	blx	r3
        return rcode;
 800ee6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee70:	e014      	b.n	800ee9c <_ZN3BTD15ConfigureDeviceEhhb+0x190>
                goto FailGetDevDescr;
 800ee72:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
 800ee74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f006 ff53 	bl	8015d24 <_Z21NotifyFailGetDevDescrh>
#endif
        if(rcode != hrJERR)
 800ee7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee82:	2b0d      	cmp	r3, #13
 800ee84:	d002      	beq.n	800ee8c <_ZN3BTD15ConfigureDeviceEhhb+0x180>
                rcode = USB_ERROR_FailGetDevDescr;
 800ee86:	23e1      	movs	r3, #225	; 0xe1
 800ee88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	3308      	adds	r3, #8
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	4798      	blx	r3
        return rcode;
 800ee98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3734      	adds	r7, #52	; 0x34
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd90      	pop	{r4, r7, pc}
 800eea4:	08016a58 	.word	0x08016a58
 800eea8:	08016a6c 	.word	0x08016a6c
 800eeac:	08016a80 	.word	0x08016a80
 800eeb0:	08016a94 	.word	0x08016a94
 800eeb4:	08016aac 	.word	0x08016aac

0800eeb8 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b096      	sub	sp, #88	; 0x58
 800eebc:	af02      	add	r7, sp, #8
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	4608      	mov	r0, r1
 800eec2:	4611      	mov	r1, r2
 800eec4:	461a      	mov	r2, r3
 800eec6:	4603      	mov	r3, r0
 800eec8:	70fb      	strb	r3, [r7, #3]
 800eeca:	460b      	mov	r3, r1
 800eecc:	70bb      	strb	r3, [r7, #2]
 800eece:	4613      	mov	r3, r2
 800eed0:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800eed8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        epInfo[1].epAddr = 0;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2200      	movs	r2, #0
 800eee0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

        AddressPool &addrPool = pUsb->GetAddressPool();
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7ff fd15 	bl	800e918 <_ZN3USB14GetAddressPoolEv>
 800eeee:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800eef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 800eefc:	4611      	mov	r1, r2
 800eefe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ef00:	4798      	blx	r3
 800ef02:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800ef04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d105      	bne.n	800ef16 <_ZN3BTD4InitEhhb+0x5e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
 800ef0a:	2180      	movs	r1, #128	; 0x80
 800ef0c:	48ae      	ldr	r0, [pc, #696]	; (800f1c8 <_ZN3BTD4InitEhhb+0x310>)
 800ef0e:	f006 fe91 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ef12:	23d6      	movs	r3, #214	; 0xd6
 800ef14:	e20e      	b.n	800f334 <_ZN3BTD4InitEhhb+0x47c>
        }

        delay(300); // Assign new address to the device
 800ef16:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ef1a:	f7f4 f863 	bl	8002fe4 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ef28:	2200      	movs	r2, #0
 800ef2a:	2100      	movs	r1, #0
 800ef2c:	f006 f87a 	bl	8015024 <_ZN3USB7setAddrEhhh>
 800ef30:	4603      	mov	r3, r0
 800ef32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800ef36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00d      	beq.n	800ef5a <_ZN3BTD4InitEhhb+0xa2>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
 800ef3e:	2180      	movs	r1, #128	; 0x80
 800ef40:	48a2      	ldr	r0, [pc, #648]	; (800f1cc <_ZN3BTD4InitEhhb+0x314>)
 800ef42:	f006 fe77 	bl	8015c34 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (rcode, 0x80);
 800ef46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef4a:	2180      	movs	r1, #128	; 0x80
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f002 fed0 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
#endif
                p->lowspeed = false;
 800ef52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef54:	2200      	movs	r2, #0
 800ef56:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800ef58:	e1db      	b.n	800f312 <_ZN3BTD4InitEhhb+0x45a>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800ef5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800ef60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 800ef6c:	4611      	mov	r1, r2
 800ef6e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ef70:	4798      	blx	r3
 800ef72:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800ef74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d105      	bne.n	800ef86 <_ZN3BTD4InitEhhb+0xce>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
 800ef7a:	2180      	movs	r1, #128	; 0x80
 800ef7c:	4892      	ldr	r0, [pc, #584]	; (800f1c8 <_ZN3BTD4InitEhhb+0x310>)
 800ef7e:	f006 fe59 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ef82:	23d6      	movs	r3, #214	; 0xd6
 800ef84:	e1d6      	b.n	800f334 <_ZN3BTD4InitEhhb+0x47c>
        }

        p->lowspeed = lowspeed;
 800ef86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef88:	787a      	ldrb	r2, [r7, #1]
 800ef8a:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	3369      	adds	r3, #105	; 0x69
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	f004 ff13 	bl	8013dc6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800efa0:	4603      	mov	r3, r0
 800efa2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800efa6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800efaa:	2b00      	cmp	r3, #0
 800efac:	f040 818a 	bne.w	800f2c4 <_ZN3BTD4InitEhhb+0x40c>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800efb6:	f240 524c 	movw	r2, #1356	; 0x54c
 800efba:	4293      	cmp	r3, r2
 800efbc:	f040 80c5 	bne.w	800f14a <_ZN3BTD4InitEhhb+0x292>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800efc6:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800efca:	d00e      	beq.n	800efea <_ZN3BTD4InitEhhb+0x132>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800efd2:	f240 422f 	movw	r2, #1071	; 0x42f
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d007      	beq.n	800efea <_ZN3BTD4InitEhhb+0x132>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800efe0:	f240 32d5 	movw	r2, #981	; 0x3d5
 800efe4:	4293      	cmp	r3, r2
 800efe6:	f040 80b0 	bne.w	800f14a <_ZN3BTD4InitEhhb+0x292>
                delay(100);
 800efea:	2064      	movs	r0, #100	; 0x64
 800efec:	f7f3 fffa 	bl	8002fe4 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800f000:	2301      	movs	r3, #1
 800f002:	f006 f83d 	bl	8015080 <_ZN3USB7setConfEhhh>
 800f006:	4603      	mov	r3, r0
 800f008:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800f00c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f010:	2b00      	cmp	r3, #0
 800f012:	f040 8161 	bne.w	800f2d8 <_ZN3BTD4InitEhhb+0x420>
                        goto FailSetConfDescr;

#ifdef DEBUG_USB_HOST
                if(PID == PS3_PID || PID == PS3NAVIGATION_PID) {
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800f01c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800f020:	d006      	beq.n	800f030 <_ZN3BTD4InitEhhb+0x178>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800f028:	f240 422f 	movw	r2, #1071	; 0x42f
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d10f      	bne.n	800f050 <_ZN3BTD4InitEhhb+0x198>
                        if(PID == PS3_PID)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800f036:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800f03a:	d104      	bne.n	800f046 <_ZN3BTD4InitEhhb+0x18e>
                                Notify(PSTR("\r\nDualshock 3 Controller Connected"), 0x80);
 800f03c:	2180      	movs	r1, #128	; 0x80
 800f03e:	4864      	ldr	r0, [pc, #400]	; (800f1d0 <_ZN3BTD4InitEhhb+0x318>)
 800f040:	f006 fdf8 	bl	8015c34 <_Z8E_NotifyPKci>
                        if(PID == PS3_PID)
 800f044:	e008      	b.n	800f058 <_ZN3BTD4InitEhhb+0x1a0>
                        else // It must be a navigation controller
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
 800f046:	2180      	movs	r1, #128	; 0x80
 800f048:	4862      	ldr	r0, [pc, #392]	; (800f1d4 <_ZN3BTD4InitEhhb+0x31c>)
 800f04a:	f006 fdf3 	bl	8015c34 <_Z8E_NotifyPKci>
                        if(PID == PS3_PID)
 800f04e:	e003      	b.n	800f058 <_ZN3BTD4InitEhhb+0x1a0>
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
 800f050:	2180      	movs	r1, #128	; 0x80
 800f052:	4861      	ldr	r0, [pc, #388]	; (800f1d8 <_ZN3BTD4InitEhhb+0x320>)
 800f054:	f006 fdee 	bl	8015c34 <_Z8E_NotifyPKci>
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	7d1b      	ldrb	r3, [r3, #20]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d118      	bne.n	800f092 <_ZN3BTD4InitEhhb+0x1da>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	7d5b      	ldrb	r3, [r3, #21]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d114      	bne.n	800f092 <_ZN3BTD4InitEhhb+0x1da>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	7d9b      	ldrb	r3, [r3, #22]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d110      	bne.n	800f092 <_ZN3BTD4InitEhhb+0x1da>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	7ddb      	ldrb	r3, [r3, #23]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d10c      	bne.n	800f092 <_ZN3BTD4InitEhhb+0x1da>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	7e1b      	ldrb	r3, [r3, #24]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d108      	bne.n	800f092 <_ZN3BTD4InitEhhb+0x1da>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	7e5b      	ldrb	r3, [r3, #25]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d104      	bne.n	800f092 <_ZN3BTD4InitEhhb+0x1da>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
 800f088:	2180      	movs	r1, #128	; 0x80
 800f08a:	4854      	ldr	r0, [pc, #336]	; (800f1dc <_ZN3BTD4InitEhhb+0x324>)
 800f08c:	f006 fdd2 	bl	8015c34 <_Z8E_NotifyPKci>
 800f090:	e03f      	b.n	800f112 <_ZN3BTD4InitEhhb+0x25a>
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800f098:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800f09c:	d006      	beq.n	800f0ac <_ZN3BTD4InitEhhb+0x1f4>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800f0a4:	f240 422f 	movw	r2, #1071	; 0x42f
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d106      	bne.n	800f0ba <_ZN3BTD4InitEhhb+0x202>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	3314      	adds	r3, #20
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f002 fd9a 	bl	8011bec <_ZN3BTD9setBdaddrEPh>
 800f0b8:	e005      	b.n	800f0c6 <_ZN3BTD4InitEhhb+0x20e>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	3314      	adds	r3, #20
 800f0be:	4619      	mov	r1, r3
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f002 fdd3 	bl	8011c6c <_ZN3BTD13setMoveBdaddrEPh>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nBluetooth Address was set to: "), 0x80);
 800f0c6:	2180      	movs	r1, #128	; 0x80
 800f0c8:	4845      	ldr	r0, [pc, #276]	; (800f1e0 <_ZN3BTD4InitEhhb+0x328>)
 800f0ca:	f006 fdb3 	bl	8015c34 <_Z8E_NotifyPKci>
                        for(int8_t i = 5; i > 0; i--) {
 800f0ce:	2305      	movs	r3, #5
 800f0d0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f0d4:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	dd14      	ble.n	800f106 <_ZN3BTD4InitEhhb+0x24e>
                                D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
 800f0dc:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	7d1b      	ldrb	r3, [r3, #20]
 800f0e6:	2180      	movs	r1, #128	; 0x80
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f002 fe02 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(":"), 0x80);
 800f0ee:	2180      	movs	r1, #128	; 0x80
 800f0f0:	483c      	ldr	r0, [pc, #240]	; (800f1e4 <_ZN3BTD4InitEhhb+0x32c>)
 800f0f2:	f006 fd9f 	bl	8015c34 <_Z8E_NotifyPKci>
                        for(int8_t i = 5; i > 0; i--) {
 800f0f6:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	3b01      	subs	r3, #1
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f104:	e7e6      	b.n	800f0d4 <_ZN3BTD4InitEhhb+0x21c>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	7d1b      	ldrb	r3, [r3, #20]
 800f10a:	2180      	movs	r1, #128	; 0x80
 800f10c:	4618      	mov	r0, r3
 800f10e:	f002 fdf0 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800f122:	2300      	movs	r3, #0
 800f124:	f005 ffac 	bl	8015080 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800f132:	2300      	movs	r3, #0
 800f134:	2200      	movs	r2, #0
 800f136:	f005 ff75 	bl	8015024 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	3308      	adds	r3, #8
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800f146:	23d1      	movs	r3, #209	; 0xd1
 800f148:	e0f4      	b.n	800f334 <_ZN3BTD4InitEhhb+0x47c>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800f14a:	2300      	movs	r3, #0
 800f14c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800f150:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800f154:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800f158:	429a      	cmp	r2, r3
 800f15a:	d26e      	bcs.n	800f23a <_ZN3BTD4InitEhhb+0x382>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800f162:	f640 225c 	movw	r2, #2652	; 0xa5c
 800f166:	4293      	cmp	r3, r2
 800f168:	d106      	bne.n	800f178 <_ZN3BTD4InitEhhb+0x2c0>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800f170:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800f174:	4293      	cmp	r3, r2
 800f176:	d00d      	beq.n	800f194 <_ZN3BTD4InitEhhb+0x2dc>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800f17e:	f240 520d 	movw	r2, #1293	; 0x50d
 800f182:	4293      	cmp	r3, r2
 800f184:	d130      	bne.n	800f1e8 <_ZN3BTD4InitEhhb+0x330>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800f18c:	f240 625a 	movw	r2, #1626	; 0x65a
 800f190:	4293      	cmp	r3, r2
 800f192:	d129      	bne.n	800f1e8 <_ZN3BTD4InitEhhb+0x330>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	1d1a      	adds	r2, r3, #4
 800f198:	f107 0308 	add.w	r3, r7, #8
 800f19c:	4611      	mov	r1, r2
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f002 fdc6 	bl	8011d30 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800f1ae:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800f1b2:	f107 0308 	add.w	r3, r7, #8
 800f1b6:	9300      	str	r3, [sp, #0]
 800f1b8:	4613      	mov	r3, r2
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f005 fee5 	bl	8014f8a <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f1c6:	e028      	b.n	800f21a <_ZN3BTD4InitEhhb+0x362>
 800f1c8:	08016a6c 	.word	0x08016a6c
 800f1cc:	08016af0 	.word	0x08016af0
 800f1d0:	08016afc 	.word	0x08016afc
 800f1d4:	08016b20 	.word	0x08016b20
 800f1d8:	08016b44 	.word	0x08016b44
 800f1dc:	08016b64 	.word	0x08016b64
 800f1e0:	08016bf4 	.word	0x08016bf4
 800f1e4:	08016c18 	.word	0x08016c18
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	1d1a      	adds	r2, r3, #4
 800f1ec:	f107 0308 	add.w	r3, r7, #8
 800f1f0:	4611      	mov	r1, r2
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f002 fdea 	bl	8011dcc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800f202:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800f206:	f107 0308 	add.w	r3, r7, #8
 800f20a:	9300      	str	r3, [sp, #0]
 800f20c:	4613      	mov	r3, r2
 800f20e:	2200      	movs	r2, #0
 800f210:	f005 febb 	bl	8014f8a <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800f214:	4603      	mov	r3, r0
 800f216:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800f21a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d156      	bne.n	800f2d0 <_ZN3BTD4InitEhhb+0x418>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f228:	2b03      	cmp	r3, #3
 800f22a:	d805      	bhi.n	800f238 <_ZN3BTD4InitEhhb+0x380>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800f22c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800f230:	3301      	adds	r3, #1
 800f232:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800f236:	e78b      	b.n	800f150 <_ZN3BTD4InitEhhb+0x298>
                                break;
 800f238:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f240:	2b03      	cmp	r3, #3
 800f242:	d94f      	bls.n	800f2e4 <_ZN3BTD4InitEhhb+0x42c>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	3369      	adds	r3, #105	; 0x69
 800f258:	f004 fdb5 	bl	8013dc6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800f25c:	4603      	mov	r3, r0
 800f25e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800f262:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f266:	2b00      	cmp	r3, #0
 800f268:	d12e      	bne.n	800f2c8 <_ZN3BTD4InitEhhb+0x410>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800f280:	f005 fefe 	bl	8015080 <_ZN3USB7setConfEhhh>
 800f284:	4603      	mov	r3, r0
 800f286:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800f28a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d124      	bne.n	800f2dc <_ZN3BTD4InitEhhb+0x424>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2264      	movs	r2, #100	; 0x64
 800f296:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
                hci_counter = 0;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2200      	movs	r2, #0
 800f29e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                hci_state = HCI_INIT_STATE;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                waitingForConnection = false;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
 800f2b8:	2180      	movs	r1, #128	; 0x80
 800f2ba:	4820      	ldr	r0, [pc, #128]	; (800f33c <_ZN3BTD4InitEhhb+0x484>)
 800f2bc:	f006 fcba 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
        }
        return 0; // Successful configuration
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	e037      	b.n	800f334 <_ZN3BTD4InitEhhb+0x47c>
                goto FailSetDevTblEntry;
 800f2c4:	bf00      	nop
 800f2c6:	e000      	b.n	800f2ca <_ZN3BTD4InitEhhb+0x412>
                        goto FailSetDevTblEntry;
 800f2c8:	bf00      	nop

        /* Diagnostic messages */
FailSetDevTblEntry:
#ifdef DEBUG_USB_HOST
        NotifyFailSetDevTblEntry();
 800f2ca:	f006 fd0d 	bl	8015ce8 <_Z24NotifyFailSetDevTblEntryv>
        goto Fail;
 800f2ce:	e020      	b.n	800f312 <_ZN3BTD4InitEhhb+0x45a>
                                goto FailGetConfDescr;
 800f2d0:	bf00      	nop
#endif

FailGetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetConfDescr();
 800f2d2:	f006 fd13 	bl	8015cfc <_Z22NotifyFailGetConfDescrv>
        goto Fail;
 800f2d6:	e01c      	b.n	800f312 <_ZN3BTD4InitEhhb+0x45a>
                        goto FailSetConfDescr;
 800f2d8:	bf00      	nop
 800f2da:	e000      	b.n	800f2de <_ZN3BTD4InitEhhb+0x426>
                        goto FailSetConfDescr;
 800f2dc:	bf00      	nop
#endif

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
 800f2de:	f006 fd17 	bl	8015d10 <_Z22NotifyFailSetConfDescrv>
#endif
        goto Fail;
 800f2e2:	e016      	b.n	800f312 <_ZN3BTD4InitEhhb+0x45a>
                        goto FailUnknownDevice;
 800f2e4:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8b3 208e 	ldrh.w	r2, [r3, #142]	; 0x8e
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800f2f2:	4619      	mov	r1, r3
 800f2f4:	4610      	mov	r0, r2
 800f2f6:	f006 fd25 	bl	8015d44 <_Z23NotifyFailUnknownDevicett>
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800f304:	2300      	movs	r3, #0
 800f306:	2200      	movs	r2, #0
 800f308:	f005 fe8c 	bl	8015024 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800f30c:	23d1      	movs	r3, #209	; 0xd1
 800f30e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
 800f312:	2180      	movs	r1, #128	; 0x80
 800f314:	480a      	ldr	r0, [pc, #40]	; (800f340 <_ZN3BTD4InitEhhb+0x488>)
 800f316:	f006 fc8d 	bl	8015c34 <_Z8E_NotifyPKci>
        NotifyFail(rcode);
 800f31a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f31e:	4618      	mov	r0, r3
 800f320:	f006 fd32 	bl	8015d88 <_Z10NotifyFailh>
#endif
        Release();
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	3308      	adds	r3, #8
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	4798      	blx	r3
        return rcode;
 800f330:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800f334:	4618      	mov	r0, r3
 800f336:	3750      	adds	r7, #80	; 0x50
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	08016c1c 	.word	0x08016c1c
 800f340:	08016c3c 	.word	0x08016c3c

0800f344 <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800f34c:	2300      	movs	r3, #0
 800f34e:	73fb      	strb	r3, [r7, #15]
 800f350:	7bfb      	ldrb	r3, [r7, #15]
 800f352:	2b03      	cmp	r3, #3
 800f354:	d845      	bhi.n	800f3e2 <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800f356:	7bfa      	ldrb	r2, [r7, #15]
 800f358:	6879      	ldr	r1, [r7, #4]
 800f35a:	4613      	mov	r3, r2
 800f35c:	005b      	lsls	r3, r3, #1
 800f35e:	4413      	add	r3, r2
 800f360:	440b      	add	r3, r1
 800f362:	3369      	adds	r3, #105	; 0x69
 800f364:	2200      	movs	r2, #0
 800f366:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800f368:	7bfb      	ldrb	r3, [r7, #15]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d001      	beq.n	800f372 <_ZN3BTD10InitializeEv+0x2e>
 800f36e:	2000      	movs	r0, #0
 800f370:	e000      	b.n	800f374 <_ZN3BTD10InitializeEv+0x30>
 800f372:	2008      	movs	r0, #8
 800f374:	7bfa      	ldrb	r2, [r7, #15]
 800f376:	6879      	ldr	r1, [r7, #4]
 800f378:	4613      	mov	r3, r2
 800f37a:	005b      	lsls	r3, r3, #1
 800f37c:	4413      	add	r3, r2
 800f37e:	440b      	add	r3, r1
 800f380:	336a      	adds	r3, #106	; 0x6a
 800f382:	4602      	mov	r2, r0
 800f384:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800f386:	7bfa      	ldrb	r2, [r7, #15]
 800f388:	6879      	ldr	r1, [r7, #4]
 800f38a:	4613      	mov	r3, r2
 800f38c:	005b      	lsls	r3, r3, #1
 800f38e:	4413      	add	r3, r2
 800f390:	440b      	add	r3, r1
 800f392:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f396:	78d3      	ldrb	r3, [r2, #3]
 800f398:	f36f 0300 	bfc	r3, #0, #1
 800f39c:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800f39e:	7bfa      	ldrb	r2, [r7, #15]
 800f3a0:	6879      	ldr	r1, [r7, #4]
 800f3a2:	4613      	mov	r3, r2
 800f3a4:	005b      	lsls	r3, r3, #1
 800f3a6:	4413      	add	r3, r2
 800f3a8:	440b      	add	r3, r1
 800f3aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f3ae:	78d3      	ldrb	r3, [r2, #3]
 800f3b0:	f36f 0341 	bfc	r3, #1, #1
 800f3b4:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800f3b6:	7bfb      	ldrb	r3, [r7, #15]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d001      	beq.n	800f3c0 <_ZN3BTD10InitializeEv+0x7c>
 800f3bc:	2101      	movs	r1, #1
 800f3be:	e000      	b.n	800f3c2 <_ZN3BTD10InitializeEv+0x7e>
 800f3c0:	210f      	movs	r1, #15
 800f3c2:	7bfa      	ldrb	r2, [r7, #15]
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	4613      	mov	r3, r2
 800f3c8:	005b      	lsls	r3, r3, #1
 800f3ca:	4413      	add	r3, r2
 800f3cc:	4403      	add	r3, r0
 800f3ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f3d2:	78d3      	ldrb	r3, [r2, #3]
 800f3d4:	f361 0387 	bfi	r3, r1, #2, #6
 800f3d8:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800f3da:	7bfb      	ldrb	r3, [r7, #15]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	73fb      	strb	r3, [r7, #15]
 800f3e0:	e7b6      	b.n	800f350 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	73fb      	strb	r3, [r7, #15]
 800f3e6:	7bfb      	ldrb	r3, [r7, #15]
 800f3e8:	2b03      	cmp	r3, #3
 800f3ea:	d81c      	bhi.n	800f426 <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800f3ec:	7bfb      	ldrb	r3, [r7, #15]
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	331e      	adds	r3, #30
 800f3f2:	009b      	lsls	r3, r3, #2
 800f3f4:	4413      	add	r3, r2
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d010      	beq.n	800f41e <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800f3fc:	7bfb      	ldrb	r3, [r7, #15]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	331e      	adds	r3, #30
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	4413      	add	r3, r2
 800f406:	6859      	ldr	r1, [r3, #4]
 800f408:	7bfb      	ldrb	r3, [r7, #15]
 800f40a:	687a      	ldr	r2, [r7, #4]
 800f40c:	331e      	adds	r3, #30
 800f40e:	009b      	lsls	r3, r3, #2
 800f410:	4413      	add	r3, r2
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	3308      	adds	r3, #8
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4608      	mov	r0, r1
 800f41c:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800f41e:	7bfb      	ldrb	r3, [r7, #15]
 800f420:	3301      	adds	r3, #1
 800f422:	73fb      	strb	r3, [r7, #15]
 800f424:	e7df      	b.n	800f3e6 <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2200      	movs	r2, #0
 800f42a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        incomingWii = false;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2200      	movs	r2, #0
 800f432:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        connectToHIDDevice = false;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2200      	movs	r2, #0
 800f43a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        incomingHIDDevice = false;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2200      	movs	r2, #0
 800f442:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        incomingPSController = false;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2200      	movs	r2, #0
 800f44a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        bAddress = 0; // Clear device address
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2200      	movs	r2, #0
 800f452:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        bNumEP = 1; // Must have to be reset to 1
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2201      	movs	r2, #1
 800f45a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
        qNextPollTime = 0; // Reset next poll time
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2200      	movs	r2, #0
 800f462:	679a      	str	r2, [r3, #120]	; 0x78
        pollInterval = 0;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2200      	movs	r2, #0
 800f468:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        bPollEnable = false; // Don't start polling before dongle is connected
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2200      	movs	r2, #0
 800f470:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        simple_pairing_supported = false;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 800f47c:	bf00      	nop
 800f47e:	3710      	adds	r7, #16
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}

0800f484 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800f484:	b480      	push	{r7}
 800f486:	b085      	sub	sp, #20
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	4608      	mov	r0, r1
 800f48e:	4611      	mov	r1, r2
 800f490:	461a      	mov	r2, r3
 800f492:	4603      	mov	r3, r0
 800f494:	70fb      	strb	r3, [r7, #3]
 800f496:	460b      	mov	r3, r1
 800f498:	70bb      	strb	r3, [r7, #2]
 800f49a:	4613      	mov	r3, r2
 800f49c:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800f49e:	787b      	ldrb	r3, [r7, #1]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d15d      	bne.n	800f560 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	78fa      	ldrb	r2, [r7, #3]
 800f4a8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	78db      	ldrb	r3, [r3, #3]
 800f4b0:	f003 0303 	and.w	r3, r3, #3
 800f4b4:	2b03      	cmp	r3, #3
 800f4b6:	d114      	bne.n	800f4e2 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	789b      	ldrb	r3, [r3, #2]
 800f4bc:	b25b      	sxtb	r3, r3
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	da0f      	bge.n	800f4e2 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800f4c6:	7bfa      	ldrb	r2, [r7, #15]
 800f4c8:	6879      	ldr	r1, [r7, #4]
 800f4ca:	4613      	mov	r3, r2
 800f4cc:	005b      	lsls	r3, r3, #1
 800f4ce:	4413      	add	r3, r2
 800f4d0:	440b      	add	r3, r1
 800f4d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f4d6:	78d3      	ldrb	r3, [r2, #3]
 800f4d8:	2101      	movs	r1, #1
 800f4da:	f361 0387 	bfi	r3, r1, #2, #6
 800f4de:	70d3      	strb	r3, [r2, #3]
 800f4e0:	e00e      	b.n	800f500 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	78db      	ldrb	r3, [r3, #3]
 800f4e6:	f003 0303 	and.w	r3, r3, #3
 800f4ea:	2b02      	cmp	r3, #2
 800f4ec:	d13a      	bne.n	800f564 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	789b      	ldrb	r3, [r3, #2]
 800f4f2:	b25b      	sxtb	r3, r3
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	da01      	bge.n	800f4fc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800f4f8:	2302      	movs	r3, #2
 800f4fa:	e000      	b.n	800f4fe <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800f4fc:	2303      	movs	r3, #3
 800f4fe:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	789b      	ldrb	r3, [r3, #2]
 800f504:	7bfa      	ldrb	r2, [r7, #15]
 800f506:	f003 030f 	and.w	r3, r3, #15
 800f50a:	b2d8      	uxtb	r0, r3
 800f50c:	6879      	ldr	r1, [r7, #4]
 800f50e:	4613      	mov	r3, r2
 800f510:	005b      	lsls	r3, r3, #1
 800f512:	4413      	add	r3, r2
 800f514:	440b      	add	r3, r1
 800f516:	3369      	adds	r3, #105	; 0x69
 800f518:	4602      	mov	r2, r0
 800f51a:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800f51c:	69fb      	ldr	r3, [r7, #28]
 800f51e:	889b      	ldrh	r3, [r3, #4]
 800f520:	b29b      	uxth	r3, r3
 800f522:	7bfa      	ldrb	r2, [r7, #15]
 800f524:	b2d8      	uxtb	r0, r3
 800f526:	6879      	ldr	r1, [r7, #4]
 800f528:	4613      	mov	r3, r2
 800f52a:	005b      	lsls	r3, r3, #1
 800f52c:	4413      	add	r3, r2
 800f52e:	440b      	add	r3, r1
 800f530:	336a      	adds	r3, #106	; 0x6a
 800f532:	4602      	mov	r2, r0
 800f534:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	799b      	ldrb	r3, [r3, #6]
 800f540:	429a      	cmp	r2, r3
 800f542:	d204      	bcs.n	800f54e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	799a      	ldrb	r2, [r3, #6]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        bNumEP++;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f554:	3301      	adds	r3, #1
 800f556:	b2da      	uxtb	r2, r3
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800f55e:	e002      	b.n	800f566 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800f560:	bf00      	nop
 800f562:	e000      	b.n	800f566 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800f564:	bf00      	nop
}
 800f566:	3714      	adds	r7, #20
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800f570:	f1a0 0004 	sub.w	r0, r0, #4
 800f574:	f7ff bf86 	b.w	800f484 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800f578 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f7ff fedf 	bl	800f344 <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7ff f9c4 	bl	800e918 <_ZN3USB14GetAddressPoolEv>
 800f590:	4603      	mov	r3, r0
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	3208      	adds	r2, #8
 800f596:	6812      	ldr	r2, [r2, #0]
 800f598:	6879      	ldr	r1, [r7, #4]
 800f59a:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
 800f59e:	4618      	mov	r0, r3
 800f5a0:	4790      	blx	r2
        return 0;
 800f5a2:	2300      	movs	r3, #0
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3708      	adds	r7, #8
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b082      	sub	sp, #8
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800f5ba:	f083 0301 	eor.w	r3, r3, #1
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d001      	beq.n	800f5c8 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	e01d      	b.n	800f604 <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800f5c8:	f7f3 fd00 	bl	8002fcc <HAL_GetTick>
 800f5cc:	4602      	mov	r2, r0
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5d2:	1ad3      	subs	r3, r2, r3
 800f5d4:	43db      	mvns	r3, r3
 800f5d6:	0fdb      	lsrs	r3, r3, #31
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d011      	beq.n	800f602 <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800f5de:	f7f3 fcf5 	bl	8002fcc <HAL_GetTick>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800f5ea:	441a      	add	r2, r3
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	679a      	str	r2, [r3, #120]	; 0x78
                HCI_event_task(); // Poll the HCI event pipe
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f000 f835 	bl	800f660 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 fd38 	bl	801006c <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f001 fa17 	bl	8010a30 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800f602:	2300      	movs	r3, #0
}
 800f604:	4618      	mov	r0, r3
 800f606:	3708      	adds	r7, #8
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <_ZN3BTD10disconnectEv>:

void BTD::disconnect() {
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800f614:	2300      	movs	r3, #0
 800f616:	73fb      	strb	r3, [r7, #15]
 800f618:	7bfb      	ldrb	r3, [r7, #15]
 800f61a:	2b03      	cmp	r3, #3
 800f61c:	d81c      	bhi.n	800f658 <_ZN3BTD10disconnectEv+0x4c>
                if(btService[i])
 800f61e:	7bfb      	ldrb	r3, [r7, #15]
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	331e      	adds	r3, #30
 800f624:	009b      	lsls	r3, r3, #2
 800f626:	4413      	add	r3, r2
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d010      	beq.n	800f650 <_ZN3BTD10disconnectEv+0x44>
                        btService[i]->disconnect();
 800f62e:	7bfb      	ldrb	r3, [r7, #15]
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	331e      	adds	r3, #30
 800f634:	009b      	lsls	r3, r3, #2
 800f636:	4413      	add	r3, r2
 800f638:	6859      	ldr	r1, [r3, #4]
 800f63a:	7bfb      	ldrb	r3, [r7, #15]
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	331e      	adds	r3, #30
 800f640:	009b      	lsls	r3, r3, #2
 800f642:	4413      	add	r3, r2
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	330c      	adds	r3, #12
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4608      	mov	r0, r1
 800f64e:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800f650:	7bfb      	ldrb	r3, [r7, #15]
 800f652:	3301      	adds	r3, #1
 800f654:	73fb      	strb	r3, [r7, #15]
 800f656:	e7df      	b.n	800f618 <_ZN3BTD10disconnectEv+0xc>
};
 800f658:	bf00      	nop
 800f65a:	3710      	adds	r7, #16
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <_ZN3BTD14HCI_event_taskEv>:

void BTD::HCI_event_task() {
 800f660:	b5b0      	push	{r4, r5, r7, lr}
 800f662:	b08a      	sub	sp, #40	; 0x28
 800f664:	af02      	add	r7, sp, #8
 800f666:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800f668:	2340      	movs	r3, #64	; 0x40
 800f66a:	81fb      	strh	r3, [r7, #14]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f893 406c 	ldrb.w	r4, [r3, #108]	; 0x6c
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	33a1      	adds	r3, #161	; 0xa1
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
 800f686:	f107 050e 	add.w	r5, r7, #14
 800f68a:	9201      	str	r2, [sp, #4]
 800f68c:	9300      	str	r3, [sp, #0]
 800f68e:	462b      	mov	r3, r5
 800f690:	4622      	mov	r2, r4
 800f692:	f004 fd01 	bl	8014098 <_ZN3USB10inTransferEhhPtPhh>
 800f696:	4603      	mov	r3, r0
 800f698:	747b      	strb	r3, [r7, #17]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800f69a:	7c7b      	ldrb	r3, [r7, #17]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d003      	beq.n	800f6a8 <_ZN3BTD14HCI_event_taskEv+0x48>
 800f6a0:	7c7b      	ldrb	r3, [r7, #17]
 800f6a2:	2b04      	cmp	r3, #4
 800f6a4:	f040 84c3 	bne.w	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
                switch(hcibuf[0]) { // Switch on event type
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	2b35      	cmp	r3, #53	; 0x35
 800f6b2:	f200 84bc 	bhi.w	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
 800f6b6:	a201      	add	r2, pc, #4	; (adr r2, 800f6bc <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800f6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6bc:	0800f95f 	.word	0x0800f95f
 800f6c0:	0800f9db 	.word	0x0800f9db
 800f6c4:	0800fba9 	.word	0x0800fba9
 800f6c8:	0800fca9 	.word	0x0800fca9
 800f6cc:	0800fc1b 	.word	0x0800fc1b
 800f6d0:	0800fe67 	.word	0x0800fe67
 800f6d4:	0800fc4d 	.word	0x0800fc4d
 800f6d8:	08010011 	.word	0x08010011
 800f6dc:	08010011 	.word	0x08010011
 800f6e0:	0801002f 	.word	0x0801002f
 800f6e4:	0801002f 	.word	0x0801002f
 800f6e8:	08010011 	.word	0x08010011
 800f6ec:	08010011 	.word	0x08010011
 800f6f0:	0800f795 	.word	0x0800f795
 800f6f4:	0800f8f9 	.word	0x0800f8f9
 800f6f8:	0801002f 	.word	0x0801002f
 800f6fc:	0801002f 	.word	0x0801002f
 800f700:	08010011 	.word	0x08010011
 800f704:	08010011 	.word	0x08010011
 800f708:	0801002f 	.word	0x0801002f
 800f70c:	0801002f 	.word	0x0801002f
 800f710:	0800fd75 	.word	0x0800fd75
 800f714:	0800fded 	.word	0x0800fded
 800f718:	0800ff19 	.word	0x0800ff19
 800f71c:	08010011 	.word	0x08010011
 800f720:	08010011 	.word	0x08010011
 800f724:	08010011 	.word	0x08010011
 800f728:	0801002f 	.word	0x0801002f
 800f72c:	0801002f 	.word	0x0801002f
 800f730:	0801002f 	.word	0x0801002f
 800f734:	0801002f 	.word	0x0801002f
 800f738:	08010011 	.word	0x08010011
 800f73c:	0801002f 	.word	0x0801002f
 800f740:	0801002f 	.word	0x0801002f
 800f744:	0801002f 	.word	0x0801002f
 800f748:	0801002f 	.word	0x0801002f
 800f74c:	0801002f 	.word	0x0801002f
 800f750:	0801002f 	.word	0x0801002f
 800f754:	0801002f 	.word	0x0801002f
 800f758:	0801002f 	.word	0x0801002f
 800f75c:	0801002f 	.word	0x0801002f
 800f760:	0801002f 	.word	0x0801002f
 800f764:	0801002f 	.word	0x0801002f
 800f768:	0801002f 	.word	0x0801002f
 800f76c:	0801002f 	.word	0x0801002f
 800f770:	0801002f 	.word	0x0801002f
 800f774:	0801002f 	.word	0x0801002f
 800f778:	0801002f 	.word	0x0801002f
 800f77c:	0800fef9 	.word	0x0800fef9
 800f780:	08010011 	.word	0x08010011
 800f784:	0800ff09 	.word	0x0800ff09
 800f788:	0801002f 	.word	0x0801002f
 800f78c:	0801002f 	.word	0x0801002f
 800f790:	08010011 	.word	0x08010011
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	f040 843a 	bne.w	8010014 <_ZN3BTD14HCI_event_taskEv+0x9b4>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f7a6:	f043 0301 	orr.w	r3, r3, #1
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d114      	bne.n	800f7e6 <_ZN3BTD14HCI_event_taskEv+0x186>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f7c2:	2b10      	cmp	r3, #16
 800f7c4:	d10f      	bne.n	800f7e6 <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f7d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7dc:	b29a      	uxth	r2, r3
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800f7e4:	e087      	b.n	800f8f6 <_ZN3BTD14HCI_event_taskEv+0x296>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f7ec:	2b04      	cmp	r3, #4
 800f7ee:	d158      	bne.n	800f8a2 <_ZN3BTD14HCI_event_taskEv+0x242>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f7f6:	2b10      	cmp	r3, #16
 800f7f8:	d153      	bne.n	800f8a2 <_ZN3BTD14HCI_event_taskEv+0x242>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f804:	2b00      	cmp	r3, #0
 800f806:	d142      	bne.n	800f88e <_ZN3BTD14HCI_event_taskEv+0x22e>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d120      	bne.n	800f854 <_ZN3BTD14HCI_event_taskEv+0x1f4>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
 800f812:	2180      	movs	r1, #128	; 0x80
 800f814:	48a9      	ldr	r0, [pc, #676]	; (800fabc <_ZN3BTD14HCI_event_taskEv+0x45c>)
 800f816:	f006 fa0d 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800f820:	f003 0308 	and.w	r3, r3, #8
 800f824:	2b00      	cmp	r3, #0
 800f826:	d008      	beq.n	800f83a <_ZN3BTD14HCI_event_taskEv+0x1da>
                                                                        simple_pairing_supported = true;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2201      	movs	r2, #1
 800f82c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
 800f830:	2180      	movs	r1, #128	; 0x80
 800f832:	48a3      	ldr	r0, [pc, #652]	; (800fac0 <_ZN3BTD14HCI_event_taskEv+0x460>)
 800f834:	f006 f9fe 	bl	8015c34 <_Z8E_NotifyPKci>
 800f838:	e007      	b.n	800f84a <_ZN3BTD14HCI_event_taskEv+0x1ea>
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2200      	movs	r2, #0
 800f83e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("does NOT support"), 0x80);
 800f842:	2180      	movs	r1, #128	; 0x80
 800f844:	489f      	ldr	r0, [pc, #636]	; (800fac4 <_ZN3BTD14HCI_event_taskEv+0x464>)
 800f846:	f006 f9f5 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                                                }
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR(" secure simple pairing (controller support)"), 0x80);
 800f84a:	2180      	movs	r1, #128	; 0x80
 800f84c:	489e      	ldr	r0, [pc, #632]	; (800fac8 <_ZN3BTD14HCI_event_taskEv+0x468>)
 800f84e:	f006 f9f1 	bl	8015c34 <_Z8E_NotifyPKci>
 800f852:	e01c      	b.n	800f88e <_ZN3BTD14HCI_event_taskEv+0x22e>
#endif
                                                        } else if(hcibuf[6] == 1) { // Page 1
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800f85a:	2b01      	cmp	r3, #1
 800f85c:	d117      	bne.n	800f88e <_ZN3BTD14HCI_event_taskEv+0x22e>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
 800f85e:	2180      	movs	r1, #128	; 0x80
 800f860:	4896      	ldr	r0, [pc, #600]	; (800fabc <_ZN3BTD14HCI_event_taskEv+0x45c>)
 800f862:	f006 f9e7 	bl	8015c34 <_Z8E_NotifyPKci>
                                                                if(hcibuf[8 + 0] & (1U << 0))
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800f86c:	f003 0301 	and.w	r3, r3, #1
 800f870:	2b00      	cmp	r3, #0
 800f872:	d004      	beq.n	800f87e <_ZN3BTD14HCI_event_taskEv+0x21e>
                                                                        Notify(PSTR("supports"), 0x80);
 800f874:	2180      	movs	r1, #128	; 0x80
 800f876:	4892      	ldr	r0, [pc, #584]	; (800fac0 <_ZN3BTD14HCI_event_taskEv+0x460>)
 800f878:	f006 f9dc 	bl	8015c34 <_Z8E_NotifyPKci>
 800f87c:	e003      	b.n	800f886 <_ZN3BTD14HCI_event_taskEv+0x226>
                                                                else
                                                                        Notify(PSTR("does NOT support"), 0x80);
 800f87e:	2180      	movs	r1, #128	; 0x80
 800f880:	4890      	ldr	r0, [pc, #576]	; (800fac4 <_ZN3BTD14HCI_event_taskEv+0x464>)
 800f882:	f006 f9d7 	bl	8015c34 <_Z8E_NotifyPKci>
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
 800f886:	2180      	movs	r1, #128	; 0x80
 800f888:	4890      	ldr	r0, [pc, #576]	; (800facc <_ZN3BTD14HCI_event_taskEv+0x46c>)
 800f88a:	f006 f9d3 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f894:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f898:	b29a      	uxth	r2, r3
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800f8a0:	e029      	b.n	800f8f6 <_ZN3BTD14HCI_event_taskEv+0x296>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f8a8:	2b09      	cmp	r3, #9
 800f8aa:	f040 83b3 	bne.w	8010014 <_ZN3BTD14HCI_event_taskEv+0x9b4>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f8b4:	2b10      	cmp	r3, #16
 800f8b6:	f040 83ad 	bne.w	8010014 <_ZN3BTD14HCI_event_taskEv+0x9b4>
                                                for(uint8_t i = 0; i < 6; i++)
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	77fb      	strb	r3, [r7, #31]
 800f8be:	7ffb      	ldrb	r3, [r7, #31]
 800f8c0:	2b05      	cmp	r3, #5
 800f8c2:	d80e      	bhi.n	800f8e2 <_ZN3BTD14HCI_event_taskEv+0x282>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800f8c4:	7ffb      	ldrb	r3, [r7, #31]
 800f8c6:	1d9a      	adds	r2, r3, #6
 800f8c8:	7ffb      	ldrb	r3, [r7, #31]
 800f8ca:	6879      	ldr	r1, [r7, #4]
 800f8cc:	440a      	add	r2, r1
 800f8ce:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	460a      	mov	r2, r1
 800f8d8:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800f8da:	7ffb      	ldrb	r3, [r7, #31]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	77fb      	strb	r3, [r7, #31]
 800f8e0:	e7ed      	b.n	800f8be <_ZN3BTD14HCI_event_taskEv+0x25e>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f8e8:	f043 0320 	orr.w	r3, r3, #32
 800f8ec:	b29a      	uxth	r2, r3
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                        }
                                }
                                break;
 800f8f4:	e38e      	b.n	8010014 <_ZN3BTD14HCI_event_taskEv+0x9b4>
 800f8f6:	e38d      	b.n	8010014 <_ZN3BTD14HCI_event_taskEv+0x9b4>

                        case EV_COMMAND_STATUS:
                                if(hcibuf[2]) { // Show status on serial if not OK
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f000 838a 	beq.w	8010018 <_ZN3BTD14HCI_event_taskEv+0x9b8>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nHCI Command Failed: "), 0x80);
 800f904:	2180      	movs	r1, #128	; 0x80
 800f906:	4872      	ldr	r0, [pc, #456]	; (800fad0 <_ZN3BTD14HCI_event_taskEv+0x470>)
 800f908:	f006 f994 	bl	8015c34 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f912:	2180      	movs	r1, #128	; 0x80
 800f914:	4618      	mov	r0, r3
 800f916:	f002 f9ec 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR("\r\nNum HCI Command Packets: "), 0x80);
 800f91a:	2180      	movs	r1, #128	; 0x80
 800f91c:	486d      	ldr	r0, [pc, #436]	; (800fad4 <_ZN3BTD14HCI_event_taskEv+0x474>)
 800f91e:	f006 f989 	bl	8015c34 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[3], 0x80);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f928:	2180      	movs	r1, #128	; 0x80
 800f92a:	4618      	mov	r0, r3
 800f92c:	f002 f9e1 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR("\r\nCommand Opcode: "), 0x80);
 800f930:	2180      	movs	r1, #128	; 0x80
 800f932:	4869      	ldr	r0, [pc, #420]	; (800fad8 <_ZN3BTD14HCI_event_taskEv+0x478>)
 800f934:	f006 f97e 	bl	8015c34 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[4], 0x80);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f93e:	2180      	movs	r1, #128	; 0x80
 800f940:	4618      	mov	r0, r3
 800f942:	f002 f9d6 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR(" "), 0x80);
 800f946:	2180      	movs	r1, #128	; 0x80
 800f948:	4864      	ldr	r0, [pc, #400]	; (800fadc <_ZN3BTD14HCI_event_taskEv+0x47c>)
 800f94a:	f006 f973 	bl	8015c34 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[5], 0x80);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800f954:	2180      	movs	r1, #128	; 0x80
 800f956:	4618      	mov	r0, r3
 800f958:	f002 f9cb 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
#endif
                                }
                                break;
 800f95c:	e35c      	b.n	8010018 <_ZN3BTD14HCI_event_taskEv+0x9b8>

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800f964:	2b04      	cmp	r3, #4
 800f966:	d92f      	bls.n	800f9c8 <_ZN3BTD14HCI_event_taskEv+0x368>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d104      	bne.n	800f97c <_ZN3BTD14HCI_event_taskEv+0x31c>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d025      	beq.n	800f9c8 <_ZN3BTD14HCI_event_taskEv+0x368>
                                        inquiry_counter = 0;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#ifdef DEBUG_USB_HOST
                                        if(pairWithWii)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d004      	beq.n	800f998 <_ZN3BTD14HCI_event_taskEv+0x338>
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
 800f98e:	2180      	movs	r1, #128	; 0x80
 800f990:	4853      	ldr	r0, [pc, #332]	; (800fae0 <_ZN3BTD14HCI_event_taskEv+0x480>)
 800f992:	f006 f94f 	bl	8015c34 <_Z8E_NotifyPKci>
 800f996:	e003      	b.n	800f9a0 <_ZN3BTD14HCI_event_taskEv+0x340>
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
 800f998:	2180      	movs	r1, #128	; 0x80
 800f99a:	4852      	ldr	r0, [pc, #328]	; (800fae4 <_ZN3BTD14HCI_event_taskEv+0x484>)
 800f99c:	f006 f94a 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                        connectToWii = false;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                                        pairWithWii = false;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                                        connectToHIDDevice = false;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                                        pairWithHIDDevice = false;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                                        hci_state = HCI_SCANNING_STATE;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	220a      	movs	r2, #10
 800f9c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                }
                                inquiry_counter++;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	b2da      	uxtb	r2, r3
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                                break;
 800f9d8:	e329      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	f000 831b 	beq.w	801001c <_ZN3BTD14HCI_event_taskEv+0x9bc>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	77bb      	strb	r3, [r7, #30]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f9f0:	7fba      	ldrb	r2, [r7, #30]
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	f080 8312 	bcs.w	801001c <_ZN3BTD14HCI_event_taskEv+0x9bc>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f9fe:	00db      	lsls	r3, r3, #3
 800fa00:	b2da      	uxtb	r2, r3
 800fa02:	7fbb      	ldrb	r3, [r7, #30]
 800fa04:	4619      	mov	r1, r3
 800fa06:	0049      	lsls	r1, r1, #1
 800fa08:	440b      	add	r3, r1
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	4413      	add	r3, r2
 800fa0e:	743b      	strb	r3, [r7, #16]

                                                for(uint8_t j = 0; j < 3; j++)
 800fa10:	2300      	movs	r3, #0
 800fa12:	777b      	strb	r3, [r7, #29]
 800fa14:	7f7b      	ldrb	r3, [r7, #29]
 800fa16:	2b02      	cmp	r3, #2
 800fa18:	d811      	bhi.n	800fa3e <_ZN3BTD14HCI_event_taskEv+0x3de>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800fa1a:	7f7b      	ldrb	r3, [r7, #29]
 800fa1c:	1d1a      	adds	r2, r3, #4
 800fa1e:	7c3b      	ldrb	r3, [r7, #16]
 800fa20:	441a      	add	r2, r3
 800fa22:	7f7b      	ldrb	r3, [r7, #29]
 800fa24:	6879      	ldr	r1, [r7, #4]
 800fa26:	440a      	add	r2, r1
 800fa28:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	4413      	add	r3, r2
 800fa30:	460a      	mov	r2, r1
 800fa32:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
                                                for(uint8_t j = 0; j < 3; j++)
 800fa36:	7f7b      	ldrb	r3, [r7, #29]
 800fa38:	3301      	adds	r3, #1
 800fa3a:	777b      	strb	r3, [r7, #29]
 800fa3c:	e7ea      	b.n	800fa14 <_ZN3BTD14HCI_event_taskEv+0x3b4>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d04f      	beq.n	800fae8 <_ZN3BTD14HCI_event_taskEv+0x488>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d14a      	bne.n	800fae8 <_ZN3BTD14HCI_event_taskEv+0x488>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800fa58:	2b05      	cmp	r3, #5
 800fa5a:	d145      	bne.n	800fae8 <_ZN3BTD14HCI_event_taskEv+0x488>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fa62:	f003 030c 	and.w	r3, r3, #12
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d03e      	beq.n	800fae8 <_ZN3BTD14HCI_event_taskEv+0x488>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

                                                        for(uint8_t j = 0; j < 6; j++)
 800fa72:	2300      	movs	r3, #0
 800fa74:	773b      	strb	r3, [r7, #28]
 800fa76:	7f3b      	ldrb	r3, [r7, #28]
 800fa78:	2b05      	cmp	r3, #5
 800fa7a:	d814      	bhi.n	800faa6 <_ZN3BTD14HCI_event_taskEv+0x446>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800fa7c:	7f3b      	ldrb	r3, [r7, #28]
 800fa7e:	1cd9      	adds	r1, r3, #3
 800fa80:	7fba      	ldrb	r2, [r7, #30]
 800fa82:	4613      	mov	r3, r2
 800fa84:	005b      	lsls	r3, r3, #1
 800fa86:	4413      	add	r3, r2
 800fa88:	005b      	lsls	r3, r3, #1
 800fa8a:	18ca      	adds	r2, r1, r3
 800fa8c:	7f3b      	ldrb	r3, [r7, #28]
 800fa8e:	6879      	ldr	r1, [r7, #4]
 800fa90:	440a      	add	r2, r1
 800fa92:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800fa96:	687a      	ldr	r2, [r7, #4]
 800fa98:	4413      	add	r3, r2
 800fa9a:	460a      	mov	r2, r1
 800fa9c:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800fa9e:	7f3b      	ldrb	r3, [r7, #28]
 800faa0:	3301      	adds	r3, #1
 800faa2:	773b      	strb	r3, [r7, #28]
 800faa4:	e7e7      	b.n	800fa76 <_ZN3BTD14HCI_event_taskEv+0x416>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800faac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fab0:	b29a      	uxth	r2, r3
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                                        break;
 800fab8:	e075      	b.n	800fba6 <_ZN3BTD14HCI_event_taskEv+0x546>
 800faba:	bf00      	nop
 800fabc:	08016c5c 	.word	0x08016c5c
 800fac0:	08016c68 	.word	0x08016c68
 800fac4:	08016c74 	.word	0x08016c74
 800fac8:	08016c88 	.word	0x08016c88
 800facc:	08016cb4 	.word	0x08016cb4
 800fad0:	08016cdc 	.word	0x08016cdc
 800fad4:	08016cf4 	.word	0x08016cf4
 800fad8:	08016d10 	.word	0x08016d10
 800fadc:	08016d24 	.word	0x08016d24
 800fae0:	08016d28 	.word	0x08016d28
 800fae4:	08016d40 	.word	0x08016d40
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d055      	beq.n	800fb9e <_ZN3BTD14HCI_event_taskEv+0x53e>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800faf8:	f003 030f 	and.w	r3, r3, #15
 800fafc:	2b05      	cmp	r3, #5
 800fafe:	d14e      	bne.n	800fb9e <_ZN3BTD14HCI_event_taskEv+0x53e>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fb06:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d047      	beq.n	800fb9e <_ZN3BTD14HCI_event_taskEv+0x53e>
#ifdef DEBUG_USB_HOST
                                                        checkRemoteName = true; // Used to print name in the serial monitor if serial debugging is enabled
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2201      	movs	r2, #1
 800fb12:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

                                                        if(classOfDevice[0] & 0x80)
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fb1c:	b25b      	sxtb	r3, r3
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	da03      	bge.n	800fb2a <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                                Notify(PSTR("\r\nMouse found"), 0x80);
 800fb22:	2180      	movs	r1, #128	; 0x80
 800fb24:	48a7      	ldr	r0, [pc, #668]	; (800fdc4 <_ZN3BTD14HCI_event_taskEv+0x764>)
 800fb26:	f006 f885 	bl	8015c34 <_Z8E_NotifyPKci>
                                                        if(classOfDevice[0] & 0x40)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fb30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d003      	beq.n	800fb40 <_ZN3BTD14HCI_event_taskEv+0x4e0>
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
 800fb38:	2180      	movs	r1, #128	; 0x80
 800fb3a:	48a3      	ldr	r0, [pc, #652]	; (800fdc8 <_ZN3BTD14HCI_event_taskEv+0x768>)
 800fb3c:	f006 f87a 	bl	8015c34 <_Z8E_NotifyPKci>
                                                        if(classOfDevice[0] & 0x08)
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fb46:	f003 0308 	and.w	r3, r3, #8
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d003      	beq.n	800fb56 <_ZN3BTD14HCI_event_taskEv+0x4f6>
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
 800fb4e:	2180      	movs	r1, #128	; 0x80
 800fb50:	489e      	ldr	r0, [pc, #632]	; (800fdcc <_ZN3BTD14HCI_event_taskEv+0x76c>)
 800fb52:	f006 f86f 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800fb56:	2300      	movs	r3, #0
 800fb58:	76fb      	strb	r3, [r7, #27]
 800fb5a:	7efb      	ldrb	r3, [r7, #27]
 800fb5c:	2b05      	cmp	r3, #5
 800fb5e:	d814      	bhi.n	800fb8a <_ZN3BTD14HCI_event_taskEv+0x52a>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800fb60:	7efb      	ldrb	r3, [r7, #27]
 800fb62:	1cd9      	adds	r1, r3, #3
 800fb64:	7fba      	ldrb	r2, [r7, #30]
 800fb66:	4613      	mov	r3, r2
 800fb68:	005b      	lsls	r3, r3, #1
 800fb6a:	4413      	add	r3, r2
 800fb6c:	005b      	lsls	r3, r3, #1
 800fb6e:	18ca      	adds	r2, r1, r3
 800fb70:	7efb      	ldrb	r3, [r7, #27]
 800fb72:	6879      	ldr	r1, [r7, #4]
 800fb74:	440a      	add	r2, r1
 800fb76:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800fb7a:	687a      	ldr	r2, [r7, #4]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	460a      	mov	r2, r1
 800fb80:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800fb82:	7efb      	ldrb	r3, [r7, #27]
 800fb84:	3301      	adds	r3, #1
 800fb86:	76fb      	strb	r3, [r7, #27]
 800fb88:	e7e7      	b.n	800fb5a <_ZN3BTD14HCI_event_taskEv+0x4fa>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fb90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb94:	b29a      	uxth	r2, r3
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                                        break;
 800fb9c:	e003      	b.n	800fba6 <_ZN3BTD14HCI_event_taskEv+0x546>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800fb9e:	7fbb      	ldrb	r3, [r7, #30]
 800fba0:	3301      	adds	r3, #1
 800fba2:	77bb      	strb	r3, [r7, #30]
 800fba4:	e721      	b.n	800f9ea <_ZN3BTD14HCI_event_taskEv+0x38a>
                                                }
                                        }
                                }
                                break;
 800fba6:	e239      	b.n	801001c <_ZN3BTD14HCI_event_taskEv+0x9bc>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fbae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fbb2:	b29a      	uxth	r2, r3
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                if(!hcibuf[2]) { // Check if connected OK
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d11a      	bne.n	800fbfa <_ZN3BTD14HCI_event_taskEv+0x59a>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800fbca:	b21a      	sxth	r2, r3
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800fbd2:	021b      	lsls	r3, r3, #8
 800fbd4:	b21b      	sxth	r3, r3
 800fbd6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800fbda:	b21b      	sxth	r3, r3
 800fbdc:	4313      	orrs	r3, r2
 800fbde:	b21b      	sxth	r3, r3
 800fbe0:	b29a      	uxth	r2, r3
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fbec:	f043 0302 	orr.w	r3, r3, #2
 800fbf0:	b29a      	uxth	r2, r3
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800fbf8:	e219      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2206      	movs	r2, #6
 800fbfe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
 800fc02:	2180      	movs	r1, #128	; 0x80
 800fc04:	4872      	ldr	r0, [pc, #456]	; (800fdd0 <_ZN3BTD14HCI_event_taskEv+0x770>)
 800fc06:	f006 f815 	bl	8015c34 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800fc10:	2180      	movs	r1, #128	; 0x80
 800fc12:	4618      	mov	r0, r3
 800fc14:	f002 f86d 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                break;
 800fc18:	e209      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	f040 81fd 	bne.w	8010020 <_ZN3BTD14HCI_event_taskEv+0x9c0>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fc2c:	f043 0304 	orr.w	r3, r3, #4
 800fc30:	b29a      	uxth	r2, r3
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fc3e:	f023 0302 	bic.w	r3, r3, #2
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                }
                                break;
 800fc4a:	e1e9      	b.n	8010020 <_ZN3BTD14HCI_event_taskEv+0x9c0>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f040 81e6 	bne.w	8010024 <_ZN3BTD14HCI_event_taskEv+0x9c4>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800fc58:	2300      	movs	r3, #0
 800fc5a:	76bb      	strb	r3, [r7, #26]
 800fc5c:	7ebb      	ldrb	r3, [r7, #26]
 800fc5e:	2b1d      	cmp	r3, #29
 800fc60:	d818      	bhi.n	800fc94 <_ZN3BTD14HCI_event_taskEv+0x634>
                                                remote_name[i] = hcibuf[9 + i];
 800fc62:	7ebb      	ldrb	r3, [r7, #26]
 800fc64:	f103 0209 	add.w	r2, r3, #9
 800fc68:	7ebb      	ldrb	r3, [r7, #26]
 800fc6a:	6879      	ldr	r1, [r7, #4]
 800fc6c:	440a      	add	r2, r1
 800fc6e:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	4413      	add	r3, r2
 800fc76:	460a      	mov	r2, r1
 800fc78:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800fc7c:	7ebb      	ldrb	r3, [r7, #26]
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	4413      	add	r3, r2
 800fc82:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d003      	beq.n	800fc92 <_ZN3BTD14HCI_event_taskEv+0x632>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800fc8a:	7ebb      	ldrb	r3, [r7, #26]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	76bb      	strb	r3, [r7, #26]
 800fc90:	e7e4      	b.n	800fc5c <_ZN3BTD14HCI_event_taskEv+0x5fc>
                                                        break;
 800fc92:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fc9a:	f043 0308 	orr.w	r3, r3, #8
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                }
                                break;
 800fca6:	e1bd      	b.n	8010024 <_ZN3BTD14HCI_event_taskEv+0x9c4>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800fca8:	2300      	movs	r3, #0
 800fcaa:	767b      	strb	r3, [r7, #25]
 800fcac:	7e7b      	ldrb	r3, [r7, #25]
 800fcae:	2b05      	cmp	r3, #5
 800fcb0:	d80e      	bhi.n	800fcd0 <_ZN3BTD14HCI_event_taskEv+0x670>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800fcb2:	7e7b      	ldrb	r3, [r7, #25]
 800fcb4:	1c9a      	adds	r2, r3, #2
 800fcb6:	7e7b      	ldrb	r3, [r7, #25]
 800fcb8:	6879      	ldr	r1, [r7, #4]
 800fcba:	440a      	add	r2, r1
 800fcbc:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800fcc0:	687a      	ldr	r2, [r7, #4]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	460a      	mov	r2, r1
 800fcc6:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800fcc8:	7e7b      	ldrb	r3, [r7, #25]
 800fcca:	3301      	adds	r3, #1
 800fccc:	767b      	strb	r3, [r7, #25]
 800fcce:	e7ed      	b.n	800fcac <_ZN3BTD14HCI_event_taskEv+0x64c>

                                for(uint8_t i = 0; i < 3; i++)
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	763b      	strb	r3, [r7, #24]
 800fcd4:	7e3b      	ldrb	r3, [r7, #24]
 800fcd6:	2b02      	cmp	r3, #2
 800fcd8:	d810      	bhi.n	800fcfc <_ZN3BTD14HCI_event_taskEv+0x69c>
                                        classOfDevice[i] = hcibuf[i + 8];
 800fcda:	7e3b      	ldrb	r3, [r7, #24]
 800fcdc:	f103 0208 	add.w	r2, r3, #8
 800fce0:	7e3b      	ldrb	r3, [r7, #24]
 800fce2:	6879      	ldr	r1, [r7, #4]
 800fce4:	440a      	add	r2, r1
 800fce6:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	4413      	add	r3, r2
 800fcee:	460a      	mov	r2, r1
 800fcf0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
                                for(uint8_t i = 0; i < 3; i++)
 800fcf4:	7e3b      	ldrb	r3, [r7, #24]
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	763b      	strb	r3, [r7, #24]
 800fcfa:	e7eb      	b.n	800fcd4 <_ZN3BTD14HCI_event_taskEv+0x674>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800fd02:	f003 030f 	and.w	r3, r3, #15
 800fd06:	2b05      	cmp	r3, #5
 800fd08:	d12a      	bne.n	800fd60 <_ZN3BTD14HCI_event_taskEv+0x700>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fd10:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d023      	beq.n	800fd60 <_ZN3BTD14HCI_event_taskEv+0x700>
#ifdef DEBUG_USB_HOST
                                        if(classOfDevice[0] & 0x80)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fd1e:	b25b      	sxtb	r3, r3
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	da03      	bge.n	800fd2c <_ZN3BTD14HCI_event_taskEv+0x6cc>
                                                Notify(PSTR("\r\nMouse is connecting"), 0x80);
 800fd24:	2180      	movs	r1, #128	; 0x80
 800fd26:	482b      	ldr	r0, [pc, #172]	; (800fdd4 <_ZN3BTD14HCI_event_taskEv+0x774>)
 800fd28:	f005 ff84 	bl	8015c34 <_Z8E_NotifyPKci>
                                        if(classOfDevice[0] & 0x40)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fd32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d003      	beq.n	800fd42 <_ZN3BTD14HCI_event_taskEv+0x6e2>
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
 800fd3a:	2180      	movs	r1, #128	; 0x80
 800fd3c:	4826      	ldr	r0, [pc, #152]	; (800fdd8 <_ZN3BTD14HCI_event_taskEv+0x778>)
 800fd3e:	f005 ff79 	bl	8015c34 <_Z8E_NotifyPKci>
                                        if(classOfDevice[0] & 0x08)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fd48:	f003 0308 	and.w	r3, r3, #8
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d003      	beq.n	800fd58 <_ZN3BTD14HCI_event_taskEv+0x6f8>
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
 800fd50:	2180      	movs	r1, #128	; 0x80
 800fd52:	4822      	ldr	r0, [pc, #136]	; (800fddc <_ZN3BTD14HCI_event_taskEv+0x77c>)
 800fd54:	f005 ff6e 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                        incomingHIDDevice = true;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fd66:	f043 0310 	orr.w	r3, r3, #16
 800fd6a:	b29a      	uxth	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                break;
 800fd72:	e15c      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d007      	beq.n	800fd8e <_ZN3BTD14HCI_event_taskEv+0x72e>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
 800fd7e:	2180      	movs	r1, #128	; 0x80
 800fd80:	4817      	ldr	r0, [pc, #92]	; (800fde0 <_ZN3BTD14HCI_event_taskEv+0x780>)
 800fd82:	f005 ff57 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                        hci_pin_code_request_reply();
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f001 f9b6 	bl	80110f8 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800fd8c:	e14f      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                } else if(btdPin != NULL) {
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	691b      	ldr	r3, [r3, #16]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d00d      	beq.n	800fdb2 <_ZN3BTD14HCI_event_taskEv+0x752>
                                        Notify(PSTR("\r\nBluetooth pin is set too: "), 0x80);
 800fd96:	2180      	movs	r1, #128	; 0x80
 800fd98:	4812      	ldr	r0, [pc, #72]	; (800fde4 <_ZN3BTD14HCI_event_taskEv+0x784>)
 800fd9a:	f005 ff4b 	bl	8015c34 <_Z8E_NotifyPKci>
                                        NotifyStr(btdPin, 0x80);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	691b      	ldr	r3, [r3, #16]
 800fda2:	2180      	movs	r1, #128	; 0x80
 800fda4:	4618      	mov	r0, r3
 800fda6:	f005 ff6d 	bl	8015c84 <_Z11E_NotifyStrPKci>
                                        hci_pin_code_request_reply();
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f001 f9a4 	bl	80110f8 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800fdb0:	e13d      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
 800fdb2:	2180      	movs	r1, #128	; 0x80
 800fdb4:	480c      	ldr	r0, [pc, #48]	; (800fde8 <_ZN3BTD14HCI_event_taskEv+0x788>)
 800fdb6:	f005 ff3d 	bl	8015c34 <_Z8E_NotifyPKci>
                                        hci_pin_code_negative_request_reply();
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f001 fa56 	bl	801126c <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800fdc0:	e135      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
 800fdc2:	bf00      	nop
 800fdc4:	08016d5c 	.word	0x08016d5c
 800fdc8:	08016d6c 	.word	0x08016d6c
 800fdcc:	08016d80 	.word	0x08016d80
 800fdd0:	08016d90 	.word	0x08016d90
 800fdd4:	08016da8 	.word	0x08016da8
 800fdd8:	08016dc0 	.word	0x08016dc0
 800fddc:	08016ddc 	.word	0x08016ddc
 800fde0:	08016df4 	.word	0x08016df4
 800fde4:	08016e0c 	.word	0x08016e0c
 800fde8:	08016e2c 	.word	0x08016e2c

                        case EV_LINK_KEY_REQUEST: //For the Xbox One S Controller we can't use the negative reply, other controllers use negative_reply
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
 800fdec:	2180      	movs	r1, #128	; 0x80
 800fdee:	4892      	ldr	r0, [pc, #584]	; (8010038 <_ZN3BTD14HCI_event_taskEv+0x9d8>)
 800fdf0:	f005 ff20 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                if ((!pairWithHIDDevice || incomingHIDDevice) && incomingXboxOneS) {
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800fdfa:	f083 0301 	eor.w	r3, r3, #1
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d104      	bne.n	800fe0e <_ZN3BTD14HCI_event_taskEv+0x7ae>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d023      	beq.n	800fe56 <_ZN3BTD14HCI_event_taskEv+0x7f6>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d01e      	beq.n	800fe56 <_ZN3BTD14HCI_event_taskEv+0x7f6>
                                        for(uint8_t i = 0; i < 16; i ++) {
 800fe18:	2300      	movs	r3, #0
 800fe1a:	75fb      	strb	r3, [r7, #23]
 800fe1c:	7dfb      	ldrb	r3, [r7, #23]
 800fe1e:	2b0f      	cmp	r3, #15
 800fe20:	d810      	bhi.n	800fe44 <_ZN3BTD14HCI_event_taskEv+0x7e4>
                                                link_key[i] = EEPROM.read(i+6);
 800fe22:	7dfb      	ldrb	r3, [r7, #23]
 800fe24:	3306      	adds	r3, #6
 800fe26:	7dfc      	ldrb	r4, [r7, #23]
 800fe28:	4619      	mov	r1, r3
 800fe2a:	4884      	ldr	r0, [pc, #528]	; (801003c <_ZN3BTD14HCI_event_taskEv+0x9dc>)
 800fe2c:	f7f0 fea0 	bl	8000b70 <_ZN11EEPROMClass4readEi>
 800fe30:	4603      	mov	r3, r0
 800fe32:	461a      	mov	r2, r3
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	4423      	add	r3, r4
 800fe38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                        for(uint8_t i = 0; i < 16; i ++) {
 800fe3c:	7dfb      	ldrb	r3, [r7, #23]
 800fe3e:	3301      	adds	r3, #1
 800fe40:	75fb      	strb	r3, [r7, #23]
 800fe42:	e7eb      	b.n	800fe1c <_ZN3BTD14HCI_event_taskEv+0x7bc>
                                        }
                                        hci_link_key_request_reply();
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f001 fa4c 	bl	80112e2 <_ZN3BTD26hci_link_key_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nhci_link_key_request_reply"), 0x80);
 800fe4a:	2180      	movs	r1, #128	; 0x80
 800fe4c:	487c      	ldr	r0, [pc, #496]	; (8010040 <_ZN3BTD14HCI_event_taskEv+0x9e0>)
 800fe4e:	f005 fef1 	bl	8015c34 <_Z8E_NotifyPKci>
 800fe52:	bf00      	nop
                                        hci_link_key_request_negative_reply();
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nhci_link_key_request_negative_reply"), 0x80);
#endif
                                }
                                break;
 800fe54:	e0eb      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                        hci_link_key_request_negative_reply();
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f001 fade 	bl	8011418 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                        Notify(PSTR("\r\nhci_link_key_request_negative_reply"), 0x80);
 800fe5c:	2180      	movs	r1, #128	; 0x80
 800fe5e:	4879      	ldr	r0, [pc, #484]	; (8010044 <_ZN3BTD14HCI_event_taskEv+0x9e4>)
 800fe60:	f005 fee8 	bl	8015c34 <_Z8E_NotifyPKci>
                                break;
 800fe64:	e0e3      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d12d      	bne.n	800fecc <_ZN3BTD14HCI_event_taskEv+0x86c>
                                        if(pairWithWii && !connectToWii) {
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d010      	beq.n	800fe9c <_ZN3BTD14HCI_event_taskEv+0x83c>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800fe80:	f083 0301 	eor.w	r3, r3, #1
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d008      	beq.n	800fe9c <_ZN3BTD14HCI_event_taskEv+0x83c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
 800fe8a:	2180      	movs	r1, #128	; 0x80
 800fe8c:	486e      	ldr	r0, [pc, #440]	; (8010048 <_ZN3BTD14HCI_event_taskEv+0x9e8>)
 800fe8e:	f005 fed1 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2201      	movs	r2, #1
 800fe96:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800fe9a:	e0c5      	b.n	8010028 <_ZN3BTD14HCI_event_taskEv+0x9c8>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	f000 80c0 	beq.w	8010028 <_ZN3BTD14HCI_event_taskEv+0x9c8>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800feae:	f083 0301 	eor.w	r3, r3, #1
 800feb2:	b2db      	uxtb	r3, r3
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	f000 80b7 	beq.w	8010028 <_ZN3BTD14HCI_event_taskEv+0x9c8>
                                                Notify(PSTR("\r\nPairing successful with HID device"), 0x80);
 800feba:	2180      	movs	r1, #128	; 0x80
 800febc:	4863      	ldr	r0, [pc, #396]	; (801004c <_ZN3BTD14HCI_event_taskEv+0x9ec>)
 800febe:	f005 feb9 	bl	8015c34 <_Z8E_NotifyPKci>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2201      	movs	r2, #1
 800fec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                                break;
 800feca:	e0ad      	b.n	8010028 <_ZN3BTD14HCI_event_taskEv+0x9c8>
                                        Notify(PSTR("\r\nPairing Failed: "), 0x80);
 800fecc:	2180      	movs	r1, #128	; 0x80
 800fece:	4860      	ldr	r0, [pc, #384]	; (8010050 <_ZN3BTD14HCI_event_taskEv+0x9f0>)
 800fed0:	f005 feb0 	bl	8015c34 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800feda:	2180      	movs	r1, #128	; 0x80
 800fedc:	4618      	mov	r0, r3
 800fede:	f001 ff08 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                        hci_disconnect(hci_handle);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	8b5b      	ldrh	r3, [r3, #26]
 800fee6:	4619      	mov	r1, r3
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f001 fb7d 	bl	80115e8 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2210      	movs	r2, #16
 800fef2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                break;
 800fef6:	e097      	b.n	8010028 <_ZN3BTD14HCI_event_taskEv+0x9c8>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
 800fef8:	2180      	movs	r1, #128	; 0x80
 800fefa:	4856      	ldr	r0, [pc, #344]	; (8010054 <_ZN3BTD14HCI_event_taskEv+0x9f4>)
 800fefc:	f005 fe9a 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                hci_io_capability_request_reply();
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f001 fac4 	bl	801148e <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800ff06:	e092      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
#endif
                                break;

                        case EV_USER_CONFIRMATION_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nUser confirmation Request"), 0x80);
 800ff08:	2180      	movs	r1, #128	; 0x80
 800ff0a:	4853      	ldr	r0, [pc, #332]	; (8010058 <_ZN3BTD14HCI_event_taskEv+0x9f8>)
 800ff0c:	f005 fe92 	bl	8015c34 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f001 fb03 	bl	801151c <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800ff16:	e08a      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                }
#endif
                                break;
                        
                        case EV_LINK_KEY_NOTIFICATION: //Xbox One S BT Controller, when pairing write the address and link key to EEPROM
                                if(incomingXboxOneS) {
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	f000 8084 	beq.w	801002c <_ZN3BTD14HCI_event_taskEv+0x9cc>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nLink Key Notification"), 0x80);
 800ff24:	2180      	movs	r1, #128	; 0x80
 800ff26:	484d      	ldr	r0, [pc, #308]	; (801005c <_ZN3BTD14HCI_event_taskEv+0x9fc>)
 800ff28:	f005 fe84 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                        for(uint8_t i = 0; i < 16; i++) {
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	75bb      	strb	r3, [r7, #22]
 800ff30:	7dbb      	ldrb	r3, [r7, #22]
 800ff32:	2b0f      	cmp	r3, #15
 800ff34:	d810      	bhi.n	800ff58 <_ZN3BTD14HCI_event_taskEv+0x8f8>
                                                link_key[i] = hcibuf[8 + i];
 800ff36:	7dbb      	ldrb	r3, [r7, #22]
 800ff38:	f103 0208 	add.w	r2, r3, #8
 800ff3c:	7dbb      	ldrb	r3, [r7, #22]
 800ff3e:	6879      	ldr	r1, [r7, #4]
 800ff40:	440a      	add	r2, r1
 800ff42:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	4413      	add	r3, r2
 800ff4a:	460a      	mov	r2, r1
 800ff4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                        for(uint8_t i = 0; i < 16; i++) {
 800ff50:	7dbb      	ldrb	r3, [r7, #22]
 800ff52:	3301      	adds	r3, #1
 800ff54:	75bb      	strb	r3, [r7, #22]
 800ff56:	e7eb      	b.n	800ff30 <_ZN3BTD14HCI_event_taskEv+0x8d0>
                                        }
                                
                                        for(uint8_t i = 0; i < 6; i++) {
 800ff58:	2300      	movs	r3, #0
 800ff5a:	757b      	strb	r3, [r7, #21]
 800ff5c:	7d7b      	ldrb	r3, [r7, #21]
 800ff5e:	2b05      	cmp	r3, #5
 800ff60:	d80c      	bhi.n	800ff7c <_ZN3BTD14HCI_event_taskEv+0x91c>
                                                EEPROM.write(i, disc_bdaddr[i]);
 800ff62:	7d79      	ldrb	r1, [r7, #21]
 800ff64:	7d7b      	ldrb	r3, [r7, #21]
 800ff66:	687a      	ldr	r2, [r7, #4]
 800ff68:	4413      	add	r3, r2
 800ff6a:	7f1b      	ldrb	r3, [r3, #28]
 800ff6c:	461a      	mov	r2, r3
 800ff6e:	4833      	ldr	r0, [pc, #204]	; (801003c <_ZN3BTD14HCI_event_taskEv+0x9dc>)
 800ff70:	f7f0 fe13 	bl	8000b9a <_ZN11EEPROMClass5writeEih>
                                        for(uint8_t i = 0; i < 6; i++) {
 800ff74:	7d7b      	ldrb	r3, [r7, #21]
 800ff76:	3301      	adds	r3, #1
 800ff78:	757b      	strb	r3, [r7, #21]
 800ff7a:	e7ef      	b.n	800ff5c <_ZN3BTD14HCI_event_taskEv+0x8fc>
                                        }

                                        for(uint8_t i = 0; i < 16; i++) {
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	753b      	strb	r3, [r7, #20]
 800ff80:	7d3b      	ldrb	r3, [r7, #20]
 800ff82:	2b0f      	cmp	r3, #15
 800ff84:	d80e      	bhi.n	800ffa4 <_ZN3BTD14HCI_event_taskEv+0x944>
                                                EEPROM.write(i + 6, link_key[i]);
 800ff86:	7d3b      	ldrb	r3, [r7, #20]
 800ff88:	1d99      	adds	r1, r3, #6
 800ff8a:	7d3b      	ldrb	r3, [r7, #20]
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	4413      	add	r3, r2
 800ff90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff94:	461a      	mov	r2, r3
 800ff96:	4829      	ldr	r0, [pc, #164]	; (801003c <_ZN3BTD14HCI_event_taskEv+0x9dc>)
 800ff98:	f7f0 fdff 	bl	8000b9a <_ZN11EEPROMClass5writeEih>
                                        for(uint8_t i = 0; i < 16; i++) {
 800ff9c:	7d3b      	ldrb	r3, [r7, #20]
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	753b      	strb	r3, [r7, #20]
 800ffa2:	e7ed      	b.n	800ff80 <_ZN3BTD14HCI_event_taskEv+0x920>
                                        }                        

#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nBD_ADDR: "), 0x80);
 800ffa4:	2180      	movs	r1, #128	; 0x80
 800ffa6:	482e      	ldr	r0, [pc, #184]	; (8010060 <_ZN3BTD14HCI_event_taskEv+0xa00>)
 800ffa8:	f005 fe44 	bl	8015c34 <_Z8E_NotifyPKci>
                                        for(uint8_t i = 0; i < 6; i++) {
 800ffac:	2300      	movs	r3, #0
 800ffae:	74fb      	strb	r3, [r7, #19]
 800ffb0:	7cfb      	ldrb	r3, [r7, #19]
 800ffb2:	2b05      	cmp	r3, #5
 800ffb4:	d811      	bhi.n	800ffda <_ZN3BTD14HCI_event_taskEv+0x97a>
                                                Notify(PSTR(" "), 0x80);
 800ffb6:	2180      	movs	r1, #128	; 0x80
 800ffb8:	482a      	ldr	r0, [pc, #168]	; (8010064 <_ZN3BTD14HCI_event_taskEv+0xa04>)
 800ffba:	f005 fe3b 	bl	8015c34 <_Z8E_NotifyPKci>
                                                D_PrintHex<uint8_t > (hcibuf[2 + i], 0x80);
 800ffbe:	7cfb      	ldrb	r3, [r7, #19]
 800ffc0:	3302      	adds	r3, #2
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	4413      	add	r3, r2
 800ffc6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800ffca:	2180      	movs	r1, #128	; 0x80
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f001 fe90 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                        for(uint8_t i = 0; i < 6; i++) {
 800ffd2:	7cfb      	ldrb	r3, [r7, #19]
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	74fb      	strb	r3, [r7, #19]
 800ffd8:	e7ea      	b.n	800ffb0 <_ZN3BTD14HCI_event_taskEv+0x950>
                                        }
                                        Notify(PSTR("\r\nLink Key for the associated BD_ADDR: "), 0x80);
 800ffda:	2180      	movs	r1, #128	; 0x80
 800ffdc:	4822      	ldr	r0, [pc, #136]	; (8010068 <_ZN3BTD14HCI_event_taskEv+0xa08>)
 800ffde:	f005 fe29 	bl	8015c34 <_Z8E_NotifyPKci>
                                        for(uint8_t i = 0; i < 16; i++) {
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	74bb      	strb	r3, [r7, #18]
 800ffe6:	7cbb      	ldrb	r3, [r7, #18]
 800ffe8:	2b0f      	cmp	r3, #15
 800ffea:	d81f      	bhi.n	801002c <_ZN3BTD14HCI_event_taskEv+0x9cc>
                                                Notify(PSTR(" "), 0x80);
 800ffec:	2180      	movs	r1, #128	; 0x80
 800ffee:	481d      	ldr	r0, [pc, #116]	; (8010064 <_ZN3BTD14HCI_event_taskEv+0xa04>)
 800fff0:	f005 fe20 	bl	8015c34 <_Z8E_NotifyPKci>
                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
 800fff4:	7cbb      	ldrb	r3, [r7, #18]
 800fff6:	3308      	adds	r3, #8
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	4413      	add	r3, r2
 800fffc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8010000:	2180      	movs	r1, #128	; 0x80
 8010002:	4618      	mov	r0, r3
 8010004:	f001 fe75 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                        for(uint8_t i = 0; i < 16; i++) {
 8010008:	7cbb      	ldrb	r3, [r7, #18]
 801000a:	3301      	adds	r3, #1
 801000c:	74bb      	strb	r3, [r7, #18]
 801000e:	e7ea      	b.n	800ffe6 <_ZN3BTD14HCI_event_taskEv+0x986>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 8010010:	bf00      	nop
 8010012:	e00c      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 8010014:	bf00      	nop
 8010016:	e00a      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 8010018:	bf00      	nop
 801001a:	e008      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 801001c:	bf00      	nop
 801001e:	e006      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 8010020:	bf00      	nop
 8010022:	e004      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 8010024:	bf00      	nop
 8010026:	e002      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 8010028:	bf00      	nop
 801002a:	e000      	b.n	801002e <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 801002c:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 801002e:	bf00      	nop
 8010030:	3720      	adds	r7, #32
 8010032:	46bd      	mov	sp, r7
 8010034:	bdb0      	pop	{r4, r5, r7, pc}
 8010036:	bf00      	nop
 8010038:	08016e40 	.word	0x08016e40
 801003c:	20005750 	.word	0x20005750
 8010040:	08016e58 	.word	0x08016e58
 8010044:	08016e78 	.word	0x08016e78
 8010048:	08016ea0 	.word	0x08016ea0
 801004c:	08016ec4 	.word	0x08016ec4
 8010050:	08016eec 	.word	0x08016eec
 8010054:	08016f00 	.word	0x08016f00
 8010058:	08016f24 	.word	0x08016f24
 801005c:	08016f40 	.word	0x08016f40
 8010060:	08016f58 	.word	0x08016f58
 8010064:	08016d24 	.word	0x08016d24
 8010068:	08016f64 	.word	0x08016f64

0801006c <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 801006c:	b590      	push	{r4, r7, lr}
 801006e:	b085      	sub	sp, #20
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801007a:	2b13      	cmp	r3, #19
 801007c:	f200 84a9 	bhi.w	80109d2 <_ZN3BTD8HCI_taskEv+0x966>
 8010080:	a201      	add	r2, pc, #4	; (adr r2, 8010088 <_ZN3BTD8HCI_taskEv+0x1c>)
 8010082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010086:	bf00      	nop
 8010088:	080100d9 	.word	0x080100d9
 801008c:	08010115 	.word	0x08010115
 8010090:	080101af 	.word	0x080101af
 8010094:	080101d9 	.word	0x080101d9
 8010098:	08010241 	.word	0x08010241
 801009c:	08010295 	.word	0x08010295
 80100a0:	0801035f 	.word	0x0801035f
 80100a4:	080103a9 	.word	0x080103a9
 80100a8:	08010491 	.word	0x08010491
 80100ac:	080104d5 	.word	0x080104d5
 80100b0:	0801052f 	.word	0x0801052f
 80100b4:	08010595 	.word	0x08010595
 80100b8:	080105db 	.word	0x080105db
 80100bc:	08010871 	.word	0x08010871
 80100c0:	080109d3 	.word	0x080109d3
 80100c4:	080108ff 	.word	0x080108ff
 80100c8:	0801092d 	.word	0x0801092d
 80100cc:	080102df 	.word	0x080102df
 80100d0:	08010315 	.word	0x08010315
 80100d4:	0801033d 	.word	0x0801033d
                case HCI_INIT_STATE:
                        hci_counter++;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80100de:	3301      	adds	r3, #1
 80100e0:	b29a      	uxth	r2, r3
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80100f4:	429a      	cmp	r2, r3
 80100f6:	f240 846e 	bls.w	80109d6 <_ZN3BTD8HCI_taskEv+0x96a>
                                hci_reset();
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f000 fd33 	bl	8010b66 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2201      	movs	r2, #1
 8010104:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                hci_counter = 0;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2200      	movs	r2, #0
 801010c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        }
                        break;
 8010110:	f000 bc61 	b.w	80109d6 <_ZN3BTD8HCI_taskEv+0x96a>

                case HCI_RESET_STATE:
                        hci_counter++;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 801011a:	3301      	adds	r3, #1
 801011c:	b29a      	uxth	r2, r3
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 801012a:	f003 0301 	and.w	r3, r3, #1
 801012e:	2b00      	cmp	r3, #0
 8010130:	d010      	beq.n	8010154 <_ZN3BTD8HCI_taskEv+0xe8>
                                hci_counter = 0;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2200      	movs	r2, #0
 8010136:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
 801013a:	2180      	movs	r1, #128	; 0x80
 801013c:	48c2      	ldr	r0, [pc, #776]	; (8010448 <_ZN3BTD8HCI_taskEv+0x3dc>)
 801013e:	f005 fd79 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                hci_state = HCI_CLASS_STATE;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2202      	movs	r2, #2
 8010146:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                hci_write_class_of_device();
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f001 fa84 	bl	8011658 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 8010150:	f000 bc43 	b.w	80109da <_ZN3BTD8HCI_taskEv+0x96e>
                        } else if(hci_counter > hci_num_reset_loops) {
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8010160:	429a      	cmp	r2, r3
 8010162:	f240 843a 	bls.w	80109da <_ZN3BTD8HCI_taskEv+0x96e>
                                hci_num_reset_loops *= 10;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801016c:	461a      	mov	r2, r3
 801016e:	0092      	lsls	r2, r2, #2
 8010170:	4413      	add	r3, r2
 8010172:	005b      	lsls	r3, r3, #1
 8010174:	b29a      	uxth	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
                                if(hci_num_reset_loops > 2000)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8010182:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010186:	d904      	bls.n	8010192 <_ZN3BTD8HCI_taskEv+0x126>
                                        hci_num_reset_loops = 2000;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801018e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
 8010192:	2180      	movs	r1, #128	; 0x80
 8010194:	48ad      	ldr	r0, [pc, #692]	; (801044c <_ZN3BTD8HCI_taskEv+0x3e0>)
 8010196:	f005 fd4d 	bl	8015c34 <_Z8E_NotifyPKci>
                                hci_state = HCI_INIT_STATE;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                hci_counter = 0;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        break;
 80101aa:	f000 bc16 	b.w	80109da <_ZN3BTD8HCI_taskEv+0x96e>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80101b4:	f003 0301 	and.w	r3, r3, #1
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f000 8410 	beq.w	80109de <_ZN3BTD8HCI_taskEv+0x972>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
 80101be:	2180      	movs	r1, #128	; 0x80
 80101c0:	48a3      	ldr	r0, [pc, #652]	; (8010450 <_ZN3BTD8HCI_taskEv+0x3e4>)
 80101c2:	f005 fd37 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                hci_state = HCI_BDADDR_STATE;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2203      	movs	r2, #3
 80101ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                hci_read_bdaddr();
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f000 fd19 	bl	8010c06 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 80101d4:	f000 bc03 	b.w	80109de <_ZN3BTD8HCI_taskEv+0x972>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80101de:	f003 0320 	and.w	r3, r3, #32
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	f000 83fd 	beq.w	80109e2 <_ZN3BTD8HCI_taskEv+0x976>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nLocal Bluetooth Address: "), 0x80);
 80101e8:	2180      	movs	r1, #128	; 0x80
 80101ea:	489a      	ldr	r0, [pc, #616]	; (8010454 <_ZN3BTD8HCI_taskEv+0x3e8>)
 80101ec:	f005 fd22 	bl	8015c34 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 80101f0:	2305      	movs	r3, #5
 80101f2:	73fb      	strb	r3, [r7, #15]
 80101f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	dd13      	ble.n	8010224 <_ZN3BTD8HCI_taskEv+0x1b8>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
 80101fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	4413      	add	r3, r2
 8010204:	7d1b      	ldrb	r3, [r3, #20]
 8010206:	2180      	movs	r1, #128	; 0x80
 8010208:	4618      	mov	r0, r3
 801020a:	f001 fd72 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR(":"), 0x80);
 801020e:	2180      	movs	r1, #128	; 0x80
 8010210:	4891      	ldr	r0, [pc, #580]	; (8010458 <_ZN3BTD8HCI_taskEv+0x3ec>)
 8010212:	f005 fd0f 	bl	8015c34 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 8010216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801021a:	b2db      	uxtb	r3, r3
 801021c:	3b01      	subs	r3, #1
 801021e:	b2db      	uxtb	r3, r3
 8010220:	73fb      	strb	r3, [r7, #15]
 8010222:	e7e7      	b.n	80101f4 <_ZN3BTD8HCI_taskEv+0x188>
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	7d1b      	ldrb	r3, [r3, #20]
 8010228:	2180      	movs	r1, #128	; 0x80
 801022a:	4618      	mov	r0, r3
 801022c:	f001 fd61 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
#endif
                                hci_read_local_version_information();
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f000 fd0c 	bl	8010c4e <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2204      	movs	r2, #4
 801023a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 801023e:	e3d0      	b.n	80109e2 <_ZN3BTD8HCI_taskEv+0x976>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801024a:	2b00      	cmp	r3, #0
 801024c:	f000 83cb 	beq.w	80109e6 <_ZN3BTD8HCI_taskEv+0x97a>
                                if(btdName != NULL) {
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	68db      	ldr	r3, [r3, #12]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d00a      	beq.n	801026e <_ZN3BTD8HCI_taskEv+0x202>
                                        hci_write_local_name(btdName);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	4619      	mov	r1, r3
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 fddf 	bl	8010e22 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2205      	movs	r2, #5
 8010268:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 801026c:	e3bb      	b.n	80109e6 <_ZN3BTD8HCI_taskEv+0x97a>
                                } else if(useSimplePairing) {
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8010274:	2b00      	cmp	r3, #0
 8010276:	d008      	beq.n	801028a <_ZN3BTD8HCI_taskEv+0x21e>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 8010278:	2100      	movs	r1, #0
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 fd0b 	bl	8010c96 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2211      	movs	r2, #17
 8010284:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 8010288:	e3ad      	b.n	80109e6 <_ZN3BTD8HCI_taskEv+0x97a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2206      	movs	r2, #6
 801028e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 8010292:	e3a8      	b.n	80109e6 <_ZN3BTD8HCI_taskEv+0x97a>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 801029a:	f003 0301 	and.w	r3, r3, #1
 801029e:	2b00      	cmp	r3, #0
 80102a0:	f000 83a3 	beq.w	80109ea <_ZN3BTD8HCI_taskEv+0x97e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
 80102a4:	2180      	movs	r1, #128	; 0x80
 80102a6:	486d      	ldr	r0, [pc, #436]	; (801045c <_ZN3BTD8HCI_taskEv+0x3f0>)
 80102a8:	f005 fcc4 	bl	8015c34 <_Z8E_NotifyPKci>
                                NotifyStr(btdName, 0x80);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	2180      	movs	r1, #128	; 0x80
 80102b2:	4618      	mov	r0, r3
 80102b4:	f005 fce6 	bl	8015c84 <_Z11E_NotifyStrPKci>
#endif
                                if(useSimplePairing) {
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d008      	beq.n	80102d4 <_ZN3BTD8HCI_taskEv+0x268>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 80102c2:	2100      	movs	r1, #0
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 fce6 	bl	8010c96 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2211      	movs	r2, #17
 80102ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 80102d2:	e38a      	b.n	80109ea <_ZN3BTD8HCI_taskEv+0x97e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2206      	movs	r2, #6
 80102d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 80102dc:	e385      	b.n	80109ea <_ZN3BTD8HCI_taskEv+0x97e>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80102e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	f000 8380 	beq.w	80109ee <_ZN3BTD8HCI_taskEv+0x982>
                                if(simple_pairing_supported) {
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d008      	beq.n	801030a <_ZN3BTD8HCI_taskEv+0x29e>
                                        hci_write_simple_pairing_mode(true);
 80102f8:	2101      	movs	r1, #1
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f000 fe15 	bl	8010f2a <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2212      	movs	r2, #18
 8010304:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 8010308:	e371      	b.n	80109ee <_ZN3BTD8HCI_taskEv+0x982>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2206      	movs	r2, #6
 801030e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 8010312:	e36c      	b.n	80109ee <_ZN3BTD8HCI_taskEv+0x982>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 801031a:	f003 0301 	and.w	r3, r3, #1
 801031e:	2b00      	cmp	r3, #0
 8010320:	f000 8367 	beq.w	80109f2 <_ZN3BTD8HCI_taskEv+0x986>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
 8010324:	2180      	movs	r1, #128	; 0x80
 8010326:	484e      	ldr	r0, [pc, #312]	; (8010460 <_ZN3BTD8HCI_taskEv+0x3f4>)
 8010328:	f005 fc84 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                hci_set_event_mask();
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f000 fdc1 	bl	8010eb4 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2213      	movs	r2, #19
 8010336:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 801033a:	e35a      	b.n	80109f2 <_ZN3BTD8HCI_taskEv+0x986>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010342:	f003 0301 	and.w	r3, r3, #1
 8010346:	2b00      	cmp	r3, #0
 8010348:	f000 8355 	beq.w	80109f6 <_ZN3BTD8HCI_taskEv+0x98a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
 801034c:	2180      	movs	r1, #128	; 0x80
 801034e:	4845      	ldr	r0, [pc, #276]	; (8010464 <_ZN3BTD8HCI_taskEv+0x3f8>)
 8010350:	f005 fc70 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2206      	movs	r2, #6
 8010358:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 801035c:	e34b      	b.n	80109f6 <_ZN3BTD8HCI_taskEv+0x98a>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8010364:	2b00      	cmp	r3, #0
 8010366:	d104      	bne.n	8010372 <_ZN3BTD8HCI_taskEv+0x306>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801036e:	2b00      	cmp	r3, #0
 8010370:	d015      	beq.n	801039e <_ZN3BTD8HCI_taskEv+0x332>
#ifdef DEBUG_USB_HOST
                                if(pairWithWii)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010378:	2b00      	cmp	r3, #0
 801037a:	d004      	beq.n	8010386 <_ZN3BTD8HCI_taskEv+0x31a>
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
 801037c:	2180      	movs	r1, #128	; 0x80
 801037e:	483a      	ldr	r0, [pc, #232]	; (8010468 <_ZN3BTD8HCI_taskEv+0x3fc>)
 8010380:	f005 fc58 	bl	8015c34 <_Z8E_NotifyPKci>
 8010384:	e003      	b.n	801038e <_ZN3BTD8HCI_taskEv+0x322>
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
 8010386:	2180      	movs	r1, #128	; 0x80
 8010388:	4838      	ldr	r0, [pc, #224]	; (801046c <_ZN3BTD8HCI_taskEv+0x400>)
 801038a:	f005 fc53 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                hci_inquiry();
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f000 fdf1 	bl	8010f76 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2207      	movs	r2, #7
 8010398:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 801039c:	e33e      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	220a      	movs	r2, #10
 80103a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 80103a6:	e339      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80103ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	f000 8321 	beq.w	80109fa <_ZN3BTD8HCI_taskEv+0x98e>
                                hci_inquiry_cancel(); // Stop inquiry
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f000 fe14 	bl	8010fe6 <_ZN3BTD18hci_inquiry_cancelEv>
#ifdef DEBUG_USB_HOST
                                if(pairWithWii)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d004      	beq.n	80103d2 <_ZN3BTD8HCI_taskEv+0x366>
                                        Notify(PSTR("\r\nWiimote found"), 0x80);
 80103c8:	2180      	movs	r1, #128	; 0x80
 80103ca:	4829      	ldr	r0, [pc, #164]	; (8010470 <_ZN3BTD8HCI_taskEv+0x404>)
 80103cc:	f005 fc32 	bl	8015c34 <_Z8E_NotifyPKci>
 80103d0:	e003      	b.n	80103da <_ZN3BTD8HCI_taskEv+0x36e>
                                else
                                        Notify(PSTR("\r\nHID device found"), 0x80);
 80103d2:	2180      	movs	r1, #128	; 0x80
 80103d4:	4827      	ldr	r0, [pc, #156]	; (8010474 <_ZN3BTD8HCI_taskEv+0x408>)
 80103d6:	f005 fc2d 	bl	8015c34 <_Z8E_NotifyPKci>

                                Notify(PSTR("\r\nNow just create the instance like so:"), 0x80);
 80103da:	2180      	movs	r1, #128	; 0x80
 80103dc:	4826      	ldr	r0, [pc, #152]	; (8010478 <_ZN3BTD8HCI_taskEv+0x40c>)
 80103de:	f005 fc29 	bl	8015c34 <_Z8E_NotifyPKci>
                                if(pairWithWii)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d004      	beq.n	80103f6 <_ZN3BTD8HCI_taskEv+0x38a>
                                        Notify(PSTR("\r\nWII Wii(&Btd);"), 0x80);
 80103ec:	2180      	movs	r1, #128	; 0x80
 80103ee:	4823      	ldr	r0, [pc, #140]	; (801047c <_ZN3BTD8HCI_taskEv+0x410>)
 80103f0:	f005 fc20 	bl	8015c34 <_Z8E_NotifyPKci>
 80103f4:	e003      	b.n	80103fe <_ZN3BTD8HCI_taskEv+0x392>
                                else
                                        Notify(PSTR("\r\nBTHID bthid(&Btd);"), 0x80);
 80103f6:	2180      	movs	r1, #128	; 0x80
 80103f8:	4821      	ldr	r0, [pc, #132]	; (8010480 <_ZN3BTD8HCI_taskEv+0x414>)
 80103fa:	f005 fc1b 	bl	8015c34 <_Z8E_NotifyPKci>

                                Notify(PSTR("\r\nAnd then press any button on the "), 0x80);
 80103fe:	2180      	movs	r1, #128	; 0x80
 8010400:	4820      	ldr	r0, [pc, #128]	; (8010484 <_ZN3BTD8HCI_taskEv+0x418>)
 8010402:	f005 fc17 	bl	8015c34 <_Z8E_NotifyPKci>
                                if(pairWithWii)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801040c:	2b00      	cmp	r3, #0
 801040e:	d004      	beq.n	801041a <_ZN3BTD8HCI_taskEv+0x3ae>
                                        Notify(PSTR("Wiimote"), 0x80);
 8010410:	2180      	movs	r1, #128	; 0x80
 8010412:	481d      	ldr	r0, [pc, #116]	; (8010488 <_ZN3BTD8HCI_taskEv+0x41c>)
 8010414:	f005 fc0e 	bl	8015c34 <_Z8E_NotifyPKci>
 8010418:	e003      	b.n	8010422 <_ZN3BTD8HCI_taskEv+0x3b6>
                                else
                                        Notify(PSTR("device"), 0x80);
 801041a:	2180      	movs	r1, #128	; 0x80
 801041c:	481b      	ldr	r0, [pc, #108]	; (801048c <_ZN3BTD8HCI_taskEv+0x420>)
 801041e:	f005 fc09 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                if(checkRemoteName) {
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010428:	2b00      	cmp	r3, #0
 801042a:	d007      	beq.n	801043c <_ZN3BTD8HCI_taskEv+0x3d0>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 fca4 	bl	8010d7a <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	220c      	movs	r2, #12
 8010436:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 801043a:	e2de      	b.n	80109fa <_ZN3BTD8HCI_taskEv+0x98e>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2208      	movs	r2, #8
 8010440:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 8010444:	e2d9      	b.n	80109fa <_ZN3BTD8HCI_taskEv+0x98e>
 8010446:	bf00      	nop
 8010448:	08016f8c 	.word	0x08016f8c
 801044c:	08016fa4 	.word	0x08016fa4
 8010450:	08016fc0 	.word	0x08016fc0
 8010454:	08016fd8 	.word	0x08016fd8
 8010458:	08016c18 	.word	0x08016c18
 801045c:	08016ff4 	.word	0x08016ff4
 8010460:	0801700c 	.word	0x0801700c
 8010464:	0801702c 	.word	0x0801702c
 8010468:	08017048 	.word	0x08017048
 801046c:	080170d0 	.word	0x080170d0
 8010470:	080170fc 	.word	0x080170fc
 8010474:	0801710c 	.word	0x0801710c
 8010478:	08017120 	.word	0x08017120
 801047c:	08017148 	.word	0x08017148
 8010480:	0801715c 	.word	0x0801715c
 8010484:	08017174 	.word	0x08017174
 8010488:	08017198 	.word	0x08017198
 801048c:	080171a0 	.word	0x080171a0

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010496:	f003 0301 	and.w	r3, r3, #1
 801049a:	2b00      	cmp	r3, #0
 801049c:	f000 82af 	beq.w	80109fe <_ZN3BTD8HCI_taskEv+0x992>
#ifdef DEBUG_USB_HOST
                                if(pairWithWii)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d004      	beq.n	80104b4 <_ZN3BTD8HCI_taskEv+0x448>
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
 80104aa:	2180      	movs	r1, #128	; 0x80
 80104ac:	48bf      	ldr	r0, [pc, #764]	; (80107ac <_ZN3BTD8HCI_taskEv+0x740>)
 80104ae:	f005 fbc1 	bl	8015c34 <_Z8E_NotifyPKci>
 80104b2:	e003      	b.n	80104bc <_ZN3BTD8HCI_taskEv+0x450>
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
 80104b4:	2180      	movs	r1, #128	; 0x80
 80104b6:	48be      	ldr	r0, [pc, #760]	; (80107b0 <_ZN3BTD8HCI_taskEv+0x744>)
 80104b8:	f005 fbbc 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                checkRemoteName = false;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2200      	movs	r2, #0
 80104c0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
                                hci_connect();
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f000 fda9 	bl	801101c <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2209      	movs	r2, #9
 80104ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 80104d2:	e294      	b.n	80109fe <_ZN3BTD8HCI_taskEv+0x992>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80104da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104de:	2b00      	cmp	r3, #0
 80104e0:	f000 828f 	beq.w	8010a02 <_ZN3BTD8HCI_taskEv+0x996>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80104ea:	f003 0302 	and.w	r3, r3, #2
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d015      	beq.n	801051e <_ZN3BTD8HCI_taskEv+0x4b2>
#ifdef DEBUG_USB_HOST
                                        if(pairWithWii)
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d004      	beq.n	8010506 <_ZN3BTD8HCI_taskEv+0x49a>
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
 80104fc:	2180      	movs	r1, #128	; 0x80
 80104fe:	48ad      	ldr	r0, [pc, #692]	; (80107b4 <_ZN3BTD8HCI_taskEv+0x748>)
 8010500:	f005 fb98 	bl	8015c34 <_Z8E_NotifyPKci>
 8010504:	e003      	b.n	801050e <_ZN3BTD8HCI_taskEv+0x4a2>
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
 8010506:	2180      	movs	r1, #128	; 0x80
 8010508:	48ab      	ldr	r0, [pc, #684]	; (80107b8 <_ZN3BTD8HCI_taskEv+0x74c>)
 801050a:	f005 fb93 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f001 f83f 	bl	8011592 <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	220a      	movs	r2, #10
 8010518:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 801051c:	e271      	b.n	8010a02 <_ZN3BTD8HCI_taskEv+0x996>
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
 801051e:	2180      	movs	r1, #128	; 0x80
 8010520:	48a6      	ldr	r0, [pc, #664]	; (80107bc <_ZN3BTD8HCI_taskEv+0x750>)
 8010522:	f005 fb87 	bl	8015c34 <_Z8E_NotifyPKci>
                                        hci_connect(); // Try to connect one more time
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 fd78 	bl	801101c <_ZN3BTD11hci_connectEv>
                        break;
 801052c:	e269      	b.n	8010a02 <_ZN3BTD8HCI_taskEv+0x996>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8010534:	f083 0301 	eor.w	r3, r3, #1
 8010538:	b2db      	uxtb	r3, r3
 801053a:	2b00      	cmp	r3, #0
 801053c:	f000 8263 	beq.w	8010a06 <_ZN3BTD8HCI_taskEv+0x99a>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010546:	f083 0301 	eor.w	r3, r3, #1
 801054a:	b2db      	uxtb	r3, r3
 801054c:	2b00      	cmp	r3, #0
 801054e:	f000 825a 	beq.w	8010a06 <_ZN3BTD8HCI_taskEv+0x99a>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010558:	f083 0301 	eor.w	r3, r3, #1
 801055c:	b2db      	uxtb	r3, r3
 801055e:	2b00      	cmp	r3, #0
 8010560:	f000 8251 	beq.w	8010a06 <_ZN3BTD8HCI_taskEv+0x99a>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 801056a:	f083 0301 	eor.w	r3, r3, #1
 801056e:	b2db      	uxtb	r3, r3
 8010570:	2b00      	cmp	r3, #0
 8010572:	f000 8248 	beq.w	8010a06 <_ZN3BTD8HCI_taskEv+0x99a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
 8010576:	2180      	movs	r1, #128	; 0x80
 8010578:	4891      	ldr	r0, [pc, #580]	; (80107c0 <_ZN3BTD8HCI_taskEv+0x754>)
 801057a:	f005 fb5b 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                hci_write_scan_enable();
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 fb10 	bl	8010ba4 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2201      	movs	r2, #1
 8010588:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	220b      	movs	r2, #11
 801058e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 8010592:	e238      	b.n	8010a06 <_ZN3BTD8HCI_taskEv+0x99a>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 801059a:	f003 0310 	and.w	r3, r3, #16
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d00e      	beq.n	80105c0 <_ZN3BTD8HCI_taskEv+0x554>
                                waitingForConnection = false;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2200      	movs	r2, #0
 80105a6:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
 80105a8:	2180      	movs	r1, #128	; 0x80
 80105aa:	4886      	ldr	r0, [pc, #536]	; (80107c4 <_ZN3BTD8HCI_taskEv+0x758>)
 80105ac:	f005 fb42 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                hci_remote_name();
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f000 fbe2 	bl	8010d7a <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	220c      	movs	r2, #12
 80105ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 80105be:	e224      	b.n	8010a0a <_ZN3BTD8HCI_taskEv+0x99e>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80105c6:	f003 0304 	and.w	r3, r3, #4
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	f000 821d 	beq.w	8010a0a <_ZN3BTD8HCI_taskEv+0x99e>
                                hci_state = HCI_DISCONNECT_STATE;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2210      	movs	r2, #16
 80105d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 80105d8:	e217      	b.n	8010a0a <_ZN3BTD8HCI_taskEv+0x99e>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80105e0:	f003 0308 	and.w	r3, r3, #8
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f000 8212 	beq.w	8010a0e <_ZN3BTD8HCI_taskEv+0x9a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
 80105ea:	2180      	movs	r1, #128	; 0x80
 80105ec:	4876      	ldr	r0, [pc, #472]	; (80107c8 <_ZN3BTD8HCI_taskEv+0x75c>)
 80105ee:	f005 fb21 	bl	8015c34 <_Z8E_NotifyPKci>
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
 80105f2:	2300      	movs	r3, #0
 80105f4:	73bb      	strb	r3, [r7, #14]
 80105f6:	7bbc      	ldrb	r4, [r7, #14]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	3322      	adds	r3, #34	; 0x22
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7ef fe07 	bl	8000210 <strlen>
 8010602:	4603      	mov	r3, r0
 8010604:	429c      	cmp	r4, r3
 8010606:	d20c      	bcs.n	8010622 <_ZN3BTD8HCI_taskEv+0x5b6>
                                        Notifyc(remote_name[i], 0x80);
 8010608:	7bbb      	ldrb	r3, [r7, #14]
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	4413      	add	r3, r2
 801060e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010612:	2180      	movs	r1, #128	; 0x80
 8010614:	4618      	mov	r0, r3
 8010616:	f005 faf3 	bl	8015c00 <_Z9E_Notifycci>
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
 801061a:	7bbb      	ldrb	r3, [r7, #14]
 801061c:	3301      	adds	r3, #1
 801061e:	73bb      	strb	r3, [r7, #14]
 8010620:	e7e9      	b.n	80105f6 <_ZN3BTD8HCI_taskEv+0x58a>
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	3322      	adds	r3, #34	; 0x22
 8010626:	2208      	movs	r2, #8
 8010628:	4968      	ldr	r1, [pc, #416]	; (80107cc <_ZN3BTD8HCI_taskEv+0x760>)
 801062a:	4618      	mov	r0, r3
 801062c:	f005 fd9c 	bl	8016168 <strncmp>
 8010630:	4603      	mov	r3, r0
 8010632:	2b00      	cmp	r3, #0
 8010634:	d157      	bne.n	80106e6 <_ZN3BTD8HCI_taskEv+0x67a>
                                        incomingWii = true;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2201      	movs	r2, #1
 801063a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                                        motionPlusInside = false;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2200      	movs	r2, #0
 8010642:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                                        wiiUProController = false;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2200      	movs	r2, #0
 801064a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
                                        pairWiiUsingSync = false;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
 8010656:	2180      	movs	r1, #128	; 0x80
 8010658:	485d      	ldr	r0, [pc, #372]	; (80107d0 <_ZN3BTD8HCI_taskEv+0x764>)
 801065a:	f005 faeb 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	3322      	adds	r3, #34	; 0x22
 8010662:	2216      	movs	r2, #22
 8010664:	495b      	ldr	r1, [pc, #364]	; (80107d4 <_ZN3BTD8HCI_taskEv+0x768>)
 8010666:	4618      	mov	r0, r3
 8010668:	f005 fd7e 	bl	8016168 <strncmp>
 801066c:	4603      	mov	r3, r0
 801066e:	2b00      	cmp	r3, #0
 8010670:	d108      	bne.n	8010684 <_ZN3BTD8HCI_taskEv+0x618>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
 8010672:	2180      	movs	r1, #128	; 0x80
 8010674:	4858      	ldr	r0, [pc, #352]	; (80107d8 <_ZN3BTD8HCI_taskEv+0x76c>)
 8010676:	f005 fadd 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                                motionPlusInside = true;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2201      	movs	r2, #1
 801067e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8010682:	e030      	b.n	80106e6 <_ZN3BTD8HCI_taskEv+0x67a>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	3322      	adds	r3, #34	; 0x22
 8010688:	2216      	movs	r2, #22
 801068a:	4954      	ldr	r1, [pc, #336]	; (80107dc <_ZN3BTD8HCI_taskEv+0x770>)
 801068c:	4618      	mov	r0, r3
 801068e:	f005 fd6b 	bl	8016168 <strncmp>
 8010692:	4603      	mov	r3, r0
 8010694:	2b00      	cmp	r3, #0
 8010696:	d114      	bne.n	80106c2 <_ZN3BTD8HCI_taskEv+0x656>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
 8010698:	2180      	movs	r1, #128	; 0x80
 801069a:	4851      	ldr	r0, [pc, #324]	; (80107e0 <_ZN3BTD8HCI_taskEv+0x774>)
 801069c:	f005 faca 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2201      	movs	r2, #1
 80106a4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 80106c0:	e011      	b.n	80106e6 <_ZN3BTD8HCI_taskEv+0x67a>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	3322      	adds	r3, #34	; 0x22
 80106c6:	2213      	movs	r2, #19
 80106c8:	4946      	ldr	r1, [pc, #280]	; (80107e4 <_ZN3BTD8HCI_taskEv+0x778>)
 80106ca:	4618      	mov	r0, r3
 80106cc:	f005 fd4c 	bl	8016168 <strncmp>
 80106d0:	4603      	mov	r3, r0
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d107      	bne.n	80106e6 <_ZN3BTD8HCI_taskEv+0x67a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
 80106d6:	2180      	movs	r1, #128	; 0x80
 80106d8:	4843      	ldr	r0, [pc, #268]	; (80107e8 <_ZN3BTD8HCI_taskEv+0x77c>)
 80106da:	f005 faab 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                                pairWiiUsingSync = true;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2201      	movs	r2, #1
 80106e2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d11b      	bne.n	8010728 <_ZN3BTD8HCI_taskEv+0x6bc>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80106f6:	2b25      	cmp	r3, #37	; 0x25
 80106f8:	d116      	bne.n	8010728 <_ZN3BTD8HCI_taskEv+0x6bc>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010700:	2b08      	cmp	r3, #8
 8010702:	d111      	bne.n	8010728 <_ZN3BTD8HCI_taskEv+0x6bc>
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	3322      	adds	r3, #34	; 0x22
 8010708:	2213      	movs	r2, #19
 801070a:	4938      	ldr	r1, [pc, #224]	; (80107ec <_ZN3BTD8HCI_taskEv+0x780>)
 801070c:	4618      	mov	r0, r3
 801070e:	f005 fd2b 	bl	8016168 <strncmp>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d107      	bne.n	8010728 <_ZN3BTD8HCI_taskEv+0x6bc>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
 8010718:	2180      	movs	r1, #128	; 0x80
 801071a:	4835      	ldr	r0, [pc, #212]	; (80107f0 <_ZN3BTD8HCI_taskEv+0x784>)
 801071c:	f005 fa8a 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                        incomingPSController = true;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2201      	movs	r2, #1
 8010724:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                                }

                                if(strncmp((const char*)remote_name, "Xbox Wireless Controller", 24 ) == 0) {
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	3322      	adds	r3, #34	; 0x22
 801072c:	2218      	movs	r2, #24
 801072e:	4931      	ldr	r1, [pc, #196]	; (80107f4 <_ZN3BTD8HCI_taskEv+0x788>)
 8010730:	4618      	mov	r0, r3
 8010732:	f005 fd19 	bl	8016168 <strncmp>
 8010736:	4603      	mov	r3, r0
 8010738:	2b00      	cmp	r3, #0
 801073a:	d17d      	bne.n	8010838 <_ZN3BTD8HCI_taskEv+0x7cc>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nXbox One S controller is connecting"), 0x80);
 801073c:	2180      	movs	r1, #128	; 0x80
 801073e:	482e      	ldr	r0, [pc, #184]	; (80107f8 <_ZN3BTD8HCI_taskEv+0x78c>)
 8010740:	f005 fa78 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                        incomingXboxOneS = true;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2201      	movs	r2, #1
 8010748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                                        if(!pairWithHIDDevice) { //If an Xbox One S BT Controller is connecting and it is not in pair mode, check EEPROM for the controller's address
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8010752:	f083 0301 	eor.w	r3, r3, #1
 8010756:	b2db      	uxtb	r3, r3
 8010758:	2b00      	cmp	r3, #0
 801075a:	d068      	beq.n	801082e <_ZN3BTD8HCI_taskEv+0x7c2>
                                                pairedDevice = true;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2201      	movs	r2, #1
 8010760:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                                                for(uint8_t i = 0; i < 6; i++) {
 8010764:	2300      	movs	r3, #0
 8010766:	737b      	strb	r3, [r7, #13]
 8010768:	7b7b      	ldrb	r3, [r7, #13]
 801076a:	2b05      	cmp	r3, #5
 801076c:	d84a      	bhi.n	8010804 <_ZN3BTD8HCI_taskEv+0x798>
                                                        if(disc_bdaddr[i] != EEPROM.read(i)) {
 801076e:	7b7b      	ldrb	r3, [r7, #13]
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	4413      	add	r3, r2
 8010774:	7f1c      	ldrb	r4, [r3, #28]
 8010776:	7b7b      	ldrb	r3, [r7, #13]
 8010778:	4619      	mov	r1, r3
 801077a:	4820      	ldr	r0, [pc, #128]	; (80107fc <_ZN3BTD8HCI_taskEv+0x790>)
 801077c:	f7f0 f9f8 	bl	8000b70 <_ZN11EEPROMClass4readEi>
 8010780:	4603      	mov	r3, r0
 8010782:	429c      	cmp	r4, r3
 8010784:	bf14      	ite	ne
 8010786:	2301      	movne	r3, #1
 8010788:	2300      	moveq	r3, #0
 801078a:	b2db      	uxtb	r3, r3
 801078c:	2b00      	cmp	r3, #0
 801078e:	d008      	beq.n	80107a2 <_ZN3BTD8HCI_taskEv+0x736>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nXbox One S Controller did not match EEPROM"), 0x80);
 8010790:	2180      	movs	r1, #128	; 0x80
 8010792:	481b      	ldr	r0, [pc, #108]	; (8010800 <_ZN3BTD8HCI_taskEv+0x794>)
 8010794:	f005 fa4e 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                                                pairedDevice = false;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2200      	movs	r2, #0
 801079c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                                                                break;
 80107a0:	e030      	b.n	8010804 <_ZN3BTD8HCI_taskEv+0x798>
                                                for(uint8_t i = 0; i < 6; i++) {
 80107a2:	7b7b      	ldrb	r3, [r7, #13]
 80107a4:	3301      	adds	r3, #1
 80107a6:	737b      	strb	r3, [r7, #13]
 80107a8:	e7de      	b.n	8010768 <_ZN3BTD8HCI_taskEv+0x6fc>
 80107aa:	bf00      	nop
 80107ac:	080171a8 	.word	0x080171a8
 80107b0:	080171c0 	.word	0x080171c0
 80107b4:	080171dc 	.word	0x080171dc
 80107b8:	080171f4 	.word	0x080171f4
 80107bc:	08017210 	.word	0x08017210
 80107c0:	08017238 	.word	0x08017238
 80107c4:	08017260 	.word	0x08017260
 80107c8:	08017280 	.word	0x08017280
 80107cc:	08017290 	.word	0x08017290
 80107d0:	0801729c 	.word	0x0801729c
 80107d4:	080172b4 	.word	0x080172b4
 80107d8:	080172cc 	.word	0x080172cc
 80107dc:	080172e8 	.word	0x080172e8
 80107e0:	08017300 	.word	0x08017300
 80107e4:	08017318 	.word	0x08017318
 80107e8:	0801732c 	.word	0x0801732c
 80107ec:	08017344 	.word	0x08017344
 80107f0:	08017358 	.word	0x08017358
 80107f4:	0801737c 	.word	0x0801737c
 80107f8:	08017398 	.word	0x08017398
 80107fc:	20005750 	.word	0x20005750
 8010800:	080173c0 	.word	0x080173c0
                                                        }
                                                }
                                                if(!pairedDevice) {
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801080a:	f083 0301 	eor.w	r3, r3, #1
 801080e:	b2db      	uxtb	r3, r3
 8010810:	2b00      	cmp	r3, #0
 8010812:	d004      	beq.n	801081e <_ZN3BTD8HCI_taskEv+0x7b2>
                                                        hci_state = HCI_SCANNING_STATE;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	220a      	movs	r2, #10
 8010818:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 801081c:	e0f7      	b.n	8010a0e <_ZN3BTD8HCI_taskEv+0x9a2>
                                                        hci_accept_connection();
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f000 fa63 	bl	8010cea <_ZN3BTD21hci_accept_connectionEv>
                                                        hci_state = HCI_CONNECTED_STATE;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	220d      	movs	r2, #13
 8010828:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 801082c:	e0ef      	b.n	8010a0e <_ZN3BTD8HCI_taskEv+0x9a2>
                                                hci_state = HCI_CONNECT_DEVICE_STATE;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2208      	movs	r2, #8
 8010832:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 8010836:	e0ea      	b.n	8010a0e <_ZN3BTD8HCI_taskEv+0x9a2>
                                else if((pairWithWii || pairWithHIDDevice) && checkRemoteName) {
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801083e:	2b00      	cmp	r3, #0
 8010840:	d104      	bne.n	801084c <_ZN3BTD8HCI_taskEv+0x7e0>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8010848:	2b00      	cmp	r3, #0
 801084a:	d009      	beq.n	8010860 <_ZN3BTD8HCI_taskEv+0x7f4>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010852:	2b00      	cmp	r3, #0
 8010854:	d004      	beq.n	8010860 <_ZN3BTD8HCI_taskEv+0x7f4>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2208      	movs	r2, #8
 801085a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 801085e:	e0d6      	b.n	8010a0e <_ZN3BTD8HCI_taskEv+0x9a2>
                                        hci_accept_connection();
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f000 fa42 	bl	8010cea <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	220d      	movs	r2, #13
 801086a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 801086e:	e0ce      	b.n	8010a0e <_ZN3BTD8HCI_taskEv+0x9a2>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010876:	f003 0302 	and.w	r3, r3, #2
 801087a:	2b00      	cmp	r3, #0
 801087c:	f000 80c9 	beq.w	8010a12 <_ZN3BTD8HCI_taskEv+0x9a6>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nConnected to Device: "), 0x80);
 8010880:	2180      	movs	r1, #128	; 0x80
 8010882:	4868      	ldr	r0, [pc, #416]	; (8010a24 <_ZN3BTD8HCI_taskEv+0x9b8>)
 8010884:	f005 f9d6 	bl	8015c34 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 8010888:	2305      	movs	r3, #5
 801088a:	733b      	strb	r3, [r7, #12]
 801088c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010890:	2b00      	cmp	r3, #0
 8010892:	dd13      	ble.n	80108bc <_ZN3BTD8HCI_taskEv+0x850>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
 8010894:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010898:	687a      	ldr	r2, [r7, #4]
 801089a:	4413      	add	r3, r2
 801089c:	7f1b      	ldrb	r3, [r3, #28]
 801089e:	2180      	movs	r1, #128	; 0x80
 80108a0:	4618      	mov	r0, r3
 80108a2:	f001 fa26 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR(":"), 0x80);
 80108a6:	2180      	movs	r1, #128	; 0x80
 80108a8:	485f      	ldr	r0, [pc, #380]	; (8010a28 <_ZN3BTD8HCI_taskEv+0x9bc>)
 80108aa:	f005 f9c3 	bl	8015c34 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 80108ae:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	3b01      	subs	r3, #1
 80108b6:	b2db      	uxtb	r3, r3
 80108b8:	733b      	strb	r3, [r7, #12]
 80108ba:	e7e7      	b.n	801088c <_ZN3BTD8HCI_taskEv+0x820>
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	7f1b      	ldrb	r3, [r3, #28]
 80108c0:	2180      	movs	r1, #128	; 0x80
 80108c2:	4618      	mov	r0, r3
 80108c4:	f001 fa15 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
#endif
                                if(incomingPSController)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d003      	beq.n	80108da <_ZN3BTD8HCI_taskEv+0x86e>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2201      	movs	r2, #1
 80108d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2200      	movs	r2, #0
 80108de:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2200      	movs	r2, #0
 80108e4:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2200      	movs	r2, #0
 80108ea:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2200      	movs	r2, #0
 80108f0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                hci_state = HCI_DONE_STATE;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	220f      	movs	r2, #15
 80108f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 80108fc:	e089      	b.n	8010a12 <_ZN3BTD8HCI_taskEv+0x9a6>

                case HCI_DONE_STATE:
                        hci_counter++;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8010904:	3301      	adds	r3, #1
 8010906:	b29a      	uxth	r2, r3
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8010914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010918:	d97d      	bls.n	8010a16 <_ZN3BTD8HCI_taskEv+0x9aa>
                                hci_counter = 0;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2200      	movs	r2, #0
 801091e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                                hci_state = HCI_SCANNING_STATE;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	220a      	movs	r2, #10
 8010926:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 801092a:	e074      	b.n	8010a16 <_ZN3BTD8HCI_taskEv+0x9aa>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010932:	f003 0304 	and.w	r3, r3, #4
 8010936:	2b00      	cmp	r3, #0
 8010938:	d06f      	beq.n	8010a1a <_ZN3BTD8HCI_taskEv+0x9ae>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
 801093a:	2180      	movs	r1, #128	; 0x80
 801093c:	483b      	ldr	r0, [pc, #236]	; (8010a2c <_ZN3BTD8HCI_taskEv+0x9c0>)
 801093e:	f005 f979 	bl	8015c34 <_Z8E_NotifyPKci>
                                disconnect(); //xbox one bt s <- doesn't work without this!
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f7fe fe62 	bl	800f60c <_ZN3BTD10disconnectEv>
                                              //Need for the controller to be able to reconnect  
#endif
                                hci_event_flag = 0; // Clear all flags
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	33a1      	adds	r3, #161	; 0xa1
 8010954:	2240      	movs	r2, #64	; 0x40
 8010956:	2100      	movs	r1, #0
 8010958:	4618      	mov	r0, r3
 801095a:	f005 fadf 	bl	8015f1c <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	33e1      	adds	r3, #225	; 0xe1
 8010962:	2240      	movs	r2, #64	; 0x40
 8010964:	2100      	movs	r1, #0
 8010966:	4618      	mov	r0, r3
 8010968:	f005 fad8 	bl	8015f1c <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2200      	movs	r2, #0
 8010970:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2200      	movs	r2, #0
 8010990:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                                incomingPSController = false;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2200      	movs	r2, #0
 80109bc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                                incomingXboxOneS = false;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2200      	movs	r2, #0
 80109c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                                hci_state = HCI_SCANNING_STATE;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	220a      	movs	r2, #10
 80109cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 80109d0:	e023      	b.n	8010a1a <_ZN3BTD8HCI_taskEv+0x9ae>

                default:
                        break;
 80109d2:	bf00      	nop
 80109d4:	e022      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80109d6:	bf00      	nop
 80109d8:	e020      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80109da:	bf00      	nop
 80109dc:	e01e      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80109de:	bf00      	nop
 80109e0:	e01c      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80109e2:	bf00      	nop
 80109e4:	e01a      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80109e6:	bf00      	nop
 80109e8:	e018      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80109ea:	bf00      	nop
 80109ec:	e016      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80109ee:	bf00      	nop
 80109f0:	e014      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80109f2:	bf00      	nop
 80109f4:	e012      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80109f6:	bf00      	nop
 80109f8:	e010      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80109fa:	bf00      	nop
 80109fc:	e00e      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80109fe:	bf00      	nop
 8010a00:	e00c      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 8010a02:	bf00      	nop
 8010a04:	e00a      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 8010a06:	bf00      	nop
 8010a08:	e008      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 8010a0a:	bf00      	nop
 8010a0c:	e006      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 8010a0e:	bf00      	nop
 8010a10:	e004      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 8010a12:	bf00      	nop
 8010a14:	e002      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 8010a16:	bf00      	nop
 8010a18:	e000      	b.n	8010a1c <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 8010a1a:	bf00      	nop
        }
}
 8010a1c:	bf00      	nop
 8010a1e:	3714      	adds	r7, #20
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd90      	pop	{r4, r7, pc}
 8010a24:	080173f0 	.word	0x080173f0
 8010a28:	08016c18 	.word	0x08016c18
 8010a2c:	08017408 	.word	0x08017408

08010a30 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 8010a30:	b5b0      	push	{r4, r5, r7, lr}
 8010a32:	b086      	sub	sp, #24
 8010a34:	af02      	add	r7, sp, #8
 8010a36:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 8010a38:	2340      	movs	r3, #64	; 0x40
 8010a3a:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f893 406f 	ldrb.w	r4, [r3, #111]	; 0x6f
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	33e1      	adds	r3, #225	; 0xe1
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
 8010a56:	f107 050a 	add.w	r5, r7, #10
 8010a5a:	9201      	str	r2, [sp, #4]
 8010a5c:	9300      	str	r3, [sp, #0]
 8010a5e:	462b      	mov	r3, r5
 8010a60:	4622      	mov	r2, r4
 8010a62:	f003 fb19 	bl	8014098 <_ZN3USB10inTransferEhhPtPhh>
 8010a66:	4603      	mov	r3, r0
 8010a68:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 8010a6a:	7b7b      	ldrb	r3, [r7, #13]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d125      	bne.n	8010abc <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 8010a70:	897b      	ldrh	r3, [r7, #10]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d022      	beq.n	8010abc <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8010a76:	2300      	movs	r3, #0
 8010a78:	73fb      	strb	r3, [r7, #15]
 8010a7a:	7bfb      	ldrb	r3, [r7, #15]
 8010a7c:	2b03      	cmp	r3, #3
 8010a7e:	d81d      	bhi.n	8010abc <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 8010a80:	7bfb      	ldrb	r3, [r7, #15]
 8010a82:	687a      	ldr	r2, [r7, #4]
 8010a84:	331e      	adds	r3, #30
 8010a86:	009b      	lsls	r3, r3, #2
 8010a88:	4413      	add	r3, r2
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d011      	beq.n	8010ab4 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 8010a90:	7bfb      	ldrb	r3, [r7, #15]
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	331e      	adds	r3, #30
 8010a96:	009b      	lsls	r3, r3, #2
 8010a98:	4413      	add	r3, r2
 8010a9a:	6858      	ldr	r0, [r3, #4]
 8010a9c:	7bfb      	ldrb	r3, [r7, #15]
 8010a9e:	687a      	ldr	r2, [r7, #4]
 8010aa0:	331e      	adds	r3, #30
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	4413      	add	r3, r2
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	687a      	ldr	r2, [r7, #4]
 8010aae:	32e1      	adds	r2, #225	; 0xe1
 8010ab0:	4611      	mov	r1, r2
 8010ab2:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8010ab4:	7bfb      	ldrb	r3, [r7, #15]
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	73fb      	strb	r3, [r7, #15]
 8010aba:	e7de      	b.n	8010a7a <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 8010abc:	2300      	movs	r3, #0
 8010abe:	73bb      	strb	r3, [r7, #14]
 8010ac0:	7bbb      	ldrb	r3, [r7, #14]
 8010ac2:	2b03      	cmp	r3, #3
 8010ac4:	d81c      	bhi.n	8010b00 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 8010ac6:	7bbb      	ldrb	r3, [r7, #14]
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	331e      	adds	r3, #30
 8010acc:	009b      	lsls	r3, r3, #2
 8010ace:	4413      	add	r3, r2
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d010      	beq.n	8010af8 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 8010ad6:	7bbb      	ldrb	r3, [r7, #14]
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	331e      	adds	r3, #30
 8010adc:	009b      	lsls	r3, r3, #2
 8010ade:	4413      	add	r3, r2
 8010ae0:	6859      	ldr	r1, [r3, #4]
 8010ae2:	7bbb      	ldrb	r3, [r7, #14]
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	331e      	adds	r3, #30
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	4413      	add	r3, r2
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	3304      	adds	r3, #4
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4608      	mov	r0, r1
 8010af6:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 8010af8:	7bbb      	ldrb	r3, [r7, #14]
 8010afa:	3301      	adds	r3, #1
 8010afc:	73bb      	strb	r3, [r7, #14]
 8010afe:	e7df      	b.n	8010ac0 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 8010b00:	bf00      	nop
 8010b02:	3710      	adds	r7, #16
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bdb0      	pop	{r4, r5, r7, pc}

08010b08 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b08c      	sub	sp, #48	; 0x30
 8010b0c:	af08      	add	r7, sp, #32
 8010b0e:	60f8      	str	r0, [r7, #12]
 8010b10:	60b9      	str	r1, [r7, #8]
 8010b12:	4613      	mov	r3, r2
 8010b14:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010b1c:	f023 0301 	bic.w	r3, r3, #1
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8010b38:	2300      	movs	r3, #0
 8010b3a:	9307      	str	r3, [sp, #28]
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	9306      	str	r3, [sp, #24]
 8010b40:	88fb      	ldrh	r3, [r7, #6]
 8010b42:	9305      	str	r3, [sp, #20]
 8010b44:	88fb      	ldrh	r3, [r7, #6]
 8010b46:	9304      	str	r3, [sp, #16]
 8010b48:	2300      	movs	r3, #0
 8010b4a:	9303      	str	r3, [sp, #12]
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	9302      	str	r3, [sp, #8]
 8010b50:	2300      	movs	r3, #0
 8010b52:	9301      	str	r3, [sp, #4]
 8010b54:	2300      	movs	r3, #0
 8010b56:	9300      	str	r3, [sp, #0]
 8010b58:	2320      	movs	r3, #32
 8010b5a:	f003 f9c4 	bl	8013ee6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 8010b5e:	bf00      	nop
 8010b60:	3710      	adds	r7, #16
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b082      	sub	sp, #8
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2200      	movs	r2, #0
 8010b72:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x03; // HCI OCF = 3
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2203      	movs	r2, #3
 8010b7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	220c      	movs	r2, #12
 8010b82:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x00;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

        HCI_Command(hcibuf, 3);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	33a1      	adds	r3, #161	; 0xa1
 8010b92:	2203      	movs	r2, #3
 8010b94:	4619      	mov	r1, r3
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f7ff ffb6 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8010b9c:	bf00      	nop
 8010b9e:	3708      	adds	r7, #8
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010bb2:	f023 0310 	bic.w	r3, r3, #16
 8010bb6:	b29a      	uxth	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	221a      	movs	r2, #26
 8010bc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	220c      	movs	r2, #12
 8010bca:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x01; // parameter length = 1
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        if(btdName != NULL)
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	68db      	ldr	r3, [r3, #12]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d004      	beq.n	8010be8 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2203      	movs	r2, #3
 8010be2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8010be6:	e003      	b.n	8010bf0 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2202      	movs	r2, #2
 8010bec:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

        HCI_Command(hcibuf, 4);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	33a1      	adds	r3, #161	; 0xa1
 8010bf4:	2204      	movs	r2, #4
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f7ff ff85 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8010bfe:	bf00      	nop
 8010c00:	3708      	adds	r7, #8
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}

08010c06 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 8010c06:	b580      	push	{r7, lr}
 8010c08:	b082      	sub	sp, #8
 8010c0a:	af00      	add	r7, sp, #0
 8010c0c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010c14:	f023 0320 	bic.w	r3, r3, #32
 8010c18:	b29a      	uxth	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x09; // HCI OCF = 9
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2209      	movs	r2, #9
 8010c24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2210      	movs	r2, #16
 8010c2c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x00;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2200      	movs	r2, #0
 8010c34:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

        HCI_Command(hcibuf, 3);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	33a1      	adds	r3, #161	; 0xa1
 8010c3c:	2203      	movs	r2, #3
 8010c3e:	4619      	mov	r1, r3
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7ff ff61 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8010c46:	bf00      	nop
 8010c48:	3708      	adds	r7, #8
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}

08010c4e <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b082      	sub	sp, #8
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c60:	b29a      	uxth	r2, r3
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x01; // HCI OCF = 1
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2210      	movs	r2, #16
 8010c74:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x00;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

        HCI_Command(hcibuf, 3);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	33a1      	adds	r3, #161	; 0xa1
 8010c84:	2203      	movs	r2, #3
 8010c86:	4619      	mov	r1, r3
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f7ff ff3d 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8010c8e:	bf00      	nop
 8010c90:	3708      	adds	r7, #8
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b082      	sub	sp, #8
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6078      	str	r0, [r7, #4]
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010cac:	b29a      	uxth	r2, r3
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x04; // HCI OCF = 4
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2204      	movs	r2, #4
 8010cb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2210      	movs	r2, #16
 8010cc0:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x01; // parameter length = 1
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = page_number;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	78fa      	ldrb	r2, [r7, #3]
 8010cd0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

        HCI_Command(hcibuf, 4);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	33a1      	adds	r3, #161	; 0xa1
 8010cd8:	2204      	movs	r2, #4
 8010cda:	4619      	mov	r1, r3
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f7ff ff13 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8010ce2:	bf00      	nop
 8010ce4:	3708      	adds	r7, #8
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}

08010cea <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 8010cea:	b580      	push	{r7, lr}
 8010cec:	b082      	sub	sp, #8
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010cf8:	f023 0302 	bic.w	r3, r3, #2
 8010cfc:	b29a      	uxth	r2, r3
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x09; // HCI OCF = 9
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2209      	movs	r2, #9
 8010d08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2204      	movs	r2, #4
 8010d10:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x07; // parameter length 7
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2207      	movs	r2, #7
 8010d18:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	7f1a      	ldrb	r2, [r3, #28]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	7f5a      	ldrb	r2, [r3, #29]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	7f9a      	ldrb	r2, [r3, #30]
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	7fda      	ldrb	r2, [r3, #31]
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0x00; // Switch role to master
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

        HCI_Command(hcibuf, 10);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	33a1      	adds	r3, #161	; 0xa1
 8010d68:	220a      	movs	r2, #10
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f7ff fecb 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8010d72:	bf00      	nop
 8010d74:	3708      	adds	r7, #8
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}

08010d7a <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b082      	sub	sp, #8
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010d88:	f023 0308 	bic.w	r3, r3, #8
 8010d8c:	b29a      	uxth	r2, r3
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x19; // HCI OCF = 19
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2219      	movs	r2, #25
 8010d98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2204      	movs	r2, #4
 8010da0:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x0A; // parameter length = 10
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	220a      	movs	r2, #10
 8010da8:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	7f1a      	ldrb	r2, [r3, #28]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	7f5a      	ldrb	r2, [r3, #29]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	7f9a      	ldrb	r2, [r3, #30]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	7fda      	ldrb	r2, [r3, #31]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2201      	movs	r2, #1
 8010df0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = 0x00; // Reserved
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2200      	movs	r2, #0
 8010df8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
        hcibuf[11] = 0x00; // Clock offset - low byte
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        hcibuf[12] = 0x00; // Clock offset - high byte
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad

        HCI_Command(hcibuf, 13);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	33a1      	adds	r3, #161	; 0xa1
 8010e10:	220d      	movs	r2, #13
 8010e12:	4619      	mov	r1, r3
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f7ff fe77 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8010e1a:	bf00      	nop
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}

08010e22 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 8010e22:	b590      	push	{r4, r7, lr}
 8010e24:	b085      	sub	sp, #20
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	6078      	str	r0, [r7, #4]
 8010e2a:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2213      	movs	r2, #19
 8010e30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	220c      	movs	r2, #12
 8010e38:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 8010e3c:	6838      	ldr	r0, [r7, #0]
 8010e3e:	f7ef f9e7 	bl	8000210 <strlen>
 8010e42:	4603      	mov	r3, r0
 8010e44:	b2db      	uxtb	r3, r3
 8010e46:	3301      	adds	r3, #1
 8010e48:	b2da      	uxtb	r2, r3
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 8010e50:	2300      	movs	r3, #0
 8010e52:	73fb      	strb	r3, [r7, #15]
 8010e54:	7bfc      	ldrb	r4, [r7, #15]
 8010e56:	6838      	ldr	r0, [r7, #0]
 8010e58:	f7ef f9da 	bl	8000210 <strlen>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	429c      	cmp	r4, r3
 8010e60:	d20e      	bcs.n	8010e80 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 8010e62:	7bfb      	ldrb	r3, [r7, #15]
 8010e64:	683a      	ldr	r2, [r7, #0]
 8010e66:	441a      	add	r2, r3
 8010e68:	7bfb      	ldrb	r3, [r7, #15]
 8010e6a:	3303      	adds	r3, #3
 8010e6c:	7811      	ldrb	r1, [r2, #0]
 8010e6e:	687a      	ldr	r2, [r7, #4]
 8010e70:	4413      	add	r3, r2
 8010e72:	460a      	mov	r2, r1
 8010e74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        for(i = 0; i < strlen(name); i++)
 8010e78:	7bfb      	ldrb	r3, [r7, #15]
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	73fb      	strb	r3, [r7, #15]
 8010e7e:	e7e9      	b.n	8010e54 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 8010e80:	7bfb      	ldrb	r3, [r7, #15]
 8010e82:	3303      	adds	r3, #3
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	4413      	add	r3, r2
 8010e88:	2200      	movs	r2, #0
 8010e8a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

        HCI_Command(hcibuf, 4 + strlen(name));
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f103 04a1 	add.w	r4, r3, #161	; 0xa1
 8010e94:	6838      	ldr	r0, [r7, #0]
 8010e96:	f7ef f9bb 	bl	8000210 <strlen>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	3304      	adds	r3, #4
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	4621      	mov	r1, r4
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f7ff fe2e 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8010eac:	bf00      	nop
 8010eae:	3714      	adds	r7, #20
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd90      	pop	{r4, r7, pc}

08010eb4 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2201      	movs	r2, #1
 8010ec0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	220c      	movs	r2, #12
 8010ec8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x08;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2208      	movs	r2, #8
 8010ed0:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	22ff      	movs	r2, #255	; 0xff
 8010ed8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = 0xFF;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	22ff      	movs	r2, #255	; 0xff
 8010ee0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = 0xFF;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	22ff      	movs	r2, #255	; 0xff
 8010ee8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = 0xFF;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	22ff      	movs	r2, #255	; 0xff
 8010ef0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = 0xFF;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	22ff      	movs	r2, #255	; 0xff
 8010ef8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = 0x1F;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	221f      	movs	r2, #31
 8010f00:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	22ff      	movs	r2, #255	; 0xff
 8010f08:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = 0x00;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab

        HCI_Command(hcibuf, 11);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	33a1      	adds	r3, #161	; 0xa1
 8010f18:	220b      	movs	r2, #11
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f7ff fdf3 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8010f22:	bf00      	nop
 8010f24:	3708      	adds	r7, #8
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}

08010f2a <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 8010f2a:	b580      	push	{r7, lr}
 8010f2c:	b082      	sub	sp, #8
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	6078      	str	r0, [r7, #4]
 8010f32:	460b      	mov	r3, r1
 8010f34:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2256      	movs	r2, #86	; 0x56
 8010f3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	220c      	movs	r2, #12
 8010f42:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 1; // parameter length = 1
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = enable ? 1 : 0;
 8010f4e:	78fb      	ldrb	r3, [r7, #3]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d001      	beq.n	8010f58 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 8010f54:	2201      	movs	r2, #1
 8010f56:	e000      	b.n	8010f5a <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 8010f58:	2200      	movs	r2, #0
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

        HCI_Command(hcibuf, 4);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	33a1      	adds	r3, #161	; 0xa1
 8010f64:	2204      	movs	r2, #4
 8010f66:	4619      	mov	r1, r3
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f7ff fdcd 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8010f6e:	bf00      	nop
 8010f70:	3708      	adds	r7, #8
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}

08010f76 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b082      	sub	sp, #8
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f88:	b29a      	uxth	r2, r3
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x01;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2201      	movs	r2, #1
 8010f94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2204      	movs	r2, #4
 8010f9c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2205      	movs	r2, #5
 8010fa4:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2233      	movs	r2, #51	; 0x33
 8010fac:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = 0x8B;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	228b      	movs	r2, #139	; 0x8b
 8010fb4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = 0x9E;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	229e      	movs	r2, #158	; 0x9e
 8010fbc:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2230      	movs	r2, #48	; 0x30
 8010fc4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = 0x0A; // 10 number of responses
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	220a      	movs	r2, #10
 8010fcc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

        HCI_Command(hcibuf, 8);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	33a1      	adds	r3, #161	; 0xa1
 8010fd4:	2208      	movs	r2, #8
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f7ff fd95 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8010fde:	bf00      	nop
 8010fe0:	3708      	adds	r7, #8
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}

08010fe6 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 8010fe6:	b580      	push	{r7, lr}
 8010fe8:	b082      	sub	sp, #8
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2202      	movs	r2, #2
 8010ff2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2204      	movs	r2, #4
 8010ffa:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2200      	movs	r2, #0
 8011002:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

        HCI_Command(hcibuf, 3);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	33a1      	adds	r3, #161	; 0xa1
 801100a:	2203      	movs	r2, #3
 801100c:	4619      	mov	r1, r3
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f7ff fd7a 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8011014:	bf00      	nop
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	331c      	adds	r3, #28
 8011028:	4619      	mov	r1, r3
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f000 f804 	bl	8011038 <_ZN3BTD11hci_connectEPh>
}
 8011030:	bf00      	nop
 8011032:	3708      	adds	r7, #8
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8011048:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 801104c:	b29a      	uxth	r2, r3
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x05; // HCI OCF = 5
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2205      	movs	r2, #5
 8011058:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2204      	movs	r2, #4
 8011060:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	220d      	movs	r2, #13
 8011068:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	781a      	ldrb	r2, [r3, #0]
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = bdaddr[1];
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	785a      	ldrb	r2, [r3, #1]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = bdaddr[2];
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	789a      	ldrb	r2, [r3, #2]
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = bdaddr[3];
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	78da      	ldrb	r2, [r3, #3]
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = bdaddr[4];
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	791a      	ldrb	r2, [r3, #4]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = bdaddr[5];
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	795a      	ldrb	r2, [r3, #5]
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2218      	movs	r2, #24
 80110ac:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	22cc      	movs	r2, #204	; 0xcc
 80110b4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
        hcibuf[11] = 0x01; // Page repetition mode R1
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2201      	movs	r2, #1
 80110bc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        hcibuf[12] = 0x00; // Reserved
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2200      	movs	r2, #0
 80110c4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
        hcibuf[13] = 0x00; // Clock offset
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2200      	movs	r2, #0
 80110cc:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
        hcibuf[14] = 0x00; // Invalid clock offset
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2200      	movs	r2, #0
 80110d4:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
        hcibuf[15] = 0x00; // Do not allow role switch
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2200      	movs	r2, #0
 80110dc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

        HCI_Command(hcibuf, 16);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	33a1      	adds	r3, #161	; 0xa1
 80110e4:	2210      	movs	r2, #16
 80110e6:	4619      	mov	r1, r3
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f7ff fd0d 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 80110ee:	bf00      	nop
 80110f0:	3708      	adds	r7, #8
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
	...

080110f8 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 80110f8:	b590      	push	{r4, r7, lr}
 80110fa:	b085      	sub	sp, #20
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	220d      	movs	r2, #13
 8011104:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2204      	movs	r2, #4
 801110c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x17; // parameter length 23
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2217      	movs	r2, #23
 8011114:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	7f1a      	ldrb	r2, [r3, #28]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	7f5a      	ldrb	r2, [r3, #29]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	7f9a      	ldrb	r2, [r3, #30]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	7fda      	ldrb	r2, [r3, #31]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f893 2020 	ldrb.w	r2, [r3, #32]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        if(pairWithWii) {
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801115e:	2b00      	cmp	r3, #0
 8011160:	d043      	beq.n	80111ea <_ZN3BTD26hci_pin_code_request_replyEv+0xf2>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2206      	movs	r2, #6
 8011166:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                if(pairWiiUsingSync) {
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8011170:	2b00      	cmp	r3, #0
 8011172:	d017      	beq.n	80111a4 <_ZN3BTD26hci_pin_code_request_replyEv+0xac>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
 8011174:	2180      	movs	r1, #128	; 0x80
 8011176:	483c      	ldr	r0, [pc, #240]	; (8011268 <_ZN3BTD26hci_pin_code_request_replyEv+0x170>)
 8011178:	f004 fd5c 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                        for(uint8_t i = 0; i < 6; i++)
 801117c:	2300      	movs	r3, #0
 801117e:	73fb      	strb	r3, [r7, #15]
 8011180:	7bfb      	ldrb	r3, [r7, #15]
 8011182:	2b05      	cmp	r3, #5
 8011184:	d822      	bhi.n	80111cc <_ZN3BTD26hci_pin_code_request_replyEv+0xd4>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 8011186:	7bfa      	ldrb	r2, [r7, #15]
 8011188:	7bfb      	ldrb	r3, [r7, #15]
 801118a:	330a      	adds	r3, #10
 801118c:	6879      	ldr	r1, [r7, #4]
 801118e:	440a      	add	r2, r1
 8011190:	7d11      	ldrb	r1, [r2, #20]
 8011192:	687a      	ldr	r2, [r7, #4]
 8011194:	4413      	add	r3, r2
 8011196:	460a      	mov	r2, r1
 8011198:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                        for(uint8_t i = 0; i < 6; i++)
 801119c:	7bfb      	ldrb	r3, [r7, #15]
 801119e:	3301      	adds	r3, #1
 80111a0:	73fb      	strb	r3, [r7, #15]
 80111a2:	e7ed      	b.n	8011180 <_ZN3BTD26hci_pin_code_request_replyEv+0x88>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 80111a4:	2300      	movs	r3, #0
 80111a6:	73bb      	strb	r3, [r7, #14]
 80111a8:	7bbb      	ldrb	r3, [r7, #14]
 80111aa:	2b05      	cmp	r3, #5
 80111ac:	d80e      	bhi.n	80111cc <_ZN3BTD26hci_pin_code_request_replyEv+0xd4>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 80111ae:	7bba      	ldrb	r2, [r7, #14]
 80111b0:	7bbb      	ldrb	r3, [r7, #14]
 80111b2:	330a      	adds	r3, #10
 80111b4:	6879      	ldr	r1, [r7, #4]
 80111b6:	440a      	add	r2, r1
 80111b8:	7f11      	ldrb	r1, [r2, #28]
 80111ba:	687a      	ldr	r2, [r7, #4]
 80111bc:	4413      	add	r3, r2
 80111be:	460a      	mov	r2, r1
 80111c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                        for(uint8_t i = 0; i < 6; i++)
 80111c4:	7bbb      	ldrb	r3, [r7, #14]
 80111c6:	3301      	adds	r3, #1
 80111c8:	73bb      	strb	r3, [r7, #14]
 80111ca:	e7ed      	b.n	80111a8 <_ZN3BTD26hci_pin_code_request_replyEv+0xb0>
                }
                for(uint8_t i = 16; i < 26; i++)
 80111cc:	2310      	movs	r3, #16
 80111ce:	737b      	strb	r3, [r7, #13]
 80111d0:	7b7b      	ldrb	r3, [r7, #13]
 80111d2:	2b19      	cmp	r3, #25
 80111d4:	d83c      	bhi.n	8011250 <_ZN3BTD26hci_pin_code_request_replyEv+0x158>
                        hcibuf[i] = 0x00; // The rest should be 0
 80111d6:	7b7b      	ldrb	r3, [r7, #13]
 80111d8:	687a      	ldr	r2, [r7, #4]
 80111da:	4413      	add	r3, r2
 80111dc:	2200      	movs	r2, #0
 80111de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                for(uint8_t i = 16; i < 26; i++)
 80111e2:	7b7b      	ldrb	r3, [r7, #13]
 80111e4:	3301      	adds	r3, #1
 80111e6:	737b      	strb	r3, [r7, #13]
 80111e8:	e7f2      	b.n	80111d0 <_ZN3BTD26hci_pin_code_request_replyEv+0xd8>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	691b      	ldr	r3, [r3, #16]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7ef f80e 	bl	8000210 <strlen>
 80111f4:	4603      	mov	r3, r0
 80111f6:	b2da      	uxtb	r2, r3
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 80111fe:	2300      	movs	r3, #0
 8011200:	733b      	strb	r3, [r7, #12]
 8011202:	7b3c      	ldrb	r4, [r7, #12]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	691b      	ldr	r3, [r3, #16]
 8011208:	4618      	mov	r0, r3
 801120a:	f7ef f801 	bl	8000210 <strlen>
 801120e:	4603      	mov	r3, r0
 8011210:	429c      	cmp	r4, r3
 8011212:	d20f      	bcs.n	8011234 <_ZN3BTD26hci_pin_code_request_replyEv+0x13c>
                        hcibuf[i + 10] = btdPin[i];
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	691a      	ldr	r2, [r3, #16]
 8011218:	7b3b      	ldrb	r3, [r7, #12]
 801121a:	441a      	add	r2, r3
 801121c:	7b3b      	ldrb	r3, [r7, #12]
 801121e:	330a      	adds	r3, #10
 8011220:	7811      	ldrb	r1, [r2, #0]
 8011222:	687a      	ldr	r2, [r7, #4]
 8011224:	4413      	add	r3, r2
 8011226:	460a      	mov	r2, r1
 8011228:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 801122c:	7b3b      	ldrb	r3, [r7, #12]
 801122e:	3301      	adds	r3, #1
 8011230:	733b      	strb	r3, [r7, #12]
 8011232:	e7e6      	b.n	8011202 <_ZN3BTD26hci_pin_code_request_replyEv+0x10a>
                for(; i < 16; i++)
 8011234:	7b3b      	ldrb	r3, [r7, #12]
 8011236:	2b0f      	cmp	r3, #15
 8011238:	d80a      	bhi.n	8011250 <_ZN3BTD26hci_pin_code_request_replyEv+0x158>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 801123a:	7b3b      	ldrb	r3, [r7, #12]
 801123c:	330a      	adds	r3, #10
 801123e:	687a      	ldr	r2, [r7, #4]
 8011240:	4413      	add	r3, r2
 8011242:	2200      	movs	r2, #0
 8011244:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                for(; i < 16; i++)
 8011248:	7b3b      	ldrb	r3, [r7, #12]
 801124a:	3301      	adds	r3, #1
 801124c:	733b      	strb	r3, [r7, #12]
 801124e:	e7f1      	b.n	8011234 <_ZN3BTD26hci_pin_code_request_replyEv+0x13c>
        }

        HCI_Command(hcibuf, 26);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	33a1      	adds	r3, #161	; 0xa1
 8011254:	221a      	movs	r2, #26
 8011256:	4619      	mov	r1, r3
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f7ff fc55 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 801125e:	bf00      	nop
 8011260:	3714      	adds	r7, #20
 8011262:	46bd      	mov	sp, r7
 8011264:	bd90      	pop	{r4, r7, pc}
 8011266:	bf00      	nop
 8011268:	08017428 	.word	0x08017428

0801126c <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	220e      	movs	r2, #14
 8011278:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2204      	movs	r2, #4
 8011280:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x06; // parameter length 6
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2206      	movs	r2, #6
 8011288:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	7f1a      	ldrb	r2, [r3, #28]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	7f5a      	ldrb	r2, [r3, #29]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	7f9a      	ldrb	r2, [r3, #30]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	7fda      	ldrb	r2, [r3, #31]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

        HCI_Command(hcibuf, 9);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	33a1      	adds	r3, #161	; 0xa1
 80112d0:	2209      	movs	r2, #9
 80112d2:	4619      	mov	r1, r3
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f7ff fc17 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 80112da:	bf00      	nop
 80112dc:	3708      	adds	r7, #8
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}

080112e2 <_ZN3BTD26hci_link_key_request_replyEv>:

void BTD::hci_link_key_request_reply() {
 80112e2:	b580      	push	{r7, lr}
 80112e4:	b082      	sub	sp, #8
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0B; // HCI OCF = 0B
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	220b      	movs	r2, #11
 80112ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2204      	movs	r2, #4
 80112f6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x16; // parameter length 22
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2216      	movs	r2, #22
 80112fe:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        //for(uint8_t i = 0; i < 6; i++) hcibuf[i + 3] = disc_bdaddr[i]; // 6 octet bdaddr
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	7f1a      	ldrb	r2, [r3, #28]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	7f5a      	ldrb	r2, [r3, #29]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	7f9a      	ldrb	r2, [r3, #30]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	7fda      	ldrb	r2, [r3, #31]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        //for(uint8_t i = 0; i < 16; i++) hcibuf[i + 9] = link_key[i]; // 16 octet link_key
        hcibuf[9] = link_key[0]; // 16 octet link_key
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = link_key[1];
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
        hcibuf[11] = link_key[2];
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        hcibuf[12] = link_key[3];
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
        hcibuf[13] = link_key[4];
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
        hcibuf[14] = link_key[5];
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
        hcibuf[15] = link_key[6];
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
        hcibuf[16] = link_key[7];
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
        hcibuf[17] = link_key[8];
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
        hcibuf[18] = link_key[9];
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
        hcibuf[19] = link_key[10];
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
        hcibuf[20] = link_key[11];
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
        hcibuf[21] = link_key[12];
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
        hcibuf[22] = link_key[13];
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
        hcibuf[23] = link_key[14];
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        hcibuf[24] = link_key[15];
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

        HCI_Command(hcibuf, 25);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	33a1      	adds	r3, #161	; 0xa1
 8011406:	2219      	movs	r2, #25
 8011408:	4619      	mov	r1, r3
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f7ff fb7c 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8011410:	bf00      	nop
 8011412:	3708      	adds	r7, #8
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}

08011418 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 8011418:	b580      	push	{r7, lr}
 801141a:	b082      	sub	sp, #8
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	220c      	movs	r2, #12
 8011424:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2204      	movs	r2, #4
 801142c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x06; // parameter length 6
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2206      	movs	r2, #6
 8011434:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	7f1a      	ldrb	r2, [r3, #28]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	7f5a      	ldrb	r2, [r3, #29]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	7f9a      	ldrb	r2, [r3, #30]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	7fda      	ldrb	r2, [r3, #31]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f893 2020 	ldrb.w	r2, [r3, #32]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

        HCI_Command(hcibuf, 9);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	33a1      	adds	r3, #161	; 0xa1
 801147c:	2209      	movs	r2, #9
 801147e:	4619      	mov	r1, r3
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7ff fb41 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8011486:	bf00      	nop
 8011488:	3708      	adds	r7, #8
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}

0801148e <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 801148e:	b580      	push	{r7, lr}
 8011490:	b082      	sub	sp, #8
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	222b      	movs	r2, #43	; 0x2b
 801149a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2204      	movs	r2, #4
 80114a2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x09;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2209      	movs	r2, #9
 80114aa:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	7f1a      	ldrb	r2, [r3, #28]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	7f5a      	ldrb	r2, [r3, #29]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	7f9a      	ldrb	r2, [r3, #30]
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	7fda      	ldrb	r2, [r3, #31]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f893 2020 	ldrb.w	r2, [r3, #32]
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0x03; // NoInputNoOutput
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2203      	movs	r2, #3
 80114f2:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = 0x00; // OOB authentication data not present
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2200      	movs	r2, #0
 80114fa:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	2200      	movs	r2, #0
 8011502:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

        HCI_Command(hcibuf, 12);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	33a1      	adds	r3, #161	; 0xa1
 801150a:	220c      	movs	r2, #12
 801150c:	4619      	mov	r1, r3
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f7ff fafa 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8011514:	bf00      	nop
 8011516:	3708      	adds	r7, #8
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}

0801151c <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	222c      	movs	r2, #44	; 0x2c
 8011528:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2204      	movs	r2, #4
 8011530:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x06; // parameter length 6
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2206      	movs	r2, #6
 8011538:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	7f1a      	ldrb	r2, [r3, #28]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	7f5a      	ldrb	r2, [r3, #29]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	7f9a      	ldrb	r2, [r3, #30]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	7fda      	ldrb	r2, [r3, #31]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f893 2020 	ldrb.w	r2, [r3, #32]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

        HCI_Command(hcibuf, 9);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	33a1      	adds	r3, #161	; 0xa1
 8011580:	2209      	movs	r2, #9
 8011582:	4619      	mov	r1, r3
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f7ff fabf 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 801158a:	bf00      	nop
 801158c:	3708      	adds	r7, #8
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}

08011592 <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 8011592:	b580      	push	{r7, lr}
 8011594:	b082      	sub	sp, #8
 8011596:	af00      	add	r7, sp, #0
 8011598:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2211      	movs	r2, #17
 801159e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2204      	movs	r2, #4
 80115a6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x02; // parameter length = 2
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2202      	movs	r2, #2
 80115ae:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	8b5b      	ldrh	r3, [r3, #26]
 80115b6:	b2da      	uxtb	r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	8b5b      	ldrh	r3, [r3, #26]
 80115c2:	121b      	asrs	r3, r3, #8
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	f003 030f 	and.w	r3, r3, #15
 80115ca:	b2da      	uxtb	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

        HCI_Command(hcibuf, 5);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	33a1      	adds	r3, #161	; 0xa1
 80115d6:	2205      	movs	r2, #5
 80115d8:	4619      	mov	r1, r3
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f7ff fa94 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 80115e0:	bf00      	nop
 80115e2:	3708      	adds	r7, #8
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	460b      	mov	r3, r1
 80115f2:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80115fa:	f023 0304 	bic.w	r3, r3, #4
 80115fe:	b29a      	uxth	r2, r3
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x06; // HCI OCF = 6
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2206      	movs	r2, #6
 801160a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2204      	movs	r2, #4
 8011612:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x03; // parameter length = 3
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2203      	movs	r2, #3
 801161a:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 801161e:	887b      	ldrh	r3, [r7, #2]
 8011620:	b2da      	uxtb	r2, r3
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 8011628:	887b      	ldrh	r3, [r7, #2]
 801162a:	121b      	asrs	r3, r3, #8
 801162c:	b2db      	uxtb	r3, r3
 801162e:	f003 030f 	and.w	r3, r3, #15
 8011632:	b2da      	uxtb	r2, r3
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = 0x13; // reason
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2213      	movs	r2, #19
 801163e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

        HCI_Command(hcibuf, 6);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	33a1      	adds	r3, #161	; 0xa1
 8011646:	2206      	movs	r2, #6
 8011648:	4619      	mov	r1, r3
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f7ff fa5c 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 8011650:	bf00      	nop
 8011652:	3708      	adds	r7, #8
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2224      	movs	r2, #36	; 0x24
 8011664:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	220c      	movs	r2, #12
 801166c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x03; // parameter length = 3
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2203      	movs	r2, #3
 8011674:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = 0x04; // Robot
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2204      	movs	r2, #4
 801167c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = 0x08; // Toy
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2208      	movs	r2, #8
 8011684:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = 0x00;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2200      	movs	r2, #0
 801168c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

        HCI_Command(hcibuf, 6);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	33a1      	adds	r3, #161	; 0xa1
 8011694:	2206      	movs	r2, #6
 8011696:	4619      	mov	r1, r3
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f7ff fa35 	bl	8010b08 <_ZN3BTD11HCI_CommandEPht>
}
 801169e:	bf00      	nop
 80116a0:	3708      	adds	r7, #8
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
	...

080116a8 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 80116a8:	b5b0      	push	{r4, r5, r7, lr}
 80116aa:	b08a      	sub	sp, #40	; 0x28
 80116ac:	af02      	add	r7, sp, #8
 80116ae:	60f8      	str	r0, [r7, #12]
 80116b0:	607a      	str	r2, [r7, #4]
 80116b2:	461a      	mov	r2, r3
 80116b4:	460b      	mov	r3, r1
 80116b6:	817b      	strh	r3, [r7, #10]
 80116b8:	4613      	mov	r3, r2
 80116ba:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 80116bc:	466b      	mov	r3, sp
 80116be:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 80116c0:	7a7b      	ldrb	r3, [r7, #9]
 80116c2:	1ddc      	adds	r4, r3, #7
 80116c4:	61bc      	str	r4, [r7, #24]
 80116c6:	4623      	mov	r3, r4
 80116c8:	3301      	adds	r3, #1
 80116ca:	4618      	mov	r0, r3
 80116cc:	f04f 0100 	mov.w	r1, #0
 80116d0:	f04f 0200 	mov.w	r2, #0
 80116d4:	f04f 0300 	mov.w	r3, #0
 80116d8:	00cb      	lsls	r3, r1, #3
 80116da:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80116de:	00c2      	lsls	r2, r0, #3
 80116e0:	4623      	mov	r3, r4
 80116e2:	3301      	adds	r3, #1
 80116e4:	4618      	mov	r0, r3
 80116e6:	f04f 0100 	mov.w	r1, #0
 80116ea:	f04f 0200 	mov.w	r2, #0
 80116ee:	f04f 0300 	mov.w	r3, #0
 80116f2:	00cb      	lsls	r3, r1, #3
 80116f4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80116f8:	00c2      	lsls	r2, r0, #3
 80116fa:	4623      	mov	r3, r4
 80116fc:	3301      	adds	r3, #1
 80116fe:	3307      	adds	r3, #7
 8011700:	08db      	lsrs	r3, r3, #3
 8011702:	00db      	lsls	r3, r3, #3
 8011704:	ebad 0d03 	sub.w	sp, sp, r3
 8011708:	ab02      	add	r3, sp, #8
 801170a:	3300      	adds	r3, #0
 801170c:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 801170e:	897b      	ldrh	r3, [r7, #10]
 8011710:	b2da      	uxtb	r2, r3
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 8011716:	897b      	ldrh	r3, [r7, #10]
 8011718:	121b      	asrs	r3, r3, #8
 801171a:	b25b      	sxtb	r3, r3
 801171c:	f003 030f 	and.w	r3, r3, #15
 8011720:	b25b      	sxtb	r3, r3
 8011722:	f043 0320 	orr.w	r3, r3, #32
 8011726:	b25b      	sxtb	r3, r3
 8011728:	b2da      	uxtb	r2, r3
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 801172e:	7a7b      	ldrb	r3, [r7, #9]
 8011730:	3304      	adds	r3, #4
 8011732:	b2da      	uxtb	r2, r3
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 8011738:	7a7b      	ldrb	r3, [r7, #9]
 801173a:	3304      	adds	r3, #4
 801173c:	121b      	asrs	r3, r3, #8
 801173e:	b2da      	uxtb	r2, r3
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	7a7a      	ldrb	r2, [r7, #9]
 8011748:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 801174a:	7a7b      	ldrb	r3, [r7, #9]
 801174c:	121b      	asrs	r3, r3, #8
 801174e:	b2da      	uxtb	r2, r3
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801175a:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8011762:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 8011764:	2300      	movs	r3, #0
 8011766:	83fb      	strh	r3, [r7, #30]
 8011768:	7a7b      	ldrb	r3, [r7, #9]
 801176a:	b29b      	uxth	r3, r3
 801176c:	8bfa      	ldrh	r2, [r7, #30]
 801176e:	429a      	cmp	r2, r3
 8011770:	d20b      	bcs.n	801178a <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 8011772:	8bfb      	ldrh	r3, [r7, #30]
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	441a      	add	r2, r3
 8011778:	8bfb      	ldrh	r3, [r7, #30]
 801177a:	3308      	adds	r3, #8
 801177c:	7811      	ldrb	r1, [r2, #0]
 801177e:	697a      	ldr	r2, [r7, #20]
 8011780:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 8011782:	8bfb      	ldrh	r3, [r7, #30]
 8011784:	3301      	adds	r3, #1
 8011786:	83fb      	strh	r3, [r7, #30]
 8011788:	e7ee      	b.n	8011768 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
 801179a:	7a7b      	ldrb	r3, [r7, #9]
 801179c:	b29b      	uxth	r3, r3
 801179e:	3308      	adds	r3, #8
 80117a0:	b29c      	uxth	r4, r3
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	9300      	str	r3, [sp, #0]
 80117a6:	4623      	mov	r3, r4
 80117a8:	f002 fd9e 	bl	80142e8 <_ZN3USB11outTransferEhhtPh>
 80117ac:	4603      	mov	r3, r0
 80117ae:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 80117b0:	7cfb      	ldrb	r3, [r7, #19]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d01f      	beq.n	80117f6 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x14e>
                delay(100); // This small delay prevents it from overflowing if it fails
 80117b6:	2064      	movs	r0, #100	; 0x64
 80117b8:	f7f1 fc14 	bl	8002fe4 <HAL_Delay>
                Notify(PSTR("\r\nError sending L2CAP message: 0x"), 0x80);
 80117bc:	2180      	movs	r1, #128	; 0x80
 80117be:	4810      	ldr	r0, [pc, #64]	; (8011800 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x158>)
 80117c0:	f004 fa38 	bl	8015c34 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (rcode, 0x80);
 80117c4:	7cfb      	ldrb	r3, [r7, #19]
 80117c6:	2180      	movs	r1, #128	; 0x80
 80117c8:	4618      	mov	r0, r3
 80117ca:	f000 fa92 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                Notify(PSTR(" - Channel ID: "), 0x80);
 80117ce:	2180      	movs	r1, #128	; 0x80
 80117d0:	480c      	ldr	r0, [pc, #48]	; (8011804 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x15c>)
 80117d2:	f004 fa2f 	bl	8015c34 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (channelHigh, 0x80);
 80117d6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80117da:	2180      	movs	r1, #128	; 0x80
 80117dc:	4618      	mov	r0, r3
 80117de:	f000 fa88 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                Notify(PSTR(" "), 0x80);
 80117e2:	2180      	movs	r1, #128	; 0x80
 80117e4:	4808      	ldr	r0, [pc, #32]	; (8011808 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x160>)
 80117e6:	f004 fa25 	bl	8015c34 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (channelLow, 0x80);
 80117ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80117ee:	2180      	movs	r1, #128	; 0x80
 80117f0:	4618      	mov	r0, r3
 80117f2:	f000 fa7e 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
 80117f6:	46ad      	mov	sp, r5
}
 80117f8:	bf00      	nop
 80117fa:	3720      	adds	r7, #32
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bdb0      	pop	{r4, r5, r7, pc}
 8011800:	08017450 	.word	0x08017450
 8011804:	08017474 	.word	0x08017474
 8011808:	08016d24 	.word	0x08016d24

0801180c <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 801180c:	b580      	push	{r7, lr}
 801180e:	b086      	sub	sp, #24
 8011810:	af02      	add	r7, sp, #8
 8011812:	60f8      	str	r0, [r7, #12]
 8011814:	607b      	str	r3, [r7, #4]
 8011816:	460b      	mov	r3, r1
 8011818:	817b      	strh	r3, [r7, #10]
 801181a:	4613      	mov	r3, r2
 801181c:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2202      	movs	r2, #2
 8011822:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	7a7a      	ldrb	r2, [r7, #9]
 801182a:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x04; // Length
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	2204      	movs	r2, #4
 8011832:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	2200      	movs	r2, #0
 801183a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 801183e:	8b3b      	ldrh	r3, [r7, #24]
 8011840:	b2da      	uxtb	r2, r3
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 8011848:	8b3b      	ldrh	r3, [r7, #24]
 801184a:	121b      	asrs	r3, r3, #8
 801184c:	b2da      	uxtb	r2, r3
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = scid[0]; // Source CID
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	781a      	ldrb	r2, [r3, #0]
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = scid[1];
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	785a      	ldrb	r2, [r3, #1]
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

        L2CAP_Command(handle, l2capoutbuf, 8);
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	f203 1221 	addw	r2, r3, #289	; 0x121
 801186e:	8979      	ldrh	r1, [r7, #10]
 8011870:	2300      	movs	r3, #0
 8011872:	9301      	str	r3, [sp, #4]
 8011874:	2301      	movs	r3, #1
 8011876:	9300      	str	r3, [sp, #0]
 8011878:	2308      	movs	r3, #8
 801187a:	68f8      	ldr	r0, [r7, #12]
 801187c:	f7ff ff14 	bl	80116a8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011880:	bf00      	nop
 8011882:	3710      	adds	r7, #16
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}

08011888 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 8011888:	b580      	push	{r7, lr}
 801188a:	b086      	sub	sp, #24
 801188c:	af02      	add	r7, sp, #8
 801188e:	60f8      	str	r0, [r7, #12]
 8011890:	607b      	str	r3, [r7, #4]
 8011892:	460b      	mov	r3, r1
 8011894:	817b      	strh	r3, [r7, #10]
 8011896:	4613      	mov	r3, r2
 8011898:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2203      	movs	r2, #3
 801189e:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	7a7a      	ldrb	r2, [r7, #9]
 80118a6:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x08; // Length
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	2208      	movs	r2, #8
 80118ae:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	2200      	movs	r2, #0
 80118b6:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = dcid[0]; // Destination CID
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	781a      	ldrb	r2, [r3, #0]
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = dcid[1];
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	785a      	ldrb	r2, [r3, #1]
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = scid[0]; // Source CID
 80118ce:	69bb      	ldr	r3, [r7, #24]
 80118d0:	781a      	ldrb	r2, [r3, #0]
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = scid[1];
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	785a      	ldrb	r2, [r3, #1]
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
        l2capoutbuf[8] = result; // Result: Pending or Success
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	7f3a      	ldrb	r2, [r7, #28]
 80118e6:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
        l2capoutbuf[9] = 0x00;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2200      	movs	r2, #0
 80118ee:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
        l2capoutbuf[10] = 0x00; // No further information
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	2200      	movs	r2, #0
 80118f6:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
        l2capoutbuf[11] = 0x00;
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	2200      	movs	r2, #0
 80118fe:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c

        L2CAP_Command(handle, l2capoutbuf, 12);
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f203 1221 	addw	r2, r3, #289	; 0x121
 8011908:	8979      	ldrh	r1, [r7, #10]
 801190a:	2300      	movs	r3, #0
 801190c:	9301      	str	r3, [sp, #4]
 801190e:	2301      	movs	r3, #1
 8011910:	9300      	str	r3, [sp, #0]
 8011912:	230c      	movs	r3, #12
 8011914:	68f8      	ldr	r0, [r7, #12]
 8011916:	f7ff fec7 	bl	80116a8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 801191a:	bf00      	nop
 801191c:	3710      	adds	r7, #16
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}

08011922 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 8011922:	b580      	push	{r7, lr}
 8011924:	b086      	sub	sp, #24
 8011926:	af02      	add	r7, sp, #8
 8011928:	60f8      	str	r0, [r7, #12]
 801192a:	607b      	str	r3, [r7, #4]
 801192c:	460b      	mov	r3, r1
 801192e:	817b      	strh	r3, [r7, #10]
 8011930:	4613      	mov	r3, r2
 8011932:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	2204      	movs	r2, #4
 8011938:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	7a7a      	ldrb	r2, [r7, #9]
 8011940:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x08; // Length
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	2208      	movs	r2, #8
 8011948:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	2200      	movs	r2, #0
 8011950:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = dcid[0]; // Destination CID
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	781a      	ldrb	r2, [r3, #0]
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = dcid[1];
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	785a      	ldrb	r2, [r3, #1]
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = 0x00; // Flags
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2200      	movs	r2, #0
 801196c:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = 0x00;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	2200      	movs	r2, #0
 8011974:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	2201      	movs	r2, #1
 801197c:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
        l2capoutbuf[9] = 0x02; // Config Opt: length
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2202      	movs	r2, #2
 8011984:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
        l2capoutbuf[10] = 0xFF; // MTU
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	22ff      	movs	r2, #255	; 0xff
 801198c:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
        l2capoutbuf[11] = 0xFF;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	22ff      	movs	r2, #255	; 0xff
 8011994:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c

        L2CAP_Command(handle, l2capoutbuf, 12);
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	f203 1221 	addw	r2, r3, #289	; 0x121
 801199e:	8979      	ldrh	r1, [r7, #10]
 80119a0:	2300      	movs	r3, #0
 80119a2:	9301      	str	r3, [sp, #4]
 80119a4:	2301      	movs	r3, #1
 80119a6:	9300      	str	r3, [sp, #0]
 80119a8:	230c      	movs	r3, #12
 80119aa:	68f8      	ldr	r0, [r7, #12]
 80119ac:	f7ff fe7c 	bl	80116a8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80119b0:	bf00      	nop
 80119b2:	3710      	adds	r7, #16
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}

080119b8 <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b086      	sub	sp, #24
 80119bc:	af02      	add	r7, sp, #8
 80119be:	60f8      	str	r0, [r7, #12]
 80119c0:	607b      	str	r3, [r7, #4]
 80119c2:	460b      	mov	r3, r1
 80119c4:	817b      	strh	r3, [r7, #10]
 80119c6:	4613      	mov	r3, r2
 80119c8:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	2205      	movs	r2, #5
 80119ce:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	7a7a      	ldrb	r2, [r7, #9]
 80119d6:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x0A; // Length
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	220a      	movs	r2, #10
 80119de:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2200      	movs	r2, #0
 80119e6:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = scid[0]; // Source CID
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	781a      	ldrb	r2, [r3, #0]
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = scid[1];
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	785a      	ldrb	r2, [r3, #1]
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = 0x00; // Flag
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	2200      	movs	r2, #0
 8011a02:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = 0x00;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
        l2capoutbuf[8] = 0x00; // Result
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	2200      	movs	r2, #0
 8011a12:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
        l2capoutbuf[9] = 0x00;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
        l2capoutbuf[10] = 0x01; // Config
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	2201      	movs	r2, #1
 8011a22:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
        l2capoutbuf[11] = 0x02;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	2202      	movs	r2, #2
 8011a2a:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
        l2capoutbuf[12] = 0xA0;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	22a0      	movs	r2, #160	; 0xa0
 8011a32:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
        l2capoutbuf[13] = 0x02;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2202      	movs	r2, #2
 8011a3a:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e

        L2CAP_Command(handle, l2capoutbuf, 14);
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	f203 1221 	addw	r2, r3, #289	; 0x121
 8011a44:	8979      	ldrh	r1, [r7, #10]
 8011a46:	2300      	movs	r3, #0
 8011a48:	9301      	str	r3, [sp, #4]
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	9300      	str	r3, [sp, #0]
 8011a4e:	230e      	movs	r3, #14
 8011a50:	68f8      	ldr	r0, [r7, #12]
 8011a52:	f7ff fe29 	bl	80116a8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011a56:	bf00      	nop
 8011a58:	3710      	adds	r7, #16
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}

08011a5e <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 8011a5e:	b580      	push	{r7, lr}
 8011a60:	b086      	sub	sp, #24
 8011a62:	af02      	add	r7, sp, #8
 8011a64:	60f8      	str	r0, [r7, #12]
 8011a66:	607b      	str	r3, [r7, #4]
 8011a68:	460b      	mov	r3, r1
 8011a6a:	817b      	strh	r3, [r7, #10]
 8011a6c:	4613      	mov	r3, r2
 8011a6e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	2206      	movs	r2, #6
 8011a74:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	7a7a      	ldrb	r2, [r7, #9]
 8011a7c:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x04; // Length
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	2204      	movs	r2, #4
 8011a84:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = dcid[0];
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	781a      	ldrb	r2, [r3, #0]
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = dcid[1];
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	785a      	ldrb	r2, [r3, #1]
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = scid[0];
 8011aa4:	69bb      	ldr	r3, [r7, #24]
 8011aa6:	781a      	ldrb	r2, [r3, #0]
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = scid[1];
 8011aae:	69bb      	ldr	r3, [r7, #24]
 8011ab0:	785a      	ldrb	r2, [r3, #1]
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

        L2CAP_Command(handle, l2capoutbuf, 8);
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	f203 1221 	addw	r2, r3, #289	; 0x121
 8011abe:	8979      	ldrh	r1, [r7, #10]
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	9301      	str	r3, [sp, #4]
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	9300      	str	r3, [sp, #0]
 8011ac8:	2308      	movs	r3, #8
 8011aca:	68f8      	ldr	r0, [r7, #12]
 8011acc:	f7ff fdec 	bl	80116a8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011ad0:	bf00      	nop
 8011ad2:	3710      	adds	r7, #16
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}

08011ad8 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b086      	sub	sp, #24
 8011adc:	af02      	add	r7, sp, #8
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	607b      	str	r3, [r7, #4]
 8011ae2:	460b      	mov	r3, r1
 8011ae4:	817b      	strh	r3, [r7, #10]
 8011ae6:	4613      	mov	r3, r2
 8011ae8:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	2207      	movs	r2, #7
 8011aee:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	7a7a      	ldrb	r2, [r7, #9]
 8011af6:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x04; // Length
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	2204      	movs	r2, #4
 8011afe:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	2200      	movs	r2, #0
 8011b06:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = dcid[0];
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	781a      	ldrb	r2, [r3, #0]
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = dcid[1];
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	785a      	ldrb	r2, [r3, #1]
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = scid[0];
 8011b1e:	69bb      	ldr	r3, [r7, #24]
 8011b20:	781a      	ldrb	r2, [r3, #0]
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = scid[1];
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	785a      	ldrb	r2, [r3, #1]
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

        L2CAP_Command(handle, l2capoutbuf, 8);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f203 1221 	addw	r2, r3, #289	; 0x121
 8011b38:	8979      	ldrh	r1, [r7, #10]
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	9301      	str	r3, [sp, #4]
 8011b3e:	2301      	movs	r3, #1
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	2308      	movs	r3, #8
 8011b44:	68f8      	ldr	r0, [r7, #12]
 8011b46:	f7ff fdaf 	bl	80116a8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011b4a:	bf00      	nop
 8011b4c:	3710      	adds	r7, #16
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}

08011b52 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b084      	sub	sp, #16
 8011b56:	af02      	add	r7, sp, #8
 8011b58:	6078      	str	r0, [r7, #4]
 8011b5a:	4608      	mov	r0, r1
 8011b5c:	4611      	mov	r1, r2
 8011b5e:	461a      	mov	r2, r3
 8011b60:	4603      	mov	r3, r0
 8011b62:	807b      	strh	r3, [r7, #2]
 8011b64:	460b      	mov	r3, r1
 8011b66:	707b      	strb	r3, [r7, #1]
 8011b68:	4613      	mov	r3, r2
 8011b6a:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	220b      	movs	r2, #11
 8011b70:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	787a      	ldrb	r2, [r7, #1]
 8011b78:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x08; // Length
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	2208      	movs	r2, #8
 8011b80:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2200      	movs	r2, #0
 8011b88:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = infoTypeLow;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	783a      	ldrb	r2, [r7, #0]
 8011b90:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = infoTypeHigh;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	7c3a      	ldrb	r2, [r7, #16]
 8011b98:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = 0x00; // Result = success
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = 0x00; // Result = success
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
        l2capoutbuf[8] = 0x00;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
        l2capoutbuf[9] = 0x00;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
        l2capoutbuf[10] = 0x00;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
        l2capoutbuf[11] = 0x00;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c

        L2CAP_Command(handle, l2capoutbuf, 12);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f203 1221 	addw	r2, r3, #289	; 0x121
 8011bd2:	8879      	ldrh	r1, [r7, #2]
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	9301      	str	r3, [sp, #4]
 8011bd8:	2301      	movs	r3, #1
 8011bda:	9300      	str	r3, [sp, #0]
 8011bdc:	230c      	movs	r3, #12
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f7ff fd62 	bl	80116a8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011be4:	bf00      	nop
 8011be6:	3708      	adds	r7, #8
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b08e      	sub	sp, #56	; 0x38
 8011bf0:	af08      	add	r7, sp, #32
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 8011bfe:	2300      	movs	r3, #0
 8011c00:	75fb      	strb	r3, [r7, #23]
 8011c02:	7dfb      	ldrb	r3, [r7, #23]
 8011c04:	2b05      	cmp	r3, #5
 8011c06:	d811      	bhi.n	8011c2c <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 8011c08:	7dfb      	ldrb	r3, [r7, #23]
 8011c0a:	f1c3 0305 	rsb	r3, r3, #5
 8011c0e:	461a      	mov	r2, r3
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	441a      	add	r2, r3
 8011c14:	7dfb      	ldrb	r3, [r7, #23]
 8011c16:	3302      	adds	r3, #2
 8011c18:	7812      	ldrb	r2, [r2, #0]
 8011c1a:	f107 0118 	add.w	r1, r7, #24
 8011c1e:	440b      	add	r3, r1
 8011c20:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 8011c24:	7dfb      	ldrb	r3, [r7, #23]
 8011c26:	3301      	adds	r3, #1
 8011c28:	75fb      	strb	r3, [r7, #23]
 8011c2a:	e7ea      	b.n	8011c02 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	9307      	str	r3, [sp, #28]
 8011c40:	f107 030c 	add.w	r3, r7, #12
 8011c44:	9306      	str	r3, [sp, #24]
 8011c46:	2308      	movs	r3, #8
 8011c48:	9305      	str	r3, [sp, #20]
 8011c4a:	2308      	movs	r3, #8
 8011c4c:	9304      	str	r3, [sp, #16]
 8011c4e:	2300      	movs	r3, #0
 8011c50:	9303      	str	r3, [sp, #12]
 8011c52:	2303      	movs	r3, #3
 8011c54:	9302      	str	r3, [sp, #8]
 8011c56:	23f5      	movs	r3, #245	; 0xf5
 8011c58:	9301      	str	r3, [sp, #4]
 8011c5a:	2309      	movs	r3, #9
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	2321      	movs	r3, #33	; 0x21
 8011c60:	f002 f941 	bl	8013ee6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 8011c64:	bf00      	nop
 8011c66:	3718      	adds	r7, #24
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b08e      	sub	sp, #56	; 0x38
 8011c70:	af08      	add	r7, sp, #32
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 8011c76:	2305      	movs	r3, #5
 8011c78:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 8011c7a:	2310      	movs	r3, #16
 8011c7c:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 8011c7e:	2301      	movs	r3, #1
 8011c80:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 8011c82:	2302      	movs	r3, #2
 8011c84:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 8011c86:	2312      	movs	r3, #18
 8011c88:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	75fb      	strb	r3, [r7, #23]
 8011c8e:	7dfb      	ldrb	r3, [r7, #23]
 8011c90:	2b05      	cmp	r3, #5
 8011c92:	d80e      	bhi.n	8011cb2 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 8011c94:	7dfb      	ldrb	r3, [r7, #23]
 8011c96:	683a      	ldr	r2, [r7, #0]
 8011c98:	441a      	add	r2, r3
 8011c9a:	7dfb      	ldrb	r3, [r7, #23]
 8011c9c:	3301      	adds	r3, #1
 8011c9e:	7812      	ldrb	r2, [r2, #0]
 8011ca0:	f107 0118 	add.w	r1, r7, #24
 8011ca4:	440b      	add	r3, r1
 8011ca6:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 8011caa:	7dfb      	ldrb	r3, [r7, #23]
 8011cac:	3301      	adds	r3, #1
 8011cae:	75fb      	strb	r3, [r7, #23]
 8011cb0:	e7ed      	b.n	8011c8e <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	9307      	str	r3, [sp, #28]
 8011cc6:	f107 030c 	add.w	r3, r7, #12
 8011cca:	9306      	str	r3, [sp, #24]
 8011ccc:	230b      	movs	r3, #11
 8011cce:	9305      	str	r3, [sp, #20]
 8011cd0:	230b      	movs	r3, #11
 8011cd2:	9304      	str	r3, [sp, #16]
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	9303      	str	r3, [sp, #12]
 8011cd8:	2303      	movs	r3, #3
 8011cda:	9302      	str	r3, [sp, #8]
 8011cdc:	2305      	movs	r3, #5
 8011cde:	9301      	str	r3, [sp, #4]
 8011ce0:	2309      	movs	r3, #9
 8011ce2:	9300      	str	r3, [sp, #0]
 8011ce4:	2321      	movs	r3, #33	; 0x21
 8011ce6:	f002 f8fe 	bl	8013ee6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 8011cea:	bf00      	nop
 8011cec:	3718      	adds	r7, #24
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}

08011cf2 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8011cf2:	b580      	push	{r7, lr}
 8011cf4:	b082      	sub	sp, #8
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	6039      	str	r1, [r7, #0]
 8011cfc:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
 8011cfe:	79fb      	ldrb	r3, [r7, #7]
 8011d00:	6839      	ldr	r1, [r7, #0]
 8011d02:	4618      	mov	r0, r3
 8011d04:	f000 f8b0 	bl	8011e68 <_Z8PrintHexIhEvT_i>
#endif
}
 8011d08:	bf00      	nop
 8011d0a:	3708      	adds	r7, #8
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}

08011d10 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 8011d10:	b480      	push	{r7}
 8011d12:	b083      	sub	sp, #12
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
 8011d18:	4a04      	ldr	r2, [pc, #16]	; (8011d2c <_ZN13USBReadParserC1Ev+0x1c>)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	601a      	str	r2, [r3, #0]
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	4618      	mov	r0, r3
 8011d22:	370c      	adds	r7, #12
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr
 8011d2c:	08018898 	.word	0x08018898

08011d30 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b082      	sub	sp, #8
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7ff ffe7 	bl	8011d10 <_ZN13USBReadParserC1Ev>
 8011d42:	4a21      	ldr	r2, [pc, #132]	; (8011dc8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	601a      	str	r2, [r3, #0]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	683a      	ldr	r2, [r7, #0]
 8011d4c:	605a      	str	r2, [r3, #4]
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	3308      	adds	r3, #8
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7fc fe0f 	bl	800e976 <_ZN16MultiValueBufferC1Ev>
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	3310      	adds	r3, #16
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7fc fe21 	bl	800e9a4 <_ZN20MultiByteValueParserC1Ev>
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	3318      	adds	r3, #24
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7fc fe48 	bl	800e9fc <_ZN11ByteSkipperC1Ev>
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2200      	movs	r2, #0
 8011d78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2200      	movs	r2, #0
 8011d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f103 0220 	add.w	r2, r3, #32
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f103 0210 	add.w	r2, r3, #16
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	3308      	adds	r3, #8
 8011da2:	4619      	mov	r1, r3
 8011da4:	4610      	mov	r0, r2
 8011da6:	f7fc fe11 	bl	800e9cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f103 0218 	add.w	r2, r3, #24
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	3308      	adds	r3, #8
 8011db4:	4619      	mov	r1, r3
 8011db6:	4610      	mov	r0, r2
 8011db8:	f7fc fe34 	bl	800ea24 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	08018840 	.word	0x08018840

08011dcc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b082      	sub	sp, #8
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
 8011dd4:	6039      	str	r1, [r7, #0]
UseOr(false) {
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f7ff ff99 	bl	8011d10 <_ZN13USBReadParserC1Ev>
 8011dde:	4a21      	ldr	r2, [pc, #132]	; (8011e64 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	601a      	str	r2, [r3, #0]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	683a      	ldr	r2, [r7, #0]
 8011de8:	605a      	str	r2, [r3, #4]
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	3308      	adds	r3, #8
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7fc fdc1 	bl	800e976 <_ZN16MultiValueBufferC1Ev>
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	3310      	adds	r3, #16
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7fc fdd3 	bl	800e9a4 <_ZN20MultiByteValueParserC1Ev>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	3318      	adds	r3, #24
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fc fdfa 	bl	800e9fc <_ZN11ByteSkipperC1Ev>
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2200      	movs	r2, #0
 8011e14:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2200      	movs	r2, #0
 8011e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f103 0220 	add.w	r2, r3, #32
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f103 0210 	add.w	r2, r3, #16
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	3308      	adds	r3, #8
 8011e3e:	4619      	mov	r1, r3
 8011e40:	4610      	mov	r0, r2
 8011e42:	f7fc fdc3 	bl	800e9cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f103 0218 	add.w	r2, r3, #24
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	3308      	adds	r3, #8
 8011e50:	4619      	mov	r1, r3
 8011e52:	4610      	mov	r0, r2
 8011e54:	f7fc fde6 	bl	800ea24 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	3708      	adds	r7, #8
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}
 8011e62:	bf00      	nop
 8011e64:	08018834 	.word	0x08018834

08011e68 <_Z8PrintHexIhEvT_i>:
void PrintHex(T val, int lvl) {
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	4603      	mov	r3, r0
 8011e70:	6039      	str	r1, [r7, #0]
 8011e72:	71fb      	strb	r3, [r7, #7]
        int num_nibbles = sizeof (T) * 2;
 8011e74:	2302      	movs	r3, #2
 8011e76:	60fb      	str	r3, [r7, #12]
                char v = 48 + (((val >> (num_nibbles - 1) * 4)) & 0x0f);
 8011e78:	79fa      	ldrb	r2, [r7, #7]
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	3b01      	subs	r3, #1
 8011e7e:	009b      	lsls	r3, r3, #2
 8011e80:	fa42 f303 	asr.w	r3, r2, r3
 8011e84:	b2db      	uxtb	r3, r3
 8011e86:	f003 030f 	and.w	r3, r3, #15
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	3330      	adds	r3, #48	; 0x30
 8011e8e:	72fb      	strb	r3, [r7, #11]
                if(v > 57) v += 7;
 8011e90:	7afb      	ldrb	r3, [r7, #11]
 8011e92:	2b39      	cmp	r3, #57	; 0x39
 8011e94:	d902      	bls.n	8011e9c <_Z8PrintHexIhEvT_i+0x34>
 8011e96:	7afb      	ldrb	r3, [r7, #11]
 8011e98:	3307      	adds	r3, #7
 8011e9a:	72fb      	strb	r3, [r7, #11]
                E_Notifyc(v, lvl);
 8011e9c:	7afb      	ldrb	r3, [r7, #11]
 8011e9e:	6839      	ldr	r1, [r7, #0]
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f003 fead 	bl	8015c00 <_Z9E_Notifycci>
        do {
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	3b01      	subs	r3, #1
 8011eaa:	60fb      	str	r3, [r7, #12]
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	bf14      	ite	ne
 8011eb2:	2301      	movne	r3, #1
 8011eb4:	2300      	moveq	r3, #0
 8011eb6:	b2db      	uxtb	r3, r3
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d000      	beq.n	8011ebe <_Z8PrintHexIhEvT_i+0x56>
 8011ebc:	e7dc      	b.n	8011e78 <_Z8PrintHexIhEvT_i+0x10>
}
 8011ebe:	bf00      	nop
 8011ec0:	3710      	adds	r7, #16
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}

08011ec6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 8011ec6:	b580      	push	{r7, lr}
 8011ec8:	b086      	sub	sp, #24
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	60f8      	str	r0, [r7, #12]
 8011ece:	607a      	str	r2, [r7, #4]
 8011ed0:	603b      	str	r3, [r7, #0]
 8011ed2:	460b      	mov	r3, r1
 8011ed4:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 8011ed6:	897b      	ldrh	r3, [r7, #10]
 8011ed8:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	613b      	str	r3, [r7, #16]

        while(cntdn)
 8011ede:	8afb      	ldrh	r3, [r7, #22]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d00f      	beq.n	8011f04 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 8011ee4:	f107 0216 	add.w	r2, r7, #22
 8011ee8:	f107 0310 	add.w	r3, r7, #16
 8011eec:	4619      	mov	r1, r3
 8011eee:	68f8      	ldr	r0, [r7, #12]
 8011ef0:	f000 f82e 	bl	8011f50 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	f083 0301 	eor.w	r3, r3, #1
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d100      	bne.n	8011f02 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 8011f00:	e7ed      	b.n	8011ede <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 8011f02:	bf00      	nop
}
 8011f04:	3718      	adds	r7, #24
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}

08011f0a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 8011f0a:	b580      	push	{r7, lr}
 8011f0c:	b086      	sub	sp, #24
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	60f8      	str	r0, [r7, #12]
 8011f12:	607a      	str	r2, [r7, #4]
 8011f14:	603b      	str	r3, [r7, #0]
 8011f16:	460b      	mov	r3, r1
 8011f18:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 8011f1a:	897b      	ldrh	r3, [r7, #10]
 8011f1c:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	613b      	str	r3, [r7, #16]
        while(cntdn)
 8011f22:	8afb      	ldrh	r3, [r7, #22]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d00f      	beq.n	8011f48 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 8011f28:	f107 0216 	add.w	r2, r7, #22
 8011f2c:	f107 0310 	add.w	r3, r7, #16
 8011f30:	4619      	mov	r1, r3
 8011f32:	68f8      	ldr	r0, [r7, #12]
 8011f34:	f000 f982 	bl	801223c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	f083 0301 	eor.w	r3, r3, #1
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d100      	bne.n	8011f46 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 8011f44:	e7ed      	b.n	8011f22 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 8011f46:	bf00      	nop
}
 8011f48:	3718      	adds	r7, #24
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
	...

08011f50 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8011f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f52:	b089      	sub	sp, #36	; 0x24
 8011f54:	af02      	add	r7, sp, #8
 8011f56:	60f8      	str	r0, [r7, #12]
 8011f58:	60b9      	str	r1, [r7, #8]
 8011f5a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	3320      	adds	r3, #32
 8011f60:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	3320      	adds	r3, #32
 8011f66:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011f6e:	2b04      	cmp	r3, #4
 8011f70:	f200 815e 	bhi.w	8012230 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8011f74:	a201      	add	r2, pc, #4	; (adr r2, 8011f7c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 8011f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f7a:	bf00      	nop
 8011f7c:	08011f91 	.word	0x08011f91
 8011f80:	08011fb1 	.word	0x08011fb1
 8011f84:	08011ff3 	.word	0x08011ff3
 8011f88:	08012007 	.word	0x08012007
 8011f8c:	080120cb 	.word	0x080120cb
                case 0:
                        theBuffer.valueSize = 2;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2202      	movs	r2, #2
 8011f94:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	f103 0210 	add.w	r2, r3, #16
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	3308      	adds	r3, #8
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	4610      	mov	r0, r2
 8011fa4:	f7fc fd12 	bl	800e9cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	2201      	movs	r2, #1
 8011fac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	3310      	adds	r3, #16
 8011fb4:	687a      	ldr	r2, [r7, #4]
 8011fb6:	68b9      	ldr	r1, [r7, #8]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f003 fef9 	bl	8015db0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	f083 0301 	eor.w	r3, r3, #1
 8011fc4:	b2db      	uxtb	r3, r3
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d001      	beq.n	8011fce <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	e131      	b.n	8012232 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8011fd4:	781a      	ldrb	r2, [r3, #0]
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8011fe2:	785a      	ldrb	r2, [r3, #1]
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	2202      	movs	r2, #2
 8011fee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	3320      	adds	r3, #32
 8011ff6:	1c9a      	adds	r2, r3, #2
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	2203      	movs	r2, #3
 8012002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801200c:	3b02      	subs	r3, #2
 801200e:	2b1f      	cmp	r3, #31
 8012010:	d847      	bhi.n	80120a2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8012012:	a201      	add	r2, pc, #4	; (adr r2, 8012018 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8012014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012018:	080120a3 	.word	0x080120a3
 801201c:	080120a3 	.word	0x080120a3
 8012020:	08012099 	.word	0x08012099
 8012024:	080120a3 	.word	0x080120a3
 8012028:	080120a3 	.word	0x080120a3
 801202c:	080120a3 	.word	0x080120a3
 8012030:	080120a3 	.word	0x080120a3
 8012034:	080120a3 	.word	0x080120a3
 8012038:	080120a3 	.word	0x080120a3
 801203c:	080120a3 	.word	0x080120a3
 8012040:	080120a3 	.word	0x080120a3
 8012044:	080120a3 	.word	0x080120a3
 8012048:	080120a3 	.word	0x080120a3
 801204c:	080120a3 	.word	0x080120a3
 8012050:	080120a3 	.word	0x080120a3
 8012054:	080120a3 	.word	0x080120a3
 8012058:	080120a3 	.word	0x080120a3
 801205c:	080120a3 	.word	0x080120a3
 8012060:	080120a3 	.word	0x080120a3
 8012064:	080120a3 	.word	0x080120a3
 8012068:	080120a3 	.word	0x080120a3
 801206c:	080120a3 	.word	0x080120a3
 8012070:	080120a3 	.word	0x080120a3
 8012074:	080120a3 	.word	0x080120a3
 8012078:	080120a3 	.word	0x080120a3
 801207c:	080120a3 	.word	0x080120a3
 8012080:	080120a3 	.word	0x080120a3
 8012084:	080120a3 	.word	0x080120a3
 8012088:	080120a3 	.word	0x080120a3
 801208c:	080120a3 	.word	0x080120a3
 8012090:	080120a3 	.word	0x080120a3
 8012094:	080120a3 	.word	0x080120a3
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	2200      	movs	r2, #0
 801209c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 80120a0:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80120a8:	3b02      	subs	r3, #2
 80120aa:	b2da      	uxtb	r2, r3
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	f103 0210 	add.w	r2, r3, #16
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	3308      	adds	r3, #8
 80120ba:	4619      	mov	r1, r3
 80120bc:	4610      	mov	r0, r2
 80120be:	f7fc fc85 	bl	800e9cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	2204      	movs	r2, #4
 80120c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80120d0:	2b05      	cmp	r3, #5
 80120d2:	d055      	beq.n	8012180 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 80120d4:	2b05      	cmp	r3, #5
 80120d6:	f300 8085 	bgt.w	80121e4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 80120da:	2b02      	cmp	r3, #2
 80120dc:	d002      	beq.n	80120e4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 80120de:	2b04      	cmp	r3, #4
 80120e0:	d015      	beq.n	801210e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 80120e2:	e07f      	b.n	80121e4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	3310      	adds	r3, #16
 80120e8:	687a      	ldr	r2, [r7, #4]
 80120ea:	68b9      	ldr	r1, [r7, #8]
 80120ec:	4618      	mov	r0, r3
 80120ee:	f003 fe5f 	bl	8015db0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80120f2:	4603      	mov	r3, r0
 80120f4:	f083 0301 	eor.w	r3, r3, #1
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d001      	beq.n	8012102 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 80120fe:	2300      	movs	r3, #0
 8012100:	e097      	b.n	8012232 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	795a      	ldrb	r2, [r3, #5]
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 801210c:	e086      	b.n	801221c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	3310      	adds	r3, #16
 8012112:	687a      	ldr	r2, [r7, #4]
 8012114:	68b9      	ldr	r1, [r7, #8]
 8012116:	4618      	mov	r0, r3
 8012118:	f003 fe4a 	bl	8015db0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801211c:	4603      	mov	r3, r0
 801211e:	f083 0301 	eor.w	r3, r3, #1
 8012122:	b2db      	uxtb	r3, r3
 8012124:	2b00      	cmp	r3, #0
 8012126:	d001      	beq.n	801212c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 8012128:	2300      	movs	r3, #0
 801212a:	e082      	b.n	8012232 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 801212c:	693b      	ldr	r3, [r7, #16]
 801212e:	795b      	ldrb	r3, [r3, #5]
 8012130:	2be0      	cmp	r3, #224	; 0xe0
 8012132:	d16c      	bne.n	801220e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	799b      	ldrb	r3, [r3, #6]
 8012138:	2b01      	cmp	r3, #1
 801213a:	d16a      	bne.n	8012212 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012142:	2b00      	cmp	r3, #0
 8012144:	d004      	beq.n	8012150 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	79db      	ldrb	r3, [r3, #7]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d104      	bne.n	8012158 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 801214e:	e065      	b.n	801221c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	79db      	ldrb	r3, [r3, #7]
 8012154:	2b01      	cmp	r3, #1
 8012156:	d15e      	bne.n	8012216 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	2201      	movs	r2, #1
 801215c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	789a      	ldrb	r2, [r3, #2]
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	78da      	ldrb	r2, [r3, #3]
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	79da      	ldrb	r2, [r3, #7]
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 801217e:	e04d      	b.n	801221c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	3310      	adds	r3, #16
 8012184:	687a      	ldr	r2, [r7, #4]
 8012186:	68b9      	ldr	r1, [r7, #8]
 8012188:	4618      	mov	r0, r3
 801218a:	f003 fe11 	bl	8015db0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801218e:	4603      	mov	r3, r0
 8012190:	f083 0301 	eor.w	r3, r3, #1
 8012194:	b2db      	uxtb	r3, r3
 8012196:	2b00      	cmp	r3, #0
 8012198:	d001      	beq.n	801219e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 801219a:	2300      	movs	r3, #0
 801219c:	e049      	b.n	8012232 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d038      	beq.n	801221a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	685b      	ldr	r3, [r3, #4]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d034      	beq.n	801221a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	6858      	ldr	r0, [r3, #4]
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	681c      	ldr	r4, [r3, #0]
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80121d4:	68fa      	ldr	r2, [r7, #12]
 80121d6:	3220      	adds	r2, #32
 80121d8:	9201      	str	r2, [sp, #4]
 80121da:	9300      	str	r3, [sp, #0]
 80121dc:	4633      	mov	r3, r6
 80121de:	462a      	mov	r2, r5
 80121e0:	47a0      	blx	r4
                                        break;
 80121e2:	e01a      	b.n	801221a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f103 0018 	add.w	r0, r3, #24
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	3b02      	subs	r3, #2
 80121f4:	b29b      	uxth	r3, r3
 80121f6:	687a      	ldr	r2, [r7, #4]
 80121f8:	68b9      	ldr	r1, [r7, #8]
 80121fa:	f7fc fc26 	bl	800ea4a <_ZN11ByteSkipper4SkipEPPhPtt>
 80121fe:	4603      	mov	r3, r0
 8012200:	f083 0301 	eor.w	r3, r3, #1
 8012204:	b2db      	uxtb	r3, r3
 8012206:	2b00      	cmp	r3, #0
 8012208:	d008      	beq.n	801221c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 801220a:	2300      	movs	r3, #0
 801220c:	e011      	b.n	8012232 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 801220e:	bf00      	nop
 8012210:	e004      	b.n	801221c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 8012212:	bf00      	nop
 8012214:	e002      	b.n	801221c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 8012216:	bf00      	nop
 8012218:	e000      	b.n	801221c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 801221a:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	f103 0220 	add.w	r2, r3, #32
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	2200      	movs	r2, #0
 801222c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 8012230:	2301      	movs	r3, #1
}
 8012232:	4618      	mov	r0, r3
 8012234:	371c      	adds	r7, #28
 8012236:	46bd      	mov	sp, r7
 8012238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801223a:	bf00      	nop

0801223c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 801223c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801223e:	b089      	sub	sp, #36	; 0x24
 8012240:	af02      	add	r7, sp, #8
 8012242:	60f8      	str	r0, [r7, #12]
 8012244:	60b9      	str	r1, [r7, #8]
 8012246:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	3320      	adds	r3, #32
 801224c:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	3320      	adds	r3, #32
 8012252:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801225a:	2b04      	cmp	r3, #4
 801225c:	f200 815e 	bhi.w	801251c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8012260:	a201      	add	r2, pc, #4	; (adr r2, 8012268 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 8012262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012266:	bf00      	nop
 8012268:	0801227d 	.word	0x0801227d
 801226c:	0801229d 	.word	0x0801229d
 8012270:	080122df 	.word	0x080122df
 8012274:	080122f3 	.word	0x080122f3
 8012278:	080123b7 	.word	0x080123b7
                        theBuffer.valueSize = 2;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	2202      	movs	r2, #2
 8012280:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	f103 0210 	add.w	r2, r3, #16
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	3308      	adds	r3, #8
 801228c:	4619      	mov	r1, r3
 801228e:	4610      	mov	r0, r2
 8012290:	f7fc fb9c 	bl	800e9cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	2201      	movs	r2, #1
 8012298:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	3310      	adds	r3, #16
 80122a0:	687a      	ldr	r2, [r7, #4]
 80122a2:	68b9      	ldr	r1, [r7, #8]
 80122a4:	4618      	mov	r0, r3
 80122a6:	f003 fd83 	bl	8015db0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80122aa:	4603      	mov	r3, r0
 80122ac:	f083 0301 	eor.w	r3, r3, #1
 80122b0:	b2db      	uxtb	r3, r3
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d001      	beq.n	80122ba <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 80122b6:	2300      	movs	r3, #0
 80122b8:	e131      	b.n	801251e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80122c0:	781a      	ldrb	r2, [r3, #0]
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80122ce:	785a      	ldrb	r2, [r3, #1]
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2202      	movs	r2, #2
 80122da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	3320      	adds	r3, #32
 80122e2:	1c9a      	adds	r2, r3, #2
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	2203      	movs	r2, #3
 80122ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80122f8:	3b02      	subs	r3, #2
 80122fa:	2b1f      	cmp	r3, #31
 80122fc:	d847      	bhi.n	801238e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 80122fe:	a201      	add	r2, pc, #4	; (adr r2, 8012304 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8012300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012304:	0801238f 	.word	0x0801238f
 8012308:	0801238f 	.word	0x0801238f
 801230c:	08012385 	.word	0x08012385
 8012310:	0801238f 	.word	0x0801238f
 8012314:	0801238f 	.word	0x0801238f
 8012318:	0801238f 	.word	0x0801238f
 801231c:	0801238f 	.word	0x0801238f
 8012320:	0801238f 	.word	0x0801238f
 8012324:	0801238f 	.word	0x0801238f
 8012328:	0801238f 	.word	0x0801238f
 801232c:	0801238f 	.word	0x0801238f
 8012330:	0801238f 	.word	0x0801238f
 8012334:	0801238f 	.word	0x0801238f
 8012338:	0801238f 	.word	0x0801238f
 801233c:	0801238f 	.word	0x0801238f
 8012340:	0801238f 	.word	0x0801238f
 8012344:	0801238f 	.word	0x0801238f
 8012348:	0801238f 	.word	0x0801238f
 801234c:	0801238f 	.word	0x0801238f
 8012350:	0801238f 	.word	0x0801238f
 8012354:	0801238f 	.word	0x0801238f
 8012358:	0801238f 	.word	0x0801238f
 801235c:	0801238f 	.word	0x0801238f
 8012360:	0801238f 	.word	0x0801238f
 8012364:	0801238f 	.word	0x0801238f
 8012368:	0801238f 	.word	0x0801238f
 801236c:	0801238f 	.word	0x0801238f
 8012370:	0801238f 	.word	0x0801238f
 8012374:	0801238f 	.word	0x0801238f
 8012378:	0801238f 	.word	0x0801238f
 801237c:	0801238f 	.word	0x0801238f
 8012380:	0801238f 	.word	0x0801238f
                                        isGoodInterface = false;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2200      	movs	r2, #0
 8012388:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 801238c:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012394:	3b02      	subs	r3, #2
 8012396:	b2da      	uxtb	r2, r3
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	f103 0210 	add.w	r2, r3, #16
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	3308      	adds	r3, #8
 80123a6:	4619      	mov	r1, r3
 80123a8:	4610      	mov	r0, r2
 80123aa:	f7fc fb0f 	bl	800e9cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	2204      	movs	r2, #4
 80123b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80123bc:	2b05      	cmp	r3, #5
 80123be:	d055      	beq.n	801246c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 80123c0:	2b05      	cmp	r3, #5
 80123c2:	f300 8085 	bgt.w	80124d0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 80123c6:	2b02      	cmp	r3, #2
 80123c8:	d002      	beq.n	80123d0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 80123ca:	2b04      	cmp	r3, #4
 80123cc:	d015      	beq.n	80123fa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 80123ce:	e07f      	b.n	80124d0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	3310      	adds	r3, #16
 80123d4:	687a      	ldr	r2, [r7, #4]
 80123d6:	68b9      	ldr	r1, [r7, #8]
 80123d8:	4618      	mov	r0, r3
 80123da:	f003 fce9 	bl	8015db0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80123de:	4603      	mov	r3, r0
 80123e0:	f083 0301 	eor.w	r3, r3, #1
 80123e4:	b2db      	uxtb	r3, r3
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d001      	beq.n	80123ee <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 80123ea:	2300      	movs	r3, #0
 80123ec:	e097      	b.n	801251e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	795a      	ldrb	r2, [r3, #5]
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 80123f8:	e086      	b.n	8012508 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	3310      	adds	r3, #16
 80123fe:	687a      	ldr	r2, [r7, #4]
 8012400:	68b9      	ldr	r1, [r7, #8]
 8012402:	4618      	mov	r0, r3
 8012404:	f003 fcd4 	bl	8015db0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8012408:	4603      	mov	r3, r0
 801240a:	f083 0301 	eor.w	r3, r3, #1
 801240e:	b2db      	uxtb	r3, r3
 8012410:	2b00      	cmp	r3, #0
 8012412:	d001      	beq.n	8012418 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 8012414:	2300      	movs	r3, #0
 8012416:	e082      	b.n	801251e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	795b      	ldrb	r3, [r3, #5]
 801241c:	2bff      	cmp	r3, #255	; 0xff
 801241e:	d16c      	bne.n	80124fa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	799b      	ldrb	r3, [r3, #6]
 8012424:	2b01      	cmp	r3, #1
 8012426:	d16a      	bne.n	80124fe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801242e:	2b00      	cmp	r3, #0
 8012430:	d004      	beq.n	801243c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	79db      	ldrb	r3, [r3, #7]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d104      	bne.n	8012444 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 801243a:	e065      	b.n	8012508 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 801243c:	693b      	ldr	r3, [r7, #16]
 801243e:	79db      	ldrb	r3, [r3, #7]
 8012440:	2b01      	cmp	r3, #1
 8012442:	d15e      	bne.n	8012502 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	2201      	movs	r2, #1
 8012448:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	789a      	ldrb	r2, [r3, #2]
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	78da      	ldrb	r2, [r3, #3]
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	79da      	ldrb	r2, [r3, #7]
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 801246a:	e04d      	b.n	8012508 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	3310      	adds	r3, #16
 8012470:	687a      	ldr	r2, [r7, #4]
 8012472:	68b9      	ldr	r1, [r7, #8]
 8012474:	4618      	mov	r0, r3
 8012476:	f003 fc9b 	bl	8015db0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801247a:	4603      	mov	r3, r0
 801247c:	f083 0301 	eor.w	r3, r3, #1
 8012480:	b2db      	uxtb	r3, r3
 8012482:	2b00      	cmp	r3, #0
 8012484:	d001      	beq.n	801248a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 8012486:	2300      	movs	r3, #0
 8012488:	e049      	b.n	801251e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012490:	2b00      	cmp	r3, #0
 8012492:	d038      	beq.n	8012506 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	685b      	ldr	r3, [r3, #4]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d034      	beq.n	8012506 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	6858      	ldr	r0, [r3, #4]
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	685b      	ldr	r3, [r3, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	681c      	ldr	r4, [r3, #0]
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80124c0:	68fa      	ldr	r2, [r7, #12]
 80124c2:	3220      	adds	r2, #32
 80124c4:	9201      	str	r2, [sp, #4]
 80124c6:	9300      	str	r3, [sp, #0]
 80124c8:	4633      	mov	r3, r6
 80124ca:	462a      	mov	r2, r5
 80124cc:	47a0      	blx	r4
                                        break;
 80124ce:	e01a      	b.n	8012506 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	f103 0018 	add.w	r0, r3, #24
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80124dc:	b29b      	uxth	r3, r3
 80124de:	3b02      	subs	r3, #2
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	687a      	ldr	r2, [r7, #4]
 80124e4:	68b9      	ldr	r1, [r7, #8]
 80124e6:	f7fc fab0 	bl	800ea4a <_ZN11ByteSkipper4SkipEPPhPtt>
 80124ea:	4603      	mov	r3, r0
 80124ec:	f083 0301 	eor.w	r3, r3, #1
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d008      	beq.n	8012508 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 80124f6:	2300      	movs	r3, #0
 80124f8:	e011      	b.n	801251e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 80124fa:	bf00      	nop
 80124fc:	e004      	b.n	8012508 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 80124fe:	bf00      	nop
 8012500:	e002      	b.n	8012508 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 8012502:	bf00      	nop
 8012504:	e000      	b.n	8012508 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 8012506:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	f103 0220 	add.w	r2, r3, #32
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2200      	movs	r2, #0
 8012518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 801251c:	2301      	movs	r3, #1
}
 801251e:	4618      	mov	r0, r3
 8012520:	371c      	adds	r7, #28
 8012522:	46bd      	mov	sp, r7
 8012524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012526:	bf00      	nop

08012528 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 8012528:	b480      	push	{r7}
 801252a:	b085      	sub	sp, #20
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
 8012530:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8012532:	2300      	movs	r3, #0
 8012534:	73fb      	strb	r3, [r7, #15]
 8012536:	7bfb      	ldrb	r3, [r7, #15]
 8012538:	2b03      	cmp	r3, #3
 801253a:	d815      	bhi.n	8012568 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 801253c:	7bfb      	ldrb	r3, [r7, #15]
 801253e:	687a      	ldr	r2, [r7, #4]
 8012540:	331e      	adds	r3, #30
 8012542:	009b      	lsls	r3, r3, #2
 8012544:	4413      	add	r3, r2
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d109      	bne.n	8012560 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 801254c:	7bfb      	ldrb	r3, [r7, #15]
 801254e:	687a      	ldr	r2, [r7, #4]
 8012550:	331e      	adds	r3, #30
 8012552:	009b      	lsls	r3, r3, #2
 8012554:	4413      	add	r3, r2
 8012556:	683a      	ldr	r2, [r7, #0]
 8012558:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 801255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801255e:	e005      	b.n	801256c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8012560:	7bfb      	ldrb	r3, [r7, #15]
 8012562:	3301      	adds	r3, #1
 8012564:	73fb      	strb	r3, [r7, #15]
 8012566:	e7e6      	b.n	8012536 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 8012568:	f04f 33ff 	mov.w	r3, #4294967295
        };
 801256c:	4618      	mov	r0, r3
 801256e:	3714      	adds	r7, #20
 8012570:	46bd      	mov	sp, r7
 8012572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012576:	4770      	bx	lr

08012578 <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
 8012582:	4a0a      	ldr	r2, [pc, #40]	; (80125ac <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	601a      	str	r2, [r3, #0]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	683a      	ldr	r2, [r7, #0]
 801258c:	609a      	str	r2, [r3, #8]
                if(pBtd)
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	689b      	ldr	r3, [r3, #8]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d005      	beq.n	80125a2 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	689b      	ldr	r3, [r3, #8]
 801259a:	6879      	ldr	r1, [r7, #4]
 801259c:	4618      	mov	r0, r3
 801259e:	f7ff ffc3 	bl	8012528 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	4618      	mov	r0, r3
 80125a6:	3708      	adds	r7, #8
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}
 80125ac:	080188fc 	.word	0x080188fc

080125b0 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 80125b0:	b480      	push	{r7}
 80125b2:	b085      	sub	sp, #20
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	60f8      	str	r0, [r7, #12]
 80125b8:	60b9      	str	r1, [r7, #8]
 80125ba:	4613      	mov	r3, r2
 80125bc:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	461a      	mov	r2, r3
 80125c4:	88fb      	ldrh	r3, [r7, #6]
 80125c6:	b2db      	uxtb	r3, r3
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d10b      	bne.n	80125e4 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	3301      	adds	r3, #1
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	461a      	mov	r2, r3
 80125d4:	88fb      	ldrh	r3, [r7, #6]
 80125d6:	121b      	asrs	r3, r3, #8
 80125d8:	f043 0320 	orr.w	r3, r3, #32
 80125dc:	429a      	cmp	r2, r3
 80125de:	d101      	bne.n	80125e4 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 80125e0:	2301      	movs	r3, #1
 80125e2:	e000      	b.n	80125e6 <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 80125e4:	2300      	movs	r3, #0
        }
 80125e6:	4618      	mov	r0, r3
 80125e8:	3714      	adds	r7, #20
 80125ea:	46bd      	mov	sp, r7
 80125ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f0:	4770      	bx	lr

080125f2 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80125f2:	b480      	push	{r7}
 80125f4:	b085      	sub	sp, #20
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	60f8      	str	r0, [r7, #12]
 80125fa:	460b      	mov	r3, r1
 80125fc:	607a      	str	r2, [r7, #4]
 80125fe:	72fb      	strb	r3, [r7, #11]
                return;
 8012600:	bf00      	nop
        };
 8012602:	3714      	adds	r7, #20
 8012604:	46bd      	mov	sp, r7
 8012606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260a:	4770      	bx	lr

0801260c <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 801260c:	b480      	push	{r7}
 801260e:	b083      	sub	sp, #12
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
                return;
 8012614:	bf00      	nop
        };
 8012616:	370c      	adds	r7, #12
 8012618:	46bd      	mov	sp, r7
 801261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261e:	4770      	bx	lr

08012620 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 8012620:	b480      	push	{r7}
 8012622:	b083      	sub	sp, #12
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
                return;
 8012628:	bf00      	nop
        }
 801262a:	370c      	adds	r7, #12
 801262c:	46bd      	mov	sp, r7
 801262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012632:	4770      	bx	lr

08012634 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 8012634:	b580      	push	{r7, lr}
 8012636:	b086      	sub	sp, #24
 8012638:	af00      	add	r7, sp, #0
 801263a:	60f8      	str	r0, [r7, #12]
 801263c:	60b9      	str	r1, [r7, #8]
 801263e:	603b      	str	r3, [r7, #0]
 8012640:	4613      	mov	r3, r2
 8012642:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	68b9      	ldr	r1, [r7, #8]
 8012648:	4618      	mov	r0, r3
 801264a:	f7ff ff95 	bl	8012578 <_ZN16BluetoothServiceC1EP3BTD>
 801264e:	4a1f      	ldr	r2, [pc, #124]	; (80126cc <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	601a      	str	r2, [r3, #0]
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	2200      	movs	r2, #0
 8012658:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 801265c:	2300      	movs	r3, #0
 801265e:	75fb      	strb	r3, [r7, #23]
 8012660:	7dfb      	ldrb	r3, [r7, #23]
 8012662:	2b01      	cmp	r3, #1
 8012664:	d809      	bhi.n	801267a <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 8012666:	7dfa      	ldrb	r2, [r7, #23]
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	3208      	adds	r2, #8
 801266c:	2100      	movs	r1, #0
 801266e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8012672:	7dfb      	ldrb	r3, [r7, #23]
 8012674:	3301      	adds	r3, #1
 8012676:	75fb      	strb	r3, [r7, #23]
 8012678:	e7f2      	b.n	8012660 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	689b      	ldr	r3, [r3, #8]
 801267e:	79fa      	ldrb	r2, [r7, #7]
 8012680:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        pBtd->btdPin = pin;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	689b      	ldr	r3, [r3, #8]
 8012688:	683a      	ldr	r2, [r7, #0]
 801268a:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2250      	movs	r2, #80	; 0x50
 8012690:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2200      	movs	r2, #0
 8012698:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2270      	movs	r2, #112	; 0x70
 80126a0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	2200      	movs	r2, #0
 80126a8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2271      	movs	r2, #113	; 0x71
 80126b0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	2200      	movs	r2, #0
 80126b8:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 80126bc:	68f8      	ldr	r0, [r7, #12]
 80126be:	f000 f807 	bl	80126d0 <_ZN5BTHID5ResetEv>
}
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	4618      	mov	r0, r3
 80126c6:	3718      	adds	r7, #24
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd80      	pop	{r7, pc}
 80126cc:	080188d0 	.word	0x080188d0

080126d0 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b082      	sub	sp, #8
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
        connected = false;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2200      	movs	r2, #0
 80126dc:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2200      	movs	r2, #0
 80126e2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2200      	movs	r2, #0
 80126ea:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	2200      	movs	r2, #0
 80126f2:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	220a      	movs	r2, #10
 80126f8:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2200      	movs	r2, #0
 80126fe:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	3320      	adds	r3, #32
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	4798      	blx	r3
}
 801270e:	bf00      	nop
 8012710:	3708      	adds	r7, #8
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}

08012716 <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 8012716:	b590      	push	{r4, r7, lr}
 8012718:	b085      	sub	sp, #20
 801271a:	af02      	add	r7, sp, #8
 801271c:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8012724:	2b00      	cmp	r3, #0
 8012726:	d014      	beq.n	8012752 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6898      	ldr	r0, [r3, #8]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	8999      	ldrh	r1, [r3, #12]
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	7d1b      	ldrb	r3, [r3, #20]
 8012734:	3301      	adds	r3, #1
 8012736:	b2da      	uxtb	r2, r3
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	751a      	strb	r2, [r3, #20]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	7d1a      	ldrb	r2, [r3, #20]
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f103 041b 	add.w	r4, r3, #27
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	336f      	adds	r3, #111	; 0x6f
 801274a:	9300      	str	r3, [sp, #0]
 801274c:	4623      	mov	r3, r4
 801274e:	f7ff f986 	bl	8011a5e <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	6898      	ldr	r0, [r3, #8]
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	8999      	ldrh	r1, [r3, #12]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	7d1b      	ldrb	r3, [r3, #20]
 801275e:	3301      	adds	r3, #1
 8012760:	b2da      	uxtb	r2, r3
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	751a      	strb	r2, [r3, #20]
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	7d1a      	ldrb	r2, [r3, #20]
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f103 0418 	add.w	r4, r3, #24
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	336d      	adds	r3, #109	; 0x6d
 8012774:	9300      	str	r3, [sp, #0]
 8012776:	4623      	mov	r3, r4
 8012778:	f7ff f971 	bl	8011a5e <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	3308      	adds	r3, #8
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	220e      	movs	r2, #14
 801278c:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2209      	movs	r2, #9
 8012792:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 8012796:	bf00      	nop
 8012798:	370c      	adds	r7, #12
 801279a:	46bd      	mov	sp, r7
 801279c:	bd90      	pop	{r4, r7, pc}
	...

080127a0 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 80127a0:	b590      	push	{r4, r7, lr}
 80127a2:	b087      	sub	sp, #28
 80127a4:	af02      	add	r7, sp, #8
 80127a6:	6078      	str	r0, [r7, #4]
 80127a8:	6039      	str	r1, [r7, #0]
        if(!connected) {
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	7d5b      	ldrb	r3, [r3, #21]
 80127ae:	f083 0301 	eor.w	r3, r3, #1
 80127b2:	b2db      	uxtb	r3, r3
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d023      	beq.n	8012800 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	3308      	adds	r3, #8
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	2b02      	cmp	r3, #2
 80127c0:	d11e      	bne.n	8012800 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	330c      	adds	r3, #12
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	461a      	mov	r2, r3
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	330d      	adds	r3, #13
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	021b      	lsls	r3, r3, #8
 80127d2:	4313      	orrs	r3, r2
 80127d4:	2b01      	cmp	r3, #1
 80127d6:	d113      	bne.n	8012800 <_ZN5BTHID7ACLDataEPh+0x60>
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	689b      	ldr	r3, [r3, #8]
 80127dc:	7a9b      	ldrb	r3, [r3, #10]
 80127de:	f083 0301 	eor.w	r3, r3, #1
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d00b      	beq.n	8012800 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	689b      	ldr	r3, [r3, #8]
 80127ec:	2201      	movs	r2, #1
 80127ee:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	8b5a      	ldrh	r2, [r3, #26]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	220a      	movs	r2, #10
 80127fe:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	689b      	ldr	r3, [r3, #8]
 8012804:	7a5b      	ldrb	r3, [r3, #9]
 8012806:	f083 0301 	eor.w	r3, r3, #1
 801280a:	b2db      	uxtb	r3, r3
 801280c:	2b00      	cmp	r3, #0
 801280e:	d03a      	beq.n	8012886 <_ZN5BTHID7ACLDataEPh+0xe6>
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	689b      	ldr	r3, [r3, #8]
 8012814:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8012818:	2b00      	cmp	r3, #0
 801281a:	d034      	beq.n	8012886 <_ZN5BTHID7ACLDataEPh+0xe6>
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	7d5b      	ldrb	r3, [r3, #21]
 8012820:	f083 0301 	eor.w	r3, r3, #1
 8012824:	b2db      	uxtb	r3, r3
 8012826:	2b00      	cmp	r3, #0
 8012828:	d02d      	beq.n	8012886 <_ZN5BTHID7ACLDataEPh+0xe6>
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8012830:	f083 0301 	eor.w	r3, r3, #1
 8012834:	b2db      	uxtb	r3, r3
 8012836:	2b00      	cmp	r3, #0
 8012838:	d025      	beq.n	8012886 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	3308      	adds	r3, #8
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	2b02      	cmp	r3, #2
 8012842:	d120      	bne.n	8012886 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	330c      	adds	r3, #12
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	461a      	mov	r2, r3
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	330d      	adds	r3, #13
 8012850:	781b      	ldrb	r3, [r3, #0]
 8012852:	021b      	lsls	r3, r3, #8
 8012854:	4313      	orrs	r3, r2
 8012856:	2b11      	cmp	r3, #17
 8012858:	d115      	bne.n	8012886 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	689b      	ldr	r3, [r3, #8]
 801285e:	2200      	movs	r2, #0
 8012860:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	689b      	ldr	r3, [r3, #8]
 8012868:	2201      	movs	r2, #1
 801286a:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2201      	movs	r2, #1
 8012870:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	689b      	ldr	r3, [r3, #8]
 8012878:	8b5a      	ldrh	r2, [r3, #26]
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2200      	movs	r2, #0
 8012882:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	899b      	ldrh	r3, [r3, #12]
 801288c:	461a      	mov	r2, r3
 801288e:	6839      	ldr	r1, [r7, #0]
 8012890:	f7ff fe8e 	bl	80125b0 <_ZN16BluetoothService14checkHciHandleEPht>
 8012894:	4603      	mov	r3, r0
 8012896:	2b00      	cmp	r3, #0
 8012898:	f000 8440 	beq.w	801311c <_ZN5BTHID7ACLDataEPh+0x97c>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	3306      	adds	r3, #6
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	461a      	mov	r2, r3
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	3307      	adds	r3, #7
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	021b      	lsls	r3, r3, #8
 80128ac:	4313      	orrs	r3, r2
 80128ae:	2b01      	cmp	r3, #1
 80128b0:	f040 82f8 	bne.w	8012ea4 <_ZN5BTHID7ACLDataEPh+0x704>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	3308      	adds	r3, #8
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	2b01      	cmp	r3, #1
 80128bc:	d142      	bne.n	8012944 <_ZN5BTHID7ACLDataEPh+0x1a4>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nL2CAP Command Rejected - Reason: "), 0x80);
 80128be:	2180      	movs	r1, #128	; 0x80
 80128c0:	489c      	ldr	r0, [pc, #624]	; (8012b34 <_ZN5BTHID7ACLDataEPh+0x394>)
 80128c2:	f003 f9b7 	bl	8015c34 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[13], 0x80);
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	330d      	adds	r3, #13
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	2180      	movs	r1, #128	; 0x80
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7ff fa0f 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 80128d4:	2180      	movs	r1, #128	; 0x80
 80128d6:	4898      	ldr	r0, [pc, #608]	; (8012b38 <_ZN5BTHID7ACLDataEPh+0x398>)
 80128d8:	f003 f9ac 	bl	8015c34 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[12], 0x80);
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	330c      	adds	r3, #12
 80128e0:	781b      	ldrb	r3, [r3, #0]
 80128e2:	2180      	movs	r1, #128	; 0x80
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7ff fa04 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 80128ea:	2180      	movs	r1, #128	; 0x80
 80128ec:	4892      	ldr	r0, [pc, #584]	; (8012b38 <_ZN5BTHID7ACLDataEPh+0x398>)
 80128ee:	f003 f9a1 	bl	8015c34 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[17], 0x80);
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	3311      	adds	r3, #17
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	2180      	movs	r1, #128	; 0x80
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7ff f9f9 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 8012900:	2180      	movs	r1, #128	; 0x80
 8012902:	488d      	ldr	r0, [pc, #564]	; (8012b38 <_ZN5BTHID7ACLDataEPh+0x398>)
 8012904:	f003 f996 	bl	8015c34 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[16], 0x80);
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	3310      	adds	r3, #16
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	2180      	movs	r1, #128	; 0x80
 8012910:	4618      	mov	r0, r3
 8012912:	f7ff f9ee 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 8012916:	2180      	movs	r1, #128	; 0x80
 8012918:	4887      	ldr	r0, [pc, #540]	; (8012b38 <_ZN5BTHID7ACLDataEPh+0x398>)
 801291a:	f003 f98b 	bl	8015c34 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	330f      	adds	r3, #15
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	2180      	movs	r1, #128	; 0x80
 8012926:	4618      	mov	r0, r3
 8012928:	f7ff f9e3 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 801292c:	2180      	movs	r1, #128	; 0x80
 801292e:	4882      	ldr	r0, [pc, #520]	; (8012b38 <_ZN5BTHID7ACLDataEPh+0x398>)
 8012930:	f003 f980 	bl	8015c34 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	330e      	adds	r3, #14
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	2180      	movs	r1, #128	; 0x80
 801293c:	4618      	mov	r0, r3
 801293e:	f7ff f9d8 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
 8012942:	e3e5      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	3308      	adds	r3, #8
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	2b03      	cmp	r3, #3
 801294c:	f040 8091 	bne.w	8012a72 <_ZN5BTHID7ACLDataEPh+0x2d2>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	3310      	adds	r3, #16
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	461a      	mov	r2, r3
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	3311      	adds	r3, #17
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	021b      	lsls	r3, r3, #8
 8012960:	4313      	orrs	r3, r2
 8012962:	2b00      	cmp	r3, #0
 8012964:	f040 83d4 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	3312      	adds	r3, #18
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	461a      	mov	r2, r3
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	3313      	adds	r3, #19
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	021b      	lsls	r3, r3, #8
 8012978:	4313      	orrs	r3, r2
 801297a:	2b00      	cmp	r3, #0
 801297c:	f040 83c8 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	330e      	adds	r3, #14
 8012984:	781a      	ldrb	r2, [r3, #0]
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801298c:	429a      	cmp	r2, r3
 801298e:	d128      	bne.n	80129e2 <_ZN5BTHID7ACLDataEPh+0x242>
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	330f      	adds	r3, #15
 8012994:	781a      	ldrb	r2, [r3, #0]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801299c:	429a      	cmp	r2, r3
 801299e:	d120      	bne.n	80129e2 <_ZN5BTHID7ACLDataEPh+0x242>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	7a5a      	ldrb	r2, [r3, #9]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	7b1a      	ldrb	r2, [r3, #12]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	7b5a      	ldrb	r2, [r3, #13]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
 80129b8:	2180      	movs	r1, #128	; 0x80
 80129ba:	4860      	ldr	r0, [pc, #384]	; (8012b3c <_ZN5BTHID7ACLDataEPh+0x39c>)
 80129bc:	f003 f93a 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                                identifier++;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	7d1b      	ldrb	r3, [r3, #20]
 80129c4:	3301      	adds	r3, #1
 80129c6:	b2da      	uxtb	r2, r3
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6898      	ldr	r0, [r3, #8]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	8999      	ldrh	r1, [r3, #12]
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	7d1a      	ldrb	r2, [r3, #20]
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	331b      	adds	r3, #27
 80129dc:	f7fe ffa1 	bl	8011922 <_ZN3BTD20l2cap_config_requestEthPh>
 80129e0:	e396      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	330e      	adds	r3, #14
 80129e6:	781a      	ldrb	r2, [r3, #0]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d11a      	bne.n	8012a28 <_ZN5BTHID7ACLDataEPh+0x288>
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	330f      	adds	r3, #15
 80129f6:	781a      	ldrb	r2, [r3, #0]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80129fe:	429a      	cmp	r2, r3
 8012a00:	d112      	bne.n	8012a28 <_ZN5BTHID7ACLDataEPh+0x288>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	7a5a      	ldrb	r2, [r3, #9]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	7b1a      	ldrb	r2, [r3, #12]
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	7b5a      	ldrb	r2, [r3, #13]
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	691b      	ldr	r3, [r3, #16]
 8012a1e:	f043 0204 	orr.w	r2, r3, #4
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	611a      	str	r2, [r3, #16]
 8012a26:	e373      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	330e      	adds	r3, #14
 8012a2c:	781a      	ldrb	r2, [r3, #0]
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012a34:	429a      	cmp	r2, r3
 8012a36:	f040 836b 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	330f      	adds	r3, #15
 8012a3e:	781a      	ldrb	r2, [r3, #0]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8012a46:	429a      	cmp	r2, r3
 8012a48:	f040 8362 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	7a5a      	ldrb	r2, [r3, #9]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	7b1a      	ldrb	r2, [r3, #12]
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	7b5a      	ldrb	r2, [r3, #13]
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	691b      	ldr	r3, [r3, #16]
 8012a68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	611a      	str	r2, [r3, #16]
 8012a70:	e34e      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	3308      	adds	r3, #8
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	2b02      	cmp	r3, #2
 8012a7a:	d161      	bne.n	8012b40 <_ZN5BTHID7ACLDataEPh+0x3a0>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	330c      	adds	r3, #12
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	461a      	mov	r2, r3
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	330d      	adds	r3, #13
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	021b      	lsls	r3, r3, #8
 8012a8c:	4313      	orrs	r3, r2
 8012a8e:	2b01      	cmp	r3, #1
 8012a90:	d112      	bne.n	8012ab8 <_ZN5BTHID7ACLDataEPh+0x318>
                                        identifier = l2capinbuf[9];
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	7a5a      	ldrb	r2, [r3, #9]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	7b9a      	ldrb	r2, [r3, #14]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	7bda      	ldrb	r2, [r3, #15]
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	691b      	ldr	r3, [r3, #16]
 8012aae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	611a      	str	r2, [r3, #16]
 8012ab6:	e32b      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	330c      	adds	r3, #12
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	461a      	mov	r2, r3
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	330d      	adds	r3, #13
 8012ac4:	781b      	ldrb	r3, [r3, #0]
 8012ac6:	021b      	lsls	r3, r3, #8
 8012ac8:	4313      	orrs	r3, r2
 8012aca:	2b11      	cmp	r3, #17
 8012acc:	d112      	bne.n	8012af4 <_ZN5BTHID7ACLDataEPh+0x354>
                                        identifier = l2capinbuf[9];
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	7a5a      	ldrb	r2, [r3, #9]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	7b9a      	ldrb	r2, [r3, #14]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	7bda      	ldrb	r2, [r3, #15]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	691b      	ldr	r3, [r3, #16]
 8012aea:	f043 0201 	orr.w	r2, r3, #1
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	611a      	str	r2, [r3, #16]
 8012af2:	e30d      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	330c      	adds	r3, #12
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	461a      	mov	r2, r3
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	330d      	adds	r3, #13
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	021b      	lsls	r3, r3, #8
 8012b04:	4313      	orrs	r3, r2
 8012b06:	2b13      	cmp	r3, #19
 8012b08:	f040 8302 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                        identifier = l2capinbuf[9];
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	7a5a      	ldrb	r2, [r3, #9]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	7b9a      	ldrb	r2, [r3, #14]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	7bda      	ldrb	r2, [r3, #15]
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	691b      	ldr	r3, [r3, #16]
 8012b28:	f043 0210 	orr.w	r2, r3, #16
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	611a      	str	r2, [r3, #16]
 8012b30:	e2ee      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
 8012b32:	bf00      	nop
 8012b34:	08017484 	.word	0x08017484
 8012b38:	080174a8 	.word	0x080174a8
 8012b3c:	080174ac 	.word	0x080174ac
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	3308      	adds	r3, #8
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	2b05      	cmp	r3, #5
 8012b48:	d15e      	bne.n	8012c08 <_ZN5BTHID7ACLDataEPh+0x468>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	3310      	adds	r3, #16
 8012b4e:	781b      	ldrb	r3, [r3, #0]
 8012b50:	461a      	mov	r2, r3
 8012b52:	683b      	ldr	r3, [r7, #0]
 8012b54:	3311      	adds	r3, #17
 8012b56:	781b      	ldrb	r3, [r3, #0]
 8012b58:	021b      	lsls	r3, r3, #8
 8012b5a:	4313      	orrs	r3, r2
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f040 82d7 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	330c      	adds	r3, #12
 8012b66:	781a      	ldrb	r2, [r3, #0]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d112      	bne.n	8012b98 <_ZN5BTHID7ACLDataEPh+0x3f8>
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	330d      	adds	r3, #13
 8012b76:	781a      	ldrb	r2, [r3, #0]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d10a      	bne.n	8012b98 <_ZN5BTHID7ACLDataEPh+0x3f8>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	7a5a      	ldrb	r2, [r3, #9]
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	691b      	ldr	r3, [r3, #16]
 8012b8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	611a      	str	r2, [r3, #16]
 8012b96:	e2bb      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	330c      	adds	r3, #12
 8012b9c:	781a      	ldrb	r2, [r3, #0]
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	d112      	bne.n	8012bce <_ZN5BTHID7ACLDataEPh+0x42e>
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	330d      	adds	r3, #13
 8012bac:	781a      	ldrb	r2, [r3, #0]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d10a      	bne.n	8012bce <_ZN5BTHID7ACLDataEPh+0x42e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	7a5a      	ldrb	r2, [r3, #9]
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	691b      	ldr	r3, [r3, #16]
 8012bc4:	f043 0202 	orr.w	r2, r3, #2
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	611a      	str	r2, [r3, #16]
 8012bcc:	e2a0      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	330c      	adds	r3, #12
 8012bd2:	781a      	ldrb	r2, [r3, #0]
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	f040 8298 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	330d      	adds	r3, #13
 8012be4:	781a      	ldrb	r2, [r3, #0]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8012bec:	429a      	cmp	r2, r3
 8012bee:	f040 828f 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	7a5a      	ldrb	r2, [r3, #9]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	691b      	ldr	r3, [r3, #16]
 8012bfe:	f043 0220 	orr.w	r2, r3, #32
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	611a      	str	r2, [r3, #16]
 8012c06:	e283      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	3308      	adds	r3, #8
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	2b04      	cmp	r3, #4
 8012c10:	d155      	bne.n	8012cbe <_ZN5BTHID7ACLDataEPh+0x51e>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	330c      	adds	r3, #12
 8012c16:	781a      	ldrb	r2, [r3, #0]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8012c1e:	429a      	cmp	r2, r3
 8012c20:	d113      	bne.n	8012c4a <_ZN5BTHID7ACLDataEPh+0x4aa>
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	330d      	adds	r3, #13
 8012c26:	781a      	ldrb	r2, [r3, #0]
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d10b      	bne.n	8012c4a <_ZN5BTHID7ACLDataEPh+0x4aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6898      	ldr	r0, [r3, #8]
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	8999      	ldrh	r1, [r3, #12]
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	3309      	adds	r3, #9
 8012c3e:	781a      	ldrb	r2, [r3, #0]
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	331b      	adds	r3, #27
 8012c44:	f7fe feb8 	bl	80119b8 <_ZN3BTD21l2cap_config_responseEthPh>
 8012c48:	e262      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	330c      	adds	r3, #12
 8012c4e:	781a      	ldrb	r2, [r3, #0]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d113      	bne.n	8012c82 <_ZN5BTHID7ACLDataEPh+0x4e2>
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	330d      	adds	r3, #13
 8012c5e:	781a      	ldrb	r2, [r3, #0]
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d10b      	bne.n	8012c82 <_ZN5BTHID7ACLDataEPh+0x4e2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	6898      	ldr	r0, [r3, #8]
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	8999      	ldrh	r1, [r3, #12]
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	3309      	adds	r3, #9
 8012c76:	781a      	ldrb	r2, [r3, #0]
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	3316      	adds	r3, #22
 8012c7c:	f7fe fe9c 	bl	80119b8 <_ZN3BTD21l2cap_config_responseEthPh>
 8012c80:	e246      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	330c      	adds	r3, #12
 8012c86:	781a      	ldrb	r2, [r3, #0]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	f040 823e 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	330d      	adds	r3, #13
 8012c98:	781a      	ldrb	r2, [r3, #0]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	f040 8235 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6898      	ldr	r0, [r3, #8]
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	8999      	ldrh	r1, [r3, #12]
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	3309      	adds	r3, #9
 8012cb2:	781a      	ldrb	r2, [r3, #0]
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	3318      	adds	r3, #24
 8012cb8:	f7fe fe7e 	bl	80119b8 <_ZN3BTD21l2cap_config_responseEthPh>
 8012cbc:	e228      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	3308      	adds	r3, #8
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	2b06      	cmp	r3, #6
 8012cc6:	d17c      	bne.n	8012dc2 <_ZN5BTHID7ACLDataEPh+0x622>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	330c      	adds	r3, #12
 8012ccc:	781a      	ldrb	r2, [r3, #0]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8012cd4:	429a      	cmp	r2, r3
 8012cd6:	d116      	bne.n	8012d06 <_ZN5BTHID7ACLDataEPh+0x566>
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	330d      	adds	r3, #13
 8012cdc:	781a      	ldrb	r2, [r3, #0]
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d10e      	bne.n	8012d06 <_ZN5BTHID7ACLDataEPh+0x566>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
 8012ce8:	2180      	movs	r1, #128	; 0x80
 8012cea:	4893      	ldr	r0, [pc, #588]	; (8012f38 <_ZN5BTHID7ACLDataEPh+0x798>)
 8012cec:	f002 ffa2 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                        identifier = l2capinbuf[9];
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	7a5a      	ldrb	r2, [r3, #9]
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	691b      	ldr	r3, [r3, #16]
 8012cfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	611a      	str	r2, [r3, #16]
 8012d04:	e204      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	330c      	adds	r3, #12
 8012d0a:	781a      	ldrb	r2, [r3, #0]
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8012d12:	429a      	cmp	r2, r3
 8012d14:	d125      	bne.n	8012d62 <_ZN5BTHID7ACLDataEPh+0x5c2>
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	330d      	adds	r3, #13
 8012d1a:	781a      	ldrb	r2, [r3, #0]
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d11d      	bne.n	8012d62 <_ZN5BTHID7ACLDataEPh+0x5c2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
 8012d26:	2180      	movs	r1, #128	; 0x80
 8012d28:	4884      	ldr	r0, [pc, #528]	; (8012f3c <_ZN5BTHID7ACLDataEPh+0x79c>)
 8012d2a:	f002 ff83 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                        identifier = l2capinbuf[9];
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	7a5a      	ldrb	r2, [r3, #9]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6898      	ldr	r0, [r3, #8]
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	8999      	ldrh	r1, [r3, #12]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	7d1a      	ldrb	r2, [r3, #20]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	3316      	adds	r3, #22
 8012d4c:	9300      	str	r3, [sp, #0]
 8012d4e:	4623      	mov	r3, r4
 8012d50:	f7fe fec2 	bl	8011ad8 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	3308      	adds	r3, #8
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	6878      	ldr	r0, [r7, #4]
 8012d5e:	4798      	blx	r3
 8012d60:	e1d6      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8012d62:	683b      	ldr	r3, [r7, #0]
 8012d64:	330c      	adds	r3, #12
 8012d66:	781a      	ldrb	r2, [r3, #0]
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	f040 81ce 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	330d      	adds	r3, #13
 8012d78:	781a      	ldrb	r2, [r3, #0]
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8012d80:	429a      	cmp	r2, r3
 8012d82:	f040 81c5 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
 8012d86:	2180      	movs	r1, #128	; 0x80
 8012d88:	486d      	ldr	r0, [pc, #436]	; (8012f40 <_ZN5BTHID7ACLDataEPh+0x7a0>)
 8012d8a:	f002 ff53 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                        identifier = l2capinbuf[9];
 8012d8e:	683b      	ldr	r3, [r7, #0]
 8012d90:	7a5a      	ldrb	r2, [r3, #9]
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	6898      	ldr	r0, [r3, #8]
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	8999      	ldrh	r1, [r3, #12]
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	7d1a      	ldrb	r2, [r3, #20]
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	3318      	adds	r3, #24
 8012dac:	9300      	str	r3, [sp, #0]
 8012dae:	4623      	mov	r3, r4
 8012db0:	f7fe fe92 	bl	8011ad8 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	3308      	adds	r3, #8
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	4798      	blx	r3
 8012dc0:	e1a6      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	3308      	adds	r3, #8
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	2b07      	cmp	r3, #7
 8012dca:	d14c      	bne.n	8012e66 <_ZN5BTHID7ACLDataEPh+0x6c6>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	330c      	adds	r3, #12
 8012dd0:	781a      	ldrb	r2, [r3, #0]
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	7edb      	ldrb	r3, [r3, #27]
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d111      	bne.n	8012dfe <_ZN5BTHID7ACLDataEPh+0x65e>
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	330d      	adds	r3, #13
 8012dde:	781a      	ldrb	r2, [r3, #0]
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	7f1b      	ldrb	r3, [r3, #28]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d10a      	bne.n	8012dfe <_ZN5BTHID7ACLDataEPh+0x65e>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	7a5a      	ldrb	r2, [r3, #9]
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	691b      	ldr	r3, [r3, #16]
 8012df4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	611a      	str	r2, [r3, #16]
 8012dfc:	e188      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	330c      	adds	r3, #12
 8012e02:	781a      	ldrb	r2, [r3, #0]
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	7d9b      	ldrb	r3, [r3, #22]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d111      	bne.n	8012e30 <_ZN5BTHID7ACLDataEPh+0x690>
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	330d      	adds	r3, #13
 8012e10:	781a      	ldrb	r2, [r3, #0]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	7ddb      	ldrb	r3, [r3, #23]
 8012e16:	429a      	cmp	r2, r3
 8012e18:	d10a      	bne.n	8012e30 <_ZN5BTHID7ACLDataEPh+0x690>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	7a5a      	ldrb	r2, [r3, #9]
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	691b      	ldr	r3, [r3, #16]
 8012e26:	f043 0208 	orr.w	r2, r3, #8
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	611a      	str	r2, [r3, #16]
 8012e2e:	e16f      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	330c      	adds	r3, #12
 8012e34:	781a      	ldrb	r2, [r3, #0]
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	7e1b      	ldrb	r3, [r3, #24]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	f040 8168 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	330d      	adds	r3, #13
 8012e44:	781a      	ldrb	r2, [r3, #0]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	7e5b      	ldrb	r3, [r3, #25]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	f040 8160 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	7a5a      	ldrb	r2, [r3, #9]
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	691b      	ldr	r3, [r3, #16]
 8012e5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	611a      	str	r2, [r3, #16]
 8012e64:	e154      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	3308      	adds	r3, #8
 8012e6a:	781b      	ldrb	r3, [r3, #0]
 8012e6c:	2b0a      	cmp	r3, #10
 8012e6e:	f040 814f 	bne.w	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
 8012e72:	2180      	movs	r1, #128	; 0x80
 8012e74:	4833      	ldr	r0, [pc, #204]	; (8012f44 <_ZN5BTHID7ACLDataEPh+0x7a4>)
 8012e76:	f002 fedd 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                identifier = l2capinbuf[9];
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	7a5a      	ldrb	r2, [r3, #9]
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	6898      	ldr	r0, [r3, #8]
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	8999      	ldrh	r1, [r3, #12]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	7d1a      	ldrb	r2, [r3, #20]
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	330c      	adds	r3, #12
 8012e92:	781c      	ldrb	r4, [r3, #0]
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	330d      	adds	r3, #13
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	9300      	str	r3, [sp, #0]
 8012e9c:	4623      	mov	r3, r4
 8012e9e:	f7fe fe58 	bl	8011b52 <_ZN3BTD26l2cap_information_responseEthhh>
 8012ea2:	e135      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	3306      	adds	r3, #6
 8012ea8:	781a      	ldrb	r2, [r3, #0]
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	f040 8091 	bne.w	8012fd8 <_ZN5BTHID7ACLDataEPh+0x838>
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	3307      	adds	r3, #7
 8012eba:	781a      	ldrb	r2, [r3, #0]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	f040 8088 	bne.w	8012fd8 <_ZN5BTHID7ACLDataEPh+0x838>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	3308      	adds	r3, #8
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	2b02      	cmp	r3, #2
 8012ed0:	d13a      	bne.n	8012f48 <_ZN5BTHID7ACLDataEPh+0x7a8>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	2203      	movs	r2, #3
 8012ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	7a5a      	ldrb	r2, [r3, #9]
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	7a9a      	ldrb	r2, [r3, #10]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2205      	movs	r2, #5
 8012efa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2200      	movs	r2, #0
 8012f02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2200      	movs	r2, #0
 8012f0a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2200      	movs	r2, #0
 8012f12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2200      	movs	r2, #0
 8012f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2200      	movs	r2, #0
 8012f22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	3328      	adds	r3, #40	; 0x28
 8012f2a:	220a      	movs	r2, #10
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f000 fbca 	bl	80136c8 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8012f34:	e0e9      	b.n	801310a <_ZN5BTHID7ACLDataEPh+0x96a>
 8012f36:	bf00      	nop
 8012f38:	080174c8 	.word	0x080174c8
 8012f3c:	080174ec 	.word	0x080174ec
 8012f40:	08017514 	.word	0x08017514
 8012f44:	0801753c 	.word	0x0801753c
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	3308      	adds	r3, #8
 8012f4c:	781b      	ldrb	r3, [r3, #0]
 8012f4e:	2b04      	cmp	r3, #4
 8012f50:	d131      	bne.n	8012fb6 <_ZN5BTHID7ACLDataEPh+0x816>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2205      	movs	r2, #5
 8012f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	7a5a      	ldrb	r2, [r3, #9]
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 8012f64:	683b      	ldr	r3, [r7, #0]
 8012f66:	7a9a      	ldrb	r2, [r3, #10]
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2200      	movs	r2, #0
 8012f72:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2205      	movs	r2, #5
 8012f7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	2200      	movs	r2, #0
 8012f82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2202      	movs	r2, #2
 8012f8a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2235      	movs	r2, #53	; 0x35
 8012f92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2200      	movs	r2, #0
 8012f9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	3328      	adds	r3, #40	; 0x28
 8012faa:	220a      	movs	r2, #10
 8012fac:	4619      	mov	r1, r3
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f000 fb8a 	bl	80136c8 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8012fb4:	e0a9      	b.n	801310a <_ZN5BTHID7ACLDataEPh+0x96a>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	3308      	adds	r3, #8
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	2b06      	cmp	r3, #6
 8012fbe:	f040 80a4 	bne.w	801310a <_ZN5BTHID7ACLDataEPh+0x96a>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	3309      	adds	r3, #9
 8012fc6:	7819      	ldrb	r1, [r3, #0]
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	330a      	adds	r3, #10
 8012fcc:	781b      	ldrb	r3, [r3, #0]
 8012fce:	461a      	mov	r2, r3
 8012fd0:	6878      	ldr	r0, [r7, #4]
 8012fd2:	f000 fb93 	bl	80136fc <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8012fd6:	e098      	b.n	801310a <_ZN5BTHID7ACLDataEPh+0x96a>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	3306      	adds	r3, #6
 8012fdc:	781a      	ldrb	r2, [r3, #0]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d162      	bne.n	80130ae <_ZN5BTHID7ACLDataEPh+0x90e>
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	3307      	adds	r3, #7
 8012fec:	781a      	ldrb	r2, [r3, #0]
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d15a      	bne.n	80130ae <_ZN5BTHID7ACLDataEPh+0x90e>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	3308      	adds	r3, #8
 8012ffc:	781b      	ldrb	r3, [r3, #0]
 8012ffe:	2ba1      	cmp	r3, #161	; 0xa1
 8013000:	f040 8085 	bne.w	801310e <_ZN5BTHID7ACLDataEPh+0x96e>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 8013004:	f7ef ffe2 	bl	8002fcc <HAL_GetTick>
 8013008:	4602      	mov	r2, r0
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	3305      	adds	r3, #5
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	021b      	lsls	r3, r3, #8
 8013016:	b21a      	sxth	r2, r3
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	3304      	adds	r3, #4
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	b21b      	sxth	r3, r3
 8013020:	4313      	orrs	r3, r2
 8013022:	b21b      	sxth	r3, r3
 8013024:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	3314      	adds	r3, #20
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	89fa      	ldrh	r2, [r7, #14]
 8013030:	b2d2      	uxtb	r2, r2
 8013032:	3a01      	subs	r2, #1
 8013034:	b2d1      	uxtb	r1, r2
 8013036:	683a      	ldr	r2, [r7, #0]
 8013038:	3209      	adds	r2, #9
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 801303e:	683b      	ldr	r3, [r7, #0]
 8013040:	3309      	adds	r3, #9
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	2b01      	cmp	r3, #1
 8013046:	d002      	beq.n	801304e <_ZN5BTHID7ACLDataEPh+0x8ae>
 8013048:	2b02      	cmp	r3, #2
 801304a:	d016      	beq.n	801307a <_ZN5BTHID7ACLDataEPh+0x8da>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 801304c:	e05f      	b.n	801310e <_ZN5BTHID7ACLDataEPh+0x96e>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	6a1b      	ldr	r3, [r3, #32]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d027      	beq.n	80130a6 <_ZN5BTHID7ACLDataEPh+0x906>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6a18      	ldr	r0, [r3, #32]
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	6a1b      	ldr	r3, [r3, #32]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	681c      	ldr	r4, [r3, #0]
 8013062:	89fb      	ldrh	r3, [r7, #14]
 8013064:	b2db      	uxtb	r3, r3
 8013066:	3b02      	subs	r3, #2
 8013068:	b2da      	uxtb	r2, r3
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	330a      	adds	r3, #10
 801306e:	9300      	str	r3, [sp, #0]
 8013070:	4613      	mov	r3, r2
 8013072:	2200      	movs	r2, #0
 8013074:	6879      	ldr	r1, [r7, #4]
 8013076:	47a0      	blx	r4
                                                break;
 8013078:	e015      	b.n	80130a6 <_ZN5BTHID7ACLDataEPh+0x906>
                                                if(pRptParser[MOUSE_PARSER_ID])
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801307e:	2b00      	cmp	r3, #0
 8013080:	d013      	beq.n	80130aa <_ZN5BTHID7ACLDataEPh+0x90a>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	681c      	ldr	r4, [r3, #0]
 801308e:	89fb      	ldrh	r3, [r7, #14]
 8013090:	b2db      	uxtb	r3, r3
 8013092:	3b02      	subs	r3, #2
 8013094:	b2da      	uxtb	r2, r3
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	330a      	adds	r3, #10
 801309a:	9300      	str	r3, [sp, #0]
 801309c:	4613      	mov	r3, r2
 801309e:	2200      	movs	r2, #0
 80130a0:	6879      	ldr	r1, [r7, #4]
 80130a2:	47a0      	blx	r4
                                                break;
 80130a4:	e001      	b.n	80130aa <_ZN5BTHID7ACLDataEPh+0x90a>
                                                break;
 80130a6:	bf00      	nop
 80130a8:	e031      	b.n	801310e <_ZN5BTHID7ACLDataEPh+0x96e>
                                                break;
 80130aa:	bf00      	nop
                        }
 80130ac:	e02f      	b.n	801310e <_ZN5BTHID7ACLDataEPh+0x96e>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	3306      	adds	r3, #6
 80130b2:	781a      	ldrb	r2, [r3, #0]
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d128      	bne.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	3307      	adds	r3, #7
 80130c2:	781a      	ldrb	r2, [r3, #0]
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80130ca:	429a      	cmp	r2, r3
 80130cc:	d120      	bne.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	3308      	adds	r3, #8
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	2ba3      	cmp	r3, #163	; 0xa3
 80130d6:	d11b      	bne.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	3305      	adds	r3, #5
 80130dc:	781b      	ldrb	r3, [r3, #0]
 80130de:	021b      	lsls	r3, r3, #8
 80130e0:	b21a      	sxth	r2, r3
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	3304      	adds	r3, #4
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	b21b      	sxth	r3, r3
 80130ea:	4313      	orrs	r3, r2
 80130ec:	b21b      	sxth	r3, r3
 80130ee:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	3318      	adds	r3, #24
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	89ba      	ldrh	r2, [r7, #12]
 80130fa:	b2d2      	uxtb	r2, r2
 80130fc:	3a01      	subs	r2, #1
 80130fe:	b2d1      	uxtb	r1, r2
 8013100:	683a      	ldr	r2, [r7, #0]
 8013102:	3209      	adds	r2, #9
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	4798      	blx	r3
 8013108:	e002      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801310a:	bf00      	nop
 801310c:	e000      	b.n	8013110 <_ZN5BTHID7ACLDataEPh+0x970>
                        }
 801310e:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f000 f807 	bl	8013124 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f000 f8cc 	bl	80132b4 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 801311c:	bf00      	nop
 801311e:	3714      	adds	r7, #20
 8013120:	46bd      	mov	sp, r7
 8013122:	bd90      	pop	{r4, r7, pc}

08013124 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 8013124:	b5b0      	push	{r4, r5, r7, lr}
 8013126:	b084      	sub	sp, #16
 8013128:	af02      	add	r7, sp, #8
 801312a:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	7e9b      	ldrb	r3, [r3, #26]
 8013130:	2b0e      	cmp	r3, #14
 8013132:	f000 8090 	beq.w	8013256 <_ZN5BTHID8SDP_taskEv+0x132>
 8013136:	2b0e      	cmp	r3, #14
 8013138:	f300 80af 	bgt.w	801329a <_ZN5BTHID8SDP_taskEv+0x176>
 801313c:	2b0a      	cmp	r3, #10
 801313e:	d002      	beq.n	8013146 <_ZN5BTHID8SDP_taskEv+0x22>
 8013140:	2b0b      	cmp	r3, #11
 8013142:	d070      	beq.n	8013226 <_ZN5BTHID8SDP_taskEv+0x102>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 8013144:	e0a9      	b.n	801329a <_ZN5BTHID8SDP_taskEv+0x176>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	691b      	ldr	r3, [r3, #16]
 801314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801314e:	2b00      	cmp	r3, #0
 8013150:	d045      	beq.n	80131de <_ZN5BTHID8SDP_taskEv+0xba>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	691b      	ldr	r3, [r3, #16]
 8013156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	611a      	str	r2, [r3, #16]
                                Notify(PSTR("\r\nSDP Incoming Connection Request"), 0x80);
 801315e:	2180      	movs	r1, #128	; 0x80
 8013160:	4850      	ldr	r0, [pc, #320]	; (80132a4 <_ZN5BTHID8SDP_taskEv+0x180>)
 8013162:	f002 fd67 	bl	8015c34 <_Z8E_NotifyPKci>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	6898      	ldr	r0, [r3, #8]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	8999      	ldrh	r1, [r3, #12]
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	7d1a      	ldrb	r2, [r3, #20]
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	331b      	adds	r3, #27
 801317c:	2501      	movs	r5, #1
 801317e:	9501      	str	r5, [sp, #4]
 8013180:	9300      	str	r3, [sp, #0]
 8013182:	4623      	mov	r3, r4
 8013184:	f7fe fb80 	bl	8011888 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8013188:	2001      	movs	r0, #1
 801318a:	f7ef ff2b 	bl	8002fe4 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6898      	ldr	r0, [r3, #8]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	8999      	ldrh	r1, [r3, #12]
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	7d1a      	ldrb	r2, [r3, #20]
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	331b      	adds	r3, #27
 80131a4:	2500      	movs	r5, #0
 80131a6:	9501      	str	r5, [sp, #4]
 80131a8:	9300      	str	r3, [sp, #0]
 80131aa:	4623      	mov	r3, r4
 80131ac:	f7fe fb6c 	bl	8011888 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	7d1b      	ldrb	r3, [r3, #20]
 80131b4:	3301      	adds	r3, #1
 80131b6:	b2da      	uxtb	r2, r3
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80131bc:	2001      	movs	r0, #1
 80131be:	f7ef ff11 	bl	8002fe4 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6898      	ldr	r0, [r3, #8]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	8999      	ldrh	r1, [r3, #12]
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	7d1a      	ldrb	r2, [r3, #20]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	331b      	adds	r3, #27
 80131d2:	f7fe fba6 	bl	8011922 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	220b      	movs	r2, #11
 80131da:	769a      	strb	r2, [r3, #26]
                        break;
 80131dc:	e058      	b.n	8013290 <_ZN5BTHID8SDP_taskEv+0x16c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	691b      	ldr	r3, [r3, #16]
 80131e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d052      	beq.n	8013290 <_ZN5BTHID8SDP_taskEv+0x16c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	691b      	ldr	r3, [r3, #16]
 80131ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2200      	movs	r2, #0
 80131fa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                Notify(PSTR("\r\nDisconnected SDP Channel"), 0x80);
 80131fe:	2180      	movs	r1, #128	; 0x80
 8013200:	4829      	ldr	r0, [pc, #164]	; (80132a8 <_ZN5BTHID8SDP_taskEv+0x184>)
 8013202:	f002 fd17 	bl	8015c34 <_Z8E_NotifyPKci>
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6898      	ldr	r0, [r3, #8]
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	8999      	ldrh	r1, [r3, #12]
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	7d1a      	ldrb	r2, [r3, #20]
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	331b      	adds	r3, #27
 801321c:	9300      	str	r3, [sp, #0]
 801321e:	4623      	mov	r3, r4
 8013220:	f7fe fc5a 	bl	8011ad8 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8013224:	e034      	b.n	8013290 <_ZN5BTHID8SDP_taskEv+0x16c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	691b      	ldr	r3, [r3, #16]
 801322a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801322e:	2b00      	cmp	r3, #0
 8013230:	d030      	beq.n	8013294 <_ZN5BTHID8SDP_taskEv+0x170>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	691b      	ldr	r3, [r3, #16]
 8013236:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	611a      	str	r2, [r3, #16]
                                Notify(PSTR("\r\nSDP Successfully Configured"), 0x80);
 801323e:	2180      	movs	r1, #128	; 0x80
 8013240:	481a      	ldr	r0, [pc, #104]	; (80132ac <_ZN5BTHID8SDP_taskEv+0x188>)
 8013242:	f002 fcf7 	bl	8015c34 <_Z8E_NotifyPKci>
                                SDPConnected = true;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2201      	movs	r2, #1
 801324a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	220a      	movs	r2, #10
 8013252:	769a      	strb	r2, [r3, #26]
                        break;
 8013254:	e01e      	b.n	8013294 <_ZN5BTHID8SDP_taskEv+0x170>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	691b      	ldr	r3, [r3, #16]
 801325a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801325e:	2b00      	cmp	r3, #0
 8013260:	d01a      	beq.n	8013298 <_ZN5BTHID8SDP_taskEv+0x174>
                                Notify(PSTR("\r\nDisconnected L2CAP Connection"), 0x80);
 8013262:	2180      	movs	r1, #128	; 0x80
 8013264:	4812      	ldr	r0, [pc, #72]	; (80132b0 <_ZN5BTHID8SDP_taskEv+0x18c>)
 8013266:	f002 fce5 	bl	8015c34 <_Z8E_NotifyPKci>
                                pBtd->hci_disconnect(hci_handle);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	689a      	ldr	r2, [r3, #8]
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	899b      	ldrh	r3, [r3, #12]
 8013272:	4619      	mov	r1, r3
 8013274:	4610      	mov	r0, r2
 8013276:	f7fe f9b7 	bl	80115e8 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013280:	819a      	strh	r2, [r3, #12]
                                Reset();
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	3308      	adds	r3, #8
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	4798      	blx	r3
                        break;
 801328e:	e003      	b.n	8013298 <_ZN5BTHID8SDP_taskEv+0x174>
                        break;
 8013290:	bf00      	nop
 8013292:	e002      	b.n	801329a <_ZN5BTHID8SDP_taskEv+0x176>
                        break;
 8013294:	bf00      	nop
 8013296:	e000      	b.n	801329a <_ZN5BTHID8SDP_taskEv+0x176>
                        break;
 8013298:	bf00      	nop
}
 801329a:	bf00      	nop
 801329c:	3708      	adds	r7, #8
 801329e:	46bd      	mov	sp, r7
 80132a0:	bdb0      	pop	{r4, r5, r7, pc}
 80132a2:	bf00      	nop
 80132a4:	08017554 	.word	0x08017554
 80132a8:	08017578 	.word	0x08017578
 80132ac:	08017594 	.word	0x08017594
 80132b0:	080175b4 	.word	0x080175b4

080132b4 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 80132b4:	b5b0      	push	{r4, r5, r7, lr}
 80132b6:	b084      	sub	sp, #16
 80132b8:	af02      	add	r7, sp, #8
 80132ba:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80132c2:	3b01      	subs	r3, #1
 80132c4:	2b08      	cmp	r3, #8
 80132c6:	f200 814d 	bhi.w	8013564 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
 80132ca:	a201      	add	r2, pc, #4	; (adr r2, 80132d0 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 80132cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132d0:	08013543 	.word	0x08013543
 80132d4:	080133ab 	.word	0x080133ab
 80132d8:	080133eb 	.word	0x080133eb
 80132dc:	080132f5 	.word	0x080132f5
 80132e0:	08013507 	.word	0x08013507
 80132e4:	0801331b 	.word	0x0801331b
 80132e8:	0801343b 	.word	0x0801343b
 80132ec:	0801347b 	.word	0x0801347b
 80132f0:	080134bf 	.word	0x080134bf
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	691b      	ldr	r3, [r3, #16]
 80132f8:	f003 0302 	and.w	r3, r3, #2
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	f000 8122 	beq.w	8013546 <_ZN5BTHID10L2CAP_taskEv+0x292>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
 8013302:	2180      	movs	r1, #128	; 0x80
 8013304:	4899      	ldr	r0, [pc, #612]	; (801356c <_ZN5BTHID10L2CAP_taskEv+0x2b8>)
 8013306:	f002 fc95 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f000 fa32 	bl	8013774 <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2206      	movs	r2, #6
 8013314:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8013318:	e115      	b.n	8013546 <_ZN5BTHID10L2CAP_taskEv+0x292>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	691b      	ldr	r3, [r3, #16]
 801331e:	f003 0310 	and.w	r3, r3, #16
 8013322:	2b00      	cmp	r3, #0
 8013324:	f000 8111 	beq.w	801354a <_ZN5BTHID10L2CAP_taskEv+0x296>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
 8013328:	2180      	movs	r1, #128	; 0x80
 801332a:	4891      	ldr	r0, [pc, #580]	; (8013570 <_ZN5BTHID10L2CAP_taskEv+0x2bc>)
 801332c:	f002 fc82 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6898      	ldr	r0, [r3, #8]
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	8999      	ldrh	r1, [r3, #12]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	7d1a      	ldrb	r2, [r3, #20]
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	3318      	adds	r3, #24
 8013346:	2501      	movs	r5, #1
 8013348:	9501      	str	r5, [sp, #4]
 801334a:	9300      	str	r3, [sp, #0]
 801334c:	4623      	mov	r3, r4
 801334e:	f7fe fa9b 	bl	8011888 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8013352:	2001      	movs	r0, #1
 8013354:	f7ef fe46 	bl	8002fe4 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6898      	ldr	r0, [r3, #8]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	8999      	ldrh	r1, [r3, #12]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	7d1a      	ldrb	r2, [r3, #20]
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	3318      	adds	r3, #24
 801336e:	2500      	movs	r5, #0
 8013370:	9501      	str	r5, [sp, #4]
 8013372:	9300      	str	r3, [sp, #0]
 8013374:	4623      	mov	r3, r4
 8013376:	f7fe fa87 	bl	8011888 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	7d1b      	ldrb	r3, [r3, #20]
 801337e:	3301      	adds	r3, #1
 8013380:	b2da      	uxtb	r2, r3
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8013386:	2001      	movs	r0, #1
 8013388:	f7ef fe2c 	bl	8002fe4 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	6898      	ldr	r0, [r3, #8]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	8999      	ldrh	r1, [r3, #12]
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	7d1a      	ldrb	r2, [r3, #20]
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	3318      	adds	r3, #24
 801339c:	f7fe fac1 	bl	8011922 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2208      	movs	r2, #8
 80133a4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80133a8:	e0cf      	b.n	801354a <_ZN5BTHID10L2CAP_taskEv+0x296>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	691b      	ldr	r3, [r3, #16]
 80133ae:	f003 0304 	and.w	r3, r3, #4
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	f000 80cb 	beq.w	801354e <_ZN5BTHID10L2CAP_taskEv+0x29a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
 80133b8:	2180      	movs	r1, #128	; 0x80
 80133ba:	486e      	ldr	r0, [pc, #440]	; (8013574 <_ZN5BTHID10L2CAP_taskEv+0x2c0>)
 80133bc:	f002 fc3a 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	7d1b      	ldrb	r3, [r3, #20]
 80133c4:	3301      	adds	r3, #1
 80133c6:	b2da      	uxtb	r2, r3
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6898      	ldr	r0, [r3, #8]
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	8999      	ldrh	r1, [r3, #12]
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	7d1a      	ldrb	r2, [r3, #20]
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	3316      	adds	r3, #22
 80133dc:	f7fe faa1 	bl	8011922 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2203      	movs	r2, #3
 80133e4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80133e8:	e0b1      	b.n	801354e <_ZN5BTHID10L2CAP_taskEv+0x29a>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	691b      	ldr	r3, [r3, #16]
 80133ee:	f003 0302 	and.w	r3, r3, #2
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	f000 80ad 	beq.w	8013552 <_ZN5BTHID10L2CAP_taskEv+0x29e>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f000 f9bb 	bl	8013774 <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 80133fe:	2001      	movs	r0, #1
 8013400:	f7ef fdf0 	bl	8002fe4 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
 8013404:	2180      	movs	r1, #128	; 0x80
 8013406:	485c      	ldr	r0, [pc, #368]	; (8013578 <_ZN5BTHID10L2CAP_taskEv+0x2c4>)
 8013408:	f002 fc14 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	7d1b      	ldrb	r3, [r3, #20]
 8013410:	3301      	adds	r3, #1
 8013412:	b2da      	uxtb	r2, r3
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6898      	ldr	r0, [r3, #8]
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	8999      	ldrh	r1, [r3, #12]
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	7d1a      	ldrb	r2, [r3, #20]
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	336d      	adds	r3, #109	; 0x6d
 8013428:	2413      	movs	r4, #19
 801342a:	9400      	str	r4, [sp, #0]
 801342c:	f7fe f9ee 	bl	801180c <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2207      	movs	r2, #7
 8013434:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8013438:	e08b      	b.n	8013552 <_ZN5BTHID10L2CAP_taskEv+0x29e>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	691b      	ldr	r3, [r3, #16]
 801343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013442:	2b00      	cmp	r3, #0
 8013444:	f000 8087 	beq.w	8013556 <_ZN5BTHID10L2CAP_taskEv+0x2a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
 8013448:	2180      	movs	r1, #128	; 0x80
 801344a:	484c      	ldr	r0, [pc, #304]	; (801357c <_ZN5BTHID10L2CAP_taskEv+0x2c8>)
 801344c:	f002 fbf2 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	7d1b      	ldrb	r3, [r3, #20]
 8013454:	3301      	adds	r3, #1
 8013456:	b2da      	uxtb	r2, r3
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	6898      	ldr	r0, [r3, #8]
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	8999      	ldrh	r1, [r3, #12]
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	7d1a      	ldrb	r2, [r3, #20]
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	3318      	adds	r3, #24
 801346c:	f7fe fa59 	bl	8011922 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2208      	movs	r2, #8
 8013474:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8013478:	e06d      	b.n	8013556 <_ZN5BTHID10L2CAP_taskEv+0x2a2>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	691b      	ldr	r3, [r3, #16]
 801347e:	f003 0320 	and.w	r3, r3, #32
 8013482:	2b00      	cmp	r3, #0
 8013484:	d069      	beq.n	801355a <_ZN5BTHID10L2CAP_taskEv+0x2a6>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
 8013486:	2180      	movs	r1, #128	; 0x80
 8013488:	483d      	ldr	r0, [pc, #244]	; (8013580 <_ZN5BTHID10L2CAP_taskEv+0x2cc>)
 801348a:	f002 fbd3 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                pBtd->connectToHIDDevice = false;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	689b      	ldr	r3, [r3, #8]
 8013492:	2200      	movs	r2, #0
 8013494:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                                pBtd->pairWithHIDDevice = false;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	689b      	ldr	r3, [r3, #8]
 801349c:	2200      	movs	r2, #0
 801349e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                                connected = true;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2201      	movs	r2, #1
 80134a6:	755a      	strb	r2, [r3, #21]
                                onInit();
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	3310      	adds	r3, #16
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2201      	movs	r2, #1
 80134b8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80134bc:	e04d      	b.n	801355a <_ZN5BTHID10L2CAP_taskEv+0x2a6>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	691b      	ldr	r3, [r3, #16]
 80134c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d049      	beq.n	801355e <_ZN5BTHID10L2CAP_taskEv+0x2aa>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
 80134ca:	2180      	movs	r1, #128	; 0x80
 80134cc:	482d      	ldr	r0, [pc, #180]	; (8013584 <_ZN5BTHID10L2CAP_taskEv+0x2d0>)
 80134ce:	f002 fbb1 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	7d1b      	ldrb	r3, [r3, #20]
 80134d6:	3301      	adds	r3, #1
 80134d8:	b2da      	uxtb	r2, r3
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6898      	ldr	r0, [r3, #8]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	8999      	ldrh	r1, [r3, #12]
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	7d1a      	ldrb	r2, [r3, #20]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f103 0416 	add.w	r4, r3, #22
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	336b      	adds	r3, #107	; 0x6b
 80134f4:	9300      	str	r3, [sp, #0]
 80134f6:	4623      	mov	r3, r4
 80134f8:	f7fe fab1 	bl	8011a5e <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2205      	movs	r2, #5
 8013500:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8013504:	e02b      	b.n	801355e <_ZN5BTHID10L2CAP_taskEv+0x2aa>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	691b      	ldr	r3, [r3, #16]
 801350a:	f003 0308 	and.w	r3, r3, #8
 801350e:	2b00      	cmp	r3, #0
 8013510:	d027      	beq.n	8013562 <_ZN5BTHID10L2CAP_taskEv+0x2ae>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
 8013512:	2180      	movs	r1, #128	; 0x80
 8013514:	481c      	ldr	r0, [pc, #112]	; (8013588 <_ZN5BTHID10L2CAP_taskEv+0x2d4>)
 8013516:	f002 fb8d 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                pBtd->hci_disconnect(hci_handle);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	689a      	ldr	r2, [r3, #8]
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	899b      	ldrh	r3, [r3, #12]
 8013522:	4619      	mov	r1, r3
 8013524:	4610      	mov	r0, r2
 8013526:	f7fe f85f 	bl	80115e8 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013530:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2200      	movs	r2, #0
 8013536:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2200      	movs	r2, #0
 801353c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8013540:	e00f      	b.n	8013562 <_ZN5BTHID10L2CAP_taskEv+0x2ae>
                        break;
 8013542:	bf00      	nop
 8013544:	e00e      	b.n	8013564 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8013546:	bf00      	nop
 8013548:	e00c      	b.n	8013564 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 801354a:	bf00      	nop
 801354c:	e00a      	b.n	8013564 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 801354e:	bf00      	nop
 8013550:	e008      	b.n	8013564 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8013552:	bf00      	nop
 8013554:	e006      	b.n	8013564 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8013556:	bf00      	nop
 8013558:	e004      	b.n	8013564 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 801355a:	bf00      	nop
 801355c:	e002      	b.n	8013564 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 801355e:	bf00      	nop
 8013560:	e000      	b.n	8013564 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8013562:	bf00      	nop
        }
}
 8013564:	bf00      	nop
 8013566:	3708      	adds	r7, #8
 8013568:	46bd      	mov	sp, r7
 801356a:	bdb0      	pop	{r4, r5, r7, pc}
 801356c:	080175d4 	.word	0x080175d4
 8013570:	080175fc 	.word	0x080175fc
 8013574:	08017628 	.word	0x08017628
 8013578:	0801764c 	.word	0x0801764c
 801357c:	08017674 	.word	0x08017674
 8013580:	08017698 	.word	0x08017698
 8013584:	080176b4 	.word	0x080176b4
 8013588:	080176d8 	.word	0x080176d8

0801358c <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 801358c:	b5b0      	push	{r4, r5, r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af02      	add	r7, sp, #8
 8013592:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801359a:	2b00      	cmp	r3, #0
 801359c:	f040 808c 	bne.w	80136b8 <_ZN5BTHID3RunEv+0x12c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	689b      	ldr	r3, [r3, #8]
 80135a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d03e      	beq.n	801362a <_ZN5BTHID3RunEv+0x9e>
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	689b      	ldr	r3, [r3, #8]
 80135b0:	7a5b      	ldrb	r3, [r3, #9]
 80135b2:	f083 0301 	eor.w	r3, r3, #1
 80135b6:	b2db      	uxtb	r3, r3
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d036      	beq.n	801362a <_ZN5BTHID3RunEv+0x9e>
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	7d5b      	ldrb	r3, [r3, #21]
 80135c0:	f083 0301 	eor.w	r3, r3, #1
 80135c4:	b2db      	uxtb	r3, r3
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d02f      	beq.n	801362a <_ZN5BTHID3RunEv+0x9e>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80135d0:	f083 0301 	eor.w	r3, r3, #1
 80135d4:	b2db      	uxtb	r3, r3
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d027      	beq.n	801362a <_ZN5BTHID3RunEv+0x9e>
                                pBtd->l2capConnectionClaimed = true;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	689b      	ldr	r3, [r3, #8]
 80135de:	2201      	movs	r2, #1
 80135e0:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2201      	movs	r2, #1
 80135e6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
 80135ea:	2180      	movs	r1, #128	; 0x80
 80135ec:	4834      	ldr	r0, [pc, #208]	; (80136c0 <_ZN5BTHID3RunEv+0x134>)
 80135ee:	f002 fb21 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	689b      	ldr	r3, [r3, #8]
 80135f6:	8b5a      	ldrh	r2, [r3, #26]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2200      	movs	r2, #0
 8013600:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2200      	movs	r2, #0
 8013606:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6898      	ldr	r0, [r3, #8]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	8999      	ldrh	r1, [r3, #12]
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	7d1a      	ldrb	r2, [r3, #20]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	336b      	adds	r3, #107	; 0x6b
 8013618:	2411      	movs	r4, #17
 801361a:	9400      	str	r4, [sp, #0]
 801361c:	f7fe f8f6 	bl	801180c <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2202      	movs	r2, #2
 8013624:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 8013628:	e045      	b.n	80136b6 <_ZN5BTHID3RunEv+0x12a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	691b      	ldr	r3, [r3, #16]
 801362e:	f003 0301 	and.w	r3, r3, #1
 8013632:	2b00      	cmp	r3, #0
 8013634:	d03f      	beq.n	80136b6 <_ZN5BTHID3RunEv+0x12a>
                                Notify(PSTR("\r\nHID Control Incoming Connection Request"), 0x80);
 8013636:	2180      	movs	r1, #128	; 0x80
 8013638:	4822      	ldr	r0, [pc, #136]	; (80136c4 <_ZN5BTHID3RunEv+0x138>)
 801363a:	f002 fafb 	bl	8015c34 <_Z8E_NotifyPKci>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6898      	ldr	r0, [r3, #8]
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	8999      	ldrh	r1, [r3, #12]
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	7d1a      	ldrb	r2, [r3, #20]
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	3316      	adds	r3, #22
 8013654:	2501      	movs	r5, #1
 8013656:	9501      	str	r5, [sp, #4]
 8013658:	9300      	str	r3, [sp, #0]
 801365a:	4623      	mov	r3, r4
 801365c:	f7fe f914 	bl	8011888 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8013660:	2001      	movs	r0, #1
 8013662:	f7ef fcbf 	bl	8002fe4 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6898      	ldr	r0, [r3, #8]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	8999      	ldrh	r1, [r3, #12]
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	7d1a      	ldrb	r2, [r3, #20]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	3316      	adds	r3, #22
 801367c:	2500      	movs	r5, #0
 801367e:	9501      	str	r5, [sp, #4]
 8013680:	9300      	str	r3, [sp, #0]
 8013682:	4623      	mov	r3, r4
 8013684:	f7fe f900 	bl	8011888 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	7d1b      	ldrb	r3, [r3, #20]
 801368c:	3301      	adds	r3, #1
 801368e:	b2da      	uxtb	r2, r3
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8013694:	2001      	movs	r0, #1
 8013696:	f7ef fca5 	bl	8002fe4 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6898      	ldr	r0, [r3, #8]
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	8999      	ldrh	r1, [r3, #12]
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	7d1a      	ldrb	r2, [r3, #20]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	3316      	adds	r3, #22
 80136aa:	f7fe f93a 	bl	8011922 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2204      	movs	r2, #4
 80136b2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 80136b6:	bf00      	nop
        }
}
 80136b8:	bf00      	nop
 80136ba:	3708      	adds	r7, #8
 80136bc:	46bd      	mov	sp, r7
 80136be:	bdb0      	pop	{r4, r5, r7, pc}
 80136c0:	080176f8 	.word	0x080176f8
 80136c4:	08017720 	.word	0x08017720

080136c8 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 80136c8:	b590      	push	{r4, r7, lr}
 80136ca:	b087      	sub	sp, #28
 80136cc:	af02      	add	r7, sp, #8
 80136ce:	60f8      	str	r0, [r7, #12]
 80136d0:	60b9      	str	r1, [r7, #8]
 80136d2:	4613      	mov	r3, r2
 80136d4:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	6898      	ldr	r0, [r3, #8]
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	8999      	ldrh	r1, [r3, #12]
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	7edb      	ldrb	r3, [r3, #27]
 80136e2:	68fa      	ldr	r2, [r7, #12]
 80136e4:	7f12      	ldrb	r2, [r2, #28]
 80136e6:	79fc      	ldrb	r4, [r7, #7]
 80136e8:	9201      	str	r2, [sp, #4]
 80136ea:	9300      	str	r3, [sp, #0]
 80136ec:	4623      	mov	r3, r4
 80136ee:	68ba      	ldr	r2, [r7, #8]
 80136f0:	f7fd ffda 	bl	80116a8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80136f4:	bf00      	nop
 80136f6:	3714      	adds	r7, #20
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd90      	pop	{r4, r7, pc}

080136fc <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b082      	sub	sp, #8
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
 8013704:	460b      	mov	r3, r1
 8013706:	70fb      	strb	r3, [r7, #3]
 8013708:	4613      	mov	r3, r2
 801370a:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2207      	movs	r2, #7
 8013710:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	78fa      	ldrb	r2, [r7, #3]
 8013718:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	78ba      	ldrb	r2, [r7, #2]
 8013720:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	2200      	movs	r2, #0
 8013728:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	2205      	movs	r2, #5
 8013730:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2200      	movs	r2, #0
 8013738:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2202      	movs	r2, #2
 8013740:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2235      	movs	r2, #53	; 0x35
 8013748:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2200      	movs	r2, #0
 8013750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	2200      	movs	r2, #0
 8013758:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	3328      	adds	r3, #40	; 0x28
 8013760:	220a      	movs	r2, #10
 8013762:	4619      	mov	r1, r3
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f7ff ffaf 	bl	80136c8 <_ZN5BTHID11SDP_CommandEPhh>
}
 801376a:	bf00      	nop
 801376c:	3708      	adds	r7, #8
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
	...

08013774 <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 8013774:	b590      	push	{r4, r7, lr}
 8013776:	b087      	sub	sp, #28
 8013778:	af02      	add	r7, sp, #8
 801377a:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
 801377c:	2180      	movs	r1, #128	; 0x80
 801377e:	481b      	ldr	r0, [pc, #108]	; (80137ec <_ZN5BTHID11setProtocolEv+0x78>)
 8013780:	f002 fa58 	bl	8015c34 <_Z8E_NotifyPKci>
        D_PrintHex<uint8_t > (protocolMode, 0x80);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801378a:	2180      	movs	r1, #128	; 0x80
 801378c:	4618      	mov	r0, r3
 801378e:	f7fe fab0 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8013798:	2b00      	cmp	r3, #0
 801379a:	d00c      	beq.n	80137b6 <_ZN5BTHID11setProtocolEv+0x42>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80137a2:	2b01      	cmp	r3, #1
 80137a4:	d007      	beq.n	80137b6 <_ZN5BTHID11setProtocolEv+0x42>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
 80137a6:	2180      	movs	r1, #128	; 0x80
 80137a8:	4811      	ldr	r0, [pc, #68]	; (80137f0 <_ZN5BTHID11setProtocolEv+0x7c>)
 80137aa:	f002 fa43 	bl	8015c34 <_Z8E_NotifyPKci>
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	2200      	movs	r2, #0
 80137b2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80137bc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80137c0:	b2db      	uxtb	r3, r3
 80137c2:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6898      	ldr	r0, [r3, #8]
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	8999      	ldrh	r1, [r3, #12]
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	7d9b      	ldrb	r3, [r3, #22]
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	7dd2      	ldrb	r2, [r2, #23]
 80137d4:	f107 040f 	add.w	r4, r7, #15
 80137d8:	9201      	str	r2, [sp, #4]
 80137da:	9300      	str	r3, [sp, #0]
 80137dc:	2301      	movs	r3, #1
 80137de:	4622      	mov	r2, r4
 80137e0:	f7fd ff62 	bl	80116a8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80137e4:	bf00      	nop
 80137e6:	3714      	adds	r7, #20
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd90      	pop	{r4, r7, pc}
 80137ec:	0801774c 	.word	0x0801774c
 80137f0:	08017764 	.word	0x08017764

080137f4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 80137f4:	b480      	push	{r7}
 80137f6:	b083      	sub	sp, #12
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	460b      	mov	r3, r1
 80137fe:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 8013800:	78fb      	ldrb	r3, [r7, #3]
 8013802:	2b03      	cmp	r3, #3
 8013804:	d86e      	bhi.n	80138e4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 8013806:	a201      	add	r2, pc, #4	; (adr r2, 801380c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 8013808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801380c:	0801381d 	.word	0x0801381d
 8013810:	0801384f 	.word	0x0801384f
 8013814:	08013881 	.word	0x08013881
 8013818:	080138b3 	.word	0x080138b3
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	7a1b      	ldrb	r3, [r3, #8]
 8013820:	f003 030f 	and.w	r3, r3, #15
 8013824:	b2db      	uxtb	r3, r3
 8013826:	2b07      	cmp	r3, #7
 8013828:	d00d      	beq.n	8013846 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	7a1b      	ldrb	r3, [r3, #8]
 801382e:	f003 030f 	and.w	r3, r3, #15
 8013832:	b2db      	uxtb	r3, r3
 8013834:	2b00      	cmp	r3, #0
 8013836:	d006      	beq.n	8013846 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	7a1b      	ldrb	r3, [r3, #8]
 801383c:	f003 030f 	and.w	r3, r3, #15
 8013840:	b2db      	uxtb	r3, r3
 8013842:	2b01      	cmp	r3, #1
 8013844:	d101      	bne.n	801384a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 8013846:	2301      	movs	r3, #1
 8013848:	e04d      	b.n	80138e6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 801384a:	2300      	movs	r3, #0
 801384c:	e04b      	b.n	80138e6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	7a1b      	ldrb	r3, [r3, #8]
 8013852:	f003 030f 	and.w	r3, r3, #15
 8013856:	b2db      	uxtb	r3, r3
 8013858:	2b01      	cmp	r3, #1
 801385a:	d00d      	beq.n	8013878 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	7a1b      	ldrb	r3, [r3, #8]
 8013860:	f003 030f 	and.w	r3, r3, #15
 8013864:	b2db      	uxtb	r3, r3
 8013866:	2b02      	cmp	r3, #2
 8013868:	d006      	beq.n	8013878 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	7a1b      	ldrb	r3, [r3, #8]
 801386e:	f003 030f 	and.w	r3, r3, #15
 8013872:	b2db      	uxtb	r3, r3
 8013874:	2b03      	cmp	r3, #3
 8013876:	d101      	bne.n	801387c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 8013878:	2301      	movs	r3, #1
 801387a:	e034      	b.n	80138e6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 801387c:	2300      	movs	r3, #0
 801387e:	e032      	b.n	80138e6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	7a1b      	ldrb	r3, [r3, #8]
 8013884:	f003 030f 	and.w	r3, r3, #15
 8013888:	b2db      	uxtb	r3, r3
 801388a:	2b03      	cmp	r3, #3
 801388c:	d00d      	beq.n	80138aa <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	7a1b      	ldrb	r3, [r3, #8]
 8013892:	f003 030f 	and.w	r3, r3, #15
 8013896:	b2db      	uxtb	r3, r3
 8013898:	2b04      	cmp	r3, #4
 801389a:	d006      	beq.n	80138aa <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	7a1b      	ldrb	r3, [r3, #8]
 80138a0:	f003 030f 	and.w	r3, r3, #15
 80138a4:	b2db      	uxtb	r3, r3
 80138a6:	2b05      	cmp	r3, #5
 80138a8:	d101      	bne.n	80138ae <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 80138aa:	2301      	movs	r3, #1
 80138ac:	e01b      	b.n	80138e6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80138ae:	2300      	movs	r3, #0
 80138b0:	e019      	b.n	80138e6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	7a1b      	ldrb	r3, [r3, #8]
 80138b6:	f003 030f 	and.w	r3, r3, #15
 80138ba:	b2db      	uxtb	r3, r3
 80138bc:	2b05      	cmp	r3, #5
 80138be:	d00d      	beq.n	80138dc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	7a1b      	ldrb	r3, [r3, #8]
 80138c4:	f003 030f 	and.w	r3, r3, #15
 80138c8:	b2db      	uxtb	r3, r3
 80138ca:	2b06      	cmp	r3, #6
 80138cc:	d006      	beq.n	80138dc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	7a1b      	ldrb	r3, [r3, #8]
 80138d2:	f003 030f 	and.w	r3, r3, #15
 80138d6:	b2db      	uxtb	r3, r3
 80138d8:	2b07      	cmp	r3, #7
 80138da:	d101      	bne.n	80138e0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 80138dc:	2301      	movs	r3, #1
 80138de:	e002      	b.n	80138e6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80138e0:	2300      	movs	r3, #0
 80138e2:	e000      	b.n	80138e6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 80138e4:	2300      	movs	r3, #0
        }
}
 80138e6:	4618      	mov	r0, r3
 80138e8:	370c      	adds	r7, #12
 80138ea:	46bd      	mov	sp, r7
 80138ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f0:	4770      	bx	lr
 80138f2:	bf00      	nop

080138f4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b082      	sub	sp, #8
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	460b      	mov	r3, r1
 80138fe:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 8013900:	78fb      	ldrb	r3, [r7, #3]
 8013902:	2b03      	cmp	r3, #3
 8013904:	d806      	bhi.n	8013914 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 8013906:	78fb      	ldrb	r3, [r7, #3]
 8013908:	4619      	mov	r1, r3
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f7ff ff72 	bl	80137f4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8013910:	4603      	mov	r3, r0
 8013912:	e011      	b.n	8013938 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	689b      	ldr	r3, [r3, #8]
 8013918:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801391c:	4619      	mov	r1, r3
 801391e:	78fb      	ldrb	r3, [r7, #3]
 8013920:	4a07      	ldr	r2, [pc, #28]	; (8013940 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 8013922:	4413      	add	r3, r2
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	fa21 f303 	lsr.w	r3, r1, r3
 801392a:	f003 0301 	and.w	r3, r3, #1
 801392e:	2b00      	cmp	r3, #0
 8013930:	bf14      	ite	ne
 8013932:	2301      	movne	r3, #1
 8013934:	2300      	moveq	r3, #0
 8013936:	b2db      	uxtb	r3, r3
}
 8013938:	4618      	mov	r0, r3
 801393a:	3708      	adds	r7, #8
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}
 8013940:	08018910 	.word	0x08018910

08013944 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 8013944:	b480      	push	{r7}
 8013946:	b085      	sub	sp, #20
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	460b      	mov	r3, r1
 801394e:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 8013950:	78fb      	ldrb	r3, [r7, #3]
 8013952:	4a1b      	ldr	r2, [pc, #108]	; (80139c0 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 8013954:	4413      	add	r3, r2
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	461a      	mov	r2, r3
 801395a:	2301      	movs	r3, #1
 801395c:	4093      	lsls	r3, r2
 801395e:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8013966:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801396a:	021b      	lsls	r3, r3, #8
 801396c:	4313      	orrs	r3, r2
 801396e:	461a      	mov	r2, r3
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	4013      	ands	r3, r2
 8013974:	2b00      	cmp	r3, #0
 8013976:	bf14      	ite	ne
 8013978:	2301      	movne	r3, #1
 801397a:	2300      	moveq	r3, #0
 801397c:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8013984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013988:	021b      	lsls	r3, r3, #8
 801398a:	4313      	orrs	r3, r2
 801398c:	461a      	mov	r2, r3
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	43db      	mvns	r3, r3
 8013992:	4013      	ands	r3, r2
 8013994:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	b2d1      	uxtb	r1, r2
 801399c:	2000      	movs	r0, #0
 801399e:	4301      	orrs	r1, r0
 80139a0:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 80139a4:	0a12      	lsrs	r2, r2, #8
 80139a6:	b292      	uxth	r2, r2
 80139a8:	2100      	movs	r1, #0
 80139aa:	430a      	orrs	r2, r1
 80139ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 80139b0:	7afb      	ldrb	r3, [r7, #11]
}
 80139b2:	4618      	mov	r0, r3
 80139b4:	3714      	adds	r7, #20
 80139b6:	46bd      	mov	sp, r7
 80139b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139bc:	4770      	bx	lr
 80139be:	bf00      	nop
 80139c0:	08018910 	.word	0x08018910

080139c4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 80139c4:	b480      	push	{r7}
 80139c6:	b083      	sub	sp, #12
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
 80139cc:	460b      	mov	r3, r1
 80139ce:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 80139d0:	78fb      	ldrb	r3, [r7, #3]
 80139d2:	2b08      	cmp	r3, #8
 80139d4:	d102      	bne.n	80139dc <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	7adb      	ldrb	r3, [r3, #11]
 80139da:	e006      	b.n	80139ea <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 80139dc:	78fb      	ldrb	r3, [r7, #3]
 80139de:	2b09      	cmp	r3, #9
 80139e0:	d102      	bne.n	80139e8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	7b1b      	ldrb	r3, [r3, #12]
 80139e6:	e000      	b.n	80139ea <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 80139e8:	2300      	movs	r3, #0
}
 80139ea:	4618      	mov	r0, r3
 80139ec:	370c      	adds	r7, #12
 80139ee:	46bd      	mov	sp, r7
 80139f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f4:	4770      	bx	lr

080139f6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 80139f6:	b480      	push	{r7}
 80139f8:	b083      	sub	sp, #12
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	6078      	str	r0, [r7, #4]
 80139fe:	460b      	mov	r3, r1
 8013a00:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 8013a02:	78fb      	ldrb	r3, [r7, #3]
 8013a04:	687a      	ldr	r2, [r7, #4]
 8013a06:	4413      	add	r3, r2
 8013a08:	791b      	ldrb	r3, [r3, #4]
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	370c      	adds	r7, #12
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a14:	4770      	bx	lr
	...

08013a18 <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b086      	sub	sp, #24
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	60f8      	str	r0, [r7, #12]
 8013a20:	460b      	mov	r3, r1
 8013a22:	607a      	str	r2, [r7, #4]
 8013a24:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 8013a26:	7afb      	ldrb	r3, [r7, #11]
 8013a28:	2b01      	cmp	r3, #1
 8013a2a:	f240 80ba 	bls.w	8013ba2 <_ZN9PS4Parser5ParseEhPh+0x18a>
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	f000 80b6 	beq.w	8013ba2 <_ZN9PS4Parser5ParseEhPh+0x18a>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	781b      	ldrb	r3, [r3, #0]
 8013a3a:	2b01      	cmp	r3, #1
 8013a3c:	d10e      	bne.n	8013a5c <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	1d18      	adds	r0, r3, #4
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	1c59      	adds	r1, r3, #1
 8013a46:	7afb      	ldrb	r3, [r7, #11]
 8013a48:	3b01      	subs	r3, #1
 8013a4a:	b2db      	uxtb	r3, r3
 8013a4c:	2b3c      	cmp	r3, #60	; 0x3c
 8013a4e:	bf28      	it	cs
 8013a50:	233c      	movcs	r3, #60	; 0x3c
 8013a52:	b2db      	uxtb	r3, r3
 8013a54:	461a      	mov	r2, r3
 8013a56:	f002 fa39 	bl	8015ecc <memcpy>
 8013a5a:	e02a      	b.n	8013ab2 <_ZN9PS4Parser5ParseEhPh+0x9a>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	2b11      	cmp	r3, #17
 8013a62:	d11b      	bne.n	8013a9c <_ZN9PS4Parser5ParseEhPh+0x84>
                        if (len < 4) {
 8013a64:	7afb      	ldrb	r3, [r7, #11]
 8013a66:	2b03      	cmp	r3, #3
 8013a68:	d809      	bhi.n	8013a7e <_ZN9PS4Parser5ParseEhPh+0x66>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
 8013a6a:	2180      	movs	r1, #128	; 0x80
 8013a6c:	4855      	ldr	r0, [pc, #340]	; (8013bc4 <_ZN9PS4Parser5ParseEhPh+0x1ac>)
 8013a6e:	f002 f8e1 	bl	8015c34 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (len, 0x80);
 8013a72:	7afb      	ldrb	r3, [r7, #11]
 8013a74:	2180      	movs	r1, #128	; 0x80
 8013a76:	4618      	mov	r0, r3
 8013a78:	f7fe f93b 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
#endif
                                return;
 8013a7c:	e09e      	b.n	8013bbc <_ZN9PS4Parser5ParseEhPh+0x1a4>
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	1d18      	adds	r0, r3, #4
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	1cd9      	adds	r1, r3, #3
 8013a86:	7afb      	ldrb	r3, [r7, #11]
 8013a88:	3b03      	subs	r3, #3
 8013a8a:	b2db      	uxtb	r3, r3
 8013a8c:	2b3c      	cmp	r3, #60	; 0x3c
 8013a8e:	bf28      	it	cs
 8013a90:	233c      	movcs	r3, #60	; 0x3c
 8013a92:	b2db      	uxtb	r3, r3
 8013a94:	461a      	mov	r2, r3
 8013a96:	f002 fa19 	bl	8015ecc <memcpy>
 8013a9a:	e00a      	b.n	8013ab2 <_ZN9PS4Parser5ParseEhPh+0x9a>
                } else {
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nUnknown report id: "), 0x80);
 8013a9c:	2180      	movs	r1, #128	; 0x80
 8013a9e:	484a      	ldr	r0, [pc, #296]	; (8013bc8 <_ZN9PS4Parser5ParseEhPh+0x1b0>)
 8013aa0:	f002 f8c8 	bl	8015c34 <_Z8E_NotifyPKci>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	781b      	ldrb	r3, [r3, #0]
 8013aa8:	2180      	movs	r1, #128	; 0x80
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7fe f921 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
#endif
                        return;
 8013ab0:	e084      	b.n	8013bbc <_ZN9PS4Parser5ParseEhPh+0x1a4>
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	689b      	ldr	r3, [r3, #8]
 8013ab6:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013abe:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d06d      	beq.n	8013ba2 <_ZN9PS4Parser5ParseEhPh+0x18a>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	689b      	ldr	r3, [r3, #8]
 8013aca:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8013ace:	461a      	mov	r2, r3
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ad4:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8013ad8:	43db      	mvns	r3, r3
 8013ada:	4013      	ands	r3, r2
 8013adc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	b2d1      	uxtb	r1, r2
 8013ae4:	2000      	movs	r0, #0
 8013ae6:	4301      	orrs	r1, r0
 8013ae8:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8013aec:	0a12      	lsrs	r2, r2, #8
 8013aee:	b292      	uxth	r2, r2
 8013af0:	2100      	movs	r1, #0
 8013af2:	430a      	orrs	r2, r1
 8013af4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	689b      	ldr	r3, [r3, #8]
 8013afc:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8013b00:	68fa      	ldr	r2, [r7, #12]
 8013b02:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013b04:	f361 0317 	bfi	r3, r1, #0, #24
 8013b08:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 8013b0e:	2100      	movs	r1, #0
 8013b10:	68f8      	ldr	r0, [r7, #12]
 8013b12:	f7ff fe6f 	bl	80137f4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8013b16:	4603      	mov	r3, r0
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d003      	beq.n	8013b24 <_ZN9PS4Parser5ParseEhPh+0x10c>
                                newDpad |= 1 << UP;
 8013b1c:	7dfb      	ldrb	r3, [r7, #23]
 8013b1e:	f043 0301 	orr.w	r3, r3, #1
 8013b22:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 8013b24:	2101      	movs	r1, #1
 8013b26:	68f8      	ldr	r0, [r7, #12]
 8013b28:	f7ff fe64 	bl	80137f4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d003      	beq.n	8013b3a <_ZN9PS4Parser5ParseEhPh+0x122>
                                newDpad |= 1 << RIGHT;
 8013b32:	7dfb      	ldrb	r3, [r7, #23]
 8013b34:	f043 0302 	orr.w	r3, r3, #2
 8013b38:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 8013b3a:	2102      	movs	r1, #2
 8013b3c:	68f8      	ldr	r0, [r7, #12]
 8013b3e:	f7ff fe59 	bl	80137f4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8013b42:	4603      	mov	r3, r0
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d003      	beq.n	8013b50 <_ZN9PS4Parser5ParseEhPh+0x138>
                                newDpad |= 1 << DOWN;
 8013b48:	7dfb      	ldrb	r3, [r7, #23]
 8013b4a:	f043 0304 	orr.w	r3, r3, #4
 8013b4e:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 8013b50:	2103      	movs	r1, #3
 8013b52:	68f8      	ldr	r0, [r7, #12]
 8013b54:	f7ff fe4e 	bl	80137f4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d003      	beq.n	8013b66 <_ZN9PS4Parser5ParseEhPh+0x14e>
                                newDpad |= 1 << LEFT;
 8013b5e:	7dfb      	ldrb	r3, [r7, #23]
 8013b60:	f043 0308 	orr.w	r3, r3, #8
 8013b64:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8013b6c:	7dfa      	ldrb	r2, [r7, #23]
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d017      	beq.n	8013ba2 <_ZN9PS4Parser5ParseEhPh+0x18a>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8013b78:	b25b      	sxtb	r3, r3
 8013b7a:	43db      	mvns	r3, r3
 8013b7c:	b25a      	sxtb	r2, r3
 8013b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013b82:	4013      	ands	r3, r2
 8013b84:	b25b      	sxtb	r3, r3
 8013b86:	f003 030f 	and.w	r3, r3, #15
 8013b8a:	b2d9      	uxtb	r1, r3
 8013b8c:	68fa      	ldr	r2, [r7, #12]
 8013b8e:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8013b92:	f361 0303 	bfi	r3, r1, #0, #4
 8013b96:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	7dfa      	ldrb	r2, [r7, #23]
 8013b9e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d007      	beq.n	8013bbc <_ZN9PS4Parser5ParseEhPh+0x1a4>
                sendOutputReport(&ps4Output); // Send output report
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	68fa      	ldr	r2, [r7, #12]
 8013bb4:	3246      	adds	r2, #70	; 0x46
 8013bb6:	4611      	mov	r1, r2
 8013bb8:	68f8      	ldr	r0, [r7, #12]
 8013bba:	4798      	blx	r3
}
 8013bbc:	3718      	adds	r7, #24
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	080177a0 	.word	0x080177a0
 8013bc8:	080177b8 	.word	0x080177b8

08013bcc <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 8013bcc:	b480      	push	{r7}
 8013bce:	b085      	sub	sp, #20
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	73fb      	strb	r3, [r7, #15]
 8013bd8:	7bfb      	ldrb	r3, [r7, #15]
 8013bda:	2b03      	cmp	r3, #3
 8013bdc:	d808      	bhi.n	8013bf0 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 8013bde:	7bfb      	ldrb	r3, [r7, #15]
 8013be0:	687a      	ldr	r2, [r7, #4]
 8013be2:	4413      	add	r3, r2
 8013be4:	227f      	movs	r2, #127	; 0x7f
 8013be6:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8013be8:	7bfb      	ldrb	r3, [r7, #15]
 8013bea:	3301      	adds	r3, #1
 8013bec:	73fb      	strb	r3, [r7, #15]
 8013bee:	e7f3      	b.n	8013bd8 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 8013bf0:	687a      	ldr	r2, [r7, #4]
 8013bf2:	6893      	ldr	r3, [r2, #8]
 8013bf4:	f36f 0317 	bfc	r3, #0, #24
 8013bf8:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 8013bfa:	687a      	ldr	r2, [r7, #4]
 8013bfc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013bfe:	f36f 0317 	bfc	r3, #0, #24
 8013c02:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8013c04:	2300      	movs	r3, #0
 8013c06:	73fb      	strb	r3, [r7, #15]
 8013c08:	7bfb      	ldrb	r3, [r7, #15]
 8013c0a:	2b01      	cmp	r3, #1
 8013c0c:	d808      	bhi.n	8013c20 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 8013c0e:	7bfb      	ldrb	r3, [r7, #15]
 8013c10:	687a      	ldr	r2, [r7, #4]
 8013c12:	4413      	add	r3, r2
 8013c14:	2200      	movs	r2, #0
 8013c16:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8013c18:	7bfb      	ldrb	r3, [r7, #15]
 8013c1a:	3301      	adds	r3, #1
 8013c1c:	73fb      	strb	r3, [r7, #15]
 8013c1e:	e7f3      	b.n	8013c08 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8013c20:	2300      	movs	r3, #0
 8013c22:	73fb      	strb	r3, [r7, #15]
 8013c24:	7bfb      	ldrb	r3, [r7, #15]
 8013c26:	2b02      	cmp	r3, #2
 8013c28:	d81b      	bhi.n	8013c62 <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	73bb      	strb	r3, [r7, #14]
 8013c2e:	7bbb      	ldrb	r3, [r7, #14]
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	d812      	bhi.n	8013c5a <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 8013c34:	7bfa      	ldrb	r2, [r7, #15]
 8013c36:	7bbb      	ldrb	r3, [r7, #14]
 8013c38:	6879      	ldr	r1, [r7, #4]
 8013c3a:	0098      	lsls	r0, r3, #2
 8013c3c:	4613      	mov	r3, r2
 8013c3e:	00db      	lsls	r3, r3, #3
 8013c40:	4413      	add	r3, r2
 8013c42:	4403      	add	r3, r0
 8013c44:	440b      	add	r3, r1
 8013c46:	f103 0220 	add.w	r2, r3, #32
 8013c4a:	7993      	ldrb	r3, [r2, #6]
 8013c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c50:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8013c52:	7bbb      	ldrb	r3, [r7, #14]
 8013c54:	3301      	adds	r3, #1
 8013c56:	73bb      	strb	r3, [r7, #14]
 8013c58:	e7e9      	b.n	8013c2e <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8013c5a:	7bfb      	ldrb	r3, [r7, #15]
 8013c5c:	3301      	adds	r3, #1
 8013c5e:	73fb      	strb	r3, [r7, #15]
 8013c60:	e7e0      	b.n	8013c24 <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 8013c62:	687a      	ldr	r2, [r7, #4]
 8013c64:	7a13      	ldrb	r3, [r2, #8]
 8013c66:	2108      	movs	r1, #8
 8013c68:	f361 0303 	bfi	r3, r1, #0, #4
 8013c6c:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 8013c6e:	687a      	ldr	r2, [r7, #4]
 8013c70:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8013c74:	2108      	movs	r1, #8
 8013c76:	f361 0303 	bfi	r3, r1, #0, #4
 8013c7a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 8013c7e:	687a      	ldr	r2, [r7, #4]
 8013c80:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8013c84:	f36f 0303 	bfc	r3, #0, #4
 8013c88:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2200      	movs	r2, #0
 8013c90:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2200      	movs	r2, #0
 8013c98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2200      	movs	r2, #0
 8013cac:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8013ce4:	bf00      	nop
 8013ce6:	3714      	adds	r7, #20
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cee:	4770      	bx	lr

08013cf0 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	2180      	movs	r1, #128	; 0x80
 8013cf6:	4803      	ldr	r0, [pc, #12]	; (8013d04 <_ZN2P95IsSetEv+0x14>)
 8013cf8:	f7ef fef6 	bl	8003ae8 <HAL_GPIO_ReadPin>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	4618      	mov	r0, r3
 8013d00:	bd80      	pop	{r7, pc}
 8013d02:	bf00      	nop
 8013d04:	40020800 	.word	0x40020800

08013d08 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b082      	sub	sp, #8
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f001 f9dd 	bl	80150d0 <_ZN8MAX3421eI3P102P9EC1Ev>
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f001 f9f5 	bl	8015108 <_ZN15AddressPoolImplILh16EEC1Ev>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2200      	movs	r2, #0
 8013d22:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 8013d26:	4b05      	ldr	r3, [pc, #20]	; (8013d3c <_ZN3USBC1Ev+0x34>)
 8013d28:	2211      	movs	r2, #17
 8013d2a:	701a      	strb	r2, [r3, #0]
        init();
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	f000 f807 	bl	8013d40 <_ZN3USB4initEv>
}
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	4618      	mov	r0, r3
 8013d36:	3708      	adds	r7, #8
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}
 8013d3c:	20005752 	.word	0x20005752

08013d40 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8013d40:	b480      	push	{r7}
 8013d42:	b083      	sub	sp, #12
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8013d50:	bf00      	nop
 8013d52:	370c      	adds	r7, #12
 8013d54:	46bd      	mov	sp, r7
 8013d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5a:	4770      	bx	lr

08013d5c <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b086      	sub	sp, #24
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
 8013d64:	460b      	mov	r3, r1
 8013d66:	70fb      	strb	r3, [r7, #3]
 8013d68:	4613      	mov	r3, r2
 8013d6a:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	78fa      	ldrb	r2, [r7, #3]
 8013d70:	4611      	mov	r1, r2
 8013d72:	4618      	mov	r0, r3
 8013d74:	f001 fa02 	bl	801517c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8013d78:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d003      	beq.n	8013d88 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d101      	bne.n	8013d8c <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8013d88:	2300      	movs	r3, #0
 8013d8a:	e018      	b.n	8013dbe <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8013d92:	2300      	movs	r3, #0
 8013d94:	74fb      	strb	r3, [r7, #19]
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	795b      	ldrb	r3, [r3, #5]
 8013d9a:	7cfa      	ldrb	r2, [r7, #19]
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d20d      	bcs.n	8013dbc <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	781b      	ldrb	r3, [r3, #0]
 8013da4:	78ba      	ldrb	r2, [r7, #2]
 8013da6:	429a      	cmp	r2, r3
 8013da8:	d101      	bne.n	8013dae <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	e007      	b.n	8013dbe <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	3303      	adds	r3, #3
 8013db2:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8013db4:	7cfb      	ldrb	r3, [r7, #19]
 8013db6:	3301      	adds	r3, #1
 8013db8:	74fb      	strb	r3, [r7, #19]
 8013dba:	e7ec      	b.n	8013d96 <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8013dbc:	2300      	movs	r3, #0
}
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	3718      	adds	r7, #24
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}

08013dc6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8013dc6:	b580      	push	{r7, lr}
 8013dc8:	b086      	sub	sp, #24
 8013dca:	af00      	add	r7, sp, #0
 8013dcc:	60f8      	str	r0, [r7, #12]
 8013dce:	607b      	str	r3, [r7, #4]
 8013dd0:	460b      	mov	r3, r1
 8013dd2:	72fb      	strb	r3, [r7, #11]
 8013dd4:	4613      	mov	r3, r2
 8013dd6:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d101      	bne.n	8013de2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8013dde:	23d8      	movs	r3, #216	; 0xd8
 8013de0:	e015      	b.n	8013e0e <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	7afa      	ldrb	r2, [r7, #11]
 8013de6:	4611      	mov	r1, r2
 8013de8:	4618      	mov	r0, r3
 8013dea:	f001 f9c7 	bl	801517c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8013dee:	6178      	str	r0, [r7, #20]

        if(!p)
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d101      	bne.n	8013dfa <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8013df6:	23d6      	movs	r3, #214	; 0xd6
 8013df8:	e009      	b.n	8013e0e <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	7afa      	ldrb	r2, [r7, #11]
 8013dfe:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	687a      	ldr	r2, [r7, #4]
 8013e04:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	7aba      	ldrb	r2, [r7, #10]
 8013e0a:	715a      	strb	r2, [r3, #5]

        return 0;
 8013e0c:	2300      	movs	r3, #0
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	3718      	adds	r7, #24
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}

08013e16 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 8013e16:	b580      	push	{r7, lr}
 8013e18:	b086      	sub	sp, #24
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	60f8      	str	r0, [r7, #12]
 8013e1e:	607b      	str	r3, [r7, #4]
 8013e20:	460b      	mov	r3, r1
 8013e22:	72fb      	strb	r3, [r7, #11]
 8013e24:	4613      	mov	r3, r2
 8013e26:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	7afa      	ldrb	r2, [r7, #11]
 8013e2c:	4611      	mov	r1, r2
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f001 f9a4 	bl	801517c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8013e34:	6178      	str	r0, [r7, #20]

        if(!p)
 8013e36:	697b      	ldr	r3, [r7, #20]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d101      	bne.n	8013e40 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8013e3c:	23d6      	movs	r3, #214	; 0xd6
 8013e3e:	e04e      	b.n	8013ede <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d101      	bne.n	8013e4c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8013e48:	23d7      	movs	r3, #215	; 0xd7
 8013e4a:	e048      	b.n	8013ede <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8013e4c:	7aba      	ldrb	r2, [r7, #10]
 8013e4e:	7afb      	ldrb	r3, [r7, #11]
 8013e50:	4619      	mov	r1, r3
 8013e52:	68f8      	ldr	r0, [r7, #12]
 8013e54:	f7ff ff82 	bl	8013d5c <_ZN3USB14getEpInfoEntryEhh>
 8013e58:	4602      	mov	r2, r0
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d101      	bne.n	8013e6a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 8013e66:	23db      	movs	r3, #219	; 0xdb
 8013e68:	e039      	b.n	8013ede <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	789b      	ldrb	r3, [r3, #2]
 8013e70:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8013e74:	b2db      	uxtb	r3, r3
 8013e76:	2b0f      	cmp	r3, #15
 8013e78:	bf28      	it	cs
 8013e7a:	230f      	movcs	r3, #15
 8013e7c:	b2db      	uxtb	r3, r3
 8013e7e:	461a      	mov	r2, r3
 8013e80:	2301      	movs	r3, #1
 8013e82:	4093      	lsls	r3, r2
 8013e84:	b29a      	uxth	r2, r3
 8013e86:	6a3b      	ldr	r3, [r7, #32]
 8013e88:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8013e8a:	6a3b      	ldr	r3, [r7, #32]
 8013e8c:	881b      	ldrh	r3, [r3, #0]
 8013e8e:	3b01      	subs	r3, #1
 8013e90:	b29a      	uxth	r2, r3
 8013e92:	6a3b      	ldr	r3, [r7, #32]
 8013e94:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 8013e96:	7afb      	ldrb	r3, [r7, #11]
 8013e98:	461a      	mov	r2, r3
 8013e9a:	21e0      	movs	r1, #224	; 0xe0
 8013e9c:	68f8      	ldr	r0, [r7, #12]
 8013e9e:	f7ee fce3 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 8013ea2:	21d8      	movs	r1, #216	; 0xd8
 8013ea4:	68f8      	ldr	r0, [r7, #12]
 8013ea6:	f7ee fd31 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8013eae:	697b      	ldr	r3, [r7, #20]
 8013eb0:	799b      	ldrb	r3, [r3, #6]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d009      	beq.n	8013eca <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8013ebc:	7cfb      	ldrb	r3, [r7, #19]
 8013ebe:	4313      	orrs	r3, r2
 8013ec0:	b2db      	uxtb	r3, r3
 8013ec2:	f043 0302 	orr.w	r3, r3, #2
 8013ec6:	b2db      	uxtb	r3, r3
 8013ec8:	e003      	b.n	8013ed2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8013eca:	7cfb      	ldrb	r3, [r7, #19]
 8013ecc:	f023 0306 	bic.w	r3, r3, #6
 8013ed0:	b2db      	uxtb	r3, r3
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	21d8      	movs	r1, #216	; 0xd8
 8013ed6:	68f8      	ldr	r0, [r7, #12]
 8013ed8:	f7ee fcc6 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8013edc:	2300      	movs	r3, #0
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3718      	adds	r7, #24
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}

08013ee6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 8013ee6:	b590      	push	{r4, r7, lr}
 8013ee8:	b08b      	sub	sp, #44	; 0x2c
 8013eea:	af02      	add	r7, sp, #8
 8013eec:	6078      	str	r0, [r7, #4]
 8013eee:	4608      	mov	r0, r1
 8013ef0:	4611      	mov	r1, r2
 8013ef2:	461a      	mov	r2, r3
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	70fb      	strb	r3, [r7, #3]
 8013ef8:	460b      	mov	r3, r1
 8013efa:	70bb      	strb	r3, [r7, #2]
 8013efc:	4613      	mov	r3, r2
 8013efe:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8013f00:	2300      	movs	r3, #0
 8013f02:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 8013f04:	2300      	movs	r3, #0
 8013f06:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8013f0c:	f107 000c 	add.w	r0, r7, #12
 8013f10:	78ba      	ldrb	r2, [r7, #2]
 8013f12:	78f9      	ldrb	r1, [r7, #3]
 8013f14:	f107 030a 	add.w	r3, r7, #10
 8013f18:	9300      	str	r3, [sp, #0]
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f7ff ff7a 	bl	8013e16 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8013f22:	4603      	mov	r3, r0
 8013f24:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 8013f26:	7ffb      	ldrb	r3, [r7, #31]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d001      	beq.n	8013f30 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8013f2c:	7ffb      	ldrb	r3, [r7, #31]
 8013f2e:	e0ae      	b.n	801408e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8013f30:	787b      	ldrb	r3, [r7, #1]
 8013f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	bfcc      	ite	gt
 8013f3a:	2301      	movgt	r3, #1
 8013f3c:	2300      	movle	r3, #0
 8013f3e:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8013f40:	787b      	ldrb	r3, [r7, #1]
 8013f42:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 8013f44:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8013f48:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8013f4a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013f4e:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8013f50:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013f54:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 8013f56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013f58:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8013f5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013f5e:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8013f60:	f107 0310 	add.w	r3, r7, #16
 8013f64:	2208      	movs	r2, #8
 8013f66:	2120      	movs	r1, #32
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f001 f92d 	bl	80151c8 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8013f6e:	897b      	ldrh	r3, [r7, #10]
 8013f70:	78ba      	ldrb	r2, [r7, #2]
 8013f72:	2110      	movs	r1, #16
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f000 fb14 	bl	80145a2 <_ZN3USB11dispatchPktEhht>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8013f7e:	7ffb      	ldrb	r3, [r7, #31]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d001      	beq.n	8013f88 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 8013f84:	7ffb      	ldrb	r3, [r7, #31]
 8013f86:	e082      	b.n	801408e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8013f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d072      	beq.n	8014074 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8013f8e:	7efb      	ldrb	r3, [r7, #27]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d057      	beq.n	8014044 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 8013f94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013f98:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 8013f9a:	68fa      	ldr	r2, [r7, #12]
 8013f9c:	7893      	ldrb	r3, [r2, #2]
 8013f9e:	f043 0302 	orr.w	r3, r3, #2
 8013fa2:	7093      	strb	r3, [r2, #2]

                        while(left) {
 8013fa4:	8bbb      	ldrh	r3, [r7, #28]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d05f      	beq.n	801406a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 8013faa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013fae:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 8013fb0:	68f9      	ldr	r1, [r7, #12]
 8013fb2:	897a      	ldrh	r2, [r7, #10]
 8013fb4:	f107 0008 	add.w	r0, r7, #8
 8013fb8:	2300      	movs	r3, #0
 8013fba:	9301      	str	r3, [sp, #4]
 8013fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fbe:	9300      	str	r3, [sp, #0]
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f000 f8c8 	bl	8014158 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8013fcc:	7ffb      	ldrb	r3, [r7, #31]
 8013fce:	2b06      	cmp	r3, #6
 8013fd0:	d114      	bne.n	8013ffc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8013fd2:	21f8      	movs	r1, #248	; 0xf8
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f7ee fc99 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	f003 0320 	and.w	r3, r3, #32
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	bf0c      	ite	eq
 8013fe4:	2301      	moveq	r3, #1
 8013fe6:	2300      	movne	r3, #0
 8013fe8:	b2db      	uxtb	r3, r3
 8013fea:	68fa      	ldr	r2, [r7, #12]
 8013fec:	f003 0301 	and.w	r3, r3, #1
 8013ff0:	b2d9      	uxtb	r1, r3
 8013ff2:	7893      	ldrb	r3, [r2, #2]
 8013ff4:	f361 0341 	bfi	r3, r1, #1, #1
 8013ff8:	7093      	strb	r3, [r2, #2]
 8013ffa:	e7d3      	b.n	8013fa4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8013ffc:	7ffb      	ldrb	r3, [r7, #31]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d001      	beq.n	8014006 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 8014002:	7ffb      	ldrb	r3, [r7, #31]
 8014004:	e043      	b.n	801408e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 8014006:	7ffb      	ldrb	r3, [r7, #31]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d111      	bne.n	8014030 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 801400c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801400e:	2b00      	cmp	r3, #0
 8014010:	d00e      	beq.n	8014030 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 8014012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	681c      	ldr	r4, [r3, #0]
 8014018:	8939      	ldrh	r1, [r7, #8]
 801401a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801401e:	8bbb      	ldrh	r3, [r7, #28]
 8014020:	1ad3      	subs	r3, r2, r3
 8014022:	b29b      	uxth	r3, r3
 8014024:	833b      	strh	r3, [r7, #24]
 8014026:	f107 0318 	add.w	r3, r7, #24
 801402a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801402c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801402e:	47a0      	blx	r4

                                left -= read;
 8014030:	893b      	ldrh	r3, [r7, #8]
 8014032:	8bba      	ldrh	r2, [r7, #28]
 8014034:	1ad3      	subs	r3, r2, r3
 8014036:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8014038:	893b      	ldrh	r3, [r7, #8]
 801403a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801403e:	429a      	cmp	r2, r3
 8014040:	d812      	bhi.n	8014068 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 8014042:	e7af      	b.n	8013fa4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 8014044:	68fa      	ldr	r2, [r7, #12]
 8014046:	7893      	ldrb	r3, [r2, #2]
 8014048:	f043 0301 	orr.w	r3, r3, #1
 801404c:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 801404e:	68f9      	ldr	r1, [r7, #12]
 8014050:	897a      	ldrh	r2, [r7, #10]
 8014052:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8014056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014058:	9300      	str	r3, [sp, #0]
 801405a:	4603      	mov	r3, r0
 801405c:	6878      	ldr	r0, [r7, #4]
 801405e:	f000 f975 	bl	801434c <_ZN3USB11OutTransferEP6EpInfottPh>
 8014062:	4603      	mov	r3, r0
 8014064:	77fb      	strb	r3, [r7, #31]
 8014066:	e000      	b.n	801406a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 8014068:	bf00      	nop
                }
                if(rcode) //return error
 801406a:	7ffb      	ldrb	r3, [r7, #31]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d001      	beq.n	8014074 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8014070:	7ffb      	ldrb	r3, [r7, #31]
 8014072:	e00c      	b.n	801408e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 8014074:	7efb      	ldrb	r3, [r7, #27]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d001      	beq.n	801407e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 801407a:	21a0      	movs	r1, #160	; 0xa0
 801407c:	e000      	b.n	8014080 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 801407e:	2180      	movs	r1, #128	; 0x80
 8014080:	897b      	ldrh	r3, [r7, #10]
 8014082:	78ba      	ldrb	r2, [r7, #2]
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f000 fa8c 	bl	80145a2 <_ZN3USB11dispatchPktEhht>
 801408a:	4603      	mov	r3, r0
 801408c:	bf00      	nop
}
 801408e:	4618      	mov	r0, r3
 8014090:	3724      	adds	r7, #36	; 0x24
 8014092:	46bd      	mov	sp, r7
 8014094:	bd90      	pop	{r4, r7, pc}
	...

08014098 <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8014098:	b580      	push	{r7, lr}
 801409a:	b08a      	sub	sp, #40	; 0x28
 801409c:	af02      	add	r7, sp, #8
 801409e:	60f8      	str	r0, [r7, #12]
 80140a0:	607b      	str	r3, [r7, #4]
 80140a2:	460b      	mov	r3, r1
 80140a4:	72fb      	strb	r3, [r7, #11]
 80140a6:	4613      	mov	r3, r2
 80140a8:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 80140aa:	2300      	movs	r3, #0
 80140ac:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 80140ae:	2300      	movs	r3, #0
 80140b0:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 80140b2:	f107 0018 	add.w	r0, r7, #24
 80140b6:	7aba      	ldrb	r2, [r7, #10]
 80140b8:	7af9      	ldrb	r1, [r7, #11]
 80140ba:	f107 0316 	add.w	r3, r7, #22
 80140be:	9300      	str	r3, [sp, #0]
 80140c0:	4603      	mov	r3, r0
 80140c2:	68f8      	ldr	r0, [r7, #12]
 80140c4:	f7ff fea7 	bl	8013e16 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 80140c8:	4603      	mov	r3, r0
 80140ca:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 80140cc:	7ffb      	ldrb	r3, [r7, #31]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d028      	beq.n	8014124 <_ZN3USB10inTransferEhhPtPhh+0x8c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 80140d2:	2181      	movs	r1, #129	; 0x81
 80140d4:	481c      	ldr	r0, [pc, #112]	; (8014148 <_ZN3USB10inTransferEhhPtPhh+0xb0>)
 80140d6:	f001 fdad 	bl	8015c34 <_Z8E_NotifyPKci>
 80140da:	7ffb      	ldrb	r3, [r7, #31]
 80140dc:	2181      	movs	r1, #129	; 0x81
 80140de:	4618      	mov	r0, r3
 80140e0:	f7fd fe07 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
 80140e4:	2181      	movs	r1, #129	; 0x81
 80140e6:	4819      	ldr	r0, [pc, #100]	; (801414c <_ZN3USB10inTransferEhhPtPhh+0xb4>)
 80140e8:	f001 fda4 	bl	8015c34 <_Z8E_NotifyPKci>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 80140ec:	2181      	movs	r1, #129	; 0x81
 80140ee:	4818      	ldr	r0, [pc, #96]	; (8014150 <_ZN3USB10inTransferEhhPtPhh+0xb8>)
 80140f0:	f001 fda0 	bl	8015c34 <_Z8E_NotifyPKci>
 80140f4:	7afb      	ldrb	r3, [r7, #11]
 80140f6:	2181      	movs	r1, #129	; 0x81
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7fd fdfa 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
 80140fe:	2181      	movs	r1, #129	; 0x81
 8014100:	4812      	ldr	r0, [pc, #72]	; (801414c <_ZN3USB10inTransferEhhPtPhh+0xb4>)
 8014102:	f001 fd97 	bl	8015c34 <_Z8E_NotifyPKci>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 8014106:	2181      	movs	r1, #129	; 0x81
 8014108:	4812      	ldr	r0, [pc, #72]	; (8014154 <_ZN3USB10inTransferEhhPtPhh+0xbc>)
 801410a:	f001 fd93 	bl	8015c34 <_Z8E_NotifyPKci>
 801410e:	7abb      	ldrb	r3, [r7, #10]
 8014110:	2181      	movs	r1, #129	; 0x81
 8014112:	4618      	mov	r0, r3
 8014114:	f7fd fded 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
 8014118:	2181      	movs	r1, #129	; 0x81
 801411a:	480c      	ldr	r0, [pc, #48]	; (801414c <_ZN3USB10inTransferEhhPtPhh+0xb4>)
 801411c:	f001 fd8a 	bl	8015c34 <_Z8E_NotifyPKci>
                return rcode;
 8014120:	7ffb      	ldrb	r3, [r7, #31]
 8014122:	e00c      	b.n	801413e <_ZN3USB10inTransferEhhPtPhh+0xa6>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 8014124:	69b9      	ldr	r1, [r7, #24]
 8014126:	8afa      	ldrh	r2, [r7, #22]
 8014128:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801412c:	9301      	str	r3, [sp, #4]
 801412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014130:	9300      	str	r3, [sp, #0]
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	68f8      	ldr	r0, [r7, #12]
 8014136:	f000 f80f 	bl	8014158 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 801413a:	4603      	mov	r3, r0
 801413c:	bf00      	nop
}
 801413e:	4618      	mov	r0, r3
 8014140:	3720      	adds	r7, #32
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}
 8014146:	bf00      	nop
 8014148:	080177d0 	.word	0x080177d0
 801414c:	080177f8 	.word	0x080177f8
 8014150:	080177fc 	.word	0x080177fc
 8014154:	08017820 	.word	0x08017820

08014158 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8014158:	b580      	push	{r7, lr}
 801415a:	b086      	sub	sp, #24
 801415c:	af00      	add	r7, sp, #0
 801415e:	60f8      	str	r0, [r7, #12]
 8014160:	60b9      	str	r1, [r7, #8]
 8014162:	603b      	str	r3, [r7, #0]
 8014164:	4613      	mov	r3, r2
 8014166:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 8014168:	2300      	movs	r3, #0
 801416a:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	881b      	ldrh	r3, [r3, #0]
 8014170:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	785b      	ldrb	r3, [r3, #1]
 8014176:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 8014178:	683b      	ldr	r3, [r7, #0]
 801417a:	2200      	movs	r2, #0
 801417c:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	789b      	ldrb	r3, [r3, #2]
 8014182:	f003 0302 	and.w	r3, r3, #2
 8014186:	b2db      	uxtb	r3, r3
 8014188:	2b00      	cmp	r3, #0
 801418a:	d001      	beq.n	8014190 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 801418c:	2320      	movs	r3, #32
 801418e:	e000      	b.n	8014192 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8014190:	2310      	movs	r3, #16
 8014192:	461a      	mov	r2, r3
 8014194:	21e8      	movs	r1, #232	; 0xe8
 8014196:	68f8      	ldr	r0, [r7, #12]
 8014198:	f7ee fb66 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 801419c:	68bb      	ldr	r3, [r7, #8]
 801419e:	781a      	ldrb	r2, [r3, #0]
 80141a0:	88fb      	ldrh	r3, [r7, #6]
 80141a2:	2100      	movs	r1, #0
 80141a4:	68f8      	ldr	r0, [r7, #12]
 80141a6:	f000 f9fc 	bl	80145a2 <_ZN3USB11dispatchPktEhht>
 80141aa:	4603      	mov	r3, r0
 80141ac:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 80141ae:	7dfb      	ldrb	r3, [r7, #23]
 80141b0:	2b06      	cmp	r3, #6
 80141b2:	d123      	bne.n	80141fc <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 80141b4:	21f8      	movs	r1, #248	; 0xf8
 80141b6:	68f8      	ldr	r0, [r7, #12]
 80141b8:	f7ee fba8 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80141bc:	4603      	mov	r3, r0
 80141be:	f003 0310 	and.w	r3, r3, #16
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	bf0c      	ite	eq
 80141c6:	2301      	moveq	r3, #1
 80141c8:	2300      	movne	r3, #0
 80141ca:	b2db      	uxtb	r3, r3
 80141cc:	f003 0301 	and.w	r3, r3, #1
 80141d0:	b2d9      	uxtb	r1, r3
 80141d2:	68ba      	ldr	r2, [r7, #8]
 80141d4:	7893      	ldrb	r3, [r2, #2]
 80141d6:	f361 0341 	bfi	r3, r1, #1, #1
 80141da:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	789b      	ldrb	r3, [r3, #2]
 80141e0:	f003 0302 	and.w	r3, r3, #2
 80141e4:	b2db      	uxtb	r3, r3
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d001      	beq.n	80141ee <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 80141ea:	2320      	movs	r3, #32
 80141ec:	e000      	b.n	80141f0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 80141ee:	2310      	movs	r3, #16
 80141f0:	461a      	mov	r2, r3
 80141f2:	21e8      	movs	r1, #232	; 0xe8
 80141f4:	68f8      	ldr	r0, [r7, #12]
 80141f6:	f7ee fb37 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 80141fa:	e06e      	b.n	80142da <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 80141fc:	7dfb      	ldrb	r3, [r7, #23]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d16c      	bne.n	80142dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 8014202:	21c8      	movs	r1, #200	; 0xc8
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	f7ee fb81 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 801420a:	4603      	mov	r3, r0
 801420c:	f003 0304 	and.w	r3, r3, #4
 8014210:	2b00      	cmp	r3, #0
 8014212:	bf0c      	ite	eq
 8014214:	2301      	moveq	r3, #1
 8014216:	2300      	movne	r3, #0
 8014218:	b2db      	uxtb	r3, r3
 801421a:	2b00      	cmp	r3, #0
 801421c:	d002      	beq.n	8014224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 801421e:	23f0      	movs	r3, #240	; 0xf0
 8014220:	75fb      	strb	r3, [r7, #23]
                        break;
 8014222:	e05c      	b.n	80142de <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8014224:	2130      	movs	r1, #48	; 0x30
 8014226:	68f8      	ldr	r0, [r7, #12]
 8014228:	f7ee fb70 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 801422c:	4603      	mov	r3, r0
 801422e:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8014230:	7dba      	ldrb	r2, [r7, #22]
 8014232:	8a7b      	ldrh	r3, [r7, #18]
 8014234:	429a      	cmp	r2, r3
 8014236:	dd01      	ble.n	801423c <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 8014238:	8a7b      	ldrh	r3, [r7, #18]
 801423a:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014242:	b29b      	uxth	r3, r3
 8014244:	8a7a      	ldrh	r2, [r7, #18]
 8014246:	1ad3      	subs	r3, r2, r3
 8014248:	b29b      	uxth	r3, r3
 801424a:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 801424c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8014250:	2b00      	cmp	r3, #0
 8014252:	da01      	bge.n	8014258 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8014254:	2300      	movs	r3, #0
 8014256:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 8014258:	7dba      	ldrb	r2, [r7, #22]
 801425a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801425e:	4293      	cmp	r3, r2
 8014260:	bfa8      	it	ge
 8014262:	4613      	movge	r3, r2
 8014264:	b2da      	uxtb	r2, r3
 8014266:	6a3b      	ldr	r3, [r7, #32]
 8014268:	2108      	movs	r1, #8
 801426a:	68f8      	ldr	r0, [r7, #12]
 801426c:	f000 ffda 	bl	8015224 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8014270:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8014272:	2204      	movs	r2, #4
 8014274:	21c8      	movs	r1, #200	; 0xc8
 8014276:	68f8      	ldr	r0, [r7, #12]
 8014278:	f7ee faf6 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	881a      	ldrh	r2, [r3, #0]
 8014280:	7dbb      	ldrb	r3, [r7, #22]
 8014282:	b29b      	uxth	r3, r3
 8014284:	4413      	add	r3, r2
 8014286:	b29a      	uxth	r2, r3
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 801428c:	7dba      	ldrb	r2, [r7, #22]
 801428e:	7c7b      	ldrb	r3, [r7, #17]
 8014290:	429a      	cmp	r2, r3
 8014292:	d304      	bcc.n	801429e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	881b      	ldrh	r3, [r3, #0]
 8014298:	8a7a      	ldrh	r2, [r7, #18]
 801429a:	429a      	cmp	r2, r3
 801429c:	d813      	bhi.n	80142c6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 801429e:	21f8      	movs	r1, #248	; 0xf8
 80142a0:	68f8      	ldr	r0, [r7, #12]
 80142a2:	f7ee fb33 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80142a6:	4603      	mov	r3, r0
 80142a8:	f003 0310 	and.w	r3, r3, #16
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d001      	beq.n	80142b4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 80142b0:	2101      	movs	r1, #1
 80142b2:	e000      	b.n	80142b6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 80142b4:	2100      	movs	r1, #0
 80142b6:	68ba      	ldr	r2, [r7, #8]
 80142b8:	7893      	ldrb	r3, [r2, #2]
 80142ba:	f361 0341 	bfi	r3, r1, #1, #1
 80142be:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 80142c0:	2300      	movs	r3, #0
 80142c2:	75fb      	strb	r3, [r7, #23]
                        break;
 80142c4:	e00b      	b.n	80142de <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 80142c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	f43f af66 	beq.w	801419c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 80142d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7ee fe85 	bl	8002fe4 <HAL_Delay>
        } //while( 1 )
 80142da:	e75f      	b.n	801419c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 80142dc:	bf00      	nop
        return ( rcode);
 80142de:	7dfb      	ldrb	r3, [r7, #23]
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3718      	adds	r7, #24
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}

080142e8 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b088      	sub	sp, #32
 80142ec:	af02      	add	r7, sp, #8
 80142ee:	6078      	str	r0, [r7, #4]
 80142f0:	4608      	mov	r0, r1
 80142f2:	4611      	mov	r1, r2
 80142f4:	461a      	mov	r2, r3
 80142f6:	4603      	mov	r3, r0
 80142f8:	70fb      	strb	r3, [r7, #3]
 80142fa:	460b      	mov	r3, r1
 80142fc:	70bb      	strb	r3, [r7, #2]
 80142fe:	4613      	mov	r3, r2
 8014300:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 8014302:	2300      	movs	r3, #0
 8014304:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 8014306:	2300      	movs	r3, #0
 8014308:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 801430a:	f107 0010 	add.w	r0, r7, #16
 801430e:	78ba      	ldrb	r2, [r7, #2]
 8014310:	78f9      	ldrb	r1, [r7, #3]
 8014312:	f107 030e 	add.w	r3, r7, #14
 8014316:	9300      	str	r3, [sp, #0]
 8014318:	4603      	mov	r3, r0
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f7ff fd7b 	bl	8013e16 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8014320:	4603      	mov	r3, r0
 8014322:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8014324:	7dfb      	ldrb	r3, [r7, #23]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d001      	beq.n	801432e <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 801432a:	7dfb      	ldrb	r3, [r7, #23]
 801432c:	e00a      	b.n	8014344 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 801432e:	6939      	ldr	r1, [r7, #16]
 8014330:	89fa      	ldrh	r2, [r7, #14]
 8014332:	8838      	ldrh	r0, [r7, #0]
 8014334:	6a3b      	ldr	r3, [r7, #32]
 8014336:	9300      	str	r3, [sp, #0]
 8014338:	4603      	mov	r3, r0
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f000 f806 	bl	801434c <_ZN3USB11OutTransferEP6EpInfottPh>
 8014340:	4603      	mov	r3, r0
 8014342:	bf00      	nop
}
 8014344:	4618      	mov	r0, r3
 8014346:	3718      	adds	r7, #24
 8014348:	46bd      	mov	sp, r7
 801434a:	bd80      	pop	{r7, pc}

0801434c <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 801434c:	b580      	push	{r7, lr}
 801434e:	b08a      	sub	sp, #40	; 0x28
 8014350:	af00      	add	r7, sp, #0
 8014352:	60f8      	str	r0, [r7, #12]
 8014354:	60b9      	str	r1, [r7, #8]
 8014356:	4611      	mov	r1, r2
 8014358:	461a      	mov	r2, r3
 801435a:	460b      	mov	r3, r1
 801435c:	80fb      	strh	r3, [r7, #6]
 801435e:	4613      	mov	r3, r2
 8014360:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 8014362:	2300      	movs	r3, #0
 8014364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 8014368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801436a:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 801436c:	88bb      	ldrh	r3, [r7, #4]
 801436e:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	785b      	ldrb	r3, [r3, #1]
 8014374:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 8014376:	7efb      	ldrb	r3, [r7, #27]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d002      	beq.n	8014382 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 801437c:	7efb      	ldrb	r3, [r7, #27]
 801437e:	2b40      	cmp	r3, #64	; 0x40
 8014380:	d901      	bls.n	8014386 <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 8014382:	23da      	movs	r3, #218	; 0xda
 8014384:	e109      	b.n	801459a <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 8014386:	f7ee fe21 	bl	8002fcc <HAL_GetTick>
 801438a:	4603      	mov	r3, r0
 801438c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8014390:	3308      	adds	r3, #8
 8014392:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	789b      	ldrb	r3, [r3, #2]
 8014398:	f003 0301 	and.w	r3, r3, #1
 801439c:	b2db      	uxtb	r3, r3
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d001      	beq.n	80143a6 <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 80143a2:	2380      	movs	r3, #128	; 0x80
 80143a4:	e000      	b.n	80143a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 80143a6:	2340      	movs	r3, #64	; 0x40
 80143a8:	461a      	mov	r2, r3
 80143aa:	21e8      	movs	r1, #232	; 0xe8
 80143ac:	68f8      	ldr	r0, [r7, #12]
 80143ae:	f7ee fa5b 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 80143b2:	8bbb      	ldrh	r3, [r7, #28]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	f000 80da 	beq.w	801456e <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 80143ba:	2300      	movs	r3, #0
 80143bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 80143c0:	2300      	movs	r3, #0
 80143c2:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 80143c4:	7efb      	ldrb	r3, [r7, #27]
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	8bba      	ldrh	r2, [r7, #28]
 80143ca:	4293      	cmp	r3, r2
 80143cc:	bf28      	it	cs
 80143ce:	4613      	movcs	r3, r2
 80143d0:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 80143d2:	8a7b      	ldrh	r3, [r7, #18]
 80143d4:	b2da      	uxtb	r2, r3
 80143d6:	6a3b      	ldr	r3, [r7, #32]
 80143d8:	2110      	movs	r1, #16
 80143da:	68f8      	ldr	r0, [r7, #12]
 80143dc:	f000 fef4 	bl	80151c8 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 80143e0:	8a7b      	ldrh	r3, [r7, #18]
 80143e2:	b2db      	uxtb	r3, r3
 80143e4:	461a      	mov	r2, r3
 80143e6:	2138      	movs	r1, #56	; 0x38
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	f7ee fa3d 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	781b      	ldrb	r3, [r3, #0]
 80143f2:	f043 0320 	orr.w	r3, r3, #32
 80143f6:	b2db      	uxtb	r3, r3
 80143f8:	461a      	mov	r2, r3
 80143fa:	21f0      	movs	r1, #240	; 0xf0
 80143fc:	68f8      	ldr	r0, [r7, #12]
 80143fe:	f7ee fa33 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8014402:	21c8      	movs	r1, #200	; 0xc8
 8014404:	68f8      	ldr	r0, [r7, #12]
 8014406:	f7ee fa81 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 801440a:	4603      	mov	r3, r0
 801440c:	b25b      	sxtb	r3, r3
 801440e:	43db      	mvns	r3, r3
 8014410:	b2db      	uxtb	r3, r3
 8014412:	09db      	lsrs	r3, r3, #7
 8014414:	b2db      	uxtb	r3, r3
 8014416:	2b00      	cmp	r3, #0
 8014418:	d000      	beq.n	801441c <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 801441a:	e7f2      	b.n	8014402 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 801441c:	2280      	movs	r2, #128	; 0x80
 801441e:	21c8      	movs	r1, #200	; 0xc8
 8014420:	68f8      	ldr	r0, [r7, #12]
 8014422:	f7ee fa21 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 8014426:	21f8      	movs	r1, #248	; 0xf8
 8014428:	68f8      	ldr	r0, [r7, #12]
 801442a:	f7ee fa6f 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 801442e:	4603      	mov	r3, r0
 8014430:	f003 030f 	and.w	r3, r3, #15
 8014434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 8014438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801443c:	2b00      	cmp	r3, #0
 801443e:	d008      	beq.n	8014452 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8014440:	f7ee fdc4 	bl	8002fcc <HAL_GetTick>
 8014444:	4602      	mov	r2, r0
 8014446:	697b      	ldr	r3, [r7, #20]
 8014448:	1ad3      	subs	r3, r2, r3
 801444a:	2b00      	cmp	r3, #0
 801444c:	da01      	bge.n	8014452 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 801444e:	2301      	movs	r3, #1
 8014450:	e000      	b.n	8014454 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8014452:	2300      	movs	r3, #0
 8014454:	2b00      	cmp	r3, #0
 8014456:	f000 8081 	beq.w	801455c <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 801445a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801445e:	2b0e      	cmp	r3, #14
 8014460:	d012      	beq.n	8014488 <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 8014462:	2b0e      	cmp	r3, #14
 8014464:	f300 8085 	bgt.w	8014572 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 8014468:	2b04      	cmp	r3, #4
 801446a:	d002      	beq.n	8014472 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 801446c:	2b06      	cmp	r3, #6
 801446e:	d015      	beq.n	801449c <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 8014470:	e07f      	b.n	8014572 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 8014472:	8bfb      	ldrh	r3, [r7, #30]
 8014474:	3301      	adds	r3, #1
 8014476:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 8014478:	88fb      	ldrh	r3, [r7, #6]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d032      	beq.n	80144e4 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 801447e:	8bfa      	ldrh	r2, [r7, #30]
 8014480:	88fb      	ldrh	r3, [r7, #6]
 8014482:	429a      	cmp	r2, r3
 8014484:	d12e      	bne.n	80144e4 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 8014486:	e075      	b.n	8014574 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 8014488:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801448c:	3301      	adds	r3, #1
 801448e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 8014492:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014496:	2b03      	cmp	r3, #3
 8014498:	d126      	bne.n	80144e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 801449a:	e06b      	b.n	8014574 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 801449c:	21f8      	movs	r1, #248	; 0xf8
 801449e:	68f8      	ldr	r0, [r7, #12]
 80144a0:	f7ee fa34 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80144a4:	4603      	mov	r3, r0
 80144a6:	f003 0320 	and.w	r3, r3, #32
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	bf0c      	ite	eq
 80144ae:	2301      	moveq	r3, #1
 80144b0:	2300      	movne	r3, #0
 80144b2:	b2db      	uxtb	r3, r3
 80144b4:	f003 0301 	and.w	r3, r3, #1
 80144b8:	b2d9      	uxtb	r1, r3
 80144ba:	68ba      	ldr	r2, [r7, #8]
 80144bc:	7893      	ldrb	r3, [r2, #2]
 80144be:	f361 0300 	bfi	r3, r1, #0, #1
 80144c2:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	789b      	ldrb	r3, [r3, #2]
 80144c8:	f003 0301 	and.w	r3, r3, #1
 80144cc:	b2db      	uxtb	r3, r3
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d001      	beq.n	80144d6 <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 80144d2:	2380      	movs	r3, #128	; 0x80
 80144d4:	e000      	b.n	80144d8 <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 80144d6:	2340      	movs	r3, #64	; 0x40
 80144d8:	461a      	mov	r2, r3
 80144da:	21e8      	movs	r1, #232	; 0xe8
 80144dc:	68f8      	ldr	r0, [r7, #12]
 80144de:	f7ee f9c3 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 80144e2:	e002      	b.n	80144ea <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80144e4:	bf00      	nop
 80144e6:	e000      	b.n	80144ea <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80144e8:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 80144ea:	2200      	movs	r2, #0
 80144ec:	2138      	movs	r1, #56	; 0x38
 80144ee:	68f8      	ldr	r0, [r7, #12]
 80144f0:	f7ee f9ba 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 80144f4:	6a3b      	ldr	r3, [r7, #32]
 80144f6:	781b      	ldrb	r3, [r3, #0]
 80144f8:	461a      	mov	r2, r3
 80144fa:	2110      	movs	r1, #16
 80144fc:	68f8      	ldr	r0, [r7, #12]
 80144fe:	f7ee f9b3 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 8014502:	8a7b      	ldrh	r3, [r7, #18]
 8014504:	b2db      	uxtb	r3, r3
 8014506:	461a      	mov	r2, r3
 8014508:	2138      	movs	r1, #56	; 0x38
 801450a:	68f8      	ldr	r0, [r7, #12]
 801450c:	f7ee f9ac 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	781b      	ldrb	r3, [r3, #0]
 8014514:	f043 0320 	orr.w	r3, r3, #32
 8014518:	b2db      	uxtb	r3, r3
 801451a:	461a      	mov	r2, r3
 801451c:	21f0      	movs	r1, #240	; 0xf0
 801451e:	68f8      	ldr	r0, [r7, #12]
 8014520:	f7ee f9a2 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8014524:	21c8      	movs	r1, #200	; 0xc8
 8014526:	68f8      	ldr	r0, [r7, #12]
 8014528:	f7ee f9f0 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 801452c:	4603      	mov	r3, r0
 801452e:	b25b      	sxtb	r3, r3
 8014530:	43db      	mvns	r3, r3
 8014532:	b2db      	uxtb	r3, r3
 8014534:	09db      	lsrs	r3, r3, #7
 8014536:	b2db      	uxtb	r3, r3
 8014538:	2b00      	cmp	r3, #0
 801453a:	d000      	beq.n	801453e <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 801453c:	e7f2      	b.n	8014524 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 801453e:	2280      	movs	r2, #128	; 0x80
 8014540:	21c8      	movs	r1, #200	; 0xc8
 8014542:	68f8      	ldr	r0, [r7, #12]
 8014544:	f7ee f990 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 8014548:	21f8      	movs	r1, #248	; 0xf8
 801454a:	68f8      	ldr	r0, [r7, #12]
 801454c:	f7ee f9de 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8014550:	4603      	mov	r3, r0
 8014552:	f003 030f 	and.w	r3, r3, #15
 8014556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801455a:	e76d      	b.n	8014438 <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 801455c:	8bba      	ldrh	r2, [r7, #28]
 801455e:	8a7b      	ldrh	r3, [r7, #18]
 8014560:	1ad3      	subs	r3, r2, r3
 8014562:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 8014564:	8a7b      	ldrh	r3, [r7, #18]
 8014566:	6a3a      	ldr	r2, [r7, #32]
 8014568:	4413      	add	r3, r2
 801456a:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 801456c:	e721      	b.n	80143b2 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 801456e:	bf00      	nop
 8014570:	e000      	b.n	8014574 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 8014572:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 8014574:	21f8      	movs	r1, #248	; 0xf8
 8014576:	68f8      	ldr	r0, [r7, #12]
 8014578:	f7ee f9c8 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 801457c:	4603      	mov	r3, r0
 801457e:	f003 0320 	and.w	r3, r3, #32
 8014582:	2b00      	cmp	r3, #0
 8014584:	d001      	beq.n	801458a <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 8014586:	2101      	movs	r1, #1
 8014588:	e000      	b.n	801458c <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 801458a:	2100      	movs	r1, #0
 801458c:	68ba      	ldr	r2, [r7, #8]
 801458e:	7893      	ldrb	r3, [r2, #2]
 8014590:	f361 0300 	bfi	r3, r1, #0, #1
 8014594:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 8014596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801459a:	4618      	mov	r0, r3
 801459c:	3728      	adds	r7, #40	; 0x28
 801459e:	46bd      	mov	sp, r7
 80145a0:	bd80      	pop	{r7, pc}

080145a2 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 80145a2:	b580      	push	{r7, lr}
 80145a4:	b086      	sub	sp, #24
 80145a6:	af00      	add	r7, sp, #0
 80145a8:	6078      	str	r0, [r7, #4]
 80145aa:	4608      	mov	r0, r1
 80145ac:	4611      	mov	r1, r2
 80145ae:	461a      	mov	r2, r3
 80145b0:	4603      	mov	r3, r0
 80145b2:	70fb      	strb	r3, [r7, #3]
 80145b4:	460b      	mov	r3, r1
 80145b6:	70bb      	strb	r3, [r7, #2]
 80145b8:	4613      	mov	r3, r2
 80145ba:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 80145bc:	f7ee fd06 	bl	8002fcc <HAL_GetTick>
 80145c0:	4603      	mov	r3, r0
 80145c2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80145c6:	3308      	adds	r3, #8
 80145c8:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 80145ca:	2300      	movs	r3, #0
 80145cc:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 80145ce:	2300      	movs	r3, #0
 80145d0:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 80145d2:	2300      	movs	r3, #0
 80145d4:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 80145d6:	f7ee fcf9 	bl	8002fcc <HAL_GetTick>
 80145da:	4602      	mov	r2, r0
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	1ad3      	subs	r3, r2, r3
 80145e0:	0fdb      	lsrs	r3, r3, #31
 80145e2:	b2db      	uxtb	r3, r3
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d04c      	beq.n	8014682 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 80145e8:	78fa      	ldrb	r2, [r7, #3]
 80145ea:	78bb      	ldrb	r3, [r7, #2]
 80145ec:	4313      	orrs	r3, r2
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	461a      	mov	r2, r3
 80145f2:	21f0      	movs	r1, #240	; 0xf0
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f7ee f937 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 80145fa:	23ff      	movs	r3, #255	; 0xff
 80145fc:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 80145fe:	f7ee fce5 	bl	8002fcc <HAL_GetTick>
 8014602:	4602      	mov	r2, r0
 8014604:	693b      	ldr	r3, [r7, #16]
 8014606:	1ad3      	subs	r3, r2, r3
 8014608:	0fdb      	lsrs	r3, r3, #31
 801460a:	b2db      	uxtb	r3, r3
 801460c:	2b00      	cmp	r3, #0
 801460e:	d010      	beq.n	8014632 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 8014610:	21c8      	movs	r1, #200	; 0xc8
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f7ee f97a 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8014618:	4603      	mov	r3, r0
 801461a:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 801461c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014620:	2b00      	cmp	r3, #0
 8014622:	daec      	bge.n	80145fe <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 8014624:	2280      	movs	r2, #128	; 0x80
 8014626:	21c8      	movs	r1, #200	; 0xc8
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f7ee f91d 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 801462e:	2300      	movs	r3, #0
 8014630:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 8014632:	21f8      	movs	r1, #248	; 0xf8
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f7ee f969 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 801463a:	4603      	mov	r3, r0
 801463c:	f003 030f 	and.w	r3, r3, #15
 8014640:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 8014642:	7dfb      	ldrb	r3, [r7, #23]
 8014644:	2b04      	cmp	r3, #4
 8014646:	d002      	beq.n	801464e <_ZN3USB11dispatchPktEhht+0xac>
 8014648:	2b0e      	cmp	r3, #14
 801464a:	d00c      	beq.n	8014666 <_ZN3USB11dispatchPktEhht+0xc4>
 801464c:	e013      	b.n	8014676 <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 801464e:	8abb      	ldrh	r3, [r7, #20]
 8014650:	3301      	adds	r3, #1
 8014652:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 8014654:	883b      	ldrh	r3, [r7, #0]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d00f      	beq.n	801467a <_ZN3USB11dispatchPktEhht+0xd8>
 801465a:	8aba      	ldrh	r2, [r7, #20]
 801465c:	883b      	ldrh	r3, [r7, #0]
 801465e:	429a      	cmp	r2, r3
 8014660:	d10b      	bne.n	801467a <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 8014662:	7dfb      	ldrb	r3, [r7, #23]
 8014664:	e00e      	b.n	8014684 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 8014666:	7dbb      	ldrb	r3, [r7, #22]
 8014668:	3301      	adds	r3, #1
 801466a:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 801466c:	7dbb      	ldrb	r3, [r7, #22]
 801466e:	2b03      	cmp	r3, #3
 8014670:	d105      	bne.n	801467e <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 8014672:	7dfb      	ldrb	r3, [r7, #23]
 8014674:	e006      	b.n	8014684 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 8014676:	7dfb      	ldrb	r3, [r7, #23]
 8014678:	e004      	b.n	8014684 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 801467a:	bf00      	nop
 801467c:	e7ab      	b.n	80145d6 <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 801467e:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8014680:	e7a9      	b.n	80145d6 <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 8014682:	7dfb      	ldrb	r3, [r7, #23]
}
 8014684:	4618      	mov	r0, r3
 8014686:	3718      	adds	r7, #24
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 8014694:	2300      	movs	r3, #0
 8014696:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f000 fdf1 	bl	8015280 <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 801469e:	6878      	ldr	r0, [r7, #4]
 80146a0:	f000 fe06 	bl	80152b0 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 80146a4:	4603      	mov	r3, r0
 80146a6:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 80146a8:	7b3b      	ldrb	r3, [r7, #12]
 80146aa:	2b03      	cmp	r3, #3
 80146ac:	d82e      	bhi.n	801470c <_ZN3USB4TaskEv+0x80>
 80146ae:	a201      	add	r2, pc, #4	; (adr r2, 80146b4 <_ZN3USB4TaskEv+0x28>)
 80146b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146b4:	080146d1 	.word	0x080146d1
 80146b8:	080146c5 	.word	0x080146c5
 80146bc:	080146ed 	.word	0x080146ed
 80146c0:	080146e9 	.word	0x080146e9
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 80146c4:	4bbf      	ldr	r3, [pc, #764]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 80146c6:	2213      	movs	r2, #19
 80146c8:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80146ca:	2300      	movs	r3, #0
 80146cc:	73fb      	strb	r3, [r7, #15]
                        break;
 80146ce:	e01d      	b.n	801470c <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 80146d0:	4bbc      	ldr	r3, [pc, #752]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80146d8:	2b10      	cmp	r3, #16
 80146da:	d002      	beq.n	80146e2 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 80146dc:	4bb9      	ldr	r3, [pc, #740]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 80146de:	2211      	movs	r2, #17
 80146e0:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80146e2:	2300      	movs	r3, #0
 80146e4:	73fb      	strb	r3, [r7, #15]
                        break;
 80146e6:	e011      	b.n	801470c <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 80146e8:	2301      	movs	r3, #1
 80146ea:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 80146ec:	4bb5      	ldr	r3, [pc, #724]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 80146ee:	781b      	ldrb	r3, [r3, #0]
 80146f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80146f4:	2b10      	cmp	r3, #16
 80146f6:	d108      	bne.n	801470a <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 80146f8:	f7ee fc68 	bl	8002fcc <HAL_GetTick>
 80146fc:	4603      	mov	r3, r0
 80146fe:	33c8      	adds	r3, #200	; 0xc8
 8014700:	4ab1      	ldr	r2, [pc, #708]	; (80149c8 <_ZN3USB4TaskEv+0x33c>)
 8014702:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8014704:	4baf      	ldr	r3, [pc, #700]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 8014706:	2220      	movs	r2, #32
 8014708:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 801470a:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801470c:	2300      	movs	r3, #0
 801470e:	73bb      	strb	r3, [r7, #14]
 8014710:	7bbb      	ldrb	r3, [r7, #14]
 8014712:	2b0f      	cmp	r3, #15
 8014714:	d81b      	bhi.n	801474e <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 8014716:	7bba      	ldrb	r2, [r7, #14]
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	321e      	adds	r2, #30
 801471c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d010      	beq.n	8014746 <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 8014724:	7bba      	ldrb	r2, [r7, #14]
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	321e      	adds	r2, #30
 801472a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801472e:	7bba      	ldrb	r2, [r7, #14]
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	321e      	adds	r2, #30
 8014734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	330c      	adds	r3, #12
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	4608      	mov	r0, r1
 8014740:	4798      	blx	r3
 8014742:	4603      	mov	r3, r0
 8014744:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8014746:	7bbb      	ldrb	r3, [r7, #14]
 8014748:	3301      	adds	r3, #1
 801474a:	73bb      	strb	r3, [r7, #14]
 801474c:	e7e0      	b.n	8014710 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 801474e:	4b9d      	ldr	r3, [pc, #628]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	2ba0      	cmp	r3, #160	; 0xa0
 8014754:	f000 8123 	beq.w	801499e <_ZN3USB4TaskEv+0x312>
 8014758:	2ba0      	cmp	r3, #160	; 0xa0
 801475a:	f300 812f 	bgt.w	80149bc <_ZN3USB4TaskEv+0x330>
 801475e:	2b90      	cmp	r3, #144	; 0x90
 8014760:	f000 811f 	beq.w	80149a2 <_ZN3USB4TaskEv+0x316>
 8014764:	2b90      	cmp	r3, #144	; 0x90
 8014766:	f300 8129 	bgt.w	80149bc <_ZN3USB4TaskEv+0x330>
 801476a:	2b80      	cmp	r3, #128	; 0x80
 801476c:	f000 80fe 	beq.w	801496c <_ZN3USB4TaskEv+0x2e0>
 8014770:	2b80      	cmp	r3, #128	; 0x80
 8014772:	f300 8123 	bgt.w	80149bc <_ZN3USB4TaskEv+0x330>
 8014776:	2b51      	cmp	r3, #81	; 0x51
 8014778:	f000 80ea 	beq.w	8014950 <_ZN3USB4TaskEv+0x2c4>
 801477c:	2b51      	cmp	r3, #81	; 0x51
 801477e:	f300 811d 	bgt.w	80149bc <_ZN3USB4TaskEv+0x330>
 8014782:	2b40      	cmp	r3, #64	; 0x40
 8014784:	dc6a      	bgt.n	801485c <_ZN3USB4TaskEv+0x1d0>
 8014786:	2b11      	cmp	r3, #17
 8014788:	f2c0 8118 	blt.w	80149bc <_ZN3USB4TaskEv+0x330>
 801478c:	3b11      	subs	r3, #17
 801478e:	2b2f      	cmp	r3, #47	; 0x2f
 8014790:	f200 8114 	bhi.w	80149bc <_ZN3USB4TaskEv+0x330>
 8014794:	a201      	add	r2, pc, #4	; (adr r2, 801479c <_ZN3USB4TaskEv+0x110>)
 8014796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801479a:	bf00      	nop
 801479c:	08014863 	.word	0x08014863
 80147a0:	080149a7 	.word	0x080149a7
 80147a4:	080149a7 	.word	0x080149a7
 80147a8:	080149bd 	.word	0x080149bd
 80147ac:	080149bd 	.word	0x080149bd
 80147b0:	080149bd 	.word	0x080149bd
 80147b4:	080149bd 	.word	0x080149bd
 80147b8:	080149bd 	.word	0x080149bd
 80147bc:	080149bd 	.word	0x080149bd
 80147c0:	080149bd 	.word	0x080149bd
 80147c4:	080149bd 	.word	0x080149bd
 80147c8:	080149bd 	.word	0x080149bd
 80147cc:	080149bd 	.word	0x080149bd
 80147d0:	080149bd 	.word	0x080149bd
 80147d4:	080149bd 	.word	0x080149bd
 80147d8:	080148b3 	.word	0x080148b3
 80147dc:	080149bd 	.word	0x080149bd
 80147e0:	080149bd 	.word	0x080149bd
 80147e4:	080149bd 	.word	0x080149bd
 80147e8:	080149bd 	.word	0x080149bd
 80147ec:	080149bd 	.word	0x080149bd
 80147f0:	080149bd 	.word	0x080149bd
 80147f4:	080149bd 	.word	0x080149bd
 80147f8:	080149bd 	.word	0x080149bd
 80147fc:	080149bd 	.word	0x080149bd
 8014800:	080149bd 	.word	0x080149bd
 8014804:	080149bd 	.word	0x080149bd
 8014808:	080149bd 	.word	0x080149bd
 801480c:	080149bd 	.word	0x080149bd
 8014810:	080149bd 	.word	0x080149bd
 8014814:	080149bd 	.word	0x080149bd
 8014818:	080148cf 	.word	0x080148cf
 801481c:	080149bd 	.word	0x080149bd
 8014820:	080149bd 	.word	0x080149bd
 8014824:	080149bd 	.word	0x080149bd
 8014828:	080149bd 	.word	0x080149bd
 801482c:	080149bd 	.word	0x080149bd
 8014830:	080149bd 	.word	0x080149bd
 8014834:	080149bd 	.word	0x080149bd
 8014838:	080149bd 	.word	0x080149bd
 801483c:	080149bd 	.word	0x080149bd
 8014840:	080149bd 	.word	0x080149bd
 8014844:	080149bd 	.word	0x080149bd
 8014848:	080149bd 	.word	0x080149bd
 801484c:	080149bd 	.word	0x080149bd
 8014850:	080149bd 	.word	0x080149bd
 8014854:	080149bd 	.word	0x080149bd
 8014858:	080148e1 	.word	0x080148e1
 801485c:	2b50      	cmp	r3, #80	; 0x50
 801485e:	d05f      	beq.n	8014920 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 8014860:	e0ac      	b.n	80149bc <_ZN3USB4TaskEv+0x330>
                        init();
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f7ff fa6c 	bl	8013d40 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8014868:	2300      	movs	r3, #0
 801486a:	737b      	strb	r3, [r7, #13]
 801486c:	7b7b      	ldrb	r3, [r7, #13]
 801486e:	2b0f      	cmp	r3, #15
 8014870:	d81b      	bhi.n	80148aa <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 8014872:	7b7a      	ldrb	r2, [r7, #13]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	321e      	adds	r2, #30
 8014878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d010      	beq.n	80148a2 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 8014880:	7b7a      	ldrb	r2, [r7, #13]
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	321e      	adds	r2, #30
 8014886:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801488a:	7b7a      	ldrb	r2, [r7, #13]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	321e      	adds	r2, #30
 8014890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	3308      	adds	r3, #8
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	4608      	mov	r0, r1
 801489c:	4798      	blx	r3
 801489e:	4603      	mov	r3, r0
 80148a0:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80148a2:	7b7b      	ldrb	r3, [r7, #13]
 80148a4:	3301      	adds	r3, #1
 80148a6:	737b      	strb	r3, [r7, #13]
 80148a8:	e7e0      	b.n	801486c <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 80148aa:	4b46      	ldr	r3, [pc, #280]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 80148ac:	2212      	movs	r2, #18
 80148ae:	701a      	strb	r2, [r3, #0]
                        break;
 80148b0:	e084      	b.n	80149bc <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 80148b2:	f7ee fb8b 	bl	8002fcc <HAL_GetTick>
 80148b6:	4602      	mov	r2, r0
 80148b8:	4b43      	ldr	r3, [pc, #268]	; (80149c8 <_ZN3USB4TaskEv+0x33c>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	1ad3      	subs	r3, r2, r3
 80148be:	43db      	mvns	r3, r3
 80148c0:	0fdb      	lsrs	r3, r3, #31
 80148c2:	b2db      	uxtb	r3, r3
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d070      	beq.n	80149aa <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 80148c8:	4b3e      	ldr	r3, [pc, #248]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 80148ca:	2230      	movs	r2, #48	; 0x30
 80148cc:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80148ce:	2201      	movs	r2, #1
 80148d0:	21e8      	movs	r1, #232	; 0xe8
 80148d2:	6878      	ldr	r0, [r7, #4]
 80148d4:	f7ed ffc8 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 80148d8:	4b3a      	ldr	r3, [pc, #232]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 80148da:	2240      	movs	r2, #64	; 0x40
 80148dc:	701a      	strb	r2, [r3, #0]
                        break;
 80148de:	e06d      	b.n	80149bc <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 80148e0:	21e8      	movs	r1, #232	; 0xe8
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f7ee f812 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80148e8:	4603      	mov	r3, r0
 80148ea:	f003 0301 	and.w	r3, r3, #1
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	bf0c      	ite	eq
 80148f2:	2301      	moveq	r3, #1
 80148f4:	2300      	movne	r3, #0
 80148f6:	b2db      	uxtb	r3, r3
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d058      	beq.n	80149ae <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 80148fc:	21d8      	movs	r1, #216	; 0xd8
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	f7ee f804 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8014904:	4603      	mov	r3, r0
 8014906:	f043 0308 	orr.w	r3, r3, #8
 801490a:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 801490c:	7b3b      	ldrb	r3, [r7, #12]
 801490e:	461a      	mov	r2, r3
 8014910:	21d8      	movs	r1, #216	; 0xd8
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	f7ed ffa8 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8014918:	4b2a      	ldr	r3, [pc, #168]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 801491a:	2250      	movs	r2, #80	; 0x50
 801491c:	701a      	strb	r2, [r3, #0]
                        break;
 801491e:	e046      	b.n	80149ae <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 8014920:	21c8      	movs	r1, #200	; 0xc8
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	f7ed fff2 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8014928:	4603      	mov	r3, r0
 801492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801492e:	2b00      	cmp	r3, #0
 8014930:	bf14      	ite	ne
 8014932:	2301      	movne	r3, #1
 8014934:	2300      	moveq	r3, #0
 8014936:	b2db      	uxtb	r3, r3
 8014938:	2b00      	cmp	r3, #0
 801493a:	d03a      	beq.n	80149b2 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 801493c:	4b21      	ldr	r3, [pc, #132]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 801493e:	2251      	movs	r2, #81	; 0x51
 8014940:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 8014942:	f7ee fb43 	bl	8002fcc <HAL_GetTick>
 8014946:	4603      	mov	r3, r0
 8014948:	3314      	adds	r3, #20
 801494a:	4a1f      	ldr	r2, [pc, #124]	; (80149c8 <_ZN3USB4TaskEv+0x33c>)
 801494c:	6013      	str	r3, [r2, #0]
                        break;
 801494e:	e030      	b.n	80149b2 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 8014950:	f7ee fb3c 	bl	8002fcc <HAL_GetTick>
 8014954:	4602      	mov	r2, r0
 8014956:	4b1c      	ldr	r3, [pc, #112]	; (80149c8 <_ZN3USB4TaskEv+0x33c>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	1ad3      	subs	r3, r2, r3
 801495c:	43db      	mvns	r3, r3
 801495e:	0fdb      	lsrs	r3, r3, #31
 8014960:	b2db      	uxtb	r3, r3
 8014962:	2b00      	cmp	r3, #0
 8014964:	d027      	beq.n	80149b6 <_ZN3USB4TaskEv+0x32a>
 8014966:	4b17      	ldr	r3, [pc, #92]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 8014968:	2280      	movs	r2, #128	; 0x80
 801496a:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 801496c:	7bfb      	ldrb	r3, [r7, #15]
 801496e:	2200      	movs	r2, #0
 8014970:	2100      	movs	r1, #0
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	f000 f920 	bl	8014bb8 <_ZN3USB11ConfiguringEhhb>
 8014978:	4603      	mov	r3, r0
 801497a:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 801497c:	7afb      	ldrb	r3, [r7, #11]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d009      	beq.n	8014996 <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 8014982:	7afb      	ldrb	r3, [r7, #11]
 8014984:	2bd2      	cmp	r3, #210	; 0xd2
 8014986:	d018      	beq.n	80149ba <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 8014988:	4a10      	ldr	r2, [pc, #64]	; (80149cc <_ZN3USB4TaskEv+0x340>)
 801498a:	7afb      	ldrb	r3, [r7, #11]
 801498c:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 801498e:	4b0d      	ldr	r3, [pc, #52]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 8014990:	22a0      	movs	r2, #160	; 0xa0
 8014992:	701a      	strb	r2, [r3, #0]
                        break;
 8014994:	e011      	b.n	80149ba <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 8014996:	4b0b      	ldr	r3, [pc, #44]	; (80149c4 <_ZN3USB4TaskEv+0x338>)
 8014998:	2290      	movs	r2, #144	; 0x90
 801499a:	701a      	strb	r2, [r3, #0]
                        break;
 801499c:	e00d      	b.n	80149ba <_ZN3USB4TaskEv+0x32e>
                        break;
 801499e:	bf00      	nop
 80149a0:	e00c      	b.n	80149bc <_ZN3USB4TaskEv+0x330>
                        break;
 80149a2:	bf00      	nop
 80149a4:	e00a      	b.n	80149bc <_ZN3USB4TaskEv+0x330>
                        break;
 80149a6:	bf00      	nop
 80149a8:	e008      	b.n	80149bc <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 80149aa:	bf00      	nop
 80149ac:	e006      	b.n	80149bc <_ZN3USB4TaskEv+0x330>
                        break;
 80149ae:	bf00      	nop
 80149b0:	e004      	b.n	80149bc <_ZN3USB4TaskEv+0x330>
                        break;
 80149b2:	bf00      	nop
 80149b4:	e002      	b.n	80149bc <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 80149b6:	bf00      	nop
 80149b8:	e000      	b.n	80149bc <_ZN3USB4TaskEv+0x330>
                        break;
 80149ba:	bf00      	nop
}
 80149bc:	bf00      	nop
 80149be:	3710      	adds	r7, #16
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}
 80149c4:	20005752 	.word	0x20005752
 80149c8:	20005754 	.word	0x20005754
 80149cc:	20005751 	.word	0x20005751

080149d0 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b086      	sub	sp, #24
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
 80149d8:	4608      	mov	r0, r1
 80149da:	4611      	mov	r1, r2
 80149dc:	461a      	mov	r2, r3
 80149de:	4603      	mov	r3, r0
 80149e0:	70fb      	strb	r3, [r7, #3]
 80149e2:	460b      	mov	r3, r1
 80149e4:	70bb      	strb	r3, [r7, #2]
 80149e6:	4613      	mov	r3, r2
 80149e8:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 80149ea:	2300      	movs	r3, #0
 80149ec:	617b      	str	r3, [r7, #20]
 80149ee:	2300      	movs	r3, #0
 80149f0:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	2100      	movs	r1, #0
 80149f6:	4618      	mov	r0, r3
 80149f8:	f000 fbc0 	bl	801517c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 80149fc:	6178      	str	r0, [r7, #20]

        if(!p0)
 80149fe:	697b      	ldr	r3, [r7, #20]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d101      	bne.n	8014a08 <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8014a04:	23d6      	movs	r3, #214	; 0xd6
 8014a06:	e03a      	b.n	8014a7e <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 8014a08:	697b      	ldr	r3, [r7, #20]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d101      	bne.n	8014a14 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 8014a10:	23d7      	movs	r3, #215	; 0xd7
 8014a12:	e034      	b.n	8014a7e <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	787a      	ldrb	r2, [r7, #1]
 8014a18:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	78bb      	ldrb	r3, [r7, #2]
 8014a1e:	78f9      	ldrb	r1, [r7, #3]
 8014a20:	2200      	movs	r2, #0
 8014a22:	f000 fc53 	bl	80152cc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 8014a26:	4603      	mov	r3, r0
 8014a28:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 8014a2a:	7bfb      	ldrb	r3, [r7, #15]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d101      	bne.n	8014a34 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8014a30:	23d4      	movs	r3, #212	; 0xd4
 8014a32:	e024      	b.n	8014a7e <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	7bfa      	ldrb	r2, [r7, #15]
 8014a38:	4611      	mov	r1, r2
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f000 fb9e 	bl	801517c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8014a40:	6138      	str	r0, [r7, #16]

        if(!p)
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d101      	bne.n	8014a4c <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8014a48:	23d6      	movs	r3, #214	; 0xd6
 8014a4a:	e018      	b.n	8014a7e <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 8014a4c:	693b      	ldr	r3, [r7, #16]
 8014a4e:	787a      	ldrb	r2, [r7, #1]
 8014a50:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 8014a52:	7bfb      	ldrb	r3, [r7, #15]
 8014a54:	2200      	movs	r2, #0
 8014a56:	2100      	movs	r1, #0
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f000 fae3 	bl	8015024 <_ZN3USB7setAddrEhhh>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 8014a62:	7bbb      	ldrb	r3, [r7, #14]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d009      	beq.n	8014a7c <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	7bfa      	ldrb	r2, [r7, #15]
 8014a6c:	4611      	mov	r1, r2
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f000 fcc4 	bl	80153fc <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 8014a74:	2300      	movs	r3, #0
 8014a76:	73fb      	strb	r3, [r7, #15]
                return rcode;
 8014a78:	7bbb      	ldrb	r3, [r7, #14]
 8014a7a:	e000      	b.n	8014a7e <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 8014a7c:	2300      	movs	r3, #0
};
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3718      	adds	r7, #24
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}

08014a86 <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 8014a86:	b590      	push	{r4, r7, lr}
 8014a88:	b085      	sub	sp, #20
 8014a8a:	af00      	add	r7, sp, #0
 8014a8c:	6078      	str	r0, [r7, #4]
 8014a8e:	4608      	mov	r0, r1
 8014a90:	4611      	mov	r1, r2
 8014a92:	461a      	mov	r2, r3
 8014a94:	4603      	mov	r3, r0
 8014a96:	70fb      	strb	r3, [r7, #3]
 8014a98:	460b      	mov	r3, r1
 8014a9a:	70bb      	strb	r3, [r7, #2]
 8014a9c:	4613      	mov	r3, r2
 8014a9e:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 8014aa4:	78fa      	ldrb	r2, [r7, #3]
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	321e      	adds	r2, #30
 8014aaa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014aae:	78fa      	ldrb	r2, [r7, #3]
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	321e      	adds	r2, #30
 8014ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	3304      	adds	r3, #4
 8014abc:	681c      	ldr	r4, [r3, #0]
 8014abe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014ac2:	787a      	ldrb	r2, [r7, #1]
 8014ac4:	78b9      	ldrb	r1, [r7, #2]
 8014ac6:	47a0      	blx	r4
 8014ac8:	4603      	mov	r3, r0
 8014aca:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 8014acc:	7bbb      	ldrb	r3, [r7, #14]
 8014ace:	2be0      	cmp	r3, #224	; 0xe0
 8014ad0:	d11c      	bne.n	8014b0c <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 8014ad2:	78bb      	ldrb	r3, [r7, #2]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d108      	bne.n	8014aea <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8014ad8:	2201      	movs	r2, #1
 8014ada:	21e8      	movs	r1, #232	; 0xe8
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f7ed fec3 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8014ae2:	2066      	movs	r0, #102	; 0x66
 8014ae4:	f7ee fa7e 	bl	8002fe4 <HAL_Delay>
 8014ae8:	e022      	b.n	8014b30 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8014aea:	78ba      	ldrb	r2, [r7, #2]
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	321e      	adds	r2, #30
 8014af0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014af4:	78ba      	ldrb	r2, [r7, #2]
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	321e      	adds	r2, #30
 8014afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	3314      	adds	r3, #20
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	787a      	ldrb	r2, [r7, #1]
 8014b06:	4611      	mov	r1, r2
 8014b08:	4798      	blx	r3
 8014b0a:	e011      	b.n	8014b30 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8014b0c:	7bbb      	ldrb	r3, [r7, #14]
 8014b0e:	2b0d      	cmp	r3, #13
 8014b10:	d109      	bne.n	8014b26 <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8014b12:	7bfb      	ldrb	r3, [r7, #15]
 8014b14:	2b02      	cmp	r3, #2
 8014b16:	d806      	bhi.n	8014b26 <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 8014b18:	2064      	movs	r0, #100	; 0x64
 8014b1a:	f7ee fa63 	bl	8002fe4 <HAL_Delay>
                retries++;
 8014b1e:	7bfb      	ldrb	r3, [r7, #15]
 8014b20:	3301      	adds	r3, #1
 8014b22:	73fb      	strb	r3, [r7, #15]
                goto again;
 8014b24:	e7be      	b.n	8014aa4 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 8014b26:	7bbb      	ldrb	r3, [r7, #14]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d001      	beq.n	8014b30 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 8014b2c:	7bbb      	ldrb	r3, [r7, #14]
 8014b2e:	e03f      	b.n	8014bb0 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 8014b30:	78fa      	ldrb	r2, [r7, #3]
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	321e      	adds	r2, #30
 8014b36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014b3a:	78fa      	ldrb	r2, [r7, #3]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	321e      	adds	r2, #30
 8014b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	681c      	ldr	r4, [r3, #0]
 8014b48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014b4c:	787a      	ldrb	r2, [r7, #1]
 8014b4e:	78b9      	ldrb	r1, [r7, #2]
 8014b50:	47a0      	blx	r4
 8014b52:	4603      	mov	r3, r0
 8014b54:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8014b56:	7bbb      	ldrb	r3, [r7, #14]
 8014b58:	2b0d      	cmp	r3, #13
 8014b5a:	d109      	bne.n	8014b70 <_ZN3USB13AttemptConfigEhhhb+0xea>
 8014b5c:	7bfb      	ldrb	r3, [r7, #15]
 8014b5e:	2b02      	cmp	r3, #2
 8014b60:	d806      	bhi.n	8014b70 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 8014b62:	2064      	movs	r0, #100	; 0x64
 8014b64:	f7ee fa3e 	bl	8002fe4 <HAL_Delay>
                retries++;
 8014b68:	7bfb      	ldrb	r3, [r7, #15]
 8014b6a:	3301      	adds	r3, #1
 8014b6c:	73fb      	strb	r3, [r7, #15]
                goto again;
 8014b6e:	e799      	b.n	8014aa4 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 8014b70:	7bbb      	ldrb	r3, [r7, #14]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d01b      	beq.n	8014bae <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 8014b76:	78bb      	ldrb	r3, [r7, #2]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d108      	bne.n	8014b8e <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8014b7c:	2201      	movs	r2, #1
 8014b7e:	21e8      	movs	r1, #232	; 0xe8
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f7ed fe71 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8014b86:	2066      	movs	r0, #102	; 0x66
 8014b88:	f7ee fa2c 	bl	8002fe4 <HAL_Delay>
 8014b8c:	e00f      	b.n	8014bae <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8014b8e:	78ba      	ldrb	r2, [r7, #2]
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	321e      	adds	r2, #30
 8014b94:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014b98:	78ba      	ldrb	r2, [r7, #2]
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	321e      	adds	r2, #30
 8014b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	3314      	adds	r3, #20
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	787a      	ldrb	r2, [r7, #1]
 8014baa:	4611      	mov	r1, r2
 8014bac:	4798      	blx	r3
                }
        }
        return rcode;
 8014bae:	7bbb      	ldrb	r3, [r7, #14]
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3714      	adds	r7, #20
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd90      	pop	{r4, r7, pc}

08014bb8 <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b090      	sub	sp, #64	; 0x40
 8014bbc:	af02      	add	r7, sp, #8
 8014bbe:	6078      	str	r0, [r7, #4]
 8014bc0:	4608      	mov	r0, r1
 8014bc2:	4611      	mov	r1, r2
 8014bc4:	461a      	mov	r2, r3
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	70fb      	strb	r3, [r7, #3]
 8014bca:	460b      	mov	r3, r1
 8014bcc:	70bb      	strb	r3, [r7, #2]
 8014bce:	4613      	mov	r3, r2
 8014bd0:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 8014bd8:	f107 030c 	add.w	r3, r7, #12
 8014bdc:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 8014bde:	2300      	movs	r3, #0
 8014be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8014be2:	2300      	movs	r3, #0
 8014be4:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 8014be6:	2300      	movs	r3, #0
 8014be8:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 8014bea:	2308      	movs	r3, #8
 8014bec:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8014bee:	7abb      	ldrb	r3, [r7, #10]
 8014bf0:	f36f 0300 	bfc	r3, #0, #1
 8014bf4:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 8014bf6:	7abb      	ldrb	r3, [r7, #10]
 8014bf8:	f36f 0341 	bfc	r3, #1, #1
 8014bfc:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8014bfe:	7abb      	ldrb	r3, [r7, #10]
 8014c00:	220f      	movs	r2, #15
 8014c02:	f362 0387 	bfi	r3, r2, #2, #6
 8014c06:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 8014c08:	6878      	ldr	r0, [r7, #4]
 8014c0a:	f7f9 fe85 	bl	800e918 <_ZN3USB14GetAddressPoolEv>
 8014c0e:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8014c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	2100      	movs	r1, #0
 8014c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c1a:	4798      	blx	r3
 8014c1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 8014c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d101      	bne.n	8014c28 <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8014c24:	23d6      	movs	r3, #214	; 0xd6
 8014c26:	e15c      	b.n	8014ee2 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 8014c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 8014c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c30:	f107 0208 	add.w	r2, r7, #8
 8014c34:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 8014c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c38:	787a      	ldrb	r2, [r7, #1]
 8014c3a:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 8014c3c:	f107 030c 	add.w	r3, r7, #12
 8014c40:	9300      	str	r3, [sp, #0]
 8014c42:	2312      	movs	r3, #18
 8014c44:	2200      	movs	r2, #0
 8014c46:	2100      	movs	r1, #0
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f000 f94e 	bl	8014eea <_ZN3USB11getDevDescrEhhtPh>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 8014c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c58:	601a      	str	r2, [r3, #0]

        if(rcode) {
 8014c5a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d002      	beq.n	8014c68 <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8014c62:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014c66:	e13c      	b.n	8014ee2 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 8014c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c6a:	7a1a      	ldrb	r2, [r3, #8]
 8014c6c:	7a5b      	ldrb	r3, [r3, #9]
 8014c6e:	021b      	lsls	r3, r3, #8
 8014c70:	4313      	orrs	r3, r2
 8014c72:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8014c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c76:	7a9a      	ldrb	r2, [r3, #10]
 8014c78:	7adb      	ldrb	r3, [r3, #11]
 8014c7a:	021b      	lsls	r3, r3, #8
 8014c7c:	4313      	orrs	r3, r2
 8014c7e:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8014c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c82:	791b      	ldrb	r3, [r3, #4]
 8014c84:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 8014c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c88:	795b      	ldrb	r3, [r3, #5]
 8014c8a:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014c92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014c96:	2b0f      	cmp	r3, #15
 8014c98:	f200 8081 	bhi.w	8014d9e <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8014c9c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	321e      	adds	r2, #30
 8014ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d06e      	beq.n	8014d8a <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8014cac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	321e      	adds	r2, #30
 8014cb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014cb8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	321e      	adds	r2, #30
 8014cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	3310      	adds	r3, #16
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	4608      	mov	r0, r1
 8014ccc:	4798      	blx	r3
 8014cce:	4603      	mov	r3, r0
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	bf14      	ite	ne
 8014cd4:	2301      	movne	r3, #1
 8014cd6:	2300      	moveq	r3, #0
 8014cd8:	b2db      	uxtb	r3, r3
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d157      	bne.n	8014d8e <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 8014cde:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	321e      	adds	r2, #30
 8014ce6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014cea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	321e      	adds	r2, #30
 8014cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	3320      	adds	r3, #32
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	7fba      	ldrb	r2, [r7, #30]
 8014cfe:	4611      	mov	r1, r2
 8014d00:	4798      	blx	r3
 8014d02:	4603      	mov	r3, r0
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d02b      	beq.n	8014d60 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8014d08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	321e      	adds	r2, #30
 8014d10:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014d14:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	321e      	adds	r2, #30
 8014d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	3318      	adds	r3, #24
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	8c3a      	ldrh	r2, [r7, #32]
 8014d28:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8014d2a:	4798      	blx	r3
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d114      	bne.n	8014d5c <_ZN3USB11ConfiguringEhhb+0x1a4>
 8014d32:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	321e      	adds	r2, #30
 8014d3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014d3e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	321e      	adds	r2, #30
 8014d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	331c      	adds	r3, #28
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	7ffa      	ldrb	r2, [r7, #31]
 8014d52:	4611      	mov	r1, r2
 8014d54:	4798      	blx	r3
 8014d56:	4603      	mov	r3, r0
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d001      	beq.n	8014d60 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8014d5c:	2301      	movs	r3, #1
 8014d5e:	e000      	b.n	8014d62 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8014d60:	2300      	movs	r3, #0
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d014      	beq.n	8014d90 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8014d66:	78b8      	ldrb	r0, [r7, #2]
 8014d68:	78fa      	ldrb	r2, [r7, #3]
 8014d6a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8014d6e:	787b      	ldrb	r3, [r7, #1]
 8014d70:	9300      	str	r3, [sp, #0]
 8014d72:	4603      	mov	r3, r0
 8014d74:	6878      	ldr	r0, [r7, #4]
 8014d76:	f7ff fe86 	bl	8014a86 <_ZN3USB13AttemptConfigEhhhb>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8014d80:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014d84:	2bd1      	cmp	r3, #209	; 0xd1
 8014d86:	d109      	bne.n	8014d9c <_ZN3USB11ConfiguringEhhb+0x1e4>
 8014d88:	e002      	b.n	8014d90 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8014d8a:	bf00      	nop
 8014d8c:	e000      	b.n	8014d90 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8014d8e:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8014d90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014d94:	3301      	adds	r3, #1
 8014d96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014d9a:	e77a      	b.n	8014c92 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8014d9c:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8014d9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014da2:	2b0f      	cmp	r3, #15
 8014da4:	d802      	bhi.n	8014dac <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8014da6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014daa:	e09a      	b.n	8014ee2 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8014dac:	2300      	movs	r3, #0
 8014dae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014db2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014db6:	2b0f      	cmp	r3, #15
 8014db8:	f200 8088 	bhi.w	8014ecc <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8014dbc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	321e      	adds	r2, #30
 8014dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d074      	beq.n	8014eb6 <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8014dcc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	321e      	adds	r2, #30
 8014dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014dd8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	321e      	adds	r2, #30
 8014de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	3310      	adds	r3, #16
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	4608      	mov	r0, r1
 8014dec:	4798      	blx	r3
 8014dee:	4603      	mov	r3, r0
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	bf14      	ite	ne
 8014df4:	2301      	movne	r3, #1
 8014df6:	2300      	moveq	r3, #0
 8014df8:	b2db      	uxtb	r3, r3
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d15d      	bne.n	8014eba <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8014dfe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	321e      	adds	r2, #30
 8014e06:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014e0a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	321e      	adds	r2, #30
 8014e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	3320      	adds	r3, #32
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	7fba      	ldrb	r2, [r7, #30]
 8014e1e:	4611      	mov	r1, r2
 8014e20:	4798      	blx	r3
 8014e22:	4603      	mov	r3, r0
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d02b      	beq.n	8014e80 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8014e28:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	321e      	adds	r2, #30
 8014e30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014e34:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	321e      	adds	r2, #30
 8014e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	3318      	adds	r3, #24
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	8c3a      	ldrh	r2, [r7, #32]
 8014e48:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8014e4a:	4798      	blx	r3
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d114      	bne.n	8014e7c <_ZN3USB11ConfiguringEhhb+0x2c4>
 8014e52:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	321e      	adds	r2, #30
 8014e5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014e5e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	321e      	adds	r2, #30
 8014e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	331c      	adds	r3, #28
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	7ffa      	ldrb	r2, [r7, #31]
 8014e72:	4611      	mov	r1, r2
 8014e74:	4798      	blx	r3
 8014e76:	4603      	mov	r3, r0
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d001      	beq.n	8014e80 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	e000      	b.n	8014e82 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8014e80:	2300      	movs	r3, #0
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d11b      	bne.n	8014ebe <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8014e86:	78b8      	ldrb	r0, [r7, #2]
 8014e88:	78fa      	ldrb	r2, [r7, #3]
 8014e8a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8014e8e:	787b      	ldrb	r3, [r7, #1]
 8014e90:	9300      	str	r3, [sp, #0]
 8014e92:	4603      	mov	r3, r0
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f7ff fdf6 	bl	8014a86 <_ZN3USB13AttemptConfigEhhhb>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8014ea0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014ea4:	2bd1      	cmp	r3, #209	; 0xd1
 8014ea6:	d00b      	beq.n	8014ec0 <_ZN3USB11ConfiguringEhhb+0x308>
 8014ea8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014eac:	2bd9      	cmp	r3, #217	; 0xd9
 8014eae:	d007      	beq.n	8014ec0 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8014eb0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014eb4:	e015      	b.n	8014ee2 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 8014eb6:	bf00      	nop
 8014eb8:	e002      	b.n	8014ec0 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8014eba:	bf00      	nop
 8014ebc:	e000      	b.n	8014ec0 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8014ebe:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8014ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014ec4:	3301      	adds	r3, #1
 8014ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014eca:	e772      	b.n	8014db2 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8014ecc:	787b      	ldrb	r3, [r7, #1]
 8014ece:	78ba      	ldrb	r2, [r7, #2]
 8014ed0:	78f9      	ldrb	r1, [r7, #3]
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	f7ff fd7c 	bl	80149d0 <_ZN3USB17DefaultAddressingEhhb>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8014ede:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	3738      	adds	r7, #56	; 0x38
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}

08014eea <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 8014eea:	b580      	push	{r7, lr}
 8014eec:	b08a      	sub	sp, #40	; 0x28
 8014eee:	af08      	add	r7, sp, #32
 8014ef0:	6078      	str	r0, [r7, #4]
 8014ef2:	4608      	mov	r0, r1
 8014ef4:	4611      	mov	r1, r2
 8014ef6:	461a      	mov	r2, r3
 8014ef8:	4603      	mov	r3, r0
 8014efa:	70fb      	strb	r3, [r7, #3]
 8014efc:	460b      	mov	r3, r1
 8014efe:	70bb      	strb	r3, [r7, #2]
 8014f00:	4613      	mov	r3, r2
 8014f02:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8014f04:	78ba      	ldrb	r2, [r7, #2]
 8014f06:	78f9      	ldrb	r1, [r7, #3]
 8014f08:	2300      	movs	r3, #0
 8014f0a:	9307      	str	r3, [sp, #28]
 8014f0c:	693b      	ldr	r3, [r7, #16]
 8014f0e:	9306      	str	r3, [sp, #24]
 8014f10:	883b      	ldrh	r3, [r7, #0]
 8014f12:	9305      	str	r3, [sp, #20]
 8014f14:	883b      	ldrh	r3, [r7, #0]
 8014f16:	9304      	str	r3, [sp, #16]
 8014f18:	2300      	movs	r3, #0
 8014f1a:	9303      	str	r3, [sp, #12]
 8014f1c:	2301      	movs	r3, #1
 8014f1e:	9302      	str	r3, [sp, #8]
 8014f20:	2300      	movs	r3, #0
 8014f22:	9301      	str	r3, [sp, #4]
 8014f24:	2306      	movs	r3, #6
 8014f26:	9300      	str	r3, [sp, #0]
 8014f28:	2380      	movs	r3, #128	; 0x80
 8014f2a:	6878      	ldr	r0, [r7, #4]
 8014f2c:	f7fe ffdb 	bl	8013ee6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8014f30:	4603      	mov	r3, r0
}
 8014f32:	4618      	mov	r0, r3
 8014f34:	3708      	adds	r7, #8
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}

08014f3a <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 8014f3a:	b580      	push	{r7, lr}
 8014f3c:	b08a      	sub	sp, #40	; 0x28
 8014f3e:	af08      	add	r7, sp, #32
 8014f40:	6078      	str	r0, [r7, #4]
 8014f42:	4608      	mov	r0, r1
 8014f44:	4611      	mov	r1, r2
 8014f46:	461a      	mov	r2, r3
 8014f48:	4603      	mov	r3, r0
 8014f4a:	70fb      	strb	r3, [r7, #3]
 8014f4c:	460b      	mov	r3, r1
 8014f4e:	70bb      	strb	r3, [r7, #2]
 8014f50:	4613      	mov	r3, r2
 8014f52:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8014f54:	78ba      	ldrb	r2, [r7, #2]
 8014f56:	78f9      	ldrb	r1, [r7, #3]
 8014f58:	2300      	movs	r3, #0
 8014f5a:	9307      	str	r3, [sp, #28]
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	9306      	str	r3, [sp, #24]
 8014f60:	883b      	ldrh	r3, [r7, #0]
 8014f62:	9305      	str	r3, [sp, #20]
 8014f64:	883b      	ldrh	r3, [r7, #0]
 8014f66:	9304      	str	r3, [sp, #16]
 8014f68:	2300      	movs	r3, #0
 8014f6a:	9303      	str	r3, [sp, #12]
 8014f6c:	2302      	movs	r3, #2
 8014f6e:	9302      	str	r3, [sp, #8]
 8014f70:	7c3b      	ldrb	r3, [r7, #16]
 8014f72:	9301      	str	r3, [sp, #4]
 8014f74:	2306      	movs	r3, #6
 8014f76:	9300      	str	r3, [sp, #0]
 8014f78:	2380      	movs	r3, #128	; 0x80
 8014f7a:	6878      	ldr	r0, [r7, #4]
 8014f7c:	f7fe ffb3 	bl	8013ee6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8014f80:	4603      	mov	r3, r0
}
 8014f82:	4618      	mov	r0, r3
 8014f84:	3708      	adds	r7, #8
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}

08014f8a <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 8014f8a:	b580      	push	{r7, lr}
 8014f8c:	b09e      	sub	sp, #120	; 0x78
 8014f8e:	af08      	add	r7, sp, #32
 8014f90:	6078      	str	r0, [r7, #4]
 8014f92:	4608      	mov	r0, r1
 8014f94:	4611      	mov	r1, r2
 8014f96:	461a      	mov	r2, r3
 8014f98:	4603      	mov	r3, r0
 8014f9a:	70fb      	strb	r3, [r7, #3]
 8014f9c:	460b      	mov	r3, r1
 8014f9e:	70bb      	strb	r3, [r7, #2]
 8014fa0:	4613      	mov	r3, r2
 8014fa2:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8014fa4:	2340      	movs	r3, #64	; 0x40
 8014fa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 8014faa:	f107 030c 	add.w	r3, r7, #12
 8014fae:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8014fb0:	78ba      	ldrb	r2, [r7, #2]
 8014fb2:	78f9      	ldrb	r1, [r7, #3]
 8014fb4:	f107 030c 	add.w	r3, r7, #12
 8014fb8:	9301      	str	r3, [sp, #4]
 8014fba:	787b      	ldrb	r3, [r7, #1]
 8014fbc:	9300      	str	r3, [sp, #0]
 8014fbe:	2309      	movs	r3, #9
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f7ff ffba 	bl	8014f3a <_ZN3USB12getConfDescrEhhthPh>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8014fcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d002      	beq.n	8014fda <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8014fd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014fd8:	e020      	b.n	801501c <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 8014fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fdc:	789a      	ldrb	r2, [r3, #2]
 8014fde:	78db      	ldrb	r3, [r3, #3]
 8014fe0:	021b      	lsls	r3, r3, #8
 8014fe2:	4313      	orrs	r3, r2
 8014fe4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 8014fe8:	78ba      	ldrb	r2, [r7, #2]
 8014fea:	78f9      	ldrb	r1, [r7, #3]
 8014fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014fee:	9307      	str	r3, [sp, #28]
 8014ff0:	f107 030c 	add.w	r3, r7, #12
 8014ff4:	9306      	str	r3, [sp, #24]
 8014ff6:	2340      	movs	r3, #64	; 0x40
 8014ff8:	9305      	str	r3, [sp, #20]
 8014ffa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8014ffe:	9304      	str	r3, [sp, #16]
 8015000:	2300      	movs	r3, #0
 8015002:	9303      	str	r3, [sp, #12]
 8015004:	2302      	movs	r3, #2
 8015006:	9302      	str	r3, [sp, #8]
 8015008:	787b      	ldrb	r3, [r7, #1]
 801500a:	9301      	str	r3, [sp, #4]
 801500c:	2306      	movs	r3, #6
 801500e:	9300      	str	r3, [sp, #0]
 8015010:	2380      	movs	r3, #128	; 0x80
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f7fe ff67 	bl	8013ee6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8015018:	4603      	mov	r3, r0
 801501a:	bf00      	nop
}
 801501c:	4618      	mov	r0, r3
 801501e:	3758      	adds	r7, #88	; 0x58
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}

08015024 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8015024:	b580      	push	{r7, lr}
 8015026:	b08c      	sub	sp, #48	; 0x30
 8015028:	af08      	add	r7, sp, #32
 801502a:	6078      	str	r0, [r7, #4]
 801502c:	4608      	mov	r0, r1
 801502e:	4611      	mov	r1, r2
 8015030:	461a      	mov	r2, r3
 8015032:	4603      	mov	r3, r0
 8015034:	70fb      	strb	r3, [r7, #3]
 8015036:	460b      	mov	r3, r1
 8015038:	70bb      	strb	r3, [r7, #2]
 801503a:	4613      	mov	r3, r2
 801503c:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 801503e:	78ba      	ldrb	r2, [r7, #2]
 8015040:	78f9      	ldrb	r1, [r7, #3]
 8015042:	2300      	movs	r3, #0
 8015044:	9307      	str	r3, [sp, #28]
 8015046:	2300      	movs	r3, #0
 8015048:	9306      	str	r3, [sp, #24]
 801504a:	2300      	movs	r3, #0
 801504c:	9305      	str	r3, [sp, #20]
 801504e:	2300      	movs	r3, #0
 8015050:	9304      	str	r3, [sp, #16]
 8015052:	2300      	movs	r3, #0
 8015054:	9303      	str	r3, [sp, #12]
 8015056:	2300      	movs	r3, #0
 8015058:	9302      	str	r3, [sp, #8]
 801505a:	787b      	ldrb	r3, [r7, #1]
 801505c:	9301      	str	r3, [sp, #4]
 801505e:	2305      	movs	r3, #5
 8015060:	9300      	str	r3, [sp, #0]
 8015062:	2300      	movs	r3, #0
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f7fe ff3e 	bl	8013ee6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801506a:	4603      	mov	r3, r0
 801506c:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 801506e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8015072:	f7ed ffb7 	bl	8002fe4 <HAL_Delay>
        return rcode;
 8015076:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 8015078:	4618      	mov	r0, r3
 801507a:	3710      	adds	r7, #16
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}

08015080 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8015080:	b580      	push	{r7, lr}
 8015082:	b08a      	sub	sp, #40	; 0x28
 8015084:	af08      	add	r7, sp, #32
 8015086:	6078      	str	r0, [r7, #4]
 8015088:	4608      	mov	r0, r1
 801508a:	4611      	mov	r1, r2
 801508c:	461a      	mov	r2, r3
 801508e:	4603      	mov	r3, r0
 8015090:	70fb      	strb	r3, [r7, #3]
 8015092:	460b      	mov	r3, r1
 8015094:	70bb      	strb	r3, [r7, #2]
 8015096:	4613      	mov	r3, r2
 8015098:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 801509a:	78ba      	ldrb	r2, [r7, #2]
 801509c:	78f9      	ldrb	r1, [r7, #3]
 801509e:	2300      	movs	r3, #0
 80150a0:	9307      	str	r3, [sp, #28]
 80150a2:	2300      	movs	r3, #0
 80150a4:	9306      	str	r3, [sp, #24]
 80150a6:	2300      	movs	r3, #0
 80150a8:	9305      	str	r3, [sp, #20]
 80150aa:	2300      	movs	r3, #0
 80150ac:	9304      	str	r3, [sp, #16]
 80150ae:	2300      	movs	r3, #0
 80150b0:	9303      	str	r3, [sp, #12]
 80150b2:	2300      	movs	r3, #0
 80150b4:	9302      	str	r3, [sp, #8]
 80150b6:	787b      	ldrb	r3, [r7, #1]
 80150b8:	9301      	str	r3, [sp, #4]
 80150ba:	2309      	movs	r3, #9
 80150bc:	9300      	str	r3, [sp, #0]
 80150be:	2300      	movs	r3, #0
 80150c0:	6878      	ldr	r0, [r7, #4]
 80150c2:	f7fe ff10 	bl	8013ee6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 80150c6:	4603      	mov	r3, r0
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	3708      	adds	r7, #8
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}

080150d0 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 80150d0:	b480      	push	{r7}
 80150d2:	b083      	sub	sp, #12
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
};
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	4618      	mov	r0, r3
 80150dc:	370c      	adds	r7, #12
 80150de:	46bd      	mov	sp, r7
 80150e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e4:	4770      	bx	lr
	...

080150e8 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 80150e8:	b480      	push	{r7}
 80150ea:	b083      	sub	sp, #12
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
 80150f0:	4a04      	ldr	r2, [pc, #16]	; (8015104 <_ZN11AddressPoolC1Ev+0x1c>)
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	601a      	str	r2, [r3, #0]
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	4618      	mov	r0, r3
 80150fa:	370c      	adds	r7, #12
 80150fc:	46bd      	mov	sp, r7
 80150fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015102:	4770      	bx	lr
 8015104:	08018940 	.word	0x08018940

08015108 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	4618      	mov	r0, r3
 8015114:	f7ff ffe8 	bl	80150e8 <_ZN11AddressPoolC1Ev>
 8015118:	4a17      	ldr	r2, [pc, #92]	; (8015178 <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	601a      	str	r2, [r3, #0]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	2200      	movs	r2, #0
 8015122:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8015124:	2100      	movs	r1, #0
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	f000 f984 	bl	8015434 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2200      	movs	r2, #0
 8015130:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	1d1a      	adds	r2, r3, #4
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	2200      	movs	r2, #0
 801513e:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2208      	movs	r2, #8
 8015144:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 8015146:	687a      	ldr	r2, [r7, #4]
 8015148:	7993      	ldrb	r3, [r2, #6]
 801514a:	f36f 0300 	bfc	r3, #0, #1
 801514e:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8015150:	687a      	ldr	r2, [r7, #4]
 8015152:	7993      	ldrb	r3, [r2, #6]
 8015154:	f36f 0341 	bfc	r3, #1, #1
 8015158:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 801515a:	687a      	ldr	r2, [r7, #4]
 801515c:	7993      	ldrb	r3, [r2, #6]
 801515e:	210f      	movs	r1, #15
 8015160:	f361 0387 	bfi	r3, r1, #2, #6
 8015164:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	f000 f995 	bl	8015496 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	4618      	mov	r0, r3
 8015170:	3708      	adds	r7, #8
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}
 8015176:	bf00      	nop
 8015178:	0801892c 	.word	0x0801892c

0801517c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 801517c:	b580      	push	{r7, lr}
 801517e:	b084      	sub	sp, #16
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
 8015184:	460b      	mov	r3, r1
 8015186:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 8015188:	78fb      	ldrb	r3, [r7, #3]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d102      	bne.n	8015194 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	3308      	adds	r3, #8
 8015192:	e014      	b.n	80151be <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8015194:	78fb      	ldrb	r3, [r7, #3]
 8015196:	4619      	mov	r1, r3
 8015198:	6878      	ldr	r0, [r7, #4]
 801519a:	f000 f995 	bl	80154c8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 801519e:	4603      	mov	r3, r0
 80151a0:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 80151a2:	7bfb      	ldrb	r3, [r7, #15]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d008      	beq.n	80151ba <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f103 0108 	add.w	r1, r3, #8
 80151ae:	7bfa      	ldrb	r2, [r7, #15]
 80151b0:	4613      	mov	r3, r2
 80151b2:	00db      	lsls	r3, r3, #3
 80151b4:	1a9b      	subs	r3, r3, r2
 80151b6:	440b      	add	r3, r1
 80151b8:	e000      	b.n	80151bc <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 80151ba:	2300      	movs	r3, #0
 80151bc:	bf00      	nop
        };
 80151be:	4618      	mov	r0, r3
 80151c0:	3710      	adds	r7, #16
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}
	...

080151c8 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b086      	sub	sp, #24
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	60f8      	str	r0, [r7, #12]
 80151d0:	607b      	str	r3, [r7, #4]
 80151d2:	460b      	mov	r3, r1
 80151d4:	72fb      	strb	r3, [r7, #11]
 80151d6:	4613      	mov	r3, r2
 80151d8:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 80151da:	f7eb fc69 	bl	8000ab0 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 80151de:	7afb      	ldrb	r3, [r7, #11]
 80151e0:	f043 0302 	orr.w	r3, r3, #2
 80151e4:	b2db      	uxtb	r3, r3
 80151e6:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 80151e8:	f107 0117 	add.w	r1, r7, #23
 80151ec:	f04f 33ff 	mov.w	r3, #4294967295
 80151f0:	2201      	movs	r2, #1
 80151f2:	480b      	ldr	r0, [pc, #44]	; (8015220 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 80151f4:	f7f1 fc0b 	bl	8006a0e <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 80151f8:	7abb      	ldrb	r3, [r7, #10]
 80151fa:	b29a      	uxth	r2, r3
 80151fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015200:	6879      	ldr	r1, [r7, #4]
 8015202:	4807      	ldr	r0, [pc, #28]	; (8015220 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8015204:	f7f1 fc03 	bl	8006a0e <HAL_SPI_Transmit>
        data_p += nbytes;
 8015208:	7abb      	ldrb	r3, [r7, #10]
 801520a:	687a      	ldr	r2, [r7, #4]
 801520c:	4413      	add	r3, r2
 801520e:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8015210:	f7eb fc42 	bl	8000a98 <_ZN3P103SetEv>
        return ( data_p);
 8015214:	687b      	ldr	r3, [r7, #4]
}
 8015216:	4618      	mov	r0, r3
 8015218:	3718      	adds	r7, #24
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}
 801521e:	bf00      	nop
 8015220:	20000530 	.word	0x20000530

08015224 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8015224:	b580      	push	{r7, lr}
 8015226:	b084      	sub	sp, #16
 8015228:	af00      	add	r7, sp, #0
 801522a:	60f8      	str	r0, [r7, #12]
 801522c:	607b      	str	r3, [r7, #4]
 801522e:	460b      	mov	r3, r1
 8015230:	72fb      	strb	r3, [r7, #11]
 8015232:	4613      	mov	r3, r2
 8015234:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8015236:	f7eb fc3b 	bl	8000ab0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 801523a:	f107 010b 	add.w	r1, r7, #11
 801523e:	f04f 33ff 	mov.w	r3, #4294967295
 8015242:	2201      	movs	r2, #1
 8015244:	480d      	ldr	r0, [pc, #52]	; (801527c <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8015246:	f7f1 fbe2 	bl	8006a0e <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 801524a:	7abb      	ldrb	r3, [r7, #10]
 801524c:	461a      	mov	r2, r3
 801524e:	2100      	movs	r1, #0
 8015250:	6878      	ldr	r0, [r7, #4]
 8015252:	f000 fe63 	bl	8015f1c <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8015256:	7abb      	ldrb	r3, [r7, #10]
 8015258:	b29a      	uxth	r2, r3
 801525a:	f04f 33ff 	mov.w	r3, #4294967295
 801525e:	6879      	ldr	r1, [r7, #4]
 8015260:	4806      	ldr	r0, [pc, #24]	; (801527c <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8015262:	f7f1 fd10 	bl	8006c86 <HAL_SPI_Receive>
        data_p += nbytes;
 8015266:	7abb      	ldrb	r3, [r7, #10]
 8015268:	687a      	ldr	r2, [r7, #4]
 801526a:	4413      	add	r3, r2
 801526c:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 801526e:	f7eb fc13 	bl	8000a98 <_ZN3P103SetEv>
        return ( data_p);
 8015272:	687b      	ldr	r3, [r7, #4]
}
 8015274:	4618      	mov	r0, r3
 8015276:	3710      	adds	r7, #16
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}
 801527c:	20000530 	.word	0x20000530

08015280 <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 8015280:	b580      	push	{r7, lr}
 8015282:	b084      	sub	sp, #16
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8015288:	2300      	movs	r3, #0
 801528a:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 801528c:	f7fe fd30 	bl	8013cf0 <_ZN2P95IsSetEv>
 8015290:	4603      	mov	r3, r0
 8015292:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8015294:	7bbb      	ldrb	r3, [r7, #14]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d104      	bne.n	80152a4 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 801529a:	6878      	ldr	r0, [r7, #4]
 801529c:	f000 f937 	bl	801550e <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 80152a0:	4603      	mov	r3, r0
 80152a2:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 80152a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80152a6:	4618      	mov	r0, r3
 80152a8:	3710      	adds	r7, #16
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}
	...

080152b0 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 80152b0:	b480      	push	{r7}
 80152b2:	b083      	sub	sp, #12
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
                return vbusState;
 80152b8:	4b03      	ldr	r3, [pc, #12]	; (80152c8 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 80152ba:	781b      	ldrb	r3, [r3, #0]
        };
 80152bc:	4618      	mov	r0, r3
 80152be:	370c      	adds	r7, #12
 80152c0:	46bd      	mov	sp, r7
 80152c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c6:	4770      	bx	lr
 80152c8:	20000a05 	.word	0x20000a05

080152cc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b084      	sub	sp, #16
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	4608      	mov	r0, r1
 80152d6:	4611      	mov	r1, r2
 80152d8:	461a      	mov	r2, r3
 80152da:	4603      	mov	r3, r0
 80152dc:	70fb      	strb	r3, [r7, #3]
 80152de:	460b      	mov	r3, r1
 80152e0:	70bb      	strb	r3, [r7, #2]
 80152e2:	4613      	mov	r3, r2
 80152e4:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 80152e6:	78fb      	ldrb	r3, [r7, #3]
 80152e8:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 80152ea:	7b3b      	ldrb	r3, [r7, #12]
 80152ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80152f0:	b2db      	uxtb	r3, r3
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d102      	bne.n	80152fc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 80152f6:	787b      	ldrb	r3, [r7, #1]
 80152f8:	2b07      	cmp	r3, #7
 80152fa:	d901      	bls.n	8015300 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 80152fc:	2300      	movs	r3, #0
 80152fe:	e079      	b.n	80153f4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 8015300:	78bb      	ldrb	r3, [r7, #2]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d005      	beq.n	8015312 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	79db      	ldrb	r3, [r3, #7]
 801530a:	2b07      	cmp	r3, #7
 801530c:	d101      	bne.n	8015312 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 801530e:	2300      	movs	r3, #0
 8015310:	e070      	b.n	80153f4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 8015312:	2100      	movs	r1, #0
 8015314:	6878      	ldr	r0, [r7, #4]
 8015316:	f000 f8d7 	bl	80154c8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 801531a:	4603      	mov	r3, r0
 801531c:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 801531e:	7bfb      	ldrb	r3, [r7, #15]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d101      	bne.n	8015328 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8015324:	2300      	movs	r3, #0
 8015326:	e065      	b.n	80153f4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8015328:	7b3b      	ldrb	r3, [r7, #12]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d124      	bne.n	8015378 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 801532e:	78bb      	ldrb	r3, [r7, #2]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d00f      	beq.n	8015354 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8015334:	7bfa      	ldrb	r2, [r7, #15]
 8015336:	6879      	ldr	r1, [r7, #4]
 8015338:	4613      	mov	r3, r2
 801533a:	00db      	lsls	r3, r3, #3
 801533c:	1a9b      	subs	r3, r3, r2
 801533e:	440b      	add	r3, r1
 8015340:	330c      	adds	r3, #12
 8015342:	2241      	movs	r2, #65	; 0x41
 8015344:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	79db      	ldrb	r3, [r3, #7]
 801534a:	3301      	adds	r3, #1
 801534c:	b2da      	uxtb	r2, r3
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	71da      	strb	r2, [r3, #7]
 8015352:	e008      	b.n	8015366 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8015354:	7bfa      	ldrb	r2, [r7, #15]
 8015356:	6879      	ldr	r1, [r7, #4]
 8015358:	4613      	mov	r3, r2
 801535a:	00db      	lsls	r3, r3, #3
 801535c:	1a9b      	subs	r3, r3, r2
 801535e:	440b      	add	r3, r1
 8015360:	330c      	adds	r3, #12
 8015362:	2201      	movs	r2, #1
 8015364:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 8015366:	7bfa      	ldrb	r2, [r7, #15]
 8015368:	6879      	ldr	r1, [r7, #4]
 801536a:	4613      	mov	r3, r2
 801536c:	00db      	lsls	r3, r3, #3
 801536e:	1a9b      	subs	r3, r3, r2
 8015370:	440b      	add	r3, r1
 8015372:	330c      	adds	r3, #12
 8015374:	781b      	ldrb	r3, [r3, #0]
 8015376:	e03d      	b.n	80153f4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 8015378:	2300      	movs	r3, #0
 801537a:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 801537c:	7b3b      	ldrb	r3, [r7, #12]
 801537e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015382:	b2da      	uxtb	r2, r3
 8015384:	7a3b      	ldrb	r3, [r7, #8]
 8015386:	f362 03c5 	bfi	r3, r2, #3, #3
 801538a:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 801538c:	78bb      	ldrb	r3, [r7, #2]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d013      	beq.n	80153ba <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 8015392:	7a3b      	ldrb	r3, [r7, #8]
 8015394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015398:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	79db      	ldrb	r3, [r3, #7]
 801539e:	3301      	adds	r3, #1
 80153a0:	b2da      	uxtb	r2, r3
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	71da      	strb	r2, [r3, #7]
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	79db      	ldrb	r3, [r3, #7]
 80153aa:	f003 0307 	and.w	r3, r3, #7
 80153ae:	b2da      	uxtb	r2, r3
 80153b0:	7a3b      	ldrb	r3, [r7, #8]
 80153b2:	f362 0302 	bfi	r3, r2, #0, #3
 80153b6:	723b      	strb	r3, [r7, #8]
 80153b8:	e00b      	b.n	80153d2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 80153ba:	7a3b      	ldrb	r3, [r7, #8]
 80153bc:	f36f 1386 	bfc	r3, #6, #1
 80153c0:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 80153c2:	787b      	ldrb	r3, [r7, #1]
 80153c4:	f003 0307 	and.w	r3, r3, #7
 80153c8:	b2da      	uxtb	r2, r3
 80153ca:	7a3b      	ldrb	r3, [r7, #8]
 80153cc:	f362 0302 	bfi	r3, r2, #0, #3
 80153d0:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 80153d2:	7bfa      	ldrb	r2, [r7, #15]
 80153d4:	6879      	ldr	r1, [r7, #4]
 80153d6:	4613      	mov	r3, r2
 80153d8:	00db      	lsls	r3, r3, #3
 80153da:	1a9b      	subs	r3, r3, r2
 80153dc:	440b      	add	r3, r1
 80153de:	330c      	adds	r3, #12
 80153e0:	7a3a      	ldrb	r2, [r7, #8]
 80153e2:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 80153e4:	7bfa      	ldrb	r2, [r7, #15]
 80153e6:	6879      	ldr	r1, [r7, #4]
 80153e8:	4613      	mov	r3, r2
 80153ea:	00db      	lsls	r3, r3, #3
 80153ec:	1a9b      	subs	r3, r3, r2
 80153ee:	440b      	add	r3, r1
 80153f0:	330c      	adds	r3, #12
 80153f2:	781b      	ldrb	r3, [r3, #0]
        };
 80153f4:	4618      	mov	r0, r3
 80153f6:	3710      	adds	r7, #16
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}

080153fc <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b084      	sub	sp, #16
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	460b      	mov	r3, r1
 8015406:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8015408:	78fb      	ldrb	r3, [r7, #3]
 801540a:	2b41      	cmp	r3, #65	; 0x41
 801540c:	d103      	bne.n	8015416 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f000 f841 	bl	8015496 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8015414:	e00b      	b.n	801542e <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 8015416:	78fb      	ldrb	r3, [r7, #3]
 8015418:	4619      	mov	r1, r3
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	f000 f854 	bl	80154c8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8015420:	4603      	mov	r3, r0
 8015422:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8015424:	7bfb      	ldrb	r3, [r7, #15]
 8015426:	4619      	mov	r1, r3
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f000 f893 	bl	8015554 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 801542e:	3710      	adds	r7, #16
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}

08015434 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8015434:	b480      	push	{r7}
 8015436:	b083      	sub	sp, #12
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
 801543c:	460b      	mov	r3, r1
 801543e:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 8015440:	78fa      	ldrb	r2, [r7, #3]
 8015442:	6879      	ldr	r1, [r7, #4]
 8015444:	4613      	mov	r3, r2
 8015446:	00db      	lsls	r3, r3, #3
 8015448:	1a9b      	subs	r3, r3, r2
 801544a:	440b      	add	r3, r1
 801544c:	330c      	adds	r3, #12
 801544e:	2200      	movs	r2, #0
 8015450:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 8015452:	78fa      	ldrb	r2, [r7, #3]
 8015454:	6879      	ldr	r1, [r7, #4]
 8015456:	4613      	mov	r3, r2
 8015458:	00db      	lsls	r3, r3, #3
 801545a:	1a9b      	subs	r3, r3, r2
 801545c:	440b      	add	r3, r1
 801545e:	330d      	adds	r3, #13
 8015460:	2201      	movs	r2, #1
 8015462:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 8015464:	78fa      	ldrb	r2, [r7, #3]
 8015466:	6879      	ldr	r1, [r7, #4]
 8015468:	4613      	mov	r3, r2
 801546a:	00db      	lsls	r3, r3, #3
 801546c:	1a9b      	subs	r3, r3, r2
 801546e:	440b      	add	r3, r1
 8015470:	330e      	adds	r3, #14
 8015472:	2200      	movs	r2, #0
 8015474:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 8015476:	78fa      	ldrb	r2, [r7, #3]
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	1d19      	adds	r1, r3, #4
 801547c:	6878      	ldr	r0, [r7, #4]
 801547e:	4613      	mov	r3, r2
 8015480:	00db      	lsls	r3, r3, #3
 8015482:	1a9b      	subs	r3, r3, r2
 8015484:	4403      	add	r3, r0
 8015486:	3308      	adds	r3, #8
 8015488:	6019      	str	r1, [r3, #0]
        };
 801548a:	bf00      	nop
 801548c:	370c      	adds	r7, #12
 801548e:	46bd      	mov	sp, r7
 8015490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015494:	4770      	bx	lr

08015496 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 8015496:	b580      	push	{r7, lr}
 8015498:	b084      	sub	sp, #16
 801549a:	af00      	add	r7, sp, #0
 801549c:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 801549e:	2301      	movs	r3, #1
 80154a0:	73fb      	strb	r3, [r7, #15]
 80154a2:	7bfb      	ldrb	r3, [r7, #15]
 80154a4:	2b0f      	cmp	r3, #15
 80154a6:	d808      	bhi.n	80154ba <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 80154a8:	7bfb      	ldrb	r3, [r7, #15]
 80154aa:	4619      	mov	r1, r3
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	f7ff ffc1 	bl	8015434 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80154b2:	7bfb      	ldrb	r3, [r7, #15]
 80154b4:	3301      	adds	r3, #1
 80154b6:	73fb      	strb	r3, [r7, #15]
 80154b8:	e7f3      	b.n	80154a2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	2200      	movs	r2, #0
 80154be:	71da      	strb	r2, [r3, #7]
        };
 80154c0:	bf00      	nop
 80154c2:	3710      	adds	r7, #16
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}

080154c8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 80154c8:	b480      	push	{r7}
 80154ca:	b085      	sub	sp, #20
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
 80154d0:	460b      	mov	r3, r1
 80154d2:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80154d4:	2301      	movs	r3, #1
 80154d6:	73fb      	strb	r3, [r7, #15]
 80154d8:	7bfb      	ldrb	r3, [r7, #15]
 80154da:	2b0f      	cmp	r3, #15
 80154dc:	d810      	bhi.n	8015500 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 80154de:	7bfa      	ldrb	r2, [r7, #15]
 80154e0:	6879      	ldr	r1, [r7, #4]
 80154e2:	4613      	mov	r3, r2
 80154e4:	00db      	lsls	r3, r3, #3
 80154e6:	1a9b      	subs	r3, r3, r2
 80154e8:	440b      	add	r3, r1
 80154ea:	330c      	adds	r3, #12
 80154ec:	781b      	ldrb	r3, [r3, #0]
 80154ee:	78fa      	ldrb	r2, [r7, #3]
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d101      	bne.n	80154f8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 80154f4:	7bfb      	ldrb	r3, [r7, #15]
 80154f6:	e004      	b.n	8015502 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80154f8:	7bfb      	ldrb	r3, [r7, #15]
 80154fa:	3301      	adds	r3, #1
 80154fc:	73fb      	strb	r3, [r7, #15]
 80154fe:	e7eb      	b.n	80154d8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 8015500:	2300      	movs	r3, #0
        };
 8015502:	4618      	mov	r0, r3
 8015504:	3714      	adds	r7, #20
 8015506:	46bd      	mov	sp, r7
 8015508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550c:	4770      	bx	lr

0801550e <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 801550e:	b580      	push	{r7, lr}
 8015510:	b084      	sub	sp, #16
 8015512:	af00      	add	r7, sp, #0
 8015514:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 8015516:	2300      	movs	r3, #0
 8015518:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 801551a:	21c8      	movs	r1, #200	; 0xc8
 801551c:	6878      	ldr	r0, [r7, #4]
 801551e:	f7ed f9f5 	bl	800290c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8015522:	4603      	mov	r3, r0
 8015524:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8015526:	7bbb      	ldrb	r3, [r7, #14]
 8015528:	f003 0320 	and.w	r3, r3, #32
 801552c:	2b00      	cmp	r3, #0
 801552e:	d006      	beq.n	801553e <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 8015530:	6878      	ldr	r0, [r7, #4]
 8015532:	f7ed fa0d 	bl	8002950 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8015536:	7bfb      	ldrb	r3, [r7, #15]
 8015538:	f043 0320 	orr.w	r3, r3, #32
 801553c:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 801553e:	7bfb      	ldrb	r3, [r7, #15]
 8015540:	461a      	mov	r2, r3
 8015542:	21c8      	movs	r1, #200	; 0xc8
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	f7ed f98f 	bl	8002868 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 801554a:	7bfb      	ldrb	r3, [r7, #15]
}
 801554c:	4618      	mov	r0, r3
 801554e:	3710      	adds	r7, #16
 8015550:	46bd      	mov	sp, r7
 8015552:	bd80      	pop	{r7, pc}

08015554 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8015554:	b580      	push	{r7, lr}
 8015556:	b084      	sub	sp, #16
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
 801555c:	460b      	mov	r3, r1
 801555e:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 8015560:	78fb      	ldrb	r3, [r7, #3]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d03a      	beq.n	80155dc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 8015566:	78fa      	ldrb	r2, [r7, #3]
 8015568:	6879      	ldr	r1, [r7, #4]
 801556a:	4613      	mov	r3, r2
 801556c:	00db      	lsls	r3, r3, #3
 801556e:	1a9b      	subs	r3, r3, r2
 8015570:	440b      	add	r3, r1
 8015572:	330c      	adds	r3, #12
 8015574:	781b      	ldrb	r3, [r3, #0]
 8015576:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 8015578:	7b3b      	ldrb	r3, [r7, #12]
 801557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801557e:	b2db      	uxtb	r3, r3
 8015580:	2b00      	cmp	r3, #0
 8015582:	d025      	beq.n	80155d0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8015584:	2301      	movs	r3, #1
 8015586:	73fb      	strb	r3, [r7, #15]
 8015588:	7bfb      	ldrb	r3, [r7, #15]
 801558a:	461a      	mov	r2, r3
 801558c:	7b39      	ldrb	r1, [r7, #12]
 801558e:	6878      	ldr	r0, [r7, #4]
 8015590:	f000 f828 	bl	80155e4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 8015594:	4603      	mov	r3, r0
 8015596:	73fb      	strb	r3, [r7, #15]
 8015598:	7bfb      	ldrb	r3, [r7, #15]
 801559a:	2b00      	cmp	r3, #0
 801559c:	bf14      	ite	ne
 801559e:	2301      	movne	r3, #1
 80155a0:	2300      	moveq	r3, #0
 80155a2:	b2db      	uxtb	r3, r3
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d005      	beq.n	80155b4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 80155a8:	7bfb      	ldrb	r3, [r7, #15]
 80155aa:	4619      	mov	r1, r3
 80155ac:	6878      	ldr	r0, [r7, #4]
 80155ae:	f7ff ffd1 	bl	8015554 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80155b2:	e7e9      	b.n	8015588 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	79db      	ldrb	r3, [r3, #7]
 80155b8:	7b3a      	ldrb	r2, [r7, #12]
 80155ba:	f3c2 0202 	ubfx	r2, r2, #0, #3
 80155be:	b2d2      	uxtb	r2, r2
 80155c0:	4293      	cmp	r3, r2
 80155c2:	d105      	bne.n	80155d0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	79db      	ldrb	r3, [r3, #7]
 80155c8:	3b01      	subs	r3, #1
 80155ca:	b2da      	uxtb	r2, r3
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 80155d0:	78fb      	ldrb	r3, [r7, #3]
 80155d2:	4619      	mov	r1, r3
 80155d4:	6878      	ldr	r0, [r7, #4]
 80155d6:	f7ff ff2d 	bl	8015434 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 80155da:	e000      	b.n	80155de <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 80155dc:	bf00      	nop
        }
 80155de:	3710      	adds	r7, #16
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}

080155e4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 80155e4:	b480      	push	{r7}
 80155e6:	b085      	sub	sp, #20
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
 80155ec:	7039      	strb	r1, [r7, #0]
 80155ee:	4613      	mov	r3, r2
 80155f0:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 80155f2:	78fb      	ldrb	r3, [r7, #3]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d004      	beq.n	8015602 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 80155f8:	78fb      	ldrb	r3, [r7, #3]
 80155fa:	2b0f      	cmp	r3, #15
 80155fc:	d801      	bhi.n	8015602 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 80155fe:	78fb      	ldrb	r3, [r7, #3]
 8015600:	e000      	b.n	8015604 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 8015602:	2301      	movs	r3, #1
 8015604:	73fb      	strb	r3, [r7, #15]
 8015606:	7bfb      	ldrb	r3, [r7, #15]
 8015608:	2b0f      	cmp	r3, #15
 801560a:	d816      	bhi.n	801563a <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 801560c:	7bfa      	ldrb	r2, [r7, #15]
 801560e:	6879      	ldr	r1, [r7, #4]
 8015610:	4613      	mov	r3, r2
 8015612:	00db      	lsls	r3, r3, #3
 8015614:	1a9b      	subs	r3, r3, r2
 8015616:	440b      	add	r3, r1
 8015618:	3308      	adds	r3, #8
 801561a:	791b      	ldrb	r3, [r3, #4]
 801561c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8015620:	b2da      	uxtb	r2, r3
 8015622:	783b      	ldrb	r3, [r7, #0]
 8015624:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015628:	b2db      	uxtb	r3, r3
 801562a:	429a      	cmp	r2, r3
 801562c:	d101      	bne.n	8015632 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 801562e:	7bfb      	ldrb	r3, [r7, #15]
 8015630:	e004      	b.n	801563c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 8015632:	7bfb      	ldrb	r3, [r7, #15]
 8015634:	3301      	adds	r3, #1
 8015636:	73fb      	strb	r3, [r7, #15]
 8015638:	e7e5      	b.n	8015606 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 801563a:	2300      	movs	r3, #0
        };
 801563c:	4618      	mov	r0, r3
 801563e:	3714      	adds	r7, #20
 8015640:	46bd      	mov	sp, r7
 8015642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015646:	4770      	bx	lr

08015648 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>:
        DPAD_DOWN_LEFT = 0x6,
        DPAD_LEFT = 0x7,
        DPAD_LEFT_UP = 0x8,
};

bool XBOXONESParser::checkDpad(ButtonEnum b) {
 8015648:	b480      	push	{r7}
 801564a:	b083      	sub	sp, #12
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
 8015650:	460b      	mov	r3, r1
 8015652:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 8015654:	78fb      	ldrb	r3, [r7, #3]
 8015656:	2b03      	cmp	r3, #3
 8015658:	d86e      	bhi.n	8015738 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf0>
 801565a:	a201      	add	r2, pc, #4	; (adr r2, 8015660 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x18>)
 801565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015660:	08015671 	.word	0x08015671
 8015664:	080156a3 	.word	0x080156a3
 8015668:	080156d5 	.word	0x080156d5
 801566c:	08015707 	.word	0x08015707
                case UP:
                        return xboxOneSData.btn.dpad == DPAD_LEFT_UP || xboxOneSData.btn.dpad == DPAD_UP || xboxOneSData.btn.dpad == DPAD_UP_RIGHT;
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	7c1b      	ldrb	r3, [r3, #16]
 8015674:	f003 030f 	and.w	r3, r3, #15
 8015678:	b2db      	uxtb	r3, r3
 801567a:	2b08      	cmp	r3, #8
 801567c:	d00d      	beq.n	801569a <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x52>
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	7c1b      	ldrb	r3, [r3, #16]
 8015682:	f003 030f 	and.w	r3, r3, #15
 8015686:	b2db      	uxtb	r3, r3
 8015688:	2b01      	cmp	r3, #1
 801568a:	d006      	beq.n	801569a <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x52>
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	7c1b      	ldrb	r3, [r3, #16]
 8015690:	f003 030f 	and.w	r3, r3, #15
 8015694:	b2db      	uxtb	r3, r3
 8015696:	2b02      	cmp	r3, #2
 8015698:	d101      	bne.n	801569e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x56>
 801569a:	2301      	movs	r3, #1
 801569c:	e04d      	b.n	801573a <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
 801569e:	2300      	movs	r3, #0
 80156a0:	e04b      	b.n	801573a <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return xboxOneSData.btn.dpad == DPAD_UP_RIGHT || xboxOneSData.btn.dpad == DPAD_RIGHT || xboxOneSData.btn.dpad == DPAD_RIGHT_DOWN;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	7c1b      	ldrb	r3, [r3, #16]
 80156a6:	f003 030f 	and.w	r3, r3, #15
 80156aa:	b2db      	uxtb	r3, r3
 80156ac:	2b02      	cmp	r3, #2
 80156ae:	d00d      	beq.n	80156cc <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x84>
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	7c1b      	ldrb	r3, [r3, #16]
 80156b4:	f003 030f 	and.w	r3, r3, #15
 80156b8:	b2db      	uxtb	r3, r3
 80156ba:	2b03      	cmp	r3, #3
 80156bc:	d006      	beq.n	80156cc <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x84>
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	7c1b      	ldrb	r3, [r3, #16]
 80156c2:	f003 030f 	and.w	r3, r3, #15
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	2b04      	cmp	r3, #4
 80156ca:	d101      	bne.n	80156d0 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x88>
 80156cc:	2301      	movs	r3, #1
 80156ce:	e034      	b.n	801573a <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
 80156d0:	2300      	movs	r3, #0
 80156d2:	e032      	b.n	801573a <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return xboxOneSData.btn.dpad == DPAD_RIGHT_DOWN || xboxOneSData.btn.dpad == DPAD_DOWN || xboxOneSData.btn.dpad == DPAD_DOWN_LEFT;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	7c1b      	ldrb	r3, [r3, #16]
 80156d8:	f003 030f 	and.w	r3, r3, #15
 80156dc:	b2db      	uxtb	r3, r3
 80156de:	2b04      	cmp	r3, #4
 80156e0:	d00d      	beq.n	80156fe <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xb6>
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	7c1b      	ldrb	r3, [r3, #16]
 80156e6:	f003 030f 	and.w	r3, r3, #15
 80156ea:	b2db      	uxtb	r3, r3
 80156ec:	2b05      	cmp	r3, #5
 80156ee:	d006      	beq.n	80156fe <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xb6>
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	7c1b      	ldrb	r3, [r3, #16]
 80156f4:	f003 030f 	and.w	r3, r3, #15
 80156f8:	b2db      	uxtb	r3, r3
 80156fa:	2b06      	cmp	r3, #6
 80156fc:	d101      	bne.n	8015702 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xba>
 80156fe:	2301      	movs	r3, #1
 8015700:	e01b      	b.n	801573a <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
 8015702:	2300      	movs	r3, #0
 8015704:	e019      	b.n	801573a <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return xboxOneSData.btn.dpad == DPAD_DOWN_LEFT || xboxOneSData.btn.dpad == DPAD_LEFT || xboxOneSData.btn.dpad == DPAD_LEFT_UP;
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	7c1b      	ldrb	r3, [r3, #16]
 801570a:	f003 030f 	and.w	r3, r3, #15
 801570e:	b2db      	uxtb	r3, r3
 8015710:	2b06      	cmp	r3, #6
 8015712:	d00d      	beq.n	8015730 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xe8>
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	7c1b      	ldrb	r3, [r3, #16]
 8015718:	f003 030f 	and.w	r3, r3, #15
 801571c:	b2db      	uxtb	r3, r3
 801571e:	2b07      	cmp	r3, #7
 8015720:	d006      	beq.n	8015730 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xe8>
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	7c1b      	ldrb	r3, [r3, #16]
 8015726:	f003 030f 	and.w	r3, r3, #15
 801572a:	b2db      	uxtb	r3, r3
 801572c:	2b08      	cmp	r3, #8
 801572e:	d101      	bne.n	8015734 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xec>
 8015730:	2301      	movs	r3, #1
 8015732:	e002      	b.n	801573a <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
 8015734:	2300      	movs	r3, #0
 8015736:	e000      	b.n	801573a <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 8015738:	2300      	movs	r3, #0
        }
}
 801573a:	4618      	mov	r0, r3
 801573c:	370c      	adds	r7, #12
 801573e:	46bd      	mov	sp, r7
 8015740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015744:	4770      	bx	lr
 8015746:	bf00      	nop

08015748 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum>:

uint16_t XBOXONESParser::getButtonPress(ButtonEnum b) {
 8015748:	b580      	push	{r7, lr}
 801574a:	b082      	sub	sp, #8
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
 8015750:	460b      	mov	r3, r1
 8015752:	70fb      	strb	r3, [r7, #3]
        if (b == L2)
 8015754:	78fb      	ldrb	r3, [r7, #3]
 8015756:	2b08      	cmp	r3, #8
 8015758:	d102      	bne.n	8015760 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x18>
                return xboxOneSData.trigger[0];
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	899b      	ldrh	r3, [r3, #12]
 801575e:	e026      	b.n	80157ae <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x66>
        else if (b == R2)
 8015760:	78fb      	ldrb	r3, [r7, #3]
 8015762:	2b09      	cmp	r3, #9
 8015764:	d102      	bne.n	801576c <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x24>
                return xboxOneSData.trigger[1];
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	89db      	ldrh	r3, [r3, #14]
 801576a:	e020      	b.n	80157ae <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x66>
        else if (b <= LEFT) // Dpad
 801576c:	78fb      	ldrb	r3, [r7, #3]
 801576e:	2b03      	cmp	r3, #3
 8015770:	d807      	bhi.n	8015782 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x3a>
                return checkDpad(b);
 8015772:	78fb      	ldrb	r3, [r7, #3]
 8015774:	4619      	mov	r1, r3
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	f7ff ff66 	bl	8015648 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 801577c:	4603      	mov	r3, r0
 801577e:	b29b      	uxth	r3, r3
 8015780:	e015      	b.n	80157ae <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x66>
        else if (b == XBOX)
 8015782:	78fb      	ldrb	r3, [r7, #3]
 8015784:	2b10      	cmp	r3, #16
 8015786:	d103      	bne.n	8015790 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x48>
                return xboxButtonState;
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	7e9b      	ldrb	r3, [r3, #26]
 801578c:	b29b      	uxth	r3, r3
 801578e:	e00e      	b.n	80157ae <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x66>
        return xboxOneSData.btn.val & (1UL << pgm_read_byte(&XBOX_ONE_S_BUTTONS[(uint8_t)b]));
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	691b      	ldr	r3, [r3, #16]
 8015794:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8015798:	b29a      	uxth	r2, r3
 801579a:	78fb      	ldrb	r3, [r7, #3]
 801579c:	4906      	ldr	r1, [pc, #24]	; (80157b8 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x70>)
 801579e:	440b      	add	r3, r1
 80157a0:	781b      	ldrb	r3, [r3, #0]
 80157a2:	4619      	mov	r1, r3
 80157a4:	2301      	movs	r3, #1
 80157a6:	408b      	lsls	r3, r1
 80157a8:	b29b      	uxth	r3, r3
 80157aa:	4013      	ands	r3, r2
 80157ac:	b29b      	uxth	r3, r3
}
 80157ae:	4618      	mov	r0, r3
 80157b0:	3708      	adds	r7, #8
 80157b2:	46bd      	mov	sp, r7
 80157b4:	bd80      	pop	{r7, pc}
 80157b6:	bf00      	nop
 80157b8:	0801894c 	.word	0x0801894c

080157bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>:

bool XBOXONESParser::getButtonClick(ButtonEnum b) {
 80157bc:	b480      	push	{r7}
 80157be:	b085      	sub	sp, #20
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
 80157c4:	460b      	mov	r3, r1
 80157c6:	70fb      	strb	r3, [r7, #3]
        if(b == L2) {
 80157c8:	78fb      	ldrb	r3, [r7, #3]
 80157ca:	2b08      	cmp	r3, #8
 80157cc:	d10c      	bne.n	80157e8 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0x2c>
                if(L2Clicked) {
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d005      	beq.n	80157e4 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0x28>
                        L2Clicked = false;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	2200      	movs	r2, #0
 80157dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                        return true;
 80157e0:	2301      	movs	r3, #1
 80157e2:	e04b      	b.n	801587c <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0xc0>
                }
                return false;
 80157e4:	2300      	movs	r3, #0
 80157e6:	e049      	b.n	801587c <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0xc0>
        } else if(b == R2) {
 80157e8:	78fb      	ldrb	r3, [r7, #3]
 80157ea:	2b09      	cmp	r3, #9
 80157ec:	d10c      	bne.n	8015808 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0x4c>
                if(R2Clicked) {
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d005      	beq.n	8015804 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0x48>
                        R2Clicked = false;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	2200      	movs	r2, #0
 80157fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
                        return true;
 8015800:	2301      	movs	r3, #1
 8015802:	e03b      	b.n	801587c <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0xc0>
                }
                return false;
 8015804:	2300      	movs	r3, #0
 8015806:	e039      	b.n	801587c <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0xc0>
        } else if (b == XBOX) {
 8015808:	78fb      	ldrb	r3, [r7, #3]
 801580a:	2b10      	cmp	r3, #16
 801580c:	d10b      	bne.n	8015826 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0x6a>
                bool click = xboxbuttonClickState;
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	7f1b      	ldrb	r3, [r3, #28]
 8015812:	2b00      	cmp	r3, #0
 8015814:	bf14      	ite	ne
 8015816:	2301      	movne	r3, #1
 8015818:	2300      	moveq	r3, #0
 801581a:	72bb      	strb	r3, [r7, #10]
                xboxbuttonClickState = 0; // Clear "click" event
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	2200      	movs	r2, #0
 8015820:	771a      	strb	r2, [r3, #28]
                return click;
 8015822:	7abb      	ldrb	r3, [r7, #10]
 8015824:	e02a      	b.n	801587c <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0xc0>
        }
        uint32_t mask = 1UL << pgm_read_byte(&XBOX_ONE_S_BUTTONS[(uint8_t)b]);
 8015826:	78fb      	ldrb	r3, [r7, #3]
 8015828:	4a17      	ldr	r2, [pc, #92]	; (8015888 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0xcc>)
 801582a:	4413      	add	r3, r2
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	461a      	mov	r2, r3
 8015830:	2301      	movs	r3, #1
 8015832:	4093      	lsls	r3, r2
 8015834:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	8ada      	ldrh	r2, [r3, #22]
 801583a:	7e1b      	ldrb	r3, [r3, #24]
 801583c:	041b      	lsls	r3, r3, #16
 801583e:	4313      	orrs	r3, r2
 8015840:	461a      	mov	r2, r3
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	4013      	ands	r3, r2
 8015846:	2b00      	cmp	r3, #0
 8015848:	bf14      	ite	ne
 801584a:	2301      	movne	r3, #1
 801584c:	2300      	moveq	r3, #0
 801584e:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	8ada      	ldrh	r2, [r3, #22]
 8015854:	7e1b      	ldrb	r3, [r3, #24]
 8015856:	041b      	lsls	r3, r3, #16
 8015858:	4313      	orrs	r3, r2
 801585a:	461a      	mov	r2, r3
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	43db      	mvns	r3, r3
 8015860:	4013      	ands	r3, r2
 8015862:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	b291      	uxth	r1, r2
 801586a:	2000      	movs	r0, #0
 801586c:	4301      	orrs	r1, r0
 801586e:	82d9      	strh	r1, [r3, #22]
 8015870:	0c12      	lsrs	r2, r2, #16
 8015872:	b2d2      	uxtb	r2, r2
 8015874:	2100      	movs	r1, #0
 8015876:	430a      	orrs	r2, r1
 8015878:	761a      	strb	r2, [r3, #24]
        return click;
 801587a:	7afb      	ldrb	r3, [r7, #11]
}
 801587c:	4618      	mov	r0, r3
 801587e:	3714      	adds	r7, #20
 8015880:	46bd      	mov	sp, r7
 8015882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015886:	4770      	bx	lr
 8015888:	0801894c 	.word	0x0801894c

0801588c <_ZN14XBOXONESParser12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONESParser::getAnalogHat(AnalogHatEnum a) {
 801588c:	b480      	push	{r7}
 801588e:	b083      	sub	sp, #12
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
 8015894:	460b      	mov	r3, r1
 8015896:	70fb      	strb	r3, [r7, #3]
        return xboxOneSData.hatValue[(uint8_t)a] - 32768; // Convert to signed integer
 8015898:	78fb      	ldrb	r3, [r7, #3]
 801589a:	687a      	ldr	r2, [r7, #4]
 801589c:	005b      	lsls	r3, r3, #1
 801589e:	4413      	add	r3, r2
 80158a0:	889b      	ldrh	r3, [r3, #4]
 80158a2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80158a6:	b29b      	uxth	r3, r3
 80158a8:	b21b      	sxth	r3, r3
}
 80158aa:	4618      	mov	r0, r3
 80158ac:	370c      	adds	r7, #12
 80158ae:	46bd      	mov	sp, r7
 80158b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b4:	4770      	bx	lr
	...

080158b8 <_ZN14XBOXONESParser5ParseEhPh>:

void XBOXONESParser::Parse(uint8_t len, uint8_t *buf) {
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b086      	sub	sp, #24
 80158bc:	af00      	add	r7, sp, #0
 80158be:	60f8      	str	r0, [r7, #12]
 80158c0:	460b      	mov	r3, r1
 80158c2:	607a      	str	r2, [r7, #4]
 80158c4:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 80158c6:	7afb      	ldrb	r3, [r7, #11]
 80158c8:	2b01      	cmp	r3, #1
 80158ca:	f240 80e5 	bls.w	8015a98 <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	f000 80e1 	beq.w	8015a98 <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	781b      	ldrb	r3, [r3, #0]
 80158da:	2b01      	cmp	r3, #1
 80158dc:	d11a      	bne.n	8015914 <_ZN14XBOXONESParser5ParseEhPh+0x5c>
                        memcpy(&xboxOneSData, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(xboxOneSData)));
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	1d18      	adds	r0, r3, #4
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	1c59      	adds	r1, r3, #1
 80158e6:	7afb      	ldrb	r3, [r7, #11]
 80158e8:	3b01      	subs	r3, #1
 80158ea:	b2db      	uxtb	r3, r3
 80158ec:	2b0f      	cmp	r3, #15
 80158ee:	bf28      	it	cs
 80158f0:	230f      	movcs	r3, #15
 80158f2:	b2db      	uxtb	r3, r3
 80158f4:	461a      	mov	r2, r3
 80158f6:	f000 fae9 	bl	8015ecc <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (xboxOneSData.btn.val != oldButtonState.val) { // Check if anything has changed
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	691b      	ldr	r3, [r3, #16]
 80158fe:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	7cd9      	ldrb	r1, [r3, #19]
 8015906:	8a9b      	ldrh	r3, [r3, #20]
 8015908:	021b      	lsls	r3, r3, #8
 801590a:	430b      	orrs	r3, r1
 801590c:	429a      	cmp	r2, r3
 801590e:	f000 809f 	beq.w	8015a50 <_ZN14XBOXONESParser5ParseEhPh+0x198>
 8015912:	e030      	b.n	8015976 <_ZN14XBOXONESParser5ParseEhPh+0xbe>
                else if (buf[0] == 0x02) { // This report contains the Xbox button
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	781b      	ldrb	r3, [r3, #0]
 8015918:	2b02      	cmp	r3, #2
 801591a:	d11c      	bne.n	8015956 <_ZN14XBOXONESParser5ParseEhPh+0x9e>
                        xboxButtonState = buf[1];
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	785a      	ldrb	r2, [r3, #1]
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	769a      	strb	r2, [r3, #26]
                        if(xboxButtonState != xboxOldButtonState) {
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	7e9a      	ldrb	r2, [r3, #26]
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	7edb      	ldrb	r3, [r3, #27]
 801592c:	429a      	cmp	r2, r3
 801592e:	f000 80b0 	beq.w	8015a92 <_ZN14XBOXONESParser5ParseEhPh+0x1da>
                            xboxbuttonClickState = xboxButtonState & ~xboxOldButtonState; // Update click state variable
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	7e9b      	ldrb	r3, [r3, #26]
 8015936:	b25a      	sxtb	r2, r3
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	7edb      	ldrb	r3, [r3, #27]
 801593c:	b25b      	sxtb	r3, r3
 801593e:	43db      	mvns	r3, r3
 8015940:	b25b      	sxtb	r3, r3
 8015942:	4013      	ands	r3, r2
 8015944:	b25b      	sxtb	r3, r3
 8015946:	b2da      	uxtb	r2, r3
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	771a      	strb	r2, [r3, #28]
                            xboxOldButtonState = xboxButtonState;
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	7e9a      	ldrb	r2, [r3, #26]
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	76da      	strb	r2, [r3, #27]
                        return;
 8015954:	e09d      	b.n	8015a92 <_ZN14XBOXONESParser5ParseEhPh+0x1da>
                } else if (buf[0] == 0x04) // Heartbeat
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	781b      	ldrb	r3, [r3, #0]
 801595a:	2b04      	cmp	r3, #4
 801595c:	f000 809b 	beq.w	8015a96 <_ZN14XBOXONESParser5ParseEhPh+0x1de>
                        Notify(PSTR("\r\nUnknown report id: "), 0x80);
 8015960:	2180      	movs	r1, #128	; 0x80
 8015962:	484f      	ldr	r0, [pc, #316]	; (8015aa0 <_ZN14XBOXONESParser5ParseEhPh+0x1e8>)
 8015964:	f000 f966 	bl	8015c34 <_Z8E_NotifyPKci>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	781b      	ldrb	r3, [r3, #0]
 801596c:	2180      	movs	r1, #128	; 0x80
 801596e:	4618      	mov	r0, r3
 8015970:	f7fc f9bf 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
                        return;
 8015974:	e090      	b.n	8015a98 <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
                        buttonClickState.val = xboxOneSData.btn.val & ~oldButtonState.val; // Update click state variable
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	691b      	ldr	r3, [r3, #16]
 801597a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801597e:	4619      	mov	r1, r3
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	7cda      	ldrb	r2, [r3, #19]
 8015984:	8a9b      	ldrh	r3, [r3, #20]
 8015986:	021b      	lsls	r3, r3, #8
 8015988:	4313      	orrs	r3, r2
 801598a:	43db      	mvns	r3, r3
 801598c:	400b      	ands	r3, r1
 801598e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	b291      	uxth	r1, r2
 8015996:	2000      	movs	r0, #0
 8015998:	4301      	orrs	r1, r0
 801599a:	82d9      	strh	r1, [r3, #22]
 801599c:	0c12      	lsrs	r2, r2, #16
 801599e:	b2d2      	uxtb	r2, r2
 80159a0:	2100      	movs	r1, #0
 80159a2:	430a      	orrs	r2, r1
 80159a4:	761a      	strb	r2, [r3, #24]
                        oldButtonState.val = xboxOneSData.btn.val;
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	691b      	ldr	r3, [r3, #16]
 80159aa:	f3c3 0217 	ubfx	r2, r3, #0, #24
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	b2d1      	uxtb	r1, r2
 80159b2:	2000      	movs	r0, #0
 80159b4:	4301      	orrs	r1, r0
 80159b6:	74d9      	strb	r1, [r3, #19]
 80159b8:	0a12      	lsrs	r2, r2, #8
 80159ba:	b292      	uxth	r2, r2
 80159bc:	2100      	movs	r1, #0
 80159be:	430a      	orrs	r2, r1
 80159c0:	829a      	strh	r2, [r3, #20]

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 80159c2:	2300      	movs	r3, #0
 80159c4:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 80159c6:	2100      	movs	r1, #0
 80159c8:	68f8      	ldr	r0, [r7, #12]
 80159ca:	f7ff fe3d 	bl	8015648 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 80159ce:	4603      	mov	r3, r0
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d003      	beq.n	80159dc <_ZN14XBOXONESParser5ParseEhPh+0x124>
                                newDpad |= 1 << UP;
 80159d4:	7dfb      	ldrb	r3, [r7, #23]
 80159d6:	f043 0301 	orr.w	r3, r3, #1
 80159da:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 80159dc:	2101      	movs	r1, #1
 80159de:	68f8      	ldr	r0, [r7, #12]
 80159e0:	f7ff fe32 	bl	8015648 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 80159e4:	4603      	mov	r3, r0
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d003      	beq.n	80159f2 <_ZN14XBOXONESParser5ParseEhPh+0x13a>
                                newDpad |= 1 << RIGHT;
 80159ea:	7dfb      	ldrb	r3, [r7, #23]
 80159ec:	f043 0302 	orr.w	r3, r3, #2
 80159f0:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 80159f2:	2102      	movs	r1, #2
 80159f4:	68f8      	ldr	r0, [r7, #12]
 80159f6:	f7ff fe27 	bl	8015648 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 80159fa:	4603      	mov	r3, r0
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d003      	beq.n	8015a08 <_ZN14XBOXONESParser5ParseEhPh+0x150>
                                newDpad |= 1 << DOWN;
 8015a00:	7dfb      	ldrb	r3, [r7, #23]
 8015a02:	f043 0304 	orr.w	r3, r3, #4
 8015a06:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 8015a08:	2103      	movs	r1, #3
 8015a0a:	68f8      	ldr	r0, [r7, #12]
 8015a0c:	f7ff fe1c 	bl	8015648 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 8015a10:	4603      	mov	r3, r0
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d003      	beq.n	8015a1e <_ZN14XBOXONESParser5ParseEhPh+0x166>
                                newDpad |= 1 << LEFT;
 8015a16:	7dfb      	ldrb	r3, [r7, #23]
 8015a18:	f043 0308 	orr.w	r3, r3, #8
 8015a1c:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	7e5b      	ldrb	r3, [r3, #25]
 8015a22:	7dfa      	ldrb	r2, [r7, #23]
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d013      	beq.n	8015a50 <_ZN14XBOXONESParser5ParseEhPh+0x198>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	7e5b      	ldrb	r3, [r3, #25]
 8015a2c:	b25b      	sxtb	r3, r3
 8015a2e:	43db      	mvns	r3, r3
 8015a30:	b25a      	sxtb	r2, r3
 8015a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015a36:	4013      	ands	r3, r2
 8015a38:	b25b      	sxtb	r3, r3
 8015a3a:	f003 030f 	and.w	r3, r3, #15
 8015a3e:	b2d9      	uxtb	r1, r3
 8015a40:	68fa      	ldr	r2, [r7, #12]
 8015a42:	7d93      	ldrb	r3, [r2, #22]
 8015a44:	f361 0303 	bfi	r3, r1, #0, #4
 8015a48:	7593      	strb	r3, [r2, #22]
                                oldDpad = newDpad;
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	7dfa      	ldrb	r2, [r7, #23]
 8015a4e:	765a      	strb	r2, [r3, #25]
                        }
                }

                // Handle click detection for triggers
                if(xboxOneSData.trigger[0] != 0 && triggerOld[0] == 0)
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	899b      	ldrh	r3, [r3, #12]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d007      	beq.n	8015a68 <_ZN14XBOXONESParser5ParseEhPh+0x1b0>
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	8bdb      	ldrh	r3, [r3, #30]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d103      	bne.n	8015a68 <_ZN14XBOXONESParser5ParseEhPh+0x1b0>
                        L2Clicked = true;
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	2201      	movs	r2, #1
 8015a64:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                triggerOld[0] = xboxOneSData.trigger[0];
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	899a      	ldrh	r2, [r3, #12]
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	83da      	strh	r2, [r3, #30]
                if(xboxOneSData.trigger[1] != 0 && triggerOld[1] == 0)
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	89db      	ldrh	r3, [r3, #14]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d007      	beq.n	8015a88 <_ZN14XBOXONESParser5ParseEhPh+0x1d0>
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	8c1b      	ldrh	r3, [r3, #32]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d103      	bne.n	8015a88 <_ZN14XBOXONESParser5ParseEhPh+0x1d0>
                        R2Clicked = true;
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	2201      	movs	r2, #1
 8015a84:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
                triggerOld[1] = xboxOneSData.trigger[1];
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	89da      	ldrh	r2, [r3, #14]
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	841a      	strh	r2, [r3, #32]
 8015a90:	e002      	b.n	8015a98 <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
                        return;
 8015a92:	bf00      	nop
 8015a94:	e000      	b.n	8015a98 <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
                        return;
 8015a96:	bf00      	nop
        }
}
 8015a98:	3718      	adds	r7, #24
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bd80      	pop	{r7, pc}
 8015a9e:	bf00      	nop
 8015aa0:	08017840 	.word	0x08017840

08015aa4 <_ZN14XBOXONESParser5ResetEv>:

void XBOXONESParser::Reset() {
 8015aa4:	b480      	push	{r7}
 8015aa6:	b085      	sub	sp, #20
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(xboxOneSData.hatValue) / sizeof(xboxOneSData.hatValue[0]); i++)
 8015aac:	2300      	movs	r3, #0
 8015aae:	73fb      	strb	r3, [r7, #15]
 8015ab0:	7bfb      	ldrb	r3, [r7, #15]
 8015ab2:	2b03      	cmp	r3, #3
 8015ab4:	d80a      	bhi.n	8015acc <_ZN14XBOXONESParser5ResetEv+0x28>
                xboxOneSData.hatValue[i] = 32768; // Center value
 8015ab6:	7bfb      	ldrb	r3, [r7, #15]
 8015ab8:	687a      	ldr	r2, [r7, #4]
 8015aba:	005b      	lsls	r3, r3, #1
 8015abc:	4413      	add	r3, r2
 8015abe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8015ac2:	809a      	strh	r2, [r3, #4]
        for (i = 0; i < sizeof(xboxOneSData.hatValue) / sizeof(xboxOneSData.hatValue[0]); i++)
 8015ac4:	7bfb      	ldrb	r3, [r7, #15]
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	73fb      	strb	r3, [r7, #15]
 8015aca:	e7f1      	b.n	8015ab0 <_ZN14XBOXONESParser5ResetEv+0xc>
        xboxOneSData.btn.val = 0;
 8015acc:	687a      	ldr	r2, [r7, #4]
 8015ace:	6913      	ldr	r3, [r2, #16]
 8015ad0:	f36f 0317 	bfc	r3, #0, #24
 8015ad4:	6113      	str	r3, [r2, #16]
        oldButtonState.val = 0;
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	2200      	movs	r2, #0
 8015ada:	74da      	strb	r2, [r3, #19]
 8015adc:	2200      	movs	r2, #0
 8015ade:	829a      	strh	r2, [r3, #20]
        for (i = 0; i < sizeof(xboxOneSData.trigger) / sizeof(xboxOneSData.trigger[0]); i++)
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	73fb      	strb	r3, [r7, #15]
 8015ae4:	7bfb      	ldrb	r3, [r7, #15]
 8015ae6:	2b01      	cmp	r3, #1
 8015ae8:	d80a      	bhi.n	8015b00 <_ZN14XBOXONESParser5ResetEv+0x5c>
                xboxOneSData.trigger[i] = 0;
 8015aea:	7bfb      	ldrb	r3, [r7, #15]
 8015aec:	687a      	ldr	r2, [r7, #4]
 8015aee:	3304      	adds	r3, #4
 8015af0:	005b      	lsls	r3, r3, #1
 8015af2:	4413      	add	r3, r2
 8015af4:	2200      	movs	r2, #0
 8015af6:	809a      	strh	r2, [r3, #4]
        for (i = 0; i < sizeof(xboxOneSData.trigger) / sizeof(xboxOneSData.trigger[0]); i++)
 8015af8:	7bfb      	ldrb	r3, [r7, #15]
 8015afa:	3301      	adds	r3, #1
 8015afc:	73fb      	strb	r3, [r7, #15]
 8015afe:	e7f1      	b.n	8015ae4 <_ZN14XBOXONESParser5ResetEv+0x40>

        xboxOneSData.btn.dpad = DPAD_OFF;
 8015b00:	687a      	ldr	r2, [r7, #4]
 8015b02:	7c13      	ldrb	r3, [r2, #16]
 8015b04:	f36f 0303 	bfc	r3, #0, #4
 8015b08:	7413      	strb	r3, [r2, #16]
        oldButtonState.dpad = DPAD_OFF;
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	7cd3      	ldrb	r3, [r2, #19]
 8015b0e:	f36f 0303 	bfc	r3, #0, #4
 8015b12:	74d3      	strb	r3, [r2, #19]
        buttonClickState.dpad = 0;
 8015b14:	687a      	ldr	r2, [r7, #4]
 8015b16:	7d93      	ldrb	r3, [r2, #22]
 8015b18:	f36f 0303 	bfc	r3, #0, #4
 8015b1c:	7593      	strb	r3, [r2, #22]
        oldDpad = 0;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2200      	movs	r2, #0
 8015b22:	765a      	strb	r2, [r3, #25]
};
 8015b24:	bf00      	nop
 8015b26:	3714      	adds	r7, #20
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2e:	4770      	bx	lr

08015b30 <_ZN14XBOXONESParser11setRumbleOnEhhhh>:
        buf[6] = 0; // Start delay in 10 ms
        buf[7] = 0; // Loop count
        sendOutputReport(buf, sizeof(buf));
}

void XBOXONESParser::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b084      	sub	sp, #16
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
 8015b38:	4608      	mov	r0, r1
 8015b3a:	4611      	mov	r1, r2
 8015b3c:	461a      	mov	r2, r3
 8015b3e:	4603      	mov	r3, r0
 8015b40:	70fb      	strb	r3, [r7, #3]
 8015b42:	460b      	mov	r3, r1
 8015b44:	70bb      	strb	r3, [r7, #2]
 8015b46:	4613      	mov	r3, r2
 8015b48:	707b      	strb	r3, [r7, #1]
        // See: https://lore.kernel.org/patchwork/patch/973394/
        uint8_t buf[8];
        buf[0] = 1 << 3 /* Left trigger */ | 1 << 2 /* Right trigger */ | 1 << 1 /* Left motor */ | 1 << 0 /* Right motor */;
 8015b4a:	230f      	movs	r3, #15
 8015b4c:	723b      	strb	r3, [r7, #8]
        buf[1] = leftTrigger;
 8015b4e:	78fb      	ldrb	r3, [r7, #3]
 8015b50:	727b      	strb	r3, [r7, #9]
        buf[2] = rightTrigger;
 8015b52:	78bb      	ldrb	r3, [r7, #2]
 8015b54:	72bb      	strb	r3, [r7, #10]
        buf[3] = leftMotor;
 8015b56:	787b      	ldrb	r3, [r7, #1]
 8015b58:	72fb      	strb	r3, [r7, #11]
        buf[4] = rightMotor;
 8015b5a:	7e3b      	ldrb	r3, [r7, #24]
 8015b5c:	733b      	strb	r3, [r7, #12]
        buf[5] = 255; // Duration of effect in 10 ms
 8015b5e:	23ff      	movs	r3, #255	; 0xff
 8015b60:	737b      	strb	r3, [r7, #13]
        buf[6] = 0; // Start delay in 10 ms
 8015b62:	2300      	movs	r3, #0
 8015b64:	73bb      	strb	r3, [r7, #14]
        buf[7] = 255; // Loop count
 8015b66:	23ff      	movs	r3, #255	; 0xff
 8015b68:	73fb      	strb	r3, [r7, #15]
        sendOutputReport(buf, sizeof(buf));
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	f107 0108 	add.w	r1, r7, #8
 8015b74:	2208      	movs	r2, #8
 8015b76:	6878      	ldr	r0, [r7, #4]
 8015b78:	4798      	blx	r3
}
 8015b7a:	bf00      	nop
 8015b7c:	3710      	adds	r7, #16
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}

08015b82 <_Z10D_PrintHexItEvT_i>:
template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8015b82:	b580      	push	{r7, lr}
 8015b84:	b082      	sub	sp, #8
 8015b86:	af00      	add	r7, sp, #0
 8015b88:	4603      	mov	r3, r0
 8015b8a:	6039      	str	r1, [r7, #0]
 8015b8c:	80fb      	strh	r3, [r7, #6]
        PrintHex<T > (val, lvl);
 8015b8e:	88fb      	ldrh	r3, [r7, #6]
 8015b90:	6839      	ldr	r1, [r7, #0]
 8015b92:	4618      	mov	r0, r3
 8015b94:	f000 f804 	bl	8015ba0 <_Z8PrintHexItEvT_i>
}
 8015b98:	bf00      	nop
 8015b9a:	3708      	adds	r7, #8
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <_Z8PrintHexItEvT_i>:
void PrintHex(T val, int lvl) {
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b084      	sub	sp, #16
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	6039      	str	r1, [r7, #0]
 8015baa:	80fb      	strh	r3, [r7, #6]
        int num_nibbles = sizeof (T) * 2;
 8015bac:	2304      	movs	r3, #4
 8015bae:	60fb      	str	r3, [r7, #12]
                char v = 48 + (((val >> (num_nibbles - 1) * 4)) & 0x0f);
 8015bb0:	88fa      	ldrh	r2, [r7, #6]
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	3b01      	subs	r3, #1
 8015bb6:	009b      	lsls	r3, r3, #2
 8015bb8:	fa42 f303 	asr.w	r3, r2, r3
 8015bbc:	b2db      	uxtb	r3, r3
 8015bbe:	f003 030f 	and.w	r3, r3, #15
 8015bc2:	b2db      	uxtb	r3, r3
 8015bc4:	3330      	adds	r3, #48	; 0x30
 8015bc6:	72fb      	strb	r3, [r7, #11]
                if(v > 57) v += 7;
 8015bc8:	7afb      	ldrb	r3, [r7, #11]
 8015bca:	2b39      	cmp	r3, #57	; 0x39
 8015bcc:	d902      	bls.n	8015bd4 <_Z8PrintHexItEvT_i+0x34>
 8015bce:	7afb      	ldrb	r3, [r7, #11]
 8015bd0:	3307      	adds	r3, #7
 8015bd2:	72fb      	strb	r3, [r7, #11]
                E_Notifyc(v, lvl);
 8015bd4:	7afb      	ldrb	r3, [r7, #11]
 8015bd6:	6839      	ldr	r1, [r7, #0]
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f000 f811 	bl	8015c00 <_Z9E_Notifycci>
        do {
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	3b01      	subs	r3, #1
 8015be2:	60fb      	str	r3, [r7, #12]
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	bf14      	ite	ne
 8015bea:	2301      	movne	r3, #1
 8015bec:	2300      	moveq	r3, #0
 8015bee:	b2db      	uxtb	r3, r3
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d000      	beq.n	8015bf6 <_Z8PrintHexItEvT_i+0x56>
 8015bf4:	e7dc      	b.n	8015bb0 <_Z8PrintHexItEvT_i+0x10>
}
 8015bf6:	bf00      	nop
 8015bf8:	3710      	adds	r7, #16
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}
	...

08015c00 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b082      	sub	sp, #8
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	4603      	mov	r3, r0
 8015c08:	6039      	str	r1, [r7, #0]
 8015c0a:	71fb      	strb	r3, [r7, #7]
        if(UsbDEBUGlvl < lvl) return;
 8015c0c:	4b07      	ldr	r3, [pc, #28]	; (8015c2c <_Z9E_Notifycci+0x2c>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	683a      	ldr	r2, [r7, #0]
 8015c12:	429a      	cmp	r2, r3
 8015c14:	dc05      	bgt.n	8015c22 <_Z9E_Notifycci+0x22>
#if defined(ARDUINO) && ARDUINO >=100
        USB_HOST_SERIAL.print(c);
 8015c16:	79fb      	ldrb	r3, [r7, #7]
 8015c18:	4619      	mov	r1, r3
 8015c1a:	4805      	ldr	r0, [pc, #20]	; (8015c30 <_Z9E_Notifycci+0x30>)
 8015c1c:	f7ea fd2a 	bl	8000674 <_ZN5Print5printEc>
 8015c20:	e000      	b.n	8015c24 <_Z9E_Notifycci+0x24>
        if(UsbDEBUGlvl < lvl) return;
 8015c22:	bf00      	nop
#else
        USB_HOST_SERIAL.print(c, BYTE);
#endif
        //USB_HOST_SERIAL.flush();
}
 8015c24:	3708      	adds	r7, #8
 8015c26:	46bd      	mov	sp, r7
 8015c28:	bd80      	pop	{r7, pc}
 8015c2a:	bf00      	nop
 8015c2c:	2000011c 	.word	0x2000011c
 8015c30:	200005cc 	.word	0x200005cc

08015c34 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b084      	sub	sp, #16
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
 8015c3c:	6039      	str	r1, [r7, #0]
        if(UsbDEBUGlvl < lvl) return;
 8015c3e:	4b10      	ldr	r3, [pc, #64]	; (8015c80 <_Z8E_NotifyPKci+0x4c>)
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	683a      	ldr	r2, [r7, #0]
 8015c44:	429a      	cmp	r2, r3
 8015c46:	dc15      	bgt.n	8015c74 <_Z8E_NotifyPKci+0x40>
        if(!msg) return;
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d014      	beq.n	8015c78 <_Z8E_NotifyPKci+0x44>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	1c5a      	adds	r2, r3, #1
 8015c52:	607a      	str	r2, [r7, #4]
 8015c54:	781b      	ldrb	r3, [r3, #0]
 8015c56:	73fb      	strb	r3, [r7, #15]
 8015c58:	7bfb      	ldrb	r3, [r7, #15]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	bf14      	ite	ne
 8015c5e:	2301      	movne	r3, #1
 8015c60:	2300      	moveq	r3, #0
 8015c62:	b2db      	uxtb	r3, r3
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d008      	beq.n	8015c7a <_Z8E_NotifyPKci+0x46>
 8015c68:	7bfb      	ldrb	r3, [r7, #15]
 8015c6a:	6839      	ldr	r1, [r7, #0]
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f7ff ffc7 	bl	8015c00 <_Z9E_Notifycci>
 8015c72:	e7ec      	b.n	8015c4e <_Z8E_NotifyPKci+0x1a>
        if(UsbDEBUGlvl < lvl) return;
 8015c74:	bf00      	nop
 8015c76:	e000      	b.n	8015c7a <_Z8E_NotifyPKci+0x46>
        if(!msg) return;
 8015c78:	bf00      	nop
}
 8015c7a:	3710      	adds	r7, #16
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bd80      	pop	{r7, pc}
 8015c80:	2000011c 	.word	0x2000011c

08015c84 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b084      	sub	sp, #16
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
 8015c8c:	6039      	str	r1, [r7, #0]
        if(UsbDEBUGlvl < lvl) return;
 8015c8e:	4b10      	ldr	r3, [pc, #64]	; (8015cd0 <_Z11E_NotifyStrPKci+0x4c>)
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	683a      	ldr	r2, [r7, #0]
 8015c94:	429a      	cmp	r2, r3
 8015c96:	dc15      	bgt.n	8015cc4 <_Z11E_NotifyStrPKci+0x40>
        if(!msg) return;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d014      	beq.n	8015cc8 <_Z11E_NotifyStrPKci+0x44>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	1c5a      	adds	r2, r3, #1
 8015ca2:	607a      	str	r2, [r7, #4]
 8015ca4:	781b      	ldrb	r3, [r3, #0]
 8015ca6:	73fb      	strb	r3, [r7, #15]
 8015ca8:	7bfb      	ldrb	r3, [r7, #15]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	bf14      	ite	ne
 8015cae:	2301      	movne	r3, #1
 8015cb0:	2300      	moveq	r3, #0
 8015cb2:	b2db      	uxtb	r3, r3
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d008      	beq.n	8015cca <_Z11E_NotifyStrPKci+0x46>
 8015cb8:	7bfb      	ldrb	r3, [r7, #15]
 8015cba:	6839      	ldr	r1, [r7, #0]
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	f7ff ff9f 	bl	8015c00 <_Z9E_Notifycci>
 8015cc2:	e7ec      	b.n	8015c9e <_Z11E_NotifyStrPKci+0x1a>
        if(UsbDEBUGlvl < lvl) return;
 8015cc4:	bf00      	nop
 8015cc6:	e000      	b.n	8015cca <_Z11E_NotifyStrPKci+0x46>
        if(!msg) return;
 8015cc8:	bf00      	nop
}
 8015cca:	3710      	adds	r7, #16
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}
 8015cd0:	2000011c 	.word	0x2000011c

08015cd4 <_Z21NotifyFailGetDevDescrv>:
        //USB_HOST_SERIAL.flush();
}

#ifdef DEBUG_USB_HOST

void NotifyFailGetDevDescr(void) {
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\ngetDevDescr "), 0x80);
 8015cd8:	2180      	movs	r1, #128	; 0x80
 8015cda:	4802      	ldr	r0, [pc, #8]	; (8015ce4 <_Z21NotifyFailGetDevDescrv+0x10>)
 8015cdc:	f7ff ffaa 	bl	8015c34 <_Z8E_NotifyPKci>
}
 8015ce0:	bf00      	nop
 8015ce2:	bd80      	pop	{r7, pc}
 8015ce4:	08017858 	.word	0x08017858

08015ce8 <_Z24NotifyFailSetDevTblEntryv>:

void NotifyFailSetDevTblEntry(void) {
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\nsetDevTblEn "), 0x80);
 8015cec:	2180      	movs	r1, #128	; 0x80
 8015cee:	4802      	ldr	r0, [pc, #8]	; (8015cf8 <_Z24NotifyFailSetDevTblEntryv+0x10>)
 8015cf0:	f7ff ffa0 	bl	8015c34 <_Z8E_NotifyPKci>
}
 8015cf4:	bf00      	nop
 8015cf6:	bd80      	pop	{r7, pc}
 8015cf8:	08017868 	.word	0x08017868

08015cfc <_Z22NotifyFailGetConfDescrv>:

void NotifyFailGetConfDescr(void) {
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\ngetConf "), 0x80);
 8015d00:	2180      	movs	r1, #128	; 0x80
 8015d02:	4802      	ldr	r0, [pc, #8]	; (8015d0c <_Z22NotifyFailGetConfDescrv+0x10>)
 8015d04:	f7ff ff96 	bl	8015c34 <_Z8E_NotifyPKci>
}
 8015d08:	bf00      	nop
 8015d0a:	bd80      	pop	{r7, pc}
 8015d0c:	08017878 	.word	0x08017878

08015d10 <_Z22NotifyFailSetConfDescrv>:

void NotifyFailSetConfDescr(void) {
 8015d10:	b580      	push	{r7, lr}
 8015d12:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\nsetConf "), 0x80);
 8015d14:	2180      	movs	r1, #128	; 0x80
 8015d16:	4802      	ldr	r0, [pc, #8]	; (8015d20 <_Z22NotifyFailSetConfDescrv+0x10>)
 8015d18:	f7ff ff8c 	bl	8015c34 <_Z8E_NotifyPKci>
}
 8015d1c:	bf00      	nop
 8015d1e:	bd80      	pop	{r7, pc}
 8015d20:	08017884 	.word	0x08017884

08015d24 <_Z21NotifyFailGetDevDescrh>:

void NotifyFailGetDevDescr(uint8_t reason) {
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b082      	sub	sp, #8
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	71fb      	strb	r3, [r7, #7]
        NotifyFailGetDevDescr();
 8015d2e:	f7ff ffd1 	bl	8015cd4 <_Z21NotifyFailGetDevDescrv>
        NotifyFail(reason);
 8015d32:	79fb      	ldrb	r3, [r7, #7]
 8015d34:	4618      	mov	r0, r3
 8015d36:	f000 f827 	bl	8015d88 <_Z10NotifyFailh>
}
 8015d3a:	bf00      	nop
 8015d3c:	3708      	adds	r7, #8
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	bd80      	pop	{r7, pc}
	...

08015d44 <_Z23NotifyFailUnknownDevicett>:
void NotifyFailSetConfDescr(uint8_t reason) {
        NotifyFailSetConfDescr();
        NotifyFail(reason);
}

void NotifyFailUnknownDevice(uint16_t VID, uint16_t PID) {
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	460a      	mov	r2, r1
 8015d4e:	80fb      	strh	r3, [r7, #6]
 8015d50:	4613      	mov	r3, r2
 8015d52:	80bb      	strh	r3, [r7, #4]
        Notify(PSTR("\r\nUnknown Device Connected - VID: "), 0x80);
 8015d54:	2180      	movs	r1, #128	; 0x80
 8015d56:	480a      	ldr	r0, [pc, #40]	; (8015d80 <_Z23NotifyFailUnknownDevicett+0x3c>)
 8015d58:	f7ff ff6c 	bl	8015c34 <_Z8E_NotifyPKci>
        D_PrintHex<uint16_t > (VID, 0x80);
 8015d5c:	88fb      	ldrh	r3, [r7, #6]
 8015d5e:	2180      	movs	r1, #128	; 0x80
 8015d60:	4618      	mov	r0, r3
 8015d62:	f7ff ff0e 	bl	8015b82 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR(" PID: "), 0x80);
 8015d66:	2180      	movs	r1, #128	; 0x80
 8015d68:	4806      	ldr	r0, [pc, #24]	; (8015d84 <_Z23NotifyFailUnknownDevicett+0x40>)
 8015d6a:	f7ff ff63 	bl	8015c34 <_Z8E_NotifyPKci>
        D_PrintHex<uint16_t > (PID, 0x80);
 8015d6e:	88bb      	ldrh	r3, [r7, #4]
 8015d70:	2180      	movs	r1, #128	; 0x80
 8015d72:	4618      	mov	r0, r3
 8015d74:	f7ff ff05 	bl	8015b82 <_Z10D_PrintHexItEvT_i>
}
 8015d78:	bf00      	nop
 8015d7a:	3708      	adds	r7, #8
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	bd80      	pop	{r7, pc}
 8015d80:	08017890 	.word	0x08017890
 8015d84:	080178b4 	.word	0x080178b4

08015d88 <_Z10NotifyFailh>:

void NotifyFail(uint8_t rcode) {
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	4603      	mov	r3, r0
 8015d90:	71fb      	strb	r3, [r7, #7]
        D_PrintHex<uint8_t > (rcode, 0x80);
 8015d92:	79fb      	ldrb	r3, [r7, #7]
 8015d94:	2180      	movs	r1, #128	; 0x80
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7fb ffab 	bl	8011cf2 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\n"), 0x80);
 8015d9c:	2180      	movs	r1, #128	; 0x80
 8015d9e:	4803      	ldr	r0, [pc, #12]	; (8015dac <_Z10NotifyFailh+0x24>)
 8015da0:	f7ff ff48 	bl	8015c34 <_Z8E_NotifyPKci>
}
 8015da4:	bf00      	nop
 8015da6:	3708      	adds	r7, #8
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}
 8015dac:	080178bc 	.word	0x080178bc

08015db0 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b084      	sub	sp, #16
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	60f8      	str	r0, [r7, #12]
 8015db8:	60b9      	str	r1, [r7, #8]
 8015dba:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d105      	bne.n	8015dd0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x20>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
 8015dc4:	2180      	movs	r1, #128	; 0x80
 8015dc6:	481d      	ldr	r0, [pc, #116]	; (8015e3c <_ZN20MultiByteValueParser5ParseEPPhPt+0x8c>)
 8015dc8:	f7ff ff34 	bl	8015c34 <_Z8E_NotifyPKci>
                return false;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	e031      	b.n	8015e34 <_ZN20MultiByteValueParser5ParseEPPhPt+0x84>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	791b      	ldrb	r3, [r3, #4]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d022      	beq.n	8015e1e <_ZN20MultiByteValueParser5ParseEPPhPt+0x6e>
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	881b      	ldrh	r3, [r3, #0]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d01e      	beq.n	8015e1e <_ZN20MultiByteValueParser5ParseEPPhPt+0x6e>
                pBuf[valueSize - countDown] = (**pp);
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	681a      	ldr	r2, [r3, #0]
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	68f9      	ldr	r1, [r7, #12]
 8015dea:	7949      	ldrb	r1, [r1, #5]
 8015dec:	4608      	mov	r0, r1
 8015dee:	68f9      	ldr	r1, [r7, #12]
 8015df0:	7909      	ldrb	r1, [r1, #4]
 8015df2:	1a41      	subs	r1, r0, r1
 8015df4:	440b      	add	r3, r1
 8015df6:	7812      	ldrb	r2, [r2, #0]
 8015df8:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	791b      	ldrb	r3, [r3, #4]
 8015dfe:	3b01      	subs	r3, #1
 8015e00:	b2da      	uxtb	r2, r3
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	711a      	strb	r2, [r3, #4]
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	881b      	ldrh	r3, [r3, #0]
 8015e0a:	3b01      	subs	r3, #1
 8015e0c:	b29a      	uxth	r2, r3
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	801a      	strh	r2, [r3, #0]
 8015e12:	68bb      	ldr	r3, [r7, #8]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	1c5a      	adds	r2, r3, #1
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	601a      	str	r2, [r3, #0]
 8015e1c:	e7d8      	b.n	8015dd0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x20>

        if(countDown)
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	791b      	ldrb	r3, [r3, #4]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d001      	beq.n	8015e2a <_ZN20MultiByteValueParser5ParseEPPhPt+0x7a>
                return false;
 8015e26:	2300      	movs	r3, #0
 8015e28:	e004      	b.n	8015e34 <_ZN20MultiByteValueParser5ParseEPPhPt+0x84>

        countDown = valueSize;
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	795a      	ldrb	r2, [r3, #5]
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	711a      	strb	r2, [r3, #4]
        return true;
 8015e32:	2301      	movs	r3, #1
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3710      	adds	r7, #16
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}
 8015e3c:	080178c0 	.word	0x080178c0

08015e40 <__cxa_pure_virtual>:
 8015e40:	b508      	push	{r3, lr}
 8015e42:	f000 f80d 	bl	8015e60 <_ZSt9terminatev>

08015e46 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8015e46:	b508      	push	{r3, lr}
 8015e48:	4780      	blx	r0
 8015e4a:	f000 f80e 	bl	8015e6a <abort>
	...

08015e50 <_ZSt13get_terminatev>:
 8015e50:	4b02      	ldr	r3, [pc, #8]	; (8015e5c <_ZSt13get_terminatev+0xc>)
 8015e52:	6818      	ldr	r0, [r3, #0]
 8015e54:	f3bf 8f5b 	dmb	ish
 8015e58:	4770      	bx	lr
 8015e5a:	bf00      	nop
 8015e5c:	20000120 	.word	0x20000120

08015e60 <_ZSt9terminatev>:
 8015e60:	b508      	push	{r3, lr}
 8015e62:	f7ff fff5 	bl	8015e50 <_ZSt13get_terminatev>
 8015e66:	f7ff ffee 	bl	8015e46 <_ZN10__cxxabiv111__terminateEPFvvE>

08015e6a <abort>:
 8015e6a:	b508      	push	{r3, lr}
 8015e6c:	2006      	movs	r0, #6
 8015e6e:	f000 f93f 	bl	80160f0 <raise>
 8015e72:	2001      	movs	r0, #1
 8015e74:	f7ec fff4 	bl	8002e60 <_exit>

08015e78 <__errno>:
 8015e78:	4b01      	ldr	r3, [pc, #4]	; (8015e80 <__errno+0x8>)
 8015e7a:	6818      	ldr	r0, [r3, #0]
 8015e7c:	4770      	bx	lr
 8015e7e:	bf00      	nop
 8015e80:	20000124 	.word	0x20000124

08015e84 <__libc_init_array>:
 8015e84:	b570      	push	{r4, r5, r6, lr}
 8015e86:	4d0d      	ldr	r5, [pc, #52]	; (8015ebc <__libc_init_array+0x38>)
 8015e88:	4c0d      	ldr	r4, [pc, #52]	; (8015ec0 <__libc_init_array+0x3c>)
 8015e8a:	1b64      	subs	r4, r4, r5
 8015e8c:	10a4      	asrs	r4, r4, #2
 8015e8e:	2600      	movs	r6, #0
 8015e90:	42a6      	cmp	r6, r4
 8015e92:	d109      	bne.n	8015ea8 <__libc_init_array+0x24>
 8015e94:	4d0b      	ldr	r5, [pc, #44]	; (8015ec4 <__libc_init_array+0x40>)
 8015e96:	4c0c      	ldr	r4, [pc, #48]	; (8015ec8 <__libc_init_array+0x44>)
 8015e98:	f000 fca4 	bl	80167e4 <_init>
 8015e9c:	1b64      	subs	r4, r4, r5
 8015e9e:	10a4      	asrs	r4, r4, #2
 8015ea0:	2600      	movs	r6, #0
 8015ea2:	42a6      	cmp	r6, r4
 8015ea4:	d105      	bne.n	8015eb2 <__libc_init_array+0x2e>
 8015ea6:	bd70      	pop	{r4, r5, r6, pc}
 8015ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8015eac:	4798      	blx	r3
 8015eae:	3601      	adds	r6, #1
 8015eb0:	e7ee      	b.n	8015e90 <__libc_init_array+0xc>
 8015eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8015eb6:	4798      	blx	r3
 8015eb8:	3601      	adds	r6, #1
 8015eba:	e7f2      	b.n	8015ea2 <__libc_init_array+0x1e>
 8015ebc:	080189f8 	.word	0x080189f8
 8015ec0:	080189f8 	.word	0x080189f8
 8015ec4:	080189f8 	.word	0x080189f8
 8015ec8:	08018a00 	.word	0x08018a00

08015ecc <memcpy>:
 8015ecc:	440a      	add	r2, r1
 8015ece:	4291      	cmp	r1, r2
 8015ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8015ed4:	d100      	bne.n	8015ed8 <memcpy+0xc>
 8015ed6:	4770      	bx	lr
 8015ed8:	b510      	push	{r4, lr}
 8015eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015ee2:	4291      	cmp	r1, r2
 8015ee4:	d1f9      	bne.n	8015eda <memcpy+0xe>
 8015ee6:	bd10      	pop	{r4, pc}

08015ee8 <memmove>:
 8015ee8:	4288      	cmp	r0, r1
 8015eea:	b510      	push	{r4, lr}
 8015eec:	eb01 0402 	add.w	r4, r1, r2
 8015ef0:	d902      	bls.n	8015ef8 <memmove+0x10>
 8015ef2:	4284      	cmp	r4, r0
 8015ef4:	4623      	mov	r3, r4
 8015ef6:	d807      	bhi.n	8015f08 <memmove+0x20>
 8015ef8:	1e43      	subs	r3, r0, #1
 8015efa:	42a1      	cmp	r1, r4
 8015efc:	d008      	beq.n	8015f10 <memmove+0x28>
 8015efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015f06:	e7f8      	b.n	8015efa <memmove+0x12>
 8015f08:	4402      	add	r2, r0
 8015f0a:	4601      	mov	r1, r0
 8015f0c:	428a      	cmp	r2, r1
 8015f0e:	d100      	bne.n	8015f12 <memmove+0x2a>
 8015f10:	bd10      	pop	{r4, pc}
 8015f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015f1a:	e7f7      	b.n	8015f0c <memmove+0x24>

08015f1c <memset>:
 8015f1c:	4402      	add	r2, r0
 8015f1e:	4603      	mov	r3, r0
 8015f20:	4293      	cmp	r3, r2
 8015f22:	d100      	bne.n	8015f26 <memset+0xa>
 8015f24:	4770      	bx	lr
 8015f26:	f803 1b01 	strb.w	r1, [r3], #1
 8015f2a:	e7f9      	b.n	8015f20 <memset+0x4>

08015f2c <_free_r>:
 8015f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f2e:	2900      	cmp	r1, #0
 8015f30:	d048      	beq.n	8015fc4 <_free_r+0x98>
 8015f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f36:	9001      	str	r0, [sp, #4]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	f1a1 0404 	sub.w	r4, r1, #4
 8015f3e:	bfb8      	it	lt
 8015f40:	18e4      	addlt	r4, r4, r3
 8015f42:	f000 f923 	bl	801618c <__malloc_lock>
 8015f46:	4a20      	ldr	r2, [pc, #128]	; (8015fc8 <_free_r+0x9c>)
 8015f48:	9801      	ldr	r0, [sp, #4]
 8015f4a:	6813      	ldr	r3, [r2, #0]
 8015f4c:	4615      	mov	r5, r2
 8015f4e:	b933      	cbnz	r3, 8015f5e <_free_r+0x32>
 8015f50:	6063      	str	r3, [r4, #4]
 8015f52:	6014      	str	r4, [r2, #0]
 8015f54:	b003      	add	sp, #12
 8015f56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f5a:	f000 b91d 	b.w	8016198 <__malloc_unlock>
 8015f5e:	42a3      	cmp	r3, r4
 8015f60:	d90b      	bls.n	8015f7a <_free_r+0x4e>
 8015f62:	6821      	ldr	r1, [r4, #0]
 8015f64:	1862      	adds	r2, r4, r1
 8015f66:	4293      	cmp	r3, r2
 8015f68:	bf04      	itt	eq
 8015f6a:	681a      	ldreq	r2, [r3, #0]
 8015f6c:	685b      	ldreq	r3, [r3, #4]
 8015f6e:	6063      	str	r3, [r4, #4]
 8015f70:	bf04      	itt	eq
 8015f72:	1852      	addeq	r2, r2, r1
 8015f74:	6022      	streq	r2, [r4, #0]
 8015f76:	602c      	str	r4, [r5, #0]
 8015f78:	e7ec      	b.n	8015f54 <_free_r+0x28>
 8015f7a:	461a      	mov	r2, r3
 8015f7c:	685b      	ldr	r3, [r3, #4]
 8015f7e:	b10b      	cbz	r3, 8015f84 <_free_r+0x58>
 8015f80:	42a3      	cmp	r3, r4
 8015f82:	d9fa      	bls.n	8015f7a <_free_r+0x4e>
 8015f84:	6811      	ldr	r1, [r2, #0]
 8015f86:	1855      	adds	r5, r2, r1
 8015f88:	42a5      	cmp	r5, r4
 8015f8a:	d10b      	bne.n	8015fa4 <_free_r+0x78>
 8015f8c:	6824      	ldr	r4, [r4, #0]
 8015f8e:	4421      	add	r1, r4
 8015f90:	1854      	adds	r4, r2, r1
 8015f92:	42a3      	cmp	r3, r4
 8015f94:	6011      	str	r1, [r2, #0]
 8015f96:	d1dd      	bne.n	8015f54 <_free_r+0x28>
 8015f98:	681c      	ldr	r4, [r3, #0]
 8015f9a:	685b      	ldr	r3, [r3, #4]
 8015f9c:	6053      	str	r3, [r2, #4]
 8015f9e:	4421      	add	r1, r4
 8015fa0:	6011      	str	r1, [r2, #0]
 8015fa2:	e7d7      	b.n	8015f54 <_free_r+0x28>
 8015fa4:	d902      	bls.n	8015fac <_free_r+0x80>
 8015fa6:	230c      	movs	r3, #12
 8015fa8:	6003      	str	r3, [r0, #0]
 8015faa:	e7d3      	b.n	8015f54 <_free_r+0x28>
 8015fac:	6825      	ldr	r5, [r4, #0]
 8015fae:	1961      	adds	r1, r4, r5
 8015fb0:	428b      	cmp	r3, r1
 8015fb2:	bf04      	itt	eq
 8015fb4:	6819      	ldreq	r1, [r3, #0]
 8015fb6:	685b      	ldreq	r3, [r3, #4]
 8015fb8:	6063      	str	r3, [r4, #4]
 8015fba:	bf04      	itt	eq
 8015fbc:	1949      	addeq	r1, r1, r5
 8015fbe:	6021      	streq	r1, [r4, #0]
 8015fc0:	6054      	str	r4, [r2, #4]
 8015fc2:	e7c7      	b.n	8015f54 <_free_r+0x28>
 8015fc4:	b003      	add	sp, #12
 8015fc6:	bd30      	pop	{r4, r5, pc}
 8015fc8:	20005758 	.word	0x20005758

08015fcc <_malloc_r>:
 8015fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fce:	1ccd      	adds	r5, r1, #3
 8015fd0:	f025 0503 	bic.w	r5, r5, #3
 8015fd4:	3508      	adds	r5, #8
 8015fd6:	2d0c      	cmp	r5, #12
 8015fd8:	bf38      	it	cc
 8015fda:	250c      	movcc	r5, #12
 8015fdc:	2d00      	cmp	r5, #0
 8015fde:	4606      	mov	r6, r0
 8015fe0:	db01      	blt.n	8015fe6 <_malloc_r+0x1a>
 8015fe2:	42a9      	cmp	r1, r5
 8015fe4:	d903      	bls.n	8015fee <_malloc_r+0x22>
 8015fe6:	230c      	movs	r3, #12
 8015fe8:	6033      	str	r3, [r6, #0]
 8015fea:	2000      	movs	r0, #0
 8015fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fee:	f000 f8cd 	bl	801618c <__malloc_lock>
 8015ff2:	4921      	ldr	r1, [pc, #132]	; (8016078 <_malloc_r+0xac>)
 8015ff4:	680a      	ldr	r2, [r1, #0]
 8015ff6:	4614      	mov	r4, r2
 8015ff8:	b99c      	cbnz	r4, 8016022 <_malloc_r+0x56>
 8015ffa:	4f20      	ldr	r7, [pc, #128]	; (801607c <_malloc_r+0xb0>)
 8015ffc:	683b      	ldr	r3, [r7, #0]
 8015ffe:	b923      	cbnz	r3, 801600a <_malloc_r+0x3e>
 8016000:	4621      	mov	r1, r4
 8016002:	4630      	mov	r0, r6
 8016004:	f000 f83c 	bl	8016080 <_sbrk_r>
 8016008:	6038      	str	r0, [r7, #0]
 801600a:	4629      	mov	r1, r5
 801600c:	4630      	mov	r0, r6
 801600e:	f000 f837 	bl	8016080 <_sbrk_r>
 8016012:	1c43      	adds	r3, r0, #1
 8016014:	d123      	bne.n	801605e <_malloc_r+0x92>
 8016016:	230c      	movs	r3, #12
 8016018:	6033      	str	r3, [r6, #0]
 801601a:	4630      	mov	r0, r6
 801601c:	f000 f8bc 	bl	8016198 <__malloc_unlock>
 8016020:	e7e3      	b.n	8015fea <_malloc_r+0x1e>
 8016022:	6823      	ldr	r3, [r4, #0]
 8016024:	1b5b      	subs	r3, r3, r5
 8016026:	d417      	bmi.n	8016058 <_malloc_r+0x8c>
 8016028:	2b0b      	cmp	r3, #11
 801602a:	d903      	bls.n	8016034 <_malloc_r+0x68>
 801602c:	6023      	str	r3, [r4, #0]
 801602e:	441c      	add	r4, r3
 8016030:	6025      	str	r5, [r4, #0]
 8016032:	e004      	b.n	801603e <_malloc_r+0x72>
 8016034:	6863      	ldr	r3, [r4, #4]
 8016036:	42a2      	cmp	r2, r4
 8016038:	bf0c      	ite	eq
 801603a:	600b      	streq	r3, [r1, #0]
 801603c:	6053      	strne	r3, [r2, #4]
 801603e:	4630      	mov	r0, r6
 8016040:	f000 f8aa 	bl	8016198 <__malloc_unlock>
 8016044:	f104 000b 	add.w	r0, r4, #11
 8016048:	1d23      	adds	r3, r4, #4
 801604a:	f020 0007 	bic.w	r0, r0, #7
 801604e:	1ac2      	subs	r2, r0, r3
 8016050:	d0cc      	beq.n	8015fec <_malloc_r+0x20>
 8016052:	1a1b      	subs	r3, r3, r0
 8016054:	50a3      	str	r3, [r4, r2]
 8016056:	e7c9      	b.n	8015fec <_malloc_r+0x20>
 8016058:	4622      	mov	r2, r4
 801605a:	6864      	ldr	r4, [r4, #4]
 801605c:	e7cc      	b.n	8015ff8 <_malloc_r+0x2c>
 801605e:	1cc4      	adds	r4, r0, #3
 8016060:	f024 0403 	bic.w	r4, r4, #3
 8016064:	42a0      	cmp	r0, r4
 8016066:	d0e3      	beq.n	8016030 <_malloc_r+0x64>
 8016068:	1a21      	subs	r1, r4, r0
 801606a:	4630      	mov	r0, r6
 801606c:	f000 f808 	bl	8016080 <_sbrk_r>
 8016070:	3001      	adds	r0, #1
 8016072:	d1dd      	bne.n	8016030 <_malloc_r+0x64>
 8016074:	e7cf      	b.n	8016016 <_malloc_r+0x4a>
 8016076:	bf00      	nop
 8016078:	20005758 	.word	0x20005758
 801607c:	2000575c 	.word	0x2000575c

08016080 <_sbrk_r>:
 8016080:	b538      	push	{r3, r4, r5, lr}
 8016082:	4d06      	ldr	r5, [pc, #24]	; (801609c <_sbrk_r+0x1c>)
 8016084:	2300      	movs	r3, #0
 8016086:	4604      	mov	r4, r0
 8016088:	4608      	mov	r0, r1
 801608a:	602b      	str	r3, [r5, #0]
 801608c:	f7ec fef2 	bl	8002e74 <_sbrk>
 8016090:	1c43      	adds	r3, r0, #1
 8016092:	d102      	bne.n	801609a <_sbrk_r+0x1a>
 8016094:	682b      	ldr	r3, [r5, #0]
 8016096:	b103      	cbz	r3, 801609a <_sbrk_r+0x1a>
 8016098:	6023      	str	r3, [r4, #0]
 801609a:	bd38      	pop	{r3, r4, r5, pc}
 801609c:	200060e4 	.word	0x200060e4

080160a0 <_raise_r>:
 80160a0:	291f      	cmp	r1, #31
 80160a2:	b538      	push	{r3, r4, r5, lr}
 80160a4:	4604      	mov	r4, r0
 80160a6:	460d      	mov	r5, r1
 80160a8:	d904      	bls.n	80160b4 <_raise_r+0x14>
 80160aa:	2316      	movs	r3, #22
 80160ac:	6003      	str	r3, [r0, #0]
 80160ae:	f04f 30ff 	mov.w	r0, #4294967295
 80160b2:	bd38      	pop	{r3, r4, r5, pc}
 80160b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80160b6:	b112      	cbz	r2, 80160be <_raise_r+0x1e>
 80160b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80160bc:	b94b      	cbnz	r3, 80160d2 <_raise_r+0x32>
 80160be:	4620      	mov	r0, r4
 80160c0:	f000 f830 	bl	8016124 <_getpid_r>
 80160c4:	462a      	mov	r2, r5
 80160c6:	4601      	mov	r1, r0
 80160c8:	4620      	mov	r0, r4
 80160ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80160ce:	f000 b817 	b.w	8016100 <_kill_r>
 80160d2:	2b01      	cmp	r3, #1
 80160d4:	d00a      	beq.n	80160ec <_raise_r+0x4c>
 80160d6:	1c59      	adds	r1, r3, #1
 80160d8:	d103      	bne.n	80160e2 <_raise_r+0x42>
 80160da:	2316      	movs	r3, #22
 80160dc:	6003      	str	r3, [r0, #0]
 80160de:	2001      	movs	r0, #1
 80160e0:	e7e7      	b.n	80160b2 <_raise_r+0x12>
 80160e2:	2400      	movs	r4, #0
 80160e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80160e8:	4628      	mov	r0, r5
 80160ea:	4798      	blx	r3
 80160ec:	2000      	movs	r0, #0
 80160ee:	e7e0      	b.n	80160b2 <_raise_r+0x12>

080160f0 <raise>:
 80160f0:	4b02      	ldr	r3, [pc, #8]	; (80160fc <raise+0xc>)
 80160f2:	4601      	mov	r1, r0
 80160f4:	6818      	ldr	r0, [r3, #0]
 80160f6:	f7ff bfd3 	b.w	80160a0 <_raise_r>
 80160fa:	bf00      	nop
 80160fc:	20000124 	.word	0x20000124

08016100 <_kill_r>:
 8016100:	b538      	push	{r3, r4, r5, lr}
 8016102:	4d07      	ldr	r5, [pc, #28]	; (8016120 <_kill_r+0x20>)
 8016104:	2300      	movs	r3, #0
 8016106:	4604      	mov	r4, r0
 8016108:	4608      	mov	r0, r1
 801610a:	4611      	mov	r1, r2
 801610c:	602b      	str	r3, [r5, #0]
 801610e:	f7ec fe97 	bl	8002e40 <_kill>
 8016112:	1c43      	adds	r3, r0, #1
 8016114:	d102      	bne.n	801611c <_kill_r+0x1c>
 8016116:	682b      	ldr	r3, [r5, #0]
 8016118:	b103      	cbz	r3, 801611c <_kill_r+0x1c>
 801611a:	6023      	str	r3, [r4, #0]
 801611c:	bd38      	pop	{r3, r4, r5, pc}
 801611e:	bf00      	nop
 8016120:	200060e4 	.word	0x200060e4

08016124 <_getpid_r>:
 8016124:	f7ec be84 	b.w	8002e30 <_getpid>

08016128 <siprintf>:
 8016128:	b40e      	push	{r1, r2, r3}
 801612a:	b500      	push	{lr}
 801612c:	b09c      	sub	sp, #112	; 0x70
 801612e:	ab1d      	add	r3, sp, #116	; 0x74
 8016130:	9002      	str	r0, [sp, #8]
 8016132:	9006      	str	r0, [sp, #24]
 8016134:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016138:	4809      	ldr	r0, [pc, #36]	; (8016160 <siprintf+0x38>)
 801613a:	9107      	str	r1, [sp, #28]
 801613c:	9104      	str	r1, [sp, #16]
 801613e:	4909      	ldr	r1, [pc, #36]	; (8016164 <siprintf+0x3c>)
 8016140:	f853 2b04 	ldr.w	r2, [r3], #4
 8016144:	9105      	str	r1, [sp, #20]
 8016146:	6800      	ldr	r0, [r0, #0]
 8016148:	9301      	str	r3, [sp, #4]
 801614a:	a902      	add	r1, sp, #8
 801614c:	f000 f8ac 	bl	80162a8 <_svfiprintf_r>
 8016150:	9b02      	ldr	r3, [sp, #8]
 8016152:	2200      	movs	r2, #0
 8016154:	701a      	strb	r2, [r3, #0]
 8016156:	b01c      	add	sp, #112	; 0x70
 8016158:	f85d eb04 	ldr.w	lr, [sp], #4
 801615c:	b003      	add	sp, #12
 801615e:	4770      	bx	lr
 8016160:	20000124 	.word	0x20000124
 8016164:	ffff0208 	.word	0xffff0208

08016168 <strncmp>:
 8016168:	b510      	push	{r4, lr}
 801616a:	b16a      	cbz	r2, 8016188 <strncmp+0x20>
 801616c:	3901      	subs	r1, #1
 801616e:	1884      	adds	r4, r0, r2
 8016170:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016174:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016178:	4293      	cmp	r3, r2
 801617a:	d103      	bne.n	8016184 <strncmp+0x1c>
 801617c:	42a0      	cmp	r0, r4
 801617e:	d001      	beq.n	8016184 <strncmp+0x1c>
 8016180:	2b00      	cmp	r3, #0
 8016182:	d1f5      	bne.n	8016170 <strncmp+0x8>
 8016184:	1a98      	subs	r0, r3, r2
 8016186:	bd10      	pop	{r4, pc}
 8016188:	4610      	mov	r0, r2
 801618a:	e7fc      	b.n	8016186 <strncmp+0x1e>

0801618c <__malloc_lock>:
 801618c:	4801      	ldr	r0, [pc, #4]	; (8016194 <__malloc_lock+0x8>)
 801618e:	f000 bb1f 	b.w	80167d0 <__retarget_lock_acquire_recursive>
 8016192:	bf00      	nop
 8016194:	200060ec 	.word	0x200060ec

08016198 <__malloc_unlock>:
 8016198:	4801      	ldr	r0, [pc, #4]	; (80161a0 <__malloc_unlock+0x8>)
 801619a:	f000 bb1a 	b.w	80167d2 <__retarget_lock_release_recursive>
 801619e:	bf00      	nop
 80161a0:	200060ec 	.word	0x200060ec

080161a4 <_realloc_r>:
 80161a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161a6:	4607      	mov	r7, r0
 80161a8:	4614      	mov	r4, r2
 80161aa:	460e      	mov	r6, r1
 80161ac:	b921      	cbnz	r1, 80161b8 <_realloc_r+0x14>
 80161ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80161b2:	4611      	mov	r1, r2
 80161b4:	f7ff bf0a 	b.w	8015fcc <_malloc_r>
 80161b8:	b922      	cbnz	r2, 80161c4 <_realloc_r+0x20>
 80161ba:	f7ff feb7 	bl	8015f2c <_free_r>
 80161be:	4625      	mov	r5, r4
 80161c0:	4628      	mov	r0, r5
 80161c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161c4:	f000 fb06 	bl	80167d4 <_malloc_usable_size_r>
 80161c8:	42a0      	cmp	r0, r4
 80161ca:	d20f      	bcs.n	80161ec <_realloc_r+0x48>
 80161cc:	4621      	mov	r1, r4
 80161ce:	4638      	mov	r0, r7
 80161d0:	f7ff fefc 	bl	8015fcc <_malloc_r>
 80161d4:	4605      	mov	r5, r0
 80161d6:	2800      	cmp	r0, #0
 80161d8:	d0f2      	beq.n	80161c0 <_realloc_r+0x1c>
 80161da:	4631      	mov	r1, r6
 80161dc:	4622      	mov	r2, r4
 80161de:	f7ff fe75 	bl	8015ecc <memcpy>
 80161e2:	4631      	mov	r1, r6
 80161e4:	4638      	mov	r0, r7
 80161e6:	f7ff fea1 	bl	8015f2c <_free_r>
 80161ea:	e7e9      	b.n	80161c0 <_realloc_r+0x1c>
 80161ec:	4635      	mov	r5, r6
 80161ee:	e7e7      	b.n	80161c0 <_realloc_r+0x1c>

080161f0 <__ssputs_r>:
 80161f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161f4:	688e      	ldr	r6, [r1, #8]
 80161f6:	429e      	cmp	r6, r3
 80161f8:	4682      	mov	sl, r0
 80161fa:	460c      	mov	r4, r1
 80161fc:	4690      	mov	r8, r2
 80161fe:	461f      	mov	r7, r3
 8016200:	d838      	bhi.n	8016274 <__ssputs_r+0x84>
 8016202:	898a      	ldrh	r2, [r1, #12]
 8016204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016208:	d032      	beq.n	8016270 <__ssputs_r+0x80>
 801620a:	6825      	ldr	r5, [r4, #0]
 801620c:	6909      	ldr	r1, [r1, #16]
 801620e:	eba5 0901 	sub.w	r9, r5, r1
 8016212:	6965      	ldr	r5, [r4, #20]
 8016214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016218:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801621c:	3301      	adds	r3, #1
 801621e:	444b      	add	r3, r9
 8016220:	106d      	asrs	r5, r5, #1
 8016222:	429d      	cmp	r5, r3
 8016224:	bf38      	it	cc
 8016226:	461d      	movcc	r5, r3
 8016228:	0553      	lsls	r3, r2, #21
 801622a:	d531      	bpl.n	8016290 <__ssputs_r+0xa0>
 801622c:	4629      	mov	r1, r5
 801622e:	f7ff fecd 	bl	8015fcc <_malloc_r>
 8016232:	4606      	mov	r6, r0
 8016234:	b950      	cbnz	r0, 801624c <__ssputs_r+0x5c>
 8016236:	230c      	movs	r3, #12
 8016238:	f8ca 3000 	str.w	r3, [sl]
 801623c:	89a3      	ldrh	r3, [r4, #12]
 801623e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016242:	81a3      	strh	r3, [r4, #12]
 8016244:	f04f 30ff 	mov.w	r0, #4294967295
 8016248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801624c:	6921      	ldr	r1, [r4, #16]
 801624e:	464a      	mov	r2, r9
 8016250:	f7ff fe3c 	bl	8015ecc <memcpy>
 8016254:	89a3      	ldrh	r3, [r4, #12]
 8016256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801625a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801625e:	81a3      	strh	r3, [r4, #12]
 8016260:	6126      	str	r6, [r4, #16]
 8016262:	6165      	str	r5, [r4, #20]
 8016264:	444e      	add	r6, r9
 8016266:	eba5 0509 	sub.w	r5, r5, r9
 801626a:	6026      	str	r6, [r4, #0]
 801626c:	60a5      	str	r5, [r4, #8]
 801626e:	463e      	mov	r6, r7
 8016270:	42be      	cmp	r6, r7
 8016272:	d900      	bls.n	8016276 <__ssputs_r+0x86>
 8016274:	463e      	mov	r6, r7
 8016276:	4632      	mov	r2, r6
 8016278:	6820      	ldr	r0, [r4, #0]
 801627a:	4641      	mov	r1, r8
 801627c:	f7ff fe34 	bl	8015ee8 <memmove>
 8016280:	68a3      	ldr	r3, [r4, #8]
 8016282:	6822      	ldr	r2, [r4, #0]
 8016284:	1b9b      	subs	r3, r3, r6
 8016286:	4432      	add	r2, r6
 8016288:	60a3      	str	r3, [r4, #8]
 801628a:	6022      	str	r2, [r4, #0]
 801628c:	2000      	movs	r0, #0
 801628e:	e7db      	b.n	8016248 <__ssputs_r+0x58>
 8016290:	462a      	mov	r2, r5
 8016292:	f7ff ff87 	bl	80161a4 <_realloc_r>
 8016296:	4606      	mov	r6, r0
 8016298:	2800      	cmp	r0, #0
 801629a:	d1e1      	bne.n	8016260 <__ssputs_r+0x70>
 801629c:	6921      	ldr	r1, [r4, #16]
 801629e:	4650      	mov	r0, sl
 80162a0:	f7ff fe44 	bl	8015f2c <_free_r>
 80162a4:	e7c7      	b.n	8016236 <__ssputs_r+0x46>
	...

080162a8 <_svfiprintf_r>:
 80162a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162ac:	4698      	mov	r8, r3
 80162ae:	898b      	ldrh	r3, [r1, #12]
 80162b0:	061b      	lsls	r3, r3, #24
 80162b2:	b09d      	sub	sp, #116	; 0x74
 80162b4:	4607      	mov	r7, r0
 80162b6:	460d      	mov	r5, r1
 80162b8:	4614      	mov	r4, r2
 80162ba:	d50e      	bpl.n	80162da <_svfiprintf_r+0x32>
 80162bc:	690b      	ldr	r3, [r1, #16]
 80162be:	b963      	cbnz	r3, 80162da <_svfiprintf_r+0x32>
 80162c0:	2140      	movs	r1, #64	; 0x40
 80162c2:	f7ff fe83 	bl	8015fcc <_malloc_r>
 80162c6:	6028      	str	r0, [r5, #0]
 80162c8:	6128      	str	r0, [r5, #16]
 80162ca:	b920      	cbnz	r0, 80162d6 <_svfiprintf_r+0x2e>
 80162cc:	230c      	movs	r3, #12
 80162ce:	603b      	str	r3, [r7, #0]
 80162d0:	f04f 30ff 	mov.w	r0, #4294967295
 80162d4:	e0d1      	b.n	801647a <_svfiprintf_r+0x1d2>
 80162d6:	2340      	movs	r3, #64	; 0x40
 80162d8:	616b      	str	r3, [r5, #20]
 80162da:	2300      	movs	r3, #0
 80162dc:	9309      	str	r3, [sp, #36]	; 0x24
 80162de:	2320      	movs	r3, #32
 80162e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80162e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80162e8:	2330      	movs	r3, #48	; 0x30
 80162ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016494 <_svfiprintf_r+0x1ec>
 80162ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80162f2:	f04f 0901 	mov.w	r9, #1
 80162f6:	4623      	mov	r3, r4
 80162f8:	469a      	mov	sl, r3
 80162fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162fe:	b10a      	cbz	r2, 8016304 <_svfiprintf_r+0x5c>
 8016300:	2a25      	cmp	r2, #37	; 0x25
 8016302:	d1f9      	bne.n	80162f8 <_svfiprintf_r+0x50>
 8016304:	ebba 0b04 	subs.w	fp, sl, r4
 8016308:	d00b      	beq.n	8016322 <_svfiprintf_r+0x7a>
 801630a:	465b      	mov	r3, fp
 801630c:	4622      	mov	r2, r4
 801630e:	4629      	mov	r1, r5
 8016310:	4638      	mov	r0, r7
 8016312:	f7ff ff6d 	bl	80161f0 <__ssputs_r>
 8016316:	3001      	adds	r0, #1
 8016318:	f000 80aa 	beq.w	8016470 <_svfiprintf_r+0x1c8>
 801631c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801631e:	445a      	add	r2, fp
 8016320:	9209      	str	r2, [sp, #36]	; 0x24
 8016322:	f89a 3000 	ldrb.w	r3, [sl]
 8016326:	2b00      	cmp	r3, #0
 8016328:	f000 80a2 	beq.w	8016470 <_svfiprintf_r+0x1c8>
 801632c:	2300      	movs	r3, #0
 801632e:	f04f 32ff 	mov.w	r2, #4294967295
 8016332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016336:	f10a 0a01 	add.w	sl, sl, #1
 801633a:	9304      	str	r3, [sp, #16]
 801633c:	9307      	str	r3, [sp, #28]
 801633e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016342:	931a      	str	r3, [sp, #104]	; 0x68
 8016344:	4654      	mov	r4, sl
 8016346:	2205      	movs	r2, #5
 8016348:	f814 1b01 	ldrb.w	r1, [r4], #1
 801634c:	4851      	ldr	r0, [pc, #324]	; (8016494 <_svfiprintf_r+0x1ec>)
 801634e:	f7e9 ff67 	bl	8000220 <memchr>
 8016352:	9a04      	ldr	r2, [sp, #16]
 8016354:	b9d8      	cbnz	r0, 801638e <_svfiprintf_r+0xe6>
 8016356:	06d0      	lsls	r0, r2, #27
 8016358:	bf44      	itt	mi
 801635a:	2320      	movmi	r3, #32
 801635c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016360:	0711      	lsls	r1, r2, #28
 8016362:	bf44      	itt	mi
 8016364:	232b      	movmi	r3, #43	; 0x2b
 8016366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801636a:	f89a 3000 	ldrb.w	r3, [sl]
 801636e:	2b2a      	cmp	r3, #42	; 0x2a
 8016370:	d015      	beq.n	801639e <_svfiprintf_r+0xf6>
 8016372:	9a07      	ldr	r2, [sp, #28]
 8016374:	4654      	mov	r4, sl
 8016376:	2000      	movs	r0, #0
 8016378:	f04f 0c0a 	mov.w	ip, #10
 801637c:	4621      	mov	r1, r4
 801637e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016382:	3b30      	subs	r3, #48	; 0x30
 8016384:	2b09      	cmp	r3, #9
 8016386:	d94e      	bls.n	8016426 <_svfiprintf_r+0x17e>
 8016388:	b1b0      	cbz	r0, 80163b8 <_svfiprintf_r+0x110>
 801638a:	9207      	str	r2, [sp, #28]
 801638c:	e014      	b.n	80163b8 <_svfiprintf_r+0x110>
 801638e:	eba0 0308 	sub.w	r3, r0, r8
 8016392:	fa09 f303 	lsl.w	r3, r9, r3
 8016396:	4313      	orrs	r3, r2
 8016398:	9304      	str	r3, [sp, #16]
 801639a:	46a2      	mov	sl, r4
 801639c:	e7d2      	b.n	8016344 <_svfiprintf_r+0x9c>
 801639e:	9b03      	ldr	r3, [sp, #12]
 80163a0:	1d19      	adds	r1, r3, #4
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	9103      	str	r1, [sp, #12]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	bfbb      	ittet	lt
 80163aa:	425b      	neglt	r3, r3
 80163ac:	f042 0202 	orrlt.w	r2, r2, #2
 80163b0:	9307      	strge	r3, [sp, #28]
 80163b2:	9307      	strlt	r3, [sp, #28]
 80163b4:	bfb8      	it	lt
 80163b6:	9204      	strlt	r2, [sp, #16]
 80163b8:	7823      	ldrb	r3, [r4, #0]
 80163ba:	2b2e      	cmp	r3, #46	; 0x2e
 80163bc:	d10c      	bne.n	80163d8 <_svfiprintf_r+0x130>
 80163be:	7863      	ldrb	r3, [r4, #1]
 80163c0:	2b2a      	cmp	r3, #42	; 0x2a
 80163c2:	d135      	bne.n	8016430 <_svfiprintf_r+0x188>
 80163c4:	9b03      	ldr	r3, [sp, #12]
 80163c6:	1d1a      	adds	r2, r3, #4
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	9203      	str	r2, [sp, #12]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	bfb8      	it	lt
 80163d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80163d4:	3402      	adds	r4, #2
 80163d6:	9305      	str	r3, [sp, #20]
 80163d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80164a4 <_svfiprintf_r+0x1fc>
 80163dc:	7821      	ldrb	r1, [r4, #0]
 80163de:	2203      	movs	r2, #3
 80163e0:	4650      	mov	r0, sl
 80163e2:	f7e9 ff1d 	bl	8000220 <memchr>
 80163e6:	b140      	cbz	r0, 80163fa <_svfiprintf_r+0x152>
 80163e8:	2340      	movs	r3, #64	; 0x40
 80163ea:	eba0 000a 	sub.w	r0, r0, sl
 80163ee:	fa03 f000 	lsl.w	r0, r3, r0
 80163f2:	9b04      	ldr	r3, [sp, #16]
 80163f4:	4303      	orrs	r3, r0
 80163f6:	3401      	adds	r4, #1
 80163f8:	9304      	str	r3, [sp, #16]
 80163fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163fe:	4826      	ldr	r0, [pc, #152]	; (8016498 <_svfiprintf_r+0x1f0>)
 8016400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016404:	2206      	movs	r2, #6
 8016406:	f7e9 ff0b 	bl	8000220 <memchr>
 801640a:	2800      	cmp	r0, #0
 801640c:	d038      	beq.n	8016480 <_svfiprintf_r+0x1d8>
 801640e:	4b23      	ldr	r3, [pc, #140]	; (801649c <_svfiprintf_r+0x1f4>)
 8016410:	bb1b      	cbnz	r3, 801645a <_svfiprintf_r+0x1b2>
 8016412:	9b03      	ldr	r3, [sp, #12]
 8016414:	3307      	adds	r3, #7
 8016416:	f023 0307 	bic.w	r3, r3, #7
 801641a:	3308      	adds	r3, #8
 801641c:	9303      	str	r3, [sp, #12]
 801641e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016420:	4433      	add	r3, r6
 8016422:	9309      	str	r3, [sp, #36]	; 0x24
 8016424:	e767      	b.n	80162f6 <_svfiprintf_r+0x4e>
 8016426:	fb0c 3202 	mla	r2, ip, r2, r3
 801642a:	460c      	mov	r4, r1
 801642c:	2001      	movs	r0, #1
 801642e:	e7a5      	b.n	801637c <_svfiprintf_r+0xd4>
 8016430:	2300      	movs	r3, #0
 8016432:	3401      	adds	r4, #1
 8016434:	9305      	str	r3, [sp, #20]
 8016436:	4619      	mov	r1, r3
 8016438:	f04f 0c0a 	mov.w	ip, #10
 801643c:	4620      	mov	r0, r4
 801643e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016442:	3a30      	subs	r2, #48	; 0x30
 8016444:	2a09      	cmp	r2, #9
 8016446:	d903      	bls.n	8016450 <_svfiprintf_r+0x1a8>
 8016448:	2b00      	cmp	r3, #0
 801644a:	d0c5      	beq.n	80163d8 <_svfiprintf_r+0x130>
 801644c:	9105      	str	r1, [sp, #20]
 801644e:	e7c3      	b.n	80163d8 <_svfiprintf_r+0x130>
 8016450:	fb0c 2101 	mla	r1, ip, r1, r2
 8016454:	4604      	mov	r4, r0
 8016456:	2301      	movs	r3, #1
 8016458:	e7f0      	b.n	801643c <_svfiprintf_r+0x194>
 801645a:	ab03      	add	r3, sp, #12
 801645c:	9300      	str	r3, [sp, #0]
 801645e:	462a      	mov	r2, r5
 8016460:	4b0f      	ldr	r3, [pc, #60]	; (80164a0 <_svfiprintf_r+0x1f8>)
 8016462:	a904      	add	r1, sp, #16
 8016464:	4638      	mov	r0, r7
 8016466:	f3af 8000 	nop.w
 801646a:	1c42      	adds	r2, r0, #1
 801646c:	4606      	mov	r6, r0
 801646e:	d1d6      	bne.n	801641e <_svfiprintf_r+0x176>
 8016470:	89ab      	ldrh	r3, [r5, #12]
 8016472:	065b      	lsls	r3, r3, #25
 8016474:	f53f af2c 	bmi.w	80162d0 <_svfiprintf_r+0x28>
 8016478:	9809      	ldr	r0, [sp, #36]	; 0x24
 801647a:	b01d      	add	sp, #116	; 0x74
 801647c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016480:	ab03      	add	r3, sp, #12
 8016482:	9300      	str	r3, [sp, #0]
 8016484:	462a      	mov	r2, r5
 8016486:	4b06      	ldr	r3, [pc, #24]	; (80164a0 <_svfiprintf_r+0x1f8>)
 8016488:	a904      	add	r1, sp, #16
 801648a:	4638      	mov	r0, r7
 801648c:	f000 f87a 	bl	8016584 <_printf_i>
 8016490:	e7eb      	b.n	801646a <_svfiprintf_r+0x1c2>
 8016492:	bf00      	nop
 8016494:	0801895c 	.word	0x0801895c
 8016498:	08018966 	.word	0x08018966
 801649c:	00000000 	.word	0x00000000
 80164a0:	080161f1 	.word	0x080161f1
 80164a4:	08018962 	.word	0x08018962

080164a8 <_printf_common>:
 80164a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164ac:	4616      	mov	r6, r2
 80164ae:	4699      	mov	r9, r3
 80164b0:	688a      	ldr	r2, [r1, #8]
 80164b2:	690b      	ldr	r3, [r1, #16]
 80164b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80164b8:	4293      	cmp	r3, r2
 80164ba:	bfb8      	it	lt
 80164bc:	4613      	movlt	r3, r2
 80164be:	6033      	str	r3, [r6, #0]
 80164c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80164c4:	4607      	mov	r7, r0
 80164c6:	460c      	mov	r4, r1
 80164c8:	b10a      	cbz	r2, 80164ce <_printf_common+0x26>
 80164ca:	3301      	adds	r3, #1
 80164cc:	6033      	str	r3, [r6, #0]
 80164ce:	6823      	ldr	r3, [r4, #0]
 80164d0:	0699      	lsls	r1, r3, #26
 80164d2:	bf42      	ittt	mi
 80164d4:	6833      	ldrmi	r3, [r6, #0]
 80164d6:	3302      	addmi	r3, #2
 80164d8:	6033      	strmi	r3, [r6, #0]
 80164da:	6825      	ldr	r5, [r4, #0]
 80164dc:	f015 0506 	ands.w	r5, r5, #6
 80164e0:	d106      	bne.n	80164f0 <_printf_common+0x48>
 80164e2:	f104 0a19 	add.w	sl, r4, #25
 80164e6:	68e3      	ldr	r3, [r4, #12]
 80164e8:	6832      	ldr	r2, [r6, #0]
 80164ea:	1a9b      	subs	r3, r3, r2
 80164ec:	42ab      	cmp	r3, r5
 80164ee:	dc26      	bgt.n	801653e <_printf_common+0x96>
 80164f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80164f4:	1e13      	subs	r3, r2, #0
 80164f6:	6822      	ldr	r2, [r4, #0]
 80164f8:	bf18      	it	ne
 80164fa:	2301      	movne	r3, #1
 80164fc:	0692      	lsls	r2, r2, #26
 80164fe:	d42b      	bmi.n	8016558 <_printf_common+0xb0>
 8016500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016504:	4649      	mov	r1, r9
 8016506:	4638      	mov	r0, r7
 8016508:	47c0      	blx	r8
 801650a:	3001      	adds	r0, #1
 801650c:	d01e      	beq.n	801654c <_printf_common+0xa4>
 801650e:	6823      	ldr	r3, [r4, #0]
 8016510:	68e5      	ldr	r5, [r4, #12]
 8016512:	6832      	ldr	r2, [r6, #0]
 8016514:	f003 0306 	and.w	r3, r3, #6
 8016518:	2b04      	cmp	r3, #4
 801651a:	bf08      	it	eq
 801651c:	1aad      	subeq	r5, r5, r2
 801651e:	68a3      	ldr	r3, [r4, #8]
 8016520:	6922      	ldr	r2, [r4, #16]
 8016522:	bf0c      	ite	eq
 8016524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016528:	2500      	movne	r5, #0
 801652a:	4293      	cmp	r3, r2
 801652c:	bfc4      	itt	gt
 801652e:	1a9b      	subgt	r3, r3, r2
 8016530:	18ed      	addgt	r5, r5, r3
 8016532:	2600      	movs	r6, #0
 8016534:	341a      	adds	r4, #26
 8016536:	42b5      	cmp	r5, r6
 8016538:	d11a      	bne.n	8016570 <_printf_common+0xc8>
 801653a:	2000      	movs	r0, #0
 801653c:	e008      	b.n	8016550 <_printf_common+0xa8>
 801653e:	2301      	movs	r3, #1
 8016540:	4652      	mov	r2, sl
 8016542:	4649      	mov	r1, r9
 8016544:	4638      	mov	r0, r7
 8016546:	47c0      	blx	r8
 8016548:	3001      	adds	r0, #1
 801654a:	d103      	bne.n	8016554 <_printf_common+0xac>
 801654c:	f04f 30ff 	mov.w	r0, #4294967295
 8016550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016554:	3501      	adds	r5, #1
 8016556:	e7c6      	b.n	80164e6 <_printf_common+0x3e>
 8016558:	18e1      	adds	r1, r4, r3
 801655a:	1c5a      	adds	r2, r3, #1
 801655c:	2030      	movs	r0, #48	; 0x30
 801655e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016562:	4422      	add	r2, r4
 8016564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801656c:	3302      	adds	r3, #2
 801656e:	e7c7      	b.n	8016500 <_printf_common+0x58>
 8016570:	2301      	movs	r3, #1
 8016572:	4622      	mov	r2, r4
 8016574:	4649      	mov	r1, r9
 8016576:	4638      	mov	r0, r7
 8016578:	47c0      	blx	r8
 801657a:	3001      	adds	r0, #1
 801657c:	d0e6      	beq.n	801654c <_printf_common+0xa4>
 801657e:	3601      	adds	r6, #1
 8016580:	e7d9      	b.n	8016536 <_printf_common+0x8e>
	...

08016584 <_printf_i>:
 8016584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016588:	460c      	mov	r4, r1
 801658a:	4691      	mov	r9, r2
 801658c:	7e27      	ldrb	r7, [r4, #24]
 801658e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016590:	2f78      	cmp	r7, #120	; 0x78
 8016592:	4680      	mov	r8, r0
 8016594:	469a      	mov	sl, r3
 8016596:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801659a:	d807      	bhi.n	80165ac <_printf_i+0x28>
 801659c:	2f62      	cmp	r7, #98	; 0x62
 801659e:	d80a      	bhi.n	80165b6 <_printf_i+0x32>
 80165a0:	2f00      	cmp	r7, #0
 80165a2:	f000 80d8 	beq.w	8016756 <_printf_i+0x1d2>
 80165a6:	2f58      	cmp	r7, #88	; 0x58
 80165a8:	f000 80a3 	beq.w	80166f2 <_printf_i+0x16e>
 80165ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80165b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80165b4:	e03a      	b.n	801662c <_printf_i+0xa8>
 80165b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80165ba:	2b15      	cmp	r3, #21
 80165bc:	d8f6      	bhi.n	80165ac <_printf_i+0x28>
 80165be:	a001      	add	r0, pc, #4	; (adr r0, 80165c4 <_printf_i+0x40>)
 80165c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80165c4:	0801661d 	.word	0x0801661d
 80165c8:	08016631 	.word	0x08016631
 80165cc:	080165ad 	.word	0x080165ad
 80165d0:	080165ad 	.word	0x080165ad
 80165d4:	080165ad 	.word	0x080165ad
 80165d8:	080165ad 	.word	0x080165ad
 80165dc:	08016631 	.word	0x08016631
 80165e0:	080165ad 	.word	0x080165ad
 80165e4:	080165ad 	.word	0x080165ad
 80165e8:	080165ad 	.word	0x080165ad
 80165ec:	080165ad 	.word	0x080165ad
 80165f0:	0801673d 	.word	0x0801673d
 80165f4:	08016661 	.word	0x08016661
 80165f8:	0801671f 	.word	0x0801671f
 80165fc:	080165ad 	.word	0x080165ad
 8016600:	080165ad 	.word	0x080165ad
 8016604:	0801675f 	.word	0x0801675f
 8016608:	080165ad 	.word	0x080165ad
 801660c:	08016661 	.word	0x08016661
 8016610:	080165ad 	.word	0x080165ad
 8016614:	080165ad 	.word	0x080165ad
 8016618:	08016727 	.word	0x08016727
 801661c:	680b      	ldr	r3, [r1, #0]
 801661e:	1d1a      	adds	r2, r3, #4
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	600a      	str	r2, [r1, #0]
 8016624:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801662c:	2301      	movs	r3, #1
 801662e:	e0a3      	b.n	8016778 <_printf_i+0x1f4>
 8016630:	6825      	ldr	r5, [r4, #0]
 8016632:	6808      	ldr	r0, [r1, #0]
 8016634:	062e      	lsls	r6, r5, #24
 8016636:	f100 0304 	add.w	r3, r0, #4
 801663a:	d50a      	bpl.n	8016652 <_printf_i+0xce>
 801663c:	6805      	ldr	r5, [r0, #0]
 801663e:	600b      	str	r3, [r1, #0]
 8016640:	2d00      	cmp	r5, #0
 8016642:	da03      	bge.n	801664c <_printf_i+0xc8>
 8016644:	232d      	movs	r3, #45	; 0x2d
 8016646:	426d      	negs	r5, r5
 8016648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801664c:	485e      	ldr	r0, [pc, #376]	; (80167c8 <_printf_i+0x244>)
 801664e:	230a      	movs	r3, #10
 8016650:	e019      	b.n	8016686 <_printf_i+0x102>
 8016652:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016656:	6805      	ldr	r5, [r0, #0]
 8016658:	600b      	str	r3, [r1, #0]
 801665a:	bf18      	it	ne
 801665c:	b22d      	sxthne	r5, r5
 801665e:	e7ef      	b.n	8016640 <_printf_i+0xbc>
 8016660:	680b      	ldr	r3, [r1, #0]
 8016662:	6825      	ldr	r5, [r4, #0]
 8016664:	1d18      	adds	r0, r3, #4
 8016666:	6008      	str	r0, [r1, #0]
 8016668:	0628      	lsls	r0, r5, #24
 801666a:	d501      	bpl.n	8016670 <_printf_i+0xec>
 801666c:	681d      	ldr	r5, [r3, #0]
 801666e:	e002      	b.n	8016676 <_printf_i+0xf2>
 8016670:	0669      	lsls	r1, r5, #25
 8016672:	d5fb      	bpl.n	801666c <_printf_i+0xe8>
 8016674:	881d      	ldrh	r5, [r3, #0]
 8016676:	4854      	ldr	r0, [pc, #336]	; (80167c8 <_printf_i+0x244>)
 8016678:	2f6f      	cmp	r7, #111	; 0x6f
 801667a:	bf0c      	ite	eq
 801667c:	2308      	moveq	r3, #8
 801667e:	230a      	movne	r3, #10
 8016680:	2100      	movs	r1, #0
 8016682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016686:	6866      	ldr	r6, [r4, #4]
 8016688:	60a6      	str	r6, [r4, #8]
 801668a:	2e00      	cmp	r6, #0
 801668c:	bfa2      	ittt	ge
 801668e:	6821      	ldrge	r1, [r4, #0]
 8016690:	f021 0104 	bicge.w	r1, r1, #4
 8016694:	6021      	strge	r1, [r4, #0]
 8016696:	b90d      	cbnz	r5, 801669c <_printf_i+0x118>
 8016698:	2e00      	cmp	r6, #0
 801669a:	d04d      	beq.n	8016738 <_printf_i+0x1b4>
 801669c:	4616      	mov	r6, r2
 801669e:	fbb5 f1f3 	udiv	r1, r5, r3
 80166a2:	fb03 5711 	mls	r7, r3, r1, r5
 80166a6:	5dc7      	ldrb	r7, [r0, r7]
 80166a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80166ac:	462f      	mov	r7, r5
 80166ae:	42bb      	cmp	r3, r7
 80166b0:	460d      	mov	r5, r1
 80166b2:	d9f4      	bls.n	801669e <_printf_i+0x11a>
 80166b4:	2b08      	cmp	r3, #8
 80166b6:	d10b      	bne.n	80166d0 <_printf_i+0x14c>
 80166b8:	6823      	ldr	r3, [r4, #0]
 80166ba:	07df      	lsls	r7, r3, #31
 80166bc:	d508      	bpl.n	80166d0 <_printf_i+0x14c>
 80166be:	6923      	ldr	r3, [r4, #16]
 80166c0:	6861      	ldr	r1, [r4, #4]
 80166c2:	4299      	cmp	r1, r3
 80166c4:	bfde      	ittt	le
 80166c6:	2330      	movle	r3, #48	; 0x30
 80166c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80166cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80166d0:	1b92      	subs	r2, r2, r6
 80166d2:	6122      	str	r2, [r4, #16]
 80166d4:	f8cd a000 	str.w	sl, [sp]
 80166d8:	464b      	mov	r3, r9
 80166da:	aa03      	add	r2, sp, #12
 80166dc:	4621      	mov	r1, r4
 80166de:	4640      	mov	r0, r8
 80166e0:	f7ff fee2 	bl	80164a8 <_printf_common>
 80166e4:	3001      	adds	r0, #1
 80166e6:	d14c      	bne.n	8016782 <_printf_i+0x1fe>
 80166e8:	f04f 30ff 	mov.w	r0, #4294967295
 80166ec:	b004      	add	sp, #16
 80166ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166f2:	4835      	ldr	r0, [pc, #212]	; (80167c8 <_printf_i+0x244>)
 80166f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80166f8:	6823      	ldr	r3, [r4, #0]
 80166fa:	680e      	ldr	r6, [r1, #0]
 80166fc:	061f      	lsls	r7, r3, #24
 80166fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8016702:	600e      	str	r6, [r1, #0]
 8016704:	d514      	bpl.n	8016730 <_printf_i+0x1ac>
 8016706:	07d9      	lsls	r1, r3, #31
 8016708:	bf44      	itt	mi
 801670a:	f043 0320 	orrmi.w	r3, r3, #32
 801670e:	6023      	strmi	r3, [r4, #0]
 8016710:	b91d      	cbnz	r5, 801671a <_printf_i+0x196>
 8016712:	6823      	ldr	r3, [r4, #0]
 8016714:	f023 0320 	bic.w	r3, r3, #32
 8016718:	6023      	str	r3, [r4, #0]
 801671a:	2310      	movs	r3, #16
 801671c:	e7b0      	b.n	8016680 <_printf_i+0xfc>
 801671e:	6823      	ldr	r3, [r4, #0]
 8016720:	f043 0320 	orr.w	r3, r3, #32
 8016724:	6023      	str	r3, [r4, #0]
 8016726:	2378      	movs	r3, #120	; 0x78
 8016728:	4828      	ldr	r0, [pc, #160]	; (80167cc <_printf_i+0x248>)
 801672a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801672e:	e7e3      	b.n	80166f8 <_printf_i+0x174>
 8016730:	065e      	lsls	r6, r3, #25
 8016732:	bf48      	it	mi
 8016734:	b2ad      	uxthmi	r5, r5
 8016736:	e7e6      	b.n	8016706 <_printf_i+0x182>
 8016738:	4616      	mov	r6, r2
 801673a:	e7bb      	b.n	80166b4 <_printf_i+0x130>
 801673c:	680b      	ldr	r3, [r1, #0]
 801673e:	6826      	ldr	r6, [r4, #0]
 8016740:	6960      	ldr	r0, [r4, #20]
 8016742:	1d1d      	adds	r5, r3, #4
 8016744:	600d      	str	r5, [r1, #0]
 8016746:	0635      	lsls	r5, r6, #24
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	d501      	bpl.n	8016750 <_printf_i+0x1cc>
 801674c:	6018      	str	r0, [r3, #0]
 801674e:	e002      	b.n	8016756 <_printf_i+0x1d2>
 8016750:	0671      	lsls	r1, r6, #25
 8016752:	d5fb      	bpl.n	801674c <_printf_i+0x1c8>
 8016754:	8018      	strh	r0, [r3, #0]
 8016756:	2300      	movs	r3, #0
 8016758:	6123      	str	r3, [r4, #16]
 801675a:	4616      	mov	r6, r2
 801675c:	e7ba      	b.n	80166d4 <_printf_i+0x150>
 801675e:	680b      	ldr	r3, [r1, #0]
 8016760:	1d1a      	adds	r2, r3, #4
 8016762:	600a      	str	r2, [r1, #0]
 8016764:	681e      	ldr	r6, [r3, #0]
 8016766:	6862      	ldr	r2, [r4, #4]
 8016768:	2100      	movs	r1, #0
 801676a:	4630      	mov	r0, r6
 801676c:	f7e9 fd58 	bl	8000220 <memchr>
 8016770:	b108      	cbz	r0, 8016776 <_printf_i+0x1f2>
 8016772:	1b80      	subs	r0, r0, r6
 8016774:	6060      	str	r0, [r4, #4]
 8016776:	6863      	ldr	r3, [r4, #4]
 8016778:	6123      	str	r3, [r4, #16]
 801677a:	2300      	movs	r3, #0
 801677c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016780:	e7a8      	b.n	80166d4 <_printf_i+0x150>
 8016782:	6923      	ldr	r3, [r4, #16]
 8016784:	4632      	mov	r2, r6
 8016786:	4649      	mov	r1, r9
 8016788:	4640      	mov	r0, r8
 801678a:	47d0      	blx	sl
 801678c:	3001      	adds	r0, #1
 801678e:	d0ab      	beq.n	80166e8 <_printf_i+0x164>
 8016790:	6823      	ldr	r3, [r4, #0]
 8016792:	079b      	lsls	r3, r3, #30
 8016794:	d413      	bmi.n	80167be <_printf_i+0x23a>
 8016796:	68e0      	ldr	r0, [r4, #12]
 8016798:	9b03      	ldr	r3, [sp, #12]
 801679a:	4298      	cmp	r0, r3
 801679c:	bfb8      	it	lt
 801679e:	4618      	movlt	r0, r3
 80167a0:	e7a4      	b.n	80166ec <_printf_i+0x168>
 80167a2:	2301      	movs	r3, #1
 80167a4:	4632      	mov	r2, r6
 80167a6:	4649      	mov	r1, r9
 80167a8:	4640      	mov	r0, r8
 80167aa:	47d0      	blx	sl
 80167ac:	3001      	adds	r0, #1
 80167ae:	d09b      	beq.n	80166e8 <_printf_i+0x164>
 80167b0:	3501      	adds	r5, #1
 80167b2:	68e3      	ldr	r3, [r4, #12]
 80167b4:	9903      	ldr	r1, [sp, #12]
 80167b6:	1a5b      	subs	r3, r3, r1
 80167b8:	42ab      	cmp	r3, r5
 80167ba:	dcf2      	bgt.n	80167a2 <_printf_i+0x21e>
 80167bc:	e7eb      	b.n	8016796 <_printf_i+0x212>
 80167be:	2500      	movs	r5, #0
 80167c0:	f104 0619 	add.w	r6, r4, #25
 80167c4:	e7f5      	b.n	80167b2 <_printf_i+0x22e>
 80167c6:	bf00      	nop
 80167c8:	0801896d 	.word	0x0801896d
 80167cc:	0801897e 	.word	0x0801897e

080167d0 <__retarget_lock_acquire_recursive>:
 80167d0:	4770      	bx	lr

080167d2 <__retarget_lock_release_recursive>:
 80167d2:	4770      	bx	lr

080167d4 <_malloc_usable_size_r>:
 80167d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80167d8:	1f18      	subs	r0, r3, #4
 80167da:	2b00      	cmp	r3, #0
 80167dc:	bfbc      	itt	lt
 80167de:	580b      	ldrlt	r3, [r1, r0]
 80167e0:	18c0      	addlt	r0, r0, r3
 80167e2:	4770      	bx	lr

080167e4 <_init>:
 80167e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167e6:	bf00      	nop
 80167e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167ea:	bc08      	pop	{r3}
 80167ec:	469e      	mov	lr, r3
 80167ee:	4770      	bx	lr

080167f0 <_fini>:
 80167f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167f2:	bf00      	nop
 80167f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167f6:	bc08      	pop	{r3}
 80167f8:	469e      	mov	lr, r3
 80167fa:	4770      	bx	lr
