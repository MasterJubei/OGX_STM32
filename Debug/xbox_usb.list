
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013648  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001238  08013818  08013818  00023818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a50  08014a50  000301b0  2**0
                  CONTENTS
  4 .ARM          00000008  08014a50  08014a50  00024a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014a58  08014a58  000301b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014a58  08014a58  00024a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014a60  08014a60  00024a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08014a64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bc4  200001b0  08014c14  000301b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005d74  08014c14  00035d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00061dd6  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008dca  00000000  00000000  00091fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028e8  00000000  00000000  0009ad80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002720  00000000  00000000  0009d668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d192  00000000  00000000  0009fd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031725  00000000  00000000  000ccf1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8736  00000000  00000000  000fe63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f6d75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b2a8  00000000  00000000  001f6dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b0 	.word	0x200001b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013800 	.word	0x08013800

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b4 	.word	0x200001b4
 800020c:	08013800 	.word	0x08013800

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	460b      	mov	r3, r1
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
 8000606:	7afb      	ldrb	r3, [r7, #11]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4619      	mov	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f000 f856 	bl	80006be <_ZN5Print5printEmi>
 8000612:	4603      	mov	r3, r0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f000 f805 	bl	800063c <_ZN5Print5printEli>
 8000632:	4603      	mov	r3, r0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <_ZN5Print5printEli+0x26>
    return write(n);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	4611      	mov	r1, r2
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	4798      	blx	r3
 800065e:	4603      	mov	r3, r0
 8000660:	e029      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0a      	cmp	r3, #10
 8000666:	d11d      	bne.n	80006a4 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	2b00      	cmp	r3, #0
 800066c:	da12      	bge.n	8000694 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800066e:	212d      	movs	r1, #45	; 0x2d
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffaf 	bl	80005d4 <_ZN5Print5printEc>
 8000676:	4603      	mov	r3, r0
 8000678:	617b      	str	r3, [r7, #20]
      n = -n;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	425b      	negs	r3, r3
 800067e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	220a      	movs	r2, #10
 8000684:	4619      	mov	r1, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f000 f839 	bl	80006fe <_ZN5Print11printNumberEmh>
 800068c:	4602      	mov	r2, r0
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	4413      	add	r3, r2
 8000692:	e010      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	220a      	movs	r2, #10
 8000698:	4619      	mov	r1, r3
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f000 f82f 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006a0:	4603      	mov	r3, r0
 80006a2:	e008      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	4619      	mov	r1, r3
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f826 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006b2:	4603      	mov	r3, r0
 80006b4:	bf00      	nop
  }
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b084      	sub	sp, #16
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d109      	bne.n	80006e4 <_ZN5Print5printEmi+0x26>
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	4611      	mov	r1, r2
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	4798      	blx	r3
 80006e0:	4603      	mov	r3, r0
 80006e2:	e008      	b.n	80006f6 <_ZN5Print5printEmi+0x38>
  else return printNumber(n, base);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	68b9      	ldr	r1, [r7, #8]
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f000 f806 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006f2:	4603      	mov	r3, r0
 80006f4:	bf00      	nop
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80006fe:	b580      	push	{r7, lr}
 8000700:	b090      	sub	sp, #64	; 0x40
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	4613      	mov	r3, r2
 800070a:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	3320      	adds	r3, #32
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 8000714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d801      	bhi.n	8000724 <_ZN5Print11printNumberEmh+0x26>
 8000720:	230a      	movs	r3, #10
 8000722:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000730:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 8000732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000734:	b2da      	uxtb	r2, r3
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	79f9      	ldrb	r1, [r7, #7]
 800073c:	fb11 f303 	smulbb	r3, r1, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800074c:	2b09      	cmp	r3, #9
 800074e:	d804      	bhi.n	800075a <_ZN5Print11printNumberEmh+0x5c>
 8000750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000754:	3330      	adds	r3, #48	; 0x30
 8000756:	b2db      	uxtb	r3, r3
 8000758:	e003      	b.n	8000762 <_ZN5Print11printNumberEmh+0x64>
 800075a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800075e:	3337      	adds	r3, #55	; 0x37
 8000760:	b2db      	uxtb	r3, r3
 8000762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000764:	3a01      	subs	r2, #1
 8000766:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800076a:	7013      	strb	r3, [r2, #0]
  } while(n);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d000      	beq.n	8000774 <_ZN5Print11printNumberEmh+0x76>
  do {
 8000772:	e7d7      	b.n	8000724 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000774:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff fece 	bl	8000518 <_ZN5Print5writeEPKc>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3740      	adds	r7, #64	; 0x40
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3304      	adds	r3, #4
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1cf9      	adds	r1, r7, #3
 800079c:	2201      	movs	r2, #1
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	4798      	blx	r3
 80007a2:	4603      	mov	r3, r0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	6918      	ldr	r0, [r3, #16]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	6979      	ldr	r1, [r7, #20]
 80007ca:	f006 fa22 	bl	8006c12 <HAL_UART_Transmit>
	return size;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6918      	ldr	r0, [r3, #16]
 80007e4:	f107 010f 	add.w	r1, r7, #15
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	2201      	movs	r2, #1
 80007ee:	f006 faa2 	bl	8006d36 <HAL_UART_Receive>
	return data;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return -1;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	return -1;
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <_ZN5PrintC1Ev+0x24>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	08013a18 	.word	0x08013a18

08000868 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffe4 	bl	8000840 <_ZN5PrintC1Ev>
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_ZN6StreamC1Ev+0x28>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	08013b44 	.word	0x08013b44

08000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ffe1 	bl	8000868 <_ZN6StreamC1Ev>
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	611a      	str	r2, [r3, #16]
	};
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	08013a28 	.word	0x08013a28

080008c0 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	4903      	ldr	r1, [pc, #12]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <_ZN2P910SetDirReadEv+0x28>)
 80008da:	f002 f863 	bl	80029a4 <HAL_GPIO_Init>
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001cc 	.word	0x200001cc
 80008e8:	40020800 	.word	0x40020800

080008ec <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	2201      	movs	r2, #1
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <_ZN3P103SetEv+0x14>)
 80008f6:	f002 fa01 	bl	8002cfc <HAL_GPIO_WritePin>
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400

08000904 <_ZN3P105ClearEv>:
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <_ZN3P105ClearEv+0x14>)
 800090e:	f002 f9f5 	bl	8002cfc <HAL_GPIO_WritePin>
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40020400 	.word	0x40020400

0800091c <_ZN3P1011SetDirWriteEv>:
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000934:	2203      	movs	r2, #3
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	4902      	ldr	r1, [pc, #8]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <_ZN3P1011SetDirWriteEv+0x2c>)
 800093c:	f002 f832 	bl	80029a4 <HAL_GPIO_Init>
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200001e0 	.word	0x200001e0
 8000948:	40020400 	.word	0x40020400

0800094c <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2206      	movs	r2, #6
 8000966:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d004      	beq.n	8000990 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffde 	bl	800094c <_ZN3BTD11pairWithHIDEv>
        };
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4798      	blx	r3
                OnInitBTHID();
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	331c      	adds	r3, #28
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	4798      	blx	r3
        };
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80009c2:	b480      	push	{r7}
 80009c4:	b085      	sub	sp, #20
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	460b      	mov	r3, r1
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	72fb      	strb	r3, [r7, #11]
                return;
 80009d0:	bf00      	nop
        }
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <_ZN9PS4ParserC1Ev+0x20>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
                Reset();
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f011 f8ea 	bl	8011bc4 <_ZN9PS4Parser5ResetEv>
        };
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08013b38 	.word	0x08013b38

08000a00 <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f81c 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	460b      	mov	r3, r1
 8000a24:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	2b20      	cmp	r3, #32
 8000a2a:	d105      	bne.n	8000a38 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 8000a2c:	22ff      	movs	r2, #255	; 0xff
 8000a2e:	2100      	movs	r1, #0
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 f80a 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8000a36:	e004      	b.n	8000a42 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	21ff      	movs	r1, #255	; 0xff
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 f804 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70fb      	strb	r3, [r7, #3]
 8000a56:	4613      	mov	r3, r2
 8000a58:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	78fa      	ldrb	r2, [r7, #3]
 8000a5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	78ba      	ldrb	r2, [r7, #2]
 8000a66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	4608      	mov	r0, r1
 8000a88:	4611      	mov	r1, r2
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	70fb      	strb	r3, [r7, #3]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70bb      	strb	r3, [r7, #2]
 8000a94:	4613      	mov	r3, r2
 8000a96:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	78fa      	ldrb	r2, [r7, #3]
 8000a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	78ba      	ldrb	r2, [r7, #2]
 8000aa4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	787a      	ldrb	r2, [r7, #1]
 8000aac:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	141b      	asrs	r3, r3, #16
 8000ad2:	b2d9      	uxtb	r1, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	121b      	asrs	r3, r3, #8
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffcd 	bl	8000a7e <_ZN9PS4Parser6setLedEhhh>
        };
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	f00f fe78 	bl	80107f8 <_ZN5BTHIDC1EP3BTDbPKc>
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3378      	adds	r3, #120	; 0x78
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff65 	bl	80009dc <_ZN9PS4ParserC1Ev>
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3378      	adds	r3, #120	; 0x78
 8000b22:	4618      	mov	r0, r3
 8000b24:	f011 f84e 	bl	8011bc4 <_ZN9PS4Parser5ResetEv>
        };
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	08013afc 	.word	0x08013afc
 8000b38:	08013b2c 	.word	0x08013b2c

08000b3c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3378      	adds	r3, #120	; 0x78
 8000b66:	7af9      	ldrb	r1, [r7, #11]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f010 ff65 	bl	8011a3a <_ZN9PS4Parser5ParseEhPh>
        };
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3378      	adds	r3, #120	; 0x78
 8000b84:	4618      	mov	r0, r3
 8000b86:	f011 f81d 	bl	8011bc4 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 f855 	bl	8000c3a <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3378      	adds	r3, #120	; 0x78
 8000b9c:	21ff      	movs	r1, #255	; 0xff
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff90 	bl	8000ac4 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3378      	adds	r3, #120	; 0x78
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f011 f803 	bl	8011bc4 <_ZN9PS4Parser5ResetEv>
        };
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b096      	sub	sp, #88	; 0x58
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	224f      	movs	r2, #79	; 0x4f
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f012 fdb3 	bl	8013744 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000bde:	2352      	movs	r3, #82	; 0x52
 8000be0:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000be2:	2311      	movs	r3, #17
 8000be4:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000bea:	23ff      	movs	r3, #255	; 0xff
 8000bec:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	785b      	ldrb	r3, [r3, #1]
 8000bf2:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	789b      	ldrb	r3, [r3, #2]
 8000bfe:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	78db      	ldrb	r3, [r3, #3]
 8000c04:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	791b      	ldrb	r3, [r3, #4]
 8000c0a:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	795b      	ldrb	r3, [r3, #5]
 8000c10:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	799b      	ldrb	r3, [r3, #6]
 8000c16:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	224f      	movs	r2, #79	; 0x4f
 8000c24:	4619      	mov	r1, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f81a 	bl	8000c60 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c2c:	bf00      	nop
 8000c2e:	3758      	adds	r7, #88	; 0x58
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000c34:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000c38:	e7c5      	b.n	8000bc6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000c3a <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000c42:	2343      	movs	r3, #67	; 0x43
 8000c44:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000c46:	2302      	movs	r3, #2
 8000c48:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	2202      	movs	r2, #2
 8000c50:	4619      	mov	r1, r3
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f804 	bl	8000c60 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6898      	ldr	r0, [r3, #8]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	8999      	ldrh	r1, [r3, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	7d9b      	ldrb	r3, [r3, #22]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	7dd2      	ldrb	r2, [r2, #23]
 8000c7e:	79fc      	ldrb	r4, [r7, #7]
 8000c80:	9201      	str	r2, [sp, #4]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4623      	mov	r3, r4
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f00e fe52 	bl	800f930 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c98:	f001 fd3c 	bl	8002714 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9c:	f000 f8d8 	bl	8000e50 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f000 fa36 	bl	8001110 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000ca4:	f000 fa06 	bl	80010b4 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000ca8:	f000 f9c8 	bl	800103c <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000cac:	f00b ff8e 	bl	800cbcc <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000cb0:	f000 f966 	bl	8000f80 <_ZL13MX_TIM14_Initv>
  MX_I2C1_Init();
 8000cb4:	f000 f98e 	bl	8000fd4 <_ZL12MX_I2C1_Initv>

  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* For the USB Host Shield Library*/
  SPI_Handle = hspi1;
 8000cb8:	4a45      	ldr	r2, [pc, #276]	; (8000dd0 <main+0x13c>)
 8000cba:	4b46      	ldr	r3, [pc, #280]	; (8000dd4 <main+0x140>)
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	2358      	movs	r3, #88	; 0x58
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	f012 fd30 	bl	8013728 <memcpy>
  UART_Handle = huart2;
 8000cc8:	4a43      	ldr	r2, [pc, #268]	; (8000dd8 <main+0x144>)
 8000cca:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <main+0x148>)
 8000ccc:	4610      	mov	r0, r2
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2344      	movs	r3, #68	; 0x44
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f012 fd28 	bl	8013728 <memcpy>

  /* The Primary Timer, since using freeRTOS, not using systick */
  HAL_TIM_Base_Start_IT(&htim14);
 8000cd8:	4841      	ldr	r0, [pc, #260]	; (8000de0 <main+0x14c>)
 8000cda:	f005 fcf9 	bl	80066d0 <HAL_TIM_Base_Start_IT>

  /* Verify our CPU Frequency
   * We should get a 500ms delay here */
  Serial.print(F("\r\nCPU Frequency is: "));
 8000cde:	4941      	ldr	r1, [pc, #260]	; (8000de4 <main+0x150>)
 8000ce0:	4841      	ldr	r0, [pc, #260]	; (8000de8 <main+0x154>)
 8000ce2:	f7ff fc5b 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000ce6:	f003 ff1b 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a3f      	ldr	r2, [pc, #252]	; (8000dec <main+0x158>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	0c9b      	lsrs	r3, r3, #18
 8000cf4:	4a3e      	ldr	r2, [pc, #248]	; (8000df0 <main+0x15c>)
 8000cf6:	6013      	str	r3, [r2, #0]
  Serial.print((int)cpu_freq);
 8000cf8:	4b3d      	ldr	r3, [pc, #244]	; (8000df0 <main+0x15c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	220a      	movs	r2, #10
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4839      	ldr	r0, [pc, #228]	; (8000de8 <main+0x154>)
 8000d02:	f7ff fc8b 	bl	800061c <_ZN5Print5printEii>
  Serial.print("MHz");
 8000d06:	493b      	ldr	r1, [pc, #236]	; (8000df4 <main+0x160>)
 8000d08:	4837      	ldr	r0, [pc, #220]	; (8000de8 <main+0x154>)
 8000d0a:	f7ff fc55 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000d0e:	493a      	ldr	r1, [pc, #232]	; (8000df8 <main+0x164>)
 8000d10:	4835      	ldr	r0, [pc, #212]	; (8000de8 <main+0x154>)
 8000d12:	f7ff fc51 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000d16:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <main+0x14c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <main+0x168>)
 8000d20:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500);
 8000d22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d26:	f001 fd37 	bl	8002798 <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <main+0x14c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <main+0x168>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <main+0x16c>)
 8000d3c:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000d3e:	4931      	ldr	r1, [pc, #196]	; (8000e04 <main+0x170>)
 8000d40:	4829      	ldr	r0, [pc, #164]	; (8000de8 <main+0x154>)
 8000d42:	f7ff fc39 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2/10);
 8000d46:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <main+0x16c>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	; (8000e08 <main+0x174>)
 8000d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	220a      	movs	r2, #10
 8000d56:	4619      	mov	r1, r3
 8000d58:	4823      	ldr	r0, [pc, #140]	; (8000de8 <main+0x154>)
 8000d5a:	f7ff fc5f 	bl	800061c <_ZN5Print5printEii>
  Serial.print(" ms");
 8000d5e:	492b      	ldr	r1, [pc, #172]	; (8000e0c <main+0x178>)
 8000d60:	4821      	ldr	r0, [pc, #132]	; (8000de8 <main+0x154>)
 8000d62:	f7ff fc29 	bl	80005b8 <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;

  Serial.print((int)hal_gettick);
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <main+0x17c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	220a      	movs	r2, #10
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481e      	ldr	r0, [pc, #120]	; (8000de8 <main+0x154>)
 8000d70:	f7ff fc54 	bl	800061c <_ZN5Print5printEii>



  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000d74:	f009 f9d6 	bl	800a124 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000d78:	4a26      	ldr	r2, [pc, #152]	; (8000e14 <main+0x180>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4826      	ldr	r0, [pc, #152]	; (8000e18 <main+0x184>)
 8000d7e:	f009 fa1b 	bl	800a1b8 <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a25      	ldr	r2, [pc, #148]	; (8000e1c <main+0x188>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000d88:	4a25      	ldr	r2, [pc, #148]	; (8000e20 <main+0x18c>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4825      	ldr	r0, [pc, #148]	; (8000e24 <main+0x190>)
 8000d8e:	f009 fa13 	bl	800a1b8 <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <main+0x194>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of controllerJoin */
  controllerJoinHandle = osThreadNew(StartControllerJoin, NULL, &controllerJoin_attributes);
 8000d98:	4a24      	ldr	r2, [pc, #144]	; (8000e2c <main+0x198>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4824      	ldr	r0, [pc, #144]	; (8000e30 <main+0x19c>)
 8000d9e:	f009 fa0b 	bl	800a1b8 <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a23      	ldr	r2, [pc, #140]	; (8000e34 <main+0x1a0>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of buttonPress */
  buttonPressHandle = osThreadNew(StartButtonPress, NULL, &buttonPress_attributes);
 8000da8:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <main+0x1a4>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4823      	ldr	r0, [pc, #140]	; (8000e3c <main+0x1a8>)
 8000dae:	f009 fa03 	bl	800a1b8 <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <main+0x1ac>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of updateLCD */
  updateLCDHandle = osThreadNew(StartUpdateLCD, NULL, &updateLCD_attributes);
 8000db8:	4a22      	ldr	r2, [pc, #136]	; (8000e44 <main+0x1b0>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4822      	ldr	r0, [pc, #136]	; (8000e48 <main+0x1b4>)
 8000dbe:	f009 f9fb 	bl	800a1b8 <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <main+0x1b8>)
 8000dc6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000dc8:	f009 f9d0 	bl	800a16c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <main+0x138>
 8000dce:	bf00      	nop
 8000dd0:	20000340 	.word	0x20000340
 8000dd4:	20000248 	.word	0x20000248
 8000dd8:	20000398 	.word	0x20000398
 8000ddc:	200002a0 	.word	0x200002a0
 8000de0:	200002e4 	.word	0x200002e4
 8000de4:	08013850 	.word	0x08013850
 8000de8:	200003dc 	.word	0x200003dc
 8000dec:	431bde83 	.word	0x431bde83
 8000df0:	20000694 	.word	0x20000694
 8000df4:	08013868 	.word	0x08013868
 8000df8:	0801386c 	.word	0x0801386c
 8000dfc:	20000698 	.word	0x20000698
 8000e00:	2000069a 	.word	0x2000069a
 8000e04:	08013874 	.word	0x08013874
 8000e08:	cccccccd 	.word	0xcccccccd
 8000e0c:	08013888 	.word	0x08013888
 8000e10:	2000069c 	.word	0x2000069c
 8000e14:	08013a40 	.word	0x08013a40
 8000e18:	080012b5 	.word	0x080012b5
 8000e1c:	2000032c 	.word	0x2000032c
 8000e20:	08013a64 	.word	0x08013a64
 8000e24:	08001929 	.word	0x08001929
 8000e28:	20000330 	.word	0x20000330
 8000e2c:	08013a88 	.word	0x08013a88
 8000e30:	08001951 	.word	0x08001951
 8000e34:	20000334 	.word	0x20000334
 8000e38:	08013aac 	.word	0x08013aac
 8000e3c:	080019a9 	.word	0x080019a9
 8000e40:	20000338 	.word	0x20000338
 8000e44:	08013ad0 	.word	0x08013ad0
 8000e48:	08001a45 	.word	0x08001a45
 8000e4c:	2000033c 	.word	0x2000033c

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0ac      	sub	sp, #176	; 0xb0
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e5a:	2234      	movs	r2, #52	; 0x34
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f012 fc70 	bl	8013744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	225c      	movs	r2, #92	; 0x5c
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f012 fc61 	bl	8013744 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <SystemClock_Config+0x128>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a3b      	ldr	r2, [pc, #236]	; (8000f78 <SystemClock_Config+0x128>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <SystemClock_Config+0x128>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <SystemClock_Config+0x12c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a35      	ldr	r2, [pc, #212]	; (8000f7c <SystemClock_Config+0x12c>)
 8000ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <SystemClock_Config+0x12c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ecc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000eda:	23a8      	movs	r3, #168	; 0xa8
 8000edc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f004 fb54 	bl	80055a4 <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf14      	ite	ne
 8000f02:	2301      	movne	r3, #1
 8000f04:	2300      	moveq	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f0c:	f000 fec4 	bl	8001c98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f10:	230f      	movs	r3, #15
 8000f12:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f14:	2302      	movs	r3, #2
 8000f16:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f20:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f26:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f28:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 fd10 	bl	8004954 <HAL_RCC_ClockConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bf14      	ite	ne
 8000f3a:	2301      	movne	r3, #1
 8000f3c:	2300      	moveq	r3, #0
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000f44:	f000 fea8 	bl	8001c98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 fe48 	bl	8004bec <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bf14      	ite	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	2300      	moveq	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000f6c:	f000 fe94 	bl	8001c98 <Error_Handler>
  }
}
 8000f70:	bf00      	nop
 8000f72:	37b0      	adds	r7, #176	; 0xb0
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40007000 	.word	0x40007000

08000f80 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <_ZL13MX_TIM14_Initv+0x4c>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <_ZL13MX_TIM14_Initv+0x50>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <_ZL13MX_TIM14_Initv+0x4c>)
 8000f8c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000f90:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <_ZL13MX_TIM14_Initv+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <_ZL13MX_TIM14_Initv+0x4c>)
 8000f9a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f9e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <_ZL13MX_TIM14_Initv+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <_ZL13MX_TIM14_Initv+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <_ZL13MX_TIM14_Initv+0x4c>)
 8000fae:	f005 fb3f 	bl	8006630 <HAL_TIM_Base_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 8000fc2:	f000 fe69 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200002e4 	.word	0x200002e4
 8000fd0:	40002000 	.word	0x40002000

08000fd4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fda:	4a16      	ldr	r2, [pc, #88]	; (8001034 <_ZL12MX_I2C1_Initv+0x60>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fe0:	4a15      	ldr	r2, [pc, #84]	; (8001038 <_ZL12MX_I2C1_Initv+0x64>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <_ZL12MX_I2C1_Initv+0x5c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <_ZL12MX_I2C1_Initv+0x5c>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <_ZL12MX_I2C1_Initv+0x5c>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <_ZL12MX_I2C1_Initv+0x5c>)
 8001012:	f001 fe8d 	bl	8002d30 <HAL_I2C_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf14      	ite	ne
 800101c:	2301      	movne	r3, #1
 800101e:	2300      	moveq	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001026:	f000 fe37 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001f4 	.word	0x200001f4
 8001034:	40005400 	.word	0x40005400
 8001038:	00061a80 	.word	0x00061a80

0800103c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <_ZL12MX_SPI1_Initv+0x70>)
 8001042:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <_ZL12MX_SPI1_Initv+0x74>)
 8001044:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <_ZL12MX_SPI1_Initv+0x70>)
 8001048:	f44f 7282 	mov.w	r2, #260	; 0x104
 800104c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <_ZL12MX_SPI1_Initv+0x70>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_ZL12MX_SPI1_Initv+0x70>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <_ZL12MX_SPI1_Initv+0x70>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <_ZL12MX_SPI1_Initv+0x70>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <_ZL12MX_SPI1_Initv+0x70>)
 8001068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800106c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <_ZL12MX_SPI1_Initv+0x70>)
 8001070:	2218      	movs	r2, #24
 8001072:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <_ZL12MX_SPI1_Initv+0x70>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <_ZL12MX_SPI1_Initv+0x70>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <_ZL12MX_SPI1_Initv+0x70>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <_ZL12MX_SPI1_Initv+0x70>)
 8001088:	220a      	movs	r2, #10
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800108c:	4807      	ldr	r0, [pc, #28]	; (80010ac <_ZL12MX_SPI1_Initv+0x70>)
 800108e:	f004 fd27 	bl	8005ae0 <HAL_SPI_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80010a2:	f000 fdf9 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000248 	.word	0x20000248
 80010b0:	40013000 	.word	0x40013000

080010b4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010ba:	4a14      	ldr	r2, [pc, #80]	; (800110c <_ZL19MX_USART2_UART_Initv+0x58>)
 80010bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010da:	220c      	movs	r2, #12
 80010dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010ec:	f005 fd44 	bl	8006b78 <HAL_UART_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf14      	ite	ne
 80010f6:	2301      	movne	r3, #1
 80010f8:	2300      	moveq	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001100:	f000 fdca 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200002a0 	.word	0x200002a0
 800110c:	40004400 	.word	0x40004400

08001110 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b36      	ldr	r3, [pc, #216]	; (8001204 <_ZL12MX_GPIO_Initv+0xf4>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a35      	ldr	r2, [pc, #212]	; (8001204 <_ZL12MX_GPIO_Initv+0xf4>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <_ZL12MX_GPIO_Initv+0xf4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <_ZL12MX_GPIO_Initv+0xf4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a2e      	ldr	r2, [pc, #184]	; (8001204 <_ZL12MX_GPIO_Initv+0xf4>)
 800114c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <_ZL12MX_GPIO_Initv+0xf4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <_ZL12MX_GPIO_Initv+0xf4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a27      	ldr	r2, [pc, #156]	; (8001204 <_ZL12MX_GPIO_Initv+0xf4>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <_ZL12MX_GPIO_Initv+0xf4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <_ZL12MX_GPIO_Initv+0xf4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a20      	ldr	r2, [pc, #128]	; (8001204 <_ZL12MX_GPIO_Initv+0xf4>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <_ZL12MX_GPIO_Initv+0xf4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <_ZL12MX_GPIO_Initv+0xf8>)
 800119e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4818      	ldr	r0, [pc, #96]	; (800120c <_ZL12MX_GPIO_Initv+0xfc>)
 80011ac:	f001 fbfa 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4812      	ldr	r0, [pc, #72]	; (8001210 <_ZL12MX_GPIO_Initv+0x100>)
 80011c6:	f001 fbed 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011ca:	2310      	movs	r3, #16
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <_ZL12MX_GPIO_Initv+0x104>)
 80011de:	f001 fbe1 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <_ZL12MX_GPIO_Initv+0x104>)
 80011f8:	f001 fbd4 	bl	80029a4 <HAL_GPIO_Init>
}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	10210000 	.word	0x10210000
 800120c:	40020800 	.word	0x40020800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400

08001218 <_Z23ProcessKeyCodeInContexth>:

/* USER CODE BEGIN 4 */
void ProcessKeyCodeInContext(uint8_t keyCode) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
/*Updates the display_no
* We could also just call display funcitons directly here, but since we have extra processing speed
* Let's play with freeRTOS */
  if(display_no == 0) { /* This is the status screen, show if controller or not connected */
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <_Z23ProcessKeyCodeInContexth+0x88>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10d      	bne.n	8001246 <_Z23ProcessKeyCodeInContexth+0x2e>
    if(keyCode == BACK_BTN)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b03      	cmp	r3, #3
 800122e:	d103      	bne.n	8001238 <_Z23ProcessKeyCodeInContexth+0x20>
      display_no = 1;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <_Z23ProcessKeyCodeInContexth+0x88>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e01e      	b.n	8001276 <_Z23ProcessKeyCodeInContexth+0x5e>
    else if(keyCode == FORWARD_BTN)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b06      	cmp	r3, #6
 800123c:	d11b      	bne.n	8001276 <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 1;
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <_Z23ProcessKeyCodeInContexth+0x88>)
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	e017      	b.n	8001276 <_Z23ProcessKeyCodeInContexth+0x5e>
  } else if (display_no == 1) { /* Pair Controller Screen */
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <_Z23ProcessKeyCodeInContexth+0x88>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d113      	bne.n	8001276 <_Z23ProcessKeyCodeInContexth+0x5e>
    if(keyCode == BACK_BTN)
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d103      	bne.n	800125c <_Z23ProcessKeyCodeInContexth+0x44>
      display_no = 0;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <_Z23ProcessKeyCodeInContexth+0x88>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	e00c      	b.n	8001276 <_Z23ProcessKeyCodeInContexth+0x5e>
    else if(keyCode == FORWARD_BTN)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b06      	cmp	r3, #6
 8001260:	d103      	bne.n	800126a <_Z23ProcessKeyCodeInContexth+0x52>
      display_no = 0;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <_Z23ProcessKeyCodeInContexth+0x88>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	e005      	b.n	8001276 <_Z23ProcessKeyCodeInContexth+0x5e>
    else if(keyCode == SELECT_BTN) {
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b05      	cmp	r3, #5
 800126e:	d102      	bne.n	8001276 <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 7;  /* Only get to the pair status screen from here */
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <_Z23ProcessKeyCodeInContexth+0x88>)
 8001272:	2207      	movs	r2, #7
 8001274:	701a      	strb	r2, [r3, #0]
    }
  } else if (display_no == 2) {

  }
  Serial.print("\r\nDisplay no is: ");
 8001276:	490b      	ldr	r1, [pc, #44]	; (80012a4 <_Z23ProcessKeyCodeInContexth+0x8c>)
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x90>)
 800127a:	f7ff f99d 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print(display_no);
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <_Z23ProcessKeyCodeInContexth+0x88>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	220a      	movs	r2, #10
 8001284:	4619      	mov	r1, r3
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x90>)
 8001288:	f7ff f9b6 	bl	80005f8 <_ZN5Print5printEhi>
  display_run_once = 0;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <_Z23ProcessKeyCodeInContexth+0x94>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
  display_force_update = 1;
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <_Z23ProcessKeyCodeInContexth+0x98>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200006a0 	.word	0x200006a0
 80012a4:	0801388c 	.word	0x0801388c
 80012a8:	200003dc 	.word	0x200003dc
 80012ac:	200006a5 	.word	0x200006a5
 80012b0:	200006a4 	.word	0x200006a4

080012b4 <_Z10StartGetBTPv>:
/* USER CODE END 4 */

void StartGetBT(void *argument)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 80012bc:	48ab      	ldr	r0, [pc, #684]	; (800156c <_Z10StartGetBTPv+0x2b8>)
 80012be:	f000 fcf9 	bl	8001cb4 <_ZN8MAX3421eI3P102P9E4InitEv>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	bf0c      	ite	eq
 80012ca:	2301      	moveq	r3, #1
 80012cc:	2300      	movne	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <_Z10StartGetBTPv+0x2a>
  		Serial.print(F("\r\nOSC did not start"));
 80012d4:	49a6      	ldr	r1, [pc, #664]	; (8001570 <_Z10StartGetBTPv+0x2bc>)
 80012d6:	48a7      	ldr	r0, [pc, #668]	; (8001574 <_Z10StartGetBTPv+0x2c0>)
 80012d8:	f7ff f960 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 80012dc:	e7fe      	b.n	80012dc <_Z10StartGetBTPv+0x28>
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 80012de:	49a6      	ldr	r1, [pc, #664]	; (8001578 <_Z10StartGetBTPv+0x2c4>)
 80012e0:	48a4      	ldr	r0, [pc, #656]	; (8001574 <_Z10StartGetBTPv+0x2c0>)
 80012e2:	f7ff f95b 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  /*Initialize our gamepad, this is for use on a PC*/
  gameHID.JoyX = 0;
 80012e6:	4ba5      	ldr	r3, [pc, #660]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 80012ec:	4ba3      	ldr	r3, [pc, #652]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 80012f2:	4ba2      	ldr	r3, [pc, #648]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 80012f8:	4ba0      	ldr	r3, [pc, #640]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 80012fe:	4b9f      	ldr	r3, [pc, #636]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 8001304:	4b9d      	ldr	r3, [pc, #628]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 8001306:	2200      	movs	r2, #0
 8001308:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 800130a:	4a9c      	ldr	r2, [pc, #624]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 800130c:	7993      	ldrb	r3, [r2, #6]
 800130e:	f36f 0300 	bfc	r3, #0, #1
 8001312:	7193      	strb	r3, [r2, #6]


  /* Initalize our Xbox Controller data that we will send in our hid reports */
  xboxHID.startByte = 0x00;
 8001314:	4b9a      	ldr	r3, [pc, #616]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 800131a:	4b99      	ldr	r3, [pc, #612]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 800131c:	2214      	movs	r2, #20
 800131e:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0x00;
 8001320:	4b97      	ldr	r3, [pc, #604]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001322:	2200      	movs	r2, #0
 8001324:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 8001326:	4b96      	ldr	r3, [pc, #600]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001328:	2200      	movs	r2, #0
 800132a:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 800132c:	4b94      	ldr	r3, [pc, #592]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 800132e:	2200      	movs	r2, #0
 8001330:	715a      	strb	r2, [r3, #5]
  xboxHID.X = 0;
 8001332:	4b93      	ldr	r3, [pc, #588]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001334:	2200      	movs	r2, #0
 8001336:	719a      	strb	r2, [r3, #6]
  xboxHID.Y = 0;
 8001338:	4b91      	ldr	r3, [pc, #580]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 800133a:	2200      	movs	r2, #0
 800133c:	71da      	strb	r2, [r3, #7]
  xboxHID.BLACK = 0;
 800133e:	4b90      	ldr	r3, [pc, #576]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001340:	2200      	movs	r2, #0
 8001342:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 8001344:	4b8e      	ldr	r3, [pc, #568]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001346:	2200      	movs	r2, #0
 8001348:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 800134a:	4b8d      	ldr	r3, [pc, #564]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 800134c:	2200      	movs	r2, #0
 800134e:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 8001350:	4b8b      	ldr	r3, [pc, #556]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001352:	2200      	movs	r2, #0
 8001354:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 8001356:	4b8a      	ldr	r3, [pc, #552]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001358:	2200      	movs	r2, #0
 800135a:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 800135c:	4b88      	ldr	r3, [pc, #544]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 800135e:	2200      	movs	r2, #0
 8001360:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 8001362:	4b87      	ldr	r3, [pc, #540]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001364:	2200      	movs	r2, #0
 8001366:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 8001368:	4b85      	ldr	r3, [pc, #532]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 800136a:	2200      	movs	r2, #0
 800136c:	825a      	strh	r2, [r3, #18]
//		}
//		if(usb_failed || usb_failed2) {
//			Serial.print("\r\nUSBd failed");
//		}

		Usb.Task();
 800136e:	487f      	ldr	r0, [pc, #508]	; (800156c <_Z10StartGetBTPv+0x2b8>)
 8001370:	f011 f966 	bl	8012640 <_ZN3USB4TaskEv>
		if (PS4.connected()) {
 8001374:	4883      	ldr	r0, [pc, #524]	; (8001584 <_Z10StartGetBTPv+0x2d0>)
 8001376:	f7ff fbe1 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 829a 	beq.w	80018b6 <_Z10StartGetBTPv+0x602>
			pairing = 0;
 8001382:	4b81      	ldr	r3, [pc, #516]	; (8001588 <_Z10StartGetBTPv+0x2d4>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
			ps4_connected = 1;
 8001388:	4b80      	ldr	r3, [pc, #512]	; (800158c <_Z10StartGetBTPv+0x2d8>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 800138e:	2100      	movs	r1, #0
 8001390:	487f      	ldr	r0, [pc, #508]	; (8001590 <_Z10StartGetBTPv+0x2dc>)
 8001392:	f010 fb42 	bl	8011a1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	4b7e      	ldr	r3, [pc, #504]	; (8001594 <_Z10StartGetBTPv+0x2e0>)
 800139c:	701a      	strb	r2, [r3, #0]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 800139e:	2101      	movs	r1, #1
 80013a0:	487b      	ldr	r0, [pc, #492]	; (8001590 <_Z10StartGetBTPv+0x2dc>)
 80013a2:	f010 fb3a 	bl	8011a1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <_Z10StartGetBTPv+0x2e4>)
 80013ac:	701a      	strb	r2, [r3, #0]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 80013ae:	2102      	movs	r1, #2
 80013b0:	4877      	ldr	r0, [pc, #476]	; (8001590 <_Z10StartGetBTPv+0x2dc>)
 80013b2:	f010 fb32 	bl	8011a1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b78      	ldr	r3, [pc, #480]	; (800159c <_Z10StartGetBTPv+0x2e8>)
 80013bc:	701a      	strb	r2, [r3, #0]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 80013be:	2103      	movs	r1, #3
 80013c0:	4873      	ldr	r0, [pc, #460]	; (8001590 <_Z10StartGetBTPv+0x2dc>)
 80013c2:	f010 fb2a 	bl	8011a1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b75      	ldr	r3, [pc, #468]	; (80015a0 <_Z10StartGetBTPv+0x2ec>)
 80013cc:	701a      	strb	r2, [r3, #0]

			/* Let's have a builtin deadzone */
			if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117) {// || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 80013ce:	4b71      	ldr	r3, [pc, #452]	; (8001594 <_Z10StartGetBTPv+0x2e0>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b89      	cmp	r3, #137	; 0x89
 80013d4:	d80b      	bhi.n	80013ee <_Z10StartGetBTPv+0x13a>
 80013d6:	4b6f      	ldr	r3, [pc, #444]	; (8001594 <_Z10StartGetBTPv+0x2e0>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b74      	cmp	r3, #116	; 0x74
 80013dc:	d907      	bls.n	80013ee <_Z10StartGetBTPv+0x13a>
 80013de:	4b6e      	ldr	r3, [pc, #440]	; (8001598 <_Z10StartGetBTPv+0x2e4>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b89      	cmp	r3, #137	; 0x89
 80013e4:	d803      	bhi.n	80013ee <_Z10StartGetBTPv+0x13a>
 80013e6:	4b6c      	ldr	r3, [pc, #432]	; (8001598 <_Z10StartGetBTPv+0x2e4>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b74      	cmp	r3, #116	; 0x74
 80013ec:	d82d      	bhi.n	800144a <_Z10StartGetBTPv+0x196>
				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 80013ee:	2100      	movs	r1, #0
 80013f0:	4867      	ldr	r0, [pc, #412]	; (8001590 <_Z10StartGetBTPv+0x2dc>)
 80013f2:	f010 fb12 	bl	8011a1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80013f6:	4603      	mov	r3, r0
 80013f8:	3b80      	subs	r3, #128	; 0x80
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	b25a      	sxtb	r2, r3
 80013fe:	4b5f      	ldr	r3, [pc, #380]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 8001400:	709a      	strb	r2, [r3, #2]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8001402:	2101      	movs	r1, #1
 8001404:	4862      	ldr	r0, [pc, #392]	; (8001590 <_Z10StartGetBTPv+0x2dc>)
 8001406:	f010 fb08 	bl	8011a1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800140a:	4603      	mov	r3, r0
 800140c:	3b80      	subs	r3, #128	; 0x80
 800140e:	b2db      	uxtb	r3, r3
 8001410:	b25a      	sxtb	r2, r3
 8001412:	4b5a      	ldr	r3, [pc, #360]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 8001414:	70da      	strb	r2, [r3, #3]
				xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 8001416:	4b59      	ldr	r3, [pc, #356]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 8001418:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b21a      	sxth	r2, r3
 8001420:	4b57      	ldr	r3, [pc, #348]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001422:	819a      	strh	r2, [r3, #12]
				xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 8001424:	4b55      	ldr	r3, [pc, #340]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 8001426:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b54      	ldr	r3, [pc, #336]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001430:	81da      	strh	r2, [r3, #14]
				/* The Y axis by default is inverted on the Xbox */
				xboxHID.leftStickY = -xboxHID.leftStickY-128;
 8001432:	4b53      	ldr	r3, [pc, #332]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001434:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001438:	b29a      	uxth	r2, r3
 800143a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	b29b      	uxth	r3, r3
 8001442:	b21a      	sxth	r2, r3
 8001444:	4b4e      	ldr	r3, [pc, #312]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001446:	81da      	strh	r2, [r3, #14]
 8001448:	e00b      	b.n	8001462 <_Z10StartGetBTPv+0x1ae>

			} else {
				gameHID.JoyX = 0;
 800144a:	4b4c      	ldr	r3, [pc, #304]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 800144c:	2200      	movs	r2, #0
 800144e:	709a      	strb	r2, [r3, #2]
				gameHID.JoyY = 0;
 8001450:	4b4a      	ldr	r3, [pc, #296]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 8001452:	2200      	movs	r2, #0
 8001454:	70da      	strb	r2, [r3, #3]
				xboxHID.leftStickX = 0;
 8001456:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001458:	2200      	movs	r2, #0
 800145a:	819a      	strh	r2, [r3, #12]
				xboxHID.leftStickY = 0;
 800145c:	4b48      	ldr	r3, [pc, #288]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 800145e:	2200      	movs	r2, #0
 8001460:	81da      	strh	r2, [r3, #14]
			}
			if(RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8001462:	4b4e      	ldr	r3, [pc, #312]	; (800159c <_Z10StartGetBTPv+0x2e8>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b89      	cmp	r3, #137	; 0x89
 8001468:	d80b      	bhi.n	8001482 <_Z10StartGetBTPv+0x1ce>
 800146a:	4b4c      	ldr	r3, [pc, #304]	; (800159c <_Z10StartGetBTPv+0x2e8>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b74      	cmp	r3, #116	; 0x74
 8001470:	d907      	bls.n	8001482 <_Z10StartGetBTPv+0x1ce>
 8001472:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <_Z10StartGetBTPv+0x2ec>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b89      	cmp	r3, #137	; 0x89
 8001478:	d803      	bhi.n	8001482 <_Z10StartGetBTPv+0x1ce>
 800147a:	4b49      	ldr	r3, [pc, #292]	; (80015a0 <_Z10StartGetBTPv+0x2ec>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b74      	cmp	r3, #116	; 0x74
 8001480:	d82d      	bhi.n	80014de <_Z10StartGetBTPv+0x22a>
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8001482:	2102      	movs	r1, #2
 8001484:	4842      	ldr	r0, [pc, #264]	; (8001590 <_Z10StartGetBTPv+0x2dc>)
 8001486:	f010 fac8 	bl	8011a1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800148a:	4603      	mov	r3, r0
 800148c:	3b80      	subs	r3, #128	; 0x80
 800148e:	b2db      	uxtb	r3, r3
 8001490:	b25a      	sxtb	r2, r3
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 8001494:	711a      	strb	r2, [r3, #4]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8001496:	2103      	movs	r1, #3
 8001498:	483d      	ldr	r0, [pc, #244]	; (8001590 <_Z10StartGetBTPv+0x2dc>)
 800149a:	f010 fabe 	bl	8011a1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800149e:	4603      	mov	r3, r0
 80014a0:	3b80      	subs	r3, #128	; 0x80
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	b25a      	sxtb	r2, r3
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 80014a8:	715a      	strb	r2, [r3, #5]
				xboxHID.rightStickX = gameHID.Joy2X << 8;
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 80014ac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 80014b6:	821a      	strh	r2, [r3, #16]
				xboxHID.rightStickY = gameHID.Joy2Y << 8;
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 80014ba:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 80014c4:	825a      	strh	r2, [r3, #18]

				/* The Y axis by default is inverted on the Xbox */
				xboxHID.rightStickY = -xboxHID.rightStickY - 128;
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 80014c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	4b29      	ldr	r3, [pc, #164]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 80014da:	825a      	strh	r2, [r3, #18]
 80014dc:	e00b      	b.n	80014f6 <_Z10StartGetBTPv+0x242>

			} else {
				gameHID.Joy2X = 0;
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	711a      	strb	r2, [r3, #4]
				gameHID.Joy2Y = 0;
 80014e4:	4b25      	ldr	r3, [pc, #148]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	715a      	strb	r2, [r3, #5]
				xboxHID.rightStickX = 0;
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	821a      	strh	r2, [r3, #16]
				xboxHID.rightStickY = 0;
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	825a      	strh	r2, [r3, #18]
			}

			xboxHID.L = PS4.getAnalogButton(L2);
 80014f6:	2108      	movs	r1, #8
 80014f8:	4825      	ldr	r0, [pc, #148]	; (8001590 <_Z10StartGetBTPv+0x2dc>)
 80014fa:	f010 fa75 	bl	80119e8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001504:	729a      	strb	r2, [r3, #10]
			xboxHID.R = PS4.getAnalogButton(R2);
 8001506:	2109      	movs	r1, #9
 8001508:	4821      	ldr	r0, [pc, #132]	; (8001590 <_Z10StartGetBTPv+0x2dc>)
 800150a:	f010 fa6d 	bl	80119e8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001514:	72da      	strb	r2, [r3, #11]
			gameHID.Joy_LT = xboxHID.L - 128;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001518:	7a9b      	ldrb	r3, [r3, #10]
 800151a:	3b80      	subs	r3, #128	; 0x80
 800151c:	b2db      	uxtb	r3, r3
 800151e:	b25a      	sxtb	r2, r3
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 8001522:	701a      	strb	r2, [r3, #0]
			gameHID.Joy_RT = xboxHID.R - 128;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001526:	7adb      	ldrb	r3, [r3, #11]
 8001528:	3b80      	subs	r3, #128	; 0x80
 800152a:	b2db      	uxtb	r3, r3
 800152c:	b25a      	sxtb	r2, r3
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 8001530:	705a      	strb	r2, [r3, #1]

			//Serial.print(gameHID.Joy_LT);

			if (PS4.getButtonClick(PS)) {
 8001532:	2110      	movs	r1, #16
 8001534:	4816      	ldr	r0, [pc, #88]	; (8001590 <_Z10StartGetBTPv+0x2dc>)
 8001536:	f010 fa17 	bl	8011968 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <_Z10StartGetBTPv+0x298>
				PS4.disconnect();
 8001540:	4810      	ldr	r0, [pc, #64]	; (8001584 <_Z10StartGetBTPv+0x2d0>)
 8001542:	f00f f9ca 	bl	80108da <_ZN5BTHID10disconnectEv>
				rumble_once = 0;
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <_Z10StartGetBTPv+0x2f0>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
			} else {
				//gameHID.ps4ButtonsTag.button_ps = 0;
				//PS4.disconnect();
			}

			if (PS4.getButtonPress(TRIANGLE)) {
 800154c:	210c      	movs	r1, #12
 800154e:	4810      	ldr	r0, [pc, #64]	; (8001590 <_Z10StartGetBTPv+0x2dc>)
 8001550:	f010 f9e2 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d026      	beq.n	80015a8 <_Z10StartGetBTPv+0x2f4>
				gameHID.ps4ButtonsTag.button_triangle = 1;
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <_Z10StartGetBTPv+0x2c8>)
 800155c:	79d3      	ldrb	r3, [r2, #7]
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0xFF;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <_Z10StartGetBTPv+0x2cc>)
 8001566:	22ff      	movs	r2, #255	; 0xff
 8001568:	71da      	strb	r2, [r3, #7]
 800156a:	e025      	b.n	80015b8 <_Z10StartGetBTPv+0x304>
 800156c:	200003f0 	.word	0x200003f0
 8001570:	080138a0 	.word	0x080138a0
 8001574:	200003dc 	.word	0x200003dc
 8001578:	080138b4 	.word	0x080138b4
 800157c:	200006a8 	.word	0x200006a8
 8001580:	200006b0 	.word	0x200006b0
 8001584:	200005c4 	.word	0x200005c4
 8001588:	200006a1 	.word	0x200006a1
 800158c:	2000068e 	.word	0x2000068e
 8001590:	2000063c 	.word	0x2000063c
 8001594:	2000068f 	.word	0x2000068f
 8001598:	20000690 	.word	0x20000690
 800159c:	20000691 	.word	0x20000691
 80015a0:	20000692 	.word	0x20000692
 80015a4:	2000068d 	.word	0x2000068d
			} else {
				gameHID.ps4ButtonsTag.button_triangle = 0;
 80015a8:	4ab9      	ldr	r2, [pc, #740]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 80015aa:	79d3      	ldrb	r3, [r2, #7]
 80015ac:	f36f 0300 	bfc	r3, #0, #1
 80015b0:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0;
 80015b2:	4bb8      	ldr	r3, [pc, #736]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	71da      	strb	r2, [r3, #7]
			}

			if (PS4.getButtonPress(CIRCLE)) {
 80015b8:	210d      	movs	r1, #13
 80015ba:	48b7      	ldr	r0, [pc, #732]	; (8001898 <_Z10StartGetBTPv+0x5e4>)
 80015bc:	f010 f9ac 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <_Z10StartGetBTPv+0x324>
				gameHID.ps4ButtonsTag.button_circle = 1;
 80015c6:	4ab2      	ldr	r2, [pc, #712]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 80015c8:	7993      	ldrb	r3, [r2, #6]
 80015ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ce:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0xFF;
 80015d0:	4bb0      	ldr	r3, [pc, #704]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80015d2:	22ff      	movs	r2, #255	; 0xff
 80015d4:	715a      	strb	r2, [r3, #5]
 80015d6:	e007      	b.n	80015e8 <_Z10StartGetBTPv+0x334>
			} else {
				gameHID.ps4ButtonsTag.button_circle = 0;
 80015d8:	4aad      	ldr	r2, [pc, #692]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 80015da:	7993      	ldrb	r3, [r2, #6]
 80015dc:	f36f 13c7 	bfc	r3, #7, #1
 80015e0:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0;
 80015e2:	4bac      	ldr	r3, [pc, #688]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	715a      	strb	r2, [r3, #5]
			}

			if (PS4.getButtonPress(CROSS)) {
 80015e8:	210e      	movs	r1, #14
 80015ea:	48ab      	ldr	r0, [pc, #684]	; (8001898 <_Z10StartGetBTPv+0x5e4>)
 80015ec:	f010 f994 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <_Z10StartGetBTPv+0x354>
				gameHID.ps4ButtonsTag.button_cross = 1;
 80015f6:	4aa6      	ldr	r2, [pc, #664]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 80015f8:	7993      	ldrb	r3, [r2, #6]
 80015fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015fe:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0xFF;
 8001600:	4ba4      	ldr	r3, [pc, #656]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001602:	22ff      	movs	r2, #255	; 0xff
 8001604:	711a      	strb	r2, [r3, #4]
 8001606:	e007      	b.n	8001618 <_Z10StartGetBTPv+0x364>
			} else {
				gameHID.ps4ButtonsTag.button_cross = 0;
 8001608:	4aa1      	ldr	r2, [pc, #644]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 800160a:	7993      	ldrb	r3, [r2, #6]
 800160c:	f36f 1386 	bfc	r3, #6, #1
 8001610:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0;
 8001612:	4ba0      	ldr	r3, [pc, #640]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001614:	2200      	movs	r2, #0
 8001616:	711a      	strb	r2, [r3, #4]
			}

			if (PS4.getButtonPress(SQUARE)) {
 8001618:	210f      	movs	r1, #15
 800161a:	489f      	ldr	r0, [pc, #636]	; (8001898 <_Z10StartGetBTPv+0x5e4>)
 800161c:	f010 f97c 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d008      	beq.n	8001638 <_Z10StartGetBTPv+0x384>
				gameHID.ps4ButtonsTag.button_square = 1;
 8001626:	4a9a      	ldr	r2, [pc, #616]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 8001628:	79d3      	ldrb	r3, [r2, #7]
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0xFF;
 8001630:	4b98      	ldr	r3, [pc, #608]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001632:	22ff      	movs	r2, #255	; 0xff
 8001634:	719a      	strb	r2, [r3, #6]
 8001636:	e007      	b.n	8001648 <_Z10StartGetBTPv+0x394>
			} else {
				gameHID.ps4ButtonsTag.button_square = 0;
 8001638:	4a95      	ldr	r2, [pc, #596]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 800163a:	79d3      	ldrb	r3, [r2, #7]
 800163c:	f36f 0341 	bfc	r3, #1, #1
 8001640:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0;
 8001642:	4b94      	ldr	r3, [pc, #592]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001644:	2200      	movs	r2, #0
 8001646:	719a      	strb	r2, [r3, #6]
			}

			if (PS4.getButtonPress(UP)) {
 8001648:	2100      	movs	r1, #0
 800164a:	4893      	ldr	r0, [pc, #588]	; (8001898 <_Z10StartGetBTPv+0x5e4>)
 800164c:	f010 f964 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00c      	beq.n	8001670 <_Z10StartGetBTPv+0x3bc>
				gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8001656:	4a8e      	ldr	r2, [pc, #568]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 8001658:	79d3      	ldrb	r3, [r2, #7]
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DUP;
 8001660:	4b8c      	ldr	r3, [pc, #560]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001662:	789b      	ldrb	r3, [r3, #2]
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b8a      	ldr	r3, [pc, #552]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 800166c:	709a      	strb	r2, [r3, #2]
 800166e:	e00b      	b.n	8001688 <_Z10StartGetBTPv+0x3d4>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8001670:	4a87      	ldr	r2, [pc, #540]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 8001672:	79d3      	ldrb	r3, [r2, #7]
 8001674:	f36f 0382 	bfc	r3, #2, #1
 8001678:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 800167a:	4b86      	ldr	r3, [pc, #536]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 800167c:	789b      	ldrb	r3, [r3, #2]
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b83      	ldr	r3, [pc, #524]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001686:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(RIGHT)) {
 8001688:	2101      	movs	r1, #1
 800168a:	4883      	ldr	r0, [pc, #524]	; (8001898 <_Z10StartGetBTPv+0x5e4>)
 800168c:	f010 f944 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00c      	beq.n	80016b0 <_Z10StartGetBTPv+0x3fc>
				gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8001696:	4a7e      	ldr	r2, [pc, #504]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 8001698:	79d3      	ldrb	r3, [r2, #7]
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DRIGHT;
 80016a0:	4b7c      	ldr	r3, [pc, #496]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80016a2:	789b      	ldrb	r3, [r3, #2]
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b7a      	ldr	r3, [pc, #488]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80016ac:	709a      	strb	r2, [r3, #2]
 80016ae:	e00b      	b.n	80016c8 <_Z10StartGetBTPv+0x414>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_right = 0;
 80016b0:	4a77      	ldr	r2, [pc, #476]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 80016b2:	79d3      	ldrb	r3, [r2, #7]
 80016b4:	f36f 03c3 	bfc	r3, #3, #1
 80016b8:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 80016ba:	4b76      	ldr	r3, [pc, #472]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80016bc:	789b      	ldrb	r3, [r3, #2]
 80016be:	f023 0308 	bic.w	r3, r3, #8
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b73      	ldr	r3, [pc, #460]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80016c6:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(DOWN)) {
 80016c8:	2102      	movs	r1, #2
 80016ca:	4873      	ldr	r0, [pc, #460]	; (8001898 <_Z10StartGetBTPv+0x5e4>)
 80016cc:	f010 f924 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00c      	beq.n	80016f0 <_Z10StartGetBTPv+0x43c>
				gameHID.ps4ButtonsTag.button_dpad_down = 1;
 80016d6:	4a6e      	ldr	r2, [pc, #440]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 80016d8:	79d3      	ldrb	r3, [r2, #7]
 80016da:	f043 0320 	orr.w	r3, r3, #32
 80016de:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DDOWN;
 80016e0:	4b6c      	ldr	r3, [pc, #432]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80016e2:	789b      	ldrb	r3, [r3, #2]
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80016ec:	709a      	strb	r2, [r3, #2]
 80016ee:	e00b      	b.n	8001708 <_Z10StartGetBTPv+0x454>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_down = 0;
 80016f0:	4a67      	ldr	r2, [pc, #412]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 80016f2:	79d3      	ldrb	r3, [r2, #7]
 80016f4:	f36f 1345 	bfc	r3, #5, #1
 80016f8:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 80016fa:	4b66      	ldr	r3, [pc, #408]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80016fc:	789b      	ldrb	r3, [r3, #2]
 80016fe:	f023 0302 	bic.w	r3, r3, #2
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b63      	ldr	r3, [pc, #396]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001706:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(LEFT)) {
 8001708:	2103      	movs	r1, #3
 800170a:	4863      	ldr	r0, [pc, #396]	; (8001898 <_Z10StartGetBTPv+0x5e4>)
 800170c:	f010 f904 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00c      	beq.n	8001730 <_Z10StartGetBTPv+0x47c>
				gameHID.ps4ButtonsTag.button_dpad_left = 1;
 8001716:	4a5e      	ldr	r2, [pc, #376]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 8001718:	79d3      	ldrb	r3, [r2, #7]
 800171a:	f043 0310 	orr.w	r3, r3, #16
 800171e:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DLEFT;
 8001720:	4b5c      	ldr	r3, [pc, #368]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001722:	789b      	ldrb	r3, [r3, #2]
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 800172c:	709a      	strb	r2, [r3, #2]
 800172e:	e00b      	b.n	8001748 <_Z10StartGetBTPv+0x494>

			} else {
				gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8001730:	4a57      	ldr	r2, [pc, #348]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 8001732:	79d3      	ldrb	r3, [r2, #7]
 8001734:	f36f 1304 	bfc	r3, #4, #1
 8001738:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 800173a:	4b56      	ldr	r3, [pc, #344]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 800173c:	789b      	ldrb	r3, [r3, #2]
 800173e:	f023 0304 	bic.w	r3, r3, #4
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b53      	ldr	r3, [pc, #332]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001746:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(L1)) {
 8001748:	210a      	movs	r1, #10
 800174a:	4853      	ldr	r0, [pc, #332]	; (8001898 <_Z10StartGetBTPv+0x5e4>)
 800174c:	f010 f8e4 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d008      	beq.n	8001768 <_Z10StartGetBTPv+0x4b4>
				gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8001756:	4a4e      	ldr	r2, [pc, #312]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 8001758:	7993      	ldrb	r3, [r2, #6]
 800175a:	f043 0320 	orr.w	r3, r3, #32
 800175e:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0xFF;
 8001760:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001762:	22ff      	movs	r2, #255	; 0xff
 8001764:	725a      	strb	r2, [r3, #9]
 8001766:	e007      	b.n	8001778 <_Z10StartGetBTPv+0x4c4>

			} else {
				gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001768:	4a49      	ldr	r2, [pc, #292]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 800176a:	7993      	ldrb	r3, [r2, #6]
 800176c:	f36f 1345 	bfc	r3, #5, #1
 8001770:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0;
 8001772:	4b48      	ldr	r3, [pc, #288]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001774:	2200      	movs	r2, #0
 8001776:	725a      	strb	r2, [r3, #9]
			}

			if (PS4.getButtonPress(L3)) {
 8001778:	2106      	movs	r1, #6
 800177a:	4847      	ldr	r0, [pc, #284]	; (8001898 <_Z10StartGetBTPv+0x5e4>)
 800177c:	f010 f8cc 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00c      	beq.n	80017a0 <_Z10StartGetBTPv+0x4ec>
				gameHID.ps4ButtonsTag.button_left_thumb = 1;
 8001786:	4a42      	ldr	r2, [pc, #264]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 8001788:	79d3      	ldrb	r3, [r2, #7]
 800178a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800178e:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_LS_BTN;
 8001790:	4b40      	ldr	r3, [pc, #256]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001792:	789b      	ldrb	r3, [r3, #2]
 8001794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b3e      	ldr	r3, [pc, #248]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 800179c:	709a      	strb	r2, [r3, #2]
 800179e:	e00b      	b.n	80017b8 <_Z10StartGetBTPv+0x504>
			} else {
				gameHID.ps4ButtonsTag.button_left_thumb = 0;
 80017a0:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 80017a2:	79d3      	ldrb	r3, [r2, #7]
 80017a4:	f36f 1386 	bfc	r3, #6, #1
 80017a8:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 80017aa:	4b3a      	ldr	r3, [pc, #232]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80017ac:	789b      	ldrb	r3, [r3, #2]
 80017ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b37      	ldr	r3, [pc, #220]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80017b6:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(R1)) {
 80017b8:	210b      	movs	r1, #11
 80017ba:	4837      	ldr	r0, [pc, #220]	; (8001898 <_Z10StartGetBTPv+0x5e4>)
 80017bc:	f010 f8ac 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d008      	beq.n	80017d8 <_Z10StartGetBTPv+0x524>
				gameHID.ps4ButtonsTag.button_right_trigger = 1;
 80017c6:	4a32      	ldr	r2, [pc, #200]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 80017c8:	7993      	ldrb	r3, [r2, #6]
 80017ca:	f043 0310 	orr.w	r3, r3, #16
 80017ce:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0xFF;
 80017d0:	4b30      	ldr	r3, [pc, #192]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80017d2:	22ff      	movs	r2, #255	; 0xff
 80017d4:	721a      	strb	r2, [r3, #8]
 80017d6:	e007      	b.n	80017e8 <_Z10StartGetBTPv+0x534>
			} else {
				gameHID.ps4ButtonsTag.button_right_trigger = 0;
 80017d8:	4a2d      	ldr	r2, [pc, #180]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 80017da:	7993      	ldrb	r3, [r2, #6]
 80017dc:	f36f 1304 	bfc	r3, #4, #1
 80017e0:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0;
 80017e2:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	721a      	strb	r2, [r3, #8]
			}

			if (PS4.getButtonPress(R3)) {
 80017e8:	2107      	movs	r1, #7
 80017ea:	482b      	ldr	r0, [pc, #172]	; (8001898 <_Z10StartGetBTPv+0x5e4>)
 80017ec:	f010 f894 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00c      	beq.n	8001810 <_Z10StartGetBTPv+0x55c>
				gameHID.ps4ButtonsTag.button_right_thumb = 1;
 80017f6:	4a26      	ldr	r2, [pc, #152]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 80017f8:	79d3      	ldrb	r3, [r2, #7]
 80017fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fe:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_RS_BTN;
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001802:	789b      	ldrb	r3, [r3, #2]
 8001804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 800180c:	709a      	strb	r2, [r3, #2]
 800180e:	e00b      	b.n	8001828 <_Z10StartGetBTPv+0x574>
			} else {
				gameHID.ps4ButtonsTag.button_right_thumb = 0;
 8001810:	4a1f      	ldr	r2, [pc, #124]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 8001812:	79d3      	ldrb	r3, [r2, #7]
 8001814:	f36f 13c7 	bfc	r3, #7, #1
 8001818:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 800181c:	789b      	ldrb	r3, [r3, #2]
 800181e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001826:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(SHARE)) {
 8001828:	2104      	movs	r1, #4
 800182a:	481b      	ldr	r0, [pc, #108]	; (8001898 <_Z10StartGetBTPv+0x5e4>)
 800182c:	f010 f874 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00c      	beq.n	8001850 <_Z10StartGetBTPv+0x59c>
				gameHID.ps4ButtonsTag.button_share = 1;
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 8001838:	7993      	ldrb	r3, [r2, #6]
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_BACK_BTN;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001842:	789b      	ldrb	r3, [r3, #2]
 8001844:	f043 0320 	orr.w	r3, r3, #32
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 800184c:	709a      	strb	r2, [r3, #2]
 800184e:	e00b      	b.n	8001868 <_Z10StartGetBTPv+0x5b4>
			} else {
				gameHID.ps4ButtonsTag.button_share = 0;
 8001850:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 8001852:	7993      	ldrb	r3, [r2, #6]
 8001854:	f36f 03c3 	bfc	r3, #3, #1
 8001858:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 800185c:	789b      	ldrb	r3, [r3, #2]
 800185e:	f023 0320 	bic.w	r3, r3, #32
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001866:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(OPTIONS)) {
 8001868:	2105      	movs	r1, #5
 800186a:	480b      	ldr	r0, [pc, #44]	; (8001898 <_Z10StartGetBTPv+0x5e4>)
 800186c:	f010 f854 	bl	8011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d012      	beq.n	800189c <_Z10StartGetBTPv+0x5e8>
				gameHID.ps4ButtonsTag.button_start = 1;
 8001876:	4a06      	ldr	r2, [pc, #24]	; (8001890 <_Z10StartGetBTPv+0x5dc>)
 8001878:	7993      	ldrb	r3, [r2, #6]
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_START_BTN;
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 8001882:	789b      	ldrb	r3, [r3, #2]
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b02      	ldr	r3, [pc, #8]	; (8001894 <_Z10StartGetBTPv+0x5e0>)
 800188c:	709a      	strb	r2, [r3, #2]
 800188e:	e037      	b.n	8001900 <_Z10StartGetBTPv+0x64c>
 8001890:	200006a8 	.word	0x200006a8
 8001894:	200006b0 	.word	0x200006b0
 8001898:	2000063c 	.word	0x2000063c
			} else {
				gameHID.ps4ButtonsTag.button_start = 0;
 800189c:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <_Z10StartGetBTPv+0x654>)
 800189e:	7993      	ldrb	r3, [r2, #6]
 80018a0:	f36f 0382 	bfc	r3, #2, #1
 80018a4:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <_Z10StartGetBTPv+0x658>)
 80018a8:	789b      	ldrb	r3, [r3, #2]
 80018aa:	f023 0310 	bic.w	r3, r3, #16
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <_Z10StartGetBTPv+0x658>)
 80018b2:	709a      	strb	r2, [r3, #2]
 80018b4:	e024      	b.n	8001900 <_Z10StartGetBTPv+0x64c>
			}

		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80018b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ba:	4815      	ldr	r0, [pc, #84]	; (8001910 <_Z10StartGetBTPv+0x65c>)
 80018bc:	f001 fa06 	bl	8002ccc <HAL_GPIO_ReadPin>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	bf0c      	ite	eq
 80018c6:	2301      	moveq	r3, #1
 80018c8:	2300      	movne	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d014      	beq.n	80018fa <_Z10StartGetBTPv+0x646>
			if (!buttonPressed) {
 80018d0:	4b10      	ldr	r3, [pc, #64]	; (8001914 <_Z10StartGetBTPv+0x660>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	f083 0301 	eor.w	r3, r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <_Z10StartGetBTPv+0x63e>
				Serial.print(F("\r\nButton Pressed"));
 80018de:	490e      	ldr	r1, [pc, #56]	; (8001918 <_Z10StartGetBTPv+0x664>)
 80018e0:	480e      	ldr	r0, [pc, #56]	; (800191c <_Z10StartGetBTPv+0x668>)
 80018e2:	f7fe fe5b 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
				PS4.pair(); // Start paring routine if user button was just pressed
 80018e6:	480e      	ldr	r0, [pc, #56]	; (8001920 <_Z10StartGetBTPv+0x66c>)
 80018e8:	f7ff f845 	bl	8000976 <_ZN5BTHID4pairEv>
				pairing = 1;
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <_Z10StartGetBTPv+0x670>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
			}
			buttonPressed = true;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <_Z10StartGetBTPv+0x660>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e002      	b.n	8001900 <_Z10StartGetBTPv+0x64c>
		} else
			buttonPressed = false;
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <_Z10StartGetBTPv+0x660>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 8001900:	2001      	movs	r0, #1
 8001902:	f008 fceb 	bl	800a2dc <osDelay>
		Usb.Task();
 8001906:	e532      	b.n	800136e <_Z10StartGetBTPv+0xba>
 8001908:	200006a8 	.word	0x200006a8
 800190c:	200006b0 	.word	0x200006b0
 8001910:	40020800 	.word	0x40020800
 8001914:	2000068c 	.word	0x2000068c
 8001918:	080138d4 	.word	0x080138d4
 800191c:	200003dc 	.word	0x200003dc
 8001920:	200005c4 	.word	0x200005c4
 8001924:	200006a1 	.word	0x200006a1

08001928 <_Z12StartSendUSBPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
	MX_USB_DEVICE_Init();
 8001930:	f00b f94c 	bl	800cbcc <MX_USB_DEVICE_Init>
#endif

#if OG_XBOX_SETUP
	//Serial.print(xboxHID.leftStickX);

	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001934:	2214      	movs	r2, #20
 8001936:	4904      	ldr	r1, [pc, #16]	; (8001948 <_Z12StartSendUSBPv+0x20>)
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <_Z12StartSendUSBPv+0x24>)
 800193a:	f007 f97f 	bl	8008c3c <USBD_HID_SendReport>
#endif
    osDelay(1);
 800193e:	2001      	movs	r0, #1
 8001940:	f008 fccc 	bl	800a2dc <osDelay>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001944:	e7f6      	b.n	8001934 <_Z12StartSendUSBPv+0xc>
 8001946:	bf00      	nop
 8001948:	200006b0 	.word	0x200006b0
 800194c:	20005498 	.word	0x20005498

08001950 <_Z19StartControllerJoinPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerJoin */
void StartControllerJoin(void *argument)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerJoin */
  /* Infinite loop */
  for(;;)
  {
	if(PS4.connected() && !rumble_once) {
 8001958:	4810      	ldr	r0, [pc, #64]	; (800199c <_Z19StartControllerJoinPv+0x4c>)
 800195a:	f7ff f8ef 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <_Z19StartControllerJoinPv+0x20>
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <_Z19StartControllerJoinPv+0x50>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <_Z19StartControllerJoinPv+0x20>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <_Z19StartControllerJoinPv+0x22>
 8001970:	2300      	movs	r3, #0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <_Z19StartControllerJoinPv+0x42>
	  PS4.setRumbleOn(RumbleLow);
 8001976:	2120      	movs	r1, #32
 8001978:	480a      	ldr	r0, [pc, #40]	; (80019a4 <_Z19StartControllerJoinPv+0x54>)
 800197a:	f7ff f84e 	bl	8000a1a <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
	  osDelay(500);
 800197e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001982:	f008 fcab 	bl	800a2dc <osDelay>
	  PS4.setRumbleOff();
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <_Z19StartControllerJoinPv+0x54>)
 8001988:	f7ff f83a 	bl	8000a00 <_ZN9PS4Parser12setRumbleOffEv>
	  rumble_once = 1;
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <_Z19StartControllerJoinPv+0x50>)
 800198e:	2201      	movs	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
	}
	osDelay(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f008 fca2 	bl	800a2dc <osDelay>
	if(PS4.connected() && !rumble_once) {
 8001998:	e7de      	b.n	8001958 <_Z19StartControllerJoinPv+0x8>
 800199a:	bf00      	nop
 800199c:	200005c4 	.word	0x200005c4
 80019a0:	2000068d 	.word	0x2000068d
 80019a4:	2000063c 	.word	0x2000063c

080019a8 <_Z16StartButtonPressPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonPress */
void StartButtonPress(void *argument)
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPress */
  /* Infinite loop */
  for(;;)
  {
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 80019b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b4:	481e      	ldr	r0, [pc, #120]	; (8001a30 <_Z16StartButtonPressPv+0x88>)
 80019b6:	f001 f989 	bl	8002ccc <HAL_GPIO_ReadPin>
 80019ba:	4603      	mov	r3, r0
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 80019c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c4:	481b      	ldr	r0, [pc, #108]	; (8001a34 <_Z16StartButtonPressPv+0x8c>)
 80019c6:	f001 f981 	bl	8002ccc <HAL_GPIO_ReadPin>
 80019ca:	4603      	mov	r3, r0
 80019cc:	005b      	lsls	r3, r3, #1
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 80019ce:	b25b      	sxtb	r3, r3
 80019d0:	4323      	orrs	r3, r4
 80019d2:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(FORWARD_BTN_GPIO) << 0);
 80019d4:	2110      	movs	r1, #16
 80019d6:	4817      	ldr	r0, [pc, #92]	; (8001a34 <_Z16StartButtonPressPv+0x8c>)
 80019d8:	f001 f978 	bl	8002ccc <HAL_GPIO_ReadPin>
 80019dc:	4603      	mov	r3, r0
 80019de:	b25b      	sxtb	r3, r3
			(HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 80019e0:	4323      	orrs	r3, r4
 80019e2:	b25b      	sxtb	r3, r3
 80019e4:	b2da      	uxtb	r2, r3
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <_Z16StartButtonPressPv+0x90>)
 80019e8:	701a      	strb	r2, [r3, #0]

  if (BUTTON_PRESSED) {
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <_Z16StartButtonPressPv+0x90>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b07      	cmp	r3, #7
 80019f0:	d014      	beq.n	8001a1c <_Z16StartButtonPressPv+0x74>
	  if(buttonDebounced == true) {  // you only get here if the same button combination has been pressed for 100mS
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <_Z16StartButtonPressPv+0x94>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d10c      	bne.n	8001a14 <_Z16StartButtonPressPv+0x6c>
		  if (buttonProcessed == false) { // here's where we do the real work on the keyboard, and ensure we only do it once/keypress
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <_Z16StartButtonPressPv+0x98>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d112      	bne.n	8001a28 <_Z16StartButtonPressPv+0x80>
			  buttonProcessed = true;
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <_Z16StartButtonPressPv+0x98>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
			  ProcessKeyCodeInContext(keyCode);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <_Z16StartButtonPressPv+0x90>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fc03 	bl	8001218 <_Z23ProcessKeyCodeInContexth>
 8001a12:	e009      	b.n	8001a28 <_Z16StartButtonPressPv+0x80>
		  }
	  } else {
		  buttonDebounced = true;
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <_Z16StartButtonPressPv+0x94>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
 8001a1a:	e005      	b.n	8001a28 <_Z16StartButtonPressPv+0x80>
	  }
  } else {
	  buttonDebounced = false;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <_Z16StartButtonPressPv+0x94>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
	  buttonProcessed = false;
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <_Z16StartButtonPressPv+0x98>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
  }
//  	Serial.print("\r\n");
//  	Serial.print(keyCode);
    osDelay(100);
 8001a28:	2064      	movs	r0, #100	; 0x64
 8001a2a:	f008 fc57 	bl	800a2dc <osDelay>
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001a2e:	e7bf      	b.n	80019b0 <_Z16StartButtonPressPv+0x8>
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40020400 	.word	0x40020400
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	200006a2 	.word	0x200006a2
 8001a40:	200006a3 	.word	0x200006a3

08001a44 <_Z14StartUpdateLCDPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateLCD */
void StartUpdateLCD(void *argument)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUpdateLCD */
  /* Infinite loop */
  ssd1306_Fill(Black_);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 fcef 	bl	8002430 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8001a52:	f000 fd11 	bl	8002478 <ssd1306_UpdateScreen>
  for(;;)
  {
	if(display_run_once == 0) {
 8001a56:	4b7b      	ldr	r3, [pc, #492]	; (8001c44 <_Z14StartUpdateLCDPv+0x200>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 80ed 	bne.w	8001c3a <_Z14StartUpdateLCDPv+0x1f6>
		  ssd1306_Fill(Black_);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f000 fce5 	bl	8002430 <ssd1306_Fill>
		  ssd1306_UpdateScreen();
 8001a66:	f000 fd07 	bl	8002478 <ssd1306_UpdateScreen>
		switch(display_no)
 8001a6a:	4b77      	ldr	r3, [pc, #476]	; (8001c48 <_Z14StartUpdateLCDPv+0x204>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b07      	cmp	r3, #7
 8001a70:	f000 80ac 	beq.w	8001bcc <_Z14StartUpdateLCDPv+0x188>
 8001a74:	2b07      	cmp	r3, #7
 8001a76:	f300 80e0 	bgt.w	8001c3a <_Z14StartUpdateLCDPv+0x1f6>
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <_Z14StartUpdateLCDPv+0x42>
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	f000 808e 	beq.w	8001ba0 <_Z14StartUpdateLCDPv+0x15c>
 8001a84:	e0d9      	b.n	8001c3a <_Z14StartUpdateLCDPv+0x1f6>
		{
			case 0 :
			{
				uint8_t alternate_print = 1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
				if(!PS4.connected()) {
 8001a8a:	4870      	ldr	r0, [pc, #448]	; (8001c4c <_Z14StartUpdateLCDPv+0x208>)
 8001a8c:	f7ff f856 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f083 0301 	eor.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d019      	beq.n	8001ad0 <_Z14StartUpdateLCDPv+0x8c>
				  ssd1306_SetCursor(47,0);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	202f      	movs	r0, #47	; 0x2f
 8001aa0:	f000 fe20 	bl	80026e4 <ssd1306_SetCursor>
				  ssd1306_WriteString("Not", Font_11x18, White_);
 8001aa4:	4a6a      	ldr	r2, [pc, #424]	; (8001c50 <_Z14StartUpdateLCDPv+0x20c>)
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	ca06      	ldmia	r2, {r1, r2}
 8001aaa:	486a      	ldr	r0, [pc, #424]	; (8001c54 <_Z14StartUpdateLCDPv+0x210>)
 8001aac:	f000 fdf4 	bl	8002698 <ssd1306_WriteString>
				  display_force_update = 0;
 8001ab0:	4b69      	ldr	r3, [pc, #420]	; (8001c58 <_Z14StartUpdateLCDPv+0x214>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
				  ssd1306_SetCursor(14, 26);
 8001ab6:	211a      	movs	r1, #26
 8001ab8:	200e      	movs	r0, #14
 8001aba:	f000 fe13 	bl	80026e4 <ssd1306_SetCursor>
				  ssd1306_WriteString("Connected", Font_11x18, White_);
 8001abe:	4a64      	ldr	r2, [pc, #400]	; (8001c50 <_Z14StartUpdateLCDPv+0x20c>)
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	ca06      	ldmia	r2, {r1, r2}
 8001ac4:	4865      	ldr	r0, [pc, #404]	; (8001c5c <_Z14StartUpdateLCDPv+0x218>)
 8001ac6:	f000 fde7 	bl	8002698 <ssd1306_WriteString>
				  alternate_print = 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e017      	b.n	8001b00 <_Z14StartUpdateLCDPv+0xbc>
				} else if (PS4.connected()) {
 8001ad0:	485e      	ldr	r0, [pc, #376]	; (8001c4c <_Z14StartUpdateLCDPv+0x208>)
 8001ad2:	f7ff f833 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d011      	beq.n	8001b00 <_Z14StartUpdateLCDPv+0xbc>
				  ssd1306_SetCursor(14, 26);
 8001adc:	211a      	movs	r1, #26
 8001ade:	200e      	movs	r0, #14
 8001ae0:	f000 fe00 	bl	80026e4 <ssd1306_SetCursor>
				  ssd1306_WriteString("Connected", Font_11x18, White_);
 8001ae4:	4a5a      	ldr	r2, [pc, #360]	; (8001c50 <_Z14StartUpdateLCDPv+0x20c>)
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	ca06      	ldmia	r2, {r1, r2}
 8001aea:	485c      	ldr	r0, [pc, #368]	; (8001c5c <_Z14StartUpdateLCDPv+0x218>)
 8001aec:	f000 fdd4 	bl	8002698 <ssd1306_WriteString>
				  alternate_print = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
				  display_run_once = 1;
 8001af4:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <_Z14StartUpdateLCDPv+0x200>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
				  display_force_update = 0;
 8001afa:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <_Z14StartUpdateLCDPv+0x214>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
				}
				ssd1306_UpdateScreen();
 8001b00:	f000 fcba 	bl	8002478 <ssd1306_UpdateScreen>

				while(!PS4.connected() && display_force_update == 0) {
 8001b04:	4851      	ldr	r0, [pc, #324]	; (8001c4c <_Z14StartUpdateLCDPv+0x208>)
 8001b06:	f7ff f819 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f083 0301 	eor.w	r3, r3, #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <_Z14StartUpdateLCDPv+0xde>
 8001b16:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <_Z14StartUpdateLCDPv+0x214>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <_Z14StartUpdateLCDPv+0xde>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <_Z14StartUpdateLCDPv+0xe0>
 8001b22:	2300      	movs	r3, #0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <_Z14StartUpdateLCDPv+0xec>
					osDelay(100);
 8001b28:	2064      	movs	r0, #100	; 0x64
 8001b2a:	f008 fbd7 	bl	800a2dc <osDelay>
				while(!PS4.connected() && display_force_update == 0) {
 8001b2e:	e7e9      	b.n	8001b04 <_Z14StartUpdateLCDPv+0xc0>
				}
				if(display_force_update == 1) {
 8001b30:	4b49      	ldr	r3, [pc, #292]	; (8001c58 <_Z14StartUpdateLCDPv+0x214>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d106      	bne.n	8001b46 <_Z14StartUpdateLCDPv+0x102>
					display_force_update = 0;
 8001b38:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <_Z14StartUpdateLCDPv+0x214>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
					display_run_once = 0;
 8001b3e:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <_Z14StartUpdateLCDPv+0x200>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
					break;
 8001b44:	e079      	b.n	8001c3a <_Z14StartUpdateLCDPv+0x1f6>
				}
				if(PS4.connected() && alternate_print) {
 8001b46:	4841      	ldr	r0, [pc, #260]	; (8001c4c <_Z14StartUpdateLCDPv+0x208>)
 8001b48:	f7fe fff8 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d004      	beq.n	8001b5c <_Z14StartUpdateLCDPv+0x118>
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <_Z14StartUpdateLCDPv+0x118>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <_Z14StartUpdateLCDPv+0x11a>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d06a      	beq.n	8001c38 <_Z14StartUpdateLCDPv+0x1f4>
				    ssd1306_Fill(Black_);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f000 fc64 	bl	8002430 <ssd1306_Fill>
				    ssd1306_UpdateScreen();
 8001b68:	f000 fc86 	bl	8002478 <ssd1306_UpdateScreen>
				    ssd1306_SetCursor(25,0);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2019      	movs	r0, #25
 8001b70:	f000 fdb8 	bl	80026e4 <ssd1306_SetCursor>
				    ssd1306_WriteString("Status:", Font_11x18, White_);
 8001b74:	4a36      	ldr	r2, [pc, #216]	; (8001c50 <_Z14StartUpdateLCDPv+0x20c>)
 8001b76:	2301      	movs	r3, #1
 8001b78:	ca06      	ldmia	r2, {r1, r2}
 8001b7a:	4839      	ldr	r0, [pc, #228]	; (8001c60 <_Z14StartUpdateLCDPv+0x21c>)
 8001b7c:	f000 fd8c 	bl	8002698 <ssd1306_WriteString>
					ssd1306_SetCursor(2, 26);
 8001b80:	211a      	movs	r1, #26
 8001b82:	2002      	movs	r0, #2
 8001b84:	f000 fdae 	bl	80026e4 <ssd1306_SetCursor>
					ssd1306_WriteString("  Connected!", Font_11x18, White_);
 8001b88:	4a31      	ldr	r2, [pc, #196]	; (8001c50 <_Z14StartUpdateLCDPv+0x20c>)
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	ca06      	ldmia	r2, {r1, r2}
 8001b8e:	4835      	ldr	r0, [pc, #212]	; (8001c64 <_Z14StartUpdateLCDPv+0x220>)
 8001b90:	f000 fd82 	bl	8002698 <ssd1306_WriteString>
				    ssd1306_UpdateScreen();
 8001b94:	f000 fc70 	bl	8002478 <ssd1306_UpdateScreen>
				    display_run_once = 1;
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <_Z14StartUpdateLCDPv+0x200>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001b9e:	e04b      	b.n	8001c38 <_Z14StartUpdateLCDPv+0x1f4>
			}

			case 1 :
				display_run_once = 1;
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <_Z14StartUpdateLCDPv+0x200>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
				display_force_update = 0;
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <_Z14StartUpdateLCDPv+0x214>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
				ssd1306_Fill(Black_);
 8001bac:	2000      	movs	r0, #0
 8001bae:	f000 fc3f 	bl	8002430 <ssd1306_Fill>
				ssd1306_SetCursor(25,0);
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2019      	movs	r0, #25
 8001bb6:	f000 fd95 	bl	80026e4 <ssd1306_SetCursor>
				ssd1306_WriteString("Pair?", Font_11x18, White_);
 8001bba:	4a25      	ldr	r2, [pc, #148]	; (8001c50 <_Z14StartUpdateLCDPv+0x20c>)
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	ca06      	ldmia	r2, {r1, r2}
 8001bc0:	4829      	ldr	r0, [pc, #164]	; (8001c68 <_Z14StartUpdateLCDPv+0x224>)
 8001bc2:	f000 fd69 	bl	8002698 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001bc6:	f000 fc57 	bl	8002478 <ssd1306_UpdateScreen>
				break;
 8001bca:	e036      	b.n	8001c3a <_Z14StartUpdateLCDPv+0x1f6>

			case 7 :
				display_run_once = 1;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <_Z14StartUpdateLCDPv+0x200>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
				display_force_update = 0;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <_Z14StartUpdateLCDPv+0x214>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
				ssd1306_Fill(Black_);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f000 fc29 	bl	8002430 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001bde:	f000 fc4b 	bl	8002478 <ssd1306_UpdateScreen>
				ssd1306_SetCursor(25,0);
 8001be2:	2100      	movs	r1, #0
 8001be4:	2019      	movs	r0, #25
 8001be6:	f000 fd7d 	bl	80026e4 <ssd1306_SetCursor>
				ssd1306_WriteString("Pairing...", Font_11x18, White_);
 8001bea:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <_Z14StartUpdateLCDPv+0x20c>)
 8001bec:	2301      	movs	r3, #1
 8001bee:	ca06      	ldmia	r2, {r1, r2}
 8001bf0:	481e      	ldr	r0, [pc, #120]	; (8001c6c <_Z14StartUpdateLCDPv+0x228>)
 8001bf2:	f000 fd51 	bl	8002698 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001bf6:	f000 fc3f 	bl	8002478 <ssd1306_UpdateScreen>
				PS4.pair();
 8001bfa:	4814      	ldr	r0, [pc, #80]	; (8001c4c <_Z14StartUpdateLCDPv+0x208>)
 8001bfc:	f7fe febb 	bl	8000976 <_ZN5BTHID4pairEv>
				while(PS4.connected() == 0) {
 8001c00:	4812      	ldr	r0, [pc, #72]	; (8001c4c <_Z14StartUpdateLCDPv+0x208>)
 8001c02:	f7fe ff9b 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2301      	moveq	r3, #1
 8001c0e:	2300      	movne	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <_Z14StartUpdateLCDPv+0x1da>
				  osDelay(100);
 8001c16:	2064      	movs	r0, #100	; 0x64
 8001c18:	f008 fb60 	bl	800a2dc <osDelay>
				while(PS4.connected() == 0) {
 8001c1c:	e7f0      	b.n	8001c00 <_Z14StartUpdateLCDPv+0x1bc>
				}
				ssd1306_SetCursor(2,26);
 8001c1e:	211a      	movs	r1, #26
 8001c20:	2002      	movs	r0, #2
 8001c22:	f000 fd5f 	bl	80026e4 <ssd1306_SetCursor>
				ssd1306_WriteString("Paired!", Font_11x18, White_);
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <_Z14StartUpdateLCDPv+0x20c>)
 8001c28:	2301      	movs	r3, #1
 8001c2a:	ca06      	ldmia	r2, {r1, r2}
 8001c2c:	4810      	ldr	r0, [pc, #64]	; (8001c70 <_Z14StartUpdateLCDPv+0x22c>)
 8001c2e:	f000 fd33 	bl	8002698 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001c32:	f000 fc21 	bl	8002478 <ssd1306_UpdateScreen>
				break;
 8001c36:	e000      	b.n	8001c3a <_Z14StartUpdateLCDPv+0x1f6>
				break;
 8001c38:	bf00      	nop
		}
	}
    osDelay(100);
 8001c3a:	2064      	movs	r0, #100	; 0x64
 8001c3c:	f008 fb4e 	bl	800a2dc <osDelay>
  }
 8001c40:	e709      	b.n	8001a56 <_Z14StartUpdateLCDPv+0x12>
 8001c42:	bf00      	nop
 8001c44:	200006a5 	.word	0x200006a5
 8001c48:	200006a0 	.word	0x200006a0
 8001c4c:	200005c4 	.word	0x200005c4
 8001c50:	20000008 	.word	0x20000008
 8001c54:	080138e8 	.word	0x080138e8
 8001c58:	200006a4 	.word	0x200006a4
 8001c5c:	080138ec 	.word	0x080138ec
 8001c60:	080138f8 	.word	0x080138f8
 8001c64:	08013900 	.word	0x08013900
 8001c68:	08013910 	.word	0x08013910
 8001c6c:	08013918 	.word	0x08013918
 8001c70:	08013924 	.word	0x08013924

08001c74 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END StartUpdateLCD */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d101      	bne.n	8001c8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c86:	f000 fd67 	bl	8002758 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40001c00 	.word	0x40001c00

08001c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	Serial.print("\r\nSomething went wrong!");
 8001c9c:	4903      	ldr	r1, [pc, #12]	; (8001cac <Error_Handler+0x14>)
 8001c9e:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <Error_Handler+0x18>)
 8001ca0:	f7fe fc8a 	bl	80005b8 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca4:	b672      	cpsid	i
}
 8001ca6:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <Error_Handler+0x10>
 8001caa:	bf00      	nop
 8001cac:	0801392c 	.word	0x0801392c
 8001cb0:	200003dc 	.word	0x200003dc

08001cb4 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 8001cbc:	f7fe fe2e 	bl	800091c <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8001cc0:	f7fe fe14 	bl	80008ec <_ZN3P103SetEv>
        spi::init();
 8001cc4:	f000 f845 	bl	8001d52 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8001cc8:	f7fe fdfa 	bl	80008c0 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 8001ccc:	2218      	movs	r2, #24
 8001cce:	2188      	movs	r1, #136	; 0x88
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f845 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f864 	bl	8001da4 <_ZN8MAX3421eI3P102P9E5resetEv>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf0c      	ite	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	2300      	movne	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf0:	e02b      	b.n	8001d4a <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 8001cf2:	22c1      	movs	r2, #193	; 0xc1
 8001cf4:	21d8      	movs	r1, #216	; 0xd8
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f832 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 8001cfc:	2260      	movs	r2, #96	; 0x60
 8001cfe:	21d0      	movs	r1, #208	; 0xd0
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f82d 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8001d06:	2204      	movs	r2, #4
 8001d08:	21e8      	movs	r1, #232	; 0xe8
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f828 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 8001d10:	21e8      	movs	r1, #232	; 0xe8
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f876 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf0c      	ite	eq
 8001d22:	2301      	moveq	r3, #1
 8001d24:	2300      	movne	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d000      	beq.n	8001d2e <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8001d2c:	e7f0      	b.n	8001d10 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f88a 	bl	8001e48 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 8001d34:	2220      	movs	r2, #32
 8001d36:	21c8      	movs	r1, #200	; 0xc8
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f811 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f80c 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
        }
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001d70:	f7fe fdc8 	bl	8000904 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 8001d7e:	78bb      	ldrb	r3, [r7, #2]
 8001d80:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8001d82:	f107 010c 	add.w	r1, r7, #12
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 8001d8e:	f003 ff30 	bl	8005bf2 <HAL_SPI_Transmit>
        SPI_SS::Set();
 8001d92:	f7fe fdab 	bl	80008ec <_ZN3P103SetEv>
        return;
 8001d96:	bf00      	nop
};
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000340 	.word	0x20000340

08001da4 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001db0:	2220      	movs	r2, #32
 8001db2:	2178      	movs	r1, #120	; 0x78
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ffd3 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2178      	movs	r1, #120	; 0x78
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffce 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001dc4:	89fb      	ldrh	r3, [r7, #14]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	81fb      	strh	r3, [r7, #14]
 8001dca:	89fb      	ldrh	r3, [r7, #14]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf14      	ite	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	2300      	moveq	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00f      	beq.n	8001dfa <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 8001dda:	2168      	movs	r1, #104	; 0x68
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f811 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d100      	bne.n	8001df8 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 8001df6:	e7e5      	b.n	8001dc4 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8001df8:	bf00      	nop
        return ( i);
 8001dfa:	89fb      	ldrh	r3, [r7, #14]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 8001e10:	f7fe fd78 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8001e14:	1cf9      	adds	r1, r7, #3
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4809      	ldr	r0, [pc, #36]	; (8001e44 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001e1e:	f003 fee8 	bl	8005bf2 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 8001e26:	f107 010f 	add.w	r1, r7, #15
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4804      	ldr	r0, [pc, #16]	; (8001e44 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001e32:	f004 f81a 	bl	8005e6a <HAL_SPI_Receive>
        SPI_SS::Set();
 8001e36:	f7fe fd59 	bl	80008ec <_ZN3P103SetEv>
        return (rv);
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000340 	.word	0x20000340

08001e48 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8001e50:	21f8      	movs	r1, #248	; 0xf8
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffd6 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e62:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	2bc0      	cmp	r3, #192	; 0xc0
 8001e68:	d04a      	beq.n	8001f00 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 8001e6a:	2bc0      	cmp	r3, #192	; 0xc0
 8001e6c:	dc55      	bgt.n	8001f1a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001e6e:	2b80      	cmp	r3, #128	; 0x80
 8001e70:	d006      	beq.n	8001e80 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 8001e72:	2b80      	cmp	r3, #128	; 0x80
 8001e74:	dc51      	bgt.n	8001f1a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d046      	beq.n	8001f08 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 8001e7a:	2b40      	cmp	r3, #64	; 0x40
 8001e7c:	d020      	beq.n	8001ec0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 8001e7e:	e04c      	b.n	8001f1a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001e80:	21d8      	movs	r1, #216	; 0xd8
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffbe 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001e9c:	22c9      	movs	r2, #201	; 0xc9
 8001e9e:	21d8      	movs	r1, #216	; 0xd8
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff5d 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	701a      	strb	r2, [r3, #0]
                        break;
 8001eac:	e035      	b.n	8001f1a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001eae:	22cb      	movs	r2, #203	; 0xcb
 8001eb0:	21d8      	movs	r1, #216	; 0xd8
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff54 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001eba:	2203      	movs	r2, #3
 8001ebc:	701a      	strb	r2, [r3, #0]
                        break;
 8001ebe:	e02c      	b.n	8001f1a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001ec0:	21d8      	movs	r1, #216	; 0xd8
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ff9e 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001edc:	22cb      	movs	r2, #203	; 0xcb
 8001ede:	21d8      	movs	r1, #216	; 0xd8
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff3d 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001ee8:	2203      	movs	r2, #3
 8001eea:	701a      	strb	r2, [r3, #0]
                        break;
 8001eec:	e015      	b.n	8001f1a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001eee:	22c9      	movs	r2, #201	; 0xc9
 8001ef0:	21d8      	movs	r1, #216	; 0xd8
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ff34 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001efa:	2202      	movs	r2, #2
 8001efc:	701a      	strb	r2, [r3, #0]
                        break;
 8001efe:	e00c      	b.n	8001f1a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
                        break;
 8001f06:	e008      	b.n	8001f1a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8001f08:	22d1      	movs	r2, #209	; 0xd1
 8001f0a:	21d8      	movs	r1, #216	; 0xd8
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff27 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
                        break;
 8001f18:	bf00      	nop
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200006c4 	.word	0x200006c4

08001f28 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d115      	bne.n	8001f64 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d110      	bne.n	8001f64 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 8001f42:	490a      	ldr	r1, [pc, #40]	; (8001f6c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001f44:	480a      	ldr	r0, [pc, #40]	; (8001f70 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001f46:	f7fe fca5 	bl	8000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 8001f4a:	480a      	ldr	r0, [pc, #40]	; (8001f74 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001f4c:	f00f fed8 	bl	8011d00 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8001f50:	4908      	ldr	r1, [pc, #32]	; (8001f74 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001f52:	4809      	ldr	r0, [pc, #36]	; (8001f78 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001f54:	f00b fcd8 	bl	800d908 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	4906      	ldr	r1, [pc, #24]	; (8001f78 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001f5e:	4808      	ldr	r0, [pc, #32]	; (8001f80 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001f60:	f7fe fdc4 	bl	8000aec <_ZN5PS4BTC1EP3BTDbPKc>
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200002a0 	.word	0x200002a0
 8001f70:	200003dc 	.word	0x200003dc
 8001f74:	200003f0 	.word	0x200003f0
 8001f78:	200004ac 	.word	0x200004ac
 8001f7c:	08013944 	.word	0x08013944
 8001f80:	200005c4 	.word	0x200005c4

08001f84 <_GLOBAL__sub_I_hi2c1>:
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f7ff ffcb 	bl	8001f28 <_Z41__static_initialization_and_destruction_0ii>
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	f06f 0001 	mvn.w	r0, #1
 8001fda:	f000 fcb9 	bl	8002950 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800

08001fec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a19      	ldr	r2, [pc, #100]	; (8002070 <HAL_I2C_MspInit+0x84>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12c      	bne.n	8002068 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_I2C_MspInit+0x88>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <HAL_I2C_MspInit+0x88>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_I2C_MspInit+0x88>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800202a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002030:	2312      	movs	r3, #18
 8002032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002034:	2301      	movs	r3, #1
 8002036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800203c:	2304      	movs	r3, #4
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	480c      	ldr	r0, [pc, #48]	; (8002078 <HAL_I2C_MspInit+0x8c>)
 8002048:	f000 fcac 	bl	80029a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_I2C_MspInit+0x88>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_I2C_MspInit+0x88>)
 8002056:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800205a:	6413      	str	r3, [r2, #64]	; 0x40
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_I2C_MspInit+0x88>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002068:	bf00      	nop
 800206a:	3728      	adds	r7, #40	; 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40005400 	.word	0x40005400
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400

0800207c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a19      	ldr	r2, [pc, #100]	; (8002100 <HAL_SPI_MspInit+0x84>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d12b      	bne.n	80020f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_SPI_MspInit+0x88>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_SPI_MspInit+0x88>)
 80020a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_SPI_MspInit+0x88>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_SPI_MspInit+0x88>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <HAL_SPI_MspInit+0x88>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_SPI_MspInit+0x88>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020d6:	23e0      	movs	r3, #224	; 0xe0
 80020d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020e6:	2305      	movs	r3, #5
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	4805      	ldr	r0, [pc, #20]	; (8002108 <HAL_SPI_MspInit+0x8c>)
 80020f2:	f000 fc57 	bl	80029a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020f6:	bf00      	nop
 80020f8:	3728      	adds	r7, #40	; 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40013000 	.word	0x40013000
 8002104:	40023800 	.word	0x40023800
 8002108:	40020000 	.word	0x40020000

0800210c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <HAL_TIM_Base_MspInit+0x48>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d115      	bne.n	800214a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_TIM_Base_MspInit+0x4c>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <HAL_TIM_Base_MspInit+0x4c>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_TIM_Base_MspInit+0x4c>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2105      	movs	r1, #5
 800213e:	202d      	movs	r0, #45	; 0x2d
 8002140:	f000 fc06 	bl	8002950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002144:	202d      	movs	r0, #45	; 0x2d
 8002146:	f000 fc1f 	bl	8002988 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40002000 	.word	0x40002000
 8002158:	40023800 	.word	0x40023800

0800215c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a19      	ldr	r2, [pc, #100]	; (80021e0 <HAL_UART_MspInit+0x84>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d12b      	bne.n	80021d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_UART_MspInit+0x88>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a17      	ldr	r2, [pc, #92]	; (80021e4 <HAL_UART_MspInit+0x88>)
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_UART_MspInit+0x88>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_UART_MspInit+0x88>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a10      	ldr	r2, [pc, #64]	; (80021e4 <HAL_UART_MspInit+0x88>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_UART_MspInit+0x88>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021b6:	230c      	movs	r3, #12
 80021b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c6:	2307      	movs	r3, #7
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <HAL_UART_MspInit+0x8c>)
 80021d2:	f000 fbe7 	bl	80029a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021d6:	bf00      	nop
 80021d8:	3728      	adds	r7, #40	; 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40004400 	.word	0x40004400
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020000 	.word	0x40020000

080021ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	202c      	movs	r0, #44	; 0x2c
 8002202:	f000 fba5 	bl	8002950 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002206:	202c      	movs	r0, #44	; 0x2c
 8002208:	f000 fbbe 	bl	8002988 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_InitTick+0xa4>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	4a1e      	ldr	r2, [pc, #120]	; (8002290 <HAL_InitTick+0xa4>)
 8002216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221a:	6413      	str	r3, [r2, #64]	; 0x40
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_InitTick+0xa4>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002228:	f107 0210 	add.w	r2, r7, #16
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f002 fca8 	bl	8004b88 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002238:	f002 fc7e 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 800223c:	4603      	mov	r3, r0
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	4a13      	ldr	r2, [pc, #76]	; (8002294 <HAL_InitTick+0xa8>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0c9b      	lsrs	r3, r3, #18
 800224c:	3b01      	subs	r3, #1
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_InitTick+0xac>)
 8002252:	4a12      	ldr	r2, [pc, #72]	; (800229c <HAL_InitTick+0xb0>)
 8002254:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_InitTick+0xac>)
 8002258:	f240 32e7 	movw	r2, #999	; 0x3e7
 800225c:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 800225e:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_InitTick+0xac>)
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <HAL_InitTick+0xac>)
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_InitTick+0xac>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8002270:	4809      	ldr	r0, [pc, #36]	; (8002298 <HAL_InitTick+0xac>)
 8002272:	f004 f9dd 	bl	8006630 <HAL_TIM_Base_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d104      	bne.n	8002286 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 800227c:	4806      	ldr	r0, [pc, #24]	; (8002298 <HAL_InitTick+0xac>)
 800227e:	f004 fa27 	bl	80066d0 <HAL_TIM_Base_Start_IT>
 8002282:	4603      	mov	r3, r0
 8002284:	e000      	b.n	8002288 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
}
 8002288:	4618      	mov	r0, r3
 800228a:	3730      	adds	r7, #48	; 0x30
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	431bde83 	.word	0x431bde83
 8002298:	2000540c 	.word	0x2000540c
 800229c:	40001c00 	.word	0x40001c00

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler+0x4>

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <TIM8_UP_TIM13_IRQHandler+0x10>)
 80022d2:	f004 fa6d 	bl	80067b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000540c 	.word	0x2000540c

080022e0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80022e6:	f004 fa63 	bl	80067b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200002e4 	.word	0x200002e4

080022f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <OTG_FS_IRQHandler+0x10>)
 80022fa:	f001 facb 	bl	8003894 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20005968 	.word	0x20005968

08002308 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
	return 1;
 800230c:	2301      	movs	r3, #1
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_kill>:

int _kill(int pid, int sig)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002322:	f011 f9d7 	bl	80136d4 <__errno>
 8002326:	4603      	mov	r3, r0
 8002328:	2216      	movs	r2, #22
 800232a:	601a      	str	r2, [r3, #0]
	return -1;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <_exit>:

void _exit (int status)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ffe7 	bl	8002318 <_kill>
	while (1) {}		/* Make sure we hang here */
 800234a:	e7fe      	b.n	800234a <_exit+0x12>

0800234c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <SystemInit+0x28>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	4a07      	ldr	r2, [pc, #28]	; (8002374 <SystemInit+0x28>)
 8002358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800235c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <SystemInit+0x28>)
 8002362:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002366:	609a      	str	r2, [r3, #8]
#endif
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800237c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800237e:	e003      	b.n	8002388 <LoopCopyDataInit>

08002380 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002382:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002384:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002386:	3104      	adds	r1, #4

08002388 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002388:	480b      	ldr	r0, [pc, #44]	; (80023b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800238c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800238e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002390:	d3f6      	bcc.n	8002380 <CopyDataInit>
  ldr  r2, =_sbss
 8002392:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002394:	e002      	b.n	800239c <LoopFillZerobss>

08002396 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002396:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002398:	f842 3b04 	str.w	r3, [r2], #4

0800239c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800239e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023a0:	d3f9      	bcc.n	8002396 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023a2:	f7ff ffd3 	bl	800234c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023a6:	f011 f99b 	bl	80136e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023aa:	f7fe fc73 	bl	8000c94 <main>
  bx  lr    
 80023ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80023b4:	08014a64 	.word	0x08014a64
  ldr  r0, =_sdata
 80023b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023bc:	200001b0 	.word	0x200001b0
  ldr  r2, =_sbss
 80023c0:	200001b0 	.word	0x200001b0
  ldr  r3, = _ebss
 80023c4:	20005d74 	.word	0x20005d74

080023c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c8:	e7fe      	b.n	80023c8 <ADC_IRQHandler>
	...

080023cc <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af04      	add	r7, sp, #16
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	9302      	str	r3, [sp, #8]
 80023dc:	2301      	movs	r3, #1
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	1dfb      	adds	r3, r7, #7
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2301      	movs	r3, #1
 80023e6:	2200      	movs	r2, #0
 80023e8:	2178      	movs	r1, #120	; 0x78
 80023ea:	4803      	ldr	r0, [pc, #12]	; (80023f8 <ssd1306_WriteCommand+0x2c>)
 80023ec:	f000 fde4 	bl	8002fb8 <HAL_I2C_Mem_Write>
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	200001f4 	.word	0x200001f4

080023fc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af04      	add	r7, sp, #16
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	f04f 32ff 	mov.w	r2, #4294967295
 800240e:	9202      	str	r2, [sp, #8]
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2301      	movs	r3, #1
 8002418:	2240      	movs	r2, #64	; 0x40
 800241a:	2178      	movs	r1, #120	; 0x78
 800241c:	4803      	ldr	r0, [pc, #12]	; (800242c <ssd1306_WriteData+0x30>)
 800241e:	f000 fdcb 	bl	8002fb8 <HAL_I2C_Mem_Write>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200001f4 	.word	0x200001f4

08002430 <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	e00d      	b.n	800245c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black_) ? 0x00 : 0xFF;
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <ssd1306_Fill+0x1a>
 8002446:	2100      	movs	r1, #0
 8002448:	e000      	b.n	800244c <ssd1306_Fill+0x1c>
 800244a:	21ff      	movs	r1, #255	; 0xff
 800244c:	4a09      	ldr	r2, [pc, #36]	; (8002474 <ssd1306_Fill+0x44>)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4413      	add	r3, r2
 8002452:	460a      	mov	r2, r1
 8002454:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3301      	adds	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002462:	d3ed      	bcc.n	8002440 <ssd1306_Fill+0x10>
    }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	200006c8 	.word	0x200006c8

08002478 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800247e:	2300      	movs	r3, #0
 8002480:	71fb      	strb	r3, [r7, #7]
 8002482:	e016      	b.n	80024b2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	3b50      	subs	r3, #80	; 0x50
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff9e 	bl	80023cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff ff9b 	bl	80023cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002496:	2010      	movs	r0, #16
 8002498:	f7ff ff98 	bl	80023cc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	01db      	lsls	r3, r3, #7
 80024a0:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <ssd1306_UpdateScreen+0x4c>)
 80024a2:	4413      	add	r3, r2
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ffa8 	bl	80023fc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	3301      	adds	r3, #1
 80024b0:	71fb      	strb	r3, [r7, #7]
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	2b07      	cmp	r3, #7
 80024b6:	d9e5      	bls.n	8002484 <ssd1306_UpdateScreen+0xc>
    }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200006c8 	.word	0x200006c8

080024c8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
 80024d2:	460b      	mov	r3, r1
 80024d4:	71bb      	strb	r3, [r7, #6]
 80024d6:	4613      	mov	r3, r2
 80024d8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db48      	blt.n	8002574 <ssd1306_DrawPixel+0xac>
 80024e2:	79bb      	ldrb	r3, [r7, #6]
 80024e4:	2b3f      	cmp	r3, #63	; 0x3f
 80024e6:	d845      	bhi.n	8002574 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <ssd1306_DrawPixel+0xb8>)
 80024ea:	791b      	ldrb	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d006      	beq.n	80024fe <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80024f0:	797b      	ldrb	r3, [r7, #5]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bf0c      	ite	eq
 80024f6:	2301      	moveq	r3, #1
 80024f8:	2300      	movne	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White_) {
 80024fe:	797b      	ldrb	r3, [r7, #5]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d11a      	bne.n	800253a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002504:	79fa      	ldrb	r2, [r7, #7]
 8002506:	79bb      	ldrb	r3, [r7, #6]
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	b2d8      	uxtb	r0, r3
 800250c:	4603      	mov	r3, r0
 800250e:	01db      	lsls	r3, r3, #7
 8002510:	4413      	add	r3, r2
 8002512:	4a1c      	ldr	r2, [pc, #112]	; (8002584 <ssd1306_DrawPixel+0xbc>)
 8002514:	5cd3      	ldrb	r3, [r2, r3]
 8002516:	b25a      	sxtb	r2, r3
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	b25b      	sxtb	r3, r3
 8002526:	4313      	orrs	r3, r2
 8002528:	b259      	sxtb	r1, r3
 800252a:	79fa      	ldrb	r2, [r7, #7]
 800252c:	4603      	mov	r3, r0
 800252e:	01db      	lsls	r3, r3, #7
 8002530:	4413      	add	r3, r2
 8002532:	b2c9      	uxtb	r1, r1
 8002534:	4a13      	ldr	r2, [pc, #76]	; (8002584 <ssd1306_DrawPixel+0xbc>)
 8002536:	54d1      	strb	r1, [r2, r3]
 8002538:	e01d      	b.n	8002576 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800253a:	79fa      	ldrb	r2, [r7, #7]
 800253c:	79bb      	ldrb	r3, [r7, #6]
 800253e:	08db      	lsrs	r3, r3, #3
 8002540:	b2d8      	uxtb	r0, r3
 8002542:	4603      	mov	r3, r0
 8002544:	01db      	lsls	r3, r3, #7
 8002546:	4413      	add	r3, r2
 8002548:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <ssd1306_DrawPixel+0xbc>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	b25a      	sxtb	r2, r3
 800254e:	79bb      	ldrb	r3, [r7, #6]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	2101      	movs	r1, #1
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	b25b      	sxtb	r3, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	b25b      	sxtb	r3, r3
 8002560:	4013      	ands	r3, r2
 8002562:	b259      	sxtb	r1, r3
 8002564:	79fa      	ldrb	r2, [r7, #7]
 8002566:	4603      	mov	r3, r0
 8002568:	01db      	lsls	r3, r3, #7
 800256a:	4413      	add	r3, r2
 800256c:	b2c9      	uxtb	r1, r1
 800256e:	4a05      	ldr	r2, [pc, #20]	; (8002584 <ssd1306_DrawPixel+0xbc>)
 8002570:	54d1      	strb	r1, [r2, r3]
 8002572:	e000      	b.n	8002576 <ssd1306_DrawPixel+0xae>
        return;
 8002574:	bf00      	nop
    }
}
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	20000ac8 	.word	0x20000ac8
 8002584:	200006c8 	.word	0x200006c8

08002588 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	4604      	mov	r4, r0
 8002590:	1d38      	adds	r0, r7, #4
 8002592:	e880 0006 	stmia.w	r0, {r1, r2}
 8002596:	461a      	mov	r2, r3
 8002598:	4623      	mov	r3, r4
 800259a:	73fb      	strb	r3, [r7, #15]
 800259c:	4613      	mov	r3, r2
 800259e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b1f      	cmp	r3, #31
 80025a4:	d902      	bls.n	80025ac <ssd1306_WriteChar+0x24>
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b7e      	cmp	r3, #126	; 0x7e
 80025aa:	d901      	bls.n	80025b0 <ssd1306_WriteChar+0x28>
        return 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e06d      	b.n	800268c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <ssd1306_WriteChar+0x10c>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	793b      	ldrb	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	2b80      	cmp	r3, #128	; 0x80
 80025bc:	dc06      	bgt.n	80025cc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80025be:	4b35      	ldr	r3, [pc, #212]	; (8002694 <ssd1306_WriteChar+0x10c>)
 80025c0:	885b      	ldrh	r3, [r3, #2]
 80025c2:	461a      	mov	r2, r3
 80025c4:	797b      	ldrb	r3, [r7, #5]
 80025c6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	dd01      	ble.n	80025d0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e05d      	b.n	800268c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	e04c      	b.n	8002670 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	3b20      	subs	r3, #32
 80025dc:	7979      	ldrb	r1, [r7, #5]
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	4619      	mov	r1, r3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	440b      	add	r3, r1
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	e034      	b.n	8002660 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d012      	beq.n	800262c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <ssd1306_WriteChar+0x10c>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	4413      	add	r3, r2
 8002612:	b2d8      	uxtb	r0, r3
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <ssd1306_WriteChar+0x10c>)
 8002616:	885b      	ldrh	r3, [r3, #2]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	4413      	add	r3, r2
 8002620:	b2db      	uxtb	r3, r3
 8002622:	7bba      	ldrb	r2, [r7, #14]
 8002624:	4619      	mov	r1, r3
 8002626:	f7ff ff4f 	bl	80024c8 <ssd1306_DrawPixel>
 800262a:	e016      	b.n	800265a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <ssd1306_WriteChar+0x10c>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	4413      	add	r3, r2
 8002638:	b2d8      	uxtb	r0, r3
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <ssd1306_WriteChar+0x10c>)
 800263c:	885b      	ldrh	r3, [r3, #2]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	4413      	add	r3, r2
 8002646:	b2d9      	uxtb	r1, r3
 8002648:	7bbb      	ldrb	r3, [r7, #14]
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	f7ff ff37 	bl	80024c8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	3301      	adds	r3, #1
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	793b      	ldrb	r3, [r7, #4]
 8002662:	461a      	mov	r2, r3
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4293      	cmp	r3, r2
 8002668:	d3c5      	bcc.n	80025f6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3301      	adds	r3, #1
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	797b      	ldrb	r3, [r7, #5]
 8002672:	461a      	mov	r2, r3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4293      	cmp	r3, r2
 8002678:	d3ad      	bcc.n	80025d6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <ssd1306_WriteChar+0x10c>)
 800267c:	881a      	ldrh	r2, [r3, #0]
 800267e:	793b      	ldrb	r3, [r7, #4]
 8002680:	b29b      	uxth	r3, r3
 8002682:	4413      	add	r3, r2
 8002684:	b29a      	uxth	r2, r3
 8002686:	4b03      	ldr	r3, [pc, #12]	; (8002694 <ssd1306_WriteChar+0x10c>)
 8002688:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3724      	adds	r7, #36	; 0x24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd90      	pop	{r4, r7, pc}
 8002694:	20000ac8 	.word	0x20000ac8

08002698 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	1d38      	adds	r0, r7, #4
 80026a2:	e880 0006 	stmia.w	r0, {r1, r2}
 80026a6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80026a8:	e012      	b.n	80026d0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	7818      	ldrb	r0, [r3, #0]
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	1d3a      	adds	r2, r7, #4
 80026b2:	ca06      	ldmia	r2, {r1, r2}
 80026b4:	f7ff ff68 	bl	8002588 <ssd1306_WriteChar>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d002      	beq.n	80026ca <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	e008      	b.n	80026dc <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3301      	adds	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e8      	bne.n	80026aa <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	781b      	ldrb	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	460a      	mov	r2, r1
 80026ee:	71fb      	strb	r3, [r7, #7]
 80026f0:	4613      	mov	r3, r2
 80026f2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <ssd1306_SetCursor+0x2c>)
 80026fa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80026fc:	79bb      	ldrb	r3, [r7, #6]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <ssd1306_SetCursor+0x2c>)
 8002702:	805a      	strh	r2, [r3, #2]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	20000ac8 	.word	0x20000ac8

08002714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <HAL_Init+0x40>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <HAL_Init+0x40>)
 800272a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a07      	ldr	r2, [pc, #28]	; (8002754 <HAL_Init+0x40>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800273c:	2003      	movs	r0, #3
 800273e:	f000 f8fc 	bl	800293a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002742:	2000      	movs	r0, #0
 8002744:	f7ff fd52 	bl	80021ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002748:	f7ff fc24 	bl	8001f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00

08002758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_IncTick+0x20>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_IncTick+0x24>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4413      	add	r3, r2
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <HAL_IncTick+0x24>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000014 	.word	0x20000014
 800277c:	20005454 	.word	0x20005454

08002780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return uwTick;
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_GetTick+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20005454 	.word	0x20005454

08002798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7ff ffee 	bl	8002780 <HAL_GetTick>
 80027a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d005      	beq.n	80027be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_Delay+0x44>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027be:	bf00      	nop
 80027c0:	f7ff ffde 	bl	8002780 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d8f7      	bhi.n	80027c0 <HAL_Delay+0x28>
  {
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000014 	.word	0x20000014

080027e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <__NVIC_SetPriorityGrouping+0x44>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027fc:	4013      	ands	r3, r2
 80027fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800280c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002812:	4a04      	ldr	r2, [pc, #16]	; (8002824 <__NVIC_SetPriorityGrouping+0x44>)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	60d3      	str	r3, [r2, #12]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <__NVIC_GetPriorityGrouping+0x18>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	0a1b      	lsrs	r3, r3, #8
 8002832:	f003 0307 	and.w	r3, r3, #7
}
 8002836:	4618      	mov	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	2b00      	cmp	r3, #0
 8002854:	db0b      	blt.n	800286e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	f003 021f 	and.w	r2, r3, #31
 800285c:	4907      	ldr	r1, [pc, #28]	; (800287c <__NVIC_EnableIRQ+0x38>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2001      	movs	r0, #1
 8002866:	fa00 f202 	lsl.w	r2, r0, r2
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000e100 	.word	0xe000e100

08002880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002890:	2b00      	cmp	r3, #0
 8002892:	db0a      	blt.n	80028aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	490c      	ldr	r1, [pc, #48]	; (80028cc <__NVIC_SetPriority+0x4c>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	0112      	lsls	r2, r2, #4
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	440b      	add	r3, r1
 80028a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a8:	e00a      	b.n	80028c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4908      	ldr	r1, [pc, #32]	; (80028d0 <__NVIC_SetPriority+0x50>)
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	3b04      	subs	r3, #4
 80028b8:	0112      	lsls	r2, r2, #4
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	440b      	add	r3, r1
 80028be:	761a      	strb	r2, [r3, #24]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000e100 	.word	0xe000e100
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f1c3 0307 	rsb	r3, r3, #7
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	bf28      	it	cs
 80028f2:	2304      	movcs	r3, #4
 80028f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d902      	bls.n	8002904 <NVIC_EncodePriority+0x30>
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3b03      	subs	r3, #3
 8002902:	e000      	b.n	8002906 <NVIC_EncodePriority+0x32>
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	f04f 32ff 	mov.w	r2, #4294967295
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43da      	mvns	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	401a      	ands	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800291c:	f04f 31ff 	mov.w	r1, #4294967295
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	43d9      	mvns	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	4313      	orrs	r3, r2
         );
}
 800292e:	4618      	mov	r0, r3
 8002930:	3724      	adds	r7, #36	; 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ff4c 	bl	80027e0 <__NVIC_SetPriorityGrouping>
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002962:	f7ff ff61 	bl	8002828 <__NVIC_GetPriorityGrouping>
 8002966:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	6978      	ldr	r0, [r7, #20]
 800296e:	f7ff ffb1 	bl	80028d4 <NVIC_EncodePriority>
 8002972:	4602      	mov	r2, r0
 8002974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff80 	bl	8002880 <__NVIC_SetPriority>
}
 8002980:	bf00      	nop
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff54 	bl	8002844 <__NVIC_EnableIRQ>
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e165      	b.n	8002c8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	429a      	cmp	r2, r3
 80029da:	f040 8154 	bne.w	8002c86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d005      	beq.n	80029f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d130      	bne.n	8002a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 0201 	and.w	r2, r3, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d017      	beq.n	8002a94 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d123      	bne.n	8002ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	08da      	lsrs	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3208      	adds	r2, #8
 8002aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	08da      	lsrs	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3208      	adds	r2, #8
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0203 	and.w	r2, r3, #3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80ae 	beq.w	8002c86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_GPIO_Init+0x300>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	4a5c      	ldr	r2, [pc, #368]	; (8002ca4 <HAL_GPIO_Init+0x300>)
 8002b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b38:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3a:	4b5a      	ldr	r3, [pc, #360]	; (8002ca4 <HAL_GPIO_Init+0x300>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b46:	4a58      	ldr	r2, [pc, #352]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4f      	ldr	r2, [pc, #316]	; (8002cac <HAL_GPIO_Init+0x308>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d025      	beq.n	8002bbe <HAL_GPIO_Init+0x21a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4e      	ldr	r2, [pc, #312]	; (8002cb0 <HAL_GPIO_Init+0x30c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d01f      	beq.n	8002bba <HAL_GPIO_Init+0x216>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4d      	ldr	r2, [pc, #308]	; (8002cb4 <HAL_GPIO_Init+0x310>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d019      	beq.n	8002bb6 <HAL_GPIO_Init+0x212>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4c      	ldr	r2, [pc, #304]	; (8002cb8 <HAL_GPIO_Init+0x314>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_GPIO_Init+0x20e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4b      	ldr	r2, [pc, #300]	; (8002cbc <HAL_GPIO_Init+0x318>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00d      	beq.n	8002bae <HAL_GPIO_Init+0x20a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4a      	ldr	r2, [pc, #296]	; (8002cc0 <HAL_GPIO_Init+0x31c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <HAL_GPIO_Init+0x206>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a49      	ldr	r2, [pc, #292]	; (8002cc4 <HAL_GPIO_Init+0x320>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_GPIO_Init+0x202>
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	e00c      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002ba6:	2307      	movs	r3, #7
 8002ba8:	e00a      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002baa:	2305      	movs	r3, #5
 8002bac:	e008      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002bae:	2304      	movs	r3, #4
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e004      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e002      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	f002 0203 	and.w	r2, r2, #3
 8002bc6:	0092      	lsls	r2, r2, #2
 8002bc8:	4093      	lsls	r3, r2
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd0:	4935      	ldr	r1, [pc, #212]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bde:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c02:	4a31      	ldr	r2, [pc, #196]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c08:	4b2f      	ldr	r3, [pc, #188]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c2c:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c32:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c56:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c80:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b0f      	cmp	r3, #15
 8002c90:	f67f ae96 	bls.w	80029c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3724      	adds	r7, #36	; 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40013800 	.word	0x40013800
 8002cac:	40020000 	.word	0x40020000
 8002cb0:	40020400 	.word	0x40020400
 8002cb4:	40020800 	.word	0x40020800
 8002cb8:	40020c00 	.word	0x40020c00
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40021400 	.word	0x40021400
 8002cc4:	40021800 	.word	0x40021800
 8002cc8:	40013c00 	.word	0x40013c00

08002ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	887b      	ldrh	r3, [r7, #2]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	e001      	b.n	8002cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	807b      	strh	r3, [r7, #2]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d0c:	787b      	ldrb	r3, [r7, #1]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d12:	887a      	ldrh	r2, [r7, #2]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d18:	e003      	b.n	8002d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d1a:	887b      	ldrh	r3, [r7, #2]
 8002d1c:	041a      	lsls	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	619a      	str	r2, [r3, #24]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e12b      	b.n	8002f9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff f948 	bl	8001fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d94:	f001 fed0 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 8002d98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4a81      	ldr	r2, [pc, #516]	; (8002fa4 <HAL_I2C_Init+0x274>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d807      	bhi.n	8002db4 <HAL_I2C_Init+0x84>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4a80      	ldr	r2, [pc, #512]	; (8002fa8 <HAL_I2C_Init+0x278>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	bf94      	ite	ls
 8002dac:	2301      	movls	r3, #1
 8002dae:	2300      	movhi	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e006      	b.n	8002dc2 <HAL_I2C_Init+0x92>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a7d      	ldr	r2, [pc, #500]	; (8002fac <HAL_I2C_Init+0x27c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0e7      	b.n	8002f9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a78      	ldr	r2, [pc, #480]	; (8002fb0 <HAL_I2C_Init+0x280>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	0c9b      	lsrs	r3, r3, #18
 8002dd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a6a      	ldr	r2, [pc, #424]	; (8002fa4 <HAL_I2C_Init+0x274>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d802      	bhi.n	8002e04 <HAL_I2C_Init+0xd4>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	3301      	adds	r3, #1
 8002e02:	e009      	b.n	8002e18 <HAL_I2C_Init+0xe8>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <HAL_I2C_Init+0x284>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	3301      	adds	r3, #1
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	495c      	ldr	r1, [pc, #368]	; (8002fa4 <HAL_I2C_Init+0x274>)
 8002e34:	428b      	cmp	r3, r1
 8002e36:	d819      	bhi.n	8002e6c <HAL_I2C_Init+0x13c>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1e59      	subs	r1, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e46:	1c59      	adds	r1, r3, #1
 8002e48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e4c:	400b      	ands	r3, r1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_I2C_Init+0x138>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1e59      	subs	r1, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e66:	e051      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	e04f      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d111      	bne.n	8002e98 <HAL_I2C_Init+0x168>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1e58      	subs	r0, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	440b      	add	r3, r1
 8002e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e86:	3301      	adds	r3, #1
 8002e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e012      	b.n	8002ebe <HAL_I2C_Init+0x18e>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	0099      	lsls	r1, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Init+0x196>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e022      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10e      	bne.n	8002eec <HAL_I2C_Init+0x1bc>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1e58      	subs	r0, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	440b      	add	r3, r1
 8002edc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eea:	e00f      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1e58      	subs	r0, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	0099      	lsls	r1, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	6809      	ldr	r1, [r1, #0]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6911      	ldr	r1, [r2, #16]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68d2      	ldr	r2, [r2, #12]
 8002f46:	4311      	orrs	r1, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	000186a0 	.word	0x000186a0
 8002fa8:	001e847f 	.word	0x001e847f
 8002fac:	003d08ff 	.word	0x003d08ff
 8002fb0:	431bde83 	.word	0x431bde83
 8002fb4:	10624dd3 	.word	0x10624dd3

08002fb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	817b      	strh	r3, [r7, #10]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	813b      	strh	r3, [r7, #8]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd2:	f7ff fbd5 	bl	8002780 <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	f040 80d9 	bne.w	8003198 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	2319      	movs	r3, #25
 8002fec:	2201      	movs	r2, #1
 8002fee:	496d      	ldr	r1, [pc, #436]	; (80031a4 <HAL_I2C_Mem_Write+0x1ec>)
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f971 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e0cc      	b.n	800319a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_I2C_Mem_Write+0x56>
 800300a:	2302      	movs	r3, #2
 800300c:	e0c5      	b.n	800319a <HAL_I2C_Mem_Write+0x1e2>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d007      	beq.n	8003034 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003042:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2221      	movs	r2, #33	; 0x21
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2240      	movs	r2, #64	; 0x40
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a3a      	ldr	r2, [r7, #32]
 800305e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a4d      	ldr	r2, [pc, #308]	; (80031a8 <HAL_I2C_Mem_Write+0x1f0>)
 8003074:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003076:	88f8      	ldrh	r0, [r7, #6]
 8003078:	893a      	ldrh	r2, [r7, #8]
 800307a:	8979      	ldrh	r1, [r7, #10]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	4603      	mov	r3, r0
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f890 	bl	80031ac <I2C_RequestMemoryWrite>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d052      	beq.n	8003138 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e081      	b.n	800319a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f9f2 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d107      	bne.n	80030be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e06b      	b.n	800319a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	781a      	ldrb	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d11b      	bne.n	8003138 <HAL_I2C_Mem_Write+0x180>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	d017      	beq.n	8003138 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	781a      	ldrb	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1aa      	bne.n	8003096 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f9de 	bl	8003506 <I2C_WaitOnBTFFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	2b04      	cmp	r3, #4
 8003156:	d107      	bne.n	8003168 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003166:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e016      	b.n	800319a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	e000      	b.n	800319a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003198:	2302      	movs	r3, #2
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	00100002 	.word	0x00100002
 80031a8:	ffff0000 	.word	0xffff0000

080031ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	4608      	mov	r0, r1
 80031b6:	4611      	mov	r1, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	817b      	strh	r3, [r7, #10]
 80031be:	460b      	mov	r3, r1
 80031c0:	813b      	strh	r3, [r7, #8]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	2200      	movs	r2, #0
 80031de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f878 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00d      	beq.n	800320a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fc:	d103      	bne.n	8003206 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e05f      	b.n	80032ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800320a:	897b      	ldrh	r3, [r7, #10]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003218:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	6a3a      	ldr	r2, [r7, #32]
 800321e:	492d      	ldr	r1, [pc, #180]	; (80032d4 <I2C_RequestMemoryWrite+0x128>)
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f8b0 	bl	8003386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e04c      	b.n	80032ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003248:	6a39      	ldr	r1, [r7, #32]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f91a 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00d      	beq.n	8003272 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	2b04      	cmp	r3, #4
 800325c:	d107      	bne.n	800326e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e02b      	b.n	80032ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003278:	893b      	ldrh	r3, [r7, #8]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	611a      	str	r2, [r3, #16]
 8003282:	e021      	b.n	80032c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003284:	893b      	ldrh	r3, [r7, #8]
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	b29b      	uxth	r3, r3
 800328a:	b2da      	uxtb	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003294:	6a39      	ldr	r1, [r7, #32]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f8f4 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d107      	bne.n	80032ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e005      	b.n	80032ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032be:	893b      	ldrh	r3, [r7, #8]
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	00010002 	.word	0x00010002

080032d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e8:	e025      	b.n	8003336 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d021      	beq.n	8003336 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7ff fa45 	bl	8002780 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d116      	bne.n	8003336 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f043 0220 	orr.w	r2, r3, #32
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e023      	b.n	800337e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b01      	cmp	r3, #1
 800333e:	d10d      	bne.n	800335c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	43da      	mvns	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4013      	ands	r3, r2
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	bf0c      	ite	eq
 8003352:	2301      	moveq	r3, #1
 8003354:	2300      	movne	r3, #0
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	e00c      	b.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	43da      	mvns	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4013      	ands	r3, r2
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	429a      	cmp	r2, r3
 800337a:	d0b6      	beq.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003394:	e051      	b.n	800343a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a4:	d123      	bne.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0204 	orr.w	r2, r3, #4
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e046      	b.n	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d021      	beq.n	800343a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7ff f9c3 	bl	8002780 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d116      	bne.n	800343a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f043 0220 	orr.w	r2, r3, #32
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e020      	b.n	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	d10c      	bne.n	800345e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	43da      	mvns	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4013      	ands	r3, r2
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	bf14      	ite	ne
 8003456:	2301      	movne	r3, #1
 8003458:	2300      	moveq	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	e00b      	b.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	43da      	mvns	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4013      	ands	r3, r2
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d18d      	bne.n	8003396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003490:	e02d      	b.n	80034ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f878 	bl	8003588 <I2C_IsAcknowledgeFailed>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e02d      	b.n	80034fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d021      	beq.n	80034ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7ff f969 	bl	8002780 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d116      	bne.n	80034ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f043 0220 	orr.w	r2, r3, #32
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e007      	b.n	80034fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d1ca      	bne.n	8003492 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003512:	e02d      	b.n	8003570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f837 	bl	8003588 <I2C_IsAcknowledgeFailed>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e02d      	b.n	8003580 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d021      	beq.n	8003570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352c:	f7ff f928 	bl	8002780 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	429a      	cmp	r2, r3
 800353a:	d302      	bcc.n	8003542 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d116      	bne.n	8003570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f043 0220 	orr.w	r2, r3, #32
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e007      	b.n	8003580 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b04      	cmp	r3, #4
 800357c:	d1ca      	bne.n	8003514 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359e:	d11b      	bne.n	80035d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f043 0204 	orr.w	r2, r3, #4
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e8:	b08f      	sub	sp, #60	; 0x3c
 80035ea:	af0a      	add	r7, sp, #40	; 0x28
 80035ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e116      	b.n	8003826 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f009 fc1a 	bl	800ce4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2203      	movs	r2, #3
 800361c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d102      	bne.n	8003632 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f003 ff47 	bl	80074ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	687e      	ldr	r6, [r7, #4]
 8003644:	466d      	mov	r5, sp
 8003646:	f106 0410 	add.w	r4, r6, #16
 800364a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800364e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003652:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003656:	e885 0003 	stmia.w	r5, {r0, r1}
 800365a:	1d33      	adds	r3, r6, #4
 800365c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800365e:	6838      	ldr	r0, [r7, #0]
 8003660:	f003 fe1e 	bl	80072a0 <USB_CoreInit>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0d7      	b.n	8003826 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2100      	movs	r1, #0
 800367c:	4618      	mov	r0, r3
 800367e:	f003 ff35 	bl	80074ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]
 8003686:	e04a      	b.n	800371e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	333d      	adds	r3, #61	; 0x3d
 8003698:	2201      	movs	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	333c      	adds	r3, #60	; 0x3c
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	b298      	uxth	r0, r3
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3342      	adds	r3, #66	; 0x42
 80036c4:	4602      	mov	r2, r0
 80036c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	333f      	adds	r3, #63	; 0x3f
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	3344      	adds	r3, #68	; 0x44
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	3348      	adds	r3, #72	; 0x48
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	3350      	adds	r3, #80	; 0x50
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	3301      	adds	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	7bfa      	ldrb	r2, [r7, #15]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	d3af      	bcc.n	8003688 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	e044      	b.n	80037b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003756:	7bfa      	ldrb	r2, [r7, #15]
 8003758:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	3301      	adds	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	7bfa      	ldrb	r2, [r7, #15]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d3b5      	bcc.n	800372e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	687e      	ldr	r6, [r7, #4]
 80037ca:	466d      	mov	r5, sp
 80037cc:	f106 0410 	add.w	r4, r6, #16
 80037d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80037e0:	1d33      	adds	r3, r6, #4
 80037e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037e4:	6838      	ldr	r0, [r7, #0]
 80037e6:	f003 feab 	bl	8007540 <USB_DevInit>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e014      	b.n	8003826 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	2b01      	cmp	r3, #1
 8003812:	d102      	bne.n	800381a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f001 f879 	bl	800490c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f004 fee6 	bl	80085f0 <USB_DevDisconnect>

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800382e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_PCD_Start+0x1c>
 8003846:	2302      	movs	r3, #2
 8003848:	e020      	b.n	800388c <HAL_PCD_Start+0x5e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	2b01      	cmp	r3, #1
 8003858:	d109      	bne.n	800386e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800385e:	2b01      	cmp	r3, #1
 8003860:	d005      	beq.n	800386e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f003 fe18 	bl	80074a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f004 fe96 	bl	80085ae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b08d      	sub	sp, #52	; 0x34
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f004 ff54 	bl	8008758 <USB_GetMode>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 83ca 	bne.w	800404c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f004 feb8 	bl	8008632 <USB_ReadInterrupts>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 83c0 	beq.w	800404a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f004 feaf 	bl	8008632 <USB_ReadInterrupts>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d107      	bne.n	80038ee <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f002 0202 	and.w	r2, r2, #2
 80038ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f004 fe9d 	bl	8008632 <USB_ReadInterrupts>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d161      	bne.n	80039c6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0210 	bic.w	r2, r2, #16
 8003910:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f003 020f 	and.w	r2, r3, #15
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	3304      	adds	r3, #4
 8003930:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	0c5b      	lsrs	r3, r3, #17
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	2b02      	cmp	r3, #2
 800393c:	d124      	bne.n	8003988 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d035      	beq.n	80039b6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003958:	b29b      	uxth	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	6a38      	ldr	r0, [r7, #32]
 800395e:	f004 fd03 	bl	8008368 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800396e:	441a      	add	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003980:	441a      	add	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	619a      	str	r2, [r3, #24]
 8003986:	e016      	b.n	80039b6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	0c5b      	lsrs	r3, r3, #17
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	2b06      	cmp	r3, #6
 8003992:	d110      	bne.n	80039b6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800399a:	2208      	movs	r2, #8
 800399c:	4619      	mov	r1, r3
 800399e:	6a38      	ldr	r0, [r7, #32]
 80039a0:	f004 fce2 	bl	8008368 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	699a      	ldr	r2, [r3, #24]
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b0:	441a      	add	r2, r3
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699a      	ldr	r2, [r3, #24]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0210 	orr.w	r2, r2, #16
 80039c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 fe31 	bl	8008632 <USB_ReadInterrupts>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039da:	d16e      	bne.n	8003aba <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f004 fe37 	bl	8008658 <USB_ReadDevAllOutEpInterrupt>
 80039ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80039ec:	e062      	b.n	8003ab4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d057      	beq.n	8003aa8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f004 fe5c 	bl	80086c0 <USB_ReadDevOutEPInterrupt>
 8003a08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00c      	beq.n	8003a2e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a20:	461a      	mov	r2, r3
 8003a22:	2301      	movs	r3, #1
 8003a24:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fdc5 	bl	80045b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00c      	beq.n	8003a52 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a44:	461a      	mov	r2, r3
 8003a46:	2308      	movs	r3, #8
 8003a48:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 febf 	bl	80047d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2310      	movs	r3, #16
 8003a6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a84:	461a      	mov	r2, r3
 8003a86:	2320      	movs	r3, #32
 8003a88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d009      	beq.n	8003aa8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aa6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	3301      	adds	r3, #1
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d199      	bne.n	80039ee <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f004 fdb7 	bl	8008632 <USB_ReadInterrupts>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ace:	f040 80c0 	bne.w	8003c52 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f004 fdd8 	bl	800868c <USB_ReadDevAllInEpInterrupt>
 8003adc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003ae2:	e0b2      	b.n	8003c4a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80a7 	beq.w	8003c3e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f004 fdfe 	bl	80086fc <USB_ReadDevInEPInterrupt>
 8003b00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d057      	beq.n	8003bbc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	2201      	movs	r2, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69f9      	ldr	r1, [r7, #28]
 8003b28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2301      	movs	r3, #1
 8003b40:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d132      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	3348      	adds	r3, #72	; 0x48
 8003b5a:	6819      	ldr	r1, [r3, #0]
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4403      	add	r3, r0
 8003b6a:	3344      	adds	r3, #68	; 0x44
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4419      	add	r1, r3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4403      	add	r3, r0
 8003b7e:	3348      	adds	r3, #72	; 0x48
 8003b80:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d113      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x31c>
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	3350      	adds	r3, #80	; 0x50
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d108      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2101      	movs	r1, #1
 8003bac:	f004 fe06 	bl	80087bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f009 f9c9 	bl	800cf4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2308      	movs	r3, #8
 8003bd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d008      	beq.n	8003bf4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2340      	movs	r3, #64	; 0x40
 8003c0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c26:	461a      	mov	r2, r3
 8003c28:	2302      	movs	r3, #2
 8003c2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fc30 	bl	800449e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	3301      	adds	r3, #1
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	085b      	lsrs	r3, r3, #1
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f47f af49 	bne.w	8003ae4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f004 fceb 	bl	8008632 <USB_ReadInterrupts>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c66:	d122      	bne.n	8003cae <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d108      	bne.n	8003c98 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c8e:	2100      	movs	r1, #0
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f009 fb99 	bl	800d3c8 <HAL_PCDEx_LPM_Callback>
 8003c96:	e002      	b.n	8003c9e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f009 f9cf 	bl	800d03c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f004 fcbd 	bl	8008632 <USB_ReadInterrupts>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc2:	d112      	bne.n	8003cea <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d102      	bne.n	8003cda <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f009 f98b 	bl	800cff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ce8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f004 fc9f 	bl	8008632 <USB_ReadInterrupts>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cfe:	d121      	bne.n	8003d44 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003d0e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d111      	bne.n	8003d3e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	f003 020f 	and.w	r2, r3, #15
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d34:	2101      	movs	r1, #1
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f009 fb46 	bl	800d3c8 <HAL_PCDEx_LPM_Callback>
 8003d3c:	e002      	b.n	8003d44 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f009 f956 	bl	800cff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f004 fc72 	bl	8008632 <USB_ReadInterrupts>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d58:	f040 80c7 	bne.w	8003eea <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2110      	movs	r1, #16
 8003d76:	4618      	mov	r0, r3
 8003d78:	f003 fd40 	bl	80077fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d80:	e056      	b.n	8003e30 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da6:	0151      	lsls	r1, r2, #5
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	440a      	add	r2, r1
 8003dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003db0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003db4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc6:	0151      	lsls	r1, r2, #5
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	440a      	add	r2, r1
 8003dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dd4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de2:	461a      	mov	r2, r3
 8003de4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003de8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dfa:	0151      	lsls	r1, r2, #5
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	440a      	add	r2, r1
 8003e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e1a:	0151      	lsls	r1, r2, #5
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	440a      	add	r2, r1
 8003e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e28:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d3a3      	bcc.n	8003d82 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e48:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e4c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e66:	f043 030b 	orr.w	r3, r3, #11
 8003e6a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e7c:	f043 030b 	orr.w	r3, r3, #11
 8003e80:	6453      	str	r3, [r2, #68]	; 0x44
 8003e82:	e015      	b.n	8003eb0 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e96:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003e9a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eaa:	f043 030b 	orr.w	r3, r3, #11
 8003eae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ebe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ec2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f004 fc71 	bl	80087bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ee8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f004 fb9f 	bl	8008632 <USB_ReadInterrupts>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efe:	d124      	bne.n	8003f4a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f004 fc35 	bl	8008774 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f003 fcd5 	bl	80078be <USB_GetDevSpeed>
 8003f14:	4603      	mov	r3, r0
 8003f16:	461a      	mov	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681c      	ldr	r4, [r3, #0]
 8003f20:	f000 fdfe 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8003f24:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f003 fa18 	bl	8007364 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f009 f832 	bl	800cf9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f004 fb6f 	bl	8008632 <USB_ReadInterrupts>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d10a      	bne.n	8003f74 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f009 f80f 	bl	800cf82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f002 0208 	and.w	r2, r2, #8
 8003f72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f004 fb5a 	bl	8008632 <USB_ReadInterrupts>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f88:	d10f      	bne.n	8003faa <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f009 f871 	bl	800d07c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f004 fb3f 	bl	8008632 <USB_ReadInterrupts>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fbe:	d10f      	bne.n	8003fe0 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	4619      	mov	r1, r3
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f009 f844 	bl	800d058 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f004 fb24 	bl	8008632 <USB_ReadInterrupts>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d10a      	bne.n	800400c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f009 f852 	bl	800d0a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800400a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f004 fb0e 	bl	8008632 <USB_ReadInterrupts>
 8004016:	4603      	mov	r3, r0
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b04      	cmp	r3, #4
 800401e:	d115      	bne.n	800404c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f009 f842 	bl	800d0bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6859      	ldr	r1, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	430a      	orrs	r2, r1
 8004046:	605a      	str	r2, [r3, #4]
 8004048:	e000      	b.n	800404c <HAL_PCD_IRQHandler+0x7b8>
      return;
 800404a:	bf00      	nop
    }
  }
}
 800404c:	3734      	adds	r7, #52	; 0x34
 800404e:	46bd      	mov	sp, r7
 8004050:	bd90      	pop	{r4, r7, pc}

08004052 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_PCD_SetAddress+0x1a>
 8004068:	2302      	movs	r3, #2
 800406a:	e013      	b.n	8004094 <HAL_PCD_SetAddress+0x42>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	78fa      	ldrb	r2, [r7, #3]
 8004078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	4611      	mov	r1, r2
 8004084:	4618      	mov	r0, r3
 8004086:	f004 fa6c 	bl	8008562 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	4608      	mov	r0, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	461a      	mov	r2, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	70fb      	strb	r3, [r7, #3]
 80040ae:	460b      	mov	r3, r1
 80040b0:	803b      	strh	r3, [r7, #0]
 80040b2:	4613      	mov	r3, r2
 80040b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	da0f      	bge.n	80040e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	f003 020f 	and.w	r2, r3, #15
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	3338      	adds	r3, #56	; 0x38
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4413      	add	r3, r2
 80040d6:	3304      	adds	r3, #4
 80040d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	705a      	strb	r2, [r3, #1]
 80040e0:	e00f      	b.n	8004102 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	f003 020f 	and.w	r2, r3, #15
 80040e8:	4613      	mov	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	1a9b      	subs	r3, r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4413      	add	r3, r2
 80040f8:	3304      	adds	r3, #4
 80040fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800410e:	883a      	ldrh	r2, [r7, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	78ba      	ldrb	r2, [r7, #2]
 8004118:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	785b      	ldrb	r3, [r3, #1]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d004      	beq.n	800412c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800412c:	78bb      	ldrb	r3, [r7, #2]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d102      	bne.n	8004138 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_PCD_EP_Open+0xaa>
 8004142:	2302      	movs	r3, #2
 8004144:	e00e      	b.n	8004164 <HAL_PCD_EP_Open+0xc8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	4618      	mov	r0, r3
 8004156:	f003 fbd7 	bl	8007908 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004162:	7afb      	ldrb	r3, [r7, #11]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800417c:	2b00      	cmp	r3, #0
 800417e:	da0f      	bge.n	80041a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	f003 020f 	and.w	r2, r3, #15
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	3338      	adds	r3, #56	; 0x38
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	4413      	add	r3, r2
 8004194:	3304      	adds	r3, #4
 8004196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	705a      	strb	r2, [r3, #1]
 800419e:	e00f      	b.n	80041c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	f003 020f 	and.w	r2, r3, #15
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4413      	add	r3, r2
 80041b6:	3304      	adds	r3, #4
 80041b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_PCD_EP_Close+0x6e>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e00e      	b.n	80041f8 <HAL_PCD_EP_Close+0x8c>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68f9      	ldr	r1, [r7, #12]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f003 fc15 	bl	8007a18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	460b      	mov	r3, r1
 800420e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004210:	7afb      	ldrb	r3, [r7, #11]
 8004212:	f003 020f 	and.w	r2, r3, #15
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4413      	add	r3, r2
 8004226:	3304      	adds	r3, #4
 8004228:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2200      	movs	r2, #0
 800423a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2200      	movs	r2, #0
 8004240:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004242:	7afb      	ldrb	r3, [r7, #11]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	b2da      	uxtb	r2, r3
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d102      	bne.n	800425c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800425c:	7afb      	ldrb	r3, [r7, #11]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	6979      	ldr	r1, [r7, #20]
 8004274:	f003 fef0 	bl	8008058 <USB_EP0StartXfer>
 8004278:	e008      	b.n	800428c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	6979      	ldr	r1, [r7, #20]
 8004288:	f003 fca2 	bl	8007bd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b086      	sub	sp, #24
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	460b      	mov	r3, r1
 80042a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042a6:	7afb      	ldrb	r3, [r7, #11]
 80042a8:	f003 020f 	and.w	r2, r3, #15
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	3338      	adds	r3, #56	; 0x38
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	3304      	adds	r3, #4
 80042bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2200      	movs	r2, #0
 80042ce:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2201      	movs	r2, #1
 80042d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d6:	7afb      	ldrb	r3, [r7, #11]
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d102      	bne.n	80042f0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042f0:	7afb      	ldrb	r3, [r7, #11]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	6979      	ldr	r1, [r7, #20]
 8004308:	f003 fea6 	bl	8008058 <USB_EP0StartXfer>
 800430c:	e008      	b.n	8004320 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	6979      	ldr	r1, [r7, #20]
 800431c:	f003 fc58 	bl	8007bd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	f003 020f 	and.w	r2, r3, #15
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	429a      	cmp	r2, r3
 8004342:	d901      	bls.n	8004348 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e050      	b.n	80043ea <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800434c:	2b00      	cmp	r3, #0
 800434e:	da0f      	bge.n	8004370 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	f003 020f 	and.w	r2, r3, #15
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	3338      	adds	r3, #56	; 0x38
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	4413      	add	r3, r2
 8004364:	3304      	adds	r3, #4
 8004366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	705a      	strb	r2, [r3, #1]
 800436e:	e00d      	b.n	800438c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	4613      	mov	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	3304      	adds	r3, #4
 8004384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2201      	movs	r2, #1
 8004390:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_PCD_EP_SetStall+0x82>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e01e      	b.n	80043ea <HAL_PCD_EP_SetStall+0xc0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68f9      	ldr	r1, [r7, #12]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f003 fffd 	bl	80083ba <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	b2d9      	uxtb	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043da:	461a      	mov	r2, r3
 80043dc:	f004 f9ee 	bl	80087bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	460b      	mov	r3, r1
 80043fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	f003 020f 	and.w	r2, r3, #15
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d901      	bls.n	8004410 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e042      	b.n	8004496 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004414:	2b00      	cmp	r3, #0
 8004416:	da0f      	bge.n	8004438 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	f003 020f 	and.w	r2, r3, #15
 800441e:	4613      	mov	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	3338      	adds	r3, #56	; 0x38
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4413      	add	r3, r2
 800442c:	3304      	adds	r3, #4
 800442e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	705a      	strb	r2, [r3, #1]
 8004436:	e00f      	b.n	8004458 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	f003 020f 	and.w	r2, r3, #15
 800443e:	4613      	mov	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	3304      	adds	r3, #4
 8004450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_PCD_EP_ClrStall+0x86>
 8004474:	2302      	movs	r3, #2
 8004476:	e00e      	b.n	8004496 <HAL_PCD_EP_ClrStall+0xa4>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	4618      	mov	r0, r3
 8004488:	f004 f805 	bl	8008496 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b08a      	sub	sp, #40	; 0x28
 80044a2:	af02      	add	r7, sp, #8
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	3338      	adds	r3, #56	; 0x38
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	4413      	add	r3, r2
 80044c2:	3304      	adds	r3, #4
 80044c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d901      	bls.n	80044d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e06c      	b.n	80045b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d902      	bls.n	80044f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3303      	adds	r3, #3
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044fa:	e02b      	b.n	8004554 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	429a      	cmp	r2, r3
 8004510:	d902      	bls.n	8004518 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	3303      	adds	r3, #3
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	68d9      	ldr	r1, [r3, #12]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004530:	b2db      	uxtb	r3, r3
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	4603      	mov	r3, r0
 8004536:	6978      	ldr	r0, [r7, #20]
 8004538:	f003 fee1 	bl	80082fe <USB_WritePacket>

    ep->xfer_buff  += len;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	441a      	add	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	699a      	ldr	r2, [r3, #24]
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	441a      	add	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	b29b      	uxth	r3, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	429a      	cmp	r2, r3
 8004568:	d809      	bhi.n	800457e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004572:	429a      	cmp	r2, r3
 8004574:	d203      	bcs.n	800457e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1be      	bne.n	80044fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	429a      	cmp	r2, r3
 8004588:	d811      	bhi.n	80045ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	2201      	movs	r2, #1
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	43db      	mvns	r3, r3
 80045a4:	6939      	ldr	r1, [r7, #16]
 80045a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045aa:	4013      	ands	r3, r2
 80045ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3720      	adds	r7, #32
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	333c      	adds	r3, #60	; 0x3c
 80045d0:	3304      	adds	r3, #4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	f040 80a0 	bne.w	8004730 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d015      	beq.n	8004626 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4a72      	ldr	r2, [pc, #456]	; (80047c8 <PCD_EP_OutXfrComplete_int+0x210>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	f240 80dd 	bls.w	80047be <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80d7 	beq.w	80047be <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461c:	461a      	mov	r2, r3
 800461e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004622:	6093      	str	r3, [r2, #8]
 8004624:	e0cb      	b.n	80047be <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d009      	beq.n	8004644 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463c:	461a      	mov	r2, r3
 800463e:	2320      	movs	r3, #32
 8004640:	6093      	str	r3, [r2, #8]
 8004642:	e0bc      	b.n	80047be <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	f040 80b7 	bne.w	80047be <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a5d      	ldr	r2, [pc, #372]	; (80047c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d90f      	bls.n	8004678 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	461a      	mov	r2, r3
 8004670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004674:	6093      	str	r3, [r2, #8]
 8004676:	e0a2      	b.n	80047be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800468a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	0159      	lsls	r1, r3, #5
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	440b      	add	r3, r1
 8004694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800469e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4403      	add	r3, r0
 80046ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80046b2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046c6:	6819      	ldr	r1, [r3, #0]
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4403      	add	r3, r0
 80046d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4419      	add	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4403      	add	r3, r0
 80046ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046f0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d114      	bne.n	8004722 <PCD_EP_OutXfrComplete_int+0x16a>
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d108      	bne.n	8004722 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800471a:	461a      	mov	r2, r3
 800471c:	2101      	movs	r1, #1
 800471e:	f004 f84d 	bl	80087bc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f008 fbf5 	bl	800cf18 <HAL_PCD_DataOutStageCallback>
 800472e:	e046      	b.n	80047be <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a26      	ldr	r2, [pc, #152]	; (80047cc <PCD_EP_OutXfrComplete_int+0x214>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d124      	bne.n	8004782 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474e:	461a      	mov	r2, r3
 8004750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004754:	6093      	str	r3, [r2, #8]
 8004756:	e032      	b.n	80047be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476e:	461a      	mov	r2, r3
 8004770:	2320      	movs	r3, #32
 8004772:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	4619      	mov	r1, r3
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f008 fbcc 	bl	800cf18 <HAL_PCD_DataOutStageCallback>
 8004780:	e01d      	b.n	80047be <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d114      	bne.n	80047b2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d108      	bne.n	80047b2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047aa:	461a      	mov	r2, r3
 80047ac:	2100      	movs	r1, #0
 80047ae:	f004 f805 	bl	80087bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	4619      	mov	r1, r3
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f008 fbad 	bl	800cf18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	4f54300a 	.word	0x4f54300a
 80047cc:	4f54310a 	.word	0x4f54310a

080047d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	333c      	adds	r3, #60	; 0x3c
 80047e8:	3304      	adds	r3, #4
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a15      	ldr	r2, [pc, #84]	; (8004858 <PCD_EP_OutSetupPacket_int+0x88>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d90e      	bls.n	8004824 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800480c:	2b00      	cmp	r3, #0
 800480e:	d009      	beq.n	8004824 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	461a      	mov	r2, r3
 800481e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004822:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f008 fb65 	bl	800cef4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <PCD_EP_OutSetupPacket_int+0x88>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d90c      	bls.n	800484c <PCD_EP_OutSetupPacket_int+0x7c>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d108      	bne.n	800484c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004844:	461a      	mov	r2, r3
 8004846:	2101      	movs	r1, #1
 8004848:	f003 ffb8 	bl	80087bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	4f54300a 	.word	0x4f54300a

0800485c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
 8004868:	4613      	mov	r3, r2
 800486a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d107      	bne.n	800488a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800487a:	883b      	ldrh	r3, [r7, #0]
 800487c:	0419      	lsls	r1, r3, #16
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	430a      	orrs	r2, r1
 8004886:	629a      	str	r2, [r3, #40]	; 0x28
 8004888:	e028      	b.n	80048dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	0c1b      	lsrs	r3, r3, #16
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	4413      	add	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004898:	2300      	movs	r3, #0
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e00d      	b.n	80048ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	3340      	adds	r3, #64	; 0x40
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	0c1b      	lsrs	r3, r3, #16
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4413      	add	r3, r2
 80048b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	3301      	adds	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
 80048ba:	7bfa      	ldrb	r2, [r7, #15]
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	3b01      	subs	r3, #1
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d3ec      	bcc.n	800489e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048c4:	883b      	ldrh	r3, [r7, #0]
 80048c6:	0418      	lsls	r0, r3, #16
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6819      	ldr	r1, [r3, #0]
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	4302      	orrs	r2, r0
 80048d4:	3340      	adds	r3, #64	; 0x40
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	440b      	add	r3, r1
 80048da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	887a      	ldrh	r2, [r7, #2]
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493e:	f043 0303 	orr.w	r3, r3, #3
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0cc      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004968:	4b68      	ldr	r3, [pc, #416]	; (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d90c      	bls.n	8004990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b65      	ldr	r3, [pc, #404]	; (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b63      	ldr	r3, [pc, #396]	; (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0b8      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d020      	beq.n	80049de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a8:	4b59      	ldr	r3, [pc, #356]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a58      	ldr	r2, [pc, #352]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c0:	4b53      	ldr	r3, [pc, #332]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a52      	ldr	r2, [pc, #328]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049cc:	4b50      	ldr	r3, [pc, #320]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	494d      	ldr	r1, [pc, #308]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d044      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	4b47      	ldr	r3, [pc, #284]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d119      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e07f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d003      	beq.n	8004a12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a12:	4b3f      	ldr	r3, [pc, #252]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e06f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a22:	4b3b      	ldr	r3, [pc, #236]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e067      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a32:	4b37      	ldr	r3, [pc, #220]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f023 0203 	bic.w	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4934      	ldr	r1, [pc, #208]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a44:	f7fd fe9c 	bl	8002780 <HAL_GetTick>
 8004a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4c:	f7fd fe98 	bl	8002780 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e04f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	4b2b      	ldr	r3, [pc, #172]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 020c 	and.w	r2, r3, #12
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d1eb      	bne.n	8004a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a74:	4b25      	ldr	r3, [pc, #148]	; (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d20c      	bcs.n	8004a9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a82:	4b22      	ldr	r3, [pc, #136]	; (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e032      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4916      	ldr	r1, [pc, #88]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ac6:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	490e      	ldr	r1, [pc, #56]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ada:	f000 fbb1 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	490a      	ldr	r1, [pc, #40]	; (8004b14 <HAL_RCC_ClockConfig+0x1c0>)
 8004aec:	5ccb      	ldrb	r3, [r1, r3]
 8004aee:	fa22 f303 	lsr.w	r3, r2, r3
 8004af2:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <HAL_RCC_ClockConfig+0x1c4>)
 8004af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004af6:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fd fb76 	bl	80021ec <HAL_InitTick>

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023c00 	.word	0x40023c00
 8004b10:	40023800 	.word	0x40023800
 8004b14:	08013b5c 	.word	0x08013b5c
 8004b18:	20000004 	.word	0x20000004
 8004b1c:	20000010 	.word	0x20000010

08004b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b24:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b26:	681b      	ldr	r3, [r3, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000004 	.word	0x20000004

08004b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b3c:	f7ff fff0 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	0a9b      	lsrs	r3, r3, #10
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4903      	ldr	r1, [pc, #12]	; (8004b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4e:	5ccb      	ldrb	r3, [r1, r3]
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	08013b6c 	.word	0x08013b6c

08004b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b64:	f7ff ffdc 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	0b5b      	lsrs	r3, r3, #13
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	4903      	ldr	r1, [pc, #12]	; (8004b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b76:	5ccb      	ldrb	r3, [r1, r3]
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800
 8004b84:	08013b6c 	.word	0x08013b6c

08004b88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	220f      	movs	r2, #15
 8004b96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0203 	and.w	r2, r3, #3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <HAL_RCC_GetClockConfig+0x5c>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <HAL_RCC_GetClockConfig+0x5c>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004bbc:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_RCC_GetClockConfig+0x5c>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	08db      	lsrs	r3, r3, #3
 8004bc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bca:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <HAL_RCC_GetClockConfig+0x60>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 020f 	and.w	r2, r3, #15
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	601a      	str	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
 8004be8:	40023c00 	.word	0x40023c00

08004bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08c      	sub	sp, #48	; 0x30
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d010      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004c24:	4b6f      	ldr	r3, [pc, #444]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c2a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	496c      	ldr	r1, [pc, #432]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004c42:	2301      	movs	r3, #1
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d010      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004c52:	4b64      	ldr	r3, [pc, #400]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c58:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c60:	4960      	ldr	r1, [pc, #384]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004c70:	2301      	movs	r3, #1
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d017      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c80:	4b58      	ldr	r3, [pc, #352]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	4955      	ldr	r1, [pc, #340]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004cac:	2301      	movs	r3, #1
 8004cae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d017      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cbc:	4b49      	ldr	r3, [pc, #292]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	4946      	ldr	r1, [pc, #280]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cda:	d101      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 808a 	beq.w	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	4b39      	ldr	r3, [pc, #228]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	4a38      	ldr	r2, [pc, #224]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d08:	6413      	str	r3, [r2, #64]	; 0x40
 8004d0a:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d16:	4b34      	ldr	r3, [pc, #208]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a33      	ldr	r2, [pc, #204]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d22:	f7fd fd2d 	bl	8002780 <HAL_GetTick>
 8004d26:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d2a:	f7fd fd29 	bl	8002780 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e278      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d3c:	4b2a      	ldr	r3, [pc, #168]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d48:	4b26      	ldr	r3, [pc, #152]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d50:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02f      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d60:	6a3a      	ldr	r2, [r7, #32]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d028      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d66:	4b1f      	ldr	r3, [pc, #124]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d70:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d76:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d7c:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d82:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d114      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d8e:	f7fd fcf7 	bl	8002780 <HAL_GetTick>
 8004d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d94:	e00a      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fd fcf3 	bl	8002780 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e240      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0ee      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dc4:	d114      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004dc6:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dda:	4902      	ldr	r1, [pc, #8]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	608b      	str	r3, [r1, #8]
 8004de0:	e00c      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40007000 	.word	0x40007000
 8004dec:	42470e40 	.word	0x42470e40
 8004df0:	4b4a      	ldr	r3, [pc, #296]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	4a49      	ldr	r2, [pc, #292]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004df6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dfa:	6093      	str	r3, [r2, #8]
 8004dfc:	4b47      	ldr	r3, [pc, #284]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e08:	4944      	ldr	r1, [pc, #272]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d004      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004e20:	4b3f      	ldr	r3, [pc, #252]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004e22:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004e30:	4b3a      	ldr	r3, [pc, #232]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3e:	4937      	ldr	r1, [pc, #220]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e52:	4b32      	ldr	r3, [pc, #200]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e58:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e60:	492e      	ldr	r1, [pc, #184]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d011      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e74:	4b29      	ldr	r3, [pc, #164]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e82:	4926      	ldr	r1, [pc, #152]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e92:	d101      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004e94:	2301      	movs	r3, #1
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eaa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb2:	491a      	ldr	r1, [pc, #104]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d011      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004ec6:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ecc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed4:	4911      	ldr	r1, [pc, #68]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee4:	d101      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d005      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef8:	f040 80ff 	bne.w	80050fa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f02:	f7fd fc3d 	bl	8002780 <HAL_GetTick>
 8004f06:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f08:	e00e      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f0a:	f7fd fc39 	bl	8002780 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d907      	bls.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e188      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	424711e0 	.word	0x424711e0
 8004f24:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f28:	4b7e      	ldr	r3, [pc, #504]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1ea      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d028      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d124      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004f5c:	4b71      	ldr	r3, [pc, #452]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f62:	0c1b      	lsrs	r3, r3, #16
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	3301      	adds	r3, #1
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f6e:	4b6d      	ldr	r3, [pc, #436]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f74:	0e1b      	lsrs	r3, r3, #24
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	019b      	lsls	r3, r3, #6
 8004f86:	431a      	orrs	r2, r3
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	041b      	lsls	r3, r3, #16
 8004f90:	431a      	orrs	r2, r3
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	061b      	lsls	r3, r3, #24
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	071b      	lsls	r3, r3, #28
 8004f9e:	4961      	ldr	r1, [pc, #388]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d035      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd0:	d130      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004fd2:	4b54      	ldr	r3, [pc, #336]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd8:	0c1b      	lsrs	r3, r3, #16
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	3301      	adds	r3, #1
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fe4:	4b4f      	ldr	r3, [pc, #316]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fea:	0f1b      	lsrs	r3, r3, #28
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	019b      	lsls	r3, r3, #6
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	085b      	lsrs	r3, r3, #1
 8005002:	3b01      	subs	r3, #1
 8005004:	041b      	lsls	r3, r3, #16
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	061b      	lsls	r3, r3, #24
 800500e:	431a      	orrs	r2, r3
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	071b      	lsls	r3, r3, #28
 8005014:	4943      	ldr	r1, [pc, #268]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800501c:	4b41      	ldr	r3, [pc, #260]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800501e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005022:	f023 021f 	bic.w	r2, r3, #31
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	3b01      	subs	r3, #1
 800502c:	493d      	ldr	r1, [pc, #244]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503c:	2b00      	cmp	r3, #0
 800503e:	d029      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005048:	d124      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800504a:	4b36      	ldr	r3, [pc, #216]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800504c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	3301      	adds	r3, #1
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800505c:	4b31      	ldr	r3, [pc, #196]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800505e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005062:	0f1b      	lsrs	r3, r3, #28
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	019b      	lsls	r3, r3, #6
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	085b      	lsrs	r3, r3, #1
 800507c:	3b01      	subs	r3, #1
 800507e:	041b      	lsls	r3, r3, #16
 8005080:	431a      	orrs	r2, r3
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	061b      	lsls	r3, r3, #24
 8005086:	431a      	orrs	r2, r3
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	071b      	lsls	r3, r3, #28
 800508c:	4925      	ldr	r1, [pc, #148]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800509c:	2b00      	cmp	r3, #0
 800509e:	d016      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	019b      	lsls	r3, r3, #6
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	3b01      	subs	r3, #1
 80050b4:	041b      	lsls	r3, r3, #16
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	061b      	lsls	r3, r3, #24
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	071b      	lsls	r3, r3, #28
 80050c6:	4917      	ldr	r1, [pc, #92]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050ce:	4b16      	ldr	r3, [pc, #88]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050d4:	f7fd fb54 	bl	8002780 <HAL_GetTick>
 80050d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050dc:	f7fd fb50 	bl	8002780 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e09f      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050ee:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	f040 8095 	bne.w	800522c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005108:	f7fd fb3a 	bl	8002780 <HAL_GetTick>
 800510c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800510e:	e00f      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005110:	f7fd fb36 	bl	8002780 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d908      	bls.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e085      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	42470068 	.word	0x42470068
 800512c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005130:	4b41      	ldr	r3, [pc, #260]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800513c:	d0e8      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800515a:	2b00      	cmp	r3, #0
 800515c:	d02b      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005162:	2b00      	cmp	r3, #0
 8005164:	d127      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005166:	4b34      	ldr	r3, [pc, #208]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516c:	0c1b      	lsrs	r3, r3, #16
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	3301      	adds	r3, #1
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	019b      	lsls	r3, r3, #6
 8005182:	431a      	orrs	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	085b      	lsrs	r3, r3, #1
 8005188:	3b01      	subs	r3, #1
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	061b      	lsls	r3, r3, #24
 8005194:	4928      	ldr	r1, [pc, #160]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800519c:	4b26      	ldr	r3, [pc, #152]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800519e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	3b01      	subs	r3, #1
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	4922      	ldr	r1, [pc, #136]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01d      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x612>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ca:	d118      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051cc:	4b1a      	ldr	r3, [pc, #104]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	0e1b      	lsrs	r3, r3, #24
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	019b      	lsls	r3, r3, #6
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	3b01      	subs	r3, #1
 80051ee:	041b      	lsls	r3, r3, #16
 80051f0:	431a      	orrs	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	061b      	lsls	r3, r3, #24
 80051f6:	4910      	ldr	r1, [pc, #64]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051fe:	4b0f      	ldr	r3, [pc, #60]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005200:	2201      	movs	r2, #1
 8005202:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005204:	f7fd fabc 	bl	8002780 <HAL_GetTick>
 8005208:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800520a:	e008      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800520c:	f7fd fab8 	bl	8002780 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e007      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800521e:	4b06      	ldr	r3, [pc, #24]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800522a:	d1ef      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3730      	adds	r7, #48	; 0x30
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800
 800523c:	42470070 	.word	0x42470070

08005240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005244:	b088      	sub	sp, #32
 8005246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800525c:	4bce      	ldr	r3, [pc, #824]	; (8005598 <HAL_RCC_GetSysClockFreq+0x358>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 030c 	and.w	r3, r3, #12
 8005264:	2b0c      	cmp	r3, #12
 8005266:	f200 818d 	bhi.w	8005584 <HAL_RCC_GetSysClockFreq+0x344>
 800526a:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <HAL_RCC_GetSysClockFreq+0x30>)
 800526c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005270:	080052a5 	.word	0x080052a5
 8005274:	08005585 	.word	0x08005585
 8005278:	08005585 	.word	0x08005585
 800527c:	08005585 	.word	0x08005585
 8005280:	080052ab 	.word	0x080052ab
 8005284:	08005585 	.word	0x08005585
 8005288:	08005585 	.word	0x08005585
 800528c:	08005585 	.word	0x08005585
 8005290:	080052b1 	.word	0x080052b1
 8005294:	08005585 	.word	0x08005585
 8005298:	08005585 	.word	0x08005585
 800529c:	08005585 	.word	0x08005585
 80052a0:	08005425 	.word	0x08005425
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052a4:	4bbd      	ldr	r3, [pc, #756]	; (800559c <HAL_RCC_GetSysClockFreq+0x35c>)
 80052a6:	61bb      	str	r3, [r7, #24]
       break;
 80052a8:	e16f      	b.n	800558a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052aa:	4bbd      	ldr	r3, [pc, #756]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x360>)
 80052ac:	61bb      	str	r3, [r7, #24]
      break;
 80052ae:	e16c      	b.n	800558a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052b0:	4bb9      	ldr	r3, [pc, #740]	; (8005598 <HAL_RCC_GetSysClockFreq+0x358>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ba:	4bb7      	ldr	r3, [pc, #732]	; (8005598 <HAL_RCC_GetSysClockFreq+0x358>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d053      	beq.n	800536e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052c6:	4bb4      	ldr	r3, [pc, #720]	; (8005598 <HAL_RCC_GetSysClockFreq+0x358>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	099b      	lsrs	r3, r3, #6
 80052cc:	461a      	mov	r2, r3
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052d6:	f04f 0100 	mov.w	r1, #0
 80052da:	ea02 0400 	and.w	r4, r2, r0
 80052de:	603c      	str	r4, [r7, #0]
 80052e0:	400b      	ands	r3, r1
 80052e2:	607b      	str	r3, [r7, #4]
 80052e4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052e8:	4620      	mov	r0, r4
 80052ea:	4629      	mov	r1, r5
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	014b      	lsls	r3, r1, #5
 80052f6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052fa:	0142      	lsls	r2, r0, #5
 80052fc:	4610      	mov	r0, r2
 80052fe:	4619      	mov	r1, r3
 8005300:	4623      	mov	r3, r4
 8005302:	1ac0      	subs	r0, r0, r3
 8005304:	462b      	mov	r3, r5
 8005306:	eb61 0103 	sbc.w	r1, r1, r3
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	018b      	lsls	r3, r1, #6
 8005314:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005318:	0182      	lsls	r2, r0, #6
 800531a:	1a12      	subs	r2, r2, r0
 800531c:	eb63 0301 	sbc.w	r3, r3, r1
 8005320:	f04f 0000 	mov.w	r0, #0
 8005324:	f04f 0100 	mov.w	r1, #0
 8005328:	00d9      	lsls	r1, r3, #3
 800532a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800532e:	00d0      	lsls	r0, r2, #3
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4621      	mov	r1, r4
 8005336:	1852      	adds	r2, r2, r1
 8005338:	4629      	mov	r1, r5
 800533a:	eb43 0101 	adc.w	r1, r3, r1
 800533e:	460b      	mov	r3, r1
 8005340:	f04f 0000 	mov.w	r0, #0
 8005344:	f04f 0100 	mov.w	r1, #0
 8005348:	0259      	lsls	r1, r3, #9
 800534a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800534e:	0250      	lsls	r0, r2, #9
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	461a      	mov	r2, r3
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	f7fa ff5e 	bl	8000220 <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4613      	mov	r3, r2
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	e04c      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800536e:	4b8a      	ldr	r3, [pc, #552]	; (8005598 <HAL_RCC_GetSysClockFreq+0x358>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	099b      	lsrs	r3, r3, #6
 8005374:	461a      	mov	r2, r3
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800537e:	f04f 0100 	mov.w	r1, #0
 8005382:	ea02 0a00 	and.w	sl, r2, r0
 8005386:	ea03 0b01 	and.w	fp, r3, r1
 800538a:	4650      	mov	r0, sl
 800538c:	4659      	mov	r1, fp
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	014b      	lsls	r3, r1, #5
 8005398:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800539c:	0142      	lsls	r2, r0, #5
 800539e:	4610      	mov	r0, r2
 80053a0:	4619      	mov	r1, r3
 80053a2:	ebb0 000a 	subs.w	r0, r0, sl
 80053a6:	eb61 010b 	sbc.w	r1, r1, fp
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	018b      	lsls	r3, r1, #6
 80053b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053b8:	0182      	lsls	r2, r0, #6
 80053ba:	1a12      	subs	r2, r2, r0
 80053bc:	eb63 0301 	sbc.w	r3, r3, r1
 80053c0:	f04f 0000 	mov.w	r0, #0
 80053c4:	f04f 0100 	mov.w	r1, #0
 80053c8:	00d9      	lsls	r1, r3, #3
 80053ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053ce:	00d0      	lsls	r0, r2, #3
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	eb12 020a 	adds.w	r2, r2, sl
 80053d8:	eb43 030b 	adc.w	r3, r3, fp
 80053dc:	f04f 0000 	mov.w	r0, #0
 80053e0:	f04f 0100 	mov.w	r1, #0
 80053e4:	0299      	lsls	r1, r3, #10
 80053e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053ea:	0290      	lsls	r0, r2, #10
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4610      	mov	r0, r2
 80053f2:	4619      	mov	r1, r3
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	f7fa ff10 	bl	8000220 <__aeabi_uldivmod>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4613      	mov	r3, r2
 8005406:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005408:	4b63      	ldr	r3, [pc, #396]	; (8005598 <HAL_RCC_GetSysClockFreq+0x358>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	0c1b      	lsrs	r3, r3, #16
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	3301      	adds	r3, #1
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005420:	61bb      	str	r3, [r7, #24]
      break;
 8005422:	e0b2      	b.n	800558a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005424:	4b5c      	ldr	r3, [pc, #368]	; (8005598 <HAL_RCC_GetSysClockFreq+0x358>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800542c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800542e:	4b5a      	ldr	r3, [pc, #360]	; (8005598 <HAL_RCC_GetSysClockFreq+0x358>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d04d      	beq.n	80054d6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800543a:	4b57      	ldr	r3, [pc, #348]	; (8005598 <HAL_RCC_GetSysClockFreq+0x358>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	099b      	lsrs	r3, r3, #6
 8005440:	461a      	mov	r2, r3
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	f240 10ff 	movw	r0, #511	; 0x1ff
 800544a:	f04f 0100 	mov.w	r1, #0
 800544e:	ea02 0800 	and.w	r8, r2, r0
 8005452:	ea03 0901 	and.w	r9, r3, r1
 8005456:	4640      	mov	r0, r8
 8005458:	4649      	mov	r1, r9
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	014b      	lsls	r3, r1, #5
 8005464:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005468:	0142      	lsls	r2, r0, #5
 800546a:	4610      	mov	r0, r2
 800546c:	4619      	mov	r1, r3
 800546e:	ebb0 0008 	subs.w	r0, r0, r8
 8005472:	eb61 0109 	sbc.w	r1, r1, r9
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	018b      	lsls	r3, r1, #6
 8005480:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005484:	0182      	lsls	r2, r0, #6
 8005486:	1a12      	subs	r2, r2, r0
 8005488:	eb63 0301 	sbc.w	r3, r3, r1
 800548c:	f04f 0000 	mov.w	r0, #0
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	00d9      	lsls	r1, r3, #3
 8005496:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800549a:	00d0      	lsls	r0, r2, #3
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	eb12 0208 	adds.w	r2, r2, r8
 80054a4:	eb43 0309 	adc.w	r3, r3, r9
 80054a8:	f04f 0000 	mov.w	r0, #0
 80054ac:	f04f 0100 	mov.w	r1, #0
 80054b0:	0259      	lsls	r1, r3, #9
 80054b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80054b6:	0250      	lsls	r0, r2, #9
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4610      	mov	r0, r2
 80054be:	4619      	mov	r1, r3
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	f7fa feaa 	bl	8000220 <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4613      	mov	r3, r2
 80054d2:	61fb      	str	r3, [r7, #28]
 80054d4:	e04a      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054d6:	4b30      	ldr	r3, [pc, #192]	; (8005598 <HAL_RCC_GetSysClockFreq+0x358>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	099b      	lsrs	r3, r3, #6
 80054dc:	461a      	mov	r2, r3
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054e6:	f04f 0100 	mov.w	r1, #0
 80054ea:	ea02 0400 	and.w	r4, r2, r0
 80054ee:	ea03 0501 	and.w	r5, r3, r1
 80054f2:	4620      	mov	r0, r4
 80054f4:	4629      	mov	r1, r5
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	014b      	lsls	r3, r1, #5
 8005500:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005504:	0142      	lsls	r2, r0, #5
 8005506:	4610      	mov	r0, r2
 8005508:	4619      	mov	r1, r3
 800550a:	1b00      	subs	r0, r0, r4
 800550c:	eb61 0105 	sbc.w	r1, r1, r5
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	018b      	lsls	r3, r1, #6
 800551a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800551e:	0182      	lsls	r2, r0, #6
 8005520:	1a12      	subs	r2, r2, r0
 8005522:	eb63 0301 	sbc.w	r3, r3, r1
 8005526:	f04f 0000 	mov.w	r0, #0
 800552a:	f04f 0100 	mov.w	r1, #0
 800552e:	00d9      	lsls	r1, r3, #3
 8005530:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005534:	00d0      	lsls	r0, r2, #3
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	1912      	adds	r2, r2, r4
 800553c:	eb45 0303 	adc.w	r3, r5, r3
 8005540:	f04f 0000 	mov.w	r0, #0
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	0299      	lsls	r1, r3, #10
 800554a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800554e:	0290      	lsls	r0, r2, #10
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4610      	mov	r0, r2
 8005556:	4619      	mov	r1, r3
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	461a      	mov	r2, r3
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	f7fa fe5e 	bl	8000220 <__aeabi_uldivmod>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4613      	mov	r3, r2
 800556a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800556c:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <HAL_RCC_GetSysClockFreq+0x358>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	0f1b      	lsrs	r3, r3, #28
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005580:	61bb      	str	r3, [r7, #24]
      break;
 8005582:	e002      	b.n	800558a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005586:	61bb      	str	r3, [r7, #24]
      break;
 8005588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800558a:	69bb      	ldr	r3, [r7, #24]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3720      	adds	r7, #32
 8005590:	46bd      	mov	sp, r7
 8005592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005596:	bf00      	nop
 8005598:	40023800 	.word	0x40023800
 800559c:	00f42400 	.word	0x00f42400
 80055a0:	007a1200 	.word	0x007a1200

080055a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e28d      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 8083 	beq.w	80056ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055c4:	4b94      	ldr	r3, [pc, #592]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f003 030c 	and.w	r3, r3, #12
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d019      	beq.n	8005604 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055d0:	4b91      	ldr	r3, [pc, #580]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d106      	bne.n	80055ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055dc:	4b8e      	ldr	r3, [pc, #568]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055e8:	d00c      	beq.n	8005604 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ea:	4b8b      	ldr	r3, [pc, #556]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055f2:	2b0c      	cmp	r3, #12
 80055f4:	d112      	bne.n	800561c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055f6:	4b88      	ldr	r3, [pc, #544]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005602:	d10b      	bne.n	800561c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005604:	4b84      	ldr	r3, [pc, #528]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d05b      	beq.n	80056c8 <HAL_RCC_OscConfig+0x124>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d157      	bne.n	80056c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e25a      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005624:	d106      	bne.n	8005634 <HAL_RCC_OscConfig+0x90>
 8005626:	4b7c      	ldr	r3, [pc, #496]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a7b      	ldr	r2, [pc, #492]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 800562c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	e01d      	b.n	8005670 <HAL_RCC_OscConfig+0xcc>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800563c:	d10c      	bne.n	8005658 <HAL_RCC_OscConfig+0xb4>
 800563e:	4b76      	ldr	r3, [pc, #472]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a75      	ldr	r2, [pc, #468]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 8005644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	4b73      	ldr	r3, [pc, #460]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a72      	ldr	r2, [pc, #456]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 8005650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e00b      	b.n	8005670 <HAL_RCC_OscConfig+0xcc>
 8005658:	4b6f      	ldr	r3, [pc, #444]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a6e      	ldr	r2, [pc, #440]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 800565e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	4b6c      	ldr	r3, [pc, #432]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a6b      	ldr	r2, [pc, #428]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 800566a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800566e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d013      	beq.n	80056a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005678:	f7fd f882 	bl	8002780 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005680:	f7fd f87e 	bl	8002780 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b64      	cmp	r3, #100	; 0x64
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e21f      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005692:	4b61      	ldr	r3, [pc, #388]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f0      	beq.n	8005680 <HAL_RCC_OscConfig+0xdc>
 800569e:	e014      	b.n	80056ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fd f86e 	bl	8002780 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056a8:	f7fd f86a 	bl	8002780 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b64      	cmp	r3, #100	; 0x64
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e20b      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ba:	4b57      	ldr	r3, [pc, #348]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f0      	bne.n	80056a8 <HAL_RCC_OscConfig+0x104>
 80056c6:	e000      	b.n	80056ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d06f      	beq.n	80057b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056d6:	4b50      	ldr	r3, [pc, #320]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 030c 	and.w	r3, r3, #12
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d017      	beq.n	8005712 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056e2:	4b4d      	ldr	r3, [pc, #308]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d105      	bne.n	80056fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056ee:	4b4a      	ldr	r3, [pc, #296]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00b      	beq.n	8005712 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056fa:	4b47      	ldr	r3, [pc, #284]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005702:	2b0c      	cmp	r3, #12
 8005704:	d11c      	bne.n	8005740 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005706:	4b44      	ldr	r3, [pc, #272]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d116      	bne.n	8005740 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005712:	4b41      	ldr	r3, [pc, #260]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d005      	beq.n	800572a <HAL_RCC_OscConfig+0x186>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d001      	beq.n	800572a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e1d3      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572a:	4b3b      	ldr	r3, [pc, #236]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4937      	ldr	r1, [pc, #220]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 800573a:	4313      	orrs	r3, r2
 800573c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800573e:	e03a      	b.n	80057b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d020      	beq.n	800578a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005748:	4b34      	ldr	r3, [pc, #208]	; (800581c <HAL_RCC_OscConfig+0x278>)
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574e:	f7fd f817 	bl	8002780 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005756:	f7fd f813 	bl	8002780 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e1b4      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005768:	4b2b      	ldr	r3, [pc, #172]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f0      	beq.n	8005756 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005774:	4b28      	ldr	r3, [pc, #160]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4925      	ldr	r1, [pc, #148]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 8005784:	4313      	orrs	r3, r2
 8005786:	600b      	str	r3, [r1, #0]
 8005788:	e015      	b.n	80057b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800578a:	4b24      	ldr	r3, [pc, #144]	; (800581c <HAL_RCC_OscConfig+0x278>)
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fc fff6 	bl	8002780 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005798:	f7fc fff2 	bl	8002780 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e193      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057aa:	4b1b      	ldr	r3, [pc, #108]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d036      	beq.n	8005830 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d016      	beq.n	80057f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ca:	4b15      	ldr	r3, [pc, #84]	; (8005820 <HAL_RCC_OscConfig+0x27c>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d0:	f7fc ffd6 	bl	8002780 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057d8:	f7fc ffd2 	bl	8002780 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e173      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ea:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <HAL_RCC_OscConfig+0x274>)
 80057ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0f0      	beq.n	80057d8 <HAL_RCC_OscConfig+0x234>
 80057f6:	e01b      	b.n	8005830 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057f8:	4b09      	ldr	r3, [pc, #36]	; (8005820 <HAL_RCC_OscConfig+0x27c>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fe:	f7fc ffbf 	bl	8002780 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005804:	e00e      	b.n	8005824 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005806:	f7fc ffbb 	bl	8002780 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d907      	bls.n	8005824 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e15c      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
 8005818:	40023800 	.word	0x40023800
 800581c:	42470000 	.word	0x42470000
 8005820:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005824:	4b8a      	ldr	r3, [pc, #552]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 8005826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1ea      	bne.n	8005806 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 8097 	beq.w	800596c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800583e:	2300      	movs	r3, #0
 8005840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005842:	4b83      	ldr	r3, [pc, #524]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10f      	bne.n	800586e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	4b7f      	ldr	r3, [pc, #508]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	4a7e      	ldr	r2, [pc, #504]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 8005858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800585c:	6413      	str	r3, [r2, #64]	; 0x40
 800585e:	4b7c      	ldr	r3, [pc, #496]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005866:	60bb      	str	r3, [r7, #8]
 8005868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800586e:	4b79      	ldr	r3, [pc, #484]	; (8005a54 <HAL_RCC_OscConfig+0x4b0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d118      	bne.n	80058ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800587a:	4b76      	ldr	r3, [pc, #472]	; (8005a54 <HAL_RCC_OscConfig+0x4b0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a75      	ldr	r2, [pc, #468]	; (8005a54 <HAL_RCC_OscConfig+0x4b0>)
 8005880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005886:	f7fc ff7b 	bl	8002780 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588c:	e008      	b.n	80058a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588e:	f7fc ff77 	bl	8002780 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e118      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a0:	4b6c      	ldr	r3, [pc, #432]	; (8005a54 <HAL_RCC_OscConfig+0x4b0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0f0      	beq.n	800588e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d106      	bne.n	80058c2 <HAL_RCC_OscConfig+0x31e>
 80058b4:	4b66      	ldr	r3, [pc, #408]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 80058b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b8:	4a65      	ldr	r2, [pc, #404]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	6713      	str	r3, [r2, #112]	; 0x70
 80058c0:	e01c      	b.n	80058fc <HAL_RCC_OscConfig+0x358>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2b05      	cmp	r3, #5
 80058c8:	d10c      	bne.n	80058e4 <HAL_RCC_OscConfig+0x340>
 80058ca:	4b61      	ldr	r3, [pc, #388]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 80058cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ce:	4a60      	ldr	r2, [pc, #384]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 80058d0:	f043 0304 	orr.w	r3, r3, #4
 80058d4:	6713      	str	r3, [r2, #112]	; 0x70
 80058d6:	4b5e      	ldr	r3, [pc, #376]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058da:	4a5d      	ldr	r2, [pc, #372]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 80058dc:	f043 0301 	orr.w	r3, r3, #1
 80058e0:	6713      	str	r3, [r2, #112]	; 0x70
 80058e2:	e00b      	b.n	80058fc <HAL_RCC_OscConfig+0x358>
 80058e4:	4b5a      	ldr	r3, [pc, #360]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e8:	4a59      	ldr	r2, [pc, #356]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 80058ea:	f023 0301 	bic.w	r3, r3, #1
 80058ee:	6713      	str	r3, [r2, #112]	; 0x70
 80058f0:	4b57      	ldr	r3, [pc, #348]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 80058f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f4:	4a56      	ldr	r2, [pc, #344]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 80058f6:	f023 0304 	bic.w	r3, r3, #4
 80058fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d015      	beq.n	8005930 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005904:	f7fc ff3c 	bl	8002780 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800590a:	e00a      	b.n	8005922 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800590c:	f7fc ff38 	bl	8002780 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	f241 3288 	movw	r2, #5000	; 0x1388
 800591a:	4293      	cmp	r3, r2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e0d7      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005922:	4b4b      	ldr	r3, [pc, #300]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0ee      	beq.n	800590c <HAL_RCC_OscConfig+0x368>
 800592e:	e014      	b.n	800595a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005930:	f7fc ff26 	bl	8002780 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005936:	e00a      	b.n	800594e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005938:	f7fc ff22 	bl	8002780 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	f241 3288 	movw	r2, #5000	; 0x1388
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e0c1      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800594e:	4b40      	ldr	r3, [pc, #256]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1ee      	bne.n	8005938 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800595a:	7dfb      	ldrb	r3, [r7, #23]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d105      	bne.n	800596c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005960:	4b3b      	ldr	r3, [pc, #236]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	4a3a      	ldr	r2, [pc, #232]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 8005966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800596a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 80ad 	beq.w	8005ad0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005976:	4b36      	ldr	r3, [pc, #216]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 030c 	and.w	r3, r3, #12
 800597e:	2b08      	cmp	r3, #8
 8005980:	d060      	beq.n	8005a44 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d145      	bne.n	8005a16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800598a:	4b33      	ldr	r3, [pc, #204]	; (8005a58 <HAL_RCC_OscConfig+0x4b4>)
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fc fef6 	bl	8002780 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005998:	f7fc fef2 	bl	8002780 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e093      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059aa:	4b29      	ldr	r3, [pc, #164]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69da      	ldr	r2, [r3, #28]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	019b      	lsls	r3, r3, #6
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	085b      	lsrs	r3, r3, #1
 80059ce:	3b01      	subs	r3, #1
 80059d0:	041b      	lsls	r3, r3, #16
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	061b      	lsls	r3, r3, #24
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	071b      	lsls	r3, r3, #28
 80059e2:	491b      	ldr	r1, [pc, #108]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059e8:	4b1b      	ldr	r3, [pc, #108]	; (8005a58 <HAL_RCC_OscConfig+0x4b4>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ee:	f7fc fec7 	bl	8002780 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059f6:	f7fc fec3 	bl	8002780 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e064      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0f0      	beq.n	80059f6 <HAL_RCC_OscConfig+0x452>
 8005a14:	e05c      	b.n	8005ad0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a16:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <HAL_RCC_OscConfig+0x4b4>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1c:	f7fc feb0 	bl	8002780 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a24:	f7fc feac 	bl	8002780 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e04d      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a36:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <HAL_RCC_OscConfig+0x4ac>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1f0      	bne.n	8005a24 <HAL_RCC_OscConfig+0x480>
 8005a42:	e045      	b.n	8005ad0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d107      	bne.n	8005a5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e040      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
 8005a50:	40023800 	.word	0x40023800
 8005a54:	40007000 	.word	0x40007000
 8005a58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a5c:	4b1f      	ldr	r3, [pc, #124]	; (8005adc <HAL_RCC_OscConfig+0x538>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d030      	beq.n	8005acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d129      	bne.n	8005acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d122      	bne.n	8005acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d119      	bne.n	8005acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	085b      	lsrs	r3, r3, #1
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d10f      	bne.n	8005acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d107      	bne.n	8005acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d001      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40023800 	.word	0x40023800

08005ae0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e07b      	b.n	8005bea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d108      	bne.n	8005b0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b02:	d009      	beq.n	8005b18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	61da      	str	r2, [r3, #28]
 8005b0a:	e005      	b.n	8005b18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fc faa2 	bl	800207c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b60:	431a      	orrs	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9c:	ea42 0103 	orr.w	r1, r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	0c1b      	lsrs	r3, r3, #16
 8005bb6:	f003 0104 	and.w	r1, r3, #4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	f003 0210 	and.w	r2, r3, #16
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b088      	sub	sp, #32
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_SPI_Transmit+0x22>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e126      	b.n	8005e62 <HAL_SPI_Transmit+0x270>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c1c:	f7fc fdb0 	bl	8002780 <HAL_GetTick>
 8005c20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d002      	beq.n	8005c38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c32:	2302      	movs	r3, #2
 8005c34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c36:	e10b      	b.n	8005e50 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_SPI_Transmit+0x52>
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d102      	bne.n	8005c4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c48:	e102      	b.n	8005e50 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2203      	movs	r2, #3
 8005c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	88fa      	ldrh	r2, [r7, #6]
 8005c62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	88fa      	ldrh	r2, [r7, #6]
 8005c68:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c90:	d10f      	bne.n	8005cb2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d007      	beq.n	8005cd0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd8:	d14b      	bne.n	8005d72 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_SPI_Transmit+0xf6>
 8005ce2:	8afb      	ldrh	r3, [r7, #22]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d13e      	bne.n	8005d66 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	881a      	ldrh	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	1c9a      	adds	r2, r3, #2
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d0c:	e02b      	b.n	8005d66 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d112      	bne.n	8005d42 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	881a      	ldrh	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	1c9a      	adds	r2, r3, #2
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d40:	e011      	b.n	8005d66 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d42:	f7fc fd1d 	bl	8002780 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d803      	bhi.n	8005d5a <HAL_SPI_Transmit+0x168>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d58:	d102      	bne.n	8005d60 <HAL_SPI_Transmit+0x16e>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d64:	e074      	b.n	8005e50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1ce      	bne.n	8005d0e <HAL_SPI_Transmit+0x11c>
 8005d70:	e04c      	b.n	8005e0c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <HAL_SPI_Transmit+0x18e>
 8005d7a:	8afb      	ldrh	r3, [r7, #22]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d140      	bne.n	8005e02 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	330c      	adds	r3, #12
 8005d8a:	7812      	ldrb	r2, [r2, #0]
 8005d8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005da6:	e02c      	b.n	8005e02 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d113      	bne.n	8005dde <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	330c      	adds	r3, #12
 8005dc0:	7812      	ldrb	r2, [r2, #0]
 8005dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ddc:	e011      	b.n	8005e02 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dde:	f7fc fccf 	bl	8002780 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d803      	bhi.n	8005df6 <HAL_SPI_Transmit+0x204>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df4:	d102      	bne.n	8005dfc <HAL_SPI_Transmit+0x20a>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e00:	e026      	b.n	8005e50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1cd      	bne.n	8005da8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 fbcb 	bl	80065ac <SPI_EndRxTxTransaction>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	77fb      	strb	r3, [r7, #31]
 8005e4c:	e000      	b.n	8005e50 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005e4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3720      	adds	r7, #32
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b088      	sub	sp, #32
 8005e6e:	af02      	add	r7, sp, #8
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e86:	d112      	bne.n	8005eae <HAL_SPI_Receive+0x44>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10e      	bne.n	8005eae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2204      	movs	r2, #4
 8005e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e98:	88fa      	ldrh	r2, [r7, #6]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f8f1 	bl	800608c <HAL_SPI_TransmitReceive>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	e0ea      	b.n	8006084 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_SPI_Receive+0x52>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e0e3      	b.n	8006084 <HAL_SPI_Receive+0x21a>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ec4:	f7fc fc5c 	bl	8002780 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d002      	beq.n	8005edc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005eda:	e0ca      	b.n	8006072 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <HAL_SPI_Receive+0x7e>
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005eec:	e0c1      	b.n	8006072 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	88fa      	ldrh	r2, [r7, #6]
 8005f06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	88fa      	ldrh	r2, [r7, #6]
 8005f0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f34:	d10f      	bne.n	8005f56 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f60:	2b40      	cmp	r3, #64	; 0x40
 8005f62:	d007      	beq.n	8005f74 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d162      	bne.n	8006042 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f7c:	e02e      	b.n	8005fdc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d115      	bne.n	8005fb8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f103 020c 	add.w	r2, r3, #12
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fb6:	e011      	b.n	8005fdc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fb8:	f7fc fbe2 	bl	8002780 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d803      	bhi.n	8005fd0 <HAL_SPI_Receive+0x166>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fce:	d102      	bne.n	8005fd6 <HAL_SPI_Receive+0x16c>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d102      	bne.n	8005fdc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005fda:	e04a      	b.n	8006072 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1cb      	bne.n	8005f7e <HAL_SPI_Receive+0x114>
 8005fe6:	e031      	b.n	800604c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d113      	bne.n	800601e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	b292      	uxth	r2, r2
 8006002:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	1c9a      	adds	r2, r3, #2
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800601c:	e011      	b.n	8006042 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800601e:	f7fc fbaf 	bl	8002780 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d803      	bhi.n	8006036 <HAL_SPI_Receive+0x1cc>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d102      	bne.n	800603c <HAL_SPI_Receive+0x1d2>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006040:	e017      	b.n	8006072 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1cd      	bne.n	8005fe8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 fa45 	bl	80064e0 <SPI_EndRxTransaction>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]
 800606e:	e000      	b.n	8006072 <HAL_SPI_Receive+0x208>
  }

error :
 8006070:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006082:	7dfb      	ldrb	r3, [r7, #23]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08c      	sub	sp, #48	; 0x30
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800609a:	2301      	movs	r3, #1
 800609c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_SPI_TransmitReceive+0x26>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e18a      	b.n	80063c8 <HAL_SPI_TransmitReceive+0x33c>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060ba:	f7fc fb61 	bl	8002780 <HAL_GetTick>
 80060be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80060d0:	887b      	ldrh	r3, [r7, #2]
 80060d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d00f      	beq.n	80060fc <HAL_SPI_TransmitReceive+0x70>
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060e2:	d107      	bne.n	80060f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d103      	bne.n	80060f4 <HAL_SPI_TransmitReceive+0x68>
 80060ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	d003      	beq.n	80060fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80060f4:	2302      	movs	r3, #2
 80060f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060fa:	e15b      	b.n	80063b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <HAL_SPI_TransmitReceive+0x82>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_SPI_TransmitReceive+0x82>
 8006108:	887b      	ldrh	r3, [r7, #2]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006114:	e14e      	b.n	80063b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b04      	cmp	r3, #4
 8006120:	d003      	beq.n	800612a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2205      	movs	r2, #5
 8006126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	887a      	ldrh	r2, [r7, #2]
 800613a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	887a      	ldrh	r2, [r7, #2]
 8006140:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	887a      	ldrh	r2, [r7, #2]
 800614c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	887a      	ldrh	r2, [r7, #2]
 8006152:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616a:	2b40      	cmp	r3, #64	; 0x40
 800616c:	d007      	beq.n	800617e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800617c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006186:	d178      	bne.n	800627a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HAL_SPI_TransmitReceive+0x10a>
 8006190:	8b7b      	ldrh	r3, [r7, #26]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d166      	bne.n	8006264 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	881a      	ldrh	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	1c9a      	adds	r2, r3, #2
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ba:	e053      	b.n	8006264 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d11b      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x176>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d016      	beq.n	8006202 <HAL_SPI_TransmitReceive+0x176>
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d113      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061de:	881a      	ldrh	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	1c9a      	adds	r2, r3, #2
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b01      	cmp	r3, #1
 800620e:	d119      	bne.n	8006244 <HAL_SPI_TransmitReceive+0x1b8>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d014      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	b292      	uxth	r2, r2
 8006226:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	1c9a      	adds	r2, r3, #2
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006240:	2301      	movs	r3, #1
 8006242:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006244:	f7fc fa9c 	bl	8002780 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006250:	429a      	cmp	r2, r3
 8006252:	d807      	bhi.n	8006264 <HAL_SPI_TransmitReceive+0x1d8>
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625a:	d003      	beq.n	8006264 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006262:	e0a7      	b.n	80063b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1a6      	bne.n	80061bc <HAL_SPI_TransmitReceive+0x130>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1a1      	bne.n	80061bc <HAL_SPI_TransmitReceive+0x130>
 8006278:	e07c      	b.n	8006374 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x1fc>
 8006282:	8b7b      	ldrh	r3, [r7, #26]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d16b      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	330c      	adds	r3, #12
 8006292:	7812      	ldrb	r2, [r2, #0]
 8006294:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ae:	e057      	b.n	8006360 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d11c      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x26c>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d017      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x26c>
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d114      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	330c      	adds	r3, #12
 80062d8:	7812      	ldrb	r2, [r2, #0]
 80062da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b01      	cmp	r3, #1
 8006304:	d119      	bne.n	800633a <HAL_SPI_TransmitReceive+0x2ae>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d014      	beq.n	800633a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b01      	subs	r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006336:	2301      	movs	r3, #1
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800633a:	f7fc fa21 	bl	8002780 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006346:	429a      	cmp	r2, r3
 8006348:	d803      	bhi.n	8006352 <HAL_SPI_TransmitReceive+0x2c6>
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006350:	d102      	bne.n	8006358 <HAL_SPI_TransmitReceive+0x2cc>
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	2b00      	cmp	r3, #0
 8006356:	d103      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800635e:	e029      	b.n	80063b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1a2      	bne.n	80062b0 <HAL_SPI_TransmitReceive+0x224>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d19d      	bne.n	80062b0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006376:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 f917 	bl	80065ac <SPI_EndRxTxTransaction>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d006      	beq.n	8006392 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006390:	e010      	b.n	80063b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10b      	bne.n	80063b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	e000      	b.n	80063b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80063b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3730      	adds	r7, #48	; 0x30
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063e0:	f7fc f9ce 	bl	8002780 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	4413      	add	r3, r2
 80063ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063f0:	f7fc f9c6 	bl	8002780 <HAL_GetTick>
 80063f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063f6:	4b39      	ldr	r3, [pc, #228]	; (80064dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	015b      	lsls	r3, r3, #5
 80063fc:	0d1b      	lsrs	r3, r3, #20
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	fb02 f303 	mul.w	r3, r2, r3
 8006404:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006406:	e054      	b.n	80064b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640e:	d050      	beq.n	80064b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006410:	f7fc f9b6 	bl	8002780 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	429a      	cmp	r2, r3
 800641e:	d902      	bls.n	8006426 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d13d      	bne.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006434:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800643e:	d111      	bne.n	8006464 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006448:	d004      	beq.n	8006454 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006452:	d107      	bne.n	8006464 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006462:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646c:	d10f      	bne.n	800648e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800648c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e017      	b.n	80064d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4013      	ands	r3, r2
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	429a      	cmp	r2, r3
 80064c0:	bf0c      	ite	eq
 80064c2:	2301      	moveq	r3, #1
 80064c4:	2300      	movne	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d19b      	bne.n	8006408 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000004 	.word	0x20000004

080064e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064f4:	d111      	bne.n	800651a <SPI_EndRxTransaction+0x3a>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064fe:	d004      	beq.n	800650a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006508:	d107      	bne.n	800651a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006518:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006522:	d12a      	bne.n	800657a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800652c:	d012      	beq.n	8006554 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2200      	movs	r2, #0
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7ff ff49 	bl	80063d0 <SPI_WaitFlagStateUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d02d      	beq.n	80065a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	f043 0220 	orr.w	r2, r3, #32
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e026      	b.n	80065a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	2101      	movs	r1, #1
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7ff ff36 	bl	80063d0 <SPI_WaitFlagStateUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01a      	beq.n	80065a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	f043 0220 	orr.w	r2, r3, #32
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e013      	b.n	80065a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2200      	movs	r2, #0
 8006582:	2101      	movs	r1, #1
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff ff23 	bl	80063d0 <SPI_WaitFlagStateUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d007      	beq.n	80065a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006594:	f043 0220 	orr.w	r2, r3, #32
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e000      	b.n	80065a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065b8:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <SPI_EndRxTxTransaction+0x7c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1b      	ldr	r2, [pc, #108]	; (800662c <SPI_EndRxTxTransaction+0x80>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	0d5b      	lsrs	r3, r3, #21
 80065c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065c8:	fb02 f303 	mul.w	r3, r2, r3
 80065cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065d6:	d112      	bne.n	80065fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	2180      	movs	r1, #128	; 0x80
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f7ff fef4 	bl	80063d0 <SPI_WaitFlagStateUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d016      	beq.n	800661c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f2:	f043 0220 	orr.w	r2, r3, #32
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e00f      	b.n	800661e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	3b01      	subs	r3, #1
 8006608:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006614:	2b80      	cmp	r3, #128	; 0x80
 8006616:	d0f2      	beq.n	80065fe <SPI_EndRxTxTransaction+0x52>
 8006618:	e000      	b.n	800661c <SPI_EndRxTxTransaction+0x70>
        break;
 800661a:	bf00      	nop
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	20000004 	.word	0x20000004
 800662c:	165e9f81 	.word	0x165e9f81

08006630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e041      	b.n	80066c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fb fd58 	bl	800210c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3304      	adds	r3, #4
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f000 f9ce 	bl	8006a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d001      	beq.n	80066e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e04e      	b.n	8006786 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a23      	ldr	r2, [pc, #140]	; (8006794 <HAL_TIM_Base_Start_IT+0xc4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d022      	beq.n	8006750 <HAL_TIM_Base_Start_IT+0x80>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006712:	d01d      	beq.n	8006750 <HAL_TIM_Base_Start_IT+0x80>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1f      	ldr	r2, [pc, #124]	; (8006798 <HAL_TIM_Base_Start_IT+0xc8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d018      	beq.n	8006750 <HAL_TIM_Base_Start_IT+0x80>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1e      	ldr	r2, [pc, #120]	; (800679c <HAL_TIM_Base_Start_IT+0xcc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d013      	beq.n	8006750 <HAL_TIM_Base_Start_IT+0x80>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1c      	ldr	r2, [pc, #112]	; (80067a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00e      	beq.n	8006750 <HAL_TIM_Base_Start_IT+0x80>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a1b      	ldr	r2, [pc, #108]	; (80067a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d009      	beq.n	8006750 <HAL_TIM_Base_Start_IT+0x80>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a19      	ldr	r2, [pc, #100]	; (80067a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d004      	beq.n	8006750 <HAL_TIM_Base_Start_IT+0x80>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a18      	ldr	r2, [pc, #96]	; (80067ac <HAL_TIM_Base_Start_IT+0xdc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d111      	bne.n	8006774 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b06      	cmp	r3, #6
 8006760:	d010      	beq.n	8006784 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f042 0201 	orr.w	r2, r2, #1
 8006770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006772:	e007      	b.n	8006784 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	40010000 	.word	0x40010000
 8006798:	40000400 	.word	0x40000400
 800679c:	40000800 	.word	0x40000800
 80067a0:	40000c00 	.word	0x40000c00
 80067a4:	40010400 	.word	0x40010400
 80067a8:	40014000 	.word	0x40014000
 80067ac:	40001800 	.word	0x40001800

080067b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d122      	bne.n	800680c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d11b      	bne.n	800680c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f06f 0202 	mvn.w	r2, #2
 80067dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f8ee 	bl	80069d4 <HAL_TIM_IC_CaptureCallback>
 80067f8:	e005      	b.n	8006806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f8e0 	bl	80069c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f8f1 	bl	80069e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b04      	cmp	r3, #4
 8006818:	d122      	bne.n	8006860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b04      	cmp	r3, #4
 8006826:	d11b      	bne.n	8006860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f06f 0204 	mvn.w	r2, #4
 8006830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2202      	movs	r2, #2
 8006836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f8c4 	bl	80069d4 <HAL_TIM_IC_CaptureCallback>
 800684c:	e005      	b.n	800685a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f8b6 	bl	80069c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f8c7 	bl	80069e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b08      	cmp	r3, #8
 800686c:	d122      	bne.n	80068b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	2b08      	cmp	r3, #8
 800687a:	d11b      	bne.n	80068b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0208 	mvn.w	r2, #8
 8006884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2204      	movs	r2, #4
 800688a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f89a 	bl	80069d4 <HAL_TIM_IC_CaptureCallback>
 80068a0:	e005      	b.n	80068ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f88c 	bl	80069c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f89d 	bl	80069e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b10      	cmp	r3, #16
 80068c0:	d122      	bne.n	8006908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b10      	cmp	r3, #16
 80068ce:	d11b      	bne.n	8006908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f06f 0210 	mvn.w	r2, #16
 80068d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2208      	movs	r2, #8
 80068de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f870 	bl	80069d4 <HAL_TIM_IC_CaptureCallback>
 80068f4:	e005      	b.n	8006902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f862 	bl	80069c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f873 	bl	80069e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b01      	cmp	r3, #1
 8006914:	d10e      	bne.n	8006934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b01      	cmp	r3, #1
 8006922:	d107      	bne.n	8006934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0201 	mvn.w	r2, #1
 800692c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fb f9a0 	bl	8001c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693e:	2b80      	cmp	r3, #128	; 0x80
 8006940:	d10e      	bne.n	8006960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694c:	2b80      	cmp	r3, #128	; 0x80
 800694e:	d107      	bne.n	8006960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f902 	bl	8006b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696a:	2b40      	cmp	r3, #64	; 0x40
 800696c:	d10e      	bne.n	800698c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	d107      	bne.n	800698c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f838 	bl	80069fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b20      	cmp	r3, #32
 8006998:	d10e      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	d107      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0220 	mvn.w	r2, #32
 80069b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f8cc 	bl	8006b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069b8:	bf00      	nop
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a40      	ldr	r2, [pc, #256]	; (8006b24 <TIM_Base_SetConfig+0x114>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d013      	beq.n	8006a50 <TIM_Base_SetConfig+0x40>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2e:	d00f      	beq.n	8006a50 <TIM_Base_SetConfig+0x40>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a3d      	ldr	r2, [pc, #244]	; (8006b28 <TIM_Base_SetConfig+0x118>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00b      	beq.n	8006a50 <TIM_Base_SetConfig+0x40>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a3c      	ldr	r2, [pc, #240]	; (8006b2c <TIM_Base_SetConfig+0x11c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d007      	beq.n	8006a50 <TIM_Base_SetConfig+0x40>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a3b      	ldr	r2, [pc, #236]	; (8006b30 <TIM_Base_SetConfig+0x120>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d003      	beq.n	8006a50 <TIM_Base_SetConfig+0x40>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a3a      	ldr	r2, [pc, #232]	; (8006b34 <TIM_Base_SetConfig+0x124>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d108      	bne.n	8006a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a2f      	ldr	r2, [pc, #188]	; (8006b24 <TIM_Base_SetConfig+0x114>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d02b      	beq.n	8006ac2 <TIM_Base_SetConfig+0xb2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a70:	d027      	beq.n	8006ac2 <TIM_Base_SetConfig+0xb2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a2c      	ldr	r2, [pc, #176]	; (8006b28 <TIM_Base_SetConfig+0x118>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d023      	beq.n	8006ac2 <TIM_Base_SetConfig+0xb2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a2b      	ldr	r2, [pc, #172]	; (8006b2c <TIM_Base_SetConfig+0x11c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d01f      	beq.n	8006ac2 <TIM_Base_SetConfig+0xb2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a2a      	ldr	r2, [pc, #168]	; (8006b30 <TIM_Base_SetConfig+0x120>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d01b      	beq.n	8006ac2 <TIM_Base_SetConfig+0xb2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a29      	ldr	r2, [pc, #164]	; (8006b34 <TIM_Base_SetConfig+0x124>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d017      	beq.n	8006ac2 <TIM_Base_SetConfig+0xb2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a28      	ldr	r2, [pc, #160]	; (8006b38 <TIM_Base_SetConfig+0x128>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <TIM_Base_SetConfig+0xb2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a27      	ldr	r2, [pc, #156]	; (8006b3c <TIM_Base_SetConfig+0x12c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00f      	beq.n	8006ac2 <TIM_Base_SetConfig+0xb2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a26      	ldr	r2, [pc, #152]	; (8006b40 <TIM_Base_SetConfig+0x130>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00b      	beq.n	8006ac2 <TIM_Base_SetConfig+0xb2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a25      	ldr	r2, [pc, #148]	; (8006b44 <TIM_Base_SetConfig+0x134>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d007      	beq.n	8006ac2 <TIM_Base_SetConfig+0xb2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a24      	ldr	r2, [pc, #144]	; (8006b48 <TIM_Base_SetConfig+0x138>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d003      	beq.n	8006ac2 <TIM_Base_SetConfig+0xb2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a23      	ldr	r2, [pc, #140]	; (8006b4c <TIM_Base_SetConfig+0x13c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d108      	bne.n	8006ad4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a0a      	ldr	r2, [pc, #40]	; (8006b24 <TIM_Base_SetConfig+0x114>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_Base_SetConfig+0xf8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a0c      	ldr	r2, [pc, #48]	; (8006b34 <TIM_Base_SetConfig+0x124>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d103      	bne.n	8006b10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	615a      	str	r2, [r3, #20]
}
 8006b16:	bf00      	nop
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	40010000 	.word	0x40010000
 8006b28:	40000400 	.word	0x40000400
 8006b2c:	40000800 	.word	0x40000800
 8006b30:	40000c00 	.word	0x40000c00
 8006b34:	40010400 	.word	0x40010400
 8006b38:	40014000 	.word	0x40014000
 8006b3c:	40014400 	.word	0x40014400
 8006b40:	40014800 	.word	0x40014800
 8006b44:	40001800 	.word	0x40001800
 8006b48:	40001c00 	.word	0x40001c00
 8006b4c:	40002000 	.word	0x40002000

08006b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e03f      	b.n	8006c0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d106      	bne.n	8006ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fb fadc 	bl	800215c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2224      	movs	r2, #36	; 0x24
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f9a7 	bl	8006f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	691a      	ldr	r2, [r3, #16]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	695a      	ldr	r2, [r3, #20]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006be0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b08a      	sub	sp, #40	; 0x28
 8006c16:	af02      	add	r7, sp, #8
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	603b      	str	r3, [r7, #0]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	d17c      	bne.n	8006d2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <HAL_UART_Transmit+0x2c>
 8006c38:	88fb      	ldrh	r3, [r7, #6]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e075      	b.n	8006d2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_UART_Transmit+0x3e>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e06e      	b.n	8006d2e <HAL_UART_Transmit+0x11c>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2221      	movs	r2, #33	; 0x21
 8006c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c66:	f7fb fd8b 	bl	8002780 <HAL_GetTick>
 8006c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	88fa      	ldrh	r2, [r7, #6]
 8006c70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	88fa      	ldrh	r2, [r7, #6]
 8006c76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c80:	d108      	bne.n	8006c94 <HAL_UART_Transmit+0x82>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d104      	bne.n	8006c94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	e003      	b.n	8006c9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006ca4:	e02a      	b.n	8006cfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2200      	movs	r2, #0
 8006cae:	2180      	movs	r1, #128	; 0x80
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 f8e2 	bl	8006e7a <UART_WaitOnFlagUntilTimeout>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e036      	b.n	8006d2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10b      	bne.n	8006cde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	3302      	adds	r3, #2
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	e007      	b.n	8006cee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	3301      	adds	r3, #1
 8006cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1cf      	bne.n	8006ca6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2140      	movs	r1, #64	; 0x40
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 f8b2 	bl	8006e7a <UART_WaitOnFlagUntilTimeout>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e006      	b.n	8006d2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e000      	b.n	8006d2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d2c:	2302      	movs	r3, #2
  }
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3720      	adds	r7, #32
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b08a      	sub	sp, #40	; 0x28
 8006d3a:	af02      	add	r7, sp, #8
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b20      	cmp	r3, #32
 8006d54:	f040 808c 	bne.w	8006e70 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <HAL_UART_Receive+0x2e>
 8006d5e:	88fb      	ldrh	r3, [r7, #6]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e084      	b.n	8006e72 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <HAL_UART_Receive+0x40>
 8006d72:	2302      	movs	r3, #2
 8006d74:	e07d      	b.n	8006e72 <HAL_UART_Receive+0x13c>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2222      	movs	r2, #34	; 0x22
 8006d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d92:	f7fb fcf5 	bl	8002780 <HAL_GetTick>
 8006d96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	88fa      	ldrh	r2, [r7, #6]
 8006d9c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	88fa      	ldrh	r2, [r7, #6]
 8006da2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dac:	d108      	bne.n	8006dc0 <HAL_UART_Receive+0x8a>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	e003      	b.n	8006dc8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006dd0:	e043      	b.n	8006e5a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2120      	movs	r1, #32
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 f84c 	bl	8006e7a <UART_WaitOnFlagUntilTimeout>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e042      	b.n	8006e72 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10c      	bne.n	8006e0c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	3302      	adds	r3, #2
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	e01f      	b.n	8006e4c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e14:	d007      	beq.n	8006e26 <HAL_UART_Receive+0xf0>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10a      	bne.n	8006e34 <HAL_UART_Receive+0xfe>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	e008      	b.n	8006e46 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1b6      	bne.n	8006dd2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	e000      	b.n	8006e72 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006e70:	2302      	movs	r3, #2
  }
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	603b      	str	r3, [r7, #0]
 8006e86:	4613      	mov	r3, r2
 8006e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e8a:	e02c      	b.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e92:	d028      	beq.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <UART_WaitOnFlagUntilTimeout+0x30>
 8006e9a:	f7fb fc71 	bl	8002780 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d21d      	bcs.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006eb8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695a      	ldr	r2, [r3, #20]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0201 	bic.w	r2, r2, #1
 8006ec8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e00f      	b.n	8006f06 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	bf0c      	ite	eq
 8006ef6:	2301      	moveq	r3, #1
 8006ef8:	2300      	movne	r3, #0
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d0c3      	beq.n	8006e8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	b09f      	sub	sp, #124	; 0x7c
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f26:	68d9      	ldr	r1, [r3, #12]
 8006f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	ea40 0301 	orr.w	r3, r0, r1
 8006f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	431a      	orrs	r2, r3
 8006f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f54:	f021 010c 	bic.w	r1, r1, #12
 8006f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6e:	6999      	ldr	r1, [r3, #24]
 8006f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	ea40 0301 	orr.w	r3, r0, r1
 8006f78:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	4bc5      	ldr	r3, [pc, #788]	; (8007294 <UART_SetConfig+0x384>)
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d004      	beq.n	8006f8e <UART_SetConfig+0x7e>
 8006f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	4bc3      	ldr	r3, [pc, #780]	; (8007298 <UART_SetConfig+0x388>)
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d103      	bne.n	8006f96 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f8e:	f7fd fde7 	bl	8004b60 <HAL_RCC_GetPCLK2Freq>
 8006f92:	6778      	str	r0, [r7, #116]	; 0x74
 8006f94:	e002      	b.n	8006f9c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f96:	f7fd fdcf 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 8006f9a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fa4:	f040 80b6 	bne.w	8007114 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006faa:	461c      	mov	r4, r3
 8006fac:	f04f 0500 	mov.w	r5, #0
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	1891      	adds	r1, r2, r2
 8006fb6:	6439      	str	r1, [r7, #64]	; 0x40
 8006fb8:	415b      	adcs	r3, r3
 8006fba:	647b      	str	r3, [r7, #68]	; 0x44
 8006fbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006fc0:	1912      	adds	r2, r2, r4
 8006fc2:	eb45 0303 	adc.w	r3, r5, r3
 8006fc6:	f04f 0000 	mov.w	r0, #0
 8006fca:	f04f 0100 	mov.w	r1, #0
 8006fce:	00d9      	lsls	r1, r3, #3
 8006fd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fd4:	00d0      	lsls	r0, r2, #3
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	1911      	adds	r1, r2, r4
 8006fdc:	6639      	str	r1, [r7, #96]	; 0x60
 8006fde:	416b      	adcs	r3, r5
 8006fe0:	667b      	str	r3, [r7, #100]	; 0x64
 8006fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f04f 0300 	mov.w	r3, #0
 8006fec:	1891      	adds	r1, r2, r2
 8006fee:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ff0:	415b      	adcs	r3, r3
 8006ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ff4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ff8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006ffc:	f7f9 f910 	bl	8000220 <__aeabi_uldivmod>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4ba5      	ldr	r3, [pc, #660]	; (800729c <UART_SetConfig+0x38c>)
 8007006:	fba3 2302 	umull	r2, r3, r3, r2
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	011e      	lsls	r6, r3, #4
 800700e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007010:	461c      	mov	r4, r3
 8007012:	f04f 0500 	mov.w	r5, #0
 8007016:	4622      	mov	r2, r4
 8007018:	462b      	mov	r3, r5
 800701a:	1891      	adds	r1, r2, r2
 800701c:	6339      	str	r1, [r7, #48]	; 0x30
 800701e:	415b      	adcs	r3, r3
 8007020:	637b      	str	r3, [r7, #52]	; 0x34
 8007022:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007026:	1912      	adds	r2, r2, r4
 8007028:	eb45 0303 	adc.w	r3, r5, r3
 800702c:	f04f 0000 	mov.w	r0, #0
 8007030:	f04f 0100 	mov.w	r1, #0
 8007034:	00d9      	lsls	r1, r3, #3
 8007036:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800703a:	00d0      	lsls	r0, r2, #3
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	1911      	adds	r1, r2, r4
 8007042:	65b9      	str	r1, [r7, #88]	; 0x58
 8007044:	416b      	adcs	r3, r5
 8007046:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	461a      	mov	r2, r3
 800704e:	f04f 0300 	mov.w	r3, #0
 8007052:	1891      	adds	r1, r2, r2
 8007054:	62b9      	str	r1, [r7, #40]	; 0x28
 8007056:	415b      	adcs	r3, r3
 8007058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800705a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800705e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007062:	f7f9 f8dd 	bl	8000220 <__aeabi_uldivmod>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	4b8c      	ldr	r3, [pc, #560]	; (800729c <UART_SetConfig+0x38c>)
 800706c:	fba3 1302 	umull	r1, r3, r3, r2
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	2164      	movs	r1, #100	; 0x64
 8007074:	fb01 f303 	mul.w	r3, r1, r3
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	3332      	adds	r3, #50	; 0x32
 800707e:	4a87      	ldr	r2, [pc, #540]	; (800729c <UART_SetConfig+0x38c>)
 8007080:	fba2 2303 	umull	r2, r3, r2, r3
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800708c:	441e      	add	r6, r3
 800708e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007090:	4618      	mov	r0, r3
 8007092:	f04f 0100 	mov.w	r1, #0
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	1894      	adds	r4, r2, r2
 800709c:	623c      	str	r4, [r7, #32]
 800709e:	415b      	adcs	r3, r3
 80070a0:	627b      	str	r3, [r7, #36]	; 0x24
 80070a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070a6:	1812      	adds	r2, r2, r0
 80070a8:	eb41 0303 	adc.w	r3, r1, r3
 80070ac:	f04f 0400 	mov.w	r4, #0
 80070b0:	f04f 0500 	mov.w	r5, #0
 80070b4:	00dd      	lsls	r5, r3, #3
 80070b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80070ba:	00d4      	lsls	r4, r2, #3
 80070bc:	4622      	mov	r2, r4
 80070be:	462b      	mov	r3, r5
 80070c0:	1814      	adds	r4, r2, r0
 80070c2:	653c      	str	r4, [r7, #80]	; 0x50
 80070c4:	414b      	adcs	r3, r1
 80070c6:	657b      	str	r3, [r7, #84]	; 0x54
 80070c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	461a      	mov	r2, r3
 80070ce:	f04f 0300 	mov.w	r3, #0
 80070d2:	1891      	adds	r1, r2, r2
 80070d4:	61b9      	str	r1, [r7, #24]
 80070d6:	415b      	adcs	r3, r3
 80070d8:	61fb      	str	r3, [r7, #28]
 80070da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80070e2:	f7f9 f89d 	bl	8000220 <__aeabi_uldivmod>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4b6c      	ldr	r3, [pc, #432]	; (800729c <UART_SetConfig+0x38c>)
 80070ec:	fba3 1302 	umull	r1, r3, r3, r2
 80070f0:	095b      	lsrs	r3, r3, #5
 80070f2:	2164      	movs	r1, #100	; 0x64
 80070f4:	fb01 f303 	mul.w	r3, r1, r3
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	3332      	adds	r3, #50	; 0x32
 80070fe:	4a67      	ldr	r2, [pc, #412]	; (800729c <UART_SetConfig+0x38c>)
 8007100:	fba2 2303 	umull	r2, r3, r2, r3
 8007104:	095b      	lsrs	r3, r3, #5
 8007106:	f003 0207 	and.w	r2, r3, #7
 800710a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4432      	add	r2, r6
 8007110:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007112:	e0b9      	b.n	8007288 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007116:	461c      	mov	r4, r3
 8007118:	f04f 0500 	mov.w	r5, #0
 800711c:	4622      	mov	r2, r4
 800711e:	462b      	mov	r3, r5
 8007120:	1891      	adds	r1, r2, r2
 8007122:	6139      	str	r1, [r7, #16]
 8007124:	415b      	adcs	r3, r3
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800712c:	1912      	adds	r2, r2, r4
 800712e:	eb45 0303 	adc.w	r3, r5, r3
 8007132:	f04f 0000 	mov.w	r0, #0
 8007136:	f04f 0100 	mov.w	r1, #0
 800713a:	00d9      	lsls	r1, r3, #3
 800713c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007140:	00d0      	lsls	r0, r2, #3
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	eb12 0804 	adds.w	r8, r2, r4
 800714a:	eb43 0905 	adc.w	r9, r3, r5
 800714e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	4618      	mov	r0, r3
 8007154:	f04f 0100 	mov.w	r1, #0
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	f04f 0300 	mov.w	r3, #0
 8007160:	008b      	lsls	r3, r1, #2
 8007162:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007166:	0082      	lsls	r2, r0, #2
 8007168:	4640      	mov	r0, r8
 800716a:	4649      	mov	r1, r9
 800716c:	f7f9 f858 	bl	8000220 <__aeabi_uldivmod>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4b49      	ldr	r3, [pc, #292]	; (800729c <UART_SetConfig+0x38c>)
 8007176:	fba3 2302 	umull	r2, r3, r3, r2
 800717a:	095b      	lsrs	r3, r3, #5
 800717c:	011e      	lsls	r6, r3, #4
 800717e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007180:	4618      	mov	r0, r3
 8007182:	f04f 0100 	mov.w	r1, #0
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	1894      	adds	r4, r2, r2
 800718c:	60bc      	str	r4, [r7, #8]
 800718e:	415b      	adcs	r3, r3
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007196:	1812      	adds	r2, r2, r0
 8007198:	eb41 0303 	adc.w	r3, r1, r3
 800719c:	f04f 0400 	mov.w	r4, #0
 80071a0:	f04f 0500 	mov.w	r5, #0
 80071a4:	00dd      	lsls	r5, r3, #3
 80071a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071aa:	00d4      	lsls	r4, r2, #3
 80071ac:	4622      	mov	r2, r4
 80071ae:	462b      	mov	r3, r5
 80071b0:	1814      	adds	r4, r2, r0
 80071b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80071b4:	414b      	adcs	r3, r1
 80071b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	4618      	mov	r0, r3
 80071be:	f04f 0100 	mov.w	r1, #0
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	f04f 0300 	mov.w	r3, #0
 80071ca:	008b      	lsls	r3, r1, #2
 80071cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071d0:	0082      	lsls	r2, r0, #2
 80071d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80071d6:	f7f9 f823 	bl	8000220 <__aeabi_uldivmod>
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	4b2f      	ldr	r3, [pc, #188]	; (800729c <UART_SetConfig+0x38c>)
 80071e0:	fba3 1302 	umull	r1, r3, r3, r2
 80071e4:	095b      	lsrs	r3, r3, #5
 80071e6:	2164      	movs	r1, #100	; 0x64
 80071e8:	fb01 f303 	mul.w	r3, r1, r3
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	3332      	adds	r3, #50	; 0x32
 80071f2:	4a2a      	ldr	r2, [pc, #168]	; (800729c <UART_SetConfig+0x38c>)
 80071f4:	fba2 2303 	umull	r2, r3, r2, r3
 80071f8:	095b      	lsrs	r3, r3, #5
 80071fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071fe:	441e      	add	r6, r3
 8007200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007202:	4618      	mov	r0, r3
 8007204:	f04f 0100 	mov.w	r1, #0
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	1894      	adds	r4, r2, r2
 800720e:	603c      	str	r4, [r7, #0]
 8007210:	415b      	adcs	r3, r3
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007218:	1812      	adds	r2, r2, r0
 800721a:	eb41 0303 	adc.w	r3, r1, r3
 800721e:	f04f 0400 	mov.w	r4, #0
 8007222:	f04f 0500 	mov.w	r5, #0
 8007226:	00dd      	lsls	r5, r3, #3
 8007228:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800722c:	00d4      	lsls	r4, r2, #3
 800722e:	4622      	mov	r2, r4
 8007230:	462b      	mov	r3, r5
 8007232:	eb12 0a00 	adds.w	sl, r2, r0
 8007236:	eb43 0b01 	adc.w	fp, r3, r1
 800723a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	4618      	mov	r0, r3
 8007240:	f04f 0100 	mov.w	r1, #0
 8007244:	f04f 0200 	mov.w	r2, #0
 8007248:	f04f 0300 	mov.w	r3, #0
 800724c:	008b      	lsls	r3, r1, #2
 800724e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007252:	0082      	lsls	r2, r0, #2
 8007254:	4650      	mov	r0, sl
 8007256:	4659      	mov	r1, fp
 8007258:	f7f8 ffe2 	bl	8000220 <__aeabi_uldivmod>
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	4b0e      	ldr	r3, [pc, #56]	; (800729c <UART_SetConfig+0x38c>)
 8007262:	fba3 1302 	umull	r1, r3, r3, r2
 8007266:	095b      	lsrs	r3, r3, #5
 8007268:	2164      	movs	r1, #100	; 0x64
 800726a:	fb01 f303 	mul.w	r3, r1, r3
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	3332      	adds	r3, #50	; 0x32
 8007274:	4a09      	ldr	r2, [pc, #36]	; (800729c <UART_SetConfig+0x38c>)
 8007276:	fba2 2303 	umull	r2, r3, r2, r3
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	f003 020f 	and.w	r2, r3, #15
 8007280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4432      	add	r2, r6
 8007286:	609a      	str	r2, [r3, #8]
}
 8007288:	bf00      	nop
 800728a:	377c      	adds	r7, #124	; 0x7c
 800728c:	46bd      	mov	sp, r7
 800728e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007292:	bf00      	nop
 8007294:	40011000 	.word	0x40011000
 8007298:	40011400 	.word	0x40011400
 800729c:	51eb851f 	.word	0x51eb851f

080072a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072a0:	b084      	sub	sp, #16
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	f107 001c 	add.w	r0, r7, #28
 80072ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d122      	bne.n	80072fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80072cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d105      	bne.n	80072f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 fac0 	bl	8008878 <USB_CoreReset>
 80072f8:	4603      	mov	r3, r0
 80072fa:	73fb      	strb	r3, [r7, #15]
 80072fc:	e01a      	b.n	8007334 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 fab4 	bl	8008878 <USB_CoreReset>
 8007310:	4603      	mov	r3, r0
 8007312:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d106      	bne.n	8007328 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	639a      	str	r2, [r3, #56]	; 0x38
 8007326:	e005      	b.n	8007334 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	2b01      	cmp	r3, #1
 8007338:	d10b      	bne.n	8007352 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f043 0206 	orr.w	r2, r3, #6
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f043 0220 	orr.w	r2, r3, #32
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007352:	7bfb      	ldrb	r3, [r7, #15]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800735e:	b004      	add	sp, #16
 8007360:	4770      	bx	lr
	...

08007364 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	4613      	mov	r3, r2
 8007370:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	2b02      	cmp	r3, #2
 8007376:	d165      	bne.n	8007444 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4a41      	ldr	r2, [pc, #260]	; (8007480 <USB_SetTurnaroundTime+0x11c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d906      	bls.n	800738e <USB_SetTurnaroundTime+0x2a>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4a40      	ldr	r2, [pc, #256]	; (8007484 <USB_SetTurnaroundTime+0x120>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d202      	bcs.n	800738e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007388:	230f      	movs	r3, #15
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	e062      	b.n	8007454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	4a3c      	ldr	r2, [pc, #240]	; (8007484 <USB_SetTurnaroundTime+0x120>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d306      	bcc.n	80073a4 <USB_SetTurnaroundTime+0x40>
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	4a3b      	ldr	r2, [pc, #236]	; (8007488 <USB_SetTurnaroundTime+0x124>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d202      	bcs.n	80073a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800739e:	230e      	movs	r3, #14
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	e057      	b.n	8007454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4a38      	ldr	r2, [pc, #224]	; (8007488 <USB_SetTurnaroundTime+0x124>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d306      	bcc.n	80073ba <USB_SetTurnaroundTime+0x56>
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4a37      	ldr	r2, [pc, #220]	; (800748c <USB_SetTurnaroundTime+0x128>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d202      	bcs.n	80073ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80073b4:	230d      	movs	r3, #13
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	e04c      	b.n	8007454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	4a33      	ldr	r2, [pc, #204]	; (800748c <USB_SetTurnaroundTime+0x128>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d306      	bcc.n	80073d0 <USB_SetTurnaroundTime+0x6c>
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	4a32      	ldr	r2, [pc, #200]	; (8007490 <USB_SetTurnaroundTime+0x12c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d802      	bhi.n	80073d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80073ca:	230c      	movs	r3, #12
 80073cc:	617b      	str	r3, [r7, #20]
 80073ce:	e041      	b.n	8007454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4a2f      	ldr	r2, [pc, #188]	; (8007490 <USB_SetTurnaroundTime+0x12c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d906      	bls.n	80073e6 <USB_SetTurnaroundTime+0x82>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4a2e      	ldr	r2, [pc, #184]	; (8007494 <USB_SetTurnaroundTime+0x130>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d802      	bhi.n	80073e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80073e0:	230b      	movs	r3, #11
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e036      	b.n	8007454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	4a2a      	ldr	r2, [pc, #168]	; (8007494 <USB_SetTurnaroundTime+0x130>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d906      	bls.n	80073fc <USB_SetTurnaroundTime+0x98>
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	4a29      	ldr	r2, [pc, #164]	; (8007498 <USB_SetTurnaroundTime+0x134>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d802      	bhi.n	80073fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80073f6:	230a      	movs	r3, #10
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	e02b      	b.n	8007454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4a26      	ldr	r2, [pc, #152]	; (8007498 <USB_SetTurnaroundTime+0x134>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d906      	bls.n	8007412 <USB_SetTurnaroundTime+0xae>
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4a25      	ldr	r2, [pc, #148]	; (800749c <USB_SetTurnaroundTime+0x138>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d202      	bcs.n	8007412 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800740c:	2309      	movs	r3, #9
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	e020      	b.n	8007454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	4a21      	ldr	r2, [pc, #132]	; (800749c <USB_SetTurnaroundTime+0x138>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d306      	bcc.n	8007428 <USB_SetTurnaroundTime+0xc4>
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	4a20      	ldr	r2, [pc, #128]	; (80074a0 <USB_SetTurnaroundTime+0x13c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d802      	bhi.n	8007428 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007422:	2308      	movs	r3, #8
 8007424:	617b      	str	r3, [r7, #20]
 8007426:	e015      	b.n	8007454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	4a1d      	ldr	r2, [pc, #116]	; (80074a0 <USB_SetTurnaroundTime+0x13c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d906      	bls.n	800743e <USB_SetTurnaroundTime+0xda>
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4a1c      	ldr	r2, [pc, #112]	; (80074a4 <USB_SetTurnaroundTime+0x140>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d202      	bcs.n	800743e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007438:	2307      	movs	r3, #7
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	e00a      	b.n	8007454 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800743e:	2306      	movs	r3, #6
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	e007      	b.n	8007454 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d102      	bne.n	8007450 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800744a:	2309      	movs	r3, #9
 800744c:	617b      	str	r3, [r7, #20]
 800744e:	e001      	b.n	8007454 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007450:	2309      	movs	r3, #9
 8007452:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	029b      	lsls	r3, r3, #10
 8007468:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800746c:	431a      	orrs	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	00d8acbf 	.word	0x00d8acbf
 8007484:	00e4e1c0 	.word	0x00e4e1c0
 8007488:	00f42400 	.word	0x00f42400
 800748c:	01067380 	.word	0x01067380
 8007490:	011a499f 	.word	0x011a499f
 8007494:	01312cff 	.word	0x01312cff
 8007498:	014ca43f 	.word	0x014ca43f
 800749c:	016e3600 	.word	0x016e3600
 80074a0:	01a6ab1f 	.word	0x01a6ab1f
 80074a4:	01e84800 	.word	0x01e84800

080074a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f043 0201 	orr.w	r2, r3, #1
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f023 0201 	bic.w	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d106      	bne.n	8007518 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	60da      	str	r2, [r3, #12]
 8007516:	e00b      	b.n	8007530 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d106      	bne.n	800752c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60da      	str	r2, [r3, #12]
 800752a:	e001      	b.n	8007530 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e003      	b.n	8007538 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007530:	2032      	movs	r0, #50	; 0x32
 8007532:	f7fb f931 	bl	8002798 <HAL_Delay>

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007540:	b084      	sub	sp, #16
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800754e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800755a:	2300      	movs	r3, #0
 800755c:	613b      	str	r3, [r7, #16]
 800755e:	e009      	b.n	8007574 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	3340      	adds	r3, #64	; 0x40
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	2200      	movs	r2, #0
 800756c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	3301      	adds	r3, #1
 8007572:	613b      	str	r3, [r7, #16]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2b0e      	cmp	r3, #14
 8007578:	d9f2      	bls.n	8007560 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800757a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800757c:	2b00      	cmp	r3, #0
 800757e:	d11c      	bne.n	80075ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800758e:	f043 0302 	orr.w	r3, r3, #2
 8007592:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	e005      	b.n	80075c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075cc:	461a      	mov	r2, r3
 80075ce:	2300      	movs	r3, #0
 80075d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d8:	4619      	mov	r1, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e0:	461a      	mov	r2, r3
 80075e2:	680b      	ldr	r3, [r1, #0]
 80075e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d10c      	bne.n	8007606 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d104      	bne.n	80075fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075f2:	2100      	movs	r1, #0
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f949 	bl	800788c <USB_SetDevSpeed>
 80075fa:	e008      	b.n	800760e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075fc:	2101      	movs	r1, #1
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f944 	bl	800788c <USB_SetDevSpeed>
 8007604:	e003      	b.n	800760e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007606:	2103      	movs	r1, #3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f93f 	bl	800788c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800760e:	2110      	movs	r1, #16
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f8f3 	bl	80077fc <USB_FlushTxFifo>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f911 	bl	8007848 <USB_FlushRxFifo>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007636:	461a      	mov	r2, r3
 8007638:	2300      	movs	r3, #0
 800763a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007642:	461a      	mov	r2, r3
 8007644:	2300      	movs	r3, #0
 8007646:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764e:	461a      	mov	r2, r3
 8007650:	2300      	movs	r3, #0
 8007652:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007654:	2300      	movs	r3, #0
 8007656:	613b      	str	r3, [r7, #16]
 8007658:	e043      	b.n	80076e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800766c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007670:	d118      	bne.n	80076a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007684:	461a      	mov	r2, r3
 8007686:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800768a:	6013      	str	r3, [r2, #0]
 800768c:	e013      	b.n	80076b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769a:	461a      	mov	r2, r3
 800769c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	e008      	b.n	80076b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b0:	461a      	mov	r2, r3
 80076b2:	2300      	movs	r3, #0
 80076b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c2:	461a      	mov	r2, r3
 80076c4:	2300      	movs	r3, #0
 80076c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d4:	461a      	mov	r2, r3
 80076d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	3301      	adds	r3, #1
 80076e0:	613b      	str	r3, [r7, #16]
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d3b7      	bcc.n	800765a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ea:	2300      	movs	r3, #0
 80076ec:	613b      	str	r3, [r7, #16]
 80076ee:	e043      	b.n	8007778 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007706:	d118      	bne.n	800773a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771a:	461a      	mov	r2, r3
 800771c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	e013      	b.n	800774c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007730:	461a      	mov	r2, r3
 8007732:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	e008      	b.n	800774c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007746:	461a      	mov	r2, r3
 8007748:	2300      	movs	r3, #0
 800774a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007758:	461a      	mov	r2, r3
 800775a:	2300      	movs	r3, #0
 800775c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776a:	461a      	mov	r2, r3
 800776c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007770:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	3301      	adds	r3, #1
 8007776:	613b      	str	r3, [r7, #16]
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	429a      	cmp	r2, r3
 800777e:	d3b7      	bcc.n	80076f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800778e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007792:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80077a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d105      	bne.n	80077b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	f043 0210 	orr.w	r2, r3, #16
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699a      	ldr	r2, [r3, #24]
 80077b8:	4b0f      	ldr	r3, [pc, #60]	; (80077f8 <USB_DevInit+0x2b8>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80077c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d005      	beq.n	80077d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	f043 0208 	orr.w	r2, r3, #8
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d107      	bne.n	80077e8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077e0:	f043 0304 	orr.w	r3, r3, #4
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077f4:	b004      	add	sp, #16
 80077f6:	4770      	bx	lr
 80077f8:	803c3800 	.word	0x803c3800

080077fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	019b      	lsls	r3, r3, #6
 800780e:	f043 0220 	orr.w	r2, r3, #32
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3301      	adds	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4a09      	ldr	r2, [pc, #36]	; (8007844 <USB_FlushTxFifo+0x48>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d901      	bls.n	8007828 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e006      	b.n	8007836 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	f003 0320 	and.w	r3, r3, #32
 8007830:	2b20      	cmp	r3, #32
 8007832:	d0f0      	beq.n	8007816 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	00030d40 	.word	0x00030d40

08007848 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2210      	movs	r2, #16
 8007858:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3301      	adds	r3, #1
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4a09      	ldr	r2, [pc, #36]	; (8007888 <USB_FlushRxFifo+0x40>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d901      	bls.n	800786c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e006      	b.n	800787a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f003 0310 	and.w	r3, r3, #16
 8007874:	2b10      	cmp	r3, #16
 8007876:	d0f0      	beq.n	800785a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	00030d40 	.word	0x00030d40

0800788c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	78fb      	ldrb	r3, [r7, #3]
 80078a6:	68f9      	ldr	r1, [r7, #12]
 80078a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078ac:	4313      	orrs	r3, r2
 80078ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80078be:	b480      	push	{r7}
 80078c0:	b087      	sub	sp, #28
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 0306 	and.w	r3, r3, #6
 80078d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d102      	bne.n	80078e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80078de:	2300      	movs	r3, #0
 80078e0:	75fb      	strb	r3, [r7, #23]
 80078e2:	e00a      	b.n	80078fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d002      	beq.n	80078f0 <USB_GetDevSpeed+0x32>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b06      	cmp	r3, #6
 80078ee:	d102      	bne.n	80078f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80078f0:	2302      	movs	r3, #2
 80078f2:	75fb      	strb	r3, [r7, #23]
 80078f4:	e001      	b.n	80078fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80078f6:	230f      	movs	r3, #15
 80078f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d13a      	bne.n	800799a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792a:	69da      	ldr	r2, [r3, #28]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	f003 030f 	and.w	r3, r3, #15
 8007934:	2101      	movs	r1, #1
 8007936:	fa01 f303 	lsl.w	r3, r1, r3
 800793a:	b29b      	uxth	r3, r3
 800793c:	68f9      	ldr	r1, [r7, #12]
 800793e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007942:	4313      	orrs	r3, r2
 8007944:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d155      	bne.n	8007a08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	78db      	ldrb	r3, [r3, #3]
 8007976:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007978:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	059b      	lsls	r3, r3, #22
 800797e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007980:	4313      	orrs	r3, r2
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	440a      	add	r2, r1
 800798a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800798e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	e036      	b.n	8007a08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a0:	69da      	ldr	r2, [r3, #28]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	f003 030f 	and.w	r3, r3, #15
 80079aa:	2101      	movs	r1, #1
 80079ac:	fa01 f303 	lsl.w	r3, r1, r3
 80079b0:	041b      	lsls	r3, r3, #16
 80079b2:	68f9      	ldr	r1, [r7, #12]
 80079b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079b8:	4313      	orrs	r3, r2
 80079ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d11a      	bne.n	8007a08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	78db      	ldrb	r3, [r3, #3]
 80079ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079ee:	430b      	orrs	r3, r1
 80079f0:	4313      	orrs	r3, r2
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	0151      	lsls	r1, r2, #5
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	440a      	add	r2, r1
 80079fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
	...

08007a18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	785b      	ldrb	r3, [r3, #1]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d161      	bne.n	8007af8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a4a:	d11f      	bne.n	8007a8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	0151      	lsls	r1, r2, #5
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	440a      	add	r2, r1
 8007a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	0151      	lsls	r1, r2, #5
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	440a      	add	r2, r1
 8007a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	f003 030f 	and.w	r3, r3, #15
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	68f9      	ldr	r1, [r7, #12]
 8007aa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007aac:	4013      	ands	r3, r2
 8007aae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab6:	69da      	ldr	r2, [r3, #28]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	f003 030f 	and.w	r3, r3, #15
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	68f9      	ldr	r1, [r7, #12]
 8007acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	0159      	lsls	r1, r3, #5
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	440b      	add	r3, r1
 8007aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aee:	4619      	mov	r1, r3
 8007af0:	4b35      	ldr	r3, [pc, #212]	; (8007bc8 <USB_DeactivateEndpoint+0x1b0>)
 8007af2:	4013      	ands	r3, r2
 8007af4:	600b      	str	r3, [r1, #0]
 8007af6:	e060      	b.n	8007bba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b0e:	d11f      	bne.n	8007b50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	0151      	lsls	r1, r2, #5
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	440a      	add	r2, r1
 8007b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	0151      	lsls	r1, r2, #5
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	440a      	add	r2, r1
 8007b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	2101      	movs	r1, #1
 8007b62:	fa01 f303 	lsl.w	r3, r1, r3
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	43db      	mvns	r3, r3
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b70:	4013      	ands	r3, r2
 8007b72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	f003 030f 	and.w	r3, r3, #15
 8007b84:	2101      	movs	r1, #1
 8007b86:	fa01 f303 	lsl.w	r3, r1, r3
 8007b8a:	041b      	lsls	r3, r3, #16
 8007b8c:	43db      	mvns	r3, r3
 8007b8e:	68f9      	ldr	r1, [r7, #12]
 8007b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b94:	4013      	ands	r3, r2
 8007b96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	0159      	lsls	r1, r3, #5
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	440b      	add	r3, r1
 8007bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <USB_DeactivateEndpoint+0x1b4>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	ec337800 	.word	0xec337800
 8007bcc:	eff37800 	.word	0xeff37800

08007bd0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08a      	sub	sp, #40	; 0x28
 8007bd4:	af02      	add	r7, sp, #8
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	785b      	ldrb	r3, [r3, #1]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	f040 815c 	bne.w	8007eaa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d132      	bne.n	8007c60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	0151      	lsls	r1, r2, #5
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	440a      	add	r2, r1
 8007c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	0151      	lsls	r1, r2, #5
 8007c50:	69fa      	ldr	r2, [r7, #28]
 8007c52:	440a      	add	r2, r1
 8007c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c58:	0cdb      	lsrs	r3, r3, #19
 8007c5a:	04db      	lsls	r3, r3, #19
 8007c5c:	6113      	str	r3, [r2, #16]
 8007c5e:	e074      	b.n	8007d4a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	0151      	lsls	r1, r2, #5
 8007c72:	69fa      	ldr	r2, [r7, #28]
 8007c74:	440a      	add	r2, r1
 8007c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c7a:	0cdb      	lsrs	r3, r3, #19
 8007c7c:	04db      	lsls	r3, r3, #19
 8007c7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	0151      	lsls	r1, r2, #5
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	440a      	add	r2, r1
 8007c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ca2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb0:	691a      	ldr	r2, [r3, #16]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	6959      	ldr	r1, [r3, #20]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	440b      	add	r3, r1
 8007cbc:	1e59      	subs	r1, r3, #1
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cc6:	04d9      	lsls	r1, r3, #19
 8007cc8:	4b9d      	ldr	r3, [pc, #628]	; (8007f40 <USB_EPStartXfer+0x370>)
 8007cca:	400b      	ands	r3, r1
 8007ccc:	69b9      	ldr	r1, [r7, #24]
 8007cce:	0148      	lsls	r0, r1, #5
 8007cd0:	69f9      	ldr	r1, [r7, #28]
 8007cd2:	4401      	add	r1, r0
 8007cd4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce8:	691a      	ldr	r2, [r3, #16]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cf2:	69b9      	ldr	r1, [r7, #24]
 8007cf4:	0148      	lsls	r0, r1, #5
 8007cf6:	69f9      	ldr	r1, [r7, #28]
 8007cf8:	4401      	add	r1, r0
 8007cfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	78db      	ldrb	r3, [r3, #3]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d11f      	bne.n	8007d4a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	0151      	lsls	r1, r2, #5
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	440a      	add	r2, r1
 8007d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007d28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	0151      	lsls	r1, r2, #5
 8007d3c:	69fa      	ldr	r2, [r7, #28]
 8007d3e:	440a      	add	r2, r1
 8007d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d14b      	bne.n	8007de8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d009      	beq.n	8007d6c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d64:	461a      	mov	r2, r3
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	78db      	ldrb	r3, [r3, #3]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d128      	bne.n	8007dc6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d110      	bne.n	8007da6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	0151      	lsls	r1, r2, #5
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	440a      	add	r2, r1
 8007d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	e00f      	b.n	8007dc6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	0151      	lsls	r1, r2, #5
 8007db8:	69fa      	ldr	r2, [r7, #28]
 8007dba:	440a      	add	r2, r1
 8007dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dc4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	0151      	lsls	r1, r2, #5
 8007dd8:	69fa      	ldr	r2, [r7, #28]
 8007dda:	440a      	add	r2, r1
 8007ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	e12f      	b.n	8008048 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	0151      	lsls	r1, r2, #5
 8007dfa:	69fa      	ldr	r2, [r7, #28]
 8007dfc:	440a      	add	r2, r1
 8007dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	78db      	ldrb	r3, [r3, #3]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d015      	beq.n	8007e3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 8117 	beq.w	8008048 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	f003 030f 	and.w	r3, r3, #15
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e30:	69f9      	ldr	r1, [r7, #28]
 8007e32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e36:	4313      	orrs	r3, r2
 8007e38:	634b      	str	r3, [r1, #52]	; 0x34
 8007e3a:	e105      	b.n	8008048 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d110      	bne.n	8007e6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	0151      	lsls	r1, r2, #5
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	440a      	add	r2, r1
 8007e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	e00f      	b.n	8007e8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	68d9      	ldr	r1, [r3, #12]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	781a      	ldrb	r2, [r3, #0]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	b298      	uxth	r0, r3
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fa2b 	bl	80082fe <USB_WritePacket>
 8007ea8:	e0ce      	b.n	8008048 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	0151      	lsls	r1, r2, #5
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	440a      	add	r2, r1
 8007ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ec4:	0cdb      	lsrs	r3, r3, #19
 8007ec6:	04db      	lsls	r3, r3, #19
 8007ec8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	0151      	lsls	r1, r2, #5
 8007edc:	69fa      	ldr	r2, [r7, #28]
 8007ede:	440a      	add	r2, r1
 8007ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ee8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007eec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d126      	bne.n	8007f44 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f0c:	69b9      	ldr	r1, [r7, #24]
 8007f0e:	0148      	lsls	r0, r1, #5
 8007f10:	69f9      	ldr	r1, [r7, #28]
 8007f12:	4401      	add	r1, r0
 8007f14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	0151      	lsls	r1, r2, #5
 8007f2e:	69fa      	ldr	r2, [r7, #28]
 8007f30:	440a      	add	r2, r1
 8007f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f3a:	6113      	str	r3, [r2, #16]
 8007f3c:	e036      	b.n	8007fac <USB_EPStartXfer+0x3dc>
 8007f3e:	bf00      	nop
 8007f40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	695a      	ldr	r2, [r3, #20]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	1e5a      	subs	r2, r3, #1
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f58:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	8afb      	ldrh	r3, [r7, #22]
 8007f6a:	04d9      	lsls	r1, r3, #19
 8007f6c:	4b39      	ldr	r3, [pc, #228]	; (8008054 <USB_EPStartXfer+0x484>)
 8007f6e:	400b      	ands	r3, r1
 8007f70:	69b9      	ldr	r1, [r7, #24]
 8007f72:	0148      	lsls	r0, r1, #5
 8007f74:	69f9      	ldr	r1, [r7, #28]
 8007f76:	4401      	add	r1, r0
 8007f78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8c:	691a      	ldr	r2, [r3, #16]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	8af9      	ldrh	r1, [r7, #22]
 8007f94:	fb01 f303 	mul.w	r3, r1, r3
 8007f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f9c:	69b9      	ldr	r1, [r7, #24]
 8007f9e:	0148      	lsls	r0, r1, #5
 8007fa0:	69f9      	ldr	r1, [r7, #28]
 8007fa2:	4401      	add	r1, r0
 8007fa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007fac:	79fb      	ldrb	r3, [r7, #7]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d10d      	bne.n	8007fce <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d009      	beq.n	8007fce <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	68d9      	ldr	r1, [r3, #12]
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fca:	460a      	mov	r2, r1
 8007fcc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	78db      	ldrb	r3, [r3, #3]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d128      	bne.n	8008028 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d110      	bne.n	8008008 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	0151      	lsls	r1, r2, #5
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	440a      	add	r2, r1
 8007ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008000:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	e00f      	b.n	8008028 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	69fa      	ldr	r2, [r7, #28]
 800801c:	440a      	add	r2, r1
 800801e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008026:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69ba      	ldr	r2, [r7, #24]
 8008038:	0151      	lsls	r1, r2, #5
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	440a      	add	r2, r1
 800803e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008042:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008046:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	1ff80000 	.word	0x1ff80000

08008058 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	4613      	mov	r3, r2
 8008064:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	785b      	ldrb	r3, [r3, #1]
 8008074:	2b01      	cmp	r3, #1
 8008076:	f040 80cd 	bne.w	8008214 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d132      	bne.n	80080e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	4413      	add	r3, r2
 800808a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	0151      	lsls	r1, r2, #5
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	440a      	add	r2, r1
 8008098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800809c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	0151      	lsls	r1, r2, #5
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	440a      	add	r2, r1
 80080bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	0151      	lsls	r1, r2, #5
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	440a      	add	r2, r1
 80080dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e0:	0cdb      	lsrs	r3, r3, #19
 80080e2:	04db      	lsls	r3, r3, #19
 80080e4:	6113      	str	r3, [r2, #16]
 80080e6:	e04e      	b.n	8008186 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	0151      	lsls	r1, r2, #5
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	440a      	add	r2, r1
 80080fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008102:	0cdb      	lsrs	r3, r3, #19
 8008104:	04db      	lsls	r3, r3, #19
 8008106:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	0151      	lsls	r1, r2, #5
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	440a      	add	r2, r1
 800811e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008122:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008126:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800812a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	695a      	ldr	r2, [r3, #20]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	429a      	cmp	r2, r3
 8008136:	d903      	bls.n	8008140 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	689a      	ldr	r2, [r3, #8]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	0151      	lsls	r1, r2, #5
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	440a      	add	r2, r1
 8008156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800815a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800815e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816c:	691a      	ldr	r2, [r3, #16]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008176:	6939      	ldr	r1, [r7, #16]
 8008178:	0148      	lsls	r0, r1, #5
 800817a:	6979      	ldr	r1, [r7, #20]
 800817c:	4401      	add	r1, r0
 800817e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008182:	4313      	orrs	r3, r2
 8008184:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008186:	79fb      	ldrb	r3, [r7, #7]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d11e      	bne.n	80081ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d009      	beq.n	80081a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a0:	461a      	mov	r2, r3
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	0151      	lsls	r1, r2, #5
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	440a      	add	r2, r1
 80081be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	e092      	b.n	80082f0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	0151      	lsls	r1, r2, #5
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	440a      	add	r2, r1
 80081e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d07e      	beq.n	80082f0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	2101      	movs	r1, #1
 8008204:	fa01 f303 	lsl.w	r3, r1, r3
 8008208:	6979      	ldr	r1, [r7, #20]
 800820a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800820e:	4313      	orrs	r3, r2
 8008210:	634b      	str	r3, [r1, #52]	; 0x34
 8008212:	e06d      	b.n	80082f0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	0151      	lsls	r1, r2, #5
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	440a      	add	r2, r1
 800822a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800822e:	0cdb      	lsrs	r3, r3, #19
 8008230:	04db      	lsls	r3, r3, #19
 8008232:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	4413      	add	r3, r2
 800823c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	0151      	lsls	r1, r2, #5
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	440a      	add	r2, r1
 800824a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800824e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008252:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008256:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	0151      	lsls	r1, r2, #5
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	440a      	add	r2, r1
 800827e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008282:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008286:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008294:	691a      	ldr	r2, [r3, #16]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800829e:	6939      	ldr	r1, [r7, #16]
 80082a0:	0148      	lsls	r0, r1, #5
 80082a2:	6979      	ldr	r1, [r7, #20]
 80082a4:	4401      	add	r1, r0
 80082a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082aa:	4313      	orrs	r3, r2
 80082ac:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80082ae:	79fb      	ldrb	r3, [r7, #7]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d10d      	bne.n	80082d0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d009      	beq.n	80082d0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	68d9      	ldr	r1, [r3, #12]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082cc:	460a      	mov	r2, r1
 80082ce:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	0151      	lsls	r1, r2, #5
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	440a      	add	r2, r1
 80082e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	371c      	adds	r7, #28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082fe:	b480      	push	{r7}
 8008300:	b089      	sub	sp, #36	; 0x24
 8008302:	af00      	add	r7, sp, #0
 8008304:	60f8      	str	r0, [r7, #12]
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	4611      	mov	r1, r2
 800830a:	461a      	mov	r2, r3
 800830c:	460b      	mov	r3, r1
 800830e:	71fb      	strb	r3, [r7, #7]
 8008310:	4613      	mov	r3, r2
 8008312:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800831c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008320:	2b00      	cmp	r3, #0
 8008322:	d11a      	bne.n	800835a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008324:	88bb      	ldrh	r3, [r7, #4]
 8008326:	3303      	adds	r3, #3
 8008328:	089b      	lsrs	r3, r3, #2
 800832a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800832c:	2300      	movs	r3, #0
 800832e:	61bb      	str	r3, [r7, #24]
 8008330:	e00f      	b.n	8008352 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	031a      	lsls	r2, r3, #12
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	4413      	add	r3, r2
 800833a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800833e:	461a      	mov	r2, r3
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	3304      	adds	r3, #4
 800834a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	3301      	adds	r3, #1
 8008350:	61bb      	str	r3, [r7, #24]
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	429a      	cmp	r2, r3
 8008358:	d3eb      	bcc.n	8008332 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3724      	adds	r7, #36	; 0x24
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008368:	b480      	push	{r7}
 800836a:	b089      	sub	sp, #36	; 0x24
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	4613      	mov	r3, r2
 8008374:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800837e:	88fb      	ldrh	r3, [r7, #6]
 8008380:	3303      	adds	r3, #3
 8008382:	089b      	lsrs	r3, r3, #2
 8008384:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008386:	2300      	movs	r3, #0
 8008388:	61bb      	str	r3, [r7, #24]
 800838a:	e00b      	b.n	80083a4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	601a      	str	r2, [r3, #0]
    pDest++;
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	3304      	adds	r3, #4
 800839c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	3301      	adds	r3, #1
 80083a2:	61bb      	str	r3, [r7, #24]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d3ef      	bcc.n	800838c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80083ac:	69fb      	ldr	r3, [r7, #28]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3724      	adds	r7, #36	; 0x24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d12c      	bne.n	8008430 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	db12      	blt.n	800840e <USB_EPSetStall+0x54>
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00f      	beq.n	800840e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	0151      	lsls	r1, r2, #5
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	440a      	add	r2, r1
 8008404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008408:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800840c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4413      	add	r3, r2
 8008416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	0151      	lsls	r1, r2, #5
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	440a      	add	r2, r1
 8008424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008428:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	e02b      	b.n	8008488 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	db12      	blt.n	8008468 <USB_EPSetStall+0xae>
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00f      	beq.n	8008468 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	0151      	lsls	r1, r2, #5
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	440a      	add	r2, r1
 800845e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008462:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008466:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4413      	add	r3, r2
 8008470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	0151      	lsls	r1, r2, #5
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	440a      	add	r2, r1
 800847e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008482:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008486:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008496:	b480      	push	{r7}
 8008498:	b085      	sub	sp, #20
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d128      	bne.n	8008504 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	0151      	lsls	r1, r2, #5
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	440a      	add	r2, r1
 80084c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	78db      	ldrb	r3, [r3, #3]
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d003      	beq.n	80084e2 <USB_EPClearStall+0x4c>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	78db      	ldrb	r3, [r3, #3]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d138      	bne.n	8008554 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	0151      	lsls	r1, r2, #5
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	440a      	add	r2, r1
 80084f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	e027      	b.n	8008554 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	0151      	lsls	r1, r2, #5
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	440a      	add	r2, r1
 800851a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800851e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008522:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	78db      	ldrb	r3, [r3, #3]
 8008528:	2b03      	cmp	r3, #3
 800852a:	d003      	beq.n	8008534 <USB_EPClearStall+0x9e>
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	78db      	ldrb	r3, [r3, #3]
 8008530:	2b02      	cmp	r3, #2
 8008532:	d10f      	bne.n	8008554 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	0151      	lsls	r1, r2, #5
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	440a      	add	r2, r1
 800854a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800854e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008552:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	460b      	mov	r3, r1
 800856c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008580:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008584:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	78fb      	ldrb	r3, [r7, #3]
 8008590:	011b      	lsls	r3, r3, #4
 8008592:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008596:	68f9      	ldr	r1, [r7, #12]
 8008598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800859c:	4313      	orrs	r3, r2
 800859e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b085      	sub	sp, #20
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085c8:	f023 0303 	bic.w	r3, r3, #3
 80085cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085dc:	f023 0302 	bic.w	r3, r3, #2
 80085e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800860a:	f023 0303 	bic.w	r3, r3, #3
 800860e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800861e:	f043 0302 	orr.w	r3, r3, #2
 8008622:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4013      	ands	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800864a:	68fb      	ldr	r3, [r7, #12]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	4013      	ands	r3, r2
 800867a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	0c1b      	lsrs	r3, r3, #16
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	4013      	ands	r3, r2
 80086ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	b29b      	uxth	r3, r3
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	4013      	ands	r3, r2
 80086ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086ee:	68bb      	ldr	r3, [r7, #8]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	f003 030f 	and.w	r3, r3, #15
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	fa22 f303 	lsr.w	r3, r2, r3
 800872c:	01db      	lsls	r3, r3, #7
 800872e:	b2db      	uxtb	r3, r3
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	4313      	orrs	r3, r2
 8008734:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008736:	78fb      	ldrb	r3, [r7, #3]
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	4413      	add	r3, r2
 800873e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4013      	ands	r3, r2
 8008748:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800874a:	68bb      	ldr	r3, [r7, #8]
}
 800874c:	4618      	mov	r0, r3
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	f003 0301 	and.w	r3, r3, #1
}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800878e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008792:	f023 0307 	bic.w	r3, r3, #7
 8008796:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
	...

080087bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	460b      	mov	r3, r1
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	333c      	adds	r3, #60	; 0x3c
 80087d2:	3304      	adds	r3, #4
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	4a26      	ldr	r2, [pc, #152]	; (8008874 <USB_EP0_OutStart+0xb8>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d90a      	bls.n	80087f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087f0:	d101      	bne.n	80087f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	e037      	b.n	8008866 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fc:	461a      	mov	r2, r3
 80087fe:	2300      	movs	r3, #0
 8008800:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008814:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008824:	f043 0318 	orr.w	r3, r3, #24
 8008828:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008838:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800883c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800883e:	7afb      	ldrb	r3, [r7, #11]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d10f      	bne.n	8008864 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884a:	461a      	mov	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800885e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008862:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	371c      	adds	r7, #28
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	4f54300a 	.word	0x4f54300a

08008878 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	3301      	adds	r3, #1
 8008888:	60fb      	str	r3, [r7, #12]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	4a13      	ldr	r2, [pc, #76]	; (80088dc <USB_CoreReset+0x64>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d901      	bls.n	8008896 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e01b      	b.n	80088ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	daf2      	bge.n	8008884 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	f043 0201 	orr.w	r2, r3, #1
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3301      	adds	r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4a09      	ldr	r2, [pc, #36]	; (80088dc <USB_CoreReset+0x64>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d901      	bls.n	80088c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e006      	b.n	80088ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d0f0      	beq.n	80088ae <USB_CoreReset+0x36>

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	00030d40 	.word	0x00030d40

080088e0 <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t rx_buf[6];
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80088ec:	2010      	movs	r0, #16
 80088ee:	f004 fdb9 	bl	800d464 <USBD_static_malloc>
 80088f2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d108      	bne.n	800890c <USBD_HID_Init+0x2c>
  {
	  usb_failed = 1;
 80088fa:	4b1a      	ldr	r3, [pc, #104]	; (8008964 <USBD_HID_Init+0x84>)
 80088fc:	2201      	movs	r2, #1
 80088fe:	701a      	strb	r2, [r3, #0]
    pdev->pClassData = NULL;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008908:	2302      	movs	r3, #2
 800890a:	e027      	b.n	800895c <USBD_HID_Init+0x7c>
  }

  pdev->pClassData = (void *)hhid;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7c1b      	ldrb	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d103      	bne.n	8008924 <USBD_HID_Init+0x44>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2207      	movs	r2, #7
 8008920:	875a      	strh	r2, [r3, #58]	; 0x3a
 8008922:	e002      	b.n	800892a <USBD_HID_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2204      	movs	r2, #4
 8008928:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800892a:	2320      	movs	r3, #32
 800892c:	2203      	movs	r2, #3
 800892e:	2181      	movs	r1, #129	; 0x81
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f004 fc38 	bl	800d1a6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT, This is to get out rumble data */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 800893c:	2306      	movs	r3, #6
 800893e:	2203      	movs	r2, #3
 8008940:	2102      	movs	r1, #2
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f004 fc2f 	bl	800d1a6 <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, rx_buf, 1);
 8008948:	2301      	movs	r3, #1
 800894a:	4a07      	ldr	r2, [pc, #28]	; (8008968 <USBD_HID_Init+0x88>)
 800894c:	2102      	movs	r1, #2
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f004 fd18 	bl	800d384 <USBD_LL_PrepareReceive>
  hhid->state = HID_IDLE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20000ad1 	.word	0x20000ad1
 8008968:	20000ad4 	.word	0x20000ad4

0800896c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008978:	2181      	movs	r1, #129	; 0x81
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f004 fc39 	bl	800d1f2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008992:	2b00      	cmp	r3, #0
 8008994:	d009      	beq.n	80089aa <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800899c:	4618      	mov	r0, r3
 800899e:	f004 fd6f 	bl	800d480 <USBD_static_free>
    pdev->pClassData = NULL;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089c4:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d104      	bne.n	80089de <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 80089d4:	4b94      	ldr	r3, [pc, #592]	; (8008c28 <USBD_HID_Setup+0x274>)
 80089d6:	2201      	movs	r2, #1
 80089d8:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 80089da:	2303      	movs	r3, #3
 80089dc:	e11f      	b.n	8008c1e <USBD_HID_Setup+0x26a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089e6:	2b40      	cmp	r3, #64	; 0x40
 80089e8:	f000 80cd 	beq.w	8008b86 <USBD_HID_Setup+0x1d2>
 80089ec:	2b40      	cmp	r3, #64	; 0x40
 80089ee:	f200 810d 	bhi.w	8008c0c <USBD_HID_Setup+0x258>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d045      	beq.n	8008a82 <USBD_HID_Setup+0xce>
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	f040 8108 	bne.w	8008c0c <USBD_HID_Setup+0x258>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	785b      	ldrb	r3, [r3, #1]
 8008a00:	3b02      	subs	r3, #2
 8008a02:	2b09      	cmp	r3, #9
 8008a04:	d835      	bhi.n	8008a72 <USBD_HID_Setup+0xbe>
 8008a06:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <USBD_HID_Setup+0x58>)
 8008a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0c:	08008a63 	.word	0x08008a63
 8008a10:	08008a43 	.word	0x08008a43
 8008a14:	08008a73 	.word	0x08008a73
 8008a18:	08008a73 	.word	0x08008a73
 8008a1c:	08008a73 	.word	0x08008a73
 8008a20:	08008a73 	.word	0x08008a73
 8008a24:	08008a73 	.word	0x08008a73
 8008a28:	08008a73 	.word	0x08008a73
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a35 	.word	0x08008a35
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	885b      	ldrh	r3, [r3, #2]
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	601a      	str	r2, [r3, #0]
          break;
 8008a40:	e01e      	b.n	8008a80 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	2201      	movs	r2, #1
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 fac4 	bl	8009fd6 <USBD_CtlSendData>
          break;
 8008a4e:	e017      	b.n	8008a80 <USBD_HID_Setup+0xcc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	885b      	ldrh	r3, [r3, #2]
 8008a54:	0a1b      	lsrs	r3, r3, #8
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	605a      	str	r2, [r3, #4]
          break;
 8008a60:	e00e      	b.n	8008a80 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	3304      	adds	r3, #4
 8008a66:	2201      	movs	r2, #1
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 fab3 	bl	8009fd6 <USBD_CtlSendData>
          break;
 8008a70:	e006      	b.n	8008a80 <USBD_HID_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f001 fa3d 	bl	8009ef4 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	77fb      	strb	r3, [r7, #31]
          break;
 8008a7e:	bf00      	nop
      }
      break;
 8008a80:	e0cc      	b.n	8008c1c <USBD_HID_Setup+0x268>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	785b      	ldrb	r3, [r3, #1]
 8008a86:	2b0b      	cmp	r3, #11
 8008a88:	d874      	bhi.n	8008b74 <USBD_HID_Setup+0x1c0>
 8008a8a:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <USBD_HID_Setup+0xdc>)
 8008a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a90:	08008ac1 	.word	0x08008ac1
 8008a94:	08008b83 	.word	0x08008b83
 8008a98:	08008b75 	.word	0x08008b75
 8008a9c:	08008b75 	.word	0x08008b75
 8008aa0:	08008b75 	.word	0x08008b75
 8008aa4:	08008b75 	.word	0x08008b75
 8008aa8:	08008aeb 	.word	0x08008aeb
 8008aac:	08008b75 	.word	0x08008b75
 8008ab0:	08008b75 	.word	0x08008b75
 8008ab4:	08008b75 	.word	0x08008b75
 8008ab8:	08008b23 	.word	0x08008b23
 8008abc:	08008b4d 	.word	0x08008b4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d107      	bne.n	8008adc <USBD_HID_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008acc:	f107 030e 	add.w	r3, r7, #14
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 fa7e 	bl	8009fd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ada:	e053      	b.n	8008b84 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f001 fa08 	bl	8009ef4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	77fb      	strb	r3, [r7, #31]
          break;
 8008ae8:	e04c      	b.n	8008b84 <USBD_HID_Setup+0x1d0>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	885b      	ldrh	r3, [r3, #2]
 8008aee:	0a1b      	lsrs	r3, r3, #8
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	2b21      	cmp	r3, #33	; 0x21
 8008af4:	d10e      	bne.n	8008b14 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8008af6:	4b4d      	ldr	r3, [pc, #308]	; (8008c2c <USBD_HID_Setup+0x278>)
 8008af8:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	88db      	ldrh	r3, [r3, #6]
 8008afe:	2b12      	cmp	r3, #18
 8008b00:	bf28      	it	cs
 8008b02:	2312      	movcs	r3, #18
 8008b04:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b06:	8afb      	ldrh	r3, [r7, #22]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6939      	ldr	r1, [r7, #16]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 fa62 	bl	8009fd6 <USBD_CtlSendData>
          break;
 8008b12:	e037      	b.n	8008b84 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 f9ec 	bl	8009ef4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	77fb      	strb	r3, [r7, #31]
            break;
 8008b20:	e030      	b.n	8008b84 <USBD_HID_Setup+0x1d0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d107      	bne.n	8008b3e <USBD_HID_Setup+0x18a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	3308      	adds	r3, #8
 8008b32:	2201      	movs	r2, #1
 8008b34:	4619      	mov	r1, r3
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f001 fa4d 	bl	8009fd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b3c:	e022      	b.n	8008b84 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 f9d7 	bl	8009ef4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b46:	2303      	movs	r3, #3
 8008b48:	77fb      	strb	r3, [r7, #31]
          break;
 8008b4a:	e01b      	b.n	8008b84 <USBD_HID_Setup+0x1d0>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d106      	bne.n	8008b66 <USBD_HID_Setup+0x1b2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	885b      	ldrh	r3, [r3, #2]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b64:	e00e      	b.n	8008b84 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f001 f9c3 	bl	8009ef4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	77fb      	strb	r3, [r7, #31]
          break;
 8008b72:	e007      	b.n	8008b84 <USBD_HID_Setup+0x1d0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 f9bc 	bl	8009ef4 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	77fb      	strb	r3, [r7, #31]
          break;
 8008b80:	e000      	b.n	8008b84 <USBD_HID_Setup+0x1d0>
          break;
 8008b82:	bf00      	nop
      }
      break;
 8008b84:	e04a      	b.n	8008c1c <USBD_HID_Setup+0x268>
    /*This is for the og xbox, this is the custom vendor request */
    case (0xC1 & USB_REQ_TYPE_MASK):
    	 hid_setup_ran++;
 8008b86:	4b2a      	ldr	r3, [pc, #168]	; (8008c30 <USBD_HID_Setup+0x27c>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	4b28      	ldr	r3, [pc, #160]	; (8008c30 <USBD_HID_Setup+0x27c>)
 8008b90:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	785b      	ldrb	r3, [r3, #1]
 8008b96:	2b06      	cmp	r3, #6
 8008b98:	d10f      	bne.n	8008bba <USBD_HID_Setup+0x206>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	885b      	ldrh	r3, [r3, #2]
 8008b9e:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8008ba2:	d10a      	bne.n	8008bba <USBD_HID_Setup+0x206>
    		len = 16;
 8008ba4:	2310      	movs	r3, #16
 8008ba6:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 8008ba8:	4b20      	ldr	r3, [pc, #128]	; (8008c2c <USBD_HID_Setup+0x278>)
 8008baa:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008bac:	8afb      	ldrh	r3, [r7, #22]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	6939      	ldr	r1, [r7, #16]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 fa0f 	bl	8009fd6 <USBD_CtlSendData>
 8008bb8:	e027      	b.n	8008c0a <USBD_HID_Setup+0x256>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	785b      	ldrb	r3, [r3, #1]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d10f      	bne.n	8008be2 <USBD_HID_Setup+0x22e>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	885b      	ldrh	r3, [r3, #2]
 8008bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bca:	d10a      	bne.n	8008be2 <USBD_HID_Setup+0x22e>
    		len = 20;
 8008bcc:	2314      	movs	r3, #20
 8008bce:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8008bd0:	4b18      	ldr	r3, [pc, #96]	; (8008c34 <USBD_HID_Setup+0x280>)
 8008bd2:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008bd4:	8afb      	ldrh	r3, [r7, #22]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	6939      	ldr	r1, [r7, #16]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f001 f9fb 	bl	8009fd6 <USBD_CtlSendData>
 8008be0:	e013      	b.n	8008c0a <USBD_HID_Setup+0x256>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d117      	bne.n	8008c1a <USBD_HID_Setup+0x266>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	885b      	ldrh	r3, [r3, #2]
 8008bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bf2:	d112      	bne.n	8008c1a <USBD_HID_Setup+0x266>
    		len = 6;
 8008bf4:	2306      	movs	r3, #6
 8008bf6:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8008bf8:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <USBD_HID_Setup+0x284>)
 8008bfa:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008bfc:	8afb      	ldrh	r3, [r7, #22]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	6939      	ldr	r1, [r7, #16]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 f9e7 	bl	8009fd6 <USBD_CtlSendData>
    	}
    break;
 8008c08:	e007      	b.n	8008c1a <USBD_HID_Setup+0x266>
 8008c0a:	e006      	b.n	8008c1a <USBD_HID_Setup+0x266>


    default:
      USBD_CtlError(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f001 f970 	bl	8009ef4 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c14:	2303      	movs	r3, #3
 8008c16:	77fb      	strb	r3, [r7, #31]
      break;
 8008c18:	e000      	b.n	8008c1c <USBD_HID_Setup+0x268>
    break;
 8008c1a:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3720      	adds	r7, #32
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20000ad1 	.word	0x20000ad1
 8008c2c:	20000090 	.word	0x20000090
 8008c30:	20000ad0 	.word	0x20000ad0
 8008c34:	200000ac 	.word	0x200000ac
 8008c38:	200000c0 	.word	0x200000c0

08008c3c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	4613      	mov	r3, r2
 8008c48:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c50:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d101      	bne.n	8008c5c <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e013      	b.n	8008c84 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d10c      	bne.n	8008c82 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	7b1b      	ldrb	r3, [r3, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d108      	bne.n	8008c82 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2201      	movs	r2, #1
 8008c74:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008c76:	88fb      	ldrh	r3, [r7, #6]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	2181      	movs	r1, #129	; 0x81
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f004 fb60 	bl	800d342 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2220      	movs	r2, #32
 8008c98:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008c9a:	4b03      	ldr	r3, [pc, #12]	; (8008ca8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	20000050 	.word	0x20000050

08008cac <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8008cb4:	bf00      	nop
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
	...

08008cc4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2220      	movs	r2, #32
 8008cd0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008cd2:	4b03      	ldr	r3, [pc, #12]	; (8008ce0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	20000070 	.word	0x20000070

08008ce4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_EP_Receive(&hUsbDeviceFS.pData, HID_EPOUT_ADDR, rx_buf, 6);
 8008d14:	2306      	movs	r3, #6
 8008d16:	4a05      	ldr	r2, [pc, #20]	; (8008d2c <USBD_HID_DataOut+0x24>)
 8008d18:	2102      	movs	r1, #2
 8008d1a:	4805      	ldr	r0, [pc, #20]	; (8008d30 <USBD_HID_DataOut+0x28>)
 8008d1c:	f7fb fa70 	bl	8004200 <HAL_PCD_EP_Receive>
	return USBD_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000ad4 	.word	0x20000ad4
 8008d30:	2000575c 	.word	0x2000575c

08008d34 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	220a      	movs	r2, #10
 8008d40:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008d42:	4b03      	ldr	r3, [pc, #12]	; (8008d50 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	200000a0 	.word	0x200000a0

08008d54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e01f      	b.n	8008dac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	79fa      	ldrb	r2, [r7, #7]
 8008d9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f004 f999 	bl	800d0d8 <USBD_LL_Init>
 8008da6:	4603      	mov	r3, r0
 8008da8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e016      	b.n	8008dfa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00b      	beq.n	8008df8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	f107 020e 	add.w	r2, r7, #14
 8008dec:	4610      	mov	r0, r2
 8008dee:	4798      	blx	r3
 8008df0:	4602      	mov	r2, r0
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f004 f9b0 	bl	800d170 <USBD_LL_Start>
 8008e10:	4603      	mov	r3, r0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b083      	sub	sp, #12
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d009      	beq.n	8008e5e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	78fa      	ldrb	r2, [r7, #3]
 8008e54:	4611      	mov	r1, r2
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	4798      	blx	r3
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d007      	beq.n	8008e8e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	4798      	blx	r3
  }

  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 ffe8 	bl	8009e80 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ecc:	f003 031f 	and.w	r3, r3, #31
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d01a      	beq.n	8008f0a <USBD_LL_SetupStage+0x72>
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d822      	bhi.n	8008f1e <USBD_LL_SetupStage+0x86>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <USBD_LL_SetupStage+0x4a>
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d00a      	beq.n	8008ef6 <USBD_LL_SetupStage+0x5e>
 8008ee0:	e01d      	b.n	8008f1e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa62 	bl	80093b4 <USBD_StdDevReq>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef4:	e020      	b.n	8008f38 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fb1e 	bl	8009540 <USBD_StdItfReq>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73fb      	strb	r3, [r7, #15]
      break;
 8008f08:	e016      	b.n	8008f38 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fb5d 	bl	80095d2 <USBD_StdEPReq>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f1c:	e00c      	b.n	8008f38 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008f24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f004 f97f 	bl	800d230 <USBD_LL_StallEP>
 8008f32:	4603      	mov	r3, r0
 8008f34:	73fb      	strb	r3, [r7, #15]
      break;
 8008f36:	bf00      	nop
  }

  return ret;
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b086      	sub	sp, #24
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	607a      	str	r2, [r7, #4]
 8008f4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d138      	bne.n	8008fc8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008f5c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f64:	2b03      	cmp	r3, #3
 8008f66:	d14a      	bne.n	8008ffe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	689a      	ldr	r2, [r3, #8]
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d913      	bls.n	8008f9c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	1ad2      	subs	r2, r2, r3
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	bf28      	it	cs
 8008f8e:	4613      	movcs	r3, r2
 8008f90:	461a      	mov	r2, r3
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f001 f84a 	bl	800a02e <USBD_CtlContinueRx>
 8008f9a:	e030      	b.n	8008ffe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d10b      	bne.n	8008fc0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d005      	beq.n	8008fc0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f001 f845 	bl	800a050 <USBD_CtlSendStatus>
 8008fc6:	e01a      	b.n	8008ffe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d114      	bne.n	8008ffe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00e      	beq.n	8008ffe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	7afa      	ldrb	r2, [r7, #11]
 8008fea:	4611      	mov	r1, r2
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	4798      	blx	r3
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	e000      	b.n	8009000 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	460b      	mov	r3, r1
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009016:	7afb      	ldrb	r3, [r7, #11]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d16b      	bne.n	80090f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	3314      	adds	r3, #20
 8009020:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009028:	2b02      	cmp	r3, #2
 800902a:	d156      	bne.n	80090da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	689a      	ldr	r2, [r3, #8]
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	429a      	cmp	r2, r3
 8009036:	d914      	bls.n	8009062 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	689a      	ldr	r2, [r3, #8]
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	1ad2      	subs	r2, r2, r3
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	461a      	mov	r2, r3
 800904c:	6879      	ldr	r1, [r7, #4]
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 ffdc 	bl	800a00c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009054:	2300      	movs	r3, #0
 8009056:	2200      	movs	r2, #0
 8009058:	2100      	movs	r1, #0
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f004 f992 	bl	800d384 <USBD_LL_PrepareReceive>
 8009060:	e03b      	b.n	80090da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	68da      	ldr	r2, [r3, #12]
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	429a      	cmp	r2, r3
 800906c:	d11c      	bne.n	80090a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009076:	429a      	cmp	r2, r3
 8009078:	d316      	bcc.n	80090a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009084:	429a      	cmp	r2, r3
 8009086:	d20f      	bcs.n	80090a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009088:	2200      	movs	r2, #0
 800908a:	2100      	movs	r1, #0
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 ffbd 	bl	800a00c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800909a:	2300      	movs	r3, #0
 800909c:	2200      	movs	r2, #0
 800909e:	2100      	movs	r1, #0
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f004 f96f 	bl	800d384 <USBD_LL_PrepareReceive>
 80090a6:	e018      	b.n	80090da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d10b      	bne.n	80090cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090cc:	2180      	movs	r1, #128	; 0x80
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f004 f8ae 	bl	800d230 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 ffce 	bl	800a076 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d122      	bne.n	800912a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f7ff fe98 	bl	8008e1a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80090f2:	e01a      	b.n	800912a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d114      	bne.n	800912a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009106:	695b      	ldr	r3, [r3, #20]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00e      	beq.n	800912a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	7afa      	ldrb	r2, [r7, #11]
 8009116:	4611      	mov	r1, r2
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	4798      	blx	r3
 800911c:	4603      	mov	r3, r0
 800911e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	e000      	b.n	800912c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3718      	adds	r7, #24
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009164:	2303      	movs	r3, #3
 8009166:	e02f      	b.n	80091c8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00f      	beq.n	8009192 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d009      	beq.n	8009192 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	6852      	ldr	r2, [r2, #4]
 800918a:	b2d2      	uxtb	r2, r2
 800918c:	4611      	mov	r1, r2
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009192:	2340      	movs	r3, #64	; 0x40
 8009194:	2200      	movs	r2, #0
 8009196:	2100      	movs	r1, #0
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f004 f804 	bl	800d1a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2240      	movs	r2, #64	; 0x40
 80091aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091ae:	2340      	movs	r3, #64	; 0x40
 80091b0:	2200      	movs	r2, #0
 80091b2:	2180      	movs	r1, #128	; 0x80
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f003 fff6 	bl	800d1a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2240      	movs	r2, #64	; 0x40
 80091c4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	78fa      	ldrb	r2, [r7, #3]
 80091e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2204      	movs	r2, #4
 800920a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b04      	cmp	r3, #4
 800922e:	d106      	bne.n	800923e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009236:	b2da      	uxtb	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800925e:	2303      	movs	r3, #3
 8009260:	e012      	b.n	8009288 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b03      	cmp	r3, #3
 800926c:	d10b      	bne.n	8009286 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d005      	beq.n	8009286 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009280:	69db      	ldr	r3, [r3, #28]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	460b      	mov	r3, r1
 800929a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e014      	b.n	80092d4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b03      	cmp	r3, #3
 80092b4:	d10d      	bne.n	80092d2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d007      	beq.n	80092d2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	78fa      	ldrb	r2, [r7, #3]
 80092cc:	4611      	mov	r1, r2
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e014      	b.n	8009320 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d10d      	bne.n	800931e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930a:	2b00      	cmp	r3, #0
 800930c:	d007      	beq.n	800931e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009316:	78fa      	ldrb	r2, [r7, #3]
 8009318:	4611      	mov	r1, r2
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b082      	sub	sp, #8
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009354:	2b00      	cmp	r3, #0
 8009356:	d009      	beq.n	800936c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	6852      	ldr	r2, [r2, #4]
 8009364:	b2d2      	uxtb	r2, r2
 8009366:	4611      	mov	r1, r2
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	4798      	blx	r3
  }

  return USBD_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009376:	b480      	push	{r7}
 8009378:	b087      	sub	sp, #28
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	3301      	adds	r3, #1
 800938c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009394:	8a3b      	ldrh	r3, [r7, #16]
 8009396:	021b      	lsls	r3, r3, #8
 8009398:	b21a      	sxth	r2, r3
 800939a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800939e:	4313      	orrs	r3, r2
 80093a0:	b21b      	sxth	r3, r3
 80093a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80093a4:	89fb      	ldrh	r3, [r7, #14]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	371c      	adds	r7, #28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
	...

080093b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	73fb      	strb	r3, [r7, #15]


  if(req->bmRequest == 0xC1) {
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2bc1      	cmp	r3, #193	; 0xc1
 80093c8:	d148      	bne.n	800945c <USBD_StdDevReq+0xa8>
	  uint16_t len = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	81bb      	strh	r3, [r7, #12]
	  uint8_t *pbuf = NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	60bb      	str	r3, [r7, #8]
  	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	2b06      	cmp	r3, #6
 80093d8:	d10f      	bne.n	80093fa <USBD_StdDevReq+0x46>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	885b      	ldrh	r3, [r3, #2]
 80093de:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 80093e2:	d10a      	bne.n	80093fa <USBD_StdDevReq+0x46>
  		len = 16;
 80093e4:	2310      	movs	r3, #16
 80093e6:	81bb      	strh	r3, [r7, #12]
  		pbuf = USBD_HID_Desc;
 80093e8:	4b51      	ldr	r3, [pc, #324]	; (8009530 <USBD_StdDevReq+0x17c>)
 80093ea:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 80093ec:	89bb      	ldrh	r3, [r7, #12]
 80093ee:	461a      	mov	r2, r3
 80093f0:	68b9      	ldr	r1, [r7, #8]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fdef 	bl	8009fd6 <USBD_CtlSendData>
 80093f8:	e026      	b.n	8009448 <USBD_StdDevReq+0x94>
  	}
  	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	785b      	ldrb	r3, [r3, #1]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d10f      	bne.n	8009422 <USBD_StdDevReq+0x6e>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	885b      	ldrh	r3, [r3, #2]
 8009406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940a:	d10a      	bne.n	8009422 <USBD_StdDevReq+0x6e>
  		len = 20;
 800940c:	2314      	movs	r3, #20
 800940e:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_IN;
 8009410:	4b48      	ldr	r3, [pc, #288]	; (8009534 <USBD_StdDevReq+0x180>)
 8009412:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 8009414:	89bb      	ldrh	r3, [r7, #12]
 8009416:	461a      	mov	r2, r3
 8009418:	68b9      	ldr	r1, [r7, #8]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fddb 	bl	8009fd6 <USBD_CtlSendData>
 8009420:	e012      	b.n	8009448 <USBD_StdDevReq+0x94>
  	}
  	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	785b      	ldrb	r3, [r3, #1]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d10e      	bne.n	8009448 <USBD_StdDevReq+0x94>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	885b      	ldrh	r3, [r3, #2]
 800942e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009432:	d109      	bne.n	8009448 <USBD_StdDevReq+0x94>
  		len = 6;
 8009434:	2306      	movs	r3, #6
 8009436:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8009438:	4b3f      	ldr	r3, [pc, #252]	; (8009538 <USBD_StdDevReq+0x184>)
 800943a:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 800943c:	89bb      	ldrh	r3, [r7, #12]
 800943e:	461a      	mov	r2, r3
 8009440:	68b9      	ldr	r1, [r7, #8]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fdc7 	bl	8009fd6 <USBD_CtlSendData>
  	}
	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	4798      	blx	r3
 8009456:	4603      	mov	r3, r0
 8009458:	73fb      	strb	r3, [r7, #15]
 800945a:	e064      	b.n	8009526 <USBD_StdDevReq+0x172>


  } else {
	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009464:	2b40      	cmp	r3, #64	; 0x40
 8009466:	d005      	beq.n	8009474 <USBD_StdDevReq+0xc0>
 8009468:	2b40      	cmp	r3, #64	; 0x40
 800946a:	d854      	bhi.n	8009516 <USBD_StdDevReq+0x162>
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00b      	beq.n	8009488 <USBD_StdDevReq+0xd4>
 8009470:	2b20      	cmp	r3, #32
 8009472:	d150      	bne.n	8009516 <USBD_StdDevReq+0x162>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	6839      	ldr	r1, [r7, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	4798      	blx	r3
 8009482:	4603      	mov	r3, r0
 8009484:	73fb      	strb	r3, [r7, #15]
		  break;
 8009486:	e04e      	b.n	8009526 <USBD_StdDevReq+0x172>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	785b      	ldrb	r3, [r3, #1]
 800948c:	2b09      	cmp	r3, #9
 800948e:	d83c      	bhi.n	800950a <USBD_StdDevReq+0x156>
 8009490:	a201      	add	r2, pc, #4	; (adr r2, 8009498 <USBD_StdDevReq+0xe4>)
 8009492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009496:	bf00      	nop
 8009498:	080094ed 	.word	0x080094ed
 800949c:	08009501 	.word	0x08009501
 80094a0:	0800950b 	.word	0x0800950b
 80094a4:	080094f7 	.word	0x080094f7
 80094a8:	0800950b 	.word	0x0800950b
 80094ac:	080094cb 	.word	0x080094cb
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	0800950b 	.word	0x0800950b
 80094b8:	080094e3 	.word	0x080094e3
 80094bc:	080094d5 	.word	0x080094d5
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f9e8 	bl	8009898 <USBD_GetDescriptor>
			  break;
 80094c8:	e024      	b.n	8009514 <USBD_StdDevReq+0x160>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fb4d 	bl	8009b6c <USBD_SetAddress>
			  break;
 80094d2:	e01f      	b.n	8009514 <USBD_StdDevReq+0x160>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fb8c 	bl	8009bf4 <USBD_SetConfig>
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]
			  break;
 80094e0:	e018      	b.n	8009514 <USBD_StdDevReq+0x160>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fc2b 	bl	8009d40 <USBD_GetConfig>
			  break;
 80094ea:	e013      	b.n	8009514 <USBD_StdDevReq+0x160>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fc5c 	bl	8009dac <USBD_GetStatus>
			  break;
 80094f4:	e00e      	b.n	8009514 <USBD_StdDevReq+0x160>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fc8b 	bl	8009e14 <USBD_SetFeature>
			  break;
 80094fe:	e009      	b.n	8009514 <USBD_StdDevReq+0x160>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fc9a 	bl	8009e3c <USBD_ClrFeature>
			  break;
 8009508:	e004      	b.n	8009514 <USBD_StdDevReq+0x160>

			default:
			  USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fcf1 	bl	8009ef4 <USBD_CtlError>
			  break;
 8009512:	bf00      	nop
		  }
		  break;
 8009514:	e007      	b.n	8009526 <USBD_StdDevReq+0x172>

		default:
		  unknown_bmrequest = 1;
 8009516:	4b09      	ldr	r3, [pc, #36]	; (800953c <USBD_StdDevReq+0x188>)
 8009518:	2201      	movs	r2, #1
 800951a:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fce8 	bl	8009ef4 <USBD_CtlError>
		  break;
 8009524:	bf00      	nop
	  }
	}
  return ret;
 8009526:	7bfb      	ldrb	r3, [r7, #15]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	200000c8 	.word	0x200000c8
 8009534:	200000d8 	.word	0x200000d8
 8009538:	200000ec 	.word	0x200000ec
 800953c:	20000ada 	.word	0x20000ada

08009540 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009556:	2b40      	cmp	r3, #64	; 0x40
 8009558:	d005      	beq.n	8009566 <USBD_StdItfReq+0x26>
 800955a:	2b40      	cmp	r3, #64	; 0x40
 800955c:	d82f      	bhi.n	80095be <USBD_StdItfReq+0x7e>
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <USBD_StdItfReq+0x26>
 8009562:	2b20      	cmp	r3, #32
 8009564:	d12b      	bne.n	80095be <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800956c:	b2db      	uxtb	r3, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	2b02      	cmp	r3, #2
 8009572:	d81d      	bhi.n	80095b0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	889b      	ldrh	r3, [r3, #4]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b01      	cmp	r3, #1
 800957c:	d813      	bhi.n	80095a6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	4798      	blx	r3
 800958c:	4603      	mov	r3, r0
 800958e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	88db      	ldrh	r3, [r3, #6]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d110      	bne.n	80095ba <USBD_StdItfReq+0x7a>
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10d      	bne.n	80095ba <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fd56 	bl	800a050 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095a4:	e009      	b.n	80095ba <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fca3 	bl	8009ef4 <USBD_CtlError>
          break;
 80095ae:	e004      	b.n	80095ba <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fc9e 	bl	8009ef4 <USBD_CtlError>
          break;
 80095b8:	e000      	b.n	80095bc <USBD_StdItfReq+0x7c>
          break;
 80095ba:	bf00      	nop
      }
      break;
 80095bc:	e004      	b.n	80095c8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fc97 	bl	8009ef4 <USBD_CtlError>
      break;
 80095c6:	bf00      	nop
  }

  return ret;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	889b      	ldrh	r3, [r3, #4]
 80095e4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095ee:	2b40      	cmp	r3, #64	; 0x40
 80095f0:	d007      	beq.n	8009602 <USBD_StdEPReq+0x30>
 80095f2:	2b40      	cmp	r3, #64	; 0x40
 80095f4:	f200 8145 	bhi.w	8009882 <USBD_StdEPReq+0x2b0>
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00c      	beq.n	8009616 <USBD_StdEPReq+0x44>
 80095fc:	2b20      	cmp	r3, #32
 80095fe:	f040 8140 	bne.w	8009882 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	4798      	blx	r3
 8009610:	4603      	mov	r3, r0
 8009612:	73fb      	strb	r3, [r7, #15]
      break;
 8009614:	e13a      	b.n	800988c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	785b      	ldrb	r3, [r3, #1]
 800961a:	2b03      	cmp	r3, #3
 800961c:	d007      	beq.n	800962e <USBD_StdEPReq+0x5c>
 800961e:	2b03      	cmp	r3, #3
 8009620:	f300 8129 	bgt.w	8009876 <USBD_StdEPReq+0x2a4>
 8009624:	2b00      	cmp	r3, #0
 8009626:	d07f      	beq.n	8009728 <USBD_StdEPReq+0x156>
 8009628:	2b01      	cmp	r3, #1
 800962a:	d03c      	beq.n	80096a6 <USBD_StdEPReq+0xd4>
 800962c:	e123      	b.n	8009876 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b02      	cmp	r3, #2
 8009638:	d002      	beq.n	8009640 <USBD_StdEPReq+0x6e>
 800963a:	2b03      	cmp	r3, #3
 800963c:	d016      	beq.n	800966c <USBD_StdEPReq+0x9a>
 800963e:	e02c      	b.n	800969a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00d      	beq.n	8009662 <USBD_StdEPReq+0x90>
 8009646:	7bbb      	ldrb	r3, [r7, #14]
 8009648:	2b80      	cmp	r3, #128	; 0x80
 800964a:	d00a      	beq.n	8009662 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800964c:	7bbb      	ldrb	r3, [r7, #14]
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f003 fded 	bl	800d230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009656:	2180      	movs	r1, #128	; 0x80
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f003 fde9 	bl	800d230 <USBD_LL_StallEP>
 800965e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009660:	e020      	b.n	80096a4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009662:	6839      	ldr	r1, [r7, #0]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fc45 	bl	8009ef4 <USBD_CtlError>
              break;
 800966a:	e01b      	b.n	80096a4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	885b      	ldrh	r3, [r3, #2]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10e      	bne.n	8009692 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00b      	beq.n	8009692 <USBD_StdEPReq+0xc0>
 800967a:	7bbb      	ldrb	r3, [r7, #14]
 800967c:	2b80      	cmp	r3, #128	; 0x80
 800967e:	d008      	beq.n	8009692 <USBD_StdEPReq+0xc0>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	88db      	ldrh	r3, [r3, #6]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d104      	bne.n	8009692 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009688:	7bbb      	ldrb	r3, [r7, #14]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f003 fdcf 	bl	800d230 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fcdc 	bl	800a050 <USBD_CtlSendStatus>

              break;
 8009698:	e004      	b.n	80096a4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fc29 	bl	8009ef4 <USBD_CtlError>
              break;
 80096a2:	bf00      	nop
          }
          break;
 80096a4:	e0ec      	b.n	8009880 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d002      	beq.n	80096b8 <USBD_StdEPReq+0xe6>
 80096b2:	2b03      	cmp	r3, #3
 80096b4:	d016      	beq.n	80096e4 <USBD_StdEPReq+0x112>
 80096b6:	e030      	b.n	800971a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00d      	beq.n	80096da <USBD_StdEPReq+0x108>
 80096be:	7bbb      	ldrb	r3, [r7, #14]
 80096c0:	2b80      	cmp	r3, #128	; 0x80
 80096c2:	d00a      	beq.n	80096da <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096c4:	7bbb      	ldrb	r3, [r7, #14]
 80096c6:	4619      	mov	r1, r3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f003 fdb1 	bl	800d230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096ce:	2180      	movs	r1, #128	; 0x80
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f003 fdad 	bl	800d230 <USBD_LL_StallEP>
 80096d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096d8:	e025      	b.n	8009726 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fc09 	bl	8009ef4 <USBD_CtlError>
              break;
 80096e2:	e020      	b.n	8009726 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	885b      	ldrh	r3, [r3, #2]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d11b      	bne.n	8009724 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
 80096ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d004      	beq.n	8009700 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f003 fdb7 	bl	800d26e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fca5 	bl	800a050 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	4798      	blx	r3
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009718:	e004      	b.n	8009724 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fbe9 	bl	8009ef4 <USBD_CtlError>
              break;
 8009722:	e000      	b.n	8009726 <USBD_StdEPReq+0x154>
              break;
 8009724:	bf00      	nop
          }
          break;
 8009726:	e0ab      	b.n	8009880 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b02      	cmp	r3, #2
 8009732:	d002      	beq.n	800973a <USBD_StdEPReq+0x168>
 8009734:	2b03      	cmp	r3, #3
 8009736:	d032      	beq.n	800979e <USBD_StdEPReq+0x1cc>
 8009738:	e097      	b.n	800986a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800973a:	7bbb      	ldrb	r3, [r7, #14]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d007      	beq.n	8009750 <USBD_StdEPReq+0x17e>
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	2b80      	cmp	r3, #128	; 0x80
 8009744:	d004      	beq.n	8009750 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fbd3 	bl	8009ef4 <USBD_CtlError>
                break;
 800974e:	e091      	b.n	8009874 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009750:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009754:	2b00      	cmp	r3, #0
 8009756:	da0b      	bge.n	8009770 <USBD_StdEPReq+0x19e>
 8009758:	7bbb      	ldrb	r3, [r7, #14]
 800975a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800975e:	4613      	mov	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	3310      	adds	r3, #16
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	4413      	add	r3, r2
 800976c:	3304      	adds	r3, #4
 800976e:	e00b      	b.n	8009788 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	4413      	add	r3, r2
 8009786:	3304      	adds	r3, #4
 8009788:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2200      	movs	r2, #0
 800978e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2202      	movs	r2, #2
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fc1d 	bl	8009fd6 <USBD_CtlSendData>
              break;
 800979c:	e06a      	b.n	8009874 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800979e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	da11      	bge.n	80097ca <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	f003 020f 	and.w	r2, r3, #15
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	4613      	mov	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	440b      	add	r3, r1
 80097b8:	3324      	adds	r3, #36	; 0x24
 80097ba:	881b      	ldrh	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d117      	bne.n	80097f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fb96 	bl	8009ef4 <USBD_CtlError>
                  break;
 80097c8:	e054      	b.n	8009874 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097ca:	7bbb      	ldrb	r3, [r7, #14]
 80097cc:	f003 020f 	and.w	r2, r3, #15
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	4613      	mov	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	440b      	add	r3, r1
 80097dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d104      	bne.n	80097f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fb83 	bl	8009ef4 <USBD_CtlError>
                  break;
 80097ee:	e041      	b.n	8009874 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	da0b      	bge.n	8009810 <USBD_StdEPReq+0x23e>
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097fe:	4613      	mov	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	3310      	adds	r3, #16
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	4413      	add	r3, r2
 800980c:	3304      	adds	r3, #4
 800980e:	e00b      	b.n	8009828 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009810:	7bbb      	ldrb	r3, [r7, #14]
 8009812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	4413      	add	r3, r2
 8009826:	3304      	adds	r3, #4
 8009828:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <USBD_StdEPReq+0x264>
 8009830:	7bbb      	ldrb	r3, [r7, #14]
 8009832:	2b80      	cmp	r3, #128	; 0x80
 8009834:	d103      	bne.n	800983e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]
 800983c:	e00e      	b.n	800985c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800983e:	7bbb      	ldrb	r3, [r7, #14]
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f003 fd32 	bl	800d2ac <USBD_LL_IsStallEP>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	2201      	movs	r2, #1
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	e002      	b.n	800985c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2202      	movs	r2, #2
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fbb7 	bl	8009fd6 <USBD_CtlSendData>
              break;
 8009868:	e004      	b.n	8009874 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fb41 	bl	8009ef4 <USBD_CtlError>
              break;
 8009872:	bf00      	nop
          }
          break;
 8009874:	e004      	b.n	8009880 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fb3b 	bl	8009ef4 <USBD_CtlError>
          break;
 800987e:	bf00      	nop
      }
      break;
 8009880:	e004      	b.n	800988c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fb35 	bl	8009ef4 <USBD_CtlError>
      break;
 800988a:	bf00      	nop
  }

  return ret;
 800988c:	7bfb      	ldrb	r3, [r7, #15]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
	...

08009898 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098a2:	2300      	movs	r3, #0
 80098a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80098a6:	2300      	movs	r3, #0
 80098a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098aa:	2300      	movs	r3, #0
 80098ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	885b      	ldrh	r3, [r3, #2]
 80098b2:	0a1b      	lsrs	r3, r3, #8
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	3b01      	subs	r3, #1
 80098b8:	2b06      	cmp	r3, #6
 80098ba:	f200 8128 	bhi.w	8009b0e <USBD_GetDescriptor+0x276>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <USBD_GetDescriptor+0x2c>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098e1 	.word	0x080098e1
 80098c8:	080098f9 	.word	0x080098f9
 80098cc:	08009939 	.word	0x08009939
 80098d0:	08009b0f 	.word	0x08009b0f
 80098d4:	08009b0f 	.word	0x08009b0f
 80098d8:	08009aaf 	.word	0x08009aaf
 80098dc:	08009adb 	.word	0x08009adb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	7c12      	ldrb	r2, [r2, #16]
 80098ec:	f107 0108 	add.w	r1, r7, #8
 80098f0:	4610      	mov	r0, r2
 80098f2:	4798      	blx	r3
 80098f4:	60f8      	str	r0, [r7, #12]
      break;
 80098f6:	e112      	b.n	8009b1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	7c1b      	ldrb	r3, [r3, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10d      	bne.n	800991c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009908:	f107 0208 	add.w	r2, r7, #8
 800990c:	4610      	mov	r0, r2
 800990e:	4798      	blx	r3
 8009910:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3301      	adds	r3, #1
 8009916:	2202      	movs	r2, #2
 8009918:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800991a:	e100      	b.n	8009b1e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009924:	f107 0208 	add.w	r2, r7, #8
 8009928:	4610      	mov	r0, r2
 800992a:	4798      	blx	r3
 800992c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3301      	adds	r3, #1
 8009932:	2202      	movs	r2, #2
 8009934:	701a      	strb	r2, [r3, #0]
      break;
 8009936:	e0f2      	b.n	8009b1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	885b      	ldrh	r3, [r3, #2]
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b05      	cmp	r3, #5
 8009940:	f200 80ac 	bhi.w	8009a9c <USBD_GetDescriptor+0x204>
 8009944:	a201      	add	r2, pc, #4	; (adr r2, 800994c <USBD_GetDescriptor+0xb4>)
 8009946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994a:	bf00      	nop
 800994c:	08009965 	.word	0x08009965
 8009950:	08009999 	.word	0x08009999
 8009954:	080099cd 	.word	0x080099cd
 8009958:	08009a01 	.word	0x08009a01
 800995c:	08009a35 	.word	0x08009a35
 8009960:	08009a69 	.word	0x08009a69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00b      	beq.n	8009988 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	7c12      	ldrb	r2, [r2, #16]
 800997c:	f107 0108 	add.w	r1, r7, #8
 8009980:	4610      	mov	r0, r2
 8009982:	4798      	blx	r3
 8009984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009986:	e091      	b.n	8009aac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fab2 	bl	8009ef4 <USBD_CtlError>
            err++;
 8009990:	7afb      	ldrb	r3, [r7, #11]
 8009992:	3301      	adds	r3, #1
 8009994:	72fb      	strb	r3, [r7, #11]
          break;
 8009996:	e089      	b.n	8009aac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00b      	beq.n	80099bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	7c12      	ldrb	r2, [r2, #16]
 80099b0:	f107 0108 	add.w	r1, r7, #8
 80099b4:	4610      	mov	r0, r2
 80099b6:	4798      	blx	r3
 80099b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ba:	e077      	b.n	8009aac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fa98 	bl	8009ef4 <USBD_CtlError>
            err++;
 80099c4:	7afb      	ldrb	r3, [r7, #11]
 80099c6:	3301      	adds	r3, #1
 80099c8:	72fb      	strb	r3, [r7, #11]
          break;
 80099ca:	e06f      	b.n	8009aac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00b      	beq.n	80099f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	7c12      	ldrb	r2, [r2, #16]
 80099e4:	f107 0108 	add.w	r1, r7, #8
 80099e8:	4610      	mov	r0, r2
 80099ea:	4798      	blx	r3
 80099ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ee:	e05d      	b.n	8009aac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fa7e 	bl	8009ef4 <USBD_CtlError>
            err++;
 80099f8:	7afb      	ldrb	r3, [r7, #11]
 80099fa:	3301      	adds	r3, #1
 80099fc:	72fb      	strb	r3, [r7, #11]
          break;
 80099fe:	e055      	b.n	8009aac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00b      	beq.n	8009a24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	7c12      	ldrb	r2, [r2, #16]
 8009a18:	f107 0108 	add.w	r1, r7, #8
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	4798      	blx	r3
 8009a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a22:	e043      	b.n	8009aac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fa64 	bl	8009ef4 <USBD_CtlError>
            err++;
 8009a2c:	7afb      	ldrb	r3, [r7, #11]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	72fb      	strb	r3, [r7, #11]
          break;
 8009a32:	e03b      	b.n	8009aac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00b      	beq.n	8009a58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a46:	695b      	ldr	r3, [r3, #20]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	7c12      	ldrb	r2, [r2, #16]
 8009a4c:	f107 0108 	add.w	r1, r7, #8
 8009a50:	4610      	mov	r0, r2
 8009a52:	4798      	blx	r3
 8009a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a56:	e029      	b.n	8009aac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fa4a 	bl	8009ef4 <USBD_CtlError>
            err++;
 8009a60:	7afb      	ldrb	r3, [r7, #11]
 8009a62:	3301      	adds	r3, #1
 8009a64:	72fb      	strb	r3, [r7, #11]
          break;
 8009a66:	e021      	b.n	8009aac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00b      	beq.n	8009a8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	7c12      	ldrb	r2, [r2, #16]
 8009a80:	f107 0108 	add.w	r1, r7, #8
 8009a84:	4610      	mov	r0, r2
 8009a86:	4798      	blx	r3
 8009a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a8a:	e00f      	b.n	8009aac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fa30 	bl	8009ef4 <USBD_CtlError>
            err++;
 8009a94:	7afb      	ldrb	r3, [r7, #11]
 8009a96:	3301      	adds	r3, #1
 8009a98:	72fb      	strb	r3, [r7, #11]
          break;
 8009a9a:	e007      	b.n	8009aac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fa28 	bl	8009ef4 <USBD_CtlError>
          err++;
 8009aa4:	7afb      	ldrb	r3, [r7, #11]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009aaa:	bf00      	nop
      }
      break;
 8009aac:	e037      	b.n	8009b1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	7c1b      	ldrb	r3, [r3, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d109      	bne.n	8009aca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009abe:	f107 0208 	add.w	r2, r7, #8
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	4798      	blx	r3
 8009ac6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ac8:	e029      	b.n	8009b1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fa11 	bl	8009ef4 <USBD_CtlError>
        err++;
 8009ad2:	7afb      	ldrb	r3, [r7, #11]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ad8:	e021      	b.n	8009b1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	7c1b      	ldrb	r3, [r3, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10d      	bne.n	8009afe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aea:	f107 0208 	add.w	r2, r7, #8
 8009aee:	4610      	mov	r0, r2
 8009af0:	4798      	blx	r3
 8009af2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	3301      	adds	r3, #1
 8009af8:	2207      	movs	r2, #7
 8009afa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009afc:	e00f      	b.n	8009b1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f9f7 	bl	8009ef4 <USBD_CtlError>
        err++;
 8009b06:	7afb      	ldrb	r3, [r7, #11]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b0c:	e007      	b.n	8009b1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f9ef 	bl	8009ef4 <USBD_CtlError>
      err++;
 8009b16:	7afb      	ldrb	r3, [r7, #11]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b1c:	bf00      	nop
  }

  if (err != 0U)
 8009b1e:	7afb      	ldrb	r3, [r7, #11]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d11e      	bne.n	8009b62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	88db      	ldrh	r3, [r3, #6]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d016      	beq.n	8009b5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009b2c:	893b      	ldrh	r3, [r7, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00e      	beq.n	8009b50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	88da      	ldrh	r2, [r3, #6]
 8009b36:	893b      	ldrh	r3, [r7, #8]
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	bf28      	it	cs
 8009b3c:	4613      	movcs	r3, r2
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b42:	893b      	ldrh	r3, [r7, #8]
 8009b44:	461a      	mov	r2, r3
 8009b46:	68f9      	ldr	r1, [r7, #12]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fa44 	bl	8009fd6 <USBD_CtlSendData>
 8009b4e:	e009      	b.n	8009b64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f9ce 	bl	8009ef4 <USBD_CtlError>
 8009b58:	e004      	b.n	8009b64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fa78 	bl	800a050 <USBD_CtlSendStatus>
 8009b60:	e000      	b.n	8009b64 <USBD_GetDescriptor+0x2cc>
    return;
 8009b62:	bf00      	nop
  }
}
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop

08009b6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	889b      	ldrh	r3, [r3, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d131      	bne.n	8009be2 <USBD_SetAddress+0x76>
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	88db      	ldrh	r3, [r3, #6]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d12d      	bne.n	8009be2 <USBD_SetAddress+0x76>
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	885b      	ldrh	r3, [r3, #2]
 8009b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8009b8c:	d829      	bhi.n	8009be2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	885b      	ldrh	r3, [r3, #2]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	d104      	bne.n	8009bb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f9a3 	bl	8009ef4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bae:	e01d      	b.n	8009bec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	7bfa      	ldrb	r2, [r7, #15]
 8009bb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f003 fba1 	bl	800d304 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fa44 	bl	800a050 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d004      	beq.n	8009bd8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bd6:	e009      	b.n	8009bec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009be0:	e004      	b.n	8009bec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f985 	bl	8009ef4 <USBD_CtlError>
  }
}
 8009bea:	bf00      	nop
 8009bec:	bf00      	nop
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	885b      	ldrh	r3, [r3, #2]
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	4b4c      	ldr	r3, [pc, #304]	; (8009d3c <USBD_SetConfig+0x148>)
 8009c0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c0c:	4b4b      	ldr	r3, [pc, #300]	; (8009d3c <USBD_SetConfig+0x148>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d905      	bls.n	8009c20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f96c 	bl	8009ef4 <USBD_CtlError>
    return USBD_FAIL;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e088      	b.n	8009d32 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d002      	beq.n	8009c32 <USBD_SetConfig+0x3e>
 8009c2c:	2b03      	cmp	r3, #3
 8009c2e:	d025      	beq.n	8009c7c <USBD_SetConfig+0x88>
 8009c30:	e071      	b.n	8009d16 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c32:	4b42      	ldr	r3, [pc, #264]	; (8009d3c <USBD_SetConfig+0x148>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d01c      	beq.n	8009c74 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009c3a:	4b40      	ldr	r3, [pc, #256]	; (8009d3c <USBD_SetConfig+0x148>)
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c44:	4b3d      	ldr	r3, [pc, #244]	; (8009d3c <USBD_SetConfig+0x148>)
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff f8f0 	bl	8008e30 <USBD_SetClassConfig>
 8009c50:	4603      	mov	r3, r0
 8009c52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d004      	beq.n	8009c64 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f949 	bl	8009ef4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c62:	e065      	b.n	8009d30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f9f3 	bl	800a050 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2203      	movs	r2, #3
 8009c6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c72:	e05d      	b.n	8009d30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f9eb 	bl	800a050 <USBD_CtlSendStatus>
      break;
 8009c7a:	e059      	b.n	8009d30 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c7c:	4b2f      	ldr	r3, [pc, #188]	; (8009d3c <USBD_SetConfig+0x148>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d112      	bne.n	8009caa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2202      	movs	r2, #2
 8009c88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009c8c:	4b2b      	ldr	r3, [pc, #172]	; (8009d3c <USBD_SetConfig+0x148>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	461a      	mov	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c96:	4b29      	ldr	r3, [pc, #164]	; (8009d3c <USBD_SetConfig+0x148>)
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff f8e3 	bl	8008e68 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f9d4 	bl	800a050 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ca8:	e042      	b.n	8009d30 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009caa:	4b24      	ldr	r3, [pc, #144]	; (8009d3c <USBD_SetConfig+0x148>)
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d02a      	beq.n	8009d0e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f7ff f8d1 	bl	8008e68 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009cc6:	4b1d      	ldr	r3, [pc, #116]	; (8009d3c <USBD_SetConfig+0x148>)
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cd0:	4b1a      	ldr	r3, [pc, #104]	; (8009d3c <USBD_SetConfig+0x148>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff f8aa 	bl	8008e30 <USBD_SetClassConfig>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00f      	beq.n	8009d06 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f903 	bl	8009ef4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff f8b6 	bl	8008e68 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d04:	e014      	b.n	8009d30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f9a2 	bl	800a050 <USBD_CtlSendStatus>
      break;
 8009d0c:	e010      	b.n	8009d30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f99e 	bl	800a050 <USBD_CtlSendStatus>
      break;
 8009d14:	e00c      	b.n	8009d30 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f8eb 	bl	8009ef4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d1e:	4b07      	ldr	r3, [pc, #28]	; (8009d3c <USBD_SetConfig+0x148>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff f89f 	bl	8008e68 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d2e:	bf00      	nop
  }

  return ret;
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	20000adb 	.word	0x20000adb

08009d40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	88db      	ldrh	r3, [r3, #6]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d004      	beq.n	8009d5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f8cd 	bl	8009ef4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d5a:	e023      	b.n	8009da4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	dc02      	bgt.n	8009d6e <USBD_GetConfig+0x2e>
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	dc03      	bgt.n	8009d74 <USBD_GetConfig+0x34>
 8009d6c:	e015      	b.n	8009d9a <USBD_GetConfig+0x5a>
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d00b      	beq.n	8009d8a <USBD_GetConfig+0x4a>
 8009d72:	e012      	b.n	8009d9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	2201      	movs	r2, #1
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f927 	bl	8009fd6 <USBD_CtlSendData>
        break;
 8009d88:	e00c      	b.n	8009da4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	2201      	movs	r2, #1
 8009d90:	4619      	mov	r1, r3
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f91f 	bl	8009fd6 <USBD_CtlSendData>
        break;
 8009d98:	e004      	b.n	8009da4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f8a9 	bl	8009ef4 <USBD_CtlError>
        break;
 8009da2:	bf00      	nop
}
 8009da4:	bf00      	nop
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d81e      	bhi.n	8009e02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	88db      	ldrh	r3, [r3, #6]
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d004      	beq.n	8009dd6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f890 	bl	8009ef4 <USBD_CtlError>
        break;
 8009dd4:	e01a      	b.n	8009e0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d005      	beq.n	8009df2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	f043 0202 	orr.w	r2, r3, #2
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	330c      	adds	r3, #12
 8009df6:	2202      	movs	r2, #2
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f8eb 	bl	8009fd6 <USBD_CtlSendData>
      break;
 8009e00:	e004      	b.n	8009e0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f875 	bl	8009ef4 <USBD_CtlError>
      break;
 8009e0a:	bf00      	nop
  }
}
 8009e0c:	bf00      	nop
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	885b      	ldrh	r3, [r3, #2]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d106      	bne.n	8009e34 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f90e 	bl	800a050 <USBD_CtlSendStatus>
  }
}
 8009e34:	bf00      	nop
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d80b      	bhi.n	8009e6c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	885b      	ldrh	r3, [r3, #2]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d10c      	bne.n	8009e76 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f8f3 	bl	800a050 <USBD_CtlSendStatus>
      }
      break;
 8009e6a:	e004      	b.n	8009e76 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f840 	bl	8009ef4 <USBD_CtlError>
      break;
 8009e74:	e000      	b.n	8009e78 <USBD_ClrFeature+0x3c>
      break;
 8009e76:	bf00      	nop
  }
}
 8009e78:	bf00      	nop
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	781a      	ldrb	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	781a      	ldrb	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f7ff fa63 	bl	8009376 <SWAPBYTE>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f7ff fa56 	bl	8009376 <SWAPBYTE>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	461a      	mov	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	3301      	adds	r3, #1
 8009edc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7ff fa49 	bl	8009376 <SWAPBYTE>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	80da      	strh	r2, [r3, #6]
}
 8009eec:	bf00      	nop
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009efe:	2180      	movs	r1, #128	; 0x80
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f003 f995 	bl	800d230 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f06:	2100      	movs	r1, #0
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f003 f991 	bl	800d230 <USBD_LL_StallEP>
}
 8009f0e:	bf00      	nop
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b086      	sub	sp, #24
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	60f8      	str	r0, [r7, #12]
 8009f1e:	60b9      	str	r1, [r7, #8]
 8009f20:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f22:	2300      	movs	r3, #0
 8009f24:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d036      	beq.n	8009f9a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009f30:	6938      	ldr	r0, [r7, #16]
 8009f32:	f000 f836 	bl	8009fa2 <USBD_GetLen>
 8009f36:	4603      	mov	r3, r0
 8009f38:	3301      	adds	r3, #1
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	005b      	lsls	r3, r3, #1
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	4413      	add	r3, r2
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	7812      	ldrb	r2, [r2, #0]
 8009f4e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f50:	7dfb      	ldrb	r3, [r7, #23]
 8009f52:	3301      	adds	r3, #1
 8009f54:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	2203      	movs	r2, #3
 8009f5e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
 8009f62:	3301      	adds	r3, #1
 8009f64:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f66:	e013      	b.n	8009f90 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	7812      	ldrb	r2, [r2, #0]
 8009f72:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	3301      	adds	r3, #1
 8009f78:	613b      	str	r3, [r7, #16]
    idx++;
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	4413      	add	r3, r2
 8009f86:	2200      	movs	r2, #0
 8009f88:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1e7      	bne.n	8009f68 <USBD_GetString+0x52>
 8009f98:	e000      	b.n	8009f9c <USBD_GetString+0x86>
    return;
 8009f9a:	bf00      	nop
  }
}
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b085      	sub	sp, #20
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009faa:	2300      	movs	r3, #0
 8009fac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009fb2:	e005      	b.n	8009fc0 <USBD_GetLen+0x1e>
  {
    len++;
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1f5      	bne.n	8009fb4 <USBD_GetLen+0x12>
  }

  return len;
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b084      	sub	sp, #16
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	60f8      	str	r0, [r7, #12]
 8009fde:	60b9      	str	r1, [r7, #8]
 8009fe0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2202      	movs	r2, #2
 8009fe6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f003 f9a0 	bl	800d342 <USBD_LL_Transmit>

  return USBD_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	2100      	movs	r1, #0
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f003 f98f 	bl	800d342 <USBD_LL_Transmit>

  return USBD_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	60f8      	str	r0, [r7, #12]
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	2100      	movs	r1, #0
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f003 f99f 	bl	800d384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2204      	movs	r2, #4
 800a05c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a060:	2300      	movs	r3, #0
 800a062:	2200      	movs	r2, #0
 800a064:	2100      	movs	r1, #0
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f003 f96b 	bl	800d342 <USBD_LL_Transmit>

  return USBD_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2205      	movs	r2, #5
 800a082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a086:	2300      	movs	r3, #0
 800a088:	2200      	movs	r2, #0
 800a08a:	2100      	movs	r1, #0
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f003 f979 	bl	800d384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <__NVIC_SetPriority>:
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	6039      	str	r1, [r7, #0]
 800a0a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	db0a      	blt.n	800a0c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	490c      	ldr	r1, [pc, #48]	; (800a0e8 <__NVIC_SetPriority+0x4c>)
 800a0b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ba:	0112      	lsls	r2, r2, #4
 800a0bc:	b2d2      	uxtb	r2, r2
 800a0be:	440b      	add	r3, r1
 800a0c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a0c4:	e00a      	b.n	800a0dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	4908      	ldr	r1, [pc, #32]	; (800a0ec <__NVIC_SetPriority+0x50>)
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	f003 030f 	and.w	r3, r3, #15
 800a0d2:	3b04      	subs	r3, #4
 800a0d4:	0112      	lsls	r2, r2, #4
 800a0d6:	b2d2      	uxtb	r2, r2
 800a0d8:	440b      	add	r3, r1
 800a0da:	761a      	strb	r2, [r3, #24]
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr
 800a0e8:	e000e100 	.word	0xe000e100
 800a0ec:	e000ed00 	.word	0xe000ed00

0800a0f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a0f4:	4b05      	ldr	r3, [pc, #20]	; (800a10c <SysTick_Handler+0x1c>)
 800a0f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a0f8:	f001 fcfe 	bl	800baf8 <xTaskGetSchedulerState>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d001      	beq.n	800a106 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a102:	f002 fae9 	bl	800c6d8 <xPortSysTickHandler>
  }
}
 800a106:	bf00      	nop
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	e000e010 	.word	0xe000e010

0800a110 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a110:	b580      	push	{r7, lr}
 800a112:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a114:	2100      	movs	r1, #0
 800a116:	f06f 0004 	mvn.w	r0, #4
 800a11a:	f7ff ffbf 	bl	800a09c <__NVIC_SetPriority>
#endif
}
 800a11e:	bf00      	nop
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a12a:	f3ef 8305 	mrs	r3, IPSR
 800a12e:	603b      	str	r3, [r7, #0]
  return(result);
 800a130:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a136:	f06f 0305 	mvn.w	r3, #5
 800a13a:	607b      	str	r3, [r7, #4]
 800a13c:	e00c      	b.n	800a158 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a13e:	4b0a      	ldr	r3, [pc, #40]	; (800a168 <osKernelInitialize+0x44>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d105      	bne.n	800a152 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a146:	4b08      	ldr	r3, [pc, #32]	; (800a168 <osKernelInitialize+0x44>)
 800a148:	2201      	movs	r2, #1
 800a14a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	607b      	str	r3, [r7, #4]
 800a150:	e002      	b.n	800a158 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a152:	f04f 33ff 	mov.w	r3, #4294967295
 800a156:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a158:	687b      	ldr	r3, [r7, #4]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	20000adc 	.word	0x20000adc

0800a16c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a172:	f3ef 8305 	mrs	r3, IPSR
 800a176:	603b      	str	r3, [r7, #0]
  return(result);
 800a178:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d003      	beq.n	800a186 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a17e:	f06f 0305 	mvn.w	r3, #5
 800a182:	607b      	str	r3, [r7, #4]
 800a184:	e010      	b.n	800a1a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a186:	4b0b      	ldr	r3, [pc, #44]	; (800a1b4 <osKernelStart+0x48>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d109      	bne.n	800a1a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a18e:	f7ff ffbf 	bl	800a110 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a192:	4b08      	ldr	r3, [pc, #32]	; (800a1b4 <osKernelStart+0x48>)
 800a194:	2202      	movs	r2, #2
 800a196:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a198:	f001 f866 	bl	800b268 <vTaskStartScheduler>
      stat = osOK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	607b      	str	r3, [r7, #4]
 800a1a0:	e002      	b.n	800a1a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1a8:	687b      	ldr	r3, [r7, #4]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	20000adc 	.word	0x20000adc

0800a1b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08e      	sub	sp, #56	; 0x38
 800a1bc:	af04      	add	r7, sp, #16
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1c8:	f3ef 8305 	mrs	r3, IPSR
 800a1cc:	617b      	str	r3, [r7, #20]
  return(result);
 800a1ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d17e      	bne.n	800a2d2 <osThreadNew+0x11a>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d07b      	beq.n	800a2d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a1da:	2380      	movs	r3, #128	; 0x80
 800a1dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a1de:	2318      	movs	r3, #24
 800a1e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d045      	beq.n	800a27e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d002      	beq.n	800a200 <osThreadNew+0x48>
        name = attr->name;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d002      	beq.n	800a20e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	699b      	ldr	r3, [r3, #24]
 800a20c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d008      	beq.n	800a226 <osThreadNew+0x6e>
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	2b38      	cmp	r3, #56	; 0x38
 800a218:	d805      	bhi.n	800a226 <osThreadNew+0x6e>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <osThreadNew+0x72>
        return (NULL);
 800a226:	2300      	movs	r3, #0
 800a228:	e054      	b.n	800a2d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	089b      	lsrs	r3, r3, #2
 800a238:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00e      	beq.n	800a260 <osThreadNew+0xa8>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	2b5b      	cmp	r3, #91	; 0x5b
 800a248:	d90a      	bls.n	800a260 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d006      	beq.n	800a260 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d002      	beq.n	800a260 <osThreadNew+0xa8>
        mem = 1;
 800a25a:	2301      	movs	r3, #1
 800a25c:	61bb      	str	r3, [r7, #24]
 800a25e:	e010      	b.n	800a282 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10c      	bne.n	800a282 <osThreadNew+0xca>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d108      	bne.n	800a282 <osThreadNew+0xca>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d104      	bne.n	800a282 <osThreadNew+0xca>
          mem = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	61bb      	str	r3, [r7, #24]
 800a27c:	e001      	b.n	800a282 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a27e:	2300      	movs	r3, #0
 800a280:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d110      	bne.n	800a2aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a290:	9202      	str	r2, [sp, #8]
 800a292:	9301      	str	r3, [sp, #4]
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	6a3a      	ldr	r2, [r7, #32]
 800a29c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f000 fe0c 	bl	800aebc <xTaskCreateStatic>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	613b      	str	r3, [r7, #16]
 800a2a8:	e013      	b.n	800a2d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d110      	bne.n	800a2d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	f107 0310 	add.w	r3, r7, #16
 800a2b8:	9301      	str	r3, [sp, #4]
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 fe57 	bl	800af76 <xTaskCreate>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d001      	beq.n	800a2d2 <osThreadNew+0x11a>
            hTask = NULL;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a2d2:	693b      	ldr	r3, [r7, #16]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3728      	adds	r7, #40	; 0x28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2e4:	f3ef 8305 	mrs	r3, IPSR
 800a2e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a2ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d003      	beq.n	800a2f8 <osDelay+0x1c>
    stat = osErrorISR;
 800a2f0:	f06f 0305 	mvn.w	r3, #5
 800a2f4:	60fb      	str	r3, [r7, #12]
 800a2f6:	e007      	b.n	800a308 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 ff7c 	bl	800b200 <vTaskDelay>
    }
  }

  return (stat);
 800a308:	68fb      	ldr	r3, [r7, #12]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
	...

0800a314 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	4a07      	ldr	r2, [pc, #28]	; (800a340 <vApplicationGetIdleTaskMemory+0x2c>)
 800a324:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	4a06      	ldr	r2, [pc, #24]	; (800a344 <vApplicationGetIdleTaskMemory+0x30>)
 800a32a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2280      	movs	r2, #128	; 0x80
 800a330:	601a      	str	r2, [r3, #0]
}
 800a332:	bf00      	nop
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	20000ae0 	.word	0x20000ae0
 800a344:	20000b3c 	.word	0x20000b3c

0800a348 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4a07      	ldr	r2, [pc, #28]	; (800a374 <vApplicationGetTimerTaskMemory+0x2c>)
 800a358:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	4a06      	ldr	r2, [pc, #24]	; (800a378 <vApplicationGetTimerTaskMemory+0x30>)
 800a35e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a366:	601a      	str	r2, [r3, #0]
}
 800a368:	bf00      	nop
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	20000d3c 	.word	0x20000d3c
 800a378:	20000d98 	.word	0x20000d98

0800a37c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f103 0208 	add.w	r2, r3, #8
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f04f 32ff 	mov.w	r2, #4294967295
 800a394:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f103 0208 	add.w	r2, r3, #8
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f103 0208 	add.w	r2, r3, #8
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3ca:	bf00      	nop
 800a3cc:	370c      	adds	r7, #12
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b085      	sub	sp, #20
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	601a      	str	r2, [r3, #0]
}
 800a412:	bf00      	nop
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a41e:	b480      	push	{r7}
 800a420:	b085      	sub	sp, #20
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a434:	d103      	bne.n	800a43e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	60fb      	str	r3, [r7, #12]
 800a43c:	e00c      	b.n	800a458 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	3308      	adds	r3, #8
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	e002      	b.n	800a44c <vListInsert+0x2e>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	429a      	cmp	r2, r3
 800a456:	d2f6      	bcs.n	800a446 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	601a      	str	r2, [r3, #0]
}
 800a484:	bf00      	nop
 800a486:	3714      	adds	r7, #20
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	6892      	ldr	r2, [r2, #8]
 800a4a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	6852      	ldr	r2, [r2, #4]
 800a4b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d103      	bne.n	800a4c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689a      	ldr	r2, [r3, #8]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	1e5a      	subs	r2, r3, #1
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10a      	bne.n	800a50e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a50a:	bf00      	nop
 800a50c:	e7fe      	b.n	800a50c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a50e:	f002 f851 	bl	800c5b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a51a:	68f9      	ldr	r1, [r7, #12]
 800a51c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a51e:	fb01 f303 	mul.w	r3, r1, r3
 800a522:	441a      	add	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a53e:	3b01      	subs	r3, #1
 800a540:	68f9      	ldr	r1, [r7, #12]
 800a542:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a544:	fb01 f303 	mul.w	r3, r1, r3
 800a548:	441a      	add	r2, r3
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	22ff      	movs	r2, #255	; 0xff
 800a552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	22ff      	movs	r2, #255	; 0xff
 800a55a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d114      	bne.n	800a58e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d01a      	beq.n	800a5a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3310      	adds	r3, #16
 800a570:	4618      	mov	r0, r3
 800a572:	f001 f903 	bl	800b77c <xTaskRemoveFromEventList>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d012      	beq.n	800a5a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a57c:	4b0c      	ldr	r3, [pc, #48]	; (800a5b0 <xQueueGenericReset+0xcc>)
 800a57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	e009      	b.n	800a5a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3310      	adds	r3, #16
 800a592:	4618      	mov	r0, r3
 800a594:	f7ff fef2 	bl	800a37c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	3324      	adds	r3, #36	; 0x24
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7ff feed 	bl	800a37c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a5a2:	f002 f837 	bl	800c614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a5a6:	2301      	movs	r3, #1
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	e000ed04 	.word	0xe000ed04

0800a5b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b08e      	sub	sp, #56	; 0x38
 800a5b8:	af02      	add	r7, sp, #8
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	607a      	str	r2, [r7, #4]
 800a5c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10a      	bne.n	800a5de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5da:	bf00      	nop
 800a5dc:	e7fe      	b.n	800a5dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10a      	bne.n	800a5fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5f6:	bf00      	nop
 800a5f8:	e7fe      	b.n	800a5f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <xQueueGenericCreateStatic+0x52>
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <xQueueGenericCreateStatic+0x56>
 800a606:	2301      	movs	r3, #1
 800a608:	e000      	b.n	800a60c <xQueueGenericCreateStatic+0x58>
 800a60a:	2300      	movs	r3, #0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10a      	bne.n	800a626 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	623b      	str	r3, [r7, #32]
}
 800a622:	bf00      	nop
 800a624:	e7fe      	b.n	800a624 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d102      	bne.n	800a632 <xQueueGenericCreateStatic+0x7e>
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d101      	bne.n	800a636 <xQueueGenericCreateStatic+0x82>
 800a632:	2301      	movs	r3, #1
 800a634:	e000      	b.n	800a638 <xQueueGenericCreateStatic+0x84>
 800a636:	2300      	movs	r3, #0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10a      	bne.n	800a652 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a640:	f383 8811 	msr	BASEPRI, r3
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	61fb      	str	r3, [r7, #28]
}
 800a64e:	bf00      	nop
 800a650:	e7fe      	b.n	800a650 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a652:	2350      	movs	r3, #80	; 0x50
 800a654:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	2b50      	cmp	r3, #80	; 0x50
 800a65a:	d00a      	beq.n	800a672 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a660:	f383 8811 	msr	BASEPRI, r3
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	f3bf 8f4f 	dsb	sy
 800a66c:	61bb      	str	r3, [r7, #24]
}
 800a66e:	bf00      	nop
 800a670:	e7fe      	b.n	800a670 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a672:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00d      	beq.n	800a69a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a680:	2201      	movs	r2, #1
 800a682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a686:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	4613      	mov	r3, r2
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	68b9      	ldr	r1, [r7, #8]
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 f805 	bl	800a6a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3730      	adds	r7, #48	; 0x30
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
 800a6b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d103      	bne.n	800a6c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	69ba      	ldr	r2, [r7, #24]
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	e002      	b.n	800a6c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	69b8      	ldr	r0, [r7, #24]
 800a6d6:	f7ff ff05 	bl	800a4e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	78fa      	ldrb	r2, [r7, #3]
 800a6de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6e2:	bf00      	nop
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b08e      	sub	sp, #56	; 0x38
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
 800a6f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10a      	bne.n	800a71e <xQueueGenericSend+0x32>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d103      	bne.n	800a72c <xQueueGenericSend+0x40>
 800a724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <xQueueGenericSend+0x44>
 800a72c:	2301      	movs	r3, #1
 800a72e:	e000      	b.n	800a732 <xQueueGenericSend+0x46>
 800a730:	2300      	movs	r3, #0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10a      	bne.n	800a74c <xQueueGenericSend+0x60>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a748:	bf00      	nop
 800a74a:	e7fe      	b.n	800a74a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d103      	bne.n	800a75a <xQueueGenericSend+0x6e>
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a756:	2b01      	cmp	r3, #1
 800a758:	d101      	bne.n	800a75e <xQueueGenericSend+0x72>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e000      	b.n	800a760 <xQueueGenericSend+0x74>
 800a75e:	2300      	movs	r3, #0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <xQueueGenericSend+0x8e>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	623b      	str	r3, [r7, #32]
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a77a:	f001 f9bd 	bl	800baf8 <xTaskGetSchedulerState>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d102      	bne.n	800a78a <xQueueGenericSend+0x9e>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <xQueueGenericSend+0xa2>
 800a78a:	2301      	movs	r3, #1
 800a78c:	e000      	b.n	800a790 <xQueueGenericSend+0xa4>
 800a78e:	2300      	movs	r3, #0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10a      	bne.n	800a7aa <xQueueGenericSend+0xbe>
	__asm volatile
 800a794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a798:	f383 8811 	msr	BASEPRI, r3
 800a79c:	f3bf 8f6f 	isb	sy
 800a7a0:	f3bf 8f4f 	dsb	sy
 800a7a4:	61fb      	str	r3, [r7, #28]
}
 800a7a6:	bf00      	nop
 800a7a8:	e7fe      	b.n	800a7a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7aa:	f001 ff03 	bl	800c5b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d302      	bcc.n	800a7c0 <xQueueGenericSend+0xd4>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d129      	bne.n	800a814 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	68b9      	ldr	r1, [r7, #8]
 800a7c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7c6:	f000 fa0b 	bl	800abe0 <prvCopyDataToQueue>
 800a7ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d010      	beq.n	800a7f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d6:	3324      	adds	r3, #36	; 0x24
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 ffcf 	bl	800b77c <xTaskRemoveFromEventList>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d013      	beq.n	800a80c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a7e4:	4b3f      	ldr	r3, [pc, #252]	; (800a8e4 <xQueueGenericSend+0x1f8>)
 800a7e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	e00a      	b.n	800a80c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d007      	beq.n	800a80c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a7fc:	4b39      	ldr	r3, [pc, #228]	; (800a8e4 <xQueueGenericSend+0x1f8>)
 800a7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a80c:	f001 ff02 	bl	800c614 <vPortExitCritical>
				return pdPASS;
 800a810:	2301      	movs	r3, #1
 800a812:	e063      	b.n	800a8dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d103      	bne.n	800a822 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a81a:	f001 fefb 	bl	800c614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a81e:	2300      	movs	r3, #0
 800a820:	e05c      	b.n	800a8dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a824:	2b00      	cmp	r3, #0
 800a826:	d106      	bne.n	800a836 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a828:	f107 0314 	add.w	r3, r7, #20
 800a82c:	4618      	mov	r0, r3
 800a82e:	f001 f809 	bl	800b844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a832:	2301      	movs	r3, #1
 800a834:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a836:	f001 feed 	bl	800c614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a83a:	f000 fd7b 	bl	800b334 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a83e:	f001 feb9 	bl	800c5b4 <vPortEnterCritical>
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a848:	b25b      	sxtb	r3, r3
 800a84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84e:	d103      	bne.n	800a858 <xQueueGenericSend+0x16c>
 800a850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a852:	2200      	movs	r2, #0
 800a854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a85e:	b25b      	sxtb	r3, r3
 800a860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a864:	d103      	bne.n	800a86e <xQueueGenericSend+0x182>
 800a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a86e:	f001 fed1 	bl	800c614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a872:	1d3a      	adds	r2, r7, #4
 800a874:	f107 0314 	add.w	r3, r7, #20
 800a878:	4611      	mov	r1, r2
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 fff8 	bl	800b870 <xTaskCheckForTimeOut>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d124      	bne.n	800a8d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a886:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a888:	f000 faa2 	bl	800add0 <prvIsQueueFull>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d018      	beq.n	800a8c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a894:	3310      	adds	r3, #16
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	4611      	mov	r1, r2
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 ff1e 	bl	800b6dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8a2:	f000 fa2d 	bl	800ad00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8a6:	f000 fd53 	bl	800b350 <xTaskResumeAll>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f47f af7c 	bne.w	800a7aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a8b2:	4b0c      	ldr	r3, [pc, #48]	; (800a8e4 <xQueueGenericSend+0x1f8>)
 800a8b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b8:	601a      	str	r2, [r3, #0]
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	e772      	b.n	800a7aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a8c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8c6:	f000 fa1b 	bl	800ad00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8ca:	f000 fd41 	bl	800b350 <xTaskResumeAll>
 800a8ce:	e76c      	b.n	800a7aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8d2:	f000 fa15 	bl	800ad00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8d6:	f000 fd3b 	bl	800b350 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a8da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3738      	adds	r7, #56	; 0x38
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	e000ed04 	.word	0xe000ed04

0800a8e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b090      	sub	sp, #64	; 0x40
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10a      	bne.n	800a916 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d103      	bne.n	800a924 <xQueueGenericSendFromISR+0x3c>
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <xQueueGenericSendFromISR+0x40>
 800a924:	2301      	movs	r3, #1
 800a926:	e000      	b.n	800a92a <xQueueGenericSendFromISR+0x42>
 800a928:	2300      	movs	r3, #0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10a      	bne.n	800a944 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a940:	bf00      	nop
 800a942:	e7fe      	b.n	800a942 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	2b02      	cmp	r3, #2
 800a948:	d103      	bne.n	800a952 <xQueueGenericSendFromISR+0x6a>
 800a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d101      	bne.n	800a956 <xQueueGenericSendFromISR+0x6e>
 800a952:	2301      	movs	r3, #1
 800a954:	e000      	b.n	800a958 <xQueueGenericSendFromISR+0x70>
 800a956:	2300      	movs	r3, #0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10a      	bne.n	800a972 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	623b      	str	r3, [r7, #32]
}
 800a96e:	bf00      	nop
 800a970:	e7fe      	b.n	800a970 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a972:	f001 ff01 	bl	800c778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a976:	f3ef 8211 	mrs	r2, BASEPRI
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	61fa      	str	r2, [r7, #28]
 800a98c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a98e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a990:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d302      	bcc.n	800a9a4 <xQueueGenericSendFromISR+0xbc>
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d12f      	bne.n	800aa04 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9b4:	683a      	ldr	r2, [r7, #0]
 800a9b6:	68b9      	ldr	r1, [r7, #8]
 800a9b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9ba:	f000 f911 	bl	800abe0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a9be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c6:	d112      	bne.n	800a9ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d016      	beq.n	800a9fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d2:	3324      	adds	r3, #36	; 0x24
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f000 fed1 	bl	800b77c <xTaskRemoveFromEventList>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00e      	beq.n	800a9fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00b      	beq.n	800a9fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	601a      	str	r2, [r3, #0]
 800a9ec:	e007      	b.n	800a9fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a9ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	b25a      	sxtb	r2, r3
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aa02:	e001      	b.n	800aa08 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa04:	2300      	movs	r3, #0
 800aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3740      	adds	r7, #64	; 0x40
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b08c      	sub	sp, #48	; 0x30
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10a      	bne.n	800aa50 <xQueueReceive+0x30>
	__asm volatile
 800aa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	623b      	str	r3, [r7, #32]
}
 800aa4c:	bf00      	nop
 800aa4e:	e7fe      	b.n	800aa4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d103      	bne.n	800aa5e <xQueueReceive+0x3e>
 800aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d101      	bne.n	800aa62 <xQueueReceive+0x42>
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e000      	b.n	800aa64 <xQueueReceive+0x44>
 800aa62:	2300      	movs	r3, #0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <xQueueReceive+0x5e>
	__asm volatile
 800aa68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	61fb      	str	r3, [r7, #28]
}
 800aa7a:	bf00      	nop
 800aa7c:	e7fe      	b.n	800aa7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa7e:	f001 f83b 	bl	800baf8 <xTaskGetSchedulerState>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d102      	bne.n	800aa8e <xQueueReceive+0x6e>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <xQueueReceive+0x72>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e000      	b.n	800aa94 <xQueueReceive+0x74>
 800aa92:	2300      	movs	r3, #0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10a      	bne.n	800aaae <xQueueReceive+0x8e>
	__asm volatile
 800aa98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9c:	f383 8811 	msr	BASEPRI, r3
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	61bb      	str	r3, [r7, #24]
}
 800aaaa:	bf00      	nop
 800aaac:	e7fe      	b.n	800aaac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aaae:	f001 fd81 	bl	800c5b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d01f      	beq.n	800aafe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aabe:	68b9      	ldr	r1, [r7, #8]
 800aac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aac2:	f000 f8f7 	bl	800acb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac8:	1e5a      	subs	r2, r3, #1
 800aaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aacc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00f      	beq.n	800aaf6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad8:	3310      	adds	r3, #16
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 fe4e 	bl	800b77c <xTaskRemoveFromEventList>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d007      	beq.n	800aaf6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aae6:	4b3d      	ldr	r3, [pc, #244]	; (800abdc <xQueueReceive+0x1bc>)
 800aae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aaf6:	f001 fd8d 	bl	800c614 <vPortExitCritical>
				return pdPASS;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e069      	b.n	800abd2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d103      	bne.n	800ab0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab04:	f001 fd86 	bl	800c614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	e062      	b.n	800abd2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d106      	bne.n	800ab20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab12:	f107 0310 	add.w	r3, r7, #16
 800ab16:	4618      	mov	r0, r3
 800ab18:	f000 fe94 	bl	800b844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab20:	f001 fd78 	bl	800c614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab24:	f000 fc06 	bl	800b334 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab28:	f001 fd44 	bl	800c5b4 <vPortEnterCritical>
 800ab2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab32:	b25b      	sxtb	r3, r3
 800ab34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab38:	d103      	bne.n	800ab42 <xQueueReceive+0x122>
 800ab3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab48:	b25b      	sxtb	r3, r3
 800ab4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4e:	d103      	bne.n	800ab58 <xQueueReceive+0x138>
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	2200      	movs	r2, #0
 800ab54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab58:	f001 fd5c 	bl	800c614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab5c:	1d3a      	adds	r2, r7, #4
 800ab5e:	f107 0310 	add.w	r3, r7, #16
 800ab62:	4611      	mov	r1, r2
 800ab64:	4618      	mov	r0, r3
 800ab66:	f000 fe83 	bl	800b870 <xTaskCheckForTimeOut>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d123      	bne.n	800abb8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab72:	f000 f917 	bl	800ada4 <prvIsQueueEmpty>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d017      	beq.n	800abac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	3324      	adds	r3, #36	; 0x24
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	4611      	mov	r1, r2
 800ab84:	4618      	mov	r0, r3
 800ab86:	f000 fda9 	bl	800b6dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab8c:	f000 f8b8 	bl	800ad00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab90:	f000 fbde 	bl	800b350 <xTaskResumeAll>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d189      	bne.n	800aaae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ab9a:	4b10      	ldr	r3, [pc, #64]	; (800abdc <xQueueReceive+0x1bc>)
 800ab9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	f3bf 8f4f 	dsb	sy
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	e780      	b.n	800aaae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abae:	f000 f8a7 	bl	800ad00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abb2:	f000 fbcd 	bl	800b350 <xTaskResumeAll>
 800abb6:	e77a      	b.n	800aaae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800abb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abba:	f000 f8a1 	bl	800ad00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abbe:	f000 fbc7 	bl	800b350 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abc4:	f000 f8ee 	bl	800ada4 <prvIsQueueEmpty>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f43f af6f 	beq.w	800aaae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800abd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3730      	adds	r7, #48	; 0x30
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	e000ed04 	.word	0xe000ed04

0800abe0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800abec:	2300      	movs	r3, #0
 800abee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10d      	bne.n	800ac1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d14d      	bne.n	800aca2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 ff92 	bl	800bb34 <xTaskPriorityDisinherit>
 800ac10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	609a      	str	r2, [r3, #8]
 800ac18:	e043      	b.n	800aca2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d119      	bne.n	800ac54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6858      	ldr	r0, [r3, #4]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac28:	461a      	mov	r2, r3
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	f008 fd7c 	bl	8013728 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac38:	441a      	add	r2, r3
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d32b      	bcc.n	800aca2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	605a      	str	r2, [r3, #4]
 800ac52:	e026      	b.n	800aca2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	68d8      	ldr	r0, [r3, #12]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	68b9      	ldr	r1, [r7, #8]
 800ac60:	f008 fd62 	bl	8013728 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	68da      	ldr	r2, [r3, #12]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6c:	425b      	negs	r3, r3
 800ac6e:	441a      	add	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	68da      	ldr	r2, [r3, #12]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d207      	bcs.n	800ac90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	689a      	ldr	r2, [r3, #8]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac88:	425b      	negs	r3, r3
 800ac8a:	441a      	add	r2, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d105      	bne.n	800aca2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	1c5a      	adds	r2, r3, #1
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800acaa:	697b      	ldr	r3, [r7, #20]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d018      	beq.n	800acf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	68da      	ldr	r2, [r3, #12]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acce:	441a      	add	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	68da      	ldr	r2, [r3, #12]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d303      	bcc.n	800ace8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	68d9      	ldr	r1, [r3, #12]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf0:	461a      	mov	r2, r3
 800acf2:	6838      	ldr	r0, [r7, #0]
 800acf4:	f008 fd18 	bl	8013728 <memcpy>
	}
}
 800acf8:	bf00      	nop
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad08:	f001 fc54 	bl	800c5b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad14:	e011      	b.n	800ad3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d012      	beq.n	800ad44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	3324      	adds	r3, #36	; 0x24
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 fd2a 	bl	800b77c <xTaskRemoveFromEventList>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d001      	beq.n	800ad32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad2e:	f000 fe01 	bl	800b934 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
 800ad34:	3b01      	subs	r3, #1
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	dce9      	bgt.n	800ad16 <prvUnlockQueue+0x16>
 800ad42:	e000      	b.n	800ad46 <prvUnlockQueue+0x46>
					break;
 800ad44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	22ff      	movs	r2, #255	; 0xff
 800ad4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad4e:	f001 fc61 	bl	800c614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad52:	f001 fc2f 	bl	800c5b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad5e:	e011      	b.n	800ad84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d012      	beq.n	800ad8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	3310      	adds	r3, #16
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 fd05 	bl	800b77c <xTaskRemoveFromEventList>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad78:	f000 fddc 	bl	800b934 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	dce9      	bgt.n	800ad60 <prvUnlockQueue+0x60>
 800ad8c:	e000      	b.n	800ad90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	22ff      	movs	r2, #255	; 0xff
 800ad94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad98:	f001 fc3c 	bl	800c614 <vPortExitCritical>
}
 800ad9c:	bf00      	nop
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adac:	f001 fc02 	bl	800c5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d102      	bne.n	800adbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800adb8:	2301      	movs	r3, #1
 800adba:	60fb      	str	r3, [r7, #12]
 800adbc:	e001      	b.n	800adc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800adbe:	2300      	movs	r3, #0
 800adc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adc2:	f001 fc27 	bl	800c614 <vPortExitCritical>

	return xReturn;
 800adc6:	68fb      	ldr	r3, [r7, #12]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800add8:	f001 fbec 	bl	800c5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d102      	bne.n	800adee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ade8:	2301      	movs	r3, #1
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	e001      	b.n	800adf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800adee:	2300      	movs	r3, #0
 800adf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adf2:	f001 fc0f 	bl	800c614 <vPortExitCritical>

	return xReturn;
 800adf6:	68fb      	ldr	r3, [r7, #12]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
 800ae0e:	e014      	b.n	800ae3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae10:	4a0f      	ldr	r2, [pc, #60]	; (800ae50 <vQueueAddToRegistry+0x50>)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10b      	bne.n	800ae34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae1c:	490c      	ldr	r1, [pc, #48]	; (800ae50 <vQueueAddToRegistry+0x50>)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae26:	4a0a      	ldr	r2, [pc, #40]	; (800ae50 <vQueueAddToRegistry+0x50>)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	4413      	add	r3, r2
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae32:	e006      	b.n	800ae42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	3301      	adds	r3, #1
 800ae38:	60fb      	str	r3, [r7, #12]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2b07      	cmp	r3, #7
 800ae3e:	d9e7      	bls.n	800ae10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae40:	bf00      	nop
 800ae42:	bf00      	nop
 800ae44:	3714      	adds	r7, #20
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	20005458 	.word	0x20005458

0800ae54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae64:	f001 fba6 	bl	800c5b4 <vPortEnterCritical>
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae6e:	b25b      	sxtb	r3, r3
 800ae70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae74:	d103      	bne.n	800ae7e <vQueueWaitForMessageRestricted+0x2a>
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae84:	b25b      	sxtb	r3, r3
 800ae86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8a:	d103      	bne.n	800ae94 <vQueueWaitForMessageRestricted+0x40>
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae94:	f001 fbbe 	bl	800c614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d106      	bne.n	800aeae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	3324      	adds	r3, #36	; 0x24
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	68b9      	ldr	r1, [r7, #8]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 fc3b 	bl	800b724 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aeae:	6978      	ldr	r0, [r7, #20]
 800aeb0:	f7ff ff26 	bl	800ad00 <prvUnlockQueue>
	}
 800aeb4:	bf00      	nop
 800aeb6:	3718      	adds	r7, #24
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b08e      	sub	sp, #56	; 0x38
 800aec0:	af04      	add	r7, sp, #16
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
 800aec8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aeca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10a      	bne.n	800aee6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800aed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	623b      	str	r3, [r7, #32]
}
 800aee2:	bf00      	nop
 800aee4:	e7fe      	b.n	800aee4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10a      	bne.n	800af02 <xTaskCreateStatic+0x46>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef0:	f383 8811 	msr	BASEPRI, r3
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	61fb      	str	r3, [r7, #28]
}
 800aefe:	bf00      	nop
 800af00:	e7fe      	b.n	800af00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af02:	235c      	movs	r3, #92	; 0x5c
 800af04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	2b5c      	cmp	r3, #92	; 0x5c
 800af0a:	d00a      	beq.n	800af22 <xTaskCreateStatic+0x66>
	__asm volatile
 800af0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af10:	f383 8811 	msr	BASEPRI, r3
 800af14:	f3bf 8f6f 	isb	sy
 800af18:	f3bf 8f4f 	dsb	sy
 800af1c:	61bb      	str	r3, [r7, #24]
}
 800af1e:	bf00      	nop
 800af20:	e7fe      	b.n	800af20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	2b00      	cmp	r3, #0
 800af28:	d01e      	beq.n	800af68 <xTaskCreateStatic+0xac>
 800af2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d01b      	beq.n	800af68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	2202      	movs	r2, #2
 800af3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af42:	2300      	movs	r3, #0
 800af44:	9303      	str	r3, [sp, #12]
 800af46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af48:	9302      	str	r3, [sp, #8]
 800af4a:	f107 0314 	add.w	r3, r7, #20
 800af4e:	9301      	str	r3, [sp, #4]
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	68b9      	ldr	r1, [r7, #8]
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f000 f850 	bl	800b000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af62:	f000 f8dd 	bl	800b120 <prvAddNewTaskToReadyList>
 800af66:	e001      	b.n	800af6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800af68:	2300      	movs	r3, #0
 800af6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800af6c:	697b      	ldr	r3, [r7, #20]
	}
 800af6e:	4618      	mov	r0, r3
 800af70:	3728      	adds	r7, #40	; 0x28
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af76:	b580      	push	{r7, lr}
 800af78:	b08c      	sub	sp, #48	; 0x30
 800af7a:	af04      	add	r7, sp, #16
 800af7c:	60f8      	str	r0, [r7, #12]
 800af7e:	60b9      	str	r1, [r7, #8]
 800af80:	603b      	str	r3, [r7, #0]
 800af82:	4613      	mov	r3, r2
 800af84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800af86:	88fb      	ldrh	r3, [r7, #6]
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4618      	mov	r0, r3
 800af8c:	f001 fc34 	bl	800c7f8 <pvPortMalloc>
 800af90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00e      	beq.n	800afb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af98:	205c      	movs	r0, #92	; 0x5c
 800af9a:	f001 fc2d 	bl	800c7f8 <pvPortMalloc>
 800af9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d003      	beq.n	800afae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	697a      	ldr	r2, [r7, #20]
 800afaa:	631a      	str	r2, [r3, #48]	; 0x30
 800afac:	e005      	b.n	800afba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800afae:	6978      	ldr	r0, [r7, #20]
 800afb0:	f001 fcee 	bl	800c990 <vPortFree>
 800afb4:	e001      	b.n	800afba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800afb6:	2300      	movs	r3, #0
 800afb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d017      	beq.n	800aff0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800afc8:	88fa      	ldrh	r2, [r7, #6]
 800afca:	2300      	movs	r3, #0
 800afcc:	9303      	str	r3, [sp, #12]
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	9302      	str	r3, [sp, #8]
 800afd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	68b9      	ldr	r1, [r7, #8]
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f000 f80e 	bl	800b000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afe4:	69f8      	ldr	r0, [r7, #28]
 800afe6:	f000 f89b 	bl	800b120 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800afea:	2301      	movs	r3, #1
 800afec:	61bb      	str	r3, [r7, #24]
 800afee:	e002      	b.n	800aff6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aff0:	f04f 33ff 	mov.w	r3, #4294967295
 800aff4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aff6:	69bb      	ldr	r3, [r7, #24]
	}
 800aff8:	4618      	mov	r0, r3
 800affa:	3720      	adds	r7, #32
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
 800b00c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b010:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	461a      	mov	r2, r3
 800b018:	21a5      	movs	r1, #165	; 0xa5
 800b01a:	f008 fb93 	bl	8013744 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b028:	3b01      	subs	r3, #1
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	f023 0307 	bic.w	r3, r3, #7
 800b036:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	f003 0307 	and.w	r3, r3, #7
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00a      	beq.n	800b058 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	617b      	str	r3, [r7, #20]
}
 800b054:	bf00      	nop
 800b056:	e7fe      	b.n	800b056 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d01f      	beq.n	800b09e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b05e:	2300      	movs	r3, #0
 800b060:	61fb      	str	r3, [r7, #28]
 800b062:	e012      	b.n	800b08a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	4413      	add	r3, r2
 800b06a:	7819      	ldrb	r1, [r3, #0]
 800b06c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	4413      	add	r3, r2
 800b072:	3334      	adds	r3, #52	; 0x34
 800b074:	460a      	mov	r2, r1
 800b076:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	4413      	add	r3, r2
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d006      	beq.n	800b092 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	3301      	adds	r3, #1
 800b088:	61fb      	str	r3, [r7, #28]
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	2b0f      	cmp	r3, #15
 800b08e:	d9e9      	bls.n	800b064 <prvInitialiseNewTask+0x64>
 800b090:	e000      	b.n	800b094 <prvInitialiseNewTask+0x94>
			{
				break;
 800b092:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b09c:	e003      	b.n	800b0a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a8:	2b37      	cmp	r3, #55	; 0x37
 800b0aa:	d901      	bls.n	800b0b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0ac:	2337      	movs	r3, #55	; 0x37
 800b0ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0be:	2200      	movs	r2, #0
 800b0c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7ff f978 	bl	800a3bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ce:	3318      	adds	r3, #24
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7ff f973 	bl	800a3bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	68f9      	ldr	r1, [r7, #12]
 800b0fe:	69b8      	ldr	r0, [r7, #24]
 800b100:	f001 f928 	bl	800c354 <pxPortInitialiseStack>
 800b104:	4602      	mov	r2, r0
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b116:	bf00      	nop
 800b118:	3720      	adds	r7, #32
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b128:	f001 fa44 	bl	800c5b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b12c:	4b2d      	ldr	r3, [pc, #180]	; (800b1e4 <prvAddNewTaskToReadyList+0xc4>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	3301      	adds	r3, #1
 800b132:	4a2c      	ldr	r2, [pc, #176]	; (800b1e4 <prvAddNewTaskToReadyList+0xc4>)
 800b134:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b136:	4b2c      	ldr	r3, [pc, #176]	; (800b1e8 <prvAddNewTaskToReadyList+0xc8>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d109      	bne.n	800b152 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b13e:	4a2a      	ldr	r2, [pc, #168]	; (800b1e8 <prvAddNewTaskToReadyList+0xc8>)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b144:	4b27      	ldr	r3, [pc, #156]	; (800b1e4 <prvAddNewTaskToReadyList+0xc4>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d110      	bne.n	800b16e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b14c:	f000 fc16 	bl	800b97c <prvInitialiseTaskLists>
 800b150:	e00d      	b.n	800b16e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b152:	4b26      	ldr	r3, [pc, #152]	; (800b1ec <prvAddNewTaskToReadyList+0xcc>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d109      	bne.n	800b16e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b15a:	4b23      	ldr	r3, [pc, #140]	; (800b1e8 <prvAddNewTaskToReadyList+0xc8>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b164:	429a      	cmp	r2, r3
 800b166:	d802      	bhi.n	800b16e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b168:	4a1f      	ldr	r2, [pc, #124]	; (800b1e8 <prvAddNewTaskToReadyList+0xc8>)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b16e:	4b20      	ldr	r3, [pc, #128]	; (800b1f0 <prvAddNewTaskToReadyList+0xd0>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3301      	adds	r3, #1
 800b174:	4a1e      	ldr	r2, [pc, #120]	; (800b1f0 <prvAddNewTaskToReadyList+0xd0>)
 800b176:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b178:	4b1d      	ldr	r3, [pc, #116]	; (800b1f0 <prvAddNewTaskToReadyList+0xd0>)
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b184:	4b1b      	ldr	r3, [pc, #108]	; (800b1f4 <prvAddNewTaskToReadyList+0xd4>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d903      	bls.n	800b194 <prvAddNewTaskToReadyList+0x74>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b190:	4a18      	ldr	r2, [pc, #96]	; (800b1f4 <prvAddNewTaskToReadyList+0xd4>)
 800b192:	6013      	str	r3, [r2, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b198:	4613      	mov	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4a15      	ldr	r2, [pc, #84]	; (800b1f8 <prvAddNewTaskToReadyList+0xd8>)
 800b1a2:	441a      	add	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	4610      	mov	r0, r2
 800b1ac:	f7ff f913 	bl	800a3d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b1b0:	f001 fa30 	bl	800c614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b1b4:	4b0d      	ldr	r3, [pc, #52]	; (800b1ec <prvAddNewTaskToReadyList+0xcc>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00e      	beq.n	800b1da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b1bc:	4b0a      	ldr	r3, [pc, #40]	; (800b1e8 <prvAddNewTaskToReadyList+0xc8>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d207      	bcs.n	800b1da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b1ca:	4b0c      	ldr	r3, [pc, #48]	; (800b1fc <prvAddNewTaskToReadyList+0xdc>)
 800b1cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1da:	bf00      	nop
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	2000166c 	.word	0x2000166c
 800b1e8:	20001198 	.word	0x20001198
 800b1ec:	20001678 	.word	0x20001678
 800b1f0:	20001688 	.word	0x20001688
 800b1f4:	20001674 	.word	0x20001674
 800b1f8:	2000119c 	.word	0x2000119c
 800b1fc:	e000ed04 	.word	0xe000ed04

0800b200 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b208:	2300      	movs	r3, #0
 800b20a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d017      	beq.n	800b242 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b212:	4b13      	ldr	r3, [pc, #76]	; (800b260 <vTaskDelay+0x60>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <vTaskDelay+0x30>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	60bb      	str	r3, [r7, #8]
}
 800b22c:	bf00      	nop
 800b22e:	e7fe      	b.n	800b22e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b230:	f000 f880 	bl	800b334 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b234:	2100      	movs	r1, #0
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fcea 	bl	800bc10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b23c:	f000 f888 	bl	800b350 <xTaskResumeAll>
 800b240:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d107      	bne.n	800b258 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b248:	4b06      	ldr	r3, [pc, #24]	; (800b264 <vTaskDelay+0x64>)
 800b24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b258:	bf00      	nop
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	20001694 	.word	0x20001694
 800b264:	e000ed04 	.word	0xe000ed04

0800b268 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b08a      	sub	sp, #40	; 0x28
 800b26c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b272:	2300      	movs	r3, #0
 800b274:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b276:	463a      	mov	r2, r7
 800b278:	1d39      	adds	r1, r7, #4
 800b27a:	f107 0308 	add.w	r3, r7, #8
 800b27e:	4618      	mov	r0, r3
 800b280:	f7ff f848 	bl	800a314 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	9202      	str	r2, [sp, #8]
 800b28c:	9301      	str	r3, [sp, #4]
 800b28e:	2300      	movs	r3, #0
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	2300      	movs	r3, #0
 800b294:	460a      	mov	r2, r1
 800b296:	4921      	ldr	r1, [pc, #132]	; (800b31c <vTaskStartScheduler+0xb4>)
 800b298:	4821      	ldr	r0, [pc, #132]	; (800b320 <vTaskStartScheduler+0xb8>)
 800b29a:	f7ff fe0f 	bl	800aebc <xTaskCreateStatic>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	4a20      	ldr	r2, [pc, #128]	; (800b324 <vTaskStartScheduler+0xbc>)
 800b2a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2a4:	4b1f      	ldr	r3, [pc, #124]	; (800b324 <vTaskStartScheduler+0xbc>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	617b      	str	r3, [r7, #20]
 800b2b0:	e001      	b.n	800b2b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d102      	bne.n	800b2c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b2bc:	f000 fcfc 	bl	800bcb8 <xTimerCreateTimerTask>
 800b2c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d116      	bne.n	800b2f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2cc:	f383 8811 	msr	BASEPRI, r3
 800b2d0:	f3bf 8f6f 	isb	sy
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	613b      	str	r3, [r7, #16]
}
 800b2da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b2dc:	4b12      	ldr	r3, [pc, #72]	; (800b328 <vTaskStartScheduler+0xc0>)
 800b2de:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b2e4:	4b11      	ldr	r3, [pc, #68]	; (800b32c <vTaskStartScheduler+0xc4>)
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b2ea:	4b11      	ldr	r3, [pc, #68]	; (800b330 <vTaskStartScheduler+0xc8>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2f0:	f001 f8be 	bl	800c470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2f4:	e00e      	b.n	800b314 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fc:	d10a      	bne.n	800b314 <vTaskStartScheduler+0xac>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	60fb      	str	r3, [r7, #12]
}
 800b310:	bf00      	nop
 800b312:	e7fe      	b.n	800b312 <vTaskStartScheduler+0xaa>
}
 800b314:	bf00      	nop
 800b316:	3718      	adds	r7, #24
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	0801394c 	.word	0x0801394c
 800b320:	0800b94d 	.word	0x0800b94d
 800b324:	20001690 	.word	0x20001690
 800b328:	2000168c 	.word	0x2000168c
 800b32c:	20001678 	.word	0x20001678
 800b330:	20001670 	.word	0x20001670

0800b334 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b334:	b480      	push	{r7}
 800b336:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b338:	4b04      	ldr	r3, [pc, #16]	; (800b34c <vTaskSuspendAll+0x18>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	3301      	adds	r3, #1
 800b33e:	4a03      	ldr	r2, [pc, #12]	; (800b34c <vTaskSuspendAll+0x18>)
 800b340:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b342:	bf00      	nop
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr
 800b34c:	20001694 	.word	0x20001694

0800b350 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b356:	2300      	movs	r3, #0
 800b358:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b35a:	2300      	movs	r3, #0
 800b35c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b35e:	4b42      	ldr	r3, [pc, #264]	; (800b468 <xTaskResumeAll+0x118>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10a      	bne.n	800b37c <xTaskResumeAll+0x2c>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	603b      	str	r3, [r7, #0]
}
 800b378:	bf00      	nop
 800b37a:	e7fe      	b.n	800b37a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b37c:	f001 f91a 	bl	800c5b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b380:	4b39      	ldr	r3, [pc, #228]	; (800b468 <xTaskResumeAll+0x118>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	3b01      	subs	r3, #1
 800b386:	4a38      	ldr	r2, [pc, #224]	; (800b468 <xTaskResumeAll+0x118>)
 800b388:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b38a:	4b37      	ldr	r3, [pc, #220]	; (800b468 <xTaskResumeAll+0x118>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d162      	bne.n	800b458 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b392:	4b36      	ldr	r3, [pc, #216]	; (800b46c <xTaskResumeAll+0x11c>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d05e      	beq.n	800b458 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b39a:	e02f      	b.n	800b3fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b39c:	4b34      	ldr	r3, [pc, #208]	; (800b470 <xTaskResumeAll+0x120>)
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3318      	adds	r3, #24
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7ff f871 	bl	800a490 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7ff f86c 	bl	800a490 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3bc:	4b2d      	ldr	r3, [pc, #180]	; (800b474 <xTaskResumeAll+0x124>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d903      	bls.n	800b3cc <xTaskResumeAll+0x7c>
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c8:	4a2a      	ldr	r2, [pc, #168]	; (800b474 <xTaskResumeAll+0x124>)
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	4413      	add	r3, r2
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4a27      	ldr	r2, [pc, #156]	; (800b478 <xTaskResumeAll+0x128>)
 800b3da:	441a      	add	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3304      	adds	r3, #4
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	4610      	mov	r0, r2
 800b3e4:	f7fe fff7 	bl	800a3d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ec:	4b23      	ldr	r3, [pc, #140]	; (800b47c <xTaskResumeAll+0x12c>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d302      	bcc.n	800b3fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b3f6:	4b22      	ldr	r3, [pc, #136]	; (800b480 <xTaskResumeAll+0x130>)
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3fc:	4b1c      	ldr	r3, [pc, #112]	; (800b470 <xTaskResumeAll+0x120>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1cb      	bne.n	800b39c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b40a:	f000 fb55 	bl	800bab8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b40e:	4b1d      	ldr	r3, [pc, #116]	; (800b484 <xTaskResumeAll+0x134>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d010      	beq.n	800b43c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b41a:	f000 f847 	bl	800b4ac <xTaskIncrementTick>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b424:	4b16      	ldr	r3, [pc, #88]	; (800b480 <xTaskResumeAll+0x130>)
 800b426:	2201      	movs	r2, #1
 800b428:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	3b01      	subs	r3, #1
 800b42e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1f1      	bne.n	800b41a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b436:	4b13      	ldr	r3, [pc, #76]	; (800b484 <xTaskResumeAll+0x134>)
 800b438:	2200      	movs	r2, #0
 800b43a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b43c:	4b10      	ldr	r3, [pc, #64]	; (800b480 <xTaskResumeAll+0x130>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d009      	beq.n	800b458 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b444:	2301      	movs	r3, #1
 800b446:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b448:	4b0f      	ldr	r3, [pc, #60]	; (800b488 <xTaskResumeAll+0x138>)
 800b44a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b44e:	601a      	str	r2, [r3, #0]
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b458:	f001 f8dc 	bl	800c614 <vPortExitCritical>

	return xAlreadyYielded;
 800b45c:	68bb      	ldr	r3, [r7, #8]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20001694 	.word	0x20001694
 800b46c:	2000166c 	.word	0x2000166c
 800b470:	2000162c 	.word	0x2000162c
 800b474:	20001674 	.word	0x20001674
 800b478:	2000119c 	.word	0x2000119c
 800b47c:	20001198 	.word	0x20001198
 800b480:	20001680 	.word	0x20001680
 800b484:	2000167c 	.word	0x2000167c
 800b488:	e000ed04 	.word	0xe000ed04

0800b48c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b492:	4b05      	ldr	r3, [pc, #20]	; (800b4a8 <xTaskGetTickCount+0x1c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b498:	687b      	ldr	r3, [r7, #4]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	370c      	adds	r7, #12
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	20001670 	.word	0x20001670

0800b4ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4b6:	4b4f      	ldr	r3, [pc, #316]	; (800b5f4 <xTaskIncrementTick+0x148>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f040 808f 	bne.w	800b5de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4c0:	4b4d      	ldr	r3, [pc, #308]	; (800b5f8 <xTaskIncrementTick+0x14c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b4c8:	4a4b      	ldr	r2, [pc, #300]	; (800b5f8 <xTaskIncrementTick+0x14c>)
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d120      	bne.n	800b516 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b4d4:	4b49      	ldr	r3, [pc, #292]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00a      	beq.n	800b4f4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	603b      	str	r3, [r7, #0]
}
 800b4f0:	bf00      	nop
 800b4f2:	e7fe      	b.n	800b4f2 <xTaskIncrementTick+0x46>
 800b4f4:	4b41      	ldr	r3, [pc, #260]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	60fb      	str	r3, [r7, #12]
 800b4fa:	4b41      	ldr	r3, [pc, #260]	; (800b600 <xTaskIncrementTick+0x154>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a3f      	ldr	r2, [pc, #252]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	4a3f      	ldr	r2, [pc, #252]	; (800b600 <xTaskIncrementTick+0x154>)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6013      	str	r3, [r2, #0]
 800b508:	4b3e      	ldr	r3, [pc, #248]	; (800b604 <xTaskIncrementTick+0x158>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3301      	adds	r3, #1
 800b50e:	4a3d      	ldr	r2, [pc, #244]	; (800b604 <xTaskIncrementTick+0x158>)
 800b510:	6013      	str	r3, [r2, #0]
 800b512:	f000 fad1 	bl	800bab8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b516:	4b3c      	ldr	r3, [pc, #240]	; (800b608 <xTaskIncrementTick+0x15c>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	693a      	ldr	r2, [r7, #16]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d349      	bcc.n	800b5b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b520:	4b36      	ldr	r3, [pc, #216]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d104      	bne.n	800b534 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b52a:	4b37      	ldr	r3, [pc, #220]	; (800b608 <xTaskIncrementTick+0x15c>)
 800b52c:	f04f 32ff 	mov.w	r2, #4294967295
 800b530:	601a      	str	r2, [r3, #0]
					break;
 800b532:	e03f      	b.n	800b5b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b534:	4b31      	ldr	r3, [pc, #196]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b544:	693a      	ldr	r2, [r7, #16]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d203      	bcs.n	800b554 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b54c:	4a2e      	ldr	r2, [pc, #184]	; (800b608 <xTaskIncrementTick+0x15c>)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b552:	e02f      	b.n	800b5b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	3304      	adds	r3, #4
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe ff99 	bl	800a490 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b562:	2b00      	cmp	r3, #0
 800b564:	d004      	beq.n	800b570 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	3318      	adds	r3, #24
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fe ff90 	bl	800a490 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b574:	4b25      	ldr	r3, [pc, #148]	; (800b60c <xTaskIncrementTick+0x160>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d903      	bls.n	800b584 <xTaskIncrementTick+0xd8>
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b580:	4a22      	ldr	r2, [pc, #136]	; (800b60c <xTaskIncrementTick+0x160>)
 800b582:	6013      	str	r3, [r2, #0]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b588:	4613      	mov	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	4413      	add	r3, r2
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	4a1f      	ldr	r2, [pc, #124]	; (800b610 <xTaskIncrementTick+0x164>)
 800b592:	441a      	add	r2, r3
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	3304      	adds	r3, #4
 800b598:	4619      	mov	r1, r3
 800b59a:	4610      	mov	r0, r2
 800b59c:	f7fe ff1b 	bl	800a3d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a4:	4b1b      	ldr	r3, [pc, #108]	; (800b614 <xTaskIncrementTick+0x168>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d3b8      	bcc.n	800b520 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5b2:	e7b5      	b.n	800b520 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5b4:	4b17      	ldr	r3, [pc, #92]	; (800b614 <xTaskIncrementTick+0x168>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ba:	4915      	ldr	r1, [pc, #84]	; (800b610 <xTaskIncrementTick+0x164>)
 800b5bc:	4613      	mov	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	440b      	add	r3, r1
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d901      	bls.n	800b5d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b5d0:	4b11      	ldr	r3, [pc, #68]	; (800b618 <xTaskIncrementTick+0x16c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d007      	beq.n	800b5e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	617b      	str	r3, [r7, #20]
 800b5dc:	e004      	b.n	800b5e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b5de:	4b0f      	ldr	r3, [pc, #60]	; (800b61c <xTaskIncrementTick+0x170>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	4a0d      	ldr	r2, [pc, #52]	; (800b61c <xTaskIncrementTick+0x170>)
 800b5e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5e8:	697b      	ldr	r3, [r7, #20]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20001694 	.word	0x20001694
 800b5f8:	20001670 	.word	0x20001670
 800b5fc:	20001624 	.word	0x20001624
 800b600:	20001628 	.word	0x20001628
 800b604:	20001684 	.word	0x20001684
 800b608:	2000168c 	.word	0x2000168c
 800b60c:	20001674 	.word	0x20001674
 800b610:	2000119c 	.word	0x2000119c
 800b614:	20001198 	.word	0x20001198
 800b618:	20001680 	.word	0x20001680
 800b61c:	2000167c 	.word	0x2000167c

0800b620 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b626:	4b28      	ldr	r3, [pc, #160]	; (800b6c8 <vTaskSwitchContext+0xa8>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b62e:	4b27      	ldr	r3, [pc, #156]	; (800b6cc <vTaskSwitchContext+0xac>)
 800b630:	2201      	movs	r2, #1
 800b632:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b634:	e041      	b.n	800b6ba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b636:	4b25      	ldr	r3, [pc, #148]	; (800b6cc <vTaskSwitchContext+0xac>)
 800b638:	2200      	movs	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b63c:	4b24      	ldr	r3, [pc, #144]	; (800b6d0 <vTaskSwitchContext+0xb0>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	60fb      	str	r3, [r7, #12]
 800b642:	e010      	b.n	800b666 <vTaskSwitchContext+0x46>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10a      	bne.n	800b660 <vTaskSwitchContext+0x40>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	607b      	str	r3, [r7, #4]
}
 800b65c:	bf00      	nop
 800b65e:	e7fe      	b.n	800b65e <vTaskSwitchContext+0x3e>
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	3b01      	subs	r3, #1
 800b664:	60fb      	str	r3, [r7, #12]
 800b666:	491b      	ldr	r1, [pc, #108]	; (800b6d4 <vTaskSwitchContext+0xb4>)
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	4613      	mov	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	440b      	add	r3, r1
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d0e4      	beq.n	800b644 <vTaskSwitchContext+0x24>
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	4613      	mov	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4a13      	ldr	r2, [pc, #76]	; (800b6d4 <vTaskSwitchContext+0xb4>)
 800b686:	4413      	add	r3, r2
 800b688:	60bb      	str	r3, [r7, #8]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	605a      	str	r2, [r3, #4]
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	685a      	ldr	r2, [r3, #4]
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	3308      	adds	r3, #8
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d104      	bne.n	800b6aa <vTaskSwitchContext+0x8a>
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	605a      	str	r2, [r3, #4]
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	4a09      	ldr	r2, [pc, #36]	; (800b6d8 <vTaskSwitchContext+0xb8>)
 800b6b2:	6013      	str	r3, [r2, #0]
 800b6b4:	4a06      	ldr	r2, [pc, #24]	; (800b6d0 <vTaskSwitchContext+0xb0>)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6013      	str	r3, [r2, #0]
}
 800b6ba:	bf00      	nop
 800b6bc:	3714      	adds	r7, #20
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	20001694 	.word	0x20001694
 800b6cc:	20001680 	.word	0x20001680
 800b6d0:	20001674 	.word	0x20001674
 800b6d4:	2000119c 	.word	0x2000119c
 800b6d8:	20001198 	.word	0x20001198

0800b6dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10a      	bne.n	800b702 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f0:	f383 8811 	msr	BASEPRI, r3
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	60fb      	str	r3, [r7, #12]
}
 800b6fe:	bf00      	nop
 800b700:	e7fe      	b.n	800b700 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b702:	4b07      	ldr	r3, [pc, #28]	; (800b720 <vTaskPlaceOnEventList+0x44>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	3318      	adds	r3, #24
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7fe fe87 	bl	800a41e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b710:	2101      	movs	r1, #1
 800b712:	6838      	ldr	r0, [r7, #0]
 800b714:	f000 fa7c 	bl	800bc10 <prvAddCurrentTaskToDelayedList>
}
 800b718:	bf00      	nop
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	20001198 	.word	0x20001198

0800b724 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10a      	bne.n	800b74c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	617b      	str	r3, [r7, #20]
}
 800b748:	bf00      	nop
 800b74a:	e7fe      	b.n	800b74a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b74c:	4b0a      	ldr	r3, [pc, #40]	; (800b778 <vTaskPlaceOnEventListRestricted+0x54>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	3318      	adds	r3, #24
 800b752:	4619      	mov	r1, r3
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f7fe fe3e 	bl	800a3d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b760:	f04f 33ff 	mov.w	r3, #4294967295
 800b764:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b766:	6879      	ldr	r1, [r7, #4]
 800b768:	68b8      	ldr	r0, [r7, #8]
 800b76a:	f000 fa51 	bl	800bc10 <prvAddCurrentTaskToDelayedList>
	}
 800b76e:	bf00      	nop
 800b770:	3718      	adds	r7, #24
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	20001198 	.word	0x20001198

0800b77c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10a      	bne.n	800b7a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	60fb      	str	r3, [r7, #12]
}
 800b7a4:	bf00      	nop
 800b7a6:	e7fe      	b.n	800b7a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	3318      	adds	r3, #24
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fe fe6f 	bl	800a490 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7b2:	4b1e      	ldr	r3, [pc, #120]	; (800b82c <xTaskRemoveFromEventList+0xb0>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d11d      	bne.n	800b7f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	3304      	adds	r3, #4
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7fe fe66 	bl	800a490 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c8:	4b19      	ldr	r3, [pc, #100]	; (800b830 <xTaskRemoveFromEventList+0xb4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d903      	bls.n	800b7d8 <xTaskRemoveFromEventList+0x5c>
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	4a16      	ldr	r2, [pc, #88]	; (800b830 <xTaskRemoveFromEventList+0xb4>)
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7dc:	4613      	mov	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4a13      	ldr	r2, [pc, #76]	; (800b834 <xTaskRemoveFromEventList+0xb8>)
 800b7e6:	441a      	add	r2, r3
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	f7fe fdf1 	bl	800a3d6 <vListInsertEnd>
 800b7f4:	e005      	b.n	800b802 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	3318      	adds	r3, #24
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	480e      	ldr	r0, [pc, #56]	; (800b838 <xTaskRemoveFromEventList+0xbc>)
 800b7fe:	f7fe fdea 	bl	800a3d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b806:	4b0d      	ldr	r3, [pc, #52]	; (800b83c <xTaskRemoveFromEventList+0xc0>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d905      	bls.n	800b81c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b810:	2301      	movs	r3, #1
 800b812:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b814:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <xTaskRemoveFromEventList+0xc4>)
 800b816:	2201      	movs	r2, #1
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	e001      	b.n	800b820 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b81c:	2300      	movs	r3, #0
 800b81e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b820:	697b      	ldr	r3, [r7, #20]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3718      	adds	r7, #24
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	20001694 	.word	0x20001694
 800b830:	20001674 	.word	0x20001674
 800b834:	2000119c 	.word	0x2000119c
 800b838:	2000162c 	.word	0x2000162c
 800b83c:	20001198 	.word	0x20001198
 800b840:	20001680 	.word	0x20001680

0800b844 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b84c:	4b06      	ldr	r3, [pc, #24]	; (800b868 <vTaskInternalSetTimeOutState+0x24>)
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b854:	4b05      	ldr	r3, [pc, #20]	; (800b86c <vTaskInternalSetTimeOutState+0x28>)
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	605a      	str	r2, [r3, #4]
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	20001684 	.word	0x20001684
 800b86c:	20001670 	.word	0x20001670

0800b870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b088      	sub	sp, #32
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10a      	bne.n	800b896 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b884:	f383 8811 	msr	BASEPRI, r3
 800b888:	f3bf 8f6f 	isb	sy
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	613b      	str	r3, [r7, #16]
}
 800b892:	bf00      	nop
 800b894:	e7fe      	b.n	800b894 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10a      	bne.n	800b8b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	60fb      	str	r3, [r7, #12]
}
 800b8ae:	bf00      	nop
 800b8b0:	e7fe      	b.n	800b8b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b8b2:	f000 fe7f 	bl	800c5b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8b6:	4b1d      	ldr	r3, [pc, #116]	; (800b92c <xTaskCheckForTimeOut+0xbc>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	69ba      	ldr	r2, [r7, #24]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ce:	d102      	bne.n	800b8d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	61fb      	str	r3, [r7, #28]
 800b8d4:	e023      	b.n	800b91e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	4b15      	ldr	r3, [pc, #84]	; (800b930 <xTaskCheckForTimeOut+0xc0>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d007      	beq.n	800b8f2 <xTaskCheckForTimeOut+0x82>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	69ba      	ldr	r2, [r7, #24]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d302      	bcc.n	800b8f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	61fb      	str	r3, [r7, #28]
 800b8f0:	e015      	b.n	800b91e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d20b      	bcs.n	800b914 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	1ad2      	subs	r2, r2, r3
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f7ff ff9b 	bl	800b844 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b90e:	2300      	movs	r3, #0
 800b910:	61fb      	str	r3, [r7, #28]
 800b912:	e004      	b.n	800b91e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2200      	movs	r2, #0
 800b918:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b91a:	2301      	movs	r3, #1
 800b91c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b91e:	f000 fe79 	bl	800c614 <vPortExitCritical>

	return xReturn;
 800b922:	69fb      	ldr	r3, [r7, #28]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3720      	adds	r7, #32
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	20001670 	.word	0x20001670
 800b930:	20001684 	.word	0x20001684

0800b934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b934:	b480      	push	{r7}
 800b936:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b938:	4b03      	ldr	r3, [pc, #12]	; (800b948 <vTaskMissedYield+0x14>)
 800b93a:	2201      	movs	r2, #1
 800b93c:	601a      	str	r2, [r3, #0]
}
 800b93e:	bf00      	nop
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr
 800b948:	20001680 	.word	0x20001680

0800b94c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b954:	f000 f852 	bl	800b9fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b958:	4b06      	ldr	r3, [pc, #24]	; (800b974 <prvIdleTask+0x28>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d9f9      	bls.n	800b954 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b960:	4b05      	ldr	r3, [pc, #20]	; (800b978 <prvIdleTask+0x2c>)
 800b962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b966:	601a      	str	r2, [r3, #0]
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b970:	e7f0      	b.n	800b954 <prvIdleTask+0x8>
 800b972:	bf00      	nop
 800b974:	2000119c 	.word	0x2000119c
 800b978:	e000ed04 	.word	0xe000ed04

0800b97c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b982:	2300      	movs	r3, #0
 800b984:	607b      	str	r3, [r7, #4]
 800b986:	e00c      	b.n	800b9a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	4613      	mov	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4a12      	ldr	r2, [pc, #72]	; (800b9dc <prvInitialiseTaskLists+0x60>)
 800b994:	4413      	add	r3, r2
 800b996:	4618      	mov	r0, r3
 800b998:	f7fe fcf0 	bl	800a37c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	607b      	str	r3, [r7, #4]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b37      	cmp	r3, #55	; 0x37
 800b9a6:	d9ef      	bls.n	800b988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9a8:	480d      	ldr	r0, [pc, #52]	; (800b9e0 <prvInitialiseTaskLists+0x64>)
 800b9aa:	f7fe fce7 	bl	800a37c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9ae:	480d      	ldr	r0, [pc, #52]	; (800b9e4 <prvInitialiseTaskLists+0x68>)
 800b9b0:	f7fe fce4 	bl	800a37c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9b4:	480c      	ldr	r0, [pc, #48]	; (800b9e8 <prvInitialiseTaskLists+0x6c>)
 800b9b6:	f7fe fce1 	bl	800a37c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9ba:	480c      	ldr	r0, [pc, #48]	; (800b9ec <prvInitialiseTaskLists+0x70>)
 800b9bc:	f7fe fcde 	bl	800a37c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9c0:	480b      	ldr	r0, [pc, #44]	; (800b9f0 <prvInitialiseTaskLists+0x74>)
 800b9c2:	f7fe fcdb 	bl	800a37c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9c6:	4b0b      	ldr	r3, [pc, #44]	; (800b9f4 <prvInitialiseTaskLists+0x78>)
 800b9c8:	4a05      	ldr	r2, [pc, #20]	; (800b9e0 <prvInitialiseTaskLists+0x64>)
 800b9ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9cc:	4b0a      	ldr	r3, [pc, #40]	; (800b9f8 <prvInitialiseTaskLists+0x7c>)
 800b9ce:	4a05      	ldr	r2, [pc, #20]	; (800b9e4 <prvInitialiseTaskLists+0x68>)
 800b9d0:	601a      	str	r2, [r3, #0]
}
 800b9d2:	bf00      	nop
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	2000119c 	.word	0x2000119c
 800b9e0:	200015fc 	.word	0x200015fc
 800b9e4:	20001610 	.word	0x20001610
 800b9e8:	2000162c 	.word	0x2000162c
 800b9ec:	20001640 	.word	0x20001640
 800b9f0:	20001658 	.word	0x20001658
 800b9f4:	20001624 	.word	0x20001624
 800b9f8:	20001628 	.word	0x20001628

0800b9fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba02:	e019      	b.n	800ba38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba04:	f000 fdd6 	bl	800c5b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba08:	4b10      	ldr	r3, [pc, #64]	; (800ba4c <prvCheckTasksWaitingTermination+0x50>)
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3304      	adds	r3, #4
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fe fd3b 	bl	800a490 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba1a:	4b0d      	ldr	r3, [pc, #52]	; (800ba50 <prvCheckTasksWaitingTermination+0x54>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	4a0b      	ldr	r2, [pc, #44]	; (800ba50 <prvCheckTasksWaitingTermination+0x54>)
 800ba22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba24:	4b0b      	ldr	r3, [pc, #44]	; (800ba54 <prvCheckTasksWaitingTermination+0x58>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	4a0a      	ldr	r2, [pc, #40]	; (800ba54 <prvCheckTasksWaitingTermination+0x58>)
 800ba2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba2e:	f000 fdf1 	bl	800c614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f810 	bl	800ba58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba38:	4b06      	ldr	r3, [pc, #24]	; (800ba54 <prvCheckTasksWaitingTermination+0x58>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1e1      	bne.n	800ba04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	20001640 	.word	0x20001640
 800ba50:	2000166c 	.word	0x2000166c
 800ba54:	20001654 	.word	0x20001654

0800ba58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d108      	bne.n	800ba7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 ff8e 	bl	800c990 <vPortFree>
				vPortFree( pxTCB );
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 ff8b 	bl	800c990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba7a:	e018      	b.n	800baae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d103      	bne.n	800ba8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 ff82 	bl	800c990 <vPortFree>
	}
 800ba8c:	e00f      	b.n	800baae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	d00a      	beq.n	800baae <prvDeleteTCB+0x56>
	__asm volatile
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	60fb      	str	r3, [r7, #12]
}
 800baaa:	bf00      	nop
 800baac:	e7fe      	b.n	800baac <prvDeleteTCB+0x54>
	}
 800baae:	bf00      	nop
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800babe:	4b0c      	ldr	r3, [pc, #48]	; (800baf0 <prvResetNextTaskUnblockTime+0x38>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d104      	bne.n	800bad2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bac8:	4b0a      	ldr	r3, [pc, #40]	; (800baf4 <prvResetNextTaskUnblockTime+0x3c>)
 800baca:	f04f 32ff 	mov.w	r2, #4294967295
 800bace:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bad0:	e008      	b.n	800bae4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bad2:	4b07      	ldr	r3, [pc, #28]	; (800baf0 <prvResetNextTaskUnblockTime+0x38>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	4a04      	ldr	r2, [pc, #16]	; (800baf4 <prvResetNextTaskUnblockTime+0x3c>)
 800bae2:	6013      	str	r3, [r2, #0]
}
 800bae4:	bf00      	nop
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	20001624 	.word	0x20001624
 800baf4:	2000168c 	.word	0x2000168c

0800baf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bafe:	4b0b      	ldr	r3, [pc, #44]	; (800bb2c <xTaskGetSchedulerState+0x34>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d102      	bne.n	800bb0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb06:	2301      	movs	r3, #1
 800bb08:	607b      	str	r3, [r7, #4]
 800bb0a:	e008      	b.n	800bb1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb0c:	4b08      	ldr	r3, [pc, #32]	; (800bb30 <xTaskGetSchedulerState+0x38>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d102      	bne.n	800bb1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb14:	2302      	movs	r3, #2
 800bb16:	607b      	str	r3, [r7, #4]
 800bb18:	e001      	b.n	800bb1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb1e:	687b      	ldr	r3, [r7, #4]
	}
 800bb20:	4618      	mov	r0, r3
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr
 800bb2c:	20001678 	.word	0x20001678
 800bb30:	20001694 	.word	0x20001694

0800bb34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb40:	2300      	movs	r3, #0
 800bb42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d056      	beq.n	800bbf8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb4a:	4b2e      	ldr	r3, [pc, #184]	; (800bc04 <xTaskPriorityDisinherit+0xd0>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	693a      	ldr	r2, [r7, #16]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d00a      	beq.n	800bb6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	60fb      	str	r3, [r7, #12]
}
 800bb66:	bf00      	nop
 800bb68:	e7fe      	b.n	800bb68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d10a      	bne.n	800bb88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	60bb      	str	r3, [r7, #8]
}
 800bb84:	bf00      	nop
 800bb86:	e7fe      	b.n	800bb86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb8c:	1e5a      	subs	r2, r3, #1
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d02c      	beq.n	800bbf8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d128      	bne.n	800bbf8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	3304      	adds	r3, #4
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fe fc70 	bl	800a490 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc8:	4b0f      	ldr	r3, [pc, #60]	; (800bc08 <xTaskPriorityDisinherit+0xd4>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d903      	bls.n	800bbd8 <xTaskPriorityDisinherit+0xa4>
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd4:	4a0c      	ldr	r2, [pc, #48]	; (800bc08 <xTaskPriorityDisinherit+0xd4>)
 800bbd6:	6013      	str	r3, [r2, #0]
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbdc:	4613      	mov	r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	4413      	add	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4a09      	ldr	r2, [pc, #36]	; (800bc0c <xTaskPriorityDisinherit+0xd8>)
 800bbe6:	441a      	add	r2, r3
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	3304      	adds	r3, #4
 800bbec:	4619      	mov	r1, r3
 800bbee:	4610      	mov	r0, r2
 800bbf0:	f7fe fbf1 	bl	800a3d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbf8:	697b      	ldr	r3, [r7, #20]
	}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3718      	adds	r7, #24
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	20001198 	.word	0x20001198
 800bc08:	20001674 	.word	0x20001674
 800bc0c:	2000119c 	.word	0x2000119c

0800bc10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc1a:	4b21      	ldr	r3, [pc, #132]	; (800bca0 <prvAddCurrentTaskToDelayedList+0x90>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc20:	4b20      	ldr	r3, [pc, #128]	; (800bca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	3304      	adds	r3, #4
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fe fc32 	bl	800a490 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc32:	d10a      	bne.n	800bc4a <prvAddCurrentTaskToDelayedList+0x3a>
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d007      	beq.n	800bc4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc3a:	4b1a      	ldr	r3, [pc, #104]	; (800bca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3304      	adds	r3, #4
 800bc40:	4619      	mov	r1, r3
 800bc42:	4819      	ldr	r0, [pc, #100]	; (800bca8 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc44:	f7fe fbc7 	bl	800a3d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc48:	e026      	b.n	800bc98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4413      	add	r3, r2
 800bc50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc52:	4b14      	ldr	r3, [pc, #80]	; (800bca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc5a:	68ba      	ldr	r2, [r7, #8]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d209      	bcs.n	800bc76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc62:	4b12      	ldr	r3, [pc, #72]	; (800bcac <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3304      	adds	r3, #4
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	4610      	mov	r0, r2
 800bc70:	f7fe fbd5 	bl	800a41e <vListInsert>
}
 800bc74:	e010      	b.n	800bc98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc76:	4b0e      	ldr	r3, [pc, #56]	; (800bcb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	4b0a      	ldr	r3, [pc, #40]	; (800bca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	4619      	mov	r1, r3
 800bc82:	4610      	mov	r0, r2
 800bc84:	f7fe fbcb 	bl	800a41e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc88:	4b0a      	ldr	r3, [pc, #40]	; (800bcb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68ba      	ldr	r2, [r7, #8]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d202      	bcs.n	800bc98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc92:	4a08      	ldr	r2, [pc, #32]	; (800bcb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	6013      	str	r3, [r2, #0]
}
 800bc98:	bf00      	nop
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	20001670 	.word	0x20001670
 800bca4:	20001198 	.word	0x20001198
 800bca8:	20001658 	.word	0x20001658
 800bcac:	20001628 	.word	0x20001628
 800bcb0:	20001624 	.word	0x20001624
 800bcb4:	2000168c 	.word	0x2000168c

0800bcb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b08a      	sub	sp, #40	; 0x28
 800bcbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bcc2:	f000 fb07 	bl	800c2d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bcc6:	4b1c      	ldr	r3, [pc, #112]	; (800bd38 <xTimerCreateTimerTask+0x80>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d021      	beq.n	800bd12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bcd6:	1d3a      	adds	r2, r7, #4
 800bcd8:	f107 0108 	add.w	r1, r7, #8
 800bcdc:	f107 030c 	add.w	r3, r7, #12
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7fe fb31 	bl	800a348 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bce6:	6879      	ldr	r1, [r7, #4]
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	9202      	str	r2, [sp, #8]
 800bcee:	9301      	str	r3, [sp, #4]
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	460a      	mov	r2, r1
 800bcf8:	4910      	ldr	r1, [pc, #64]	; (800bd3c <xTimerCreateTimerTask+0x84>)
 800bcfa:	4811      	ldr	r0, [pc, #68]	; (800bd40 <xTimerCreateTimerTask+0x88>)
 800bcfc:	f7ff f8de 	bl	800aebc <xTaskCreateStatic>
 800bd00:	4603      	mov	r3, r0
 800bd02:	4a10      	ldr	r2, [pc, #64]	; (800bd44 <xTimerCreateTimerTask+0x8c>)
 800bd04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd06:	4b0f      	ldr	r3, [pc, #60]	; (800bd44 <xTimerCreateTimerTask+0x8c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d001      	beq.n	800bd12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d10a      	bne.n	800bd2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1c:	f383 8811 	msr	BASEPRI, r3
 800bd20:	f3bf 8f6f 	isb	sy
 800bd24:	f3bf 8f4f 	dsb	sy
 800bd28:	613b      	str	r3, [r7, #16]
}
 800bd2a:	bf00      	nop
 800bd2c:	e7fe      	b.n	800bd2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd2e:	697b      	ldr	r3, [r7, #20]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3718      	adds	r7, #24
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	200016c8 	.word	0x200016c8
 800bd3c:	08013954 	.word	0x08013954
 800bd40:	0800be7d 	.word	0x0800be7d
 800bd44:	200016cc 	.word	0x200016cc

0800bd48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b08a      	sub	sp, #40	; 0x28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
 800bd54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd56:	2300      	movs	r3, #0
 800bd58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10a      	bne.n	800bd76 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	623b      	str	r3, [r7, #32]
}
 800bd72:	bf00      	nop
 800bd74:	e7fe      	b.n	800bd74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd76:	4b1a      	ldr	r3, [pc, #104]	; (800bde0 <xTimerGenericCommand+0x98>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d02a      	beq.n	800bdd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	2b05      	cmp	r3, #5
 800bd8e:	dc18      	bgt.n	800bdc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd90:	f7ff feb2 	bl	800baf8 <xTaskGetSchedulerState>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d109      	bne.n	800bdae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd9a:	4b11      	ldr	r3, [pc, #68]	; (800bde0 <xTimerGenericCommand+0x98>)
 800bd9c:	6818      	ldr	r0, [r3, #0]
 800bd9e:	f107 0110 	add.w	r1, r7, #16
 800bda2:	2300      	movs	r3, #0
 800bda4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bda6:	f7fe fca1 	bl	800a6ec <xQueueGenericSend>
 800bdaa:	6278      	str	r0, [r7, #36]	; 0x24
 800bdac:	e012      	b.n	800bdd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bdae:	4b0c      	ldr	r3, [pc, #48]	; (800bde0 <xTimerGenericCommand+0x98>)
 800bdb0:	6818      	ldr	r0, [r3, #0]
 800bdb2:	f107 0110 	add.w	r1, r7, #16
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f7fe fc97 	bl	800a6ec <xQueueGenericSend>
 800bdbe:	6278      	str	r0, [r7, #36]	; 0x24
 800bdc0:	e008      	b.n	800bdd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bdc2:	4b07      	ldr	r3, [pc, #28]	; (800bde0 <xTimerGenericCommand+0x98>)
 800bdc4:	6818      	ldr	r0, [r3, #0]
 800bdc6:	f107 0110 	add.w	r1, r7, #16
 800bdca:	2300      	movs	r3, #0
 800bdcc:	683a      	ldr	r2, [r7, #0]
 800bdce:	f7fe fd8b 	bl	800a8e8 <xQueueGenericSendFromISR>
 800bdd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3728      	adds	r7, #40	; 0x28
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	200016c8 	.word	0x200016c8

0800bde4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b088      	sub	sp, #32
 800bde8:	af02      	add	r7, sp, #8
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdee:	4b22      	ldr	r3, [pc, #136]	; (800be78 <prvProcessExpiredTimer+0x94>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	3304      	adds	r3, #4
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7fe fb47 	bl	800a490 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be08:	f003 0304 	and.w	r3, r3, #4
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d022      	beq.n	800be56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	699a      	ldr	r2, [r3, #24]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	18d1      	adds	r1, r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	6978      	ldr	r0, [r7, #20]
 800be1e:	f000 f8d1 	bl	800bfc4 <prvInsertTimerInActiveList>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d01f      	beq.n	800be68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be28:	2300      	movs	r3, #0
 800be2a:	9300      	str	r3, [sp, #0]
 800be2c:	2300      	movs	r3, #0
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	2100      	movs	r1, #0
 800be32:	6978      	ldr	r0, [r7, #20]
 800be34:	f7ff ff88 	bl	800bd48 <xTimerGenericCommand>
 800be38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d113      	bne.n	800be68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800be40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	60fb      	str	r3, [r7, #12]
}
 800be52:	bf00      	nop
 800be54:	e7fe      	b.n	800be54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be5c:	f023 0301 	bic.w	r3, r3, #1
 800be60:	b2da      	uxtb	r2, r3
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	6a1b      	ldr	r3, [r3, #32]
 800be6c:	6978      	ldr	r0, [r7, #20]
 800be6e:	4798      	blx	r3
}
 800be70:	bf00      	nop
 800be72:	3718      	adds	r7, #24
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	200016c0 	.word	0x200016c0

0800be7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be84:	f107 0308 	add.w	r3, r7, #8
 800be88:	4618      	mov	r0, r3
 800be8a:	f000 f857 	bl	800bf3c <prvGetNextExpireTime>
 800be8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	4619      	mov	r1, r3
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f000 f803 	bl	800bea0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be9a:	f000 f8d5 	bl	800c048 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be9e:	e7f1      	b.n	800be84 <prvTimerTask+0x8>

0800bea0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800beaa:	f7ff fa43 	bl	800b334 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800beae:	f107 0308 	add.w	r3, r7, #8
 800beb2:	4618      	mov	r0, r3
 800beb4:	f000 f866 	bl	800bf84 <prvSampleTimeNow>
 800beb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d130      	bne.n	800bf22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10a      	bne.n	800bedc <prvProcessTimerOrBlockTask+0x3c>
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	429a      	cmp	r2, r3
 800becc:	d806      	bhi.n	800bedc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bece:	f7ff fa3f 	bl	800b350 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bed2:	68f9      	ldr	r1, [r7, #12]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff ff85 	bl	800bde4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800beda:	e024      	b.n	800bf26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d008      	beq.n	800bef4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bee2:	4b13      	ldr	r3, [pc, #76]	; (800bf30 <prvProcessTimerOrBlockTask+0x90>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <prvProcessTimerOrBlockTask+0x50>
 800beec:	2301      	movs	r3, #1
 800beee:	e000      	b.n	800bef2 <prvProcessTimerOrBlockTask+0x52>
 800bef0:	2300      	movs	r3, #0
 800bef2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bef4:	4b0f      	ldr	r3, [pc, #60]	; (800bf34 <prvProcessTimerOrBlockTask+0x94>)
 800bef6:	6818      	ldr	r0, [r3, #0]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	683a      	ldr	r2, [r7, #0]
 800bf00:	4619      	mov	r1, r3
 800bf02:	f7fe ffa7 	bl	800ae54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf06:	f7ff fa23 	bl	800b350 <xTaskResumeAll>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d10a      	bne.n	800bf26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf10:	4b09      	ldr	r3, [pc, #36]	; (800bf38 <prvProcessTimerOrBlockTask+0x98>)
 800bf12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf16:	601a      	str	r2, [r3, #0]
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	f3bf 8f6f 	isb	sy
}
 800bf20:	e001      	b.n	800bf26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf22:	f7ff fa15 	bl	800b350 <xTaskResumeAll>
}
 800bf26:	bf00      	nop
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	200016c4 	.word	0x200016c4
 800bf34:	200016c8 	.word	0x200016c8
 800bf38:	e000ed04 	.word	0xe000ed04

0800bf3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf44:	4b0e      	ldr	r3, [pc, #56]	; (800bf80 <prvGetNextExpireTime+0x44>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <prvGetNextExpireTime+0x16>
 800bf4e:	2201      	movs	r2, #1
 800bf50:	e000      	b.n	800bf54 <prvGetNextExpireTime+0x18>
 800bf52:	2200      	movs	r2, #0
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d105      	bne.n	800bf6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf60:	4b07      	ldr	r3, [pc, #28]	; (800bf80 <prvGetNextExpireTime+0x44>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	60fb      	str	r3, [r7, #12]
 800bf6a:	e001      	b.n	800bf70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf70:	68fb      	ldr	r3, [r7, #12]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	200016c0 	.word	0x200016c0

0800bf84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf8c:	f7ff fa7e 	bl	800b48c <xTaskGetTickCount>
 800bf90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf92:	4b0b      	ldr	r3, [pc, #44]	; (800bfc0 <prvSampleTimeNow+0x3c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d205      	bcs.n	800bfa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf9c:	f000 f936 	bl	800c20c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	601a      	str	r2, [r3, #0]
 800bfa6:	e002      	b.n	800bfae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfae:	4a04      	ldr	r2, [pc, #16]	; (800bfc0 <prvSampleTimeNow+0x3c>)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	200016d0 	.word	0x200016d0

0800bfc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	607a      	str	r2, [r7, #4]
 800bfd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d812      	bhi.n	800c010 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	1ad2      	subs	r2, r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	699b      	ldr	r3, [r3, #24]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d302      	bcc.n	800bffe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bff8:	2301      	movs	r3, #1
 800bffa:	617b      	str	r3, [r7, #20]
 800bffc:	e01b      	b.n	800c036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bffe:	4b10      	ldr	r3, [pc, #64]	; (800c040 <prvInsertTimerInActiveList+0x7c>)
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3304      	adds	r3, #4
 800c006:	4619      	mov	r1, r3
 800c008:	4610      	mov	r0, r2
 800c00a:	f7fe fa08 	bl	800a41e <vListInsert>
 800c00e:	e012      	b.n	800c036 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	429a      	cmp	r2, r3
 800c016:	d206      	bcs.n	800c026 <prvInsertTimerInActiveList+0x62>
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d302      	bcc.n	800c026 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c020:	2301      	movs	r3, #1
 800c022:	617b      	str	r3, [r7, #20]
 800c024:	e007      	b.n	800c036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c026:	4b07      	ldr	r3, [pc, #28]	; (800c044 <prvInsertTimerInActiveList+0x80>)
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	3304      	adds	r3, #4
 800c02e:	4619      	mov	r1, r3
 800c030:	4610      	mov	r0, r2
 800c032:	f7fe f9f4 	bl	800a41e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c036:	697b      	ldr	r3, [r7, #20]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3718      	adds	r7, #24
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	200016c4 	.word	0x200016c4
 800c044:	200016c0 	.word	0x200016c0

0800c048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b08e      	sub	sp, #56	; 0x38
 800c04c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c04e:	e0ca      	b.n	800c1e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	da18      	bge.n	800c088 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c056:	1d3b      	adds	r3, r7, #4
 800c058:	3304      	adds	r3, #4
 800c05a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10a      	bne.n	800c078 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	61fb      	str	r3, [r7, #28]
}
 800c074:	bf00      	nop
 800c076:	e7fe      	b.n	800c076 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c07e:	6850      	ldr	r0, [r2, #4]
 800c080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c082:	6892      	ldr	r2, [r2, #8]
 800c084:	4611      	mov	r1, r2
 800c086:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f2c0 80aa 	blt.w	800c1e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c096:	695b      	ldr	r3, [r3, #20]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d004      	beq.n	800c0a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09e:	3304      	adds	r3, #4
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7fe f9f5 	bl	800a490 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0a6:	463b      	mov	r3, r7
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7ff ff6b 	bl	800bf84 <prvSampleTimeNow>
 800c0ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2b09      	cmp	r3, #9
 800c0b4:	f200 8097 	bhi.w	800c1e6 <prvProcessReceivedCommands+0x19e>
 800c0b8:	a201      	add	r2, pc, #4	; (adr r2, 800c0c0 <prvProcessReceivedCommands+0x78>)
 800c0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0be:	bf00      	nop
 800c0c0:	0800c0e9 	.word	0x0800c0e9
 800c0c4:	0800c0e9 	.word	0x0800c0e9
 800c0c8:	0800c0e9 	.word	0x0800c0e9
 800c0cc:	0800c15d 	.word	0x0800c15d
 800c0d0:	0800c171 	.word	0x0800c171
 800c0d4:	0800c1bb 	.word	0x0800c1bb
 800c0d8:	0800c0e9 	.word	0x0800c0e9
 800c0dc:	0800c0e9 	.word	0x0800c0e9
 800c0e0:	0800c15d 	.word	0x0800c15d
 800c0e4:	0800c171 	.word	0x0800c171
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0ee:	f043 0301 	orr.w	r3, r3, #1
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c0fa:	68ba      	ldr	r2, [r7, #8]
 800c0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fe:	699b      	ldr	r3, [r3, #24]
 800c100:	18d1      	adds	r1, r2, r3
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c108:	f7ff ff5c 	bl	800bfc4 <prvInsertTimerInActiveList>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d069      	beq.n	800c1e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c114:	6a1b      	ldr	r3, [r3, #32]
 800c116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c118:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c120:	f003 0304 	and.w	r3, r3, #4
 800c124:	2b00      	cmp	r3, #0
 800c126:	d05e      	beq.n	800c1e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	699b      	ldr	r3, [r3, #24]
 800c12e:	441a      	add	r2, r3
 800c130:	2300      	movs	r3, #0
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	2300      	movs	r3, #0
 800c136:	2100      	movs	r1, #0
 800c138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c13a:	f7ff fe05 	bl	800bd48 <xTimerGenericCommand>
 800c13e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c140:	6a3b      	ldr	r3, [r7, #32]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d14f      	bne.n	800c1e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14a:	f383 8811 	msr	BASEPRI, r3
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f3bf 8f4f 	dsb	sy
 800c156:	61bb      	str	r3, [r7, #24]
}
 800c158:	bf00      	nop
 800c15a:	e7fe      	b.n	800c15a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c162:	f023 0301 	bic.w	r3, r3, #1
 800c166:	b2da      	uxtb	r2, r3
 800c168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c16e:	e03a      	b.n	800c1e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c176:	f043 0301 	orr.w	r3, r3, #1
 800c17a:	b2da      	uxtb	r2, r3
 800c17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c186:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	699b      	ldr	r3, [r3, #24]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d10a      	bne.n	800c1a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	617b      	str	r3, [r7, #20]
}
 800c1a2:	bf00      	nop
 800c1a4:	e7fe      	b.n	800c1a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a8:	699a      	ldr	r2, [r3, #24]
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ac:	18d1      	adds	r1, r2, r3
 800c1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1b4:	f7ff ff06 	bl	800bfc4 <prvInsertTimerInActiveList>
					break;
 800c1b8:	e015      	b.n	800c1e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1c0:	f003 0302 	and.w	r3, r3, #2
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d103      	bne.n	800c1d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c1c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ca:	f000 fbe1 	bl	800c990 <vPortFree>
 800c1ce:	e00a      	b.n	800c1e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1d6:	f023 0301 	bic.w	r3, r3, #1
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c1e2:	e000      	b.n	800c1e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c1e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1e6:	4b08      	ldr	r3, [pc, #32]	; (800c208 <prvProcessReceivedCommands+0x1c0>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	1d39      	adds	r1, r7, #4
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe fc16 	bl	800aa20 <xQueueReceive>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f47f af2a 	bne.w	800c050 <prvProcessReceivedCommands+0x8>
	}
}
 800c1fc:	bf00      	nop
 800c1fe:	bf00      	nop
 800c200:	3730      	adds	r7, #48	; 0x30
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	200016c8 	.word	0x200016c8

0800c20c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b088      	sub	sp, #32
 800c210:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c212:	e048      	b.n	800c2a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c214:	4b2d      	ldr	r3, [pc, #180]	; (800c2cc <prvSwitchTimerLists+0xc0>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c21e:	4b2b      	ldr	r3, [pc, #172]	; (800c2cc <prvSwitchTimerLists+0xc0>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	3304      	adds	r3, #4
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fe f92f 	bl	800a490 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6a1b      	ldr	r3, [r3, #32]
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c240:	f003 0304 	and.w	r3, r3, #4
 800c244:	2b00      	cmp	r3, #0
 800c246:	d02e      	beq.n	800c2a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	693a      	ldr	r2, [r7, #16]
 800c24e:	4413      	add	r3, r2
 800c250:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c252:	68ba      	ldr	r2, [r7, #8]
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	429a      	cmp	r2, r3
 800c258:	d90e      	bls.n	800c278 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c266:	4b19      	ldr	r3, [pc, #100]	; (800c2cc <prvSwitchTimerLists+0xc0>)
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	3304      	adds	r3, #4
 800c26e:	4619      	mov	r1, r3
 800c270:	4610      	mov	r0, r2
 800c272:	f7fe f8d4 	bl	800a41e <vListInsert>
 800c276:	e016      	b.n	800c2a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c278:	2300      	movs	r3, #0
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	2300      	movs	r3, #0
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	2100      	movs	r1, #0
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	f7ff fd60 	bl	800bd48 <xTimerGenericCommand>
 800c288:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10a      	bne.n	800c2a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	603b      	str	r3, [r7, #0]
}
 800c2a2:	bf00      	nop
 800c2a4:	e7fe      	b.n	800c2a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2a6:	4b09      	ldr	r3, [pc, #36]	; (800c2cc <prvSwitchTimerLists+0xc0>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1b1      	bne.n	800c214 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2b0:	4b06      	ldr	r3, [pc, #24]	; (800c2cc <prvSwitchTimerLists+0xc0>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2b6:	4b06      	ldr	r3, [pc, #24]	; (800c2d0 <prvSwitchTimerLists+0xc4>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a04      	ldr	r2, [pc, #16]	; (800c2cc <prvSwitchTimerLists+0xc0>)
 800c2bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2be:	4a04      	ldr	r2, [pc, #16]	; (800c2d0 <prvSwitchTimerLists+0xc4>)
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	6013      	str	r3, [r2, #0]
}
 800c2c4:	bf00      	nop
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	200016c0 	.word	0x200016c0
 800c2d0:	200016c4 	.word	0x200016c4

0800c2d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c2da:	f000 f96b 	bl	800c5b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c2de:	4b15      	ldr	r3, [pc, #84]	; (800c334 <prvCheckForValidListAndQueue+0x60>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d120      	bne.n	800c328 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c2e6:	4814      	ldr	r0, [pc, #80]	; (800c338 <prvCheckForValidListAndQueue+0x64>)
 800c2e8:	f7fe f848 	bl	800a37c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c2ec:	4813      	ldr	r0, [pc, #76]	; (800c33c <prvCheckForValidListAndQueue+0x68>)
 800c2ee:	f7fe f845 	bl	800a37c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c2f2:	4b13      	ldr	r3, [pc, #76]	; (800c340 <prvCheckForValidListAndQueue+0x6c>)
 800c2f4:	4a10      	ldr	r2, [pc, #64]	; (800c338 <prvCheckForValidListAndQueue+0x64>)
 800c2f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2f8:	4b12      	ldr	r3, [pc, #72]	; (800c344 <prvCheckForValidListAndQueue+0x70>)
 800c2fa:	4a10      	ldr	r2, [pc, #64]	; (800c33c <prvCheckForValidListAndQueue+0x68>)
 800c2fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2fe:	2300      	movs	r3, #0
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	4b11      	ldr	r3, [pc, #68]	; (800c348 <prvCheckForValidListAndQueue+0x74>)
 800c304:	4a11      	ldr	r2, [pc, #68]	; (800c34c <prvCheckForValidListAndQueue+0x78>)
 800c306:	2110      	movs	r1, #16
 800c308:	200a      	movs	r0, #10
 800c30a:	f7fe f953 	bl	800a5b4 <xQueueGenericCreateStatic>
 800c30e:	4603      	mov	r3, r0
 800c310:	4a08      	ldr	r2, [pc, #32]	; (800c334 <prvCheckForValidListAndQueue+0x60>)
 800c312:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c314:	4b07      	ldr	r3, [pc, #28]	; (800c334 <prvCheckForValidListAndQueue+0x60>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d005      	beq.n	800c328 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c31c:	4b05      	ldr	r3, [pc, #20]	; (800c334 <prvCheckForValidListAndQueue+0x60>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	490b      	ldr	r1, [pc, #44]	; (800c350 <prvCheckForValidListAndQueue+0x7c>)
 800c322:	4618      	mov	r0, r3
 800c324:	f7fe fd6c 	bl	800ae00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c328:	f000 f974 	bl	800c614 <vPortExitCritical>
}
 800c32c:	bf00      	nop
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	200016c8 	.word	0x200016c8
 800c338:	20001698 	.word	0x20001698
 800c33c:	200016ac 	.word	0x200016ac
 800c340:	200016c0 	.word	0x200016c0
 800c344:	200016c4 	.word	0x200016c4
 800c348:	20001774 	.word	0x20001774
 800c34c:	200016d4 	.word	0x200016d4
 800c350:	0801395c 	.word	0x0801395c

0800c354 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3b04      	subs	r3, #4
 800c364:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c36c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3b04      	subs	r3, #4
 800c372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	f023 0201 	bic.w	r2, r3, #1
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	3b04      	subs	r3, #4
 800c382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c384:	4a0c      	ldr	r2, [pc, #48]	; (800c3b8 <pxPortInitialiseStack+0x64>)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3b14      	subs	r3, #20
 800c38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3b04      	subs	r3, #4
 800c39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f06f 0202 	mvn.w	r2, #2
 800c3a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	3b20      	subs	r3, #32
 800c3a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3714      	adds	r7, #20
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr
 800c3b8:	0800c3bd 	.word	0x0800c3bd

0800c3bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3c6:	4b12      	ldr	r3, [pc, #72]	; (800c410 <prvTaskExitError+0x54>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ce:	d00a      	beq.n	800c3e6 <prvTaskExitError+0x2a>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	60fb      	str	r3, [r7, #12]
}
 800c3e2:	bf00      	nop
 800c3e4:	e7fe      	b.n	800c3e4 <prvTaskExitError+0x28>
	__asm volatile
 800c3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	60bb      	str	r3, [r7, #8]
}
 800c3f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3fa:	bf00      	nop
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0fc      	beq.n	800c3fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c402:	bf00      	nop
 800c404:	bf00      	nop
 800c406:	3714      	adds	r7, #20
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	200000f4 	.word	0x200000f4
	...

0800c420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c420:	4b07      	ldr	r3, [pc, #28]	; (800c440 <pxCurrentTCBConst2>)
 800c422:	6819      	ldr	r1, [r3, #0]
 800c424:	6808      	ldr	r0, [r1, #0]
 800c426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42a:	f380 8809 	msr	PSP, r0
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f04f 0000 	mov.w	r0, #0
 800c436:	f380 8811 	msr	BASEPRI, r0
 800c43a:	4770      	bx	lr
 800c43c:	f3af 8000 	nop.w

0800c440 <pxCurrentTCBConst2>:
 800c440:	20001198 	.word	0x20001198
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop

0800c448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c448:	4808      	ldr	r0, [pc, #32]	; (800c46c <prvPortStartFirstTask+0x24>)
 800c44a:	6800      	ldr	r0, [r0, #0]
 800c44c:	6800      	ldr	r0, [r0, #0]
 800c44e:	f380 8808 	msr	MSP, r0
 800c452:	f04f 0000 	mov.w	r0, #0
 800c456:	f380 8814 	msr	CONTROL, r0
 800c45a:	b662      	cpsie	i
 800c45c:	b661      	cpsie	f
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	df00      	svc	0
 800c468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c46a:	bf00      	nop
 800c46c:	e000ed08 	.word	0xe000ed08

0800c470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b086      	sub	sp, #24
 800c474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c476:	4b46      	ldr	r3, [pc, #280]	; (800c590 <xPortStartScheduler+0x120>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a46      	ldr	r2, [pc, #280]	; (800c594 <xPortStartScheduler+0x124>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d10a      	bne.n	800c496 <xPortStartScheduler+0x26>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	613b      	str	r3, [r7, #16]
}
 800c492:	bf00      	nop
 800c494:	e7fe      	b.n	800c494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c496:	4b3e      	ldr	r3, [pc, #248]	; (800c590 <xPortStartScheduler+0x120>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a3f      	ldr	r2, [pc, #252]	; (800c598 <xPortStartScheduler+0x128>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d10a      	bne.n	800c4b6 <xPortStartScheduler+0x46>
	__asm volatile
 800c4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	60fb      	str	r3, [r7, #12]
}
 800c4b2:	bf00      	nop
 800c4b4:	e7fe      	b.n	800c4b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4b6:	4b39      	ldr	r3, [pc, #228]	; (800c59c <xPortStartScheduler+0x12c>)
 800c4b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	22ff      	movs	r2, #255	; 0xff
 800c4c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4d0:	78fb      	ldrb	r3, [r7, #3]
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c4d8:	b2da      	uxtb	r2, r3
 800c4da:	4b31      	ldr	r3, [pc, #196]	; (800c5a0 <xPortStartScheduler+0x130>)
 800c4dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4de:	4b31      	ldr	r3, [pc, #196]	; (800c5a4 <xPortStartScheduler+0x134>)
 800c4e0:	2207      	movs	r2, #7
 800c4e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4e4:	e009      	b.n	800c4fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c4e6:	4b2f      	ldr	r3, [pc, #188]	; (800c5a4 <xPortStartScheduler+0x134>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	4a2d      	ldr	r2, [pc, #180]	; (800c5a4 <xPortStartScheduler+0x134>)
 800c4ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4f0:	78fb      	ldrb	r3, [r7, #3]
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	005b      	lsls	r3, r3, #1
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4fa:	78fb      	ldrb	r3, [r7, #3]
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c502:	2b80      	cmp	r3, #128	; 0x80
 800c504:	d0ef      	beq.n	800c4e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c506:	4b27      	ldr	r3, [pc, #156]	; (800c5a4 <xPortStartScheduler+0x134>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f1c3 0307 	rsb	r3, r3, #7
 800c50e:	2b04      	cmp	r3, #4
 800c510:	d00a      	beq.n	800c528 <xPortStartScheduler+0xb8>
	__asm volatile
 800c512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	60bb      	str	r3, [r7, #8]
}
 800c524:	bf00      	nop
 800c526:	e7fe      	b.n	800c526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c528:	4b1e      	ldr	r3, [pc, #120]	; (800c5a4 <xPortStartScheduler+0x134>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	021b      	lsls	r3, r3, #8
 800c52e:	4a1d      	ldr	r2, [pc, #116]	; (800c5a4 <xPortStartScheduler+0x134>)
 800c530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c532:	4b1c      	ldr	r3, [pc, #112]	; (800c5a4 <xPortStartScheduler+0x134>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c53a:	4a1a      	ldr	r2, [pc, #104]	; (800c5a4 <xPortStartScheduler+0x134>)
 800c53c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	b2da      	uxtb	r2, r3
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c546:	4b18      	ldr	r3, [pc, #96]	; (800c5a8 <xPortStartScheduler+0x138>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a17      	ldr	r2, [pc, #92]	; (800c5a8 <xPortStartScheduler+0x138>)
 800c54c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c552:	4b15      	ldr	r3, [pc, #84]	; (800c5a8 <xPortStartScheduler+0x138>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a14      	ldr	r2, [pc, #80]	; (800c5a8 <xPortStartScheduler+0x138>)
 800c558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c55c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c55e:	f000 f8dd 	bl	800c71c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c562:	4b12      	ldr	r3, [pc, #72]	; (800c5ac <xPortStartScheduler+0x13c>)
 800c564:	2200      	movs	r2, #0
 800c566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c568:	f000 f8fc 	bl	800c764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c56c:	4b10      	ldr	r3, [pc, #64]	; (800c5b0 <xPortStartScheduler+0x140>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a0f      	ldr	r2, [pc, #60]	; (800c5b0 <xPortStartScheduler+0x140>)
 800c572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c578:	f7ff ff66 	bl	800c448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c57c:	f7ff f850 	bl	800b620 <vTaskSwitchContext>
	prvTaskExitError();
 800c580:	f7ff ff1c 	bl	800c3bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3718      	adds	r7, #24
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	e000ed00 	.word	0xe000ed00
 800c594:	410fc271 	.word	0x410fc271
 800c598:	410fc270 	.word	0x410fc270
 800c59c:	e000e400 	.word	0xe000e400
 800c5a0:	200017c4 	.word	0x200017c4
 800c5a4:	200017c8 	.word	0x200017c8
 800c5a8:	e000ed20 	.word	0xe000ed20
 800c5ac:	200000f4 	.word	0x200000f4
 800c5b0:	e000ef34 	.word	0xe000ef34

0800c5b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	607b      	str	r3, [r7, #4]
}
 800c5cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5ce:	4b0f      	ldr	r3, [pc, #60]	; (800c60c <vPortEnterCritical+0x58>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	4a0d      	ldr	r2, [pc, #52]	; (800c60c <vPortEnterCritical+0x58>)
 800c5d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5d8:	4b0c      	ldr	r3, [pc, #48]	; (800c60c <vPortEnterCritical+0x58>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d10f      	bne.n	800c600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5e0:	4b0b      	ldr	r3, [pc, #44]	; (800c610 <vPortEnterCritical+0x5c>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00a      	beq.n	800c600 <vPortEnterCritical+0x4c>
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ee:	f383 8811 	msr	BASEPRI, r3
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	603b      	str	r3, [r7, #0]
}
 800c5fc:	bf00      	nop
 800c5fe:	e7fe      	b.n	800c5fe <vPortEnterCritical+0x4a>
	}
}
 800c600:	bf00      	nop
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	200000f4 	.word	0x200000f4
 800c610:	e000ed04 	.word	0xe000ed04

0800c614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c61a:	4b12      	ldr	r3, [pc, #72]	; (800c664 <vPortExitCritical+0x50>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d10a      	bne.n	800c638 <vPortExitCritical+0x24>
	__asm volatile
 800c622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c626:	f383 8811 	msr	BASEPRI, r3
 800c62a:	f3bf 8f6f 	isb	sy
 800c62e:	f3bf 8f4f 	dsb	sy
 800c632:	607b      	str	r3, [r7, #4]
}
 800c634:	bf00      	nop
 800c636:	e7fe      	b.n	800c636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c638:	4b0a      	ldr	r3, [pc, #40]	; (800c664 <vPortExitCritical+0x50>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	3b01      	subs	r3, #1
 800c63e:	4a09      	ldr	r2, [pc, #36]	; (800c664 <vPortExitCritical+0x50>)
 800c640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c642:	4b08      	ldr	r3, [pc, #32]	; (800c664 <vPortExitCritical+0x50>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d105      	bne.n	800c656 <vPortExitCritical+0x42>
 800c64a:	2300      	movs	r3, #0
 800c64c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	f383 8811 	msr	BASEPRI, r3
}
 800c654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c656:	bf00      	nop
 800c658:	370c      	adds	r7, #12
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	200000f4 	.word	0x200000f4
	...

0800c670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c670:	f3ef 8009 	mrs	r0, PSP
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	4b15      	ldr	r3, [pc, #84]	; (800c6d0 <pxCurrentTCBConst>)
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	f01e 0f10 	tst.w	lr, #16
 800c680:	bf08      	it	eq
 800c682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68a:	6010      	str	r0, [r2, #0]
 800c68c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c690:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c694:	f380 8811 	msr	BASEPRI, r0
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f7fe ffbe 	bl	800b620 <vTaskSwitchContext>
 800c6a4:	f04f 0000 	mov.w	r0, #0
 800c6a8:	f380 8811 	msr	BASEPRI, r0
 800c6ac:	bc09      	pop	{r0, r3}
 800c6ae:	6819      	ldr	r1, [r3, #0]
 800c6b0:	6808      	ldr	r0, [r1, #0]
 800c6b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b6:	f01e 0f10 	tst.w	lr, #16
 800c6ba:	bf08      	it	eq
 800c6bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6c0:	f380 8809 	msr	PSP, r0
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	f3af 8000 	nop.w

0800c6d0 <pxCurrentTCBConst>:
 800c6d0:	20001198 	.word	0x20001198
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6d4:	bf00      	nop
 800c6d6:	bf00      	nop

0800c6d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	607b      	str	r3, [r7, #4]
}
 800c6f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6f2:	f7fe fedb 	bl	800b4ac <xTaskIncrementTick>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d003      	beq.n	800c704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6fc:	4b06      	ldr	r3, [pc, #24]	; (800c718 <xPortSysTickHandler+0x40>)
 800c6fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c702:	601a      	str	r2, [r3, #0]
 800c704:	2300      	movs	r3, #0
 800c706:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	f383 8811 	msr	BASEPRI, r3
}
 800c70e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c710:	bf00      	nop
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	e000ed04 	.word	0xe000ed04

0800c71c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c71c:	b480      	push	{r7}
 800c71e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c720:	4b0b      	ldr	r3, [pc, #44]	; (800c750 <vPortSetupTimerInterrupt+0x34>)
 800c722:	2200      	movs	r2, #0
 800c724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c726:	4b0b      	ldr	r3, [pc, #44]	; (800c754 <vPortSetupTimerInterrupt+0x38>)
 800c728:	2200      	movs	r2, #0
 800c72a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c72c:	4b0a      	ldr	r3, [pc, #40]	; (800c758 <vPortSetupTimerInterrupt+0x3c>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a0a      	ldr	r2, [pc, #40]	; (800c75c <vPortSetupTimerInterrupt+0x40>)
 800c732:	fba2 2303 	umull	r2, r3, r2, r3
 800c736:	099b      	lsrs	r3, r3, #6
 800c738:	4a09      	ldr	r2, [pc, #36]	; (800c760 <vPortSetupTimerInterrupt+0x44>)
 800c73a:	3b01      	subs	r3, #1
 800c73c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c73e:	4b04      	ldr	r3, [pc, #16]	; (800c750 <vPortSetupTimerInterrupt+0x34>)
 800c740:	2207      	movs	r2, #7
 800c742:	601a      	str	r2, [r3, #0]
}
 800c744:	bf00      	nop
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	e000e010 	.word	0xe000e010
 800c754:	e000e018 	.word	0xe000e018
 800c758:	20000004 	.word	0x20000004
 800c75c:	10624dd3 	.word	0x10624dd3
 800c760:	e000e014 	.word	0xe000e014

0800c764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c774 <vPortEnableVFP+0x10>
 800c768:	6801      	ldr	r1, [r0, #0]
 800c76a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c76e:	6001      	str	r1, [r0, #0]
 800c770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c772:	bf00      	nop
 800c774:	e000ed88 	.word	0xe000ed88

0800c778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c77e:	f3ef 8305 	mrs	r3, IPSR
 800c782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2b0f      	cmp	r3, #15
 800c788:	d914      	bls.n	800c7b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c78a:	4a17      	ldr	r2, [pc, #92]	; (800c7e8 <vPortValidateInterruptPriority+0x70>)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	4413      	add	r3, r2
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c794:	4b15      	ldr	r3, [pc, #84]	; (800c7ec <vPortValidateInterruptPriority+0x74>)
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	7afa      	ldrb	r2, [r7, #11]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d20a      	bcs.n	800c7b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	607b      	str	r3, [r7, #4]
}
 800c7b0:	bf00      	nop
 800c7b2:	e7fe      	b.n	800c7b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7b4:	4b0e      	ldr	r3, [pc, #56]	; (800c7f0 <vPortValidateInterruptPriority+0x78>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c7bc:	4b0d      	ldr	r3, [pc, #52]	; (800c7f4 <vPortValidateInterruptPriority+0x7c>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d90a      	bls.n	800c7da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	603b      	str	r3, [r7, #0]
}
 800c7d6:	bf00      	nop
 800c7d8:	e7fe      	b.n	800c7d8 <vPortValidateInterruptPriority+0x60>
	}
 800c7da:	bf00      	nop
 800c7dc:	3714      	adds	r7, #20
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	e000e3f0 	.word	0xe000e3f0
 800c7ec:	200017c4 	.word	0x200017c4
 800c7f0:	e000ed0c 	.word	0xe000ed0c
 800c7f4:	200017c8 	.word	0x200017c8

0800c7f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b08a      	sub	sp, #40	; 0x28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c800:	2300      	movs	r3, #0
 800c802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c804:	f7fe fd96 	bl	800b334 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c808:	4b5b      	ldr	r3, [pc, #364]	; (800c978 <pvPortMalloc+0x180>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d101      	bne.n	800c814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c810:	f000 f920 	bl	800ca54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c814:	4b59      	ldr	r3, [pc, #356]	; (800c97c <pvPortMalloc+0x184>)
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4013      	ands	r3, r2
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f040 8093 	bne.w	800c948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d01d      	beq.n	800c864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c828:	2208      	movs	r2, #8
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4413      	add	r3, r2
 800c82e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f003 0307 	and.w	r3, r3, #7
 800c836:	2b00      	cmp	r3, #0
 800c838:	d014      	beq.n	800c864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f023 0307 	bic.w	r3, r3, #7
 800c840:	3308      	adds	r3, #8
 800c842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f003 0307 	and.w	r3, r3, #7
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00a      	beq.n	800c864 <pvPortMalloc+0x6c>
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	617b      	str	r3, [r7, #20]
}
 800c860:	bf00      	nop
 800c862:	e7fe      	b.n	800c862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d06e      	beq.n	800c948 <pvPortMalloc+0x150>
 800c86a:	4b45      	ldr	r3, [pc, #276]	; (800c980 <pvPortMalloc+0x188>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	429a      	cmp	r2, r3
 800c872:	d869      	bhi.n	800c948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c874:	4b43      	ldr	r3, [pc, #268]	; (800c984 <pvPortMalloc+0x18c>)
 800c876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c878:	4b42      	ldr	r3, [pc, #264]	; (800c984 <pvPortMalloc+0x18c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c87e:	e004      	b.n	800c88a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	429a      	cmp	r2, r3
 800c892:	d903      	bls.n	800c89c <pvPortMalloc+0xa4>
 800c894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1f1      	bne.n	800c880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c89c:	4b36      	ldr	r3, [pc, #216]	; (800c978 <pvPortMalloc+0x180>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d050      	beq.n	800c948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8a6:	6a3b      	ldr	r3, [r7, #32]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2208      	movs	r2, #8
 800c8ac:	4413      	add	r3, r2
 800c8ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	6a3b      	ldr	r3, [r7, #32]
 800c8b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ba:	685a      	ldr	r2, [r3, #4]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	1ad2      	subs	r2, r2, r3
 800c8c0:	2308      	movs	r3, #8
 800c8c2:	005b      	lsls	r3, r3, #1
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d91f      	bls.n	800c908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	f003 0307 	and.w	r3, r3, #7
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00a      	beq.n	800c8f0 <pvPortMalloc+0xf8>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8de:	f383 8811 	msr	BASEPRI, r3
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	613b      	str	r3, [r7, #16]
}
 800c8ec:	bf00      	nop
 800c8ee:	e7fe      	b.n	800c8ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	685a      	ldr	r2, [r3, #4]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	1ad2      	subs	r2, r2, r3
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c902:	69b8      	ldr	r0, [r7, #24]
 800c904:	f000 f908 	bl	800cb18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c908:	4b1d      	ldr	r3, [pc, #116]	; (800c980 <pvPortMalloc+0x188>)
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	4a1b      	ldr	r2, [pc, #108]	; (800c980 <pvPortMalloc+0x188>)
 800c914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c916:	4b1a      	ldr	r3, [pc, #104]	; (800c980 <pvPortMalloc+0x188>)
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	4b1b      	ldr	r3, [pc, #108]	; (800c988 <pvPortMalloc+0x190>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d203      	bcs.n	800c92a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c922:	4b17      	ldr	r3, [pc, #92]	; (800c980 <pvPortMalloc+0x188>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a18      	ldr	r2, [pc, #96]	; (800c988 <pvPortMalloc+0x190>)
 800c928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92c:	685a      	ldr	r2, [r3, #4]
 800c92e:	4b13      	ldr	r3, [pc, #76]	; (800c97c <pvPortMalloc+0x184>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	431a      	orrs	r2, r3
 800c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93a:	2200      	movs	r2, #0
 800c93c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c93e:	4b13      	ldr	r3, [pc, #76]	; (800c98c <pvPortMalloc+0x194>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	3301      	adds	r3, #1
 800c944:	4a11      	ldr	r2, [pc, #68]	; (800c98c <pvPortMalloc+0x194>)
 800c946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c948:	f7fe fd02 	bl	800b350 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	f003 0307 	and.w	r3, r3, #7
 800c952:	2b00      	cmp	r3, #0
 800c954:	d00a      	beq.n	800c96c <pvPortMalloc+0x174>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	60fb      	str	r3, [r7, #12]
}
 800c968:	bf00      	nop
 800c96a:	e7fe      	b.n	800c96a <pvPortMalloc+0x172>
	return pvReturn;
 800c96c:	69fb      	ldr	r3, [r7, #28]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3728      	adds	r7, #40	; 0x28
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	200053d4 	.word	0x200053d4
 800c97c:	200053e8 	.word	0x200053e8
 800c980:	200053d8 	.word	0x200053d8
 800c984:	200053cc 	.word	0x200053cc
 800c988:	200053dc 	.word	0x200053dc
 800c98c:	200053e0 	.word	0x200053e0

0800c990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d04d      	beq.n	800ca3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9a2:	2308      	movs	r3, #8
 800c9a4:	425b      	negs	r3, r3
 800c9a6:	697a      	ldr	r2, [r7, #20]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	685a      	ldr	r2, [r3, #4]
 800c9b4:	4b24      	ldr	r3, [pc, #144]	; (800ca48 <vPortFree+0xb8>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4013      	ands	r3, r2
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10a      	bne.n	800c9d4 <vPortFree+0x44>
	__asm volatile
 800c9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c2:	f383 8811 	msr	BASEPRI, r3
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	60fb      	str	r3, [r7, #12]
}
 800c9d0:	bf00      	nop
 800c9d2:	e7fe      	b.n	800c9d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00a      	beq.n	800c9f2 <vPortFree+0x62>
	__asm volatile
 800c9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	60bb      	str	r3, [r7, #8]
}
 800c9ee:	bf00      	nop
 800c9f0:	e7fe      	b.n	800c9f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	685a      	ldr	r2, [r3, #4]
 800c9f6:	4b14      	ldr	r3, [pc, #80]	; (800ca48 <vPortFree+0xb8>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4013      	ands	r3, r2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d01e      	beq.n	800ca3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d11a      	bne.n	800ca3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	4b0e      	ldr	r3, [pc, #56]	; (800ca48 <vPortFree+0xb8>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	43db      	mvns	r3, r3
 800ca12:	401a      	ands	r2, r3
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca18:	f7fe fc8c 	bl	800b334 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	685a      	ldr	r2, [r3, #4]
 800ca20:	4b0a      	ldr	r3, [pc, #40]	; (800ca4c <vPortFree+0xbc>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4413      	add	r3, r2
 800ca26:	4a09      	ldr	r2, [pc, #36]	; (800ca4c <vPortFree+0xbc>)
 800ca28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca2a:	6938      	ldr	r0, [r7, #16]
 800ca2c:	f000 f874 	bl	800cb18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca30:	4b07      	ldr	r3, [pc, #28]	; (800ca50 <vPortFree+0xc0>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	3301      	adds	r3, #1
 800ca36:	4a06      	ldr	r2, [pc, #24]	; (800ca50 <vPortFree+0xc0>)
 800ca38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca3a:	f7fe fc89 	bl	800b350 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca3e:	bf00      	nop
 800ca40:	3718      	adds	r7, #24
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	200053e8 	.word	0x200053e8
 800ca4c:	200053d8 	.word	0x200053d8
 800ca50:	200053e4 	.word	0x200053e4

0800ca54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ca5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca60:	4b27      	ldr	r3, [pc, #156]	; (800cb00 <prvHeapInit+0xac>)
 800ca62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f003 0307 	and.w	r3, r3, #7
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00c      	beq.n	800ca88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	3307      	adds	r3, #7
 800ca72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f023 0307 	bic.w	r3, r3, #7
 800ca7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	4a1f      	ldr	r2, [pc, #124]	; (800cb00 <prvHeapInit+0xac>)
 800ca84:	4413      	add	r3, r2
 800ca86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca8c:	4a1d      	ldr	r2, [pc, #116]	; (800cb04 <prvHeapInit+0xb0>)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca92:	4b1c      	ldr	r3, [pc, #112]	; (800cb04 <prvHeapInit+0xb0>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800caa0:	2208      	movs	r2, #8
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	1a9b      	subs	r3, r3, r2
 800caa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f023 0307 	bic.w	r3, r3, #7
 800caae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	4a15      	ldr	r2, [pc, #84]	; (800cb08 <prvHeapInit+0xb4>)
 800cab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cab6:	4b14      	ldr	r3, [pc, #80]	; (800cb08 <prvHeapInit+0xb4>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2200      	movs	r2, #0
 800cabc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cabe:	4b12      	ldr	r3, [pc, #72]	; (800cb08 <prvHeapInit+0xb4>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	1ad2      	subs	r2, r2, r3
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cad4:	4b0c      	ldr	r3, [pc, #48]	; (800cb08 <prvHeapInit+0xb4>)
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	4a0a      	ldr	r2, [pc, #40]	; (800cb0c <prvHeapInit+0xb8>)
 800cae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	4a09      	ldr	r2, [pc, #36]	; (800cb10 <prvHeapInit+0xbc>)
 800caea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800caec:	4b09      	ldr	r3, [pc, #36]	; (800cb14 <prvHeapInit+0xc0>)
 800caee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800caf2:	601a      	str	r2, [r3, #0]
}
 800caf4:	bf00      	nop
 800caf6:	3714      	adds	r7, #20
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr
 800cb00:	200017cc 	.word	0x200017cc
 800cb04:	200053cc 	.word	0x200053cc
 800cb08:	200053d4 	.word	0x200053d4
 800cb0c:	200053dc 	.word	0x200053dc
 800cb10:	200053d8 	.word	0x200053d8
 800cb14:	200053e8 	.word	0x200053e8

0800cb18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb20:	4b28      	ldr	r3, [pc, #160]	; (800cbc4 <prvInsertBlockIntoFreeList+0xac>)
 800cb22:	60fb      	str	r3, [r7, #12]
 800cb24:	e002      	b.n	800cb2c <prvInsertBlockIntoFreeList+0x14>
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	60fb      	str	r3, [r7, #12]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d8f7      	bhi.n	800cb26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	4413      	add	r3, r2
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d108      	bne.n	800cb5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	441a      	add	r2, r3
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	68ba      	ldr	r2, [r7, #8]
 800cb64:	441a      	add	r2, r3
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d118      	bne.n	800cba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	4b15      	ldr	r3, [pc, #84]	; (800cbc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d00d      	beq.n	800cb96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	685a      	ldr	r2, [r3, #4]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	441a      	add	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	601a      	str	r2, [r3, #0]
 800cb94:	e008      	b.n	800cba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb96:	4b0c      	ldr	r3, [pc, #48]	; (800cbc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	601a      	str	r2, [r3, #0]
 800cb9e:	e003      	b.n	800cba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d002      	beq.n	800cbb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbb6:	bf00      	nop
 800cbb8:	3714      	adds	r7, #20
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	200053cc 	.word	0x200053cc
 800cbc8:	200053d4 	.word	0x200053d4

0800cbcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	4912      	ldr	r1, [pc, #72]	; (800cc1c <MX_USB_DEVICE_Init+0x50>)
 800cbd4:	4812      	ldr	r0, [pc, #72]	; (800cc20 <MX_USB_DEVICE_Init+0x54>)
 800cbd6:	f7fc f8bd 	bl	8008d54 <USBD_Init>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d004      	beq.n	800cbea <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800cbe0:	4b10      	ldr	r3, [pc, #64]	; (800cc24 <MX_USB_DEVICE_Init+0x58>)
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800cbe6:	f7f5 f857 	bl	8001c98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800cbea:	490f      	ldr	r1, [pc, #60]	; (800cc28 <MX_USB_DEVICE_Init+0x5c>)
 800cbec:	480c      	ldr	r0, [pc, #48]	; (800cc20 <MX_USB_DEVICE_Init+0x54>)
 800cbee:	f7fc f8e1 	bl	8008db4 <USBD_RegisterClass>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d004      	beq.n	800cc02 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800cbf8:	4b0a      	ldr	r3, [pc, #40]	; (800cc24 <MX_USB_DEVICE_Init+0x58>)
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800cbfe:	f7f5 f84b 	bl	8001c98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc02:	4807      	ldr	r0, [pc, #28]	; (800cc20 <MX_USB_DEVICE_Init+0x54>)
 800cc04:	f7fc f8fd 	bl	8008e02 <USBD_Start>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d004      	beq.n	800cc18 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800cc0e:	4b05      	ldr	r3, [pc, #20]	; (800cc24 <MX_USB_DEVICE_Init+0x58>)
 800cc10:	2201      	movs	r2, #1
 800cc12:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800cc14:	f7f5 f840 	bl	8001c98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc18:	bf00      	nop
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	200000f8 	.word	0x200000f8
 800cc20:	20005498 	.word	0x20005498
 800cc24:	200053ec 	.word	0x200053ec
 800cc28:	20000018 	.word	0x20000018

0800cc2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	6039      	str	r1, [r7, #0]
 800cc36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2212      	movs	r2, #18
 800cc3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cc3e:	4b03      	ldr	r3, [pc, #12]	; (800cc4c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	20000114 	.word	0x20000114

0800cc50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	4603      	mov	r3, r0
 800cc58:	6039      	str	r1, [r7, #0]
 800cc5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	2204      	movs	r2, #4
 800cc60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc62:	4b03      	ldr	r3, [pc, #12]	; (800cc70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	370c      	adds	r7, #12
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr
 800cc70:	20000128 	.word	0x20000128

0800cc74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d105      	bne.n	800cc92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	4907      	ldr	r1, [pc, #28]	; (800cca8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc8a:	4808      	ldr	r0, [pc, #32]	; (800ccac <USBD_FS_ProductStrDescriptor+0x38>)
 800cc8c:	f7fd f943 	bl	8009f16 <USBD_GetString>
 800cc90:	e004      	b.n	800cc9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc92:	683a      	ldr	r2, [r7, #0]
 800cc94:	4904      	ldr	r1, [pc, #16]	; (800cca8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc96:	4805      	ldr	r0, [pc, #20]	; (800ccac <USBD_FS_ProductStrDescriptor+0x38>)
 800cc98:	f7fd f93d 	bl	8009f16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc9c:	4b02      	ldr	r3, [pc, #8]	; (800cca8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	20005768 	.word	0x20005768
 800ccac:	08013964 	.word	0x08013964

0800ccb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	6039      	str	r1, [r7, #0]
 800ccba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ccbc:	683a      	ldr	r2, [r7, #0]
 800ccbe:	4904      	ldr	r1, [pc, #16]	; (800ccd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ccc0:	4804      	ldr	r0, [pc, #16]	; (800ccd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ccc2:	f7fd f928 	bl	8009f16 <USBD_GetString>
  return USBD_StrDesc;
 800ccc6:	4b02      	ldr	r3, [pc, #8]	; (800ccd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3708      	adds	r7, #8
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	20005768 	.word	0x20005768
 800ccd4:	0801397c 	.word	0x0801397c

0800ccd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	4603      	mov	r3, r0
 800cce0:	6039      	str	r1, [r7, #0]
 800cce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	221a      	movs	r2, #26
 800cce8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ccea:	f000 f843 	bl	800cd74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ccee:	4b02      	ldr	r3, [pc, #8]	; (800ccf8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	2000012c 	.word	0x2000012c

0800ccfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	4603      	mov	r3, r0
 800cd04:	6039      	str	r1, [r7, #0]
 800cd06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd08:	79fb      	ldrb	r3, [r7, #7]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d105      	bne.n	800cd1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd0e:	683a      	ldr	r2, [r7, #0]
 800cd10:	4907      	ldr	r1, [pc, #28]	; (800cd30 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd12:	4808      	ldr	r0, [pc, #32]	; (800cd34 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd14:	f7fd f8ff 	bl	8009f16 <USBD_GetString>
 800cd18:	e004      	b.n	800cd24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd1a:	683a      	ldr	r2, [r7, #0]
 800cd1c:	4904      	ldr	r1, [pc, #16]	; (800cd30 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd1e:	4805      	ldr	r0, [pc, #20]	; (800cd34 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd20:	f7fd f8f9 	bl	8009f16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd24:	4b02      	ldr	r3, [pc, #8]	; (800cd30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	20005768 	.word	0x20005768
 800cd34:	08013990 	.word	0x08013990

0800cd38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	4603      	mov	r3, r0
 800cd40:	6039      	str	r1, [r7, #0]
 800cd42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd44:	79fb      	ldrb	r3, [r7, #7]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d105      	bne.n	800cd56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd4a:	683a      	ldr	r2, [r7, #0]
 800cd4c:	4907      	ldr	r1, [pc, #28]	; (800cd6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd4e:	4808      	ldr	r0, [pc, #32]	; (800cd70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd50:	f7fd f8e1 	bl	8009f16 <USBD_GetString>
 800cd54:	e004      	b.n	800cd60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	4904      	ldr	r1, [pc, #16]	; (800cd6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd5a:	4805      	ldr	r0, [pc, #20]	; (800cd70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd5c:	f7fd f8db 	bl	8009f16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd60:	4b02      	ldr	r3, [pc, #8]	; (800cd6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	20005768 	.word	0x20005768
 800cd70:	0801399c 	.word	0x0801399c

0800cd74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd7a:	4b0f      	ldr	r3, [pc, #60]	; (800cdb8 <Get_SerialNum+0x44>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd80:	4b0e      	ldr	r3, [pc, #56]	; (800cdbc <Get_SerialNum+0x48>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd86:	4b0e      	ldr	r3, [pc, #56]	; (800cdc0 <Get_SerialNum+0x4c>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4413      	add	r3, r2
 800cd92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d009      	beq.n	800cdae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd9a:	2208      	movs	r2, #8
 800cd9c:	4909      	ldr	r1, [pc, #36]	; (800cdc4 <Get_SerialNum+0x50>)
 800cd9e:	68f8      	ldr	r0, [r7, #12]
 800cda0:	f000 f814 	bl	800cdcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cda4:	2204      	movs	r2, #4
 800cda6:	4908      	ldr	r1, [pc, #32]	; (800cdc8 <Get_SerialNum+0x54>)
 800cda8:	68b8      	ldr	r0, [r7, #8]
 800cdaa:	f000 f80f 	bl	800cdcc <IntToUnicode>
  }
}
 800cdae:	bf00      	nop
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	1fff7a10 	.word	0x1fff7a10
 800cdbc:	1fff7a14 	.word	0x1fff7a14
 800cdc0:	1fff7a18 	.word	0x1fff7a18
 800cdc4:	2000012e 	.word	0x2000012e
 800cdc8:	2000013e 	.word	0x2000013e

0800cdcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b087      	sub	sp, #28
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cdda:	2300      	movs	r3, #0
 800cddc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cdde:	2300      	movs	r3, #0
 800cde0:	75fb      	strb	r3, [r7, #23]
 800cde2:	e027      	b.n	800ce34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	0f1b      	lsrs	r3, r3, #28
 800cde8:	2b09      	cmp	r3, #9
 800cdea:	d80b      	bhi.n	800ce04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	0f1b      	lsrs	r3, r3, #28
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	7dfb      	ldrb	r3, [r7, #23]
 800cdf4:	005b      	lsls	r3, r3, #1
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	440b      	add	r3, r1
 800cdfc:	3230      	adds	r2, #48	; 0x30
 800cdfe:	b2d2      	uxtb	r2, r2
 800ce00:	701a      	strb	r2, [r3, #0]
 800ce02:	e00a      	b.n	800ce1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	0f1b      	lsrs	r3, r3, #28
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	7dfb      	ldrb	r3, [r7, #23]
 800ce0c:	005b      	lsls	r3, r3, #1
 800ce0e:	4619      	mov	r1, r3
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	440b      	add	r3, r1
 800ce14:	3237      	adds	r2, #55	; 0x37
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	011b      	lsls	r3, r3, #4
 800ce1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce20:	7dfb      	ldrb	r3, [r7, #23]
 800ce22:	005b      	lsls	r3, r3, #1
 800ce24:	3301      	adds	r3, #1
 800ce26:	68ba      	ldr	r2, [r7, #8]
 800ce28:	4413      	add	r3, r2
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce2e:	7dfb      	ldrb	r3, [r7, #23]
 800ce30:	3301      	adds	r3, #1
 800ce32:	75fb      	strb	r3, [r7, #23]
 800ce34:	7dfa      	ldrb	r2, [r7, #23]
 800ce36:	79fb      	ldrb	r3, [r7, #7]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d3d3      	bcc.n	800cde4 <IntToUnicode+0x18>
  }
}
 800ce3c:	bf00      	nop
 800ce3e:	bf00      	nop
 800ce40:	371c      	adds	r7, #28
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr
	...

0800ce4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b08a      	sub	sp, #40	; 0x28
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce54:	f107 0314 	add.w	r3, r7, #20
 800ce58:	2200      	movs	r2, #0
 800ce5a:	601a      	str	r2, [r3, #0]
 800ce5c:	605a      	str	r2, [r3, #4]
 800ce5e:	609a      	str	r2, [r3, #8]
 800ce60:	60da      	str	r2, [r3, #12]
 800ce62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce6c:	d13a      	bne.n	800cee4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce6e:	2300      	movs	r3, #0
 800ce70:	613b      	str	r3, [r7, #16]
 800ce72:	4b1e      	ldr	r3, [pc, #120]	; (800ceec <HAL_PCD_MspInit+0xa0>)
 800ce74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce76:	4a1d      	ldr	r2, [pc, #116]	; (800ceec <HAL_PCD_MspInit+0xa0>)
 800ce78:	f043 0301 	orr.w	r3, r3, #1
 800ce7c:	6313      	str	r3, [r2, #48]	; 0x30
 800ce7e:	4b1b      	ldr	r3, [pc, #108]	; (800ceec <HAL_PCD_MspInit+0xa0>)
 800ce80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce82:	f003 0301 	and.w	r3, r3, #1
 800ce86:	613b      	str	r3, [r7, #16]
 800ce88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ce8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ce8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce90:	2302      	movs	r3, #2
 800ce92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce94:	2300      	movs	r3, #0
 800ce96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce98:	2303      	movs	r3, #3
 800ce9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce9c:	230a      	movs	r3, #10
 800ce9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cea0:	f107 0314 	add.w	r3, r7, #20
 800cea4:	4619      	mov	r1, r3
 800cea6:	4812      	ldr	r0, [pc, #72]	; (800cef0 <HAL_PCD_MspInit+0xa4>)
 800cea8:	f7f5 fd7c 	bl	80029a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ceac:	4b0f      	ldr	r3, [pc, #60]	; (800ceec <HAL_PCD_MspInit+0xa0>)
 800ceae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceb0:	4a0e      	ldr	r2, [pc, #56]	; (800ceec <HAL_PCD_MspInit+0xa0>)
 800ceb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceb6:	6353      	str	r3, [r2, #52]	; 0x34
 800ceb8:	2300      	movs	r3, #0
 800ceba:	60fb      	str	r3, [r7, #12]
 800cebc:	4b0b      	ldr	r3, [pc, #44]	; (800ceec <HAL_PCD_MspInit+0xa0>)
 800cebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cec0:	4a0a      	ldr	r2, [pc, #40]	; (800ceec <HAL_PCD_MspInit+0xa0>)
 800cec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cec6:	6453      	str	r3, [r2, #68]	; 0x44
 800cec8:	4b08      	ldr	r3, [pc, #32]	; (800ceec <HAL_PCD_MspInit+0xa0>)
 800ceca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ced0:	60fb      	str	r3, [r7, #12]
 800ced2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ced4:	2200      	movs	r2, #0
 800ced6:	2105      	movs	r1, #5
 800ced8:	2043      	movs	r0, #67	; 0x43
 800ceda:	f7f5 fd39 	bl	8002950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cede:	2043      	movs	r0, #67	; 0x43
 800cee0:	f7f5 fd52 	bl	8002988 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cee4:	bf00      	nop
 800cee6:	3728      	adds	r7, #40	; 0x28
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	40023800 	.word	0x40023800
 800cef0:	40020000 	.word	0x40020000

0800cef4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cf08:	4619      	mov	r1, r3
 800cf0a:	4610      	mov	r0, r2
 800cf0c:	f7fb ffc4 	bl	8008e98 <USBD_LL_SetupStage>
}
 800cf10:	bf00      	nop
 800cf12:	3708      	adds	r7, #8
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	460b      	mov	r3, r1
 800cf22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cf2a:	78fa      	ldrb	r2, [r7, #3]
 800cf2c:	6879      	ldr	r1, [r7, #4]
 800cf2e:	4613      	mov	r3, r2
 800cf30:	00db      	lsls	r3, r3, #3
 800cf32:	1a9b      	subs	r3, r3, r2
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	440b      	add	r3, r1
 800cf38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	78fb      	ldrb	r3, [r7, #3]
 800cf40:	4619      	mov	r1, r3
 800cf42:	f7fb fffe 	bl	8008f42 <USBD_LL_DataOutStage>
}
 800cf46:	bf00      	nop
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b082      	sub	sp, #8
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
 800cf56:	460b      	mov	r3, r1
 800cf58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cf60:	78fa      	ldrb	r2, [r7, #3]
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	4613      	mov	r3, r2
 800cf66:	00db      	lsls	r3, r3, #3
 800cf68:	1a9b      	subs	r3, r3, r2
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	440b      	add	r3, r1
 800cf6e:	3348      	adds	r3, #72	; 0x48
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	78fb      	ldrb	r3, [r7, #3]
 800cf74:	4619      	mov	r1, r3
 800cf76:	f7fc f847 	bl	8009008 <USBD_LL_DataInStage>
}
 800cf7a:	bf00      	nop
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b082      	sub	sp, #8
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7fc f95b 	bl	800924c <USBD_LL_SOF>
}
 800cf96:	bf00      	nop
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b084      	sub	sp, #16
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d102      	bne.n	800cfb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	73fb      	strb	r3, [r7, #15]
 800cfb6:	e008      	b.n	800cfca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	d102      	bne.n	800cfc6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	73fb      	strb	r3, [r7, #15]
 800cfc4:	e001      	b.n	800cfca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cfc6:	f7f4 fe67 	bl	8001c98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cfd0:	7bfa      	ldrb	r2, [r7, #15]
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7fc f8fb 	bl	80091d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fc f8a7 	bl	8009134 <USBD_LL_Reset>
}
 800cfe6:	bf00      	nop
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
	...

0800cff0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fc f8f6 	bl	80091f0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	6812      	ldr	r2, [r2, #0]
 800d012:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d016:	f043 0301 	orr.w	r3, r3, #1
 800d01a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6a1b      	ldr	r3, [r3, #32]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d005      	beq.n	800d030 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d024:	4b04      	ldr	r3, [pc, #16]	; (800d038 <HAL_PCD_SuspendCallback+0x48>)
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	4a03      	ldr	r2, [pc, #12]	; (800d038 <HAL_PCD_SuspendCallback+0x48>)
 800d02a:	f043 0306 	orr.w	r3, r3, #6
 800d02e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d030:	bf00      	nop
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	e000ed00 	.word	0xe000ed00

0800d03c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fc f8e6 	bl	800921c <USBD_LL_Resume>
}
 800d050:	bf00      	nop
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	460b      	mov	r3, r1
 800d062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d06a:	78fa      	ldrb	r2, [r7, #3]
 800d06c:	4611      	mov	r1, r2
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fc f934 	bl	80092dc <USBD_LL_IsoOUTIncomplete>
}
 800d074:	bf00      	nop
 800d076:	3708      	adds	r7, #8
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	460b      	mov	r3, r1
 800d086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d08e:	78fa      	ldrb	r2, [r7, #3]
 800d090:	4611      	mov	r1, r2
 800d092:	4618      	mov	r0, r3
 800d094:	f7fc f8fc 	bl	8009290 <USBD_LL_IsoINIncomplete>
}
 800d098:	bf00      	nop
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fc f93a 	bl	8009328 <USBD_LL_DevConnected>
}
 800d0b4:	bf00      	nop
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7fc f937 	bl	800933e <USBD_LL_DevDisconnected>
}
 800d0d0:	bf00      	nop
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d13c      	bne.n	800d162 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d0e8:	4a20      	ldr	r2, [pc, #128]	; (800d16c <USBD_LL_Init+0x94>)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	4a1e      	ldr	r2, [pc, #120]	; (800d16c <USBD_LL_Init+0x94>)
 800d0f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d0f8:	4b1c      	ldr	r3, [pc, #112]	; (800d16c <USBD_LL_Init+0x94>)
 800d0fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d0fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d100:	4b1a      	ldr	r3, [pc, #104]	; (800d16c <USBD_LL_Init+0x94>)
 800d102:	2206      	movs	r2, #6
 800d104:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d106:	4b19      	ldr	r3, [pc, #100]	; (800d16c <USBD_LL_Init+0x94>)
 800d108:	2202      	movs	r2, #2
 800d10a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d10c:	4b17      	ldr	r3, [pc, #92]	; (800d16c <USBD_LL_Init+0x94>)
 800d10e:	2200      	movs	r2, #0
 800d110:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d112:	4b16      	ldr	r3, [pc, #88]	; (800d16c <USBD_LL_Init+0x94>)
 800d114:	2202      	movs	r2, #2
 800d116:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d118:	4b14      	ldr	r3, [pc, #80]	; (800d16c <USBD_LL_Init+0x94>)
 800d11a:	2200      	movs	r2, #0
 800d11c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d11e:	4b13      	ldr	r3, [pc, #76]	; (800d16c <USBD_LL_Init+0x94>)
 800d120:	2200      	movs	r2, #0
 800d122:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d124:	4b11      	ldr	r3, [pc, #68]	; (800d16c <USBD_LL_Init+0x94>)
 800d126:	2200      	movs	r2, #0
 800d128:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d12a:	4b10      	ldr	r3, [pc, #64]	; (800d16c <USBD_LL_Init+0x94>)
 800d12c:	2200      	movs	r2, #0
 800d12e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d130:	4b0e      	ldr	r3, [pc, #56]	; (800d16c <USBD_LL_Init+0x94>)
 800d132:	2200      	movs	r2, #0
 800d134:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d136:	480d      	ldr	r0, [pc, #52]	; (800d16c <USBD_LL_Init+0x94>)
 800d138:	f7f6 fa55 	bl	80035e6 <HAL_PCD_Init>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d001      	beq.n	800d146 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d142:	f7f4 fda9 	bl	8001c98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d146:	2180      	movs	r1, #128	; 0x80
 800d148:	4808      	ldr	r0, [pc, #32]	; (800d16c <USBD_LL_Init+0x94>)
 800d14a:	f7f7 fbce 	bl	80048ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d14e:	2240      	movs	r2, #64	; 0x40
 800d150:	2100      	movs	r1, #0
 800d152:	4806      	ldr	r0, [pc, #24]	; (800d16c <USBD_LL_Init+0x94>)
 800d154:	f7f7 fb82 	bl	800485c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d158:	2280      	movs	r2, #128	; 0x80
 800d15a:	2101      	movs	r1, #1
 800d15c:	4803      	ldr	r0, [pc, #12]	; (800d16c <USBD_LL_Init+0x94>)
 800d15e:	f7f7 fb7d 	bl	800485c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	3708      	adds	r7, #8
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	20005968 	.word	0x20005968

0800d170 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d178:	2300      	movs	r3, #0
 800d17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d186:	4618      	mov	r0, r3
 800d188:	f7f6 fb51 	bl	800382e <HAL_PCD_Start>
 800d18c:	4603      	mov	r3, r0
 800d18e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d190:	7bfb      	ldrb	r3, [r7, #15]
 800d192:	4618      	mov	r0, r3
 800d194:	f000 f97e 	bl	800d494 <USBD_Get_USB_Status>
 800d198:	4603      	mov	r3, r0
 800d19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b084      	sub	sp, #16
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	4608      	mov	r0, r1
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	70fb      	strb	r3, [r7, #3]
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	70bb      	strb	r3, [r7, #2]
 800d1bc:	4613      	mov	r3, r2
 800d1be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d1ce:	78bb      	ldrb	r3, [r7, #2]
 800d1d0:	883a      	ldrh	r2, [r7, #0]
 800d1d2:	78f9      	ldrb	r1, [r7, #3]
 800d1d4:	f7f6 ff62 	bl	800409c <HAL_PCD_EP_Open>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f000 f958 	bl	800d494 <USBD_Get_USB_Status>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b084      	sub	sp, #16
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1fe:	2300      	movs	r3, #0
 800d200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d202:	2300      	movs	r3, #0
 800d204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d20c:	78fa      	ldrb	r2, [r7, #3]
 800d20e:	4611      	mov	r1, r2
 800d210:	4618      	mov	r0, r3
 800d212:	f7f6 ffab 	bl	800416c <HAL_PCD_EP_Close>
 800d216:	4603      	mov	r3, r0
 800d218:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d21a:	7bfb      	ldrb	r3, [r7, #15]
 800d21c:	4618      	mov	r0, r3
 800d21e:	f000 f939 	bl	800d494 <USBD_Get_USB_Status>
 800d222:	4603      	mov	r3, r0
 800d224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d226:	7bbb      	ldrb	r3, [r7, #14]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3710      	adds	r7, #16
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d23c:	2300      	movs	r3, #0
 800d23e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d240:	2300      	movs	r3, #0
 800d242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d24a:	78fa      	ldrb	r2, [r7, #3]
 800d24c:	4611      	mov	r1, r2
 800d24e:	4618      	mov	r0, r3
 800d250:	f7f7 f86b 	bl	800432a <HAL_PCD_EP_SetStall>
 800d254:	4603      	mov	r3, r0
 800d256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d258:	7bfb      	ldrb	r3, [r7, #15]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f000 f91a 	bl	800d494 <USBD_Get_USB_Status>
 800d260:	4603      	mov	r3, r0
 800d262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d264:	7bbb      	ldrb	r3, [r7, #14]
}
 800d266:	4618      	mov	r0, r3
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b084      	sub	sp, #16
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
 800d276:	460b      	mov	r3, r1
 800d278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d27e:	2300      	movs	r3, #0
 800d280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d288:	78fa      	ldrb	r2, [r7, #3]
 800d28a:	4611      	mov	r1, r2
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7f7 f8b0 	bl	80043f2 <HAL_PCD_EP_ClrStall>
 800d292:	4603      	mov	r3, r0
 800d294:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d296:	7bfb      	ldrb	r3, [r7, #15]
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 f8fb 	bl	800d494 <USBD_Get_USB_Status>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3710      	adds	r7, #16
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d2be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d2c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	da0b      	bge.n	800d2e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d2c8:	78fb      	ldrb	r3, [r7, #3]
 800d2ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2ce:	68f9      	ldr	r1, [r7, #12]
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	00db      	lsls	r3, r3, #3
 800d2d4:	1a9b      	subs	r3, r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	440b      	add	r3, r1
 800d2da:	333e      	adds	r3, #62	; 0x3e
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	e00b      	b.n	800d2f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d2e0:	78fb      	ldrb	r3, [r7, #3]
 800d2e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2e6:	68f9      	ldr	r1, [r7, #12]
 800d2e8:	4613      	mov	r3, r2
 800d2ea:	00db      	lsls	r3, r3, #3
 800d2ec:	1a9b      	subs	r3, r3, r2
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	440b      	add	r3, r1
 800d2f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3714      	adds	r7, #20
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	460b      	mov	r3, r1
 800d30e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d310:	2300      	movs	r3, #0
 800d312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d314:	2300      	movs	r3, #0
 800d316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d31e:	78fa      	ldrb	r2, [r7, #3]
 800d320:	4611      	mov	r1, r2
 800d322:	4618      	mov	r0, r3
 800d324:	f7f6 fe95 	bl	8004052 <HAL_PCD_SetAddress>
 800d328:	4603      	mov	r3, r0
 800d32a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d32c:	7bfb      	ldrb	r3, [r7, #15]
 800d32e:	4618      	mov	r0, r3
 800d330:	f000 f8b0 	bl	800d494 <USBD_Get_USB_Status>
 800d334:	4603      	mov	r3, r0
 800d336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d338:	7bbb      	ldrb	r3, [r7, #14]
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3710      	adds	r7, #16
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d342:	b580      	push	{r7, lr}
 800d344:	b086      	sub	sp, #24
 800d346:	af00      	add	r7, sp, #0
 800d348:	60f8      	str	r0, [r7, #12]
 800d34a:	607a      	str	r2, [r7, #4]
 800d34c:	603b      	str	r3, [r7, #0]
 800d34e:	460b      	mov	r3, r1
 800d350:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d352:	2300      	movs	r3, #0
 800d354:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d356:	2300      	movs	r3, #0
 800d358:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d360:	7af9      	ldrb	r1, [r7, #11]
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	687a      	ldr	r2, [r7, #4]
 800d366:	f7f6 ff96 	bl	8004296 <HAL_PCD_EP_Transmit>
 800d36a:	4603      	mov	r3, r0
 800d36c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d36e:	7dfb      	ldrb	r3, [r7, #23]
 800d370:	4618      	mov	r0, r3
 800d372:	f000 f88f 	bl	800d494 <USBD_Get_USB_Status>
 800d376:	4603      	mov	r3, r0
 800d378:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d37a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3718      	adds	r7, #24
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	607a      	str	r2, [r7, #4]
 800d38e:	603b      	str	r3, [r7, #0]
 800d390:	460b      	mov	r3, r1
 800d392:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d394:	2300      	movs	r3, #0
 800d396:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d398:	2300      	movs	r3, #0
 800d39a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3a2:	7af9      	ldrb	r1, [r7, #11]
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	f7f6 ff2a 	bl	8004200 <HAL_PCD_EP_Receive>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3b0:	7dfb      	ldrb	r3, [r7, #23]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f000 f86e 	bl	800d494 <USBD_Get_USB_Status>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d3bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3718      	adds	r7, #24
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
	...

0800d3c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d3d4:	78fb      	ldrb	r3, [r7, #3]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d002      	beq.n	800d3e0 <HAL_PCDEx_LPM_Callback+0x18>
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d01f      	beq.n	800d41e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d3de:	e03b      	b.n	800d458 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a1b      	ldr	r3, [r3, #32]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d007      	beq.n	800d3f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d3e8:	f7f3 fd32 	bl	8000e50 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3ec:	4b1c      	ldr	r3, [pc, #112]	; (800d460 <HAL_PCDEx_LPM_Callback+0x98>)
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	4a1b      	ldr	r2, [pc, #108]	; (800d460 <HAL_PCDEx_LPM_Callback+0x98>)
 800d3f2:	f023 0306 	bic.w	r3, r3, #6
 800d3f6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	6812      	ldr	r2, [r2, #0]
 800d406:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d40a:	f023 0301 	bic.w	r3, r3, #1
 800d40e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d416:	4618      	mov	r0, r3
 800d418:	f7fb ff00 	bl	800921c <USBD_LL_Resume>
    break;
 800d41c:	e01c      	b.n	800d458 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	6812      	ldr	r2, [r2, #0]
 800d42c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d430:	f043 0301 	orr.w	r3, r3, #1
 800d434:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fb fed7 	bl	80091f0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6a1b      	ldr	r3, [r3, #32]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d005      	beq.n	800d456 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d44a:	4b05      	ldr	r3, [pc, #20]	; (800d460 <HAL_PCDEx_LPM_Callback+0x98>)
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	4a04      	ldr	r2, [pc, #16]	; (800d460 <HAL_PCDEx_LPM_Callback+0x98>)
 800d450:	f043 0306 	orr.w	r3, r3, #6
 800d454:	6113      	str	r3, [r2, #16]
    break;
 800d456:	bf00      	nop
}
 800d458:	bf00      	nop
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	e000ed00 	.word	0xe000ed00

0800d464 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d46c:	4b03      	ldr	r3, [pc, #12]	; (800d47c <USBD_static_malloc+0x18>)
}
 800d46e:	4618      	mov	r0, r3
 800d470:	370c      	adds	r7, #12
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	200053f0 	.word	0x200053f0

0800d480 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]

}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
 800d49a:	4603      	mov	r3, r0
 800d49c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d4a2:	79fb      	ldrb	r3, [r7, #7]
 800d4a4:	2b03      	cmp	r3, #3
 800d4a6:	d817      	bhi.n	800d4d8 <USBD_Get_USB_Status+0x44>
 800d4a8:	a201      	add	r2, pc, #4	; (adr r2, 800d4b0 <USBD_Get_USB_Status+0x1c>)
 800d4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ae:	bf00      	nop
 800d4b0:	0800d4c1 	.word	0x0800d4c1
 800d4b4:	0800d4c7 	.word	0x0800d4c7
 800d4b8:	0800d4cd 	.word	0x0800d4cd
 800d4bc:	0800d4d3 	.word	0x0800d4d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d4c4:	e00b      	b.n	800d4de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4c6:	2303      	movs	r3, #3
 800d4c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ca:	e008      	b.n	800d4de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d4d0:	e005      	b.n	800d4de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4d2:	2303      	movs	r3, #3
 800d4d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d4d6:	e002      	b.n	800d4de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d4d8:	2303      	movs	r3, #3
 800d4da:	73fb      	strb	r3, [r7, #15]
    break;
 800d4dc:	bf00      	nop
  }
  return usb_status;
 800d4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3714      	adds	r7, #20
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800d4ec:	b480      	push	{r7}
 800d4ee:	b083      	sub	sp, #12
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	4608      	mov	r0, r1
 800d4f6:	4611      	mov	r1, r2
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	70fb      	strb	r3, [r7, #3]
 800d4fe:	460b      	mov	r3, r1
 800d500:	70bb      	strb	r3, [r7, #2]
 800d502:	4613      	mov	r3, r2
 800d504:	707b      	strb	r3, [r7, #1]
                return 0;
 800d506:	2300      	movs	r3, #0
        }
 800d508:	4618      	mov	r0, r3
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	4608      	mov	r0, r1
 800d51e:	4611      	mov	r1, r2
 800d520:	461a      	mov	r2, r3
 800d522:	4603      	mov	r3, r0
 800d524:	70fb      	strb	r3, [r7, #3]
 800d526:	460b      	mov	r3, r1
 800d528:	70bb      	strb	r3, [r7, #2]
 800d52a:	4613      	mov	r3, r2
 800d52c:	707b      	strb	r3, [r7, #1]
                return 0;
 800d52e:	2300      	movs	r3, #0
        }
 800d530:	4618      	mov	r0, r3
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
                return 0;
 800d544:	2300      	movs	r3, #0
        }
 800d546:	4618      	mov	r0, r3
 800d548:	370c      	adds	r7, #12
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800d552:	b480      	push	{r7}
 800d554:	b083      	sub	sp, #12
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
                return 0;
 800d55a:	2300      	movs	r3, #0
        }
 800d55c:	4618      	mov	r0, r3
 800d55e:	370c      	adds	r7, #12
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr

0800d568 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
                return 0;
 800d570:	2300      	movs	r3, #0
        }
 800d572:	4618      	mov	r0, r3
 800d574:	370c      	adds	r7, #12
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800d57e:	b480      	push	{r7}
 800d580:	b083      	sub	sp, #12
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
 800d586:	460b      	mov	r3, r1
 800d588:	70fb      	strb	r3, [r7, #3]
                return;
 800d58a:	bf00      	nop
        } // Note used for hubs only!
 800d58c:	370c      	adds	r7, #12
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr

0800d596 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800d596:	b480      	push	{r7}
 800d598:	b083      	sub	sp, #12
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	460b      	mov	r3, r1
 800d5a0:	807b      	strh	r3, [r7, #2]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	803b      	strh	r3, [r7, #0]
                return false;
 800d5a6:	2300      	movs	r3, #0
        }
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	370c      	adds	r7, #12
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	460b      	mov	r3, r1
 800d5be:	70fb      	strb	r3, [r7, #3]
                return false;
 800d5c0:	2300      	movs	r3, #0
        }
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	370c      	adds	r7, #12
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr

0800d5ce <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800d5ce:	b480      	push	{r7}
 800d5d0:	b083      	sub	sp, #12
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	70fb      	strb	r3, [r7, #3]
                return true;
 800d5da:	2301      	movs	r3, #1
        }
 800d5dc:	4618      	mov	r0, r3
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800d5f0:	687b      	ldr	r3, [r7, #4]
        };
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	370c      	adds	r7, #12
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr

0800d5fe <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800d5fe:	b480      	push	{r7}
 800d600:	b085      	sub	sp, #20
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d608:	2300      	movs	r3, #0
 800d60a:	73fb      	strb	r3, [r7, #15]
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
 800d60e:	2b0f      	cmp	r3, #15
 800d610:	d812      	bhi.n	800d638 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800d612:	7bfa      	ldrb	r2, [r7, #15]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	321e      	adds	r2, #30
 800d618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d107      	bne.n	800d630 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800d620:	7bfa      	ldrb	r2, [r7, #15]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	321e      	adds	r2, #30
 800d626:	6839      	ldr	r1, [r7, #0]
 800d628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	e004      	b.n	800d63a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d630:	7bfb      	ldrb	r3, [r7, #15]
 800d632:	3301      	adds	r3, #1
 800d634:	73fb      	strb	r3, [r7, #15]
 800d636:	e7e9      	b.n	800d60c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800d638:	23d3      	movs	r3, #211	; 0xd3
        };
 800d63a:	4618      	mov	r0, r3
 800d63c:	3714      	adds	r7, #20
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr

0800d646 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800d646:	b480      	push	{r7}
 800d648:	b083      	sub	sp, #12
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2200      	movs	r2, #0
 800d652:	701a      	strb	r2, [r3, #0]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	705a      	strb	r2, [r3, #1]
 800d65a:	2200      	movs	r2, #0
 800d65c:	709a      	strb	r2, [r3, #2]
 800d65e:	2200      	movs	r2, #0
 800d660:	70da      	strb	r2, [r3, #3]
 800d662:	2200      	movs	r2, #0
 800d664:	711a      	strb	r2, [r3, #4]
        };
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4618      	mov	r0, r3
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	601a      	str	r2, [r3, #0]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	711a      	strb	r2, [r3, #4]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	715a      	strb	r2, [r3, #5]
        };
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	4618      	mov	r0, r3
 800d692:	370c      	adds	r7, #12
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr

0800d69c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	781a      	ldrb	r2, [r3, #0]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	715a      	strb	r2, [r3, #5]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	795a      	ldrb	r2, [r3, #5]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	711a      	strb	r2, [r3, #4]
        };
 800d6c0:	bf00      	nop
 800d6c2:	370c      	adds	r7, #12
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr

0800d6cc <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	601a      	str	r2, [r3, #0]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	711a      	strb	r2, [r3, #4]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	80da      	strh	r2, [r3, #6]
        };
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	80da      	strh	r2, [r3, #6]
        };
 800d70e:	bf00      	nop
 800d710:	370c      	adds	r7, #12
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr

0800d71a <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800d71a:	b480      	push	{r7}
 800d71c:	b085      	sub	sp, #20
 800d71e:	af00      	add	r7, sp, #0
 800d720:	60f8      	str	r0, [r7, #12]
 800d722:	60b9      	str	r1, [r7, #8]
 800d724:	607a      	str	r2, [r7, #4]
 800d726:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	791b      	ldrb	r3, [r3, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d002      	beq.n	800d736 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800d730:	2b01      	cmp	r3, #1
 800d732:	d009      	beq.n	800d748 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800d734:	e029      	b.n	800d78a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	887a      	ldrh	r2, [r7, #2]
 800d73a:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	791b      	ldrb	r3, [r3, #4]
 800d740:	3301      	adds	r3, #1
 800d742:	b2da      	uxtb	r2, r3
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	88db      	ldrh	r3, [r3, #6]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d015      	beq.n	800d77c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	881b      	ldrh	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d011      	beq.n	800d77c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	88db      	ldrh	r3, [r3, #6]
 800d75c:	3b01      	subs	r3, #1
 800d75e:	b29a      	uxth	r2, r3
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	80da      	strh	r2, [r3, #6]
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	1c5a      	adds	r2, r3, #1
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	601a      	str	r2, [r3, #0]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	881b      	ldrh	r3, [r3, #0]
 800d772:	3b01      	subs	r3, #1
 800d774:	b29a      	uxth	r2, r3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	801a      	strh	r2, [r3, #0]
 800d77a:	e7e5      	b.n	800d748 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	88db      	ldrh	r3, [r3, #6]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d102      	bne.n	800d78a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2200      	movs	r2, #0
 800d788:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	88db      	ldrh	r3, [r3, #6]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	bf0c      	ite	eq
 800d792:	2301      	moveq	r3, #1
 800d794:	2300      	movne	r3, #0
 800d796:	b2db      	uxtb	r3, r3
        };
 800d798:	4618      	mov	r0, r3
 800d79a:	3714      	adds	r7, #20
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	4608      	mov	r0, r1
 800d7ae:	4611      	mov	r1, r2
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	70fb      	strb	r3, [r7, #3]
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	70bb      	strb	r3, [r7, #2]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	707b      	strb	r3, [r7, #1]
        };
 800d7be:	bf00      	nop
 800d7c0:	370c      	adds	r7, #12
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
	...

0800d7cc <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	4a04      	ldr	r2, [pc, #16]	; (800d7e8 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	601a      	str	r2, [r3, #0]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr
 800d7e8:	08014948 	.word	0x08014948

0800d7ec <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	4a04      	ldr	r2, [pc, #16]	; (800d808 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	601a      	str	r2, [r3, #0]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr
 800d808:	08014930 	.word	0x08014930

0800d80c <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
                return bAddress;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800d81a:	4618      	mov	r0, r3
 800d81c:	370c      	adds	r7, #12
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800d826:	b480      	push	{r7}
 800d828:	b083      	sub	sp, #12
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800d834:	4618      	mov	r0, r3
 800d836:	370c      	adds	r7, #12
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr

0800d840 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	460b      	mov	r3, r1
 800d84a:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800d84c:	78fb      	ldrb	r3, [r7, #3]
 800d84e:	2be0      	cmp	r3, #224	; 0xe0
 800d850:	bf0c      	ite	eq
 800d852:	2301      	moveq	r3, #1
 800d854:	2300      	movne	r3, #0
 800d856:	b2db      	uxtb	r3, r3
        };
 800d858:	4618      	mov	r0, r3
 800d85a:	370c      	adds	r7, #12
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	460b      	mov	r3, r1
 800d86e:	807b      	strh	r3, [r7, #2]
 800d870:	4613      	mov	r3, r2
 800d872:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800d874:	887b      	ldrh	r3, [r7, #2]
 800d876:	f640 225c 	movw	r2, #2652	; 0xa5c
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d104      	bne.n	800d888 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800d87e:	883b      	ldrh	r3, [r7, #0]
 800d880:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800d884:	4293      	cmp	r3, r2
 800d886:	d009      	beq.n	800d89c <_ZN3BTD8VIDPIDOKEtt+0x38>
 800d888:	887b      	ldrh	r3, [r7, #2]
 800d88a:	f240 520d 	movw	r2, #1293	; 0x50d
 800d88e:	4293      	cmp	r3, r2
 800d890:	d106      	bne.n	800d8a0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800d892:	883b      	ldrh	r3, [r7, #0]
 800d894:	f240 625a 	movw	r2, #1626	; 0x65a
 800d898:	4293      	cmp	r3, r2
 800d89a:	d101      	bne.n	800d8a0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800d89c:	2301      	movs	r3, #1
 800d89e:	e02d      	b.n	800d8fc <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	7d1b      	ldrb	r3, [r3, #20]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d113      	bne.n	800d8d0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	7d5b      	ldrb	r3, [r3, #21]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d10f      	bne.n	800d8d0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	7d9b      	ldrb	r3, [r3, #22]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d10b      	bne.n	800d8d0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	7ddb      	ldrb	r3, [r3, #23]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d107      	bne.n	800d8d0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	7e1b      	ldrb	r3, [r3, #24]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d103      	bne.n	800d8d0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	7e5b      	ldrb	r3, [r3, #25]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d014      	beq.n	800d8fa <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800d8d0:	887b      	ldrh	r3, [r7, #2]
 800d8d2:	f240 524c 	movw	r2, #1356	; 0x54c
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d10f      	bne.n	800d8fa <_ZN3BTD8VIDPIDOKEtt+0x96>
 800d8da:	883b      	ldrh	r3, [r7, #0]
 800d8dc:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800d8e0:	d009      	beq.n	800d8f6 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800d8e2:	883b      	ldrh	r3, [r7, #0]
 800d8e4:	f240 422f 	movw	r2, #1071	; 0x42f
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d004      	beq.n	800d8f6 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800d8ec:	883b      	ldrh	r3, [r7, #0]
 800d8ee:	f240 32d5 	movw	r2, #981	; 0x3d5
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d101      	bne.n	800d8fa <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e000      	b.n	800d8fc <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800d8fa:	2300      	movs	r3, #0
        };
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4618      	mov	r0, r3
 800d916:	f7ff ff59 	bl	800d7cc <_ZN15USBDeviceConfigC1Ev>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	3304      	adds	r3, #4
 800d91e:	4618      	mov	r0, r3
 800d920:	f7ff ff64 	bl	800d7ec <_ZN17UsbConfigXtracterC1Ev>
 800d924:	4a2b      	ldr	r2, [pc, #172]	; (800d9d4 <_ZN3BTDC1EP3USB+0xcc>)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	601a      	str	r2, [r3, #0]
 800d92a:	4a2b      	ldr	r2, [pc, #172]	; (800d9d8 <_ZN3BTDC1EP3USB+0xd0>)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	605a      	str	r2, [r3, #4]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	683a      	ldr	r2, [r7, #0]
 800d95c:	64da      	str	r2, [r3, #76]	; 0x4c
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2201      	movs	r2, #1
 800d96a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	661a      	str	r2, [r3, #96]	; 0x60
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2200      	movs	r2, #0
 800d978:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800d98c:	2300      	movs	r3, #0
 800d98e:	73fb      	strb	r3, [r7, #15]
 800d990:	7bfb      	ldrb	r3, [r7, #15]
 800d992:	2b03      	cmp	r3, #3
 800d994:	d80a      	bhi.n	800d9ac <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800d996:	7bfb      	ldrb	r3, [r7, #15]
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	3318      	adds	r3, #24
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	4413      	add	r3, r2
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800d9a4:	7bfb      	ldrb	r3, [r7, #15]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	73fb      	strb	r3, [r7, #15]
 800d9aa:	e7f1      	b.n	800d990 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 fa7d 	bl	800deac <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d006      	beq.n	800d9c8 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	4611      	mov	r1, r2
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7ff fe1b 	bl	800d5fe <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	080148f0 	.word	0x080148f0
 800d9d8:	08014924 	.word	0x08014924

0800d9dc <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800d9dc:	b590      	push	{r4, r7, lr}
 800d9de:	b08f      	sub	sp, #60	; 0x3c
 800d9e0:	af02      	add	r7, sp, #8
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	4608      	mov	r0, r1
 800d9e6:	4611      	mov	r1, r2
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	70fb      	strb	r3, [r7, #3]
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	70bb      	strb	r3, [r7, #2]
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800d9f6:	2312      	movs	r3, #18
 800d9f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800d9fc:	f107 0308 	add.w	r3, r7, #8
 800da00:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800da02:	2300      	movs	r3, #0
 800da04:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800da06:	2300      	movs	r3, #0
 800da08:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 fa4e 	bl	800deac <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da14:	4618      	mov	r0, r3
 800da16:	f7ff fde7 	bl	800d5e8 <_ZN3USB14GetAddressPoolEv>
 800da1a:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800da22:	2b00      	cmp	r3, #0
 800da24:	d001      	beq.n	800da2a <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800da26:	23d9      	movs	r3, #217	; 0xd9
 800da28:	e087      	b.n	800db3a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	2100      	movs	r1, #0
 800da32:	69f8      	ldr	r0, [r7, #28]
 800da34:	4798      	blx	r3
 800da36:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800da38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d101      	bne.n	800da42 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800da3e:	23d6      	movs	r3, #214	; 0xd6
 800da40:	e07b      	b.n	800db3a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800da42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d101      	bne.n	800da4e <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800da4a:	23d7      	movs	r3, #215	; 0xd7
 800da4c:	e075      	b.n	800db3a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800da4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800da5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5c:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800da5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da60:	787a      	ldrb	r2, [r7, #1]
 800da62:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800da68:	f107 0308 	add.w	r3, r7, #8
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	2312      	movs	r3, #18
 800da70:	2200      	movs	r2, #0
 800da72:	2100      	movs	r1, #0
 800da74:	f005 fa13 	bl	8012e9e <_ZN3USB11getDevDescrEhhtPh>
 800da78:	4603      	mov	r3, r0
 800da7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800da7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da80:	6a3a      	ldr	r2, [r7, #32]
 800da82:	601a      	str	r2, [r3, #0]

        if(rcode)
 800da84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d146      	bne.n	800db1a <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	3304      	adds	r3, #4
 800da92:	681c      	ldr	r4, [r3, #0]
 800da94:	78bb      	ldrb	r3, [r7, #2]
 800da96:	78f9      	ldrb	r1, [r7, #3]
 800da98:	2200      	movs	r2, #0
 800da9a:	69f8      	ldr	r0, [r7, #28]
 800da9c:	47a0      	blx	r4
 800da9e:	4603      	mov	r3, r0
 800daa0:	461a      	mov	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d101      	bne.n	800dab6 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800dab2:	23d4      	movs	r3, #212	; 0xd4
 800dab4:	e041      	b.n	800db3a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800dab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab8:	791b      	ldrb	r3, [r3, #4]
 800daba:	2b09      	cmp	r3, #9
 800dabc:	d017      	beq.n	800daee <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800dabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac0:	79da      	ldrb	r2, [r3, #7]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800dac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daca:	7c5a      	ldrb	r2, [r3, #17]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800dad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad4:	891b      	ldrh	r3, [r3, #8]
 800dad6:	b29a      	uxth	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800dade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae0:	895b      	ldrh	r3, [r3, #10]
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800daea:	23e0      	movs	r3, #224	; 0xe0
 800daec:	e025      	b.n	800db3a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800daee:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dafa:	2300      	movs	r3, #0
 800dafc:	2200      	movs	r2, #0
 800dafe:	f005 fa6b 	bl	8012fd8 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800db02:	23d1      	movs	r3, #209	; 0xd1
 800db04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	3308      	adds	r3, #8
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	4798      	blx	r3
        return rcode;
 800db14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db18:	e00f      	b.n	800db3a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800db1a:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800db1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db20:	2b0d      	cmp	r3, #13
 800db22:	d002      	beq.n	800db2a <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800db24:	23e1      	movs	r3, #225	; 0xe1
 800db26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	3308      	adds	r3, #8
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	4798      	blx	r3
        return rcode;
 800db36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800db3a:	4618      	mov	r0, r3
 800db3c:	3734      	adds	r7, #52	; 0x34
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd90      	pop	{r4, r7, pc}

0800db42 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800db42:	b580      	push	{r7, lr}
 800db44:	b096      	sub	sp, #88	; 0x58
 800db46:	af02      	add	r7, sp, #8
 800db48:	6078      	str	r0, [r7, #4]
 800db4a:	4608      	mov	r0, r1
 800db4c:	4611      	mov	r1, r2
 800db4e:	461a      	mov	r2, r3
 800db50:	4603      	mov	r3, r0
 800db52:	70fb      	strb	r3, [r7, #3]
 800db54:	460b      	mov	r3, r1
 800db56:	70bb      	strb	r3, [r7, #2]
 800db58:	4613      	mov	r3, r2
 800db5a:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800db62:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2200      	movs	r2, #0
 800db6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db72:	4618      	mov	r0, r3
 800db74:	f7ff fd38 	bl	800d5e8 <_ZN3USB14GetAddressPoolEv>
 800db78:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800db7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800db86:	4611      	mov	r1, r2
 800db88:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800db8a:	4798      	blx	r3
 800db8c:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800db8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db90:	2b00      	cmp	r3, #0
 800db92:	d101      	bne.n	800db98 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800db94:	23d6      	movs	r3, #214	; 0xd6
 800db96:	e185      	b.n	800dea4 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 800db98:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800db9c:	f7f4 fdfc 	bl	8002798 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dbaa:	2200      	movs	r2, #0
 800dbac:	2100      	movs	r1, #0
 800dbae:	f005 fa13 	bl	8012fd8 <_ZN3USB7setAddrEhhh>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800dbb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d003      	beq.n	800dbc8 <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800dbc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800dbc6:	e165      	b.n	800de94 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800dbc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbca:	2200      	movs	r2, #0
 800dbcc:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800dbce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800dbda:	4611      	mov	r1, r2
 800dbdc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dbde:	4798      	blx	r3
 800dbe0:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800dbe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d101      	bne.n	800dbec <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dbe8:	23d6      	movs	r3, #214	; 0xd6
 800dbea:	e15b      	b.n	800dea4 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 800dbec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbee:	787a      	ldrb	r2, [r7, #1]
 800dbf0:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	3351      	adds	r3, #81	; 0x51
 800dc00:	2201      	movs	r2, #1
 800dc02:	f004 f8dc 	bl	8011dbe <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800dc06:	4603      	mov	r3, r0
 800dc08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800dc0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f040 8128 	bne.w	800de66 <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800dc1c:	f240 524c 	movw	r2, #1356	; 0x54c
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d177      	bne.n	800dd14 <_ZN3BTD4InitEhhb+0x1d2>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dc2a:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800dc2e:	d00d      	beq.n	800dc4c <_ZN3BTD4InitEhhb+0x10a>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dc36:	f240 422f 	movw	r2, #1071	; 0x42f
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d006      	beq.n	800dc4c <_ZN3BTD4InitEhhb+0x10a>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dc44:	f240 32d5 	movw	r2, #981	; 0x3d5
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d163      	bne.n	800dd14 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 800dc4c:	2064      	movs	r0, #100	; 0x64
 800dc4e:	f7f4 fda3 	bl	8002798 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800dc62:	2301      	movs	r3, #1
 800dc64:	f005 f9e6 	bl	8013034 <_ZN3USB7setConfEhhh>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800dc6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	f040 80f9 	bne.w	800de6a <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	7d1b      	ldrb	r3, [r3, #20]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d113      	bne.n	800dca8 <_ZN3BTD4InitEhhb+0x166>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	7d5b      	ldrb	r3, [r3, #21]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d10f      	bne.n	800dca8 <_ZN3BTD4InitEhhb+0x166>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	7d9b      	ldrb	r3, [r3, #22]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d10b      	bne.n	800dca8 <_ZN3BTD4InitEhhb+0x166>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	7ddb      	ldrb	r3, [r3, #23]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d107      	bne.n	800dca8 <_ZN3BTD4InitEhhb+0x166>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	7e1b      	ldrb	r3, [r3, #24]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d103      	bne.n	800dca8 <_ZN3BTD4InitEhhb+0x166>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	7e5b      	ldrb	r3, [r3, #25]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d019      	beq.n	800dcdc <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dcae:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800dcb2:	d006      	beq.n	800dcc2 <_ZN3BTD4InitEhhb+0x180>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dcba:	f240 422f 	movw	r2, #1071	; 0x42f
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d106      	bne.n	800dcd0 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	3314      	adds	r3, #20
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f002 f8b0 	bl	800fe2e <_ZN3BTD9setBdaddrEPh>
 800dcce:	e005      	b.n	800dcdc <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	3314      	adds	r3, #20
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f002 f8e9 	bl	800feae <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800dcec:	2300      	movs	r3, #0
 800dcee:	f005 f9a1 	bl	8013034 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f005 f96a 	bl	8012fd8 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	3308      	adds	r3, #8
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800dd10:	23d1      	movs	r3, #209	; 0xd1
 800dd12:	e0c7      	b.n	800dea4 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800dd14:	2300      	movs	r3, #0
 800dd16:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800dd1a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800dd1e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d25e      	bcs.n	800dde4 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800dd2c:	f640 225c 	movw	r2, #2652	; 0xa5c
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d106      	bne.n	800dd42 <_ZN3BTD4InitEhhb+0x200>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dd3a:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d00d      	beq.n	800dd5e <_ZN3BTD4InitEhhb+0x21c>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800dd48:	f240 520d 	movw	r2, #1293	; 0x50d
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d120      	bne.n	800dd92 <_ZN3BTD4InitEhhb+0x250>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dd56:	f240 625a 	movw	r2, #1626	; 0x65a
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d119      	bne.n	800dd92 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	1d1a      	adds	r2, r3, #4
 800dd62:	f107 0308 	add.w	r3, r7, #8
 800dd66:	4611      	mov	r1, r2
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f002 f8f3 	bl	800ff54 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dd78:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800dd7c:	f107 0308 	add.w	r3, r7, #8
 800dd80:	9300      	str	r3, [sp, #0]
 800dd82:	4613      	mov	r3, r2
 800dd84:	2200      	movs	r2, #0
 800dd86:	f005 f8da 	bl	8012f3e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dd90:	e018      	b.n	800ddc4 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	1d1a      	adds	r2, r3, #4
 800dd96:	f107 0308 	add.w	r3, r7, #8
 800dd9a:	4611      	mov	r1, r2
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f002 f927 	bl	800fff0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ddac:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ddb0:	f107 0308 	add.w	r3, r7, #8
 800ddb4:	9300      	str	r3, [sp, #0]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f005 f8c0 	bl	8012f3e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800ddc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d150      	bne.n	800de6e <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ddd2:	2b03      	cmp	r3, #3
 800ddd4:	d805      	bhi.n	800dde2 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800ddd6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ddda:	3301      	adds	r3, #1
 800dddc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800dde0:	e79b      	b.n	800dd1a <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 800dde2:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	d945      	bls.n	800de7a <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	3351      	adds	r3, #81	; 0x51
 800de02:	f003 ffdc 	bl	8011dbe <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800de06:	4603      	mov	r3, r0
 800de08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800de0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800de10:	2b00      	cmp	r3, #0
 800de12:	d12e      	bne.n	800de72 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de2a:	f005 f903 	bl	8013034 <_ZN3USB7setConfEhhh>
 800de2e:	4603      	mov	r3, r0
 800de30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800de34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d11c      	bne.n	800de76 <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2264      	movs	r2, #100	; 0x64
 800de40:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2200      	movs	r2, #0
 800de48:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2200      	movs	r2, #0
 800de50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2201      	movs	r2, #1
 800de5e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800de62:	2300      	movs	r3, #0
 800de64:	e01e      	b.n	800dea4 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 800de66:	bf00      	nop
 800de68:	e014      	b.n	800de94 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800de6a:	bf00      	nop
 800de6c:	e012      	b.n	800de94 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 800de6e:	bf00      	nop
 800de70:	e010      	b.n	800de94 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 800de72:	bf00      	nop
 800de74:	e00e      	b.n	800de94 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800de76:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800de78:	e00c      	b.n	800de94 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 800de7a:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800de86:	2300      	movs	r3, #0
 800de88:	2200      	movs	r2, #0
 800de8a:	f005 f8a5 	bl	8012fd8 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800de8e:	23d1      	movs	r3, #209	; 0xd1
 800de90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	3308      	adds	r3, #8
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	4798      	blx	r3
        return rcode;
 800dea0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3750      	adds	r7, #80	; 0x50
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800deb4:	2300      	movs	r3, #0
 800deb6:	73fb      	strb	r3, [r7, #15]
 800deb8:	7bfb      	ldrb	r3, [r7, #15]
 800deba:	2b03      	cmp	r3, #3
 800debc:	d845      	bhi.n	800df4a <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800debe:	7bfa      	ldrb	r2, [r7, #15]
 800dec0:	6879      	ldr	r1, [r7, #4]
 800dec2:	4613      	mov	r3, r2
 800dec4:	005b      	lsls	r3, r3, #1
 800dec6:	4413      	add	r3, r2
 800dec8:	440b      	add	r3, r1
 800deca:	3351      	adds	r3, #81	; 0x51
 800decc:	2200      	movs	r2, #0
 800dece:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d001      	beq.n	800deda <_ZN3BTD10InitializeEv+0x2e>
 800ded6:	2000      	movs	r0, #0
 800ded8:	e000      	b.n	800dedc <_ZN3BTD10InitializeEv+0x30>
 800deda:	2008      	movs	r0, #8
 800dedc:	7bfa      	ldrb	r2, [r7, #15]
 800dede:	6879      	ldr	r1, [r7, #4]
 800dee0:	4613      	mov	r3, r2
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	4413      	add	r3, r2
 800dee6:	440b      	add	r3, r1
 800dee8:	3352      	adds	r3, #82	; 0x52
 800deea:	4602      	mov	r2, r0
 800deec:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800deee:	7bfa      	ldrb	r2, [r7, #15]
 800def0:	6879      	ldr	r1, [r7, #4]
 800def2:	4613      	mov	r3, r2
 800def4:	005b      	lsls	r3, r3, #1
 800def6:	4413      	add	r3, r2
 800def8:	440b      	add	r3, r1
 800defa:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800defe:	78d3      	ldrb	r3, [r2, #3]
 800df00:	f36f 0300 	bfc	r3, #0, #1
 800df04:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800df06:	7bfa      	ldrb	r2, [r7, #15]
 800df08:	6879      	ldr	r1, [r7, #4]
 800df0a:	4613      	mov	r3, r2
 800df0c:	005b      	lsls	r3, r3, #1
 800df0e:	4413      	add	r3, r2
 800df10:	440b      	add	r3, r1
 800df12:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800df16:	78d3      	ldrb	r3, [r2, #3]
 800df18:	f36f 0341 	bfc	r3, #1, #1
 800df1c:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d001      	beq.n	800df28 <_ZN3BTD10InitializeEv+0x7c>
 800df24:	2101      	movs	r1, #1
 800df26:	e000      	b.n	800df2a <_ZN3BTD10InitializeEv+0x7e>
 800df28:	210f      	movs	r1, #15
 800df2a:	7bfa      	ldrb	r2, [r7, #15]
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	4613      	mov	r3, r2
 800df30:	005b      	lsls	r3, r3, #1
 800df32:	4413      	add	r3, r2
 800df34:	4403      	add	r3, r0
 800df36:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800df3a:	78d3      	ldrb	r3, [r2, #3]
 800df3c:	f361 0387 	bfi	r3, r1, #2, #6
 800df40:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800df42:	7bfb      	ldrb	r3, [r7, #15]
 800df44:	3301      	adds	r3, #1
 800df46:	73fb      	strb	r3, [r7, #15]
 800df48:	e7b6      	b.n	800deb8 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800df4a:	2300      	movs	r3, #0
 800df4c:	73fb      	strb	r3, [r7, #15]
 800df4e:	7bfb      	ldrb	r3, [r7, #15]
 800df50:	2b03      	cmp	r3, #3
 800df52:	d81c      	bhi.n	800df8e <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800df54:	7bfb      	ldrb	r3, [r7, #15]
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	3318      	adds	r3, #24
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	4413      	add	r3, r2
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d010      	beq.n	800df86 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800df64:	7bfb      	ldrb	r3, [r7, #15]
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	3318      	adds	r3, #24
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	4413      	add	r3, r2
 800df6e:	6859      	ldr	r1, [r3, #4]
 800df70:	7bfb      	ldrb	r3, [r7, #15]
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	3318      	adds	r3, #24
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	4413      	add	r3, r2
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	3308      	adds	r3, #8
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4608      	mov	r0, r1
 800df84:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800df86:	7bfb      	ldrb	r3, [r7, #15]
 800df88:	3301      	adds	r3, #1
 800df8a:	73fb      	strb	r3, [r7, #15]
 800df8c:	e7df      	b.n	800df4e <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2200      	movs	r2, #0
 800df92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800dfe4:	bf00      	nop
 800dfe6:	3710      	adds	r7, #16
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800dfec:	b480      	push	{r7}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	4608      	mov	r0, r1
 800dff6:	4611      	mov	r1, r2
 800dff8:	461a      	mov	r2, r3
 800dffa:	4603      	mov	r3, r0
 800dffc:	70fb      	strb	r3, [r7, #3]
 800dffe:	460b      	mov	r3, r1
 800e000:	70bb      	strb	r3, [r7, #2]
 800e002:	4613      	mov	r3, r2
 800e004:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800e006:	787b      	ldrb	r3, [r7, #1]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d15d      	bne.n	800e0c8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	78fa      	ldrb	r2, [r7, #3]
 800e010:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	78db      	ldrb	r3, [r3, #3]
 800e018:	f003 0303 	and.w	r3, r3, #3
 800e01c:	2b03      	cmp	r3, #3
 800e01e:	d114      	bne.n	800e04a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	789b      	ldrb	r3, [r3, #2]
 800e024:	b25b      	sxtb	r3, r3
 800e026:	2b00      	cmp	r3, #0
 800e028:	da0f      	bge.n	800e04a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800e02a:	2301      	movs	r3, #1
 800e02c:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800e02e:	7bfa      	ldrb	r2, [r7, #15]
 800e030:	6879      	ldr	r1, [r7, #4]
 800e032:	4613      	mov	r3, r2
 800e034:	005b      	lsls	r3, r3, #1
 800e036:	4413      	add	r3, r2
 800e038:	440b      	add	r3, r1
 800e03a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e03e:	78d3      	ldrb	r3, [r2, #3]
 800e040:	2101      	movs	r1, #1
 800e042:	f361 0387 	bfi	r3, r1, #2, #6
 800e046:	70d3      	strb	r3, [r2, #3]
 800e048:	e00e      	b.n	800e068 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800e04a:	69fb      	ldr	r3, [r7, #28]
 800e04c:	78db      	ldrb	r3, [r3, #3]
 800e04e:	f003 0303 	and.w	r3, r3, #3
 800e052:	2b02      	cmp	r3, #2
 800e054:	d13a      	bne.n	800e0cc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	789b      	ldrb	r3, [r3, #2]
 800e05a:	b25b      	sxtb	r3, r3
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	da01      	bge.n	800e064 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800e060:	2302      	movs	r3, #2
 800e062:	e000      	b.n	800e066 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800e064:	2303      	movs	r3, #3
 800e066:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	789b      	ldrb	r3, [r3, #2]
 800e06c:	7bfa      	ldrb	r2, [r7, #15]
 800e06e:	f003 030f 	and.w	r3, r3, #15
 800e072:	b2d8      	uxtb	r0, r3
 800e074:	6879      	ldr	r1, [r7, #4]
 800e076:	4613      	mov	r3, r2
 800e078:	005b      	lsls	r3, r3, #1
 800e07a:	4413      	add	r3, r2
 800e07c:	440b      	add	r3, r1
 800e07e:	3351      	adds	r3, #81	; 0x51
 800e080:	4602      	mov	r2, r0
 800e082:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	889b      	ldrh	r3, [r3, #4]
 800e088:	b29b      	uxth	r3, r3
 800e08a:	7bfa      	ldrb	r2, [r7, #15]
 800e08c:	b2d8      	uxtb	r0, r3
 800e08e:	6879      	ldr	r1, [r7, #4]
 800e090:	4613      	mov	r3, r2
 800e092:	005b      	lsls	r3, r3, #1
 800e094:	4413      	add	r3, r2
 800e096:	440b      	add	r3, r1
 800e098:	3352      	adds	r3, #82	; 0x52
 800e09a:	4602      	mov	r2, r0
 800e09c:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	799b      	ldrb	r3, [r3, #6]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d204      	bcs.n	800e0b6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	799a      	ldrb	r2, [r3, #6]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800e0bc:	3301      	adds	r3, #1
 800e0be:	b2da      	uxtb	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800e0c6:	e002      	b.n	800e0ce <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800e0c8:	bf00      	nop
 800e0ca:	e000      	b.n	800e0ce <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800e0cc:	bf00      	nop
}
 800e0ce:	3714      	adds	r7, #20
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800e0d8:	f1a0 0004 	sub.w	r0, r0, #4
 800e0dc:	f7ff bf86 	b.w	800dfec <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800e0e0 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f7ff fedf 	bl	800deac <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7ff fa78 	bl	800d5e8 <_ZN3USB14GetAddressPoolEv>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	3208      	adds	r2, #8
 800e0fe:	6812      	ldr	r2, [r2, #0]
 800e100:	6879      	ldr	r1, [r7, #4]
 800e102:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800e106:	4618      	mov	r0, r3
 800e108:	4790      	blx	r2
        return 0;
 800e10a:	2300      	movs	r3, #0
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800e122:	f083 0301 	eor.w	r3, r3, #1
 800e126:	b2db      	uxtb	r3, r3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d001      	beq.n	800e130 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800e12c:	2300      	movs	r3, #0
 800e12e:	e01d      	b.n	800e16c <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800e130:	f7f4 fb26 	bl	8002780 <HAL_GetTick>
 800e134:	4602      	mov	r2, r0
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e13a:	1ad3      	subs	r3, r2, r3
 800e13c:	43db      	mvns	r3, r3
 800e13e:	0fdb      	lsrs	r3, r3, #31
 800e140:	b2db      	uxtb	r3, r3
 800e142:	2b00      	cmp	r3, #0
 800e144:	d011      	beq.n	800e16a <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800e146:	f7f4 fb1b 	bl	8002780 <HAL_GetTick>
 800e14a:	4602      	mov	r2, r0
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e152:	441a      	add	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f000 f80b 	bl	800e174 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 fb22 	bl	800e7a8 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 fe4b 	bl	800ee00 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800e16a:	2300      	movs	r3, #0
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3708      	adds	r7, #8
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800e174:	b5b0      	push	{r4, r5, r7, lr}
 800e176:	b088      	sub	sp, #32
 800e178:	af02      	add	r7, sp, #8
 800e17a:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800e17c:	2340      	movs	r3, #64	; 0x40
 800e17e:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	3389      	adds	r3, #137	; 0x89
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800e19a:	f107 050c 	add.w	r5, r7, #12
 800e19e:	9201      	str	r2, [sp, #4]
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	462b      	mov	r3, r5
 800e1a4:	4622      	mov	r2, r4
 800e1a6:	f003 ff72 	bl	801208e <_ZN3USB10inTransferEhhPtPhh>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800e1ae:	7bfb      	ldrb	r3, [r7, #15]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d003      	beq.n	800e1bc <_ZN3BTD14HCI_event_taskEv+0x48>
 800e1b4:	7bfb      	ldrb	r3, [r7, #15]
 800e1b6:	2b04      	cmp	r3, #4
 800e1b8:	f040 82f1 	bne.w	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	2b35      	cmp	r3, #53	; 0x35
 800e1c6:	f200 82ea 	bhi.w	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>
 800e1ca:	a201      	add	r2, pc, #4	; (adr r2, 800e1d0 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800e1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d0:	0800e3b1 	.word	0x0800e3b1
 800e1d4:	0800e411 	.word	0x0800e411
 800e1d8:	0800e569 	.word	0x0800e569
 800e1dc:	0800e653 	.word	0x0800e653
 800e1e0:	0800e5c5 	.word	0x0800e5c5
 800e1e4:	0800e711 	.word	0x0800e711
 800e1e8:	0800e5f7 	.word	0x0800e5f7
 800e1ec:	0800e789 	.word	0x0800e789
 800e1f0:	0800e789 	.word	0x0800e789
 800e1f4:	0800e79f 	.word	0x0800e79f
 800e1f8:	0800e79f 	.word	0x0800e79f
 800e1fc:	0800e789 	.word	0x0800e789
 800e200:	0800e789 	.word	0x0800e789
 800e204:	0800e2a9 	.word	0x0800e2a9
 800e208:	0800e789 	.word	0x0800e789
 800e20c:	0800e79f 	.word	0x0800e79f
 800e210:	0800e79f 	.word	0x0800e79f
 800e214:	0800e789 	.word	0x0800e789
 800e218:	0800e789 	.word	0x0800e789
 800e21c:	0800e79f 	.word	0x0800e79f
 800e220:	0800e79f 	.word	0x0800e79f
 800e224:	0800e6df 	.word	0x0800e6df
 800e228:	0800e709 	.word	0x0800e709
 800e22c:	0800e789 	.word	0x0800e789
 800e230:	0800e789 	.word	0x0800e789
 800e234:	0800e789 	.word	0x0800e789
 800e238:	0800e789 	.word	0x0800e789
 800e23c:	0800e79f 	.word	0x0800e79f
 800e240:	0800e79f 	.word	0x0800e79f
 800e244:	0800e79f 	.word	0x0800e79f
 800e248:	0800e79f 	.word	0x0800e79f
 800e24c:	0800e789 	.word	0x0800e789
 800e250:	0800e79f 	.word	0x0800e79f
 800e254:	0800e79f 	.word	0x0800e79f
 800e258:	0800e79f 	.word	0x0800e79f
 800e25c:	0800e79f 	.word	0x0800e79f
 800e260:	0800e79f 	.word	0x0800e79f
 800e264:	0800e79f 	.word	0x0800e79f
 800e268:	0800e79f 	.word	0x0800e79f
 800e26c:	0800e79f 	.word	0x0800e79f
 800e270:	0800e79f 	.word	0x0800e79f
 800e274:	0800e79f 	.word	0x0800e79f
 800e278:	0800e79f 	.word	0x0800e79f
 800e27c:	0800e79f 	.word	0x0800e79f
 800e280:	0800e79f 	.word	0x0800e79f
 800e284:	0800e79f 	.word	0x0800e79f
 800e288:	0800e79f 	.word	0x0800e79f
 800e28c:	0800e79f 	.word	0x0800e79f
 800e290:	0800e779 	.word	0x0800e779
 800e294:	0800e789 	.word	0x0800e789
 800e298:	0800e781 	.word	0x0800e781
 800e29c:	0800e79f 	.word	0x0800e79f
 800e2a0:	0800e79f 	.word	0x0800e79f
 800e2a4:	0800e789 	.word	0x0800e789
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f040 826c 	bne.w	800e78c <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e2ba:	f043 0301 	orr.w	r3, r3, #1
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d114      	bne.n	800e2fa <_ZN3BTD14HCI_event_taskEv+0x186>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e2d6:	2b10      	cmp	r3, #16
 800e2d8:	d10f      	bne.n	800e2fa <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e2ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e2f8:	e059      	b.n	800e3ae <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e300:	2b04      	cmp	r3, #4
 800e302:	d12a      	bne.n	800e35a <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e30a:	2b10      	cmp	r3, #16
 800e30c:	d125      	bne.n	800e35a <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d114      	bne.n	800e346 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800e322:	2b00      	cmp	r3, #0
 800e324:	d10f      	bne.n	800e346 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800e32c:	f003 0308 	and.w	r3, r3, #8
 800e330:	2b00      	cmp	r3, #0
 800e332:	d004      	beq.n	800e33e <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800e33c:	e003      	b.n	800e346 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2200      	movs	r2, #0
 800e342:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e34c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e350:	b29a      	uxth	r2, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e358:	e029      	b.n	800e3ae <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e360:	2b09      	cmp	r3, #9
 800e362:	f040 8213 	bne.w	800e78c <_ZN3BTD14HCI_event_taskEv+0x618>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e36c:	2b10      	cmp	r3, #16
 800e36e:	f040 820d 	bne.w	800e78c <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800e372:	2300      	movs	r3, #0
 800e374:	75fb      	strb	r3, [r7, #23]
 800e376:	7dfb      	ldrb	r3, [r7, #23]
 800e378:	2b05      	cmp	r3, #5
 800e37a:	d80e      	bhi.n	800e39a <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800e37c:	7dfb      	ldrb	r3, [r7, #23]
 800e37e:	1d9a      	adds	r2, r3, #6
 800e380:	7dfb      	ldrb	r3, [r7, #23]
 800e382:	6879      	ldr	r1, [r7, #4]
 800e384:	440a      	add	r2, r1
 800e386:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e38a:	687a      	ldr	r2, [r7, #4]
 800e38c:	4413      	add	r3, r2
 800e38e:	460a      	mov	r2, r1
 800e390:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800e392:	7dfb      	ldrb	r3, [r7, #23]
 800e394:	3301      	adds	r3, #1
 800e396:	75fb      	strb	r3, [r7, #23]
 800e398:	e7ed      	b.n	800e376 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e3a0:	f043 0320 	orr.w	r3, r3, #32
 800e3a4:	b29a      	uxth	r2, r3
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800e3ac:	e1ee      	b.n	800e78c <_ZN3BTD14HCI_event_taskEv+0x618>
 800e3ae:	e1ed      	b.n	800e78c <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e3b6:	2b04      	cmp	r3, #4
 800e3b8:	d921      	bls.n	800e3fe <_ZN3BTD14HCI_event_taskEv+0x28a>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d104      	bne.n	800e3ce <_ZN3BTD14HCI_event_taskEv+0x25a>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d017      	beq.n	800e3fe <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	220a      	movs	r2, #10
 800e3fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e404:	3301      	adds	r3, #1
 800e406:	b2da      	uxtb	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800e40e:	e1c6      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e416:	2b00      	cmp	r3, #0
 800e418:	f000 81ba 	beq.w	800e790 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800e41c:	2300      	movs	r3, #0
 800e41e:	75bb      	strb	r3, [r7, #22]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e426:	7dba      	ldrb	r2, [r7, #22]
 800e428:	429a      	cmp	r2, r3
 800e42a:	f080 81b1 	bcs.w	800e790 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e434:	00db      	lsls	r3, r3, #3
 800e436:	b2da      	uxtb	r2, r3
 800e438:	7dbb      	ldrb	r3, [r7, #22]
 800e43a:	4619      	mov	r1, r3
 800e43c:	0049      	lsls	r1, r1, #1
 800e43e:	440b      	add	r3, r1
 800e440:	b2db      	uxtb	r3, r3
 800e442:	4413      	add	r3, r2
 800e444:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800e446:	2300      	movs	r3, #0
 800e448:	757b      	strb	r3, [r7, #21]
 800e44a:	7d7b      	ldrb	r3, [r7, #21]
 800e44c:	2b02      	cmp	r3, #2
 800e44e:	d811      	bhi.n	800e474 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800e450:	7d7b      	ldrb	r3, [r7, #21]
 800e452:	1d1a      	adds	r2, r3, #4
 800e454:	7bbb      	ldrb	r3, [r7, #14]
 800e456:	441a      	add	r2, r3
 800e458:	7d7b      	ldrb	r3, [r7, #21]
 800e45a:	6879      	ldr	r1, [r7, #4]
 800e45c:	440a      	add	r2, r1
 800e45e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	4413      	add	r3, r2
 800e466:	460a      	mov	r2, r1
 800e468:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800e46c:	7d7b      	ldrb	r3, [r7, #21]
 800e46e:	3301      	adds	r3, #1
 800e470:	757b      	strb	r3, [r7, #21]
 800e472:	e7ea      	b.n	800e44a <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d038      	beq.n	800e4f0 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e484:	2b00      	cmp	r3, #0
 800e486:	d133      	bne.n	800e4f0 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e48e:	2b05      	cmp	r3, #5
 800e490:	d12e      	bne.n	800e4f0 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e498:	f003 030c 	and.w	r3, r3, #12
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d027      	beq.n	800e4f0 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	753b      	strb	r3, [r7, #20]
 800e4ac:	7d3b      	ldrb	r3, [r7, #20]
 800e4ae:	2b05      	cmp	r3, #5
 800e4b0:	d814      	bhi.n	800e4dc <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800e4b2:	7d3b      	ldrb	r3, [r7, #20]
 800e4b4:	1cd9      	adds	r1, r3, #3
 800e4b6:	7dba      	ldrb	r2, [r7, #22]
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	005b      	lsls	r3, r3, #1
 800e4bc:	4413      	add	r3, r2
 800e4be:	005b      	lsls	r3, r3, #1
 800e4c0:	18ca      	adds	r2, r1, r3
 800e4c2:	7d3b      	ldrb	r3, [r7, #20]
 800e4c4:	6879      	ldr	r1, [r7, #4]
 800e4c6:	440a      	add	r2, r1
 800e4c8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	460a      	mov	r2, r1
 800e4d2:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800e4d4:	7d3b      	ldrb	r3, [r7, #20]
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	753b      	strb	r3, [r7, #20]
 800e4da:	e7e7      	b.n	800e4ac <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e4e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800e4ee:	e03a      	b.n	800e566 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d031      	beq.n	800e55e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e500:	f003 030f 	and.w	r3, r3, #15
 800e504:	2b05      	cmp	r3, #5
 800e506:	d12a      	bne.n	800e55e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e50e:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800e512:	2b00      	cmp	r3, #0
 800e514:	d023      	beq.n	800e55e <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800e516:	2300      	movs	r3, #0
 800e518:	74fb      	strb	r3, [r7, #19]
 800e51a:	7cfb      	ldrb	r3, [r7, #19]
 800e51c:	2b05      	cmp	r3, #5
 800e51e:	d814      	bhi.n	800e54a <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800e520:	7cfb      	ldrb	r3, [r7, #19]
 800e522:	1cd9      	adds	r1, r3, #3
 800e524:	7dba      	ldrb	r2, [r7, #22]
 800e526:	4613      	mov	r3, r2
 800e528:	005b      	lsls	r3, r3, #1
 800e52a:	4413      	add	r3, r2
 800e52c:	005b      	lsls	r3, r3, #1
 800e52e:	18ca      	adds	r2, r1, r3
 800e530:	7cfb      	ldrb	r3, [r7, #19]
 800e532:	6879      	ldr	r1, [r7, #4]
 800e534:	440a      	add	r2, r1
 800e536:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	4413      	add	r3, r2
 800e53e:	460a      	mov	r2, r1
 800e540:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800e542:	7cfb      	ldrb	r3, [r7, #19]
 800e544:	3301      	adds	r3, #1
 800e546:	74fb      	strb	r3, [r7, #19]
 800e548:	e7e7      	b.n	800e51a <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e554:	b29a      	uxth	r2, r3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800e55c:	e003      	b.n	800e566 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800e55e:	7dbb      	ldrb	r3, [r7, #22]
 800e560:	3301      	adds	r3, #1
 800e562:	75bb      	strb	r3, [r7, #22]
 800e564:	e75c      	b.n	800e420 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800e566:	e113      	b.n	800e790 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e56e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e572:	b29a      	uxth	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e580:	2b00      	cmp	r3, #0
 800e582:	d11a      	bne.n	800e5ba <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e58a:	b21a      	sxth	r2, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e592:	021b      	lsls	r3, r3, #8
 800e594:	b21b      	sxth	r3, r3
 800e596:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e59a:	b21b      	sxth	r3, r3
 800e59c:	4313      	orrs	r3, r2
 800e59e:	b21b      	sxth	r3, r3
 800e5a0:	b29a      	uxth	r2, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e5ac:	f043 0302 	orr.w	r3, r3, #2
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800e5b8:	e0f1      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2206      	movs	r2, #6
 800e5be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800e5c2:	e0ec      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	f040 80e2 	bne.w	800e794 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e5d6:	f043 0304 	orr.w	r3, r3, #4
 800e5da:	b29a      	uxth	r2, r3
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e5e8:	f023 0302 	bic.w	r3, r3, #2
 800e5ec:	b29a      	uxth	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800e5f4:	e0ce      	b.n	800e794 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	f040 80cb 	bne.w	800e798 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800e602:	2300      	movs	r3, #0
 800e604:	74bb      	strb	r3, [r7, #18]
 800e606:	7cbb      	ldrb	r3, [r7, #18]
 800e608:	2b1d      	cmp	r3, #29
 800e60a:	d818      	bhi.n	800e63e <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800e60c:	7cbb      	ldrb	r3, [r7, #18]
 800e60e:	f103 0209 	add.w	r2, r3, #9
 800e612:	7cbb      	ldrb	r3, [r7, #18]
 800e614:	6879      	ldr	r1, [r7, #4]
 800e616:	440a      	add	r2, r1
 800e618:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	4413      	add	r3, r2
 800e620:	460a      	mov	r2, r1
 800e622:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800e626:	7cbb      	ldrb	r3, [r7, #18]
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	4413      	add	r3, r2
 800e62c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800e630:	2b00      	cmp	r3, #0
 800e632:	d003      	beq.n	800e63c <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800e634:	7cbb      	ldrb	r3, [r7, #18]
 800e636:	3301      	adds	r3, #1
 800e638:	74bb      	strb	r3, [r7, #18]
 800e63a:	e7e4      	b.n	800e606 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800e63c:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e644:	f043 0308 	orr.w	r3, r3, #8
 800e648:	b29a      	uxth	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800e650:	e0a2      	b.n	800e798 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800e652:	2300      	movs	r3, #0
 800e654:	747b      	strb	r3, [r7, #17]
 800e656:	7c7b      	ldrb	r3, [r7, #17]
 800e658:	2b05      	cmp	r3, #5
 800e65a:	d80e      	bhi.n	800e67a <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800e65c:	7c7b      	ldrb	r3, [r7, #17]
 800e65e:	1c9a      	adds	r2, r3, #2
 800e660:	7c7b      	ldrb	r3, [r7, #17]
 800e662:	6879      	ldr	r1, [r7, #4]
 800e664:	440a      	add	r2, r1
 800e666:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	4413      	add	r3, r2
 800e66e:	460a      	mov	r2, r1
 800e670:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800e672:	7c7b      	ldrb	r3, [r7, #17]
 800e674:	3301      	adds	r3, #1
 800e676:	747b      	strb	r3, [r7, #17]
 800e678:	e7ed      	b.n	800e656 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800e67a:	2300      	movs	r3, #0
 800e67c:	743b      	strb	r3, [r7, #16]
 800e67e:	7c3b      	ldrb	r3, [r7, #16]
 800e680:	2b02      	cmp	r3, #2
 800e682:	d810      	bhi.n	800e6a6 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800e684:	7c3b      	ldrb	r3, [r7, #16]
 800e686:	f103 0208 	add.w	r2, r3, #8
 800e68a:	7c3b      	ldrb	r3, [r7, #16]
 800e68c:	6879      	ldr	r1, [r7, #4]
 800e68e:	440a      	add	r2, r1
 800e690:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	4413      	add	r3, r2
 800e698:	460a      	mov	r2, r1
 800e69a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800e69e:	7c3b      	ldrb	r3, [r7, #16]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	743b      	strb	r3, [r7, #16]
 800e6a4:	e7eb      	b.n	800e67e <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e6ac:	f003 030f 	and.w	r3, r3, #15
 800e6b0:	2b05      	cmp	r3, #5
 800e6b2:	d10a      	bne.n	800e6ca <_ZN3BTD14HCI_event_taskEv+0x556>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e6ba:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d003      	beq.n	800e6ca <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e6d0:	f043 0310 	orr.w	r3, r3, #16
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800e6dc:	e05f      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d003      	beq.n	800e6f0 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 feec 	bl	800f4c6 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800e6ee:	e056      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	691b      	ldr	r3, [r3, #16]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d003      	beq.n	800e700 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 fee4 	bl	800f4c6 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800e6fe:	e04e      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f000 ff93 	bl	800f62c <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800e706:	e04a      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 ffca 	bl	800f6a2 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800e70e:	e046      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e716:	2b00      	cmp	r3, #0
 800e718:	d123      	bne.n	800e762 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00c      	beq.n	800e73e <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e72a:	f083 0301 	eor.w	r3, r3, #1
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	2b00      	cmp	r3, #0
 800e732:	d004      	beq.n	800e73e <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2201      	movs	r2, #1
 800e738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800e73c:	e02e      	b.n	800e79c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e744:	2b00      	cmp	r3, #0
 800e746:	d029      	beq.n	800e79c <_ZN3BTD14HCI_event_taskEv+0x628>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e74e:	f083 0301 	eor.w	r3, r3, #1
 800e752:	b2db      	uxtb	r3, r3
 800e754:	2b00      	cmp	r3, #0
 800e756:	d021      	beq.n	800e79c <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2201      	movs	r2, #1
 800e75c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800e760:	e01c      	b.n	800e79c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	8b5b      	ldrh	r3, [r3, #26]
 800e766:	4619      	mov	r1, r3
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f001 f882 	bl	800f872 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2210      	movs	r2, #16
 800e772:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800e776:	e011      	b.n	800e79c <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 ffcd 	bl	800f718 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800e77e:	e00e      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f001 f810 	bl	800f7a6 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800e786:	e00a      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800e788:	bf00      	nop
 800e78a:	e008      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e78c:	bf00      	nop
 800e78e:	e006      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e790:	bf00      	nop
 800e792:	e004      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e794:	bf00      	nop
 800e796:	e002      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e798:	bf00      	nop
 800e79a:	e000      	b.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e79c:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800e79e:	bf00      	nop
 800e7a0:	3718      	adds	r7, #24
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bdb0      	pop	{r4, r5, r7, pc}
 800e7a6:	bf00      	nop

0800e7a8 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7b6:	2b13      	cmp	r3, #19
 800e7b8:	f200 82ef 	bhi.w	800ed9a <_ZN3BTD8HCI_taskEv+0x5f2>
 800e7bc:	a201      	add	r2, pc, #4	; (adr r2, 800e7c4 <_ZN3BTD8HCI_taskEv+0x1c>)
 800e7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c2:	bf00      	nop
 800e7c4:	0800e815 	.word	0x0800e815
 800e7c8:	0800e84f 	.word	0x0800e84f
 800e7cc:	0800e8d5 	.word	0x0800e8d5
 800e7d0:	0800e8f5 	.word	0x0800e8f5
 800e7d4:	0800e915 	.word	0x0800e915
 800e7d8:	0800e969 	.word	0x0800e969
 800e7dc:	0800ea0f 	.word	0x0800ea0f
 800e7e0:	0800ea3d 	.word	0x0800ea3d
 800e7e4:	0800ea77 	.word	0x0800ea77
 800e7e8:	0800ea9f 	.word	0x0800ea9f
 800e7ec:	0800ead5 	.word	0x0800ead5
 800e7f0:	0800eb33 	.word	0x0800eb33
 800e7f4:	0800eb71 	.word	0x0800eb71
 800e7f8:	0800ec97 	.word	0x0800ec97
 800e7fc:	0800ed9b 	.word	0x0800ed9b
 800e800:	0800ecdd 	.word	0x0800ecdd
 800e804:	0800ed0b 	.word	0x0800ed0b
 800e808:	0800e99f 	.word	0x0800e99f
 800e80c:	0800e9d5 	.word	0x0800e9d5
 800e810:	0800e9f5 	.word	0x0800e9f5
                case HCI_INIT_STATE:
                        hci_counter++;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800e81a:	3301      	adds	r3, #1
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800e830:	429a      	cmp	r2, r3
 800e832:	f240 82b4 	bls.w	800ed9e <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 fb7d 	bl	800ef36 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2201      	movs	r2, #1
 800e840:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2200      	movs	r2, #0
 800e848:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800e84c:	e2a7      	b.n	800ed9e <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800e854:	3301      	adds	r3, #1
 800e856:	b29a      	uxth	r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e864:	f003 0301 	and.w	r3, r3, #1
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d00b      	beq.n	800e884 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2200      	movs	r2, #0
 800e870:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2202      	movs	r2, #2
 800e878:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f001 f830 	bl	800f8e2 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800e882:	e28e      	b.n	800eda2 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800e890:	429a      	cmp	r2, r3
 800e892:	f240 8286 	bls.w	800eda2 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800e89c:	461a      	mov	r2, r3
 800e89e:	0092      	lsls	r2, r2, #2
 800e8a0:	4413      	add	r3, r2
 800e8a2:	005b      	lsls	r3, r3, #1
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800e8b2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800e8b6:	d904      	bls.n	800e8c2 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e8be:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800e8d2:	e266      	b.n	800eda2 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e8da:	f003 0301 	and.w	r3, r3, #1
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f000 8261 	beq.w	800eda6 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2203      	movs	r2, #3
 800e8e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 fb72 	bl	800efd6 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800e8f2:	e258      	b.n	800eda6 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e8fa:	f003 0320 	and.w	r3, r3, #32
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	f000 8253 	beq.w	800edaa <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 fb8a 	bl	800f01e <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2204      	movs	r2, #4
 800e90e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800e912:	e24a      	b.n	800edaa <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e91e:	2b00      	cmp	r3, #0
 800e920:	f000 8245 	beq.w	800edae <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d00a      	beq.n	800e942 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	4619      	mov	r1, r3
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f000 fc5d 	bl	800f1f2 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2205      	movs	r2, #5
 800e93c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800e940:	e235      	b.n	800edae <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d008      	beq.n	800e95e <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800e94c:	2100      	movs	r1, #0
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 fb89 	bl	800f066 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2211      	movs	r2, #17
 800e958:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800e95c:	e227      	b.n	800edae <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2206      	movs	r2, #6
 800e962:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800e966:	e222      	b.n	800edae <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e96e:	f003 0301 	and.w	r3, r3, #1
 800e972:	2b00      	cmp	r3, #0
 800e974:	f000 821d 	beq.w	800edb2 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d008      	beq.n	800e994 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800e982:	2100      	movs	r1, #0
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f000 fb6e 	bl	800f066 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2211      	movs	r2, #17
 800e98e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800e992:	e20e      	b.n	800edb2 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2206      	movs	r2, #6
 800e998:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800e99c:	e209      	b.n	800edb2 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e9a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f000 8204 	beq.w	800edb6 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d008      	beq.n	800e9ca <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800e9b8:	2101      	movs	r1, #1
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 fc9d 	bl	800f2fa <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2212      	movs	r2, #18
 800e9c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800e9c8:	e1f5      	b.n	800edb6 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2206      	movs	r2, #6
 800e9ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800e9d2:	e1f0      	b.n	800edb6 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e9da:	f003 0301 	and.w	r3, r3, #1
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	f000 81eb 	beq.w	800edba <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 fc4d 	bl	800f284 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2213      	movs	r2, #19
 800e9ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800e9f2:	e1e2      	b.n	800edba <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e9fa:	f003 0301 	and.w	r3, r3, #1
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	f000 81dd 	beq.w	800edbe <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2206      	movs	r2, #6
 800ea08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ea0c:	e1d7      	b.n	800edbe <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d104      	bne.n	800ea22 <_ZN3BTD8HCI_taskEv+0x27a>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d007      	beq.n	800ea32 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 fc8f 	bl	800f346 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2207      	movs	r2, #7
 800ea2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800ea30:	e1d8      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	220a      	movs	r2, #10
 800ea36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ea3a:	e1d3      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ea42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	f000 81bb 	beq.w	800edc2 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f000 fcb2 	bl	800f3b6 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d007      	beq.n	800ea6c <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 fb74 	bl	800f14a <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	220c      	movs	r2, #12
 800ea66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800ea6a:	e1aa      	b.n	800edc2 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2208      	movs	r2, #8
 800ea70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ea74:	e1a5      	b.n	800edc2 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ea7c:	f003 0301 	and.w	r3, r3, #1
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	f000 81a0 	beq.w	800edc6 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f000 fcac 	bl	800f3ec <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2209      	movs	r2, #9
 800ea98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ea9c:	e193      	b.n	800edc6 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eaa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f000 818e 	beq.w	800edca <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eab4:	f003 0302 	and.w	r3, r3, #2
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d007      	beq.n	800eacc <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f000 fead 	bl	800f81c <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	220a      	movs	r2, #10
 800eac6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800eaca:	e17e      	b.n	800edca <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f000 fc8d 	bl	800f3ec <_ZN3BTD11hci_connectEv>
                        break;
 800ead2:	e17a      	b.n	800edca <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eada:	f083 0301 	eor.w	r3, r3, #1
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f000 8174 	beq.w	800edce <_ZN3BTD8HCI_taskEv+0x626>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eaec:	f083 0301 	eor.w	r3, r3, #1
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f000 816b 	beq.w	800edce <_ZN3BTD8HCI_taskEv+0x626>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800eafe:	f083 0301 	eor.w	r3, r3, #1
 800eb02:	b2db      	uxtb	r3, r3
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	f000 8162 	beq.w	800edce <_ZN3BTD8HCI_taskEv+0x626>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800eb10:	f083 0301 	eor.w	r3, r3, #1
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	f000 8159 	beq.w	800edce <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 fa29 	bl	800ef74 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2201      	movs	r2, #1
 800eb26:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	220b      	movs	r2, #11
 800eb2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800eb30:	e14d      	b.n	800edce <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb38:	f003 0310 	and.w	r3, r3, #16
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00a      	beq.n	800eb56 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f000 faff 	bl	800f14a <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	220c      	movs	r2, #12
 800eb50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800eb54:	e13d      	b.n	800edd2 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb5c:	f003 0304 	and.w	r3, r3, #4
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	f000 8136 	beq.w	800edd2 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2210      	movs	r2, #16
 800eb6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eb6e:	e130      	b.n	800edd2 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb76:	f003 0308 	and.w	r3, r3, #8
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	f000 812b 	beq.w	800edd6 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	3322      	adds	r3, #34	; 0x22
 800eb84:	2208      	movs	r2, #8
 800eb86:	4999      	ldr	r1, [pc, #612]	; (800edec <_ZN3BTD8HCI_taskEv+0x644>)
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f004 fe27 	bl	80137dc <strncmp>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d147      	bne.n	800ec24 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2201      	movs	r2, #1
 800eb98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2200      	movs	r2, #0
 800eba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	3322      	adds	r3, #34	; 0x22
 800ebb8:	2216      	movs	r2, #22
 800ebba:	498d      	ldr	r1, [pc, #564]	; (800edf0 <_ZN3BTD8HCI_taskEv+0x648>)
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f004 fe0d 	bl	80137dc <strncmp>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d104      	bne.n	800ebd2 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebd0:	e028      	b.n	800ec24 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	3322      	adds	r3, #34	; 0x22
 800ebd6:	2216      	movs	r2, #22
 800ebd8:	4986      	ldr	r1, [pc, #536]	; (800edf4 <_ZN3BTD8HCI_taskEv+0x64c>)
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f004 fdfe 	bl	80137dc <strncmp>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d110      	bne.n	800ec08 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec06:	e00d      	b.n	800ec24 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	3322      	adds	r3, #34	; 0x22
 800ec0c:	2213      	movs	r2, #19
 800ec0e:	497a      	ldr	r1, [pc, #488]	; (800edf8 <_ZN3BTD8HCI_taskEv+0x650>)
 800ec10:	4618      	mov	r0, r3
 800ec12:	f004 fde3 	bl	80137dc <strncmp>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d103      	bne.n	800ec24 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d117      	bne.n	800ec5e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800ec34:	2b25      	cmp	r3, #37	; 0x25
 800ec36:	d112      	bne.n	800ec5e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ec3e:	2b08      	cmp	r3, #8
 800ec40:	d10d      	bne.n	800ec5e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	3322      	adds	r3, #34	; 0x22
 800ec46:	2213      	movs	r2, #19
 800ec48:	496c      	ldr	r1, [pc, #432]	; (800edfc <_ZN3BTD8HCI_taskEv+0x654>)
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f004 fdc6 	bl	80137dc <strncmp>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d103      	bne.n	800ec5e <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d104      	bne.n	800ec72 <_ZN3BTD8HCI_taskEv+0x4ca>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d009      	beq.n	800ec86 <_ZN3BTD8HCI_taskEv+0x4de>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d004      	beq.n	800ec86 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2208      	movs	r2, #8
 800ec80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800ec84:	e0a7      	b.n	800edd6 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fa17 	bl	800f0ba <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	220d      	movs	r2, #13
 800ec90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ec94:	e09f      	b.n	800edd6 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ec9c:	f003 0302 	and.w	r3, r3, #2
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f000 809a 	beq.w	800edda <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d003      	beq.n	800ecb8 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	220f      	movs	r2, #15
 800ecd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ecda:	e07e      	b.n	800edda <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ece2:	3301      	adds	r3, #1
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ecf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ecf6:	d972      	bls.n	800edde <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	220a      	movs	r2, #10
 800ed04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ed08:	e069      	b.n	800edde <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ed10:	f003 0304 	and.w	r3, r3, #4
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d064      	beq.n	800ede2 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	3389      	adds	r3, #137	; 0x89
 800ed24:	2240      	movs	r2, #64	; 0x40
 800ed26:	2100      	movs	r1, #0
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f004 fd0b 	bl	8013744 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	33c9      	adds	r3, #201	; 0xc9
 800ed32:	2240      	movs	r2, #64	; 0x40
 800ed34:	2100      	movs	r1, #0
 800ed36:	4618      	mov	r0, r3
 800ed38:	f004 fd04 	bl	8013744 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	220a      	movs	r2, #10
 800ed94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ed98:	e023      	b.n	800ede2 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800ed9a:	bf00      	nop
 800ed9c:	e022      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ed9e:	bf00      	nop
 800eda0:	e020      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eda2:	bf00      	nop
 800eda4:	e01e      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eda6:	bf00      	nop
 800eda8:	e01c      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edaa:	bf00      	nop
 800edac:	e01a      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edae:	bf00      	nop
 800edb0:	e018      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edb2:	bf00      	nop
 800edb4:	e016      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edb6:	bf00      	nop
 800edb8:	e014      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edba:	bf00      	nop
 800edbc:	e012      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edbe:	bf00      	nop
 800edc0:	e010      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edc2:	bf00      	nop
 800edc4:	e00e      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edc6:	bf00      	nop
 800edc8:	e00c      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edca:	bf00      	nop
 800edcc:	e00a      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edce:	bf00      	nop
 800edd0:	e008      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edd2:	bf00      	nop
 800edd4:	e006      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edd6:	bf00      	nop
 800edd8:	e004      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edda:	bf00      	nop
 800eddc:	e002      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800edde:	bf00      	nop
 800ede0:	e000      	b.n	800ede4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ede2:	bf00      	nop
        }
}
 800ede4:	bf00      	nop
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	080139ac 	.word	0x080139ac
 800edf0:	080139b8 	.word	0x080139b8
 800edf4:	080139d0 	.word	0x080139d0
 800edf8:	080139e8 	.word	0x080139e8
 800edfc:	080139fc 	.word	0x080139fc

0800ee00 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800ee00:	b5b0      	push	{r4, r5, r7, lr}
 800ee02:	b086      	sub	sp, #24
 800ee04:	af02      	add	r7, sp, #8
 800ee06:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800ee08:	2340      	movs	r3, #64	; 0x40
 800ee0a:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	33c9      	adds	r3, #201	; 0xc9
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800ee26:	f107 050a 	add.w	r5, r7, #10
 800ee2a:	9201      	str	r2, [sp, #4]
 800ee2c:	9300      	str	r3, [sp, #0]
 800ee2e:	462b      	mov	r3, r5
 800ee30:	4622      	mov	r2, r4
 800ee32:	f003 f92c 	bl	801208e <_ZN3USB10inTransferEhhPtPhh>
 800ee36:	4603      	mov	r3, r0
 800ee38:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800ee3a:	7b7b      	ldrb	r3, [r7, #13]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d125      	bne.n	800ee8c <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800ee40:	897b      	ldrh	r3, [r7, #10]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d022      	beq.n	800ee8c <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ee46:	2300      	movs	r3, #0
 800ee48:	73fb      	strb	r3, [r7, #15]
 800ee4a:	7bfb      	ldrb	r3, [r7, #15]
 800ee4c:	2b03      	cmp	r3, #3
 800ee4e:	d81d      	bhi.n	800ee8c <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800ee50:	7bfb      	ldrb	r3, [r7, #15]
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	3318      	adds	r3, #24
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	4413      	add	r3, r2
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d011      	beq.n	800ee84 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800ee60:	7bfb      	ldrb	r3, [r7, #15]
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	3318      	adds	r3, #24
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	4413      	add	r3, r2
 800ee6a:	6858      	ldr	r0, [r3, #4]
 800ee6c:	7bfb      	ldrb	r3, [r7, #15]
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	3318      	adds	r3, #24
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	4413      	add	r3, r2
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	32c9      	adds	r2, #201	; 0xc9
 800ee80:	4611      	mov	r1, r2
 800ee82:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ee84:	7bfb      	ldrb	r3, [r7, #15]
 800ee86:	3301      	adds	r3, #1
 800ee88:	73fb      	strb	r3, [r7, #15]
 800ee8a:	e7de      	b.n	800ee4a <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	73bb      	strb	r3, [r7, #14]
 800ee90:	7bbb      	ldrb	r3, [r7, #14]
 800ee92:	2b03      	cmp	r3, #3
 800ee94:	d81c      	bhi.n	800eed0 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800ee96:	7bbb      	ldrb	r3, [r7, #14]
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	3318      	adds	r3, #24
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	4413      	add	r3, r2
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d010      	beq.n	800eec8 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800eea6:	7bbb      	ldrb	r3, [r7, #14]
 800eea8:	687a      	ldr	r2, [r7, #4]
 800eeaa:	3318      	adds	r3, #24
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	4413      	add	r3, r2
 800eeb0:	6859      	ldr	r1, [r3, #4]
 800eeb2:	7bbb      	ldrb	r3, [r7, #14]
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	3318      	adds	r3, #24
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	4413      	add	r3, r2
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	3304      	adds	r3, #4
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4608      	mov	r0, r1
 800eec6:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800eec8:	7bbb      	ldrb	r3, [r7, #14]
 800eeca:	3301      	adds	r3, #1
 800eecc:	73bb      	strb	r3, [r7, #14]
 800eece:	e7df      	b.n	800ee90 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800eed0:	bf00      	nop
 800eed2:	3710      	adds	r7, #16
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bdb0      	pop	{r4, r5, r7, pc}

0800eed8 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b08c      	sub	sp, #48	; 0x30
 800eedc:	af08      	add	r7, sp, #32
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	4613      	mov	r3, r2
 800eee4:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eeec:	f023 0301 	bic.w	r3, r3, #1
 800eef0:	b29a      	uxth	r2, r3
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ef08:	2300      	movs	r3, #0
 800ef0a:	9307      	str	r3, [sp, #28]
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	9306      	str	r3, [sp, #24]
 800ef10:	88fb      	ldrh	r3, [r7, #6]
 800ef12:	9305      	str	r3, [sp, #20]
 800ef14:	88fb      	ldrh	r3, [r7, #6]
 800ef16:	9304      	str	r3, [sp, #16]
 800ef18:	2300      	movs	r3, #0
 800ef1a:	9303      	str	r3, [sp, #12]
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	9302      	str	r3, [sp, #8]
 800ef20:	2300      	movs	r3, #0
 800ef22:	9301      	str	r3, [sp, #4]
 800ef24:	2300      	movs	r3, #0
 800ef26:	9300      	str	r3, [sp, #0]
 800ef28:	2320      	movs	r3, #32
 800ef2a:	f002 ffd8 	bl	8011ede <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ef2e:	bf00      	nop
 800ef30:	3710      	adds	r7, #16
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}

0800ef36 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800ef36:	b580      	push	{r7, lr}
 800ef38:	b082      	sub	sp, #8
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2200      	movs	r2, #0
 800ef42:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2203      	movs	r2, #3
 800ef4a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	220c      	movs	r2, #12
 800ef52:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	3389      	adds	r3, #137	; 0x89
 800ef62:	2203      	movs	r2, #3
 800ef64:	4619      	mov	r1, r3
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f7ff ffb6 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800ef6c:	bf00      	nop
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ef82:	f023 0310 	bic.w	r3, r3, #16
 800ef86:	b29a      	uxth	r2, r3
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	221a      	movs	r2, #26
 800ef92:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	220c      	movs	r2, #12
 800ef9a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2201      	movs	r2, #1
 800efa2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d004      	beq.n	800efb8 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2203      	movs	r2, #3
 800efb2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800efb6:	e003      	b.n	800efc0 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2202      	movs	r2, #2
 800efbc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	3389      	adds	r3, #137	; 0x89
 800efc4:	2204      	movs	r2, #4
 800efc6:	4619      	mov	r1, r3
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f7ff ff85 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800efce:	bf00      	nop
 800efd0:	3708      	adds	r7, #8
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}

0800efd6 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800efd6:	b580      	push	{r7, lr}
 800efd8:	b082      	sub	sp, #8
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800efe4:	f023 0320 	bic.w	r3, r3, #32
 800efe8:	b29a      	uxth	r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2209      	movs	r2, #9
 800eff4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2210      	movs	r2, #16
 800effc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2200      	movs	r2, #0
 800f004:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	3389      	adds	r3, #137	; 0x89
 800f00c:	2203      	movs	r2, #3
 800f00e:	4619      	mov	r1, r3
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f7ff ff61 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f016:	bf00      	nop
 800f018:	3708      	adds	r7, #8
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800f01e:	b580      	push	{r7, lr}
 800f020:	b082      	sub	sp, #8
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f02c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f030:	b29a      	uxth	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2201      	movs	r2, #1
 800f03c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2210      	movs	r2, #16
 800f044:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2200      	movs	r2, #0
 800f04c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	3389      	adds	r3, #137	; 0x89
 800f054:	2203      	movs	r2, #3
 800f056:	4619      	mov	r1, r3
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f7ff ff3d 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f05e:	bf00      	nop
 800f060:	3708      	adds	r7, #8
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}

0800f066 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800f066:	b580      	push	{r7, lr}
 800f068:	b082      	sub	sp, #8
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
 800f06e:	460b      	mov	r3, r1
 800f070:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f07c:	b29a      	uxth	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2204      	movs	r2, #4
 800f088:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2210      	movs	r2, #16
 800f090:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2201      	movs	r2, #1
 800f098:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	78fa      	ldrb	r2, [r7, #3]
 800f0a0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	3389      	adds	r3, #137	; 0x89
 800f0a8:	2204      	movs	r2, #4
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7ff ff13 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f0b2:	bf00      	nop
 800f0b4:	3708      	adds	r7, #8
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b082      	sub	sp, #8
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f0c8:	f023 0302 	bic.w	r3, r3, #2
 800f0cc:	b29a      	uxth	r2, r3
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2209      	movs	r2, #9
 800f0d8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2204      	movs	r2, #4
 800f0e0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2207      	movs	r2, #7
 800f0e8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	7f1a      	ldrb	r2, [r3, #28]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	7f5a      	ldrb	r2, [r3, #29]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	7f9a      	ldrb	r2, [r3, #30]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	7fda      	ldrb	r2, [r3, #31]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	3389      	adds	r3, #137	; 0x89
 800f138:	220a      	movs	r2, #10
 800f13a:	4619      	mov	r1, r3
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f7ff fecb 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f142:	bf00      	nop
 800f144:	3708      	adds	r7, #8
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}

0800f14a <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800f14a:	b580      	push	{r7, lr}
 800f14c:	b082      	sub	sp, #8
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f158:	f023 0308 	bic.w	r3, r3, #8
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2219      	movs	r2, #25
 800f168:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2204      	movs	r2, #4
 800f170:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	220a      	movs	r2, #10
 800f178:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	7f1a      	ldrb	r2, [r3, #28]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	7f5a      	ldrb	r2, [r3, #29]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	7f9a      	ldrb	r2, [r3, #30]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	7fda      	ldrb	r2, [r3, #31]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2201      	movs	r2, #1
 800f1c0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	3389      	adds	r3, #137	; 0x89
 800f1e0:	220d      	movs	r2, #13
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f7ff fe77 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f1ea:	bf00      	nop
 800f1ec:	3708      	adds	r7, #8
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}

0800f1f2 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800f1f2:	b590      	push	{r4, r7, lr}
 800f1f4:	b085      	sub	sp, #20
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
 800f1fa:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2213      	movs	r2, #19
 800f200:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	220c      	movs	r2, #12
 800f208:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800f20c:	6838      	ldr	r0, [r7, #0]
 800f20e:	f7f0 ffff 	bl	8000210 <strlen>
 800f212:	4603      	mov	r3, r0
 800f214:	b2db      	uxtb	r3, r3
 800f216:	3301      	adds	r3, #1
 800f218:	b2da      	uxtb	r2, r3
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800f220:	2300      	movs	r3, #0
 800f222:	73fb      	strb	r3, [r7, #15]
 800f224:	7bfc      	ldrb	r4, [r7, #15]
 800f226:	6838      	ldr	r0, [r7, #0]
 800f228:	f7f0 fff2 	bl	8000210 <strlen>
 800f22c:	4603      	mov	r3, r0
 800f22e:	429c      	cmp	r4, r3
 800f230:	d20e      	bcs.n	800f250 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800f232:	7bfb      	ldrb	r3, [r7, #15]
 800f234:	683a      	ldr	r2, [r7, #0]
 800f236:	441a      	add	r2, r3
 800f238:	7bfb      	ldrb	r3, [r7, #15]
 800f23a:	3303      	adds	r3, #3
 800f23c:	7811      	ldrb	r1, [r2, #0]
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	4413      	add	r3, r2
 800f242:	460a      	mov	r2, r1
 800f244:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800f248:	7bfb      	ldrb	r3, [r7, #15]
 800f24a:	3301      	adds	r3, #1
 800f24c:	73fb      	strb	r3, [r7, #15]
 800f24e:	e7e9      	b.n	800f224 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800f250:	7bfb      	ldrb	r3, [r7, #15]
 800f252:	3303      	adds	r3, #3
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	4413      	add	r3, r2
 800f258:	2200      	movs	r2, #0
 800f25a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800f264:	6838      	ldr	r0, [r7, #0]
 800f266:	f7f0 ffd3 	bl	8000210 <strlen>
 800f26a:	4603      	mov	r3, r0
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	3304      	adds	r3, #4
 800f270:	b29b      	uxth	r3, r3
 800f272:	461a      	mov	r2, r3
 800f274:	4621      	mov	r1, r4
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f7ff fe2e 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f27c:	bf00      	nop
 800f27e:	3714      	adds	r7, #20
 800f280:	46bd      	mov	sp, r7
 800f282:	bd90      	pop	{r4, r7, pc}

0800f284 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2201      	movs	r2, #1
 800f290:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	220c      	movs	r2, #12
 800f298:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2208      	movs	r2, #8
 800f2a0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	22ff      	movs	r2, #255	; 0xff
 800f2a8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	22ff      	movs	r2, #255	; 0xff
 800f2b0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	22ff      	movs	r2, #255	; 0xff
 800f2b8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	22ff      	movs	r2, #255	; 0xff
 800f2c0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	22ff      	movs	r2, #255	; 0xff
 800f2c8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	221f      	movs	r2, #31
 800f2d0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	22ff      	movs	r2, #255	; 0xff
 800f2d8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	3389      	adds	r3, #137	; 0x89
 800f2e8:	220b      	movs	r2, #11
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7ff fdf3 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f2f2:	bf00      	nop
 800f2f4:	3708      	adds	r7, #8
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b082      	sub	sp, #8
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
 800f302:	460b      	mov	r3, r1
 800f304:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2256      	movs	r2, #86	; 0x56
 800f30a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	220c      	movs	r2, #12
 800f312:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2201      	movs	r2, #1
 800f31a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800f31e:	78fb      	ldrb	r3, [r7, #3]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d001      	beq.n	800f328 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800f324:	2201      	movs	r2, #1
 800f326:	e000      	b.n	800f32a <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800f328:	2200      	movs	r2, #0
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	3389      	adds	r3, #137	; 0x89
 800f334:	2204      	movs	r2, #4
 800f336:	4619      	mov	r1, r3
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7ff fdcd 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f33e:	bf00      	nop
 800f340:	3708      	adds	r7, #8
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800f346:	b580      	push	{r7, lr}
 800f348:	b082      	sub	sp, #8
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f358:	b29a      	uxth	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2201      	movs	r2, #1
 800f364:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2204      	movs	r2, #4
 800f36c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2205      	movs	r2, #5
 800f374:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2233      	movs	r2, #51	; 0x33
 800f37c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	228b      	movs	r2, #139	; 0x8b
 800f384:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	229e      	movs	r2, #158	; 0x9e
 800f38c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2230      	movs	r2, #48	; 0x30
 800f394:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	220a      	movs	r2, #10
 800f39c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	3389      	adds	r3, #137	; 0x89
 800f3a4:	2208      	movs	r2, #8
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f7ff fd95 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f3ae:	bf00      	nop
 800f3b0:	3708      	adds	r7, #8
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}

0800f3b6 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800f3b6:	b580      	push	{r7, lr}
 800f3b8:	b082      	sub	sp, #8
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2202      	movs	r2, #2
 800f3c2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2204      	movs	r2, #4
 800f3ca:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	3389      	adds	r3, #137	; 0x89
 800f3da:	2203      	movs	r2, #3
 800f3dc:	4619      	mov	r1, r3
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f7ff fd7a 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f3e4:	bf00      	nop
 800f3e6:	3708      	adds	r7, #8
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	331c      	adds	r3, #28
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 f804 	bl	800f408 <_ZN3BTD11hci_connectEPh>
}
 800f400:	bf00      	nop
 800f402:	3708      	adds	r7, #8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f418:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800f41c:	b29a      	uxth	r2, r3
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2205      	movs	r2, #5
 800f428:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2204      	movs	r2, #4
 800f430:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	220d      	movs	r2, #13
 800f438:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	781a      	ldrb	r2, [r3, #0]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	785a      	ldrb	r2, [r3, #1]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	789a      	ldrb	r2, [r3, #2]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	78da      	ldrb	r2, [r3, #3]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	791a      	ldrb	r2, [r3, #4]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	795a      	ldrb	r2, [r3, #5]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2218      	movs	r2, #24
 800f47c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	22cc      	movs	r2, #204	; 0xcc
 800f484:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2201      	movs	r2, #1
 800f48c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2200      	movs	r2, #0
 800f494:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	3389      	adds	r3, #137	; 0x89
 800f4b4:	2210      	movs	r2, #16
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f7ff fd0d 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f4be:	bf00      	nop
 800f4c0:	3708      	adds	r7, #8
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}

0800f4c6 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800f4c6:	b590      	push	{r4, r7, lr}
 800f4c8:	b085      	sub	sp, #20
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	220d      	movs	r2, #13
 800f4d2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2204      	movs	r2, #4
 800f4da:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2217      	movs	r2, #23
 800f4e2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	7f1a      	ldrb	r2, [r3, #28]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	7f5a      	ldrb	r2, [r3, #29]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	7f9a      	ldrb	r2, [r3, #30]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	7fda      	ldrb	r2, [r3, #31]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d03f      	beq.n	800f5b0 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2206      	movs	r2, #6
 800f534:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d013      	beq.n	800f56a <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800f542:	2300      	movs	r3, #0
 800f544:	73fb      	strb	r3, [r7, #15]
 800f546:	7bfb      	ldrb	r3, [r7, #15]
 800f548:	2b05      	cmp	r3, #5
 800f54a:	d822      	bhi.n	800f592 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800f54c:	7bfa      	ldrb	r2, [r7, #15]
 800f54e:	7bfb      	ldrb	r3, [r7, #15]
 800f550:	330a      	adds	r3, #10
 800f552:	6879      	ldr	r1, [r7, #4]
 800f554:	440a      	add	r2, r1
 800f556:	7d11      	ldrb	r1, [r2, #20]
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	4413      	add	r3, r2
 800f55c:	460a      	mov	r2, r1
 800f55e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800f562:	7bfb      	ldrb	r3, [r7, #15]
 800f564:	3301      	adds	r3, #1
 800f566:	73fb      	strb	r3, [r7, #15]
 800f568:	e7ed      	b.n	800f546 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800f56a:	2300      	movs	r3, #0
 800f56c:	73bb      	strb	r3, [r7, #14]
 800f56e:	7bbb      	ldrb	r3, [r7, #14]
 800f570:	2b05      	cmp	r3, #5
 800f572:	d80e      	bhi.n	800f592 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800f574:	7bba      	ldrb	r2, [r7, #14]
 800f576:	7bbb      	ldrb	r3, [r7, #14]
 800f578:	330a      	adds	r3, #10
 800f57a:	6879      	ldr	r1, [r7, #4]
 800f57c:	440a      	add	r2, r1
 800f57e:	7f11      	ldrb	r1, [r2, #28]
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	4413      	add	r3, r2
 800f584:	460a      	mov	r2, r1
 800f586:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800f58a:	7bbb      	ldrb	r3, [r7, #14]
 800f58c:	3301      	adds	r3, #1
 800f58e:	73bb      	strb	r3, [r7, #14]
 800f590:	e7ed      	b.n	800f56e <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800f592:	2310      	movs	r3, #16
 800f594:	737b      	strb	r3, [r7, #13]
 800f596:	7b7b      	ldrb	r3, [r7, #13]
 800f598:	2b19      	cmp	r3, #25
 800f59a:	d83c      	bhi.n	800f616 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800f59c:	7b7b      	ldrb	r3, [r7, #13]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800f5a8:	7b7b      	ldrb	r3, [r7, #13]
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	737b      	strb	r3, [r7, #13]
 800f5ae:	e7f2      	b.n	800f596 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	691b      	ldr	r3, [r3, #16]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7f0 fe2b 	bl	8000210 <strlen>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	b2da      	uxtb	r2, r3
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	733b      	strb	r3, [r7, #12]
 800f5c8:	7b3c      	ldrb	r4, [r7, #12]
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	691b      	ldr	r3, [r3, #16]
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7f0 fe1e 	bl	8000210 <strlen>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	429c      	cmp	r4, r3
 800f5d8:	d20f      	bcs.n	800f5fa <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	691a      	ldr	r2, [r3, #16]
 800f5de:	7b3b      	ldrb	r3, [r7, #12]
 800f5e0:	441a      	add	r2, r3
 800f5e2:	7b3b      	ldrb	r3, [r7, #12]
 800f5e4:	330a      	adds	r3, #10
 800f5e6:	7811      	ldrb	r1, [r2, #0]
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	4413      	add	r3, r2
 800f5ec:	460a      	mov	r2, r1
 800f5ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800f5f2:	7b3b      	ldrb	r3, [r7, #12]
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	733b      	strb	r3, [r7, #12]
 800f5f8:	e7e6      	b.n	800f5c8 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800f5fa:	7b3b      	ldrb	r3, [r7, #12]
 800f5fc:	2b0f      	cmp	r3, #15
 800f5fe:	d80a      	bhi.n	800f616 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800f600:	7b3b      	ldrb	r3, [r7, #12]
 800f602:	330a      	adds	r3, #10
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	4413      	add	r3, r2
 800f608:	2200      	movs	r2, #0
 800f60a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800f60e:	7b3b      	ldrb	r3, [r7, #12]
 800f610:	3301      	adds	r3, #1
 800f612:	733b      	strb	r3, [r7, #12]
 800f614:	e7f1      	b.n	800f5fa <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	3389      	adds	r3, #137	; 0x89
 800f61a:	221a      	movs	r2, #26
 800f61c:	4619      	mov	r1, r3
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f7ff fc5a 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f624:	bf00      	nop
 800f626:	3714      	adds	r7, #20
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd90      	pop	{r4, r7, pc}

0800f62c <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	220e      	movs	r2, #14
 800f638:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2204      	movs	r2, #4
 800f640:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2206      	movs	r2, #6
 800f648:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	7f1a      	ldrb	r2, [r3, #28]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	7f5a      	ldrb	r2, [r3, #29]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	7f9a      	ldrb	r2, [r3, #30]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	7fda      	ldrb	r2, [r3, #31]
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	3389      	adds	r3, #137	; 0x89
 800f690:	2209      	movs	r2, #9
 800f692:	4619      	mov	r1, r3
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f7ff fc1f 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f69a:	bf00      	nop
 800f69c:	3708      	adds	r7, #8
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b082      	sub	sp, #8
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	220c      	movs	r2, #12
 800f6ae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2204      	movs	r2, #4
 800f6b6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2206      	movs	r2, #6
 800f6be:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	7f1a      	ldrb	r2, [r3, #28]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	7f5a      	ldrb	r2, [r3, #29]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	7f9a      	ldrb	r2, [r3, #30]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	7fda      	ldrb	r2, [r3, #31]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	3389      	adds	r3, #137	; 0x89
 800f706:	2209      	movs	r2, #9
 800f708:	4619      	mov	r1, r3
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f7ff fbe4 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f710:	bf00      	nop
 800f712:	3708      	adds	r7, #8
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}

0800f718 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	222b      	movs	r2, #43	; 0x2b
 800f724:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2204      	movs	r2, #4
 800f72c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2209      	movs	r2, #9
 800f734:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	7f1a      	ldrb	r2, [r3, #28]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	7f5a      	ldrb	r2, [r3, #29]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	7f9a      	ldrb	r2, [r3, #30]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	7fda      	ldrb	r2, [r3, #31]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2203      	movs	r2, #3
 800f77c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2200      	movs	r2, #0
 800f784:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2200      	movs	r2, #0
 800f78c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	3389      	adds	r3, #137	; 0x89
 800f794:	220c      	movs	r2, #12
 800f796:	4619      	mov	r1, r3
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f7ff fb9d 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f79e:	bf00      	nop
 800f7a0:	3708      	adds	r7, #8
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}

0800f7a6 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800f7a6:	b580      	push	{r7, lr}
 800f7a8:	b082      	sub	sp, #8
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	222c      	movs	r2, #44	; 0x2c
 800f7b2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2204      	movs	r2, #4
 800f7ba:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2206      	movs	r2, #6
 800f7c2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	7f1a      	ldrb	r2, [r3, #28]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	7f5a      	ldrb	r2, [r3, #29]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	7f9a      	ldrb	r2, [r3, #30]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	7fda      	ldrb	r2, [r3, #31]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	3389      	adds	r3, #137	; 0x89
 800f80a:	2209      	movs	r2, #9
 800f80c:	4619      	mov	r1, r3
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f7ff fb62 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f814:	bf00      	nop
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2211      	movs	r2, #17
 800f828:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2204      	movs	r2, #4
 800f830:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2202      	movs	r2, #2
 800f838:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	8b5b      	ldrh	r3, [r3, #26]
 800f840:	b2da      	uxtb	r2, r3
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	8b5b      	ldrh	r3, [r3, #26]
 800f84c:	121b      	asrs	r3, r3, #8
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	f003 030f 	and.w	r3, r3, #15
 800f854:	b2da      	uxtb	r2, r3
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	3389      	adds	r3, #137	; 0x89
 800f860:	2205      	movs	r2, #5
 800f862:	4619      	mov	r1, r3
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7ff fb37 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f86a:	bf00      	nop
 800f86c:	3708      	adds	r7, #8
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}

0800f872 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800f872:	b580      	push	{r7, lr}
 800f874:	b082      	sub	sp, #8
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
 800f87a:	460b      	mov	r3, r1
 800f87c:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f884:	f023 0304 	bic.w	r3, r3, #4
 800f888:	b29a      	uxth	r2, r3
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2206      	movs	r2, #6
 800f894:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2204      	movs	r2, #4
 800f89c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2203      	movs	r2, #3
 800f8a4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800f8a8:	887b      	ldrh	r3, [r7, #2]
 800f8aa:	b2da      	uxtb	r2, r3
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800f8b2:	887b      	ldrh	r3, [r7, #2]
 800f8b4:	121b      	asrs	r3, r3, #8
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	f003 030f 	and.w	r3, r3, #15
 800f8bc:	b2da      	uxtb	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2213      	movs	r2, #19
 800f8c8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	3389      	adds	r3, #137	; 0x89
 800f8d0:	2206      	movs	r2, #6
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7ff faff 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f8da:	bf00      	nop
 800f8dc:	3708      	adds	r7, #8
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}

0800f8e2 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b082      	sub	sp, #8
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2224      	movs	r2, #36	; 0x24
 800f8ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	220c      	movs	r2, #12
 800f8f6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2203      	movs	r2, #3
 800f8fe:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2204      	movs	r2, #4
 800f906:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2208      	movs	r2, #8
 800f90e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	3389      	adds	r3, #137	; 0x89
 800f91e:	2206      	movs	r2, #6
 800f920:	4619      	mov	r1, r3
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f7ff fad8 	bl	800eed8 <_ZN3BTD11HCI_CommandEPht>
}
 800f928:	bf00      	nop
 800f92a:	3708      	adds	r7, #8
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800f930:	b5b0      	push	{r4, r5, r7, lr}
 800f932:	b08a      	sub	sp, #40	; 0x28
 800f934:	af02      	add	r7, sp, #8
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	607a      	str	r2, [r7, #4]
 800f93a:	461a      	mov	r2, r3
 800f93c:	460b      	mov	r3, r1
 800f93e:	817b      	strh	r3, [r7, #10]
 800f940:	4613      	mov	r3, r2
 800f942:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800f944:	466b      	mov	r3, sp
 800f946:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800f948:	7a7b      	ldrb	r3, [r7, #9]
 800f94a:	1ddc      	adds	r4, r3, #7
 800f94c:	61bc      	str	r4, [r7, #24]
 800f94e:	4623      	mov	r3, r4
 800f950:	3301      	adds	r3, #1
 800f952:	4618      	mov	r0, r3
 800f954:	f04f 0100 	mov.w	r1, #0
 800f958:	f04f 0200 	mov.w	r2, #0
 800f95c:	f04f 0300 	mov.w	r3, #0
 800f960:	00cb      	lsls	r3, r1, #3
 800f962:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f966:	00c2      	lsls	r2, r0, #3
 800f968:	4623      	mov	r3, r4
 800f96a:	3301      	adds	r3, #1
 800f96c:	4618      	mov	r0, r3
 800f96e:	f04f 0100 	mov.w	r1, #0
 800f972:	f04f 0200 	mov.w	r2, #0
 800f976:	f04f 0300 	mov.w	r3, #0
 800f97a:	00cb      	lsls	r3, r1, #3
 800f97c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f980:	00c2      	lsls	r2, r0, #3
 800f982:	4623      	mov	r3, r4
 800f984:	3301      	adds	r3, #1
 800f986:	3307      	adds	r3, #7
 800f988:	08db      	lsrs	r3, r3, #3
 800f98a:	00db      	lsls	r3, r3, #3
 800f98c:	ebad 0d03 	sub.w	sp, sp, r3
 800f990:	ab02      	add	r3, sp, #8
 800f992:	3300      	adds	r3, #0
 800f994:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800f996:	897b      	ldrh	r3, [r7, #10]
 800f998:	b2da      	uxtb	r2, r3
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800f99e:	897b      	ldrh	r3, [r7, #10]
 800f9a0:	121b      	asrs	r3, r3, #8
 800f9a2:	b25b      	sxtb	r3, r3
 800f9a4:	f003 030f 	and.w	r3, r3, #15
 800f9a8:	b25b      	sxtb	r3, r3
 800f9aa:	f043 0320 	orr.w	r3, r3, #32
 800f9ae:	b25b      	sxtb	r3, r3
 800f9b0:	b2da      	uxtb	r2, r3
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800f9b6:	7a7b      	ldrb	r3, [r7, #9]
 800f9b8:	3304      	adds	r3, #4
 800f9ba:	b2da      	uxtb	r2, r3
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800f9c0:	7a7b      	ldrb	r3, [r7, #9]
 800f9c2:	3304      	adds	r3, #4
 800f9c4:	121b      	asrs	r3, r3, #8
 800f9c6:	b2da      	uxtb	r2, r3
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	7a7a      	ldrb	r2, [r7, #9]
 800f9d0:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800f9d2:	7a7b      	ldrb	r3, [r7, #9]
 800f9d4:	121b      	asrs	r3, r3, #8
 800f9d6:	b2da      	uxtb	r2, r3
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800f9e2:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f9ea:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	83fb      	strh	r3, [r7, #30]
 800f9f0:	7a7b      	ldrb	r3, [r7, #9]
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	8bfa      	ldrh	r2, [r7, #30]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d20b      	bcs.n	800fa12 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800f9fa:	8bfb      	ldrh	r3, [r7, #30]
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	441a      	add	r2, r3
 800fa00:	8bfb      	ldrh	r3, [r7, #30]
 800fa02:	3308      	adds	r3, #8
 800fa04:	7811      	ldrb	r1, [r2, #0]
 800fa06:	697a      	ldr	r2, [r7, #20]
 800fa08:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800fa0a:	8bfb      	ldrh	r3, [r7, #30]
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	83fb      	strh	r3, [r7, #30]
 800fa10:	e7ee      	b.n	800f9f0 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800fa22:	7a7b      	ldrb	r3, [r7, #9]
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	3308      	adds	r3, #8
 800fa28:	b29c      	uxth	r4, r3
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	9300      	str	r3, [sp, #0]
 800fa2e:	4623      	mov	r3, r4
 800fa30:	f002 fc34 	bl	801229c <_ZN3USB11outTransferEhhtPh>
 800fa34:	4603      	mov	r3, r0
 800fa36:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800fa38:	7cfb      	ldrb	r3, [r7, #19]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d002      	beq.n	800fa44 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800fa3e:	2064      	movs	r0, #100	; 0x64
 800fa40:	f7f2 feaa 	bl	8002798 <HAL_Delay>
 800fa44:	46ad      	mov	sp, r5
}
 800fa46:	bf00      	nop
 800fa48:	3720      	adds	r7, #32
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bdb0      	pop	{r4, r5, r7, pc}

0800fa4e <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800fa4e:	b580      	push	{r7, lr}
 800fa50:	b086      	sub	sp, #24
 800fa52:	af02      	add	r7, sp, #8
 800fa54:	60f8      	str	r0, [r7, #12]
 800fa56:	607b      	str	r3, [r7, #4]
 800fa58:	460b      	mov	r3, r1
 800fa5a:	817b      	strh	r3, [r7, #10]
 800fa5c:	4613      	mov	r3, r2
 800fa5e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	2202      	movs	r2, #2
 800fa64:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	7a7a      	ldrb	r2, [r7, #9]
 800fa6c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	2204      	movs	r2, #4
 800fa74:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800fa80:	8b3b      	ldrh	r3, [r7, #24]
 800fa82:	b2da      	uxtb	r2, r3
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800fa8a:	8b3b      	ldrh	r3, [r7, #24]
 800fa8c:	121b      	asrs	r3, r3, #8
 800fa8e:	b2da      	uxtb	r2, r3
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	781a      	ldrb	r2, [r3, #0]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	785a      	ldrb	r2, [r3, #1]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fab0:	8979      	ldrh	r1, [r7, #10]
 800fab2:	2300      	movs	r3, #0
 800fab4:	9301      	str	r3, [sp, #4]
 800fab6:	2301      	movs	r3, #1
 800fab8:	9300      	str	r3, [sp, #0]
 800faba:	2308      	movs	r3, #8
 800fabc:	68f8      	ldr	r0, [r7, #12]
 800fabe:	f7ff ff37 	bl	800f930 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fac2:	bf00      	nop
 800fac4:	3710      	adds	r7, #16
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800faca:	b580      	push	{r7, lr}
 800facc:	b086      	sub	sp, #24
 800face:	af02      	add	r7, sp, #8
 800fad0:	60f8      	str	r0, [r7, #12]
 800fad2:	607b      	str	r3, [r7, #4]
 800fad4:	460b      	mov	r3, r1
 800fad6:	817b      	strh	r3, [r7, #10]
 800fad8:	4613      	mov	r3, r2
 800fada:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2203      	movs	r2, #3
 800fae0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	7a7a      	ldrb	r2, [r7, #9]
 800fae8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2208      	movs	r2, #8
 800faf0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2200      	movs	r2, #0
 800faf8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	781a      	ldrb	r2, [r3, #0]
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	785a      	ldrb	r2, [r3, #1]
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800fb10:	69bb      	ldr	r3, [r7, #24]
 800fb12:	781a      	ldrb	r2, [r3, #0]
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fb1a:	69bb      	ldr	r3, [r7, #24]
 800fb1c:	785a      	ldrb	r2, [r3, #1]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	7f3a      	ldrb	r2, [r7, #28]
 800fb28:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2200      	movs	r2, #0
 800fb38:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fb4a:	8979      	ldrh	r1, [r7, #10]
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	9301      	str	r3, [sp, #4]
 800fb50:	2301      	movs	r3, #1
 800fb52:	9300      	str	r3, [sp, #0]
 800fb54:	230c      	movs	r3, #12
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	f7ff feea 	bl	800f930 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fb5c:	bf00      	nop
 800fb5e:	3710      	adds	r7, #16
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b086      	sub	sp, #24
 800fb68:	af02      	add	r7, sp, #8
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	607b      	str	r3, [r7, #4]
 800fb6e:	460b      	mov	r3, r1
 800fb70:	817b      	strh	r3, [r7, #10]
 800fb72:	4613      	mov	r3, r2
 800fb74:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	2204      	movs	r2, #4
 800fb7a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	7a7a      	ldrb	r2, [r7, #9]
 800fb82:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2208      	movs	r2, #8
 800fb8a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2200      	movs	r2, #0
 800fb92:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	781a      	ldrb	r2, [r3, #0]
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	785a      	ldrb	r2, [r3, #1]
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2200      	movs	r2, #0
 800fbae:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	2202      	movs	r2, #2
 800fbc6:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	22ff      	movs	r2, #255	; 0xff
 800fbce:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	22ff      	movs	r2, #255	; 0xff
 800fbd6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fbe0:	8979      	ldrh	r1, [r7, #10]
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	9301      	str	r3, [sp, #4]
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	9300      	str	r3, [sp, #0]
 800fbea:	230c      	movs	r3, #12
 800fbec:	68f8      	ldr	r0, [r7, #12]
 800fbee:	f7ff fe9f 	bl	800f930 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fbf2:	bf00      	nop
 800fbf4:	3710      	adds	r7, #16
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}

0800fbfa <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800fbfa:	b580      	push	{r7, lr}
 800fbfc:	b086      	sub	sp, #24
 800fbfe:	af02      	add	r7, sp, #8
 800fc00:	60f8      	str	r0, [r7, #12]
 800fc02:	607b      	str	r3, [r7, #4]
 800fc04:	460b      	mov	r3, r1
 800fc06:	817b      	strh	r3, [r7, #10]
 800fc08:	4613      	mov	r3, r2
 800fc0a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2205      	movs	r2, #5
 800fc10:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	7a7a      	ldrb	r2, [r7, #9]
 800fc18:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	220a      	movs	r2, #10
 800fc20:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2200      	movs	r2, #0
 800fc28:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	781a      	ldrb	r2, [r3, #0]
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	785a      	ldrb	r2, [r3, #1]
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2200      	movs	r2, #0
 800fc44:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	2200      	movs	r2, #0
 800fc54:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2201      	movs	r2, #1
 800fc64:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2202      	movs	r2, #2
 800fc6c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	22a0      	movs	r2, #160	; 0xa0
 800fc74:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2202      	movs	r2, #2
 800fc7c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fc86:	8979      	ldrh	r1, [r7, #10]
 800fc88:	2300      	movs	r3, #0
 800fc8a:	9301      	str	r3, [sp, #4]
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	9300      	str	r3, [sp, #0]
 800fc90:	230e      	movs	r3, #14
 800fc92:	68f8      	ldr	r0, [r7, #12]
 800fc94:	f7ff fe4c 	bl	800f930 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fc98:	bf00      	nop
 800fc9a:	3710      	adds	r7, #16
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b086      	sub	sp, #24
 800fca4:	af02      	add	r7, sp, #8
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	607b      	str	r3, [r7, #4]
 800fcaa:	460b      	mov	r3, r1
 800fcac:	817b      	strh	r3, [r7, #10]
 800fcae:	4613      	mov	r3, r2
 800fcb0:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2206      	movs	r2, #6
 800fcb6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	7a7a      	ldrb	r2, [r7, #9]
 800fcbe:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2204      	movs	r2, #4
 800fcc6:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2200      	movs	r2, #0
 800fcce:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	781a      	ldrb	r2, [r3, #0]
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	785a      	ldrb	r2, [r3, #1]
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800fce6:	69bb      	ldr	r3, [r7, #24]
 800fce8:	781a      	ldrb	r2, [r3, #0]
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fcf0:	69bb      	ldr	r3, [r7, #24]
 800fcf2:	785a      	ldrb	r2, [r3, #1]
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fd00:	8979      	ldrh	r1, [r7, #10]
 800fd02:	2300      	movs	r3, #0
 800fd04:	9301      	str	r3, [sp, #4]
 800fd06:	2301      	movs	r3, #1
 800fd08:	9300      	str	r3, [sp, #0]
 800fd0a:	2308      	movs	r3, #8
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f7ff fe0f 	bl	800f930 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fd12:	bf00      	nop
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}

0800fd1a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800fd1a:	b580      	push	{r7, lr}
 800fd1c:	b086      	sub	sp, #24
 800fd1e:	af02      	add	r7, sp, #8
 800fd20:	60f8      	str	r0, [r7, #12]
 800fd22:	607b      	str	r3, [r7, #4]
 800fd24:	460b      	mov	r3, r1
 800fd26:	817b      	strh	r3, [r7, #10]
 800fd28:	4613      	mov	r3, r2
 800fd2a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2207      	movs	r2, #7
 800fd30:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	7a7a      	ldrb	r2, [r7, #9]
 800fd38:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2204      	movs	r2, #4
 800fd40:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2200      	movs	r2, #0
 800fd48:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	781a      	ldrb	r2, [r3, #0]
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	785a      	ldrb	r2, [r3, #1]
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800fd60:	69bb      	ldr	r3, [r7, #24]
 800fd62:	781a      	ldrb	r2, [r3, #0]
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fd6a:	69bb      	ldr	r3, [r7, #24]
 800fd6c:	785a      	ldrb	r2, [r3, #1]
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fd7a:	8979      	ldrh	r1, [r7, #10]
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	9301      	str	r3, [sp, #4]
 800fd80:	2301      	movs	r3, #1
 800fd82:	9300      	str	r3, [sp, #0]
 800fd84:	2308      	movs	r3, #8
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f7ff fdd2 	bl	800f930 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fd8c:	bf00      	nop
 800fd8e:	3710      	adds	r7, #16
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af02      	add	r7, sp, #8
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	4608      	mov	r0, r1
 800fd9e:	4611      	mov	r1, r2
 800fda0:	461a      	mov	r2, r3
 800fda2:	4603      	mov	r3, r0
 800fda4:	807b      	strh	r3, [r7, #2]
 800fda6:	460b      	mov	r3, r1
 800fda8:	707b      	strb	r3, [r7, #1]
 800fdaa:	4613      	mov	r3, r2
 800fdac:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	220b      	movs	r2, #11
 800fdb2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	787a      	ldrb	r2, [r7, #1]
 800fdba:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2208      	movs	r2, #8
 800fdc2:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	783a      	ldrb	r2, [r7, #0]
 800fdd2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	7c3a      	ldrb	r2, [r7, #16]
 800fdda:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2200      	movs	r2, #0
 800fde2:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2200      	movs	r2, #0
 800fe02:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fe14:	8879      	ldrh	r1, [r7, #2]
 800fe16:	2300      	movs	r3, #0
 800fe18:	9301      	str	r3, [sp, #4]
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	9300      	str	r3, [sp, #0]
 800fe1e:	230c      	movs	r3, #12
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f7ff fd85 	bl	800f930 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fe26:	bf00      	nop
 800fe28:	3708      	adds	r7, #8
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}

0800fe2e <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800fe2e:	b580      	push	{r7, lr}
 800fe30:	b08e      	sub	sp, #56	; 0x38
 800fe32:	af08      	add	r7, sp, #32
 800fe34:	6078      	str	r0, [r7, #4]
 800fe36:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800fe38:	2301      	movs	r3, #1
 800fe3a:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800fe40:	2300      	movs	r3, #0
 800fe42:	75fb      	strb	r3, [r7, #23]
 800fe44:	7dfb      	ldrb	r3, [r7, #23]
 800fe46:	2b05      	cmp	r3, #5
 800fe48:	d811      	bhi.n	800fe6e <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800fe4a:	7dfb      	ldrb	r3, [r7, #23]
 800fe4c:	f1c3 0305 	rsb	r3, r3, #5
 800fe50:	461a      	mov	r2, r3
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	441a      	add	r2, r3
 800fe56:	7dfb      	ldrb	r3, [r7, #23]
 800fe58:	3302      	adds	r3, #2
 800fe5a:	7812      	ldrb	r2, [r2, #0]
 800fe5c:	f107 0118 	add.w	r1, r7, #24
 800fe60:	440b      	add	r3, r1
 800fe62:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800fe66:	7dfb      	ldrb	r3, [r7, #23]
 800fe68:	3301      	adds	r3, #1
 800fe6a:	75fb      	strb	r3, [r7, #23]
 800fe6c:	e7ea      	b.n	800fe44 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800fe7e:	2300      	movs	r3, #0
 800fe80:	9307      	str	r3, [sp, #28]
 800fe82:	f107 030c 	add.w	r3, r7, #12
 800fe86:	9306      	str	r3, [sp, #24]
 800fe88:	2308      	movs	r3, #8
 800fe8a:	9305      	str	r3, [sp, #20]
 800fe8c:	2308      	movs	r3, #8
 800fe8e:	9304      	str	r3, [sp, #16]
 800fe90:	2300      	movs	r3, #0
 800fe92:	9303      	str	r3, [sp, #12]
 800fe94:	2303      	movs	r3, #3
 800fe96:	9302      	str	r3, [sp, #8]
 800fe98:	23f5      	movs	r3, #245	; 0xf5
 800fe9a:	9301      	str	r3, [sp, #4]
 800fe9c:	2309      	movs	r3, #9
 800fe9e:	9300      	str	r3, [sp, #0]
 800fea0:	2321      	movs	r3, #33	; 0x21
 800fea2:	f002 f81c 	bl	8011ede <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800fea6:	bf00      	nop
 800fea8:	3718      	adds	r7, #24
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}

0800feae <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800feae:	b580      	push	{r7, lr}
 800feb0:	b08e      	sub	sp, #56	; 0x38
 800feb2:	af08      	add	r7, sp, #32
 800feb4:	6078      	str	r0, [r7, #4]
 800feb6:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800feb8:	2305      	movs	r3, #5
 800feba:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800febc:	2310      	movs	r3, #16
 800febe:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800fec0:	2301      	movs	r3, #1
 800fec2:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800fec4:	2302      	movs	r3, #2
 800fec6:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800fec8:	2312      	movs	r3, #18
 800feca:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800fecc:	2300      	movs	r3, #0
 800fece:	75fb      	strb	r3, [r7, #23]
 800fed0:	7dfb      	ldrb	r3, [r7, #23]
 800fed2:	2b05      	cmp	r3, #5
 800fed4:	d80e      	bhi.n	800fef4 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800fed6:	7dfb      	ldrb	r3, [r7, #23]
 800fed8:	683a      	ldr	r2, [r7, #0]
 800feda:	441a      	add	r2, r3
 800fedc:	7dfb      	ldrb	r3, [r7, #23]
 800fede:	3301      	adds	r3, #1
 800fee0:	7812      	ldrb	r2, [r2, #0]
 800fee2:	f107 0118 	add.w	r1, r7, #24
 800fee6:	440b      	add	r3, r1
 800fee8:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800feec:	7dfb      	ldrb	r3, [r7, #23]
 800feee:	3301      	adds	r3, #1
 800fef0:	75fb      	strb	r3, [r7, #23]
 800fef2:	e7ed      	b.n	800fed0 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ff04:	2300      	movs	r3, #0
 800ff06:	9307      	str	r3, [sp, #28]
 800ff08:	f107 030c 	add.w	r3, r7, #12
 800ff0c:	9306      	str	r3, [sp, #24]
 800ff0e:	230b      	movs	r3, #11
 800ff10:	9305      	str	r3, [sp, #20]
 800ff12:	230b      	movs	r3, #11
 800ff14:	9304      	str	r3, [sp, #16]
 800ff16:	2300      	movs	r3, #0
 800ff18:	9303      	str	r3, [sp, #12]
 800ff1a:	2303      	movs	r3, #3
 800ff1c:	9302      	str	r3, [sp, #8]
 800ff1e:	2305      	movs	r3, #5
 800ff20:	9301      	str	r3, [sp, #4]
 800ff22:	2309      	movs	r3, #9
 800ff24:	9300      	str	r3, [sp, #0]
 800ff26:	2321      	movs	r3, #33	; 0x21
 800ff28:	f001 ffd9 	bl	8011ede <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ff2c:	bf00      	nop
 800ff2e:	3718      	adds	r7, #24
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	4a04      	ldr	r2, [pc, #16]	; (800ff50 <_ZN13USBReadParserC1Ev+0x1c>)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	601a      	str	r2, [r3, #0]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4618      	mov	r0, r3
 800ff46:	370c      	adds	r7, #12
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr
 800ff50:	0801493c 	.word	0x0801493c

0800ff54 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7ff ffe7 	bl	800ff34 <_ZN13USBReadParserC1Ev>
 800ff66:	4a21      	ldr	r2, [pc, #132]	; (800ffec <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	601a      	str	r2, [r3, #0]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	683a      	ldr	r2, [r7, #0]
 800ff70:	605a      	str	r2, [r3, #4]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	3308      	adds	r3, #8
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fd fb65 	bl	800d646 <_ZN16MultiValueBufferC1Ev>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	3310      	adds	r3, #16
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7fd fb77 	bl	800d674 <_ZN20MultiByteValueParserC1Ev>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	3318      	adds	r3, #24
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7fd fb9e 	bl	800d6cc <_ZN11ByteSkipperC1Ev>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2200      	movs	r2, #0
 800ff94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f103 0220 	add.w	r2, r3, #32
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f103 0210 	add.w	r2, r3, #16
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	3308      	adds	r3, #8
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	4610      	mov	r0, r2
 800ffca:	f7fd fb67 	bl	800d69c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f103 0218 	add.w	r2, r3, #24
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	3308      	adds	r3, #8
 800ffd8:	4619      	mov	r1, r3
 800ffda:	4610      	mov	r0, r2
 800ffdc:	f7fd fb8a 	bl	800d6f4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3708      	adds	r7, #8
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
 800ffea:	bf00      	nop
 800ffec:	080148e4 	.word	0x080148e4

0800fff0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b082      	sub	sp, #8
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7ff ff99 	bl	800ff34 <_ZN13USBReadParserC1Ev>
 8010002:	4a21      	ldr	r2, [pc, #132]	; (8010088 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	601a      	str	r2, [r3, #0]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	683a      	ldr	r2, [r7, #0]
 801000c:	605a      	str	r2, [r3, #4]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	3308      	adds	r3, #8
 8010012:	4618      	mov	r0, r3
 8010014:	f7fd fb17 	bl	800d646 <_ZN16MultiValueBufferC1Ev>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	3310      	adds	r3, #16
 801001c:	4618      	mov	r0, r3
 801001e:	f7fd fb29 	bl	800d674 <_ZN20MultiByteValueParserC1Ev>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	3318      	adds	r3, #24
 8010026:	4618      	mov	r0, r3
 8010028:	f7fd fb50 	bl	800d6cc <_ZN11ByteSkipperC1Ev>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2200      	movs	r2, #0
 8010038:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2200      	movs	r2, #0
 8010040:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2200      	movs	r2, #0
 8010048:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f103 0220 	add.w	r2, r3, #32
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f103 0210 	add.w	r2, r3, #16
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	3308      	adds	r3, #8
 8010062:	4619      	mov	r1, r3
 8010064:	4610      	mov	r0, r2
 8010066:	f7fd fb19 	bl	800d69c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f103 0218 	add.w	r2, r3, #24
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	3308      	adds	r3, #8
 8010074:	4619      	mov	r1, r3
 8010076:	4610      	mov	r0, r2
 8010078:	f7fd fb3c 	bl	800d6f4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	4618      	mov	r0, r3
 8010080:	3708      	adds	r7, #8
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	080148d8 	.word	0x080148d8

0801008c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 801008c:	b580      	push	{r7, lr}
 801008e:	b086      	sub	sp, #24
 8010090:	af00      	add	r7, sp, #0
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	607a      	str	r2, [r7, #4]
 8010096:	603b      	str	r3, [r7, #0]
 8010098:	460b      	mov	r3, r1
 801009a:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 801009c:	897b      	ldrh	r3, [r7, #10]
 801009e:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	613b      	str	r3, [r7, #16]

        while(cntdn)
 80100a4:	8afb      	ldrh	r3, [r7, #22]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d00f      	beq.n	80100ca <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 80100aa:	f107 0216 	add.w	r2, r7, #22
 80100ae:	f107 0310 	add.w	r3, r7, #16
 80100b2:	4619      	mov	r1, r3
 80100b4:	68f8      	ldr	r0, [r7, #12]
 80100b6:	f000 f82d 	bl	8010114 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 80100ba:	4603      	mov	r3, r0
 80100bc:	f083 0301 	eor.w	r3, r3, #1
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d100      	bne.n	80100c8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 80100c6:	e7ed      	b.n	80100a4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 80100c8:	bf00      	nop
}
 80100ca:	3718      	adds	r7, #24
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	607a      	str	r2, [r7, #4]
 80100da:	603b      	str	r3, [r7, #0]
 80100dc:	460b      	mov	r3, r1
 80100de:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 80100e0:	897b      	ldrh	r3, [r7, #10]
 80100e2:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	613b      	str	r3, [r7, #16]
        while(cntdn)
 80100e8:	8afb      	ldrh	r3, [r7, #22]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d00f      	beq.n	801010e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 80100ee:	f107 0216 	add.w	r2, r7, #22
 80100f2:	f107 0310 	add.w	r3, r7, #16
 80100f6:	4619      	mov	r1, r3
 80100f8:	68f8      	ldr	r0, [r7, #12]
 80100fa:	f000 f981 	bl	8010400 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 80100fe:	4603      	mov	r3, r0
 8010100:	f083 0301 	eor.w	r3, r3, #1
 8010104:	b2db      	uxtb	r3, r3
 8010106:	2b00      	cmp	r3, #0
 8010108:	d100      	bne.n	801010c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 801010a:	e7ed      	b.n	80100e8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 801010c:	bf00      	nop
}
 801010e:	3718      	adds	r7, #24
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8010114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010116:	b089      	sub	sp, #36	; 0x24
 8010118:	af02      	add	r7, sp, #8
 801011a:	60f8      	str	r0, [r7, #12]
 801011c:	60b9      	str	r1, [r7, #8]
 801011e:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	3320      	adds	r3, #32
 8010124:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	3320      	adds	r3, #32
 801012a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010132:	2b04      	cmp	r3, #4
 8010134:	f200 815e 	bhi.w	80103f4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8010138:	a201      	add	r2, pc, #4	; (adr r2, 8010140 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 801013a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801013e:	bf00      	nop
 8010140:	08010155 	.word	0x08010155
 8010144:	08010175 	.word	0x08010175
 8010148:	080101b7 	.word	0x080101b7
 801014c:	080101cb 	.word	0x080101cb
 8010150:	0801028f 	.word	0x0801028f
                case 0:
                        theBuffer.valueSize = 2;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2202      	movs	r2, #2
 8010158:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f103 0210 	add.w	r2, r3, #16
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	3308      	adds	r3, #8
 8010164:	4619      	mov	r1, r3
 8010166:	4610      	mov	r0, r2
 8010168:	f7fd fa98 	bl	800d69c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2201      	movs	r2, #1
 8010170:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	3310      	adds	r3, #16
 8010178:	687a      	ldr	r2, [r7, #4]
 801017a:	68b9      	ldr	r1, [r7, #8]
 801017c:	4618      	mov	r0, r3
 801017e:	f003 fa49 	bl	8013614 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010182:	4603      	mov	r3, r0
 8010184:	f083 0301 	eor.w	r3, r3, #1
 8010188:	b2db      	uxtb	r3, r3
 801018a:	2b00      	cmp	r3, #0
 801018c:	d001      	beq.n	8010192 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 801018e:	2300      	movs	r3, #0
 8010190:	e131      	b.n	80103f6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8010198:	781a      	ldrb	r2, [r3, #0]
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80101a6:	785a      	ldrb	r2, [r3, #1]
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2202      	movs	r2, #2
 80101b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	3320      	adds	r3, #32
 80101ba:	1c9a      	adds	r2, r3, #2
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2203      	movs	r2, #3
 80101c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80101d0:	3b02      	subs	r3, #2
 80101d2:	2b1f      	cmp	r3, #31
 80101d4:	d847      	bhi.n	8010266 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 80101d6:	a201      	add	r2, pc, #4	; (adr r2, 80101dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 80101d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101dc:	08010267 	.word	0x08010267
 80101e0:	08010267 	.word	0x08010267
 80101e4:	0801025d 	.word	0x0801025d
 80101e8:	08010267 	.word	0x08010267
 80101ec:	08010267 	.word	0x08010267
 80101f0:	08010267 	.word	0x08010267
 80101f4:	08010267 	.word	0x08010267
 80101f8:	08010267 	.word	0x08010267
 80101fc:	08010267 	.word	0x08010267
 8010200:	08010267 	.word	0x08010267
 8010204:	08010267 	.word	0x08010267
 8010208:	08010267 	.word	0x08010267
 801020c:	08010267 	.word	0x08010267
 8010210:	08010267 	.word	0x08010267
 8010214:	08010267 	.word	0x08010267
 8010218:	08010267 	.word	0x08010267
 801021c:	08010267 	.word	0x08010267
 8010220:	08010267 	.word	0x08010267
 8010224:	08010267 	.word	0x08010267
 8010228:	08010267 	.word	0x08010267
 801022c:	08010267 	.word	0x08010267
 8010230:	08010267 	.word	0x08010267
 8010234:	08010267 	.word	0x08010267
 8010238:	08010267 	.word	0x08010267
 801023c:	08010267 	.word	0x08010267
 8010240:	08010267 	.word	0x08010267
 8010244:	08010267 	.word	0x08010267
 8010248:	08010267 	.word	0x08010267
 801024c:	08010267 	.word	0x08010267
 8010250:	08010267 	.word	0x08010267
 8010254:	08010267 	.word	0x08010267
 8010258:	08010267 	.word	0x08010267
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2200      	movs	r2, #0
 8010260:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 8010264:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801026c:	3b02      	subs	r3, #2
 801026e:	b2da      	uxtb	r2, r3
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	f103 0210 	add.w	r2, r3, #16
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	3308      	adds	r3, #8
 801027e:	4619      	mov	r1, r3
 8010280:	4610      	mov	r0, r2
 8010282:	f7fd fa0b 	bl	800d69c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2204      	movs	r2, #4
 801028a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010294:	2b05      	cmp	r3, #5
 8010296:	d055      	beq.n	8010344 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 8010298:	2b05      	cmp	r3, #5
 801029a:	f300 8085 	bgt.w	80103a8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 801029e:	2b02      	cmp	r3, #2
 80102a0:	d002      	beq.n	80102a8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 80102a2:	2b04      	cmp	r3, #4
 80102a4:	d015      	beq.n	80102d2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 80102a6:	e07f      	b.n	80103a8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	3310      	adds	r3, #16
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	68b9      	ldr	r1, [r7, #8]
 80102b0:	4618      	mov	r0, r3
 80102b2:	f003 f9af 	bl	8013614 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80102b6:	4603      	mov	r3, r0
 80102b8:	f083 0301 	eor.w	r3, r3, #1
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d001      	beq.n	80102c6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 80102c2:	2300      	movs	r3, #0
 80102c4:	e097      	b.n	80103f6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	795a      	ldrb	r2, [r3, #5]
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 80102d0:	e086      	b.n	80103e0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	3310      	adds	r3, #16
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	68b9      	ldr	r1, [r7, #8]
 80102da:	4618      	mov	r0, r3
 80102dc:	f003 f99a 	bl	8013614 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80102e0:	4603      	mov	r3, r0
 80102e2:	f083 0301 	eor.w	r3, r3, #1
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d001      	beq.n	80102f0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 80102ec:	2300      	movs	r3, #0
 80102ee:	e082      	b.n	80103f6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	795b      	ldrb	r3, [r3, #5]
 80102f4:	2be0      	cmp	r3, #224	; 0xe0
 80102f6:	d16c      	bne.n	80103d2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	799b      	ldrb	r3, [r3, #6]
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d16a      	bne.n	80103d6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010306:	2b00      	cmp	r3, #0
 8010308:	d004      	beq.n	8010314 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	79db      	ldrb	r3, [r3, #7]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d104      	bne.n	801031c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 8010312:	e065      	b.n	80103e0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	79db      	ldrb	r3, [r3, #7]
 8010318:	2b01      	cmp	r3, #1
 801031a:	d15e      	bne.n	80103da <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2201      	movs	r2, #1
 8010320:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	789a      	ldrb	r2, [r3, #2]
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	78da      	ldrb	r2, [r3, #3]
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	79da      	ldrb	r2, [r3, #7]
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 8010342:	e04d      	b.n	80103e0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	3310      	adds	r3, #16
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	68b9      	ldr	r1, [r7, #8]
 801034c:	4618      	mov	r0, r3
 801034e:	f003 f961 	bl	8013614 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010352:	4603      	mov	r3, r0
 8010354:	f083 0301 	eor.w	r3, r3, #1
 8010358:	b2db      	uxtb	r3, r3
 801035a:	2b00      	cmp	r3, #0
 801035c:	d001      	beq.n	8010362 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 801035e:	2300      	movs	r3, #0
 8010360:	e049      	b.n	80103f6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010368:	2b00      	cmp	r3, #0
 801036a:	d038      	beq.n	80103de <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d034      	beq.n	80103de <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	6858      	ldr	r0, [r3, #4]
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	681c      	ldr	r4, [r3, #0]
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010398:	68fa      	ldr	r2, [r7, #12]
 801039a:	3220      	adds	r2, #32
 801039c:	9201      	str	r2, [sp, #4]
 801039e:	9300      	str	r3, [sp, #0]
 80103a0:	4633      	mov	r3, r6
 80103a2:	462a      	mov	r2, r5
 80103a4:	47a0      	blx	r4
                                        break;
 80103a6:	e01a      	b.n	80103de <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f103 0018 	add.w	r0, r3, #24
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	3b02      	subs	r3, #2
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	687a      	ldr	r2, [r7, #4]
 80103bc:	68b9      	ldr	r1, [r7, #8]
 80103be:	f7fd f9ac 	bl	800d71a <_ZN11ByteSkipper4SkipEPPhPtt>
 80103c2:	4603      	mov	r3, r0
 80103c4:	f083 0301 	eor.w	r3, r3, #1
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d008      	beq.n	80103e0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 80103ce:	2300      	movs	r3, #0
 80103d0:	e011      	b.n	80103f6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 80103d2:	bf00      	nop
 80103d4:	e004      	b.n	80103e0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 80103d6:	bf00      	nop
 80103d8:	e002      	b.n	80103e0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 80103da:	bf00      	nop
 80103dc:	e000      	b.n	80103e0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 80103de:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f103 0220 	add.w	r2, r3, #32
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	2200      	movs	r2, #0
 80103f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 80103f4:	2301      	movs	r3, #1
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	371c      	adds	r7, #28
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103fe:	bf00      	nop

08010400 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8010400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010402:	b089      	sub	sp, #36	; 0x24
 8010404:	af02      	add	r7, sp, #8
 8010406:	60f8      	str	r0, [r7, #12]
 8010408:	60b9      	str	r1, [r7, #8]
 801040a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	3320      	adds	r3, #32
 8010410:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	3320      	adds	r3, #32
 8010416:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801041e:	2b04      	cmp	r3, #4
 8010420:	f200 815e 	bhi.w	80106e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8010424:	a201      	add	r2, pc, #4	; (adr r2, 801042c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 8010426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801042a:	bf00      	nop
 801042c:	08010441 	.word	0x08010441
 8010430:	08010461 	.word	0x08010461
 8010434:	080104a3 	.word	0x080104a3
 8010438:	080104b7 	.word	0x080104b7
 801043c:	0801057b 	.word	0x0801057b
                        theBuffer.valueSize = 2;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2202      	movs	r2, #2
 8010444:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	f103 0210 	add.w	r2, r3, #16
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	3308      	adds	r3, #8
 8010450:	4619      	mov	r1, r3
 8010452:	4610      	mov	r0, r2
 8010454:	f7fd f922 	bl	800d69c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2201      	movs	r2, #1
 801045c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	3310      	adds	r3, #16
 8010464:	687a      	ldr	r2, [r7, #4]
 8010466:	68b9      	ldr	r1, [r7, #8]
 8010468:	4618      	mov	r0, r3
 801046a:	f003 f8d3 	bl	8013614 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801046e:	4603      	mov	r3, r0
 8010470:	f083 0301 	eor.w	r3, r3, #1
 8010474:	b2db      	uxtb	r3, r3
 8010476:	2b00      	cmp	r3, #0
 8010478:	d001      	beq.n	801047e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 801047a:	2300      	movs	r3, #0
 801047c:	e131      	b.n	80106e2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8010484:	781a      	ldrb	r2, [r3, #0]
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8010492:	785a      	ldrb	r2, [r3, #1]
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2202      	movs	r2, #2
 801049e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	3320      	adds	r3, #32
 80104a6:	1c9a      	adds	r2, r3, #2
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2203      	movs	r2, #3
 80104b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80104bc:	3b02      	subs	r3, #2
 80104be:	2b1f      	cmp	r3, #31
 80104c0:	d847      	bhi.n	8010552 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 80104c2:	a201      	add	r2, pc, #4	; (adr r2, 80104c8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 80104c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104c8:	08010553 	.word	0x08010553
 80104cc:	08010553 	.word	0x08010553
 80104d0:	08010549 	.word	0x08010549
 80104d4:	08010553 	.word	0x08010553
 80104d8:	08010553 	.word	0x08010553
 80104dc:	08010553 	.word	0x08010553
 80104e0:	08010553 	.word	0x08010553
 80104e4:	08010553 	.word	0x08010553
 80104e8:	08010553 	.word	0x08010553
 80104ec:	08010553 	.word	0x08010553
 80104f0:	08010553 	.word	0x08010553
 80104f4:	08010553 	.word	0x08010553
 80104f8:	08010553 	.word	0x08010553
 80104fc:	08010553 	.word	0x08010553
 8010500:	08010553 	.word	0x08010553
 8010504:	08010553 	.word	0x08010553
 8010508:	08010553 	.word	0x08010553
 801050c:	08010553 	.word	0x08010553
 8010510:	08010553 	.word	0x08010553
 8010514:	08010553 	.word	0x08010553
 8010518:	08010553 	.word	0x08010553
 801051c:	08010553 	.word	0x08010553
 8010520:	08010553 	.word	0x08010553
 8010524:	08010553 	.word	0x08010553
 8010528:	08010553 	.word	0x08010553
 801052c:	08010553 	.word	0x08010553
 8010530:	08010553 	.word	0x08010553
 8010534:	08010553 	.word	0x08010553
 8010538:	08010553 	.word	0x08010553
 801053c:	08010553 	.word	0x08010553
 8010540:	08010553 	.word	0x08010553
 8010544:	08010553 	.word	0x08010553
                                        isGoodInterface = false;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2200      	movs	r2, #0
 801054c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 8010550:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010558:	3b02      	subs	r3, #2
 801055a:	b2da      	uxtb	r2, r3
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	f103 0210 	add.w	r2, r3, #16
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	3308      	adds	r3, #8
 801056a:	4619      	mov	r1, r3
 801056c:	4610      	mov	r0, r2
 801056e:	f7fd f895 	bl	800d69c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	2204      	movs	r2, #4
 8010576:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010580:	2b05      	cmp	r3, #5
 8010582:	d055      	beq.n	8010630 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 8010584:	2b05      	cmp	r3, #5
 8010586:	f300 8085 	bgt.w	8010694 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 801058a:	2b02      	cmp	r3, #2
 801058c:	d002      	beq.n	8010594 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 801058e:	2b04      	cmp	r3, #4
 8010590:	d015      	beq.n	80105be <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 8010592:	e07f      	b.n	8010694 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	3310      	adds	r3, #16
 8010598:	687a      	ldr	r2, [r7, #4]
 801059a:	68b9      	ldr	r1, [r7, #8]
 801059c:	4618      	mov	r0, r3
 801059e:	f003 f839 	bl	8013614 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80105a2:	4603      	mov	r3, r0
 80105a4:	f083 0301 	eor.w	r3, r3, #1
 80105a8:	b2db      	uxtb	r3, r3
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d001      	beq.n	80105b2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 80105ae:	2300      	movs	r3, #0
 80105b0:	e097      	b.n	80106e2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	795a      	ldrb	r2, [r3, #5]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 80105bc:	e086      	b.n	80106cc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	3310      	adds	r3, #16
 80105c2:	687a      	ldr	r2, [r7, #4]
 80105c4:	68b9      	ldr	r1, [r7, #8]
 80105c6:	4618      	mov	r0, r3
 80105c8:	f003 f824 	bl	8013614 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80105cc:	4603      	mov	r3, r0
 80105ce:	f083 0301 	eor.w	r3, r3, #1
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d001      	beq.n	80105dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 80105d8:	2300      	movs	r3, #0
 80105da:	e082      	b.n	80106e2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	795b      	ldrb	r3, [r3, #5]
 80105e0:	2bff      	cmp	r3, #255	; 0xff
 80105e2:	d16c      	bne.n	80106be <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	799b      	ldrb	r3, [r3, #6]
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d16a      	bne.n	80106c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d004      	beq.n	8010600 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	79db      	ldrb	r3, [r3, #7]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d104      	bne.n	8010608 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 80105fe:	e065      	b.n	80106cc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	79db      	ldrb	r3, [r3, #7]
 8010604:	2b01      	cmp	r3, #1
 8010606:	d15e      	bne.n	80106c6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	2201      	movs	r2, #1
 801060c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	789a      	ldrb	r2, [r3, #2]
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	78da      	ldrb	r2, [r3, #3]
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	79da      	ldrb	r2, [r3, #7]
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 801062e:	e04d      	b.n	80106cc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	3310      	adds	r3, #16
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	68b9      	ldr	r1, [r7, #8]
 8010638:	4618      	mov	r0, r3
 801063a:	f002 ffeb 	bl	8013614 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801063e:	4603      	mov	r3, r0
 8010640:	f083 0301 	eor.w	r3, r3, #1
 8010644:	b2db      	uxtb	r3, r3
 8010646:	2b00      	cmp	r3, #0
 8010648:	d001      	beq.n	801064e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 801064a:	2300      	movs	r3, #0
 801064c:	e049      	b.n	80106e2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010654:	2b00      	cmp	r3, #0
 8010656:	d038      	beq.n	80106ca <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	685b      	ldr	r3, [r3, #4]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d034      	beq.n	80106ca <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	6858      	ldr	r0, [r3, #4]
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	681c      	ldr	r4, [r3, #0]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010684:	68fa      	ldr	r2, [r7, #12]
 8010686:	3220      	adds	r2, #32
 8010688:	9201      	str	r2, [sp, #4]
 801068a:	9300      	str	r3, [sp, #0]
 801068c:	4633      	mov	r3, r6
 801068e:	462a      	mov	r2, r5
 8010690:	47a0      	blx	r4
                                        break;
 8010692:	e01a      	b.n	80106ca <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f103 0018 	add.w	r0, r3, #24
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	3b02      	subs	r3, #2
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	68b9      	ldr	r1, [r7, #8]
 80106aa:	f7fd f836 	bl	800d71a <_ZN11ByteSkipper4SkipEPPhPtt>
 80106ae:	4603      	mov	r3, r0
 80106b0:	f083 0301 	eor.w	r3, r3, #1
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d008      	beq.n	80106cc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 80106ba:	2300      	movs	r3, #0
 80106bc:	e011      	b.n	80106e2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 80106be:	bf00      	nop
 80106c0:	e004      	b.n	80106cc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 80106c2:	bf00      	nop
 80106c4:	e002      	b.n	80106cc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 80106c6:	bf00      	nop
 80106c8:	e000      	b.n	80106cc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 80106ca:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f103 0220 	add.w	r2, r3, #32
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	2200      	movs	r2, #0
 80106dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 80106e0:	2301      	movs	r3, #1
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	371c      	adds	r7, #28
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106ea:	bf00      	nop

080106ec <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 80106ec:	b480      	push	{r7}
 80106ee:	b085      	sub	sp, #20
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 80106f6:	2300      	movs	r3, #0
 80106f8:	73fb      	strb	r3, [r7, #15]
 80106fa:	7bfb      	ldrb	r3, [r7, #15]
 80106fc:	2b03      	cmp	r3, #3
 80106fe:	d815      	bhi.n	801072c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 8010700:	7bfb      	ldrb	r3, [r7, #15]
 8010702:	687a      	ldr	r2, [r7, #4]
 8010704:	3318      	adds	r3, #24
 8010706:	009b      	lsls	r3, r3, #2
 8010708:	4413      	add	r3, r2
 801070a:	685b      	ldr	r3, [r3, #4]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d109      	bne.n	8010724 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 8010710:	7bfb      	ldrb	r3, [r7, #15]
 8010712:	687a      	ldr	r2, [r7, #4]
 8010714:	3318      	adds	r3, #24
 8010716:	009b      	lsls	r3, r3, #2
 8010718:	4413      	add	r3, r2
 801071a:	683a      	ldr	r2, [r7, #0]
 801071c:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 801071e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010722:	e005      	b.n	8010730 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8010724:	7bfb      	ldrb	r3, [r7, #15]
 8010726:	3301      	adds	r3, #1
 8010728:	73fb      	strb	r3, [r7, #15]
 801072a:	e7e6      	b.n	80106fa <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 801072c:	f04f 33ff 	mov.w	r3, #4294967295
        };
 8010730:	4618      	mov	r0, r3
 8010732:	3714      	adds	r7, #20
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6039      	str	r1, [r7, #0]
 8010746:	4a0a      	ldr	r2, [pc, #40]	; (8010770 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	601a      	str	r2, [r3, #0]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	683a      	ldr	r2, [r7, #0]
 8010750:	609a      	str	r2, [r3, #8]
                if(pBtd)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	689b      	ldr	r3, [r3, #8]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d005      	beq.n	8010766 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	689b      	ldr	r3, [r3, #8]
 801075e:	6879      	ldr	r1, [r7, #4]
 8010760:	4618      	mov	r0, r3
 8010762:	f7ff ffc3 	bl	80106ec <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	4618      	mov	r0, r3
 801076a:	3708      	adds	r7, #8
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}
 8010770:	080149a0 	.word	0x080149a0

08010774 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 8010774:	b480      	push	{r7}
 8010776:	b085      	sub	sp, #20
 8010778:	af00      	add	r7, sp, #0
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	60b9      	str	r1, [r7, #8]
 801077e:	4613      	mov	r3, r2
 8010780:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	461a      	mov	r2, r3
 8010788:	88fb      	ldrh	r3, [r7, #6]
 801078a:	b2db      	uxtb	r3, r3
 801078c:	429a      	cmp	r2, r3
 801078e:	d10b      	bne.n	80107a8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	3301      	adds	r3, #1
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	461a      	mov	r2, r3
 8010798:	88fb      	ldrh	r3, [r7, #6]
 801079a:	121b      	asrs	r3, r3, #8
 801079c:	f043 0320 	orr.w	r3, r3, #32
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d101      	bne.n	80107a8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 80107a4:	2301      	movs	r3, #1
 80107a6:	e000      	b.n	80107aa <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 80107a8:	2300      	movs	r3, #0
        }
 80107aa:	4618      	mov	r0, r3
 80107ac:	3714      	adds	r7, #20
 80107ae:	46bd      	mov	sp, r7
 80107b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b4:	4770      	bx	lr

080107b6 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80107b6:	b480      	push	{r7}
 80107b8:	b085      	sub	sp, #20
 80107ba:	af00      	add	r7, sp, #0
 80107bc:	60f8      	str	r0, [r7, #12]
 80107be:	460b      	mov	r3, r1
 80107c0:	607a      	str	r2, [r7, #4]
 80107c2:	72fb      	strb	r3, [r7, #11]
                return;
 80107c4:	bf00      	nop
        };
 80107c6:	3714      	adds	r7, #20
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr

080107d0 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 80107d0:	b480      	push	{r7}
 80107d2:	b083      	sub	sp, #12
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
                return;
 80107d8:	bf00      	nop
        };
 80107da:	370c      	adds	r7, #12
 80107dc:	46bd      	mov	sp, r7
 80107de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e2:	4770      	bx	lr

080107e4 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
                return;
 80107ec:	bf00      	nop
        }
 80107ee:	370c      	adds	r7, #12
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b086      	sub	sp, #24
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	60b9      	str	r1, [r7, #8]
 8010802:	603b      	str	r3, [r7, #0]
 8010804:	4613      	mov	r3, r2
 8010806:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	68b9      	ldr	r1, [r7, #8]
 801080c:	4618      	mov	r0, r3
 801080e:	f7ff ff95 	bl	801073c <_ZN16BluetoothServiceC1EP3BTD>
 8010812:	4a1f      	ldr	r2, [pc, #124]	; (8010890 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	601a      	str	r2, [r3, #0]
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2200      	movs	r2, #0
 801081c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8010820:	2300      	movs	r3, #0
 8010822:	75fb      	strb	r3, [r7, #23]
 8010824:	7dfb      	ldrb	r3, [r7, #23]
 8010826:	2b01      	cmp	r3, #1
 8010828:	d809      	bhi.n	801083e <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 801082a:	7dfa      	ldrb	r2, [r7, #23]
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	3208      	adds	r2, #8
 8010830:	2100      	movs	r1, #0
 8010832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8010836:	7dfb      	ldrb	r3, [r7, #23]
 8010838:	3301      	adds	r3, #1
 801083a:	75fb      	strb	r3, [r7, #23]
 801083c:	e7f2      	b.n	8010824 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	689b      	ldr	r3, [r3, #8]
 8010842:	79fa      	ldrb	r2, [r7, #7]
 8010844:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	689b      	ldr	r3, [r3, #8]
 801084c:	683a      	ldr	r2, [r7, #0]
 801084e:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	2250      	movs	r2, #80	; 0x50
 8010854:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	2200      	movs	r2, #0
 801085c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2270      	movs	r2, #112	; 0x70
 8010864:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2200      	movs	r2, #0
 801086c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2271      	movs	r2, #113	; 0x71
 8010874:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2200      	movs	r2, #0
 801087c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 8010880:	68f8      	ldr	r0, [r7, #12]
 8010882:	f000 f807 	bl	8010894 <_ZN5BTHID5ResetEv>
}
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	4618      	mov	r0, r3
 801088a:	3718      	adds	r7, #24
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}
 8010890:	08014974 	.word	0x08014974

08010894 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
        connected = false;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2200      	movs	r2, #0
 80108a0:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2200      	movs	r2, #0
 80108a6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2200      	movs	r2, #0
 80108ae:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2200      	movs	r2, #0
 80108b6:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	220a      	movs	r2, #10
 80108bc:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2200      	movs	r2, #0
 80108c2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	3320      	adds	r3, #32
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	4798      	blx	r3
}
 80108d2:	bf00      	nop
 80108d4:	3708      	adds	r7, #8
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}

080108da <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 80108da:	b590      	push	{r4, r7, lr}
 80108dc:	b085      	sub	sp, #20
 80108de:	af02      	add	r7, sp, #8
 80108e0:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d014      	beq.n	8010916 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6898      	ldr	r0, [r3, #8]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	8999      	ldrh	r1, [r3, #12]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	7d1b      	ldrb	r3, [r3, #20]
 80108f8:	3301      	adds	r3, #1
 80108fa:	b2da      	uxtb	r2, r3
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	751a      	strb	r2, [r3, #20]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	7d1a      	ldrb	r2, [r3, #20]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f103 041b 	add.w	r4, r3, #27
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	336f      	adds	r3, #111	; 0x6f
 801090e:	9300      	str	r3, [sp, #0]
 8010910:	4623      	mov	r3, r4
 8010912:	f7ff f9c5 	bl	800fca0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6898      	ldr	r0, [r3, #8]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	8999      	ldrh	r1, [r3, #12]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	7d1b      	ldrb	r3, [r3, #20]
 8010922:	3301      	adds	r3, #1
 8010924:	b2da      	uxtb	r2, r3
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	751a      	strb	r2, [r3, #20]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	7d1a      	ldrb	r2, [r3, #20]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f103 0418 	add.w	r4, r3, #24
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	336d      	adds	r3, #109	; 0x6d
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	4623      	mov	r3, r4
 801093c:	f7ff f9b0 	bl	800fca0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	3308      	adds	r3, #8
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	220e      	movs	r2, #14
 8010950:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2209      	movs	r2, #9
 8010956:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 801095a:	bf00      	nop
 801095c:	370c      	adds	r7, #12
 801095e:	46bd      	mov	sp, r7
 8010960:	bd90      	pop	{r4, r7, pc}

08010962 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 8010962:	b590      	push	{r4, r7, lr}
 8010964:	b087      	sub	sp, #28
 8010966:	af02      	add	r7, sp, #8
 8010968:	6078      	str	r0, [r7, #4]
 801096a:	6039      	str	r1, [r7, #0]
        if(!connected) {
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	7d5b      	ldrb	r3, [r3, #21]
 8010970:	f083 0301 	eor.w	r3, r3, #1
 8010974:	b2db      	uxtb	r3, r3
 8010976:	2b00      	cmp	r3, #0
 8010978:	d023      	beq.n	80109c2 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	3308      	adds	r3, #8
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	2b02      	cmp	r3, #2
 8010982:	d11e      	bne.n	80109c2 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	330c      	adds	r3, #12
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	461a      	mov	r2, r3
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	330d      	adds	r3, #13
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	021b      	lsls	r3, r3, #8
 8010994:	4313      	orrs	r3, r2
 8010996:	2b01      	cmp	r3, #1
 8010998:	d113      	bne.n	80109c2 <_ZN5BTHID7ACLDataEPh+0x60>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	689b      	ldr	r3, [r3, #8]
 801099e:	7a9b      	ldrb	r3, [r3, #10]
 80109a0:	f083 0301 	eor.w	r3, r3, #1
 80109a4:	b2db      	uxtb	r3, r3
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d00b      	beq.n	80109c2 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	689b      	ldr	r3, [r3, #8]
 80109ae:	2201      	movs	r2, #1
 80109b0:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	689b      	ldr	r3, [r3, #8]
 80109b6:	8b5a      	ldrh	r2, [r3, #26]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	220a      	movs	r2, #10
 80109c0:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	689b      	ldr	r3, [r3, #8]
 80109c6:	7a5b      	ldrb	r3, [r3, #9]
 80109c8:	f083 0301 	eor.w	r3, r3, #1
 80109cc:	b2db      	uxtb	r3, r3
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d03a      	beq.n	8010a48 <_ZN5BTHID7ACLDataEPh+0xe6>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	689b      	ldr	r3, [r3, #8]
 80109d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d034      	beq.n	8010a48 <_ZN5BTHID7ACLDataEPh+0xe6>
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	7d5b      	ldrb	r3, [r3, #21]
 80109e2:	f083 0301 	eor.w	r3, r3, #1
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d02d      	beq.n	8010a48 <_ZN5BTHID7ACLDataEPh+0xe6>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80109f2:	f083 0301 	eor.w	r3, r3, #1
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d025      	beq.n	8010a48 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	3308      	adds	r3, #8
 8010a00:	781b      	ldrb	r3, [r3, #0]
 8010a02:	2b02      	cmp	r3, #2
 8010a04:	d120      	bne.n	8010a48 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	330c      	adds	r3, #12
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	330d      	adds	r3, #13
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	021b      	lsls	r3, r3, #8
 8010a16:	4313      	orrs	r3, r2
 8010a18:	2b11      	cmp	r3, #17
 8010a1a:	d115      	bne.n	8010a48 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	2200      	movs	r2, #0
 8010a22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	689b      	ldr	r3, [r3, #8]
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2201      	movs	r2, #1
 8010a32:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	689b      	ldr	r3, [r3, #8]
 8010a3a:	8b5a      	ldrh	r2, [r3, #26]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2200      	movs	r2, #0
 8010a44:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	899b      	ldrh	r3, [r3, #12]
 8010a4e:	461a      	mov	r2, r3
 8010a50:	6839      	ldr	r1, [r7, #0]
 8010a52:	f7ff fe8f 	bl	8010774 <_ZN16BluetoothService14checkHciHandleEPht>
 8010a56:	4603      	mov	r3, r0
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	f000 83d9 	beq.w	8011210 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	3306      	adds	r3, #6
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	461a      	mov	r2, r3
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	3307      	adds	r3, #7
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	021b      	lsls	r3, r3, #8
 8010a6e:	4313      	orrs	r3, r2
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	f040 829b 	bne.w	8010fac <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	3308      	adds	r3, #8
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	2b01      	cmp	r3, #1
 8010a7e:	f000 83c1 	beq.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	3308      	adds	r3, #8
 8010a86:	781b      	ldrb	r3, [r3, #0]
 8010a88:	2b03      	cmp	r3, #3
 8010a8a:	f040 808d 	bne.w	8010ba8 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	3310      	adds	r3, #16
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	461a      	mov	r2, r3
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	3311      	adds	r3, #17
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	021b      	lsls	r3, r3, #8
 8010a9e:	4313      	orrs	r3, r2
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	f040 83af 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	3312      	adds	r3, #18
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	461a      	mov	r2, r3
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	3313      	adds	r3, #19
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	021b      	lsls	r3, r3, #8
 8010ab6:	4313      	orrs	r3, r2
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f040 83a3 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	330e      	adds	r3, #14
 8010ac2:	781a      	ldrb	r2, [r3, #0]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d124      	bne.n	8010b18 <_ZN5BTHID7ACLDataEPh+0x1b6>
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	330f      	adds	r3, #15
 8010ad2:	781a      	ldrb	r2, [r3, #0]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d11c      	bne.n	8010b18 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	7a5a      	ldrb	r2, [r3, #9]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	7b1a      	ldrb	r2, [r3, #12]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	7b5a      	ldrb	r2, [r3, #13]
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	7d1b      	ldrb	r3, [r3, #20]
 8010afa:	3301      	adds	r3, #1
 8010afc:	b2da      	uxtb	r2, r3
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6898      	ldr	r0, [r3, #8]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	8999      	ldrh	r1, [r3, #12]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	7d1a      	ldrb	r2, [r3, #20]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	331b      	adds	r3, #27
 8010b12:	f7ff f827 	bl	800fb64 <_ZN3BTD20l2cap_config_requestEthPh>
 8010b16:	e375      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	330e      	adds	r3, #14
 8010b1c:	781a      	ldrb	r2, [r3, #0]
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d11a      	bne.n	8010b5e <_ZN5BTHID7ACLDataEPh+0x1fc>
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	330f      	adds	r3, #15
 8010b2c:	781a      	ldrb	r2, [r3, #0]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010b34:	429a      	cmp	r2, r3
 8010b36:	d112      	bne.n	8010b5e <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	7a5a      	ldrb	r2, [r3, #9]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	7b1a      	ldrb	r2, [r3, #12]
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	7b5a      	ldrb	r2, [r3, #13]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	691b      	ldr	r3, [r3, #16]
 8010b54:	f043 0204 	orr.w	r2, r3, #4
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	611a      	str	r2, [r3, #16]
 8010b5c:	e352      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	330e      	adds	r3, #14
 8010b62:	781a      	ldrb	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	f040 834a 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	330f      	adds	r3, #15
 8010b74:	781a      	ldrb	r2, [r3, #0]
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	f040 8341 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	7a5a      	ldrb	r2, [r3, #9]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	7b1a      	ldrb	r2, [r3, #12]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	7b5a      	ldrb	r2, [r3, #13]
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	691b      	ldr	r3, [r3, #16]
 8010b9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	611a      	str	r2, [r3, #16]
 8010ba6:	e32d      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	3308      	adds	r3, #8
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	2b02      	cmp	r3, #2
 8010bb0:	d15a      	bne.n	8010c68 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	330c      	adds	r3, #12
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	461a      	mov	r2, r3
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	330d      	adds	r3, #13
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	021b      	lsls	r3, r3, #8
 8010bc2:	4313      	orrs	r3, r2
 8010bc4:	2b01      	cmp	r3, #1
 8010bc6:	d112      	bne.n	8010bee <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	7a5a      	ldrb	r2, [r3, #9]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	7b9a      	ldrb	r2, [r3, #14]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	7bda      	ldrb	r2, [r3, #15]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	691b      	ldr	r3, [r3, #16]
 8010be4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	611a      	str	r2, [r3, #16]
 8010bec:	e30a      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	330c      	adds	r3, #12
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	461a      	mov	r2, r3
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	330d      	adds	r3, #13
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	021b      	lsls	r3, r3, #8
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	2b11      	cmp	r3, #17
 8010c02:	d112      	bne.n	8010c2a <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	7a5a      	ldrb	r2, [r3, #9]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	7b9a      	ldrb	r2, [r3, #14]
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	7bda      	ldrb	r2, [r3, #15]
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	691b      	ldr	r3, [r3, #16]
 8010c20:	f043 0201 	orr.w	r2, r3, #1
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	611a      	str	r2, [r3, #16]
 8010c28:	e2ec      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	330c      	adds	r3, #12
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	461a      	mov	r2, r3
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	330d      	adds	r3, #13
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	021b      	lsls	r3, r3, #8
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	2b13      	cmp	r3, #19
 8010c3e:	f040 82e1 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	7a5a      	ldrb	r2, [r3, #9]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	7b9a      	ldrb	r2, [r3, #14]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	7bda      	ldrb	r2, [r3, #15]
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	691b      	ldr	r3, [r3, #16]
 8010c5e:	f043 0210 	orr.w	r2, r3, #16
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	611a      	str	r2, [r3, #16]
 8010c66:	e2cd      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	3308      	adds	r3, #8
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	2b05      	cmp	r3, #5
 8010c70:	d15e      	bne.n	8010d30 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	3310      	adds	r3, #16
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	461a      	mov	r2, r3
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	3311      	adds	r3, #17
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	021b      	lsls	r3, r3, #8
 8010c82:	4313      	orrs	r3, r2
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	f040 82bd 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	330c      	adds	r3, #12
 8010c8e:	781a      	ldrb	r2, [r3, #0]
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d112      	bne.n	8010cc0 <_ZN5BTHID7ACLDataEPh+0x35e>
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	330d      	adds	r3, #13
 8010c9e:	781a      	ldrb	r2, [r3, #0]
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d10a      	bne.n	8010cc0 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	7a5a      	ldrb	r2, [r3, #9]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	691b      	ldr	r3, [r3, #16]
 8010cb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	611a      	str	r2, [r3, #16]
 8010cbe:	e2a1      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	330c      	adds	r3, #12
 8010cc4:	781a      	ldrb	r2, [r3, #0]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d112      	bne.n	8010cf6 <_ZN5BTHID7ACLDataEPh+0x394>
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	330d      	adds	r3, #13
 8010cd4:	781a      	ldrb	r2, [r3, #0]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d10a      	bne.n	8010cf6 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	7a5a      	ldrb	r2, [r3, #9]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	691b      	ldr	r3, [r3, #16]
 8010cec:	f043 0202 	orr.w	r2, r3, #2
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	611a      	str	r2, [r3, #16]
 8010cf4:	e286      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	330c      	adds	r3, #12
 8010cfa:	781a      	ldrb	r2, [r3, #0]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010d02:	429a      	cmp	r2, r3
 8010d04:	f040 827e 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	330d      	adds	r3, #13
 8010d0c:	781a      	ldrb	r2, [r3, #0]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010d14:	429a      	cmp	r2, r3
 8010d16:	f040 8275 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	7a5a      	ldrb	r2, [r3, #9]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	691b      	ldr	r3, [r3, #16]
 8010d26:	f043 0220 	orr.w	r2, r3, #32
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	611a      	str	r2, [r3, #16]
 8010d2e:	e269      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	3308      	adds	r3, #8
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	2b04      	cmp	r3, #4
 8010d38:	d155      	bne.n	8010de6 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	330c      	adds	r3, #12
 8010d3e:	781a      	ldrb	r2, [r3, #0]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d113      	bne.n	8010d72 <_ZN5BTHID7ACLDataEPh+0x410>
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	330d      	adds	r3, #13
 8010d4e:	781a      	ldrb	r2, [r3, #0]
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d10b      	bne.n	8010d72 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6898      	ldr	r0, [r3, #8]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	8999      	ldrh	r1, [r3, #12]
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	3309      	adds	r3, #9
 8010d66:	781a      	ldrb	r2, [r3, #0]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	331b      	adds	r3, #27
 8010d6c:	f7fe ff45 	bl	800fbfa <_ZN3BTD21l2cap_config_responseEthPh>
 8010d70:	e248      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	330c      	adds	r3, #12
 8010d76:	781a      	ldrb	r2, [r3, #0]
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d113      	bne.n	8010daa <_ZN5BTHID7ACLDataEPh+0x448>
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	330d      	adds	r3, #13
 8010d86:	781a      	ldrb	r2, [r3, #0]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d10b      	bne.n	8010daa <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6898      	ldr	r0, [r3, #8]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	8999      	ldrh	r1, [r3, #12]
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	3309      	adds	r3, #9
 8010d9e:	781a      	ldrb	r2, [r3, #0]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	3316      	adds	r3, #22
 8010da4:	f7fe ff29 	bl	800fbfa <_ZN3BTD21l2cap_config_responseEthPh>
 8010da8:	e22c      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	330c      	adds	r3, #12
 8010dae:	781a      	ldrb	r2, [r3, #0]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010db6:	429a      	cmp	r2, r3
 8010db8:	f040 8224 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	330d      	adds	r3, #13
 8010dc0:	781a      	ldrb	r2, [r3, #0]
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	f040 821b 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6898      	ldr	r0, [r3, #8]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	8999      	ldrh	r1, [r3, #12]
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	3309      	adds	r3, #9
 8010dda:	781a      	ldrb	r2, [r3, #0]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	3318      	adds	r3, #24
 8010de0:	f7fe ff0b 	bl	800fbfa <_ZN3BTD21l2cap_config_responseEthPh>
 8010de4:	e20e      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	3308      	adds	r3, #8
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	2b06      	cmp	r3, #6
 8010dee:	d170      	bne.n	8010ed2 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	330c      	adds	r3, #12
 8010df4:	781a      	ldrb	r2, [r3, #0]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d112      	bne.n	8010e26 <_ZN5BTHID7ACLDataEPh+0x4c4>
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	330d      	adds	r3, #13
 8010e04:	781a      	ldrb	r2, [r3, #0]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d10a      	bne.n	8010e26 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	7a5a      	ldrb	r2, [r3, #9]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	691b      	ldr	r3, [r3, #16]
 8010e1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	611a      	str	r2, [r3, #16]
 8010e24:	e1ee      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	330c      	adds	r3, #12
 8010e2a:	781a      	ldrb	r2, [r3, #0]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d121      	bne.n	8010e7a <_ZN5BTHID7ACLDataEPh+0x518>
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	330d      	adds	r3, #13
 8010e3a:	781a      	ldrb	r2, [r3, #0]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d119      	bne.n	8010e7a <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	7a5a      	ldrb	r2, [r3, #9]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6898      	ldr	r0, [r3, #8]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	8999      	ldrh	r1, [r3, #12]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	7d1a      	ldrb	r2, [r3, #20]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	3316      	adds	r3, #22
 8010e64:	9300      	str	r3, [sp, #0]
 8010e66:	4623      	mov	r3, r4
 8010e68:	f7fe ff57 	bl	800fd1a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	3308      	adds	r3, #8
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	4798      	blx	r3
 8010e78:	e1c4      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	330c      	adds	r3, #12
 8010e7e:	781a      	ldrb	r2, [r3, #0]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010e86:	429a      	cmp	r2, r3
 8010e88:	f040 81bc 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	330d      	adds	r3, #13
 8010e90:	781a      	ldrb	r2, [r3, #0]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	f040 81b3 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	7a5a      	ldrb	r2, [r3, #9]
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6898      	ldr	r0, [r3, #8]
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	8999      	ldrh	r1, [r3, #12]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	7d1a      	ldrb	r2, [r3, #20]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	3318      	adds	r3, #24
 8010ebc:	9300      	str	r3, [sp, #0]
 8010ebe:	4623      	mov	r3, r4
 8010ec0:	f7fe ff2b 	bl	800fd1a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	3308      	adds	r3, #8
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	4798      	blx	r3
 8010ed0:	e198      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	3308      	adds	r3, #8
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	2b07      	cmp	r3, #7
 8010eda:	d14c      	bne.n	8010f76 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	330c      	adds	r3, #12
 8010ee0:	781a      	ldrb	r2, [r3, #0]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	7edb      	ldrb	r3, [r3, #27]
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d111      	bne.n	8010f0e <_ZN5BTHID7ACLDataEPh+0x5ac>
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	330d      	adds	r3, #13
 8010eee:	781a      	ldrb	r2, [r3, #0]
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	7f1b      	ldrb	r3, [r3, #28]
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d10a      	bne.n	8010f0e <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	7a5a      	ldrb	r2, [r3, #9]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	691b      	ldr	r3, [r3, #16]
 8010f04:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	611a      	str	r2, [r3, #16]
 8010f0c:	e17a      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	330c      	adds	r3, #12
 8010f12:	781a      	ldrb	r2, [r3, #0]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	7d9b      	ldrb	r3, [r3, #22]
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	d111      	bne.n	8010f40 <_ZN5BTHID7ACLDataEPh+0x5de>
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	330d      	adds	r3, #13
 8010f20:	781a      	ldrb	r2, [r3, #0]
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	7ddb      	ldrb	r3, [r3, #23]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d10a      	bne.n	8010f40 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	7a5a      	ldrb	r2, [r3, #9]
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	691b      	ldr	r3, [r3, #16]
 8010f36:	f043 0208 	orr.w	r2, r3, #8
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	611a      	str	r2, [r3, #16]
 8010f3e:	e161      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	330c      	adds	r3, #12
 8010f44:	781a      	ldrb	r2, [r3, #0]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	7e1b      	ldrb	r3, [r3, #24]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	f040 815a 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	330d      	adds	r3, #13
 8010f54:	781a      	ldrb	r2, [r3, #0]
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	7e5b      	ldrb	r3, [r3, #25]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	f040 8152 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	7a5a      	ldrb	r2, [r3, #9]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	691b      	ldr	r3, [r3, #16]
 8010f6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	611a      	str	r2, [r3, #16]
 8010f74:	e146      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	3308      	adds	r3, #8
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	2b0a      	cmp	r3, #10
 8010f7e:	f040 8141 	bne.w	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	7a5a      	ldrb	r2, [r3, #9]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6898      	ldr	r0, [r3, #8]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	8999      	ldrh	r1, [r3, #12]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	7d1a      	ldrb	r2, [r3, #20]
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	330c      	adds	r3, #12
 8010f9a:	781c      	ldrb	r4, [r3, #0]
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	330d      	adds	r3, #13
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	9300      	str	r3, [sp, #0]
 8010fa4:	4623      	mov	r3, r4
 8010fa6:	f7fe fef5 	bl	800fd94 <_ZN3BTD26l2cap_information_responseEthhh>
 8010faa:	e12b      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	3306      	adds	r3, #6
 8010fb0:	781a      	ldrb	r2, [r3, #0]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	f040 8087 	bne.w	80110cc <_ZN5BTHID7ACLDataEPh+0x76a>
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	3307      	adds	r3, #7
 8010fc2:	781a      	ldrb	r2, [r3, #0]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d17e      	bne.n	80110cc <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	3308      	adds	r3, #8
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	2b02      	cmp	r3, #2
 8010fd6:	d131      	bne.n	801103c <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2203      	movs	r2, #3
 8010fdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	7a5a      	ldrb	r2, [r3, #9]
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	7a9a      	ldrb	r2, [r3, #10]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2205      	movs	r2, #5
 8011000:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2200      	movs	r2, #0
 8011008:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2200      	movs	r2, #0
 8011010:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2200      	movs	r2, #0
 8011018:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2200      	movs	r2, #0
 8011020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2200      	movs	r2, #0
 8011028:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	3328      	adds	r3, #40	; 0x28
 8011030:	220a      	movs	r2, #10
 8011032:	4619      	mov	r1, r3
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 fb6d 	bl	8011714 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801103a:	e0e0      	b.n	80111fe <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	3308      	adds	r3, #8
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	2b04      	cmp	r3, #4
 8011044:	d131      	bne.n	80110aa <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2205      	movs	r2, #5
 801104a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	7a5a      	ldrb	r2, [r3, #9]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	7a9a      	ldrb	r2, [r3, #10]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2200      	movs	r2, #0
 8011066:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2205      	movs	r2, #5
 801106e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2200      	movs	r2, #0
 8011076:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2202      	movs	r2, #2
 801107e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2235      	movs	r2, #53	; 0x35
 8011086:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2200      	movs	r2, #0
 801108e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2200      	movs	r2, #0
 8011096:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	3328      	adds	r3, #40	; 0x28
 801109e:	220a      	movs	r2, #10
 80110a0:	4619      	mov	r1, r3
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f000 fb36 	bl	8011714 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80110a8:	e0a9      	b.n	80111fe <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	3308      	adds	r3, #8
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	2b06      	cmp	r3, #6
 80110b2:	f040 80a4 	bne.w	80111fe <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	3309      	adds	r3, #9
 80110ba:	7819      	ldrb	r1, [r3, #0]
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	330a      	adds	r3, #10
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	461a      	mov	r2, r3
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f000 fb3f 	bl	8011748 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80110ca:	e098      	b.n	80111fe <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	3306      	adds	r3, #6
 80110d0:	781a      	ldrb	r2, [r3, #0]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80110d8:	429a      	cmp	r2, r3
 80110da:	d162      	bne.n	80111a2 <_ZN5BTHID7ACLDataEPh+0x840>
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	3307      	adds	r3, #7
 80110e0:	781a      	ldrb	r2, [r3, #0]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d15a      	bne.n	80111a2 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	3308      	adds	r3, #8
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	2ba1      	cmp	r3, #161	; 0xa1
 80110f4:	f040 8085 	bne.w	8011202 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 80110f8:	f7f1 fb42 	bl	8002780 <HAL_GetTick>
 80110fc:	4602      	mov	r2, r0
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	3305      	adds	r3, #5
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	021b      	lsls	r3, r3, #8
 801110a:	b21a      	sxth	r2, r3
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	3304      	adds	r3, #4
 8011110:	781b      	ldrb	r3, [r3, #0]
 8011112:	b21b      	sxth	r3, r3
 8011114:	4313      	orrs	r3, r2
 8011116:	b21b      	sxth	r3, r3
 8011118:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	3314      	adds	r3, #20
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	89fa      	ldrh	r2, [r7, #14]
 8011124:	b2d2      	uxtb	r2, r2
 8011126:	3a01      	subs	r2, #1
 8011128:	b2d1      	uxtb	r1, r2
 801112a:	683a      	ldr	r2, [r7, #0]
 801112c:	3209      	adds	r2, #9
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	3309      	adds	r3, #9
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	2b01      	cmp	r3, #1
 801113a:	d002      	beq.n	8011142 <_ZN5BTHID7ACLDataEPh+0x7e0>
 801113c:	2b02      	cmp	r3, #2
 801113e:	d016      	beq.n	801116e <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 8011140:	e05f      	b.n	8011202 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6a1b      	ldr	r3, [r3, #32]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d027      	beq.n	801119a <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6a18      	ldr	r0, [r3, #32]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6a1b      	ldr	r3, [r3, #32]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	681c      	ldr	r4, [r3, #0]
 8011156:	89fb      	ldrh	r3, [r7, #14]
 8011158:	b2db      	uxtb	r3, r3
 801115a:	3b02      	subs	r3, #2
 801115c:	b2da      	uxtb	r2, r3
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	330a      	adds	r3, #10
 8011162:	9300      	str	r3, [sp, #0]
 8011164:	4613      	mov	r3, r2
 8011166:	2200      	movs	r2, #0
 8011168:	6879      	ldr	r1, [r7, #4]
 801116a:	47a0      	blx	r4
                                                break;
 801116c:	e015      	b.n	801119a <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011172:	2b00      	cmp	r3, #0
 8011174:	d013      	beq.n	801119e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	681c      	ldr	r4, [r3, #0]
 8011182:	89fb      	ldrh	r3, [r7, #14]
 8011184:	b2db      	uxtb	r3, r3
 8011186:	3b02      	subs	r3, #2
 8011188:	b2da      	uxtb	r2, r3
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	330a      	adds	r3, #10
 801118e:	9300      	str	r3, [sp, #0]
 8011190:	4613      	mov	r3, r2
 8011192:	2200      	movs	r2, #0
 8011194:	6879      	ldr	r1, [r7, #4]
 8011196:	47a0      	blx	r4
                                                break;
 8011198:	e001      	b.n	801119e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 801119a:	bf00      	nop
 801119c:	e031      	b.n	8011202 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 801119e:	bf00      	nop
                        }
 80111a0:	e02f      	b.n	8011202 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	3306      	adds	r3, #6
 80111a6:	781a      	ldrb	r2, [r3, #0]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d128      	bne.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	3307      	adds	r3, #7
 80111b6:	781a      	ldrb	r2, [r3, #0]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80111be:	429a      	cmp	r2, r3
 80111c0:	d120      	bne.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	3308      	adds	r3, #8
 80111c6:	781b      	ldrb	r3, [r3, #0]
 80111c8:	2ba3      	cmp	r3, #163	; 0xa3
 80111ca:	d11b      	bne.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	3305      	adds	r3, #5
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	021b      	lsls	r3, r3, #8
 80111d4:	b21a      	sxth	r2, r3
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	3304      	adds	r3, #4
 80111da:	781b      	ldrb	r3, [r3, #0]
 80111dc:	b21b      	sxth	r3, r3
 80111de:	4313      	orrs	r3, r2
 80111e0:	b21b      	sxth	r3, r3
 80111e2:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	3318      	adds	r3, #24
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	89ba      	ldrh	r2, [r7, #12]
 80111ee:	b2d2      	uxtb	r2, r2
 80111f0:	3a01      	subs	r2, #1
 80111f2:	b2d1      	uxtb	r1, r2
 80111f4:	683a      	ldr	r2, [r7, #0]
 80111f6:	3209      	adds	r2, #9
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	4798      	blx	r3
 80111fc:	e002      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80111fe:	bf00      	nop
 8011200:	e000      	b.n	8011204 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 8011202:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f000 f807 	bl	8011218 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f000 f8b4 	bl	8011378 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 8011210:	bf00      	nop
 8011212:	3714      	adds	r7, #20
 8011214:	46bd      	mov	sp, r7
 8011216:	bd90      	pop	{r4, r7, pc}

08011218 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 8011218:	b5b0      	push	{r4, r5, r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af02      	add	r7, sp, #8
 801121e:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	7e9b      	ldrb	r3, [r3, #26]
 8011224:	2b0e      	cmp	r3, #14
 8011226:	f000 8084 	beq.w	8011332 <_ZN5BTHID8SDP_taskEv+0x11a>
 801122a:	2b0e      	cmp	r3, #14
 801122c:	f300 809f 	bgt.w	801136e <_ZN5BTHID8SDP_taskEv+0x156>
 8011230:	2b0a      	cmp	r3, #10
 8011232:	d002      	beq.n	801123a <_ZN5BTHID8SDP_taskEv+0x22>
 8011234:	2b0b      	cmp	r3, #11
 8011236:	d068      	beq.n	801130a <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 8011238:	e099      	b.n	801136e <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	691b      	ldr	r3, [r3, #16]
 801123e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011242:	2b00      	cmp	r3, #0
 8011244:	d041      	beq.n	80112ca <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	691b      	ldr	r3, [r3, #16]
 801124a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6898      	ldr	r0, [r3, #8]
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	8999      	ldrh	r1, [r3, #12]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	7d1a      	ldrb	r2, [r3, #20]
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	331b      	adds	r3, #27
 8011268:	2501      	movs	r5, #1
 801126a:	9501      	str	r5, [sp, #4]
 801126c:	9300      	str	r3, [sp, #0]
 801126e:	4623      	mov	r3, r4
 8011270:	f7fe fc2b 	bl	800faca <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8011274:	2001      	movs	r0, #1
 8011276:	f7f1 fa8f 	bl	8002798 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	6898      	ldr	r0, [r3, #8]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	8999      	ldrh	r1, [r3, #12]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	7d1a      	ldrb	r2, [r3, #20]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	331b      	adds	r3, #27
 8011290:	2500      	movs	r5, #0
 8011292:	9501      	str	r5, [sp, #4]
 8011294:	9300      	str	r3, [sp, #0]
 8011296:	4623      	mov	r3, r4
 8011298:	f7fe fc17 	bl	800faca <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	7d1b      	ldrb	r3, [r3, #20]
 80112a0:	3301      	adds	r3, #1
 80112a2:	b2da      	uxtb	r2, r3
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80112a8:	2001      	movs	r0, #1
 80112aa:	f7f1 fa75 	bl	8002798 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6898      	ldr	r0, [r3, #8]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	8999      	ldrh	r1, [r3, #12]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	7d1a      	ldrb	r2, [r3, #20]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	331b      	adds	r3, #27
 80112be:	f7fe fc51 	bl	800fb64 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	220b      	movs	r2, #11
 80112c6:	769a      	strb	r2, [r3, #26]
                        break;
 80112c8:	e04c      	b.n	8011364 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	691b      	ldr	r3, [r3, #16]
 80112ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d046      	beq.n	8011364 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	691b      	ldr	r3, [r3, #16]
 80112da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2200      	movs	r2, #0
 80112e6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6898      	ldr	r0, [r3, #8]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	8999      	ldrh	r1, [r3, #12]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	7d1a      	ldrb	r2, [r3, #20]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	331b      	adds	r3, #27
 8011300:	9300      	str	r3, [sp, #0]
 8011302:	4623      	mov	r3, r4
 8011304:	f7fe fd09 	bl	800fd1a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8011308:	e02c      	b.n	8011364 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	691b      	ldr	r3, [r3, #16]
 801130e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011312:	2b00      	cmp	r3, #0
 8011314:	d028      	beq.n	8011368 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	691b      	ldr	r3, [r3, #16]
 801131a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2201      	movs	r2, #1
 8011326:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	220a      	movs	r2, #10
 801132e:	769a      	strb	r2, [r3, #26]
                        break;
 8011330:	e01a      	b.n	8011368 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	691b      	ldr	r3, [r3, #16]
 8011336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801133a:	2b00      	cmp	r3, #0
 801133c:	d016      	beq.n	801136c <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	689a      	ldr	r2, [r3, #8]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	899b      	ldrh	r3, [r3, #12]
 8011346:	4619      	mov	r1, r3
 8011348:	4610      	mov	r0, r2
 801134a:	f7fe fa92 	bl	800f872 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011354:	819a      	strh	r2, [r3, #12]
                                Reset();
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	3308      	adds	r3, #8
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	4798      	blx	r3
                        break;
 8011362:	e003      	b.n	801136c <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 8011364:	bf00      	nop
 8011366:	e002      	b.n	801136e <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 8011368:	bf00      	nop
 801136a:	e000      	b.n	801136e <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 801136c:	bf00      	nop
}
 801136e:	bf00      	nop
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011378 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 8011378:	b5b0      	push	{r4, r5, r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af02      	add	r7, sp, #8
 801137e:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8011386:	3b01      	subs	r3, #1
 8011388:	2b08      	cmp	r3, #8
 801138a:	f200 812c 	bhi.w	80115e6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
 801138e:	a201      	add	r2, pc, #4	; (adr r2, 8011394 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 8011390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011394:	080115c5 	.word	0x080115c5
 8011398:	0801145f 	.word	0x0801145f
 801139c:	08011497 	.word	0x08011497
 80113a0:	080113b9 	.word	0x080113b9
 80113a4:	08011591 	.word	0x08011591
 80113a8:	080113d7 	.word	0x080113d7
 80113ac:	080114df 	.word	0x080114df
 80113b0:	08011515 	.word	0x08011515
 80113b4:	08011551 	.word	0x08011551
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	691b      	ldr	r3, [r3, #16]
 80113bc:	f003 0302 	and.w	r3, r3, #2
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	f000 8101 	beq.w	80115c8 <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f000 f9f9 	bl	80117be <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2206      	movs	r2, #6
 80113d0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80113d4:	e0f8      	b.n	80115c8 <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	691b      	ldr	r3, [r3, #16]
 80113da:	f003 0310 	and.w	r3, r3, #16
 80113de:	2b00      	cmp	r3, #0
 80113e0:	f000 80f4 	beq.w	80115cc <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6898      	ldr	r0, [r3, #8]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	8999      	ldrh	r1, [r3, #12]
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	7d1a      	ldrb	r2, [r3, #20]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	3318      	adds	r3, #24
 80113fa:	2501      	movs	r5, #1
 80113fc:	9501      	str	r5, [sp, #4]
 80113fe:	9300      	str	r3, [sp, #0]
 8011400:	4623      	mov	r3, r4
 8011402:	f7fe fb62 	bl	800faca <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8011406:	2001      	movs	r0, #1
 8011408:	f7f1 f9c6 	bl	8002798 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6898      	ldr	r0, [r3, #8]
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	8999      	ldrh	r1, [r3, #12]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	7d1a      	ldrb	r2, [r3, #20]
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	3318      	adds	r3, #24
 8011422:	2500      	movs	r5, #0
 8011424:	9501      	str	r5, [sp, #4]
 8011426:	9300      	str	r3, [sp, #0]
 8011428:	4623      	mov	r3, r4
 801142a:	f7fe fb4e 	bl	800faca <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	7d1b      	ldrb	r3, [r3, #20]
 8011432:	3301      	adds	r3, #1
 8011434:	b2da      	uxtb	r2, r3
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	751a      	strb	r2, [r3, #20]
                                delay(1);
 801143a:	2001      	movs	r0, #1
 801143c:	f7f1 f9ac 	bl	8002798 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6898      	ldr	r0, [r3, #8]
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	8999      	ldrh	r1, [r3, #12]
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	7d1a      	ldrb	r2, [r3, #20]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	3318      	adds	r3, #24
 8011450:	f7fe fb88 	bl	800fb64 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2208      	movs	r2, #8
 8011458:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801145c:	e0b6      	b.n	80115cc <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	691b      	ldr	r3, [r3, #16]
 8011462:	f003 0304 	and.w	r3, r3, #4
 8011466:	2b00      	cmp	r3, #0
 8011468:	f000 80b2 	beq.w	80115d0 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	7d1b      	ldrb	r3, [r3, #20]
 8011470:	3301      	adds	r3, #1
 8011472:	b2da      	uxtb	r2, r3
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6898      	ldr	r0, [r3, #8]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	8999      	ldrh	r1, [r3, #12]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	7d1a      	ldrb	r2, [r3, #20]
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	3316      	adds	r3, #22
 8011488:	f7fe fb6c 	bl	800fb64 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2203      	movs	r2, #3
 8011490:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011494:	e09c      	b.n	80115d0 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	691b      	ldr	r3, [r3, #16]
 801149a:	f003 0302 	and.w	r3, r3, #2
 801149e:	2b00      	cmp	r3, #0
 80114a0:	f000 8098 	beq.w	80115d4 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f000 f98a 	bl	80117be <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 80114aa:	2001      	movs	r0, #1
 80114ac:	f7f1 f974 	bl	8002798 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	7d1b      	ldrb	r3, [r3, #20]
 80114b4:	3301      	adds	r3, #1
 80114b6:	b2da      	uxtb	r2, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6898      	ldr	r0, [r3, #8]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	8999      	ldrh	r1, [r3, #12]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	7d1a      	ldrb	r2, [r3, #20]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	336d      	adds	r3, #109	; 0x6d
 80114cc:	2413      	movs	r4, #19
 80114ce:	9400      	str	r4, [sp, #0]
 80114d0:	f7fe fabd 	bl	800fa4e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2207      	movs	r2, #7
 80114d8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80114dc:	e07a      	b.n	80115d4 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	691b      	ldr	r3, [r3, #16]
 80114e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d076      	beq.n	80115d8 <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	7d1b      	ldrb	r3, [r3, #20]
 80114ee:	3301      	adds	r3, #1
 80114f0:	b2da      	uxtb	r2, r3
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6898      	ldr	r0, [r3, #8]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	8999      	ldrh	r1, [r3, #12]
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	7d1a      	ldrb	r2, [r3, #20]
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	3318      	adds	r3, #24
 8011506:	f7fe fb2d 	bl	800fb64 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2208      	movs	r2, #8
 801150e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011512:	e061      	b.n	80115d8 <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	691b      	ldr	r3, [r3, #16]
 8011518:	f003 0320 	and.w	r3, r3, #32
 801151c:	2b00      	cmp	r3, #0
 801151e:	d05d      	beq.n	80115dc <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	689b      	ldr	r3, [r3, #8]
 8011524:	2200      	movs	r2, #0
 8011526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	689b      	ldr	r3, [r3, #8]
 801152e:	2200      	movs	r2, #0
 8011530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2201      	movs	r2, #1
 8011538:	755a      	strb	r2, [r3, #21]
                                onInit();
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	3310      	adds	r3, #16
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2201      	movs	r2, #1
 801154a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801154e:	e045      	b.n	80115dc <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	691b      	ldr	r3, [r3, #16]
 8011554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011558:	2b00      	cmp	r3, #0
 801155a:	d041      	beq.n	80115e0 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	7d1b      	ldrb	r3, [r3, #20]
 8011560:	3301      	adds	r3, #1
 8011562:	b2da      	uxtb	r2, r3
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6898      	ldr	r0, [r3, #8]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	8999      	ldrh	r1, [r3, #12]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	7d1a      	ldrb	r2, [r3, #20]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f103 0416 	add.w	r4, r3, #22
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	336b      	adds	r3, #107	; 0x6b
 801157e:	9300      	str	r3, [sp, #0]
 8011580:	4623      	mov	r3, r4
 8011582:	f7fe fb8d 	bl	800fca0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2205      	movs	r2, #5
 801158a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801158e:	e027      	b.n	80115e0 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	691b      	ldr	r3, [r3, #16]
 8011594:	f003 0308 	and.w	r3, r3, #8
 8011598:	2b00      	cmp	r3, #0
 801159a:	d023      	beq.n	80115e4 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	689a      	ldr	r2, [r3, #8]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	899b      	ldrh	r3, [r3, #12]
 80115a4:	4619      	mov	r1, r3
 80115a6:	4610      	mov	r0, r2
 80115a8:	f7fe f963 	bl	800f872 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115b2:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2200      	movs	r2, #0
 80115b8:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2200      	movs	r2, #0
 80115be:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80115c2:	e00f      	b.n	80115e4 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 80115c4:	bf00      	nop
 80115c6:	e00e      	b.n	80115e6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80115c8:	bf00      	nop
 80115ca:	e00c      	b.n	80115e6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80115cc:	bf00      	nop
 80115ce:	e00a      	b.n	80115e6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80115d0:	bf00      	nop
 80115d2:	e008      	b.n	80115e6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80115d4:	bf00      	nop
 80115d6:	e006      	b.n	80115e6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80115d8:	bf00      	nop
 80115da:	e004      	b.n	80115e6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80115dc:	bf00      	nop
 80115de:	e002      	b.n	80115e6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80115e0:	bf00      	nop
 80115e2:	e000      	b.n	80115e6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80115e4:	bf00      	nop
        }
}
 80115e6:	bf00      	nop
 80115e8:	3708      	adds	r7, #8
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bdb0      	pop	{r4, r5, r7, pc}
 80115ee:	bf00      	nop

080115f0 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 80115f0:	b5b0      	push	{r4, r5, r7, lr}
 80115f2:	b084      	sub	sp, #16
 80115f4:	af02      	add	r7, sp, #8
 80115f6:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f040 8084 	bne.w	801170c <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	689b      	ldr	r3, [r3, #8]
 8011608:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801160c:	2b00      	cmp	r3, #0
 801160e:	d03a      	beq.n	8011686 <_ZN5BTHID3RunEv+0x96>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	689b      	ldr	r3, [r3, #8]
 8011614:	7a5b      	ldrb	r3, [r3, #9]
 8011616:	f083 0301 	eor.w	r3, r3, #1
 801161a:	b2db      	uxtb	r3, r3
 801161c:	2b00      	cmp	r3, #0
 801161e:	d032      	beq.n	8011686 <_ZN5BTHID3RunEv+0x96>
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	7d5b      	ldrb	r3, [r3, #21]
 8011624:	f083 0301 	eor.w	r3, r3, #1
 8011628:	b2db      	uxtb	r3, r3
 801162a:	2b00      	cmp	r3, #0
 801162c:	d02b      	beq.n	8011686 <_ZN5BTHID3RunEv+0x96>
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8011634:	f083 0301 	eor.w	r3, r3, #1
 8011638:	b2db      	uxtb	r3, r3
 801163a:	2b00      	cmp	r3, #0
 801163c:	d023      	beq.n	8011686 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	689b      	ldr	r3, [r3, #8]
 8011642:	2201      	movs	r2, #1
 8011644:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2201      	movs	r2, #1
 801164a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	689b      	ldr	r3, [r3, #8]
 8011652:	8b5a      	ldrh	r2, [r3, #26]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2200      	movs	r2, #0
 801165c:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2200      	movs	r2, #0
 8011662:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6898      	ldr	r0, [r3, #8]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	8999      	ldrh	r1, [r3, #12]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	7d1a      	ldrb	r2, [r3, #20]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	336b      	adds	r3, #107	; 0x6b
 8011674:	2411      	movs	r4, #17
 8011676:	9400      	str	r4, [sp, #0]
 8011678:	f7fe f9e9 	bl	800fa4e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2202      	movs	r2, #2
 8011680:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 8011684:	e041      	b.n	801170a <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	691b      	ldr	r3, [r3, #16]
 801168a:	f003 0301 	and.w	r3, r3, #1
 801168e:	2b00      	cmp	r3, #0
 8011690:	d03b      	beq.n	801170a <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6898      	ldr	r0, [r3, #8]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	8999      	ldrh	r1, [r3, #12]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	7d1a      	ldrb	r2, [r3, #20]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	3316      	adds	r3, #22
 80116a8:	2501      	movs	r5, #1
 80116aa:	9501      	str	r5, [sp, #4]
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	4623      	mov	r3, r4
 80116b0:	f7fe fa0b 	bl	800faca <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 80116b4:	2001      	movs	r0, #1
 80116b6:	f7f1 f86f 	bl	8002798 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6898      	ldr	r0, [r3, #8]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	8999      	ldrh	r1, [r3, #12]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	7d1a      	ldrb	r2, [r3, #20]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	3316      	adds	r3, #22
 80116d0:	2500      	movs	r5, #0
 80116d2:	9501      	str	r5, [sp, #4]
 80116d4:	9300      	str	r3, [sp, #0]
 80116d6:	4623      	mov	r3, r4
 80116d8:	f7fe f9f7 	bl	800faca <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	7d1b      	ldrb	r3, [r3, #20]
 80116e0:	3301      	adds	r3, #1
 80116e2:	b2da      	uxtb	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80116e8:	2001      	movs	r0, #1
 80116ea:	f7f1 f855 	bl	8002798 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6898      	ldr	r0, [r3, #8]
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	8999      	ldrh	r1, [r3, #12]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	7d1a      	ldrb	r2, [r3, #20]
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	3316      	adds	r3, #22
 80116fe:	f7fe fa31 	bl	800fb64 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2204      	movs	r2, #4
 8011706:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 801170a:	bf00      	nop
        }
}
 801170c:	bf00      	nop
 801170e:	3708      	adds	r7, #8
 8011710:	46bd      	mov	sp, r7
 8011712:	bdb0      	pop	{r4, r5, r7, pc}

08011714 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 8011714:	b590      	push	{r4, r7, lr}
 8011716:	b087      	sub	sp, #28
 8011718:	af02      	add	r7, sp, #8
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	4613      	mov	r3, r2
 8011720:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	6898      	ldr	r0, [r3, #8]
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	8999      	ldrh	r1, [r3, #12]
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	7edb      	ldrb	r3, [r3, #27]
 801172e:	68fa      	ldr	r2, [r7, #12]
 8011730:	7f12      	ldrb	r2, [r2, #28]
 8011732:	79fc      	ldrb	r4, [r7, #7]
 8011734:	9201      	str	r2, [sp, #4]
 8011736:	9300      	str	r3, [sp, #0]
 8011738:	4623      	mov	r3, r4
 801173a:	68ba      	ldr	r2, [r7, #8]
 801173c:	f7fe f8f8 	bl	800f930 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011740:	bf00      	nop
 8011742:	3714      	adds	r7, #20
 8011744:	46bd      	mov	sp, r7
 8011746:	bd90      	pop	{r4, r7, pc}

08011748 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	460b      	mov	r3, r1
 8011752:	70fb      	strb	r3, [r7, #3]
 8011754:	4613      	mov	r3, r2
 8011756:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2207      	movs	r2, #7
 801175c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	78fa      	ldrb	r2, [r7, #3]
 8011764:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	78ba      	ldrb	r2, [r7, #2]
 801176c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2200      	movs	r2, #0
 8011774:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2205      	movs	r2, #5
 801177c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2200      	movs	r2, #0
 8011784:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2202      	movs	r2, #2
 801178c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2235      	movs	r2, #53	; 0x35
 8011794:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2200      	movs	r2, #0
 801179c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2200      	movs	r2, #0
 80117a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	3328      	adds	r3, #40	; 0x28
 80117ac:	220a      	movs	r2, #10
 80117ae:	4619      	mov	r1, r3
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f7ff ffaf 	bl	8011714 <_ZN5BTHID11SDP_CommandEPhh>
}
 80117b6:	bf00      	nop
 80117b8:	3708      	adds	r7, #8
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}

080117be <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 80117be:	b590      	push	{r4, r7, lr}
 80117c0:	b087      	sub	sp, #28
 80117c2:	af02      	add	r7, sp, #8
 80117c4:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d008      	beq.n	80117e2 <_ZN5BTHID11setProtocolEv+0x24>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d003      	beq.n	80117e2 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2200      	movs	r2, #0
 80117de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80117e8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80117ec:	b2db      	uxtb	r3, r3
 80117ee:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6898      	ldr	r0, [r3, #8]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	8999      	ldrh	r1, [r3, #12]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	7d9b      	ldrb	r3, [r3, #22]
 80117fc:	687a      	ldr	r2, [r7, #4]
 80117fe:	7dd2      	ldrb	r2, [r2, #23]
 8011800:	f107 040f 	add.w	r4, r7, #15
 8011804:	9201      	str	r2, [sp, #4]
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	2301      	movs	r3, #1
 801180a:	4622      	mov	r2, r4
 801180c:	f7fe f890 	bl	800f930 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011810:	bf00      	nop
 8011812:	3714      	adds	r7, #20
 8011814:	46bd      	mov	sp, r7
 8011816:	bd90      	pop	{r4, r7, pc}

08011818 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 8011818:	b480      	push	{r7}
 801181a:	b083      	sub	sp, #12
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	460b      	mov	r3, r1
 8011822:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 8011824:	78fb      	ldrb	r3, [r7, #3]
 8011826:	2b03      	cmp	r3, #3
 8011828:	d86e      	bhi.n	8011908 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 801182a:	a201      	add	r2, pc, #4	; (adr r2, 8011830 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 801182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011830:	08011841 	.word	0x08011841
 8011834:	08011873 	.word	0x08011873
 8011838:	080118a5 	.word	0x080118a5
 801183c:	080118d7 	.word	0x080118d7
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	7a1b      	ldrb	r3, [r3, #8]
 8011844:	f003 030f 	and.w	r3, r3, #15
 8011848:	b2db      	uxtb	r3, r3
 801184a:	2b07      	cmp	r3, #7
 801184c:	d00d      	beq.n	801186a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	7a1b      	ldrb	r3, [r3, #8]
 8011852:	f003 030f 	and.w	r3, r3, #15
 8011856:	b2db      	uxtb	r3, r3
 8011858:	2b00      	cmp	r3, #0
 801185a:	d006      	beq.n	801186a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	7a1b      	ldrb	r3, [r3, #8]
 8011860:	f003 030f 	and.w	r3, r3, #15
 8011864:	b2db      	uxtb	r3, r3
 8011866:	2b01      	cmp	r3, #1
 8011868:	d101      	bne.n	801186e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 801186a:	2301      	movs	r3, #1
 801186c:	e04d      	b.n	801190a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 801186e:	2300      	movs	r3, #0
 8011870:	e04b      	b.n	801190a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	7a1b      	ldrb	r3, [r3, #8]
 8011876:	f003 030f 	and.w	r3, r3, #15
 801187a:	b2db      	uxtb	r3, r3
 801187c:	2b01      	cmp	r3, #1
 801187e:	d00d      	beq.n	801189c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	7a1b      	ldrb	r3, [r3, #8]
 8011884:	f003 030f 	and.w	r3, r3, #15
 8011888:	b2db      	uxtb	r3, r3
 801188a:	2b02      	cmp	r3, #2
 801188c:	d006      	beq.n	801189c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	7a1b      	ldrb	r3, [r3, #8]
 8011892:	f003 030f 	and.w	r3, r3, #15
 8011896:	b2db      	uxtb	r3, r3
 8011898:	2b03      	cmp	r3, #3
 801189a:	d101      	bne.n	80118a0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 801189c:	2301      	movs	r3, #1
 801189e:	e034      	b.n	801190a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80118a0:	2300      	movs	r3, #0
 80118a2:	e032      	b.n	801190a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	7a1b      	ldrb	r3, [r3, #8]
 80118a8:	f003 030f 	and.w	r3, r3, #15
 80118ac:	b2db      	uxtb	r3, r3
 80118ae:	2b03      	cmp	r3, #3
 80118b0:	d00d      	beq.n	80118ce <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	7a1b      	ldrb	r3, [r3, #8]
 80118b6:	f003 030f 	and.w	r3, r3, #15
 80118ba:	b2db      	uxtb	r3, r3
 80118bc:	2b04      	cmp	r3, #4
 80118be:	d006      	beq.n	80118ce <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	7a1b      	ldrb	r3, [r3, #8]
 80118c4:	f003 030f 	and.w	r3, r3, #15
 80118c8:	b2db      	uxtb	r3, r3
 80118ca:	2b05      	cmp	r3, #5
 80118cc:	d101      	bne.n	80118d2 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 80118ce:	2301      	movs	r3, #1
 80118d0:	e01b      	b.n	801190a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80118d2:	2300      	movs	r3, #0
 80118d4:	e019      	b.n	801190a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	7a1b      	ldrb	r3, [r3, #8]
 80118da:	f003 030f 	and.w	r3, r3, #15
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	2b05      	cmp	r3, #5
 80118e2:	d00d      	beq.n	8011900 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	7a1b      	ldrb	r3, [r3, #8]
 80118e8:	f003 030f 	and.w	r3, r3, #15
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	2b06      	cmp	r3, #6
 80118f0:	d006      	beq.n	8011900 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	7a1b      	ldrb	r3, [r3, #8]
 80118f6:	f003 030f 	and.w	r3, r3, #15
 80118fa:	b2db      	uxtb	r3, r3
 80118fc:	2b07      	cmp	r3, #7
 80118fe:	d101      	bne.n	8011904 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 8011900:	2301      	movs	r3, #1
 8011902:	e002      	b.n	801190a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8011904:	2300      	movs	r3, #0
 8011906:	e000      	b.n	801190a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 8011908:	2300      	movs	r3, #0
        }
}
 801190a:	4618      	mov	r0, r3
 801190c:	370c      	adds	r7, #12
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr
 8011916:	bf00      	nop

08011918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	460b      	mov	r3, r1
 8011922:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 8011924:	78fb      	ldrb	r3, [r7, #3]
 8011926:	2b03      	cmp	r3, #3
 8011928:	d806      	bhi.n	8011938 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 801192a:	78fb      	ldrb	r3, [r7, #3]
 801192c:	4619      	mov	r1, r3
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f7ff ff72 	bl	8011818 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011934:	4603      	mov	r3, r0
 8011936:	e011      	b.n	801195c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	689b      	ldr	r3, [r3, #8]
 801193c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011940:	4619      	mov	r1, r3
 8011942:	78fb      	ldrb	r3, [r7, #3]
 8011944:	4a07      	ldr	r2, [pc, #28]	; (8011964 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 8011946:	4413      	add	r3, r2
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	fa21 f303 	lsr.w	r3, r1, r3
 801194e:	f003 0301 	and.w	r3, r3, #1
 8011952:	2b00      	cmp	r3, #0
 8011954:	bf14      	ite	ne
 8011956:	2301      	movne	r3, #1
 8011958:	2300      	moveq	r3, #0
 801195a:	b2db      	uxtb	r3, r3
}
 801195c:	4618      	mov	r0, r3
 801195e:	3708      	adds	r7, #8
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}
 8011964:	080149b4 	.word	0x080149b4

08011968 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 8011968:	b480      	push	{r7}
 801196a:	b085      	sub	sp, #20
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	460b      	mov	r3, r1
 8011972:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 8011974:	78fb      	ldrb	r3, [r7, #3]
 8011976:	4a1b      	ldr	r2, [pc, #108]	; (80119e4 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 8011978:	4413      	add	r3, r2
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	461a      	mov	r2, r3
 801197e:	2301      	movs	r3, #1
 8011980:	4093      	lsls	r3, r2
 8011982:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801198a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801198e:	021b      	lsls	r3, r3, #8
 8011990:	4313      	orrs	r3, r2
 8011992:	461a      	mov	r2, r3
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	4013      	ands	r3, r2
 8011998:	2b00      	cmp	r3, #0
 801199a:	bf14      	ite	ne
 801199c:	2301      	movne	r3, #1
 801199e:	2300      	moveq	r3, #0
 80119a0:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80119a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80119ac:	021b      	lsls	r3, r3, #8
 80119ae:	4313      	orrs	r3, r2
 80119b0:	461a      	mov	r2, r3
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	43db      	mvns	r3, r3
 80119b6:	4013      	ands	r3, r2
 80119b8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	b2d1      	uxtb	r1, r2
 80119c0:	2000      	movs	r0, #0
 80119c2:	4301      	orrs	r1, r0
 80119c4:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 80119c8:	0a12      	lsrs	r2, r2, #8
 80119ca:	b292      	uxth	r2, r2
 80119cc:	2100      	movs	r1, #0
 80119ce:	430a      	orrs	r2, r1
 80119d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 80119d4:	7afb      	ldrb	r3, [r7, #11]
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	3714      	adds	r7, #20
 80119da:	46bd      	mov	sp, r7
 80119dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	080149b4 	.word	0x080149b4

080119e8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 80119e8:	b480      	push	{r7}
 80119ea:	b083      	sub	sp, #12
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
 80119f0:	460b      	mov	r3, r1
 80119f2:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 80119f4:	78fb      	ldrb	r3, [r7, #3]
 80119f6:	2b08      	cmp	r3, #8
 80119f8:	d102      	bne.n	8011a00 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	7adb      	ldrb	r3, [r3, #11]
 80119fe:	e006      	b.n	8011a0e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 8011a00:	78fb      	ldrb	r3, [r7, #3]
 8011a02:	2b09      	cmp	r3, #9
 8011a04:	d102      	bne.n	8011a0c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	7b1b      	ldrb	r3, [r3, #12]
 8011a0a:	e000      	b.n	8011a0e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 8011a0c:	2300      	movs	r3, #0
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	370c      	adds	r7, #12
 8011a12:	46bd      	mov	sp, r7
 8011a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a18:	4770      	bx	lr

08011a1a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 8011a1a:	b480      	push	{r7}
 8011a1c:	b083      	sub	sp, #12
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	6078      	str	r0, [r7, #4]
 8011a22:	460b      	mov	r3, r1
 8011a24:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 8011a26:	78fb      	ldrb	r3, [r7, #3]
 8011a28:	687a      	ldr	r2, [r7, #4]
 8011a2a:	4413      	add	r3, r2
 8011a2c:	791b      	ldrb	r3, [r3, #4]
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	370c      	adds	r7, #12
 8011a32:	46bd      	mov	sp, r7
 8011a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a38:	4770      	bx	lr

08011a3a <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 8011a3a:	b580      	push	{r7, lr}
 8011a3c:	b086      	sub	sp, #24
 8011a3e:	af00      	add	r7, sp, #0
 8011a40:	60f8      	str	r0, [r7, #12]
 8011a42:	460b      	mov	r3, r1
 8011a44:	607a      	str	r2, [r7, #4]
 8011a46:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 8011a48:	7afb      	ldrb	r3, [r7, #11]
 8011a4a:	2b01      	cmp	r3, #1
 8011a4c:	f240 80a6 	bls.w	8011b9c <_ZN9PS4Parser5ParseEhPh+0x162>
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	f000 80a2 	beq.w	8011b9c <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	781b      	ldrb	r3, [r3, #0]
 8011a5c:	2b01      	cmp	r3, #1
 8011a5e:	d10e      	bne.n	8011a7e <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	1d18      	adds	r0, r3, #4
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	1c59      	adds	r1, r3, #1
 8011a68:	7afb      	ldrb	r3, [r7, #11]
 8011a6a:	3b01      	subs	r3, #1
 8011a6c:	b2db      	uxtb	r3, r3
 8011a6e:	2b3c      	cmp	r3, #60	; 0x3c
 8011a70:	bf28      	it	cs
 8011a72:	233c      	movcs	r3, #60	; 0x3c
 8011a74:	b2db      	uxtb	r3, r3
 8011a76:	461a      	mov	r2, r3
 8011a78:	f001 fe56 	bl	8013728 <memcpy>
 8011a7c:	e016      	b.n	8011aac <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	781b      	ldrb	r3, [r3, #0]
 8011a82:	2b11      	cmp	r3, #17
 8011a84:	f040 8098 	bne.w	8011bb8 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 8011a88:	7afb      	ldrb	r3, [r7, #11]
 8011a8a:	2b03      	cmp	r3, #3
 8011a8c:	f240 8096 	bls.w	8011bbc <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	1d18      	adds	r0, r3, #4
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	1cd9      	adds	r1, r3, #3
 8011a98:	7afb      	ldrb	r3, [r7, #11]
 8011a9a:	3b03      	subs	r3, #3
 8011a9c:	b2db      	uxtb	r3, r3
 8011a9e:	2b3c      	cmp	r3, #60	; 0x3c
 8011aa0:	bf28      	it	cs
 8011aa2:	233c      	movcs	r3, #60	; 0x3c
 8011aa4:	b2db      	uxtb	r3, r3
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	f001 fe3e 	bl	8013728 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	689b      	ldr	r3, [r3, #8]
 8011ab0:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ab8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d06d      	beq.n	8011b9c <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	689b      	ldr	r3, [r3, #8]
 8011ac4:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011ac8:	461a      	mov	r2, r3
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ace:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011ad2:	43db      	mvns	r3, r3
 8011ad4:	4013      	ands	r3, r2
 8011ad6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	b2d1      	uxtb	r1, r2
 8011ade:	2000      	movs	r0, #0
 8011ae0:	4301      	orrs	r1, r0
 8011ae2:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8011ae6:	0a12      	lsrs	r2, r2, #8
 8011ae8:	b292      	uxth	r2, r2
 8011aea:	2100      	movs	r1, #0
 8011aec:	430a      	orrs	r2, r1
 8011aee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	689b      	ldr	r3, [r3, #8]
 8011af6:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8011afa:	68fa      	ldr	r2, [r7, #12]
 8011afc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011afe:	f361 0317 	bfi	r3, r1, #0, #24
 8011b02:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 8011b04:	2300      	movs	r3, #0
 8011b06:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 8011b08:	2100      	movs	r1, #0
 8011b0a:	68f8      	ldr	r0, [r7, #12]
 8011b0c:	f7ff fe84 	bl	8011818 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d003      	beq.n	8011b1e <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 8011b16:	7dfb      	ldrb	r3, [r7, #23]
 8011b18:	f043 0301 	orr.w	r3, r3, #1
 8011b1c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 8011b1e:	2101      	movs	r1, #1
 8011b20:	68f8      	ldr	r0, [r7, #12]
 8011b22:	f7ff fe79 	bl	8011818 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011b26:	4603      	mov	r3, r0
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d003      	beq.n	8011b34 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 8011b2c:	7dfb      	ldrb	r3, [r7, #23]
 8011b2e:	f043 0302 	orr.w	r3, r3, #2
 8011b32:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 8011b34:	2102      	movs	r1, #2
 8011b36:	68f8      	ldr	r0, [r7, #12]
 8011b38:	f7ff fe6e 	bl	8011818 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d003      	beq.n	8011b4a <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 8011b42:	7dfb      	ldrb	r3, [r7, #23]
 8011b44:	f043 0304 	orr.w	r3, r3, #4
 8011b48:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 8011b4a:	2103      	movs	r1, #3
 8011b4c:	68f8      	ldr	r0, [r7, #12]
 8011b4e:	f7ff fe63 	bl	8011818 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d003      	beq.n	8011b60 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 8011b58:	7dfb      	ldrb	r3, [r7, #23]
 8011b5a:	f043 0308 	orr.w	r3, r3, #8
 8011b5e:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011b66:	7dfa      	ldrb	r2, [r7, #23]
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d017      	beq.n	8011b9c <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011b72:	b25b      	sxtb	r3, r3
 8011b74:	43db      	mvns	r3, r3
 8011b76:	b25a      	sxtb	r2, r3
 8011b78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b7c:	4013      	ands	r3, r2
 8011b7e:	b25b      	sxtb	r3, r3
 8011b80:	f003 030f 	and.w	r3, r3, #15
 8011b84:	b2d9      	uxtb	r1, r3
 8011b86:	68fa      	ldr	r2, [r7, #12]
 8011b88:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8011b8c:	f361 0303 	bfi	r3, r1, #0, #4
 8011b90:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	7dfa      	ldrb	r2, [r7, #23]
 8011b98:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d00b      	beq.n	8011bbe <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	68fa      	ldr	r2, [r7, #12]
 8011bae:	3246      	adds	r2, #70	; 0x46
 8011bb0:	4611      	mov	r1, r2
 8011bb2:	68f8      	ldr	r0, [r7, #12]
 8011bb4:	4798      	blx	r3
 8011bb6:	e002      	b.n	8011bbe <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 8011bb8:	bf00      	nop
 8011bba:	e000      	b.n	8011bbe <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 8011bbc:	bf00      	nop
}
 8011bbe:	3718      	adds	r7, #24
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}

08011bc4 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 8011bc4:	b480      	push	{r7}
 8011bc6:	b085      	sub	sp, #20
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8011bcc:	2300      	movs	r3, #0
 8011bce:	73fb      	strb	r3, [r7, #15]
 8011bd0:	7bfb      	ldrb	r3, [r7, #15]
 8011bd2:	2b03      	cmp	r3, #3
 8011bd4:	d808      	bhi.n	8011be8 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 8011bd6:	7bfb      	ldrb	r3, [r7, #15]
 8011bd8:	687a      	ldr	r2, [r7, #4]
 8011bda:	4413      	add	r3, r2
 8011bdc:	227f      	movs	r2, #127	; 0x7f
 8011bde:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8011be0:	7bfb      	ldrb	r3, [r7, #15]
 8011be2:	3301      	adds	r3, #1
 8011be4:	73fb      	strb	r3, [r7, #15]
 8011be6:	e7f3      	b.n	8011bd0 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	6893      	ldr	r3, [r2, #8]
 8011bec:	f36f 0317 	bfc	r3, #0, #24
 8011bf0:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 8011bf2:	687a      	ldr	r2, [r7, #4]
 8011bf4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011bf6:	f36f 0317 	bfc	r3, #0, #24
 8011bfa:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	73fb      	strb	r3, [r7, #15]
 8011c00:	7bfb      	ldrb	r3, [r7, #15]
 8011c02:	2b01      	cmp	r3, #1
 8011c04:	d808      	bhi.n	8011c18 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 8011c06:	7bfb      	ldrb	r3, [r7, #15]
 8011c08:	687a      	ldr	r2, [r7, #4]
 8011c0a:	4413      	add	r3, r2
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8011c10:	7bfb      	ldrb	r3, [r7, #15]
 8011c12:	3301      	adds	r3, #1
 8011c14:	73fb      	strb	r3, [r7, #15]
 8011c16:	e7f3      	b.n	8011c00 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8011c18:	2300      	movs	r3, #0
 8011c1a:	73fb      	strb	r3, [r7, #15]
 8011c1c:	7bfb      	ldrb	r3, [r7, #15]
 8011c1e:	2b02      	cmp	r3, #2
 8011c20:	d81b      	bhi.n	8011c5a <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8011c22:	2300      	movs	r3, #0
 8011c24:	73bb      	strb	r3, [r7, #14]
 8011c26:	7bbb      	ldrb	r3, [r7, #14]
 8011c28:	2b01      	cmp	r3, #1
 8011c2a:	d812      	bhi.n	8011c52 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 8011c2c:	7bfa      	ldrb	r2, [r7, #15]
 8011c2e:	7bbb      	ldrb	r3, [r7, #14]
 8011c30:	6879      	ldr	r1, [r7, #4]
 8011c32:	0098      	lsls	r0, r3, #2
 8011c34:	4613      	mov	r3, r2
 8011c36:	00db      	lsls	r3, r3, #3
 8011c38:	4413      	add	r3, r2
 8011c3a:	4403      	add	r3, r0
 8011c3c:	440b      	add	r3, r1
 8011c3e:	f103 0220 	add.w	r2, r3, #32
 8011c42:	7993      	ldrb	r3, [r2, #6]
 8011c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c48:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8011c4a:	7bbb      	ldrb	r3, [r7, #14]
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	73bb      	strb	r3, [r7, #14]
 8011c50:	e7e9      	b.n	8011c26 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8011c52:	7bfb      	ldrb	r3, [r7, #15]
 8011c54:	3301      	adds	r3, #1
 8011c56:	73fb      	strb	r3, [r7, #15]
 8011c58:	e7e0      	b.n	8011c1c <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 8011c5a:	687a      	ldr	r2, [r7, #4]
 8011c5c:	7a13      	ldrb	r3, [r2, #8]
 8011c5e:	2108      	movs	r1, #8
 8011c60:	f361 0303 	bfi	r3, r1, #0, #4
 8011c64:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 8011c66:	687a      	ldr	r2, [r7, #4]
 8011c68:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8011c6c:	2108      	movs	r1, #8
 8011c6e:	f361 0303 	bfi	r3, r1, #0, #4
 8011c72:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 8011c76:	687a      	ldr	r2, [r7, #4]
 8011c78:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8011c7c:	f36f 0303 	bfc	r3, #0, #4
 8011c80:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2200      	movs	r2, #0
 8011c88:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2200      	movs	r2, #0
 8011c90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8011cdc:	bf00      	nop
 8011cde:	3714      	adds	r7, #20
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce6:	4770      	bx	lr

08011ce8 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	2180      	movs	r1, #128	; 0x80
 8011cee:	4803      	ldr	r0, [pc, #12]	; (8011cfc <_ZN2P95IsSetEv+0x14>)
 8011cf0:	f7f0 ffec 	bl	8002ccc <HAL_GPIO_ReadPin>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	40020800 	.word	0x40020800

08011d00 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f001 f9bb 	bl	8013084 <_ZN8MAX3421eI3P102P9EC1Ev>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	4618      	mov	r0, r3
 8011d12:	f001 f9d3 	bl	80130bc <_ZN15AddressPoolImplILh16EEC1Ev>
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 8011d1e:	4b05      	ldr	r3, [pc, #20]	; (8011d34 <_ZN3USBC1Ev+0x34>)
 8011d20:	2211      	movs	r2, #17
 8011d22:	701a      	strb	r2, [r3, #0]
        init();
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f000 f807 	bl	8011d38 <_ZN3USB4initEv>
}
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3708      	adds	r7, #8
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	20005405 	.word	0x20005405

08011d38 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8011d38:	b480      	push	{r7}
 8011d3a:	b083      	sub	sp, #12
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2200      	movs	r2, #0
 8011d44:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8011d48:	bf00      	nop
 8011d4a:	370c      	adds	r7, #12
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d52:	4770      	bx	lr

08011d54 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b086      	sub	sp, #24
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	460b      	mov	r3, r1
 8011d5e:	70fb      	strb	r3, [r7, #3]
 8011d60:	4613      	mov	r3, r2
 8011d62:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	78fa      	ldrb	r2, [r7, #3]
 8011d68:	4611      	mov	r1, r2
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f001 f9e0 	bl	8013130 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011d70:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d003      	beq.n	8011d80 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d101      	bne.n	8011d84 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8011d80:	2300      	movs	r3, #0
 8011d82:	e018      	b.n	8011db6 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	74fb      	strb	r3, [r7, #19]
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	795b      	ldrb	r3, [r3, #5]
 8011d92:	7cfa      	ldrb	r2, [r7, #19]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d20d      	bcs.n	8011db4 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	78ba      	ldrb	r2, [r7, #2]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d101      	bne.n	8011da6 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	e007      	b.n	8011db6 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	3303      	adds	r3, #3
 8011daa:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8011dac:	7cfb      	ldrb	r3, [r7, #19]
 8011dae:	3301      	adds	r3, #1
 8011db0:	74fb      	strb	r3, [r7, #19]
 8011db2:	e7ec      	b.n	8011d8e <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8011db4:	2300      	movs	r3, #0
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3718      	adds	r7, #24
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}

08011dbe <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8011dbe:	b580      	push	{r7, lr}
 8011dc0:	b086      	sub	sp, #24
 8011dc2:	af00      	add	r7, sp, #0
 8011dc4:	60f8      	str	r0, [r7, #12]
 8011dc6:	607b      	str	r3, [r7, #4]
 8011dc8:	460b      	mov	r3, r1
 8011dca:	72fb      	strb	r3, [r7, #11]
 8011dcc:	4613      	mov	r3, r2
 8011dce:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d101      	bne.n	8011dda <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8011dd6:	23d8      	movs	r3, #216	; 0xd8
 8011dd8:	e015      	b.n	8011e06 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	7afa      	ldrb	r2, [r7, #11]
 8011dde:	4611      	mov	r1, r2
 8011de0:	4618      	mov	r0, r3
 8011de2:	f001 f9a5 	bl	8013130 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011de6:	6178      	str	r0, [r7, #20]

        if(!p)
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d101      	bne.n	8011df2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011dee:	23d6      	movs	r3, #214	; 0xd6
 8011df0:	e009      	b.n	8011e06 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8011df2:	697b      	ldr	r3, [r7, #20]
 8011df4:	7afa      	ldrb	r2, [r7, #11]
 8011df6:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	687a      	ldr	r2, [r7, #4]
 8011dfc:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	7aba      	ldrb	r2, [r7, #10]
 8011e02:	715a      	strb	r2, [r3, #5]

        return 0;
 8011e04:	2300      	movs	r3, #0
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3718      	adds	r7, #24
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}

08011e0e <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 8011e0e:	b580      	push	{r7, lr}
 8011e10:	b086      	sub	sp, #24
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	60f8      	str	r0, [r7, #12]
 8011e16:	607b      	str	r3, [r7, #4]
 8011e18:	460b      	mov	r3, r1
 8011e1a:	72fb      	strb	r3, [r7, #11]
 8011e1c:	4613      	mov	r3, r2
 8011e1e:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	7afa      	ldrb	r2, [r7, #11]
 8011e24:	4611      	mov	r1, r2
 8011e26:	4618      	mov	r0, r3
 8011e28:	f001 f982 	bl	8013130 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011e2c:	6178      	str	r0, [r7, #20]

        if(!p)
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d101      	bne.n	8011e38 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011e34:	23d6      	movs	r3, #214	; 0xd6
 8011e36:	e04e      	b.n	8011ed6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d101      	bne.n	8011e44 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8011e40:	23d7      	movs	r3, #215	; 0xd7
 8011e42:	e048      	b.n	8011ed6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8011e44:	7aba      	ldrb	r2, [r7, #10]
 8011e46:	7afb      	ldrb	r3, [r7, #11]
 8011e48:	4619      	mov	r1, r3
 8011e4a:	68f8      	ldr	r0, [r7, #12]
 8011e4c:	f7ff ff82 	bl	8011d54 <_ZN3USB14getEpInfoEntryEhh>
 8011e50:	4602      	mov	r2, r0
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d101      	bne.n	8011e62 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 8011e5e:	23db      	movs	r3, #219	; 0xdb
 8011e60:	e039      	b.n	8011ed6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	789b      	ldrb	r3, [r3, #2]
 8011e68:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8011e6c:	b2db      	uxtb	r3, r3
 8011e6e:	2b0f      	cmp	r3, #15
 8011e70:	bf28      	it	cs
 8011e72:	230f      	movcs	r3, #15
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	461a      	mov	r2, r3
 8011e78:	2301      	movs	r3, #1
 8011e7a:	4093      	lsls	r3, r2
 8011e7c:	b29a      	uxth	r2, r3
 8011e7e:	6a3b      	ldr	r3, [r7, #32]
 8011e80:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8011e82:	6a3b      	ldr	r3, [r7, #32]
 8011e84:	881b      	ldrh	r3, [r3, #0]
 8011e86:	3b01      	subs	r3, #1
 8011e88:	b29a      	uxth	r2, r3
 8011e8a:	6a3b      	ldr	r3, [r7, #32]
 8011e8c:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 8011e8e:	7afb      	ldrb	r3, [r7, #11]
 8011e90:	461a      	mov	r2, r3
 8011e92:	21e0      	movs	r1, #224	; 0xe0
 8011e94:	68f8      	ldr	r0, [r7, #12]
 8011e96:	f7ef ff63 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 8011e9a:	21d8      	movs	r1, #216	; 0xd8
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f7ef ffb1 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	799b      	ldrb	r3, [r3, #6]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d009      	beq.n	8011ec2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8011eb4:	7cfb      	ldrb	r3, [r7, #19]
 8011eb6:	4313      	orrs	r3, r2
 8011eb8:	b2db      	uxtb	r3, r3
 8011eba:	f043 0302 	orr.w	r3, r3, #2
 8011ebe:	b2db      	uxtb	r3, r3
 8011ec0:	e003      	b.n	8011eca <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8011ec2:	7cfb      	ldrb	r3, [r7, #19]
 8011ec4:	f023 0306 	bic.w	r3, r3, #6
 8011ec8:	b2db      	uxtb	r3, r3
 8011eca:	461a      	mov	r2, r3
 8011ecc:	21d8      	movs	r1, #216	; 0xd8
 8011ece:	68f8      	ldr	r0, [r7, #12]
 8011ed0:	f7ef ff46 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8011ed4:	2300      	movs	r3, #0
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3718      	adds	r7, #24
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}

08011ede <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 8011ede:	b590      	push	{r4, r7, lr}
 8011ee0:	b08b      	sub	sp, #44	; 0x2c
 8011ee2:	af02      	add	r7, sp, #8
 8011ee4:	6078      	str	r0, [r7, #4]
 8011ee6:	4608      	mov	r0, r1
 8011ee8:	4611      	mov	r1, r2
 8011eea:	461a      	mov	r2, r3
 8011eec:	4603      	mov	r3, r0
 8011eee:	70fb      	strb	r3, [r7, #3]
 8011ef0:	460b      	mov	r3, r1
 8011ef2:	70bb      	strb	r3, [r7, #2]
 8011ef4:	4613      	mov	r3, r2
 8011ef6:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8011ef8:	2300      	movs	r3, #0
 8011efa:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 8011efc:	2300      	movs	r3, #0
 8011efe:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8011f00:	2300      	movs	r3, #0
 8011f02:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8011f04:	f107 000c 	add.w	r0, r7, #12
 8011f08:	78ba      	ldrb	r2, [r7, #2]
 8011f0a:	78f9      	ldrb	r1, [r7, #3]
 8011f0c:	f107 030a 	add.w	r3, r7, #10
 8011f10:	9300      	str	r3, [sp, #0]
 8011f12:	4603      	mov	r3, r0
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f7ff ff7a 	bl	8011e0e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 8011f1e:	7ffb      	ldrb	r3, [r7, #31]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d001      	beq.n	8011f28 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8011f24:	7ffb      	ldrb	r3, [r7, #31]
 8011f26:	e0ae      	b.n	8012086 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8011f28:	787b      	ldrb	r3, [r7, #1]
 8011f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	bfcc      	ite	gt
 8011f32:	2301      	movgt	r3, #1
 8011f34:	2300      	movle	r3, #0
 8011f36:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8011f38:	787b      	ldrb	r3, [r7, #1]
 8011f3a:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 8011f3c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8011f40:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8011f42:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011f46:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8011f48:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8011f4c:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 8011f4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f50:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8011f52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f56:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8011f58:	f107 0310 	add.w	r3, r7, #16
 8011f5c:	2208      	movs	r2, #8
 8011f5e:	2120      	movs	r1, #32
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f001 f90b 	bl	801317c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8011f66:	897b      	ldrh	r3, [r7, #10]
 8011f68:	78ba      	ldrb	r2, [r7, #2]
 8011f6a:	2110      	movs	r1, #16
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f000 faf2 	bl	8012556 <_ZN3USB11dispatchPktEhht>
 8011f72:	4603      	mov	r3, r0
 8011f74:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8011f76:	7ffb      	ldrb	r3, [r7, #31]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d001      	beq.n	8011f80 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 8011f7c:	7ffb      	ldrb	r3, [r7, #31]
 8011f7e:	e082      	b.n	8012086 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8011f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d072      	beq.n	801206c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8011f86:	7efb      	ldrb	r3, [r7, #27]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d057      	beq.n	801203c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 8011f8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f90:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 8011f92:	68fa      	ldr	r2, [r7, #12]
 8011f94:	7893      	ldrb	r3, [r2, #2]
 8011f96:	f043 0302 	orr.w	r3, r3, #2
 8011f9a:	7093      	strb	r3, [r2, #2]

                        while(left) {
 8011f9c:	8bbb      	ldrh	r3, [r7, #28]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d05f      	beq.n	8012062 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 8011fa2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011fa6:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 8011fa8:	68f9      	ldr	r1, [r7, #12]
 8011faa:	897a      	ldrh	r2, [r7, #10]
 8011fac:	f107 0008 	add.w	r0, r7, #8
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	9301      	str	r3, [sp, #4]
 8011fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fb6:	9300      	str	r3, [sp, #0]
 8011fb8:	4603      	mov	r3, r0
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 f8a6 	bl	801210c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8011fc4:	7ffb      	ldrb	r3, [r7, #31]
 8011fc6:	2b06      	cmp	r3, #6
 8011fc8:	d114      	bne.n	8011ff4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8011fca:	21f8      	movs	r1, #248	; 0xf8
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7ef ff19 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	f003 0320 	and.w	r3, r3, #32
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	bf0c      	ite	eq
 8011fdc:	2301      	moveq	r3, #1
 8011fde:	2300      	movne	r3, #0
 8011fe0:	b2db      	uxtb	r3, r3
 8011fe2:	68fa      	ldr	r2, [r7, #12]
 8011fe4:	f003 0301 	and.w	r3, r3, #1
 8011fe8:	b2d9      	uxtb	r1, r3
 8011fea:	7893      	ldrb	r3, [r2, #2]
 8011fec:	f361 0341 	bfi	r3, r1, #1, #1
 8011ff0:	7093      	strb	r3, [r2, #2]
 8011ff2:	e7d3      	b.n	8011f9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8011ff4:	7ffb      	ldrb	r3, [r7, #31]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d001      	beq.n	8011ffe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 8011ffa:	7ffb      	ldrb	r3, [r7, #31]
 8011ffc:	e043      	b.n	8012086 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 8011ffe:	7ffb      	ldrb	r3, [r7, #31]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d111      	bne.n	8012028 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8012004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012006:	2b00      	cmp	r3, #0
 8012008:	d00e      	beq.n	8012028 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 801200a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	681c      	ldr	r4, [r3, #0]
 8012010:	8939      	ldrh	r1, [r7, #8]
 8012012:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012016:	8bbb      	ldrh	r3, [r7, #28]
 8012018:	1ad3      	subs	r3, r2, r3
 801201a:	b29b      	uxth	r3, r3
 801201c:	833b      	strh	r3, [r7, #24]
 801201e:	f107 0318 	add.w	r3, r7, #24
 8012022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012024:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012026:	47a0      	blx	r4

                                left -= read;
 8012028:	893b      	ldrh	r3, [r7, #8]
 801202a:	8bba      	ldrh	r2, [r7, #28]
 801202c:	1ad3      	subs	r3, r2, r3
 801202e:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8012030:	893b      	ldrh	r3, [r7, #8]
 8012032:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012036:	429a      	cmp	r2, r3
 8012038:	d812      	bhi.n	8012060 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 801203a:	e7af      	b.n	8011f9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 801203c:	68fa      	ldr	r2, [r7, #12]
 801203e:	7893      	ldrb	r3, [r2, #2]
 8012040:	f043 0301 	orr.w	r3, r3, #1
 8012044:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8012046:	68f9      	ldr	r1, [r7, #12]
 8012048:	897a      	ldrh	r2, [r7, #10]
 801204a:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 801204e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012050:	9300      	str	r3, [sp, #0]
 8012052:	4603      	mov	r3, r0
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f000 f953 	bl	8012300 <_ZN3USB11OutTransferEP6EpInfottPh>
 801205a:	4603      	mov	r3, r0
 801205c:	77fb      	strb	r3, [r7, #31]
 801205e:	e000      	b.n	8012062 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 8012060:	bf00      	nop
                }
                if(rcode) //return error
 8012062:	7ffb      	ldrb	r3, [r7, #31]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d001      	beq.n	801206c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8012068:	7ffb      	ldrb	r3, [r7, #31]
 801206a:	e00c      	b.n	8012086 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 801206c:	7efb      	ldrb	r3, [r7, #27]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d001      	beq.n	8012076 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 8012072:	21a0      	movs	r1, #160	; 0xa0
 8012074:	e000      	b.n	8012078 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 8012076:	2180      	movs	r1, #128	; 0x80
 8012078:	897b      	ldrh	r3, [r7, #10]
 801207a:	78ba      	ldrb	r2, [r7, #2]
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f000 fa6a 	bl	8012556 <_ZN3USB11dispatchPktEhht>
 8012082:	4603      	mov	r3, r0
 8012084:	bf00      	nop
}
 8012086:	4618      	mov	r0, r3
 8012088:	3724      	adds	r7, #36	; 0x24
 801208a:	46bd      	mov	sp, r7
 801208c:	bd90      	pop	{r4, r7, pc}

0801208e <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 801208e:	b580      	push	{r7, lr}
 8012090:	b08a      	sub	sp, #40	; 0x28
 8012092:	af02      	add	r7, sp, #8
 8012094:	60f8      	str	r0, [r7, #12]
 8012096:	607b      	str	r3, [r7, #4]
 8012098:	460b      	mov	r3, r1
 801209a:	72fb      	strb	r3, [r7, #11]
 801209c:	4613      	mov	r3, r2
 801209e:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 80120a0:	2300      	movs	r3, #0
 80120a2:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 80120a4:	2300      	movs	r3, #0
 80120a6:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 80120a8:	f107 0018 	add.w	r0, r7, #24
 80120ac:	7aba      	ldrb	r2, [r7, #10]
 80120ae:	7af9      	ldrb	r1, [r7, #11]
 80120b0:	f107 0316 	add.w	r3, r7, #22
 80120b4:	9300      	str	r3, [sp, #0]
 80120b6:	4603      	mov	r3, r0
 80120b8:	68f8      	ldr	r0, [r7, #12]
 80120ba:	f7ff fea8 	bl	8011e0e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 80120be:	4603      	mov	r3, r0
 80120c0:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 80120c2:	7ffb      	ldrb	r3, [r7, #31]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d010      	beq.n	80120ea <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 80120c8:	7ffb      	ldrb	r3, [r7, #31]
 80120ca:	2181      	movs	r1, #129	; 0x81
 80120cc:	4618      	mov	r0, r3
 80120ce:	f001 f883 	bl	80131d8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 80120d2:	7afb      	ldrb	r3, [r7, #11]
 80120d4:	2181      	movs	r1, #129	; 0x81
 80120d6:	4618      	mov	r0, r3
 80120d8:	f001 f87e 	bl	80131d8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 80120dc:	7abb      	ldrb	r3, [r7, #10]
 80120de:	2181      	movs	r1, #129	; 0x81
 80120e0:	4618      	mov	r0, r3
 80120e2:	f001 f879 	bl	80131d8 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 80120e6:	7ffb      	ldrb	r3, [r7, #31]
 80120e8:	e00c      	b.n	8012104 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 80120ea:	69b9      	ldr	r1, [r7, #24]
 80120ec:	8afa      	ldrh	r2, [r7, #22]
 80120ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80120f2:	9301      	str	r3, [sp, #4]
 80120f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f6:	9300      	str	r3, [sp, #0]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	68f8      	ldr	r0, [r7, #12]
 80120fc:	f000 f806 	bl	801210c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8012100:	4603      	mov	r3, r0
 8012102:	bf00      	nop
}
 8012104:	4618      	mov	r0, r3
 8012106:	3720      	adds	r7, #32
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 801210c:	b580      	push	{r7, lr}
 801210e:	b086      	sub	sp, #24
 8012110:	af00      	add	r7, sp, #0
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	60b9      	str	r1, [r7, #8]
 8012116:	603b      	str	r3, [r7, #0]
 8012118:	4613      	mov	r3, r2
 801211a:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 801211c:	2300      	movs	r3, #0
 801211e:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	881b      	ldrh	r3, [r3, #0]
 8012124:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	785b      	ldrb	r3, [r3, #1]
 801212a:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	2200      	movs	r2, #0
 8012130:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	789b      	ldrb	r3, [r3, #2]
 8012136:	f003 0302 	and.w	r3, r3, #2
 801213a:	b2db      	uxtb	r3, r3
 801213c:	2b00      	cmp	r3, #0
 801213e:	d001      	beq.n	8012144 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8012140:	2320      	movs	r3, #32
 8012142:	e000      	b.n	8012146 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8012144:	2310      	movs	r3, #16
 8012146:	461a      	mov	r2, r3
 8012148:	21e8      	movs	r1, #232	; 0xe8
 801214a:	68f8      	ldr	r0, [r7, #12]
 801214c:	f7ef fe08 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	781a      	ldrb	r2, [r3, #0]
 8012154:	88fb      	ldrh	r3, [r7, #6]
 8012156:	2100      	movs	r1, #0
 8012158:	68f8      	ldr	r0, [r7, #12]
 801215a:	f000 f9fc 	bl	8012556 <_ZN3USB11dispatchPktEhht>
 801215e:	4603      	mov	r3, r0
 8012160:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 8012162:	7dfb      	ldrb	r3, [r7, #23]
 8012164:	2b06      	cmp	r3, #6
 8012166:	d123      	bne.n	80121b0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 8012168:	21f8      	movs	r1, #248	; 0xf8
 801216a:	68f8      	ldr	r0, [r7, #12]
 801216c:	f7ef fe4a 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012170:	4603      	mov	r3, r0
 8012172:	f003 0310 	and.w	r3, r3, #16
 8012176:	2b00      	cmp	r3, #0
 8012178:	bf0c      	ite	eq
 801217a:	2301      	moveq	r3, #1
 801217c:	2300      	movne	r3, #0
 801217e:	b2db      	uxtb	r3, r3
 8012180:	f003 0301 	and.w	r3, r3, #1
 8012184:	b2d9      	uxtb	r1, r3
 8012186:	68ba      	ldr	r2, [r7, #8]
 8012188:	7893      	ldrb	r3, [r2, #2]
 801218a:	f361 0341 	bfi	r3, r1, #1, #1
 801218e:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	789b      	ldrb	r3, [r3, #2]
 8012194:	f003 0302 	and.w	r3, r3, #2
 8012198:	b2db      	uxtb	r3, r3
 801219a:	2b00      	cmp	r3, #0
 801219c:	d001      	beq.n	80121a2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 801219e:	2320      	movs	r3, #32
 80121a0:	e000      	b.n	80121a4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 80121a2:	2310      	movs	r3, #16
 80121a4:	461a      	mov	r2, r3
 80121a6:	21e8      	movs	r1, #232	; 0xe8
 80121a8:	68f8      	ldr	r0, [r7, #12]
 80121aa:	f7ef fdd9 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 80121ae:	e06e      	b.n	801228e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 80121b0:	7dfb      	ldrb	r3, [r7, #23]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d16c      	bne.n	8012290 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 80121b6:	21c8      	movs	r1, #200	; 0xc8
 80121b8:	68f8      	ldr	r0, [r7, #12]
 80121ba:	f7ef fe23 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80121be:	4603      	mov	r3, r0
 80121c0:	f003 0304 	and.w	r3, r3, #4
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	bf0c      	ite	eq
 80121c8:	2301      	moveq	r3, #1
 80121ca:	2300      	movne	r3, #0
 80121cc:	b2db      	uxtb	r3, r3
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d002      	beq.n	80121d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 80121d2:	23f0      	movs	r3, #240	; 0xf0
 80121d4:	75fb      	strb	r3, [r7, #23]
                        break;
 80121d6:	e05c      	b.n	8012292 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 80121d8:	2130      	movs	r1, #48	; 0x30
 80121da:	68f8      	ldr	r0, [r7, #12]
 80121dc:	f7ef fe12 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80121e0:	4603      	mov	r3, r0
 80121e2:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 80121e4:	7dba      	ldrb	r2, [r7, #22]
 80121e6:	8a7b      	ldrh	r3, [r7, #18]
 80121e8:	429a      	cmp	r2, r3
 80121ea:	dd01      	ble.n	80121f0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 80121ec:	8a7b      	ldrh	r3, [r7, #18]
 80121ee:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	8a7a      	ldrh	r2, [r7, #18]
 80121fa:	1ad3      	subs	r3, r2, r3
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8012200:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012204:	2b00      	cmp	r3, #0
 8012206:	da01      	bge.n	801220c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8012208:	2300      	movs	r3, #0
 801220a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 801220c:	7dba      	ldrb	r2, [r7, #22]
 801220e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012212:	4293      	cmp	r3, r2
 8012214:	bfa8      	it	ge
 8012216:	4613      	movge	r3, r2
 8012218:	b2da      	uxtb	r2, r3
 801221a:	6a3b      	ldr	r3, [r7, #32]
 801221c:	2108      	movs	r1, #8
 801221e:	68f8      	ldr	r0, [r7, #12]
 8012220:	f000 ffe6 	bl	80131f0 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8012224:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8012226:	2204      	movs	r2, #4
 8012228:	21c8      	movs	r1, #200	; 0xc8
 801222a:	68f8      	ldr	r0, [r7, #12]
 801222c:	f7ef fd98 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	881a      	ldrh	r2, [r3, #0]
 8012234:	7dbb      	ldrb	r3, [r7, #22]
 8012236:	b29b      	uxth	r3, r3
 8012238:	4413      	add	r3, r2
 801223a:	b29a      	uxth	r2, r3
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8012240:	7dba      	ldrb	r2, [r7, #22]
 8012242:	7c7b      	ldrb	r3, [r7, #17]
 8012244:	429a      	cmp	r2, r3
 8012246:	d304      	bcc.n	8012252 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	881b      	ldrh	r3, [r3, #0]
 801224c:	8a7a      	ldrh	r2, [r7, #18]
 801224e:	429a      	cmp	r2, r3
 8012250:	d813      	bhi.n	801227a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8012252:	21f8      	movs	r1, #248	; 0xf8
 8012254:	68f8      	ldr	r0, [r7, #12]
 8012256:	f7ef fdd5 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801225a:	4603      	mov	r3, r0
 801225c:	f003 0310 	and.w	r3, r3, #16
 8012260:	2b00      	cmp	r3, #0
 8012262:	d001      	beq.n	8012268 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 8012264:	2101      	movs	r1, #1
 8012266:	e000      	b.n	801226a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 8012268:	2100      	movs	r1, #0
 801226a:	68ba      	ldr	r2, [r7, #8]
 801226c:	7893      	ldrb	r3, [r2, #2]
 801226e:	f361 0341 	bfi	r3, r1, #1, #1
 8012272:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 8012274:	2300      	movs	r3, #0
 8012276:	75fb      	strb	r3, [r7, #23]
                        break;
 8012278:	e00b      	b.n	8012292 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 801227a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801227e:	2b00      	cmp	r3, #0
 8012280:	f43f af66 	beq.w	8012150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 8012284:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012288:	4618      	mov	r0, r3
 801228a:	f7f0 fa85 	bl	8002798 <HAL_Delay>
        } //while( 1 )
 801228e:	e75f      	b.n	8012150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 8012290:	bf00      	nop
        return ( rcode);
 8012292:	7dfb      	ldrb	r3, [r7, #23]
}
 8012294:	4618      	mov	r0, r3
 8012296:	3718      	adds	r7, #24
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}

0801229c <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 801229c:	b580      	push	{r7, lr}
 801229e:	b088      	sub	sp, #32
 80122a0:	af02      	add	r7, sp, #8
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	4608      	mov	r0, r1
 80122a6:	4611      	mov	r1, r2
 80122a8:	461a      	mov	r2, r3
 80122aa:	4603      	mov	r3, r0
 80122ac:	70fb      	strb	r3, [r7, #3]
 80122ae:	460b      	mov	r3, r1
 80122b0:	70bb      	strb	r3, [r7, #2]
 80122b2:	4613      	mov	r3, r2
 80122b4:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 80122b6:	2300      	movs	r3, #0
 80122b8:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 80122ba:	2300      	movs	r3, #0
 80122bc:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 80122be:	f107 0010 	add.w	r0, r7, #16
 80122c2:	78ba      	ldrb	r2, [r7, #2]
 80122c4:	78f9      	ldrb	r1, [r7, #3]
 80122c6:	f107 030e 	add.w	r3, r7, #14
 80122ca:	9300      	str	r3, [sp, #0]
 80122cc:	4603      	mov	r3, r0
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f7ff fd9d 	bl	8011e0e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 80122d4:	4603      	mov	r3, r0
 80122d6:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 80122d8:	7dfb      	ldrb	r3, [r7, #23]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d001      	beq.n	80122e2 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 80122de:	7dfb      	ldrb	r3, [r7, #23]
 80122e0:	e00a      	b.n	80122f8 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 80122e2:	6939      	ldr	r1, [r7, #16]
 80122e4:	89fa      	ldrh	r2, [r7, #14]
 80122e6:	8838      	ldrh	r0, [r7, #0]
 80122e8:	6a3b      	ldr	r3, [r7, #32]
 80122ea:	9300      	str	r3, [sp, #0]
 80122ec:	4603      	mov	r3, r0
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f000 f806 	bl	8012300 <_ZN3USB11OutTransferEP6EpInfottPh>
 80122f4:	4603      	mov	r3, r0
 80122f6:	bf00      	nop
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3718      	adds	r7, #24
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8012300:	b580      	push	{r7, lr}
 8012302:	b08a      	sub	sp, #40	; 0x28
 8012304:	af00      	add	r7, sp, #0
 8012306:	60f8      	str	r0, [r7, #12]
 8012308:	60b9      	str	r1, [r7, #8]
 801230a:	4611      	mov	r1, r2
 801230c:	461a      	mov	r2, r3
 801230e:	460b      	mov	r3, r1
 8012310:	80fb      	strh	r3, [r7, #6]
 8012312:	4613      	mov	r3, r2
 8012314:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 8012316:	2300      	movs	r3, #0
 8012318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 801231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801231e:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 8012320:	88bb      	ldrh	r3, [r7, #4]
 8012322:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	785b      	ldrb	r3, [r3, #1]
 8012328:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 801232a:	7efb      	ldrb	r3, [r7, #27]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d002      	beq.n	8012336 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 8012330:	7efb      	ldrb	r3, [r7, #27]
 8012332:	2b40      	cmp	r3, #64	; 0x40
 8012334:	d901      	bls.n	801233a <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 8012336:	23da      	movs	r3, #218	; 0xda
 8012338:	e109      	b.n	801254e <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 801233a:	f7f0 fa21 	bl	8002780 <HAL_GetTick>
 801233e:	4603      	mov	r3, r0
 8012340:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8012344:	3308      	adds	r3, #8
 8012346:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	789b      	ldrb	r3, [r3, #2]
 801234c:	f003 0301 	and.w	r3, r3, #1
 8012350:	b2db      	uxtb	r3, r3
 8012352:	2b00      	cmp	r3, #0
 8012354:	d001      	beq.n	801235a <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 8012356:	2380      	movs	r3, #128	; 0x80
 8012358:	e000      	b.n	801235c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 801235a:	2340      	movs	r3, #64	; 0x40
 801235c:	461a      	mov	r2, r3
 801235e:	21e8      	movs	r1, #232	; 0xe8
 8012360:	68f8      	ldr	r0, [r7, #12]
 8012362:	f7ef fcfd 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 8012366:	8bbb      	ldrh	r3, [r7, #28]
 8012368:	2b00      	cmp	r3, #0
 801236a:	f000 80da 	beq.w	8012522 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 801236e:	2300      	movs	r3, #0
 8012370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 8012374:	2300      	movs	r3, #0
 8012376:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 8012378:	7efb      	ldrb	r3, [r7, #27]
 801237a:	b29b      	uxth	r3, r3
 801237c:	8bba      	ldrh	r2, [r7, #28]
 801237e:	4293      	cmp	r3, r2
 8012380:	bf28      	it	cs
 8012382:	4613      	movcs	r3, r2
 8012384:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 8012386:	8a7b      	ldrh	r3, [r7, #18]
 8012388:	b2da      	uxtb	r2, r3
 801238a:	6a3b      	ldr	r3, [r7, #32]
 801238c:	2110      	movs	r1, #16
 801238e:	68f8      	ldr	r0, [r7, #12]
 8012390:	f000 fef4 	bl	801317c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 8012394:	8a7b      	ldrh	r3, [r7, #18]
 8012396:	b2db      	uxtb	r3, r3
 8012398:	461a      	mov	r2, r3
 801239a:	2138      	movs	r1, #56	; 0x38
 801239c:	68f8      	ldr	r0, [r7, #12]
 801239e:	f7ef fcdf 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	781b      	ldrb	r3, [r3, #0]
 80123a6:	f043 0320 	orr.w	r3, r3, #32
 80123aa:	b2db      	uxtb	r3, r3
 80123ac:	461a      	mov	r2, r3
 80123ae:	21f0      	movs	r1, #240	; 0xf0
 80123b0:	68f8      	ldr	r0, [r7, #12]
 80123b2:	f7ef fcd5 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 80123b6:	21c8      	movs	r1, #200	; 0xc8
 80123b8:	68f8      	ldr	r0, [r7, #12]
 80123ba:	f7ef fd23 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80123be:	4603      	mov	r3, r0
 80123c0:	b25b      	sxtb	r3, r3
 80123c2:	43db      	mvns	r3, r3
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	09db      	lsrs	r3, r3, #7
 80123c8:	b2db      	uxtb	r3, r3
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d000      	beq.n	80123d0 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 80123ce:	e7f2      	b.n	80123b6 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 80123d0:	2280      	movs	r2, #128	; 0x80
 80123d2:	21c8      	movs	r1, #200	; 0xc8
 80123d4:	68f8      	ldr	r0, [r7, #12]
 80123d6:	f7ef fcc3 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 80123da:	21f8      	movs	r1, #248	; 0xf8
 80123dc:	68f8      	ldr	r0, [r7, #12]
 80123de:	f7ef fd11 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80123e2:	4603      	mov	r3, r0
 80123e4:	f003 030f 	and.w	r3, r3, #15
 80123e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 80123ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d008      	beq.n	8012406 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 80123f4:	f7f0 f9c4 	bl	8002780 <HAL_GetTick>
 80123f8:	4602      	mov	r2, r0
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	1ad3      	subs	r3, r2, r3
 80123fe:	2b00      	cmp	r3, #0
 8012400:	da01      	bge.n	8012406 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8012402:	2301      	movs	r3, #1
 8012404:	e000      	b.n	8012408 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8012406:	2300      	movs	r3, #0
 8012408:	2b00      	cmp	r3, #0
 801240a:	f000 8081 	beq.w	8012510 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 801240e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012412:	2b0e      	cmp	r3, #14
 8012414:	d012      	beq.n	801243c <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 8012416:	2b0e      	cmp	r3, #14
 8012418:	f300 8085 	bgt.w	8012526 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 801241c:	2b04      	cmp	r3, #4
 801241e:	d002      	beq.n	8012426 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 8012420:	2b06      	cmp	r3, #6
 8012422:	d015      	beq.n	8012450 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 8012424:	e07f      	b.n	8012526 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 8012426:	8bfb      	ldrh	r3, [r7, #30]
 8012428:	3301      	adds	r3, #1
 801242a:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 801242c:	88fb      	ldrh	r3, [r7, #6]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d032      	beq.n	8012498 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 8012432:	8bfa      	ldrh	r2, [r7, #30]
 8012434:	88fb      	ldrh	r3, [r7, #6]
 8012436:	429a      	cmp	r2, r3
 8012438:	d12e      	bne.n	8012498 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 801243a:	e075      	b.n	8012528 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 801243c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012440:	3301      	adds	r3, #1
 8012442:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 8012446:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801244a:	2b03      	cmp	r3, #3
 801244c:	d126      	bne.n	801249c <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 801244e:	e06b      	b.n	8012528 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8012450:	21f8      	movs	r1, #248	; 0xf8
 8012452:	68f8      	ldr	r0, [r7, #12]
 8012454:	f7ef fcd6 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012458:	4603      	mov	r3, r0
 801245a:	f003 0320 	and.w	r3, r3, #32
 801245e:	2b00      	cmp	r3, #0
 8012460:	bf0c      	ite	eq
 8012462:	2301      	moveq	r3, #1
 8012464:	2300      	movne	r3, #0
 8012466:	b2db      	uxtb	r3, r3
 8012468:	f003 0301 	and.w	r3, r3, #1
 801246c:	b2d9      	uxtb	r1, r3
 801246e:	68ba      	ldr	r2, [r7, #8]
 8012470:	7893      	ldrb	r3, [r2, #2]
 8012472:	f361 0300 	bfi	r3, r1, #0, #1
 8012476:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	789b      	ldrb	r3, [r3, #2]
 801247c:	f003 0301 	and.w	r3, r3, #1
 8012480:	b2db      	uxtb	r3, r3
 8012482:	2b00      	cmp	r3, #0
 8012484:	d001      	beq.n	801248a <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 8012486:	2380      	movs	r3, #128	; 0x80
 8012488:	e000      	b.n	801248c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 801248a:	2340      	movs	r3, #64	; 0x40
 801248c:	461a      	mov	r2, r3
 801248e:	21e8      	movs	r1, #232	; 0xe8
 8012490:	68f8      	ldr	r0, [r7, #12]
 8012492:	f7ef fc65 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 8012496:	e002      	b.n	801249e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 8012498:	bf00      	nop
 801249a:	e000      	b.n	801249e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 801249c:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 801249e:	2200      	movs	r2, #0
 80124a0:	2138      	movs	r1, #56	; 0x38
 80124a2:	68f8      	ldr	r0, [r7, #12]
 80124a4:	f7ef fc5c 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 80124a8:	6a3b      	ldr	r3, [r7, #32]
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	461a      	mov	r2, r3
 80124ae:	2110      	movs	r1, #16
 80124b0:	68f8      	ldr	r0, [r7, #12]
 80124b2:	f7ef fc55 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 80124b6:	8a7b      	ldrh	r3, [r7, #18]
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	461a      	mov	r2, r3
 80124bc:	2138      	movs	r1, #56	; 0x38
 80124be:	68f8      	ldr	r0, [r7, #12]
 80124c0:	f7ef fc4e 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	f043 0320 	orr.w	r3, r3, #32
 80124cc:	b2db      	uxtb	r3, r3
 80124ce:	461a      	mov	r2, r3
 80124d0:	21f0      	movs	r1, #240	; 0xf0
 80124d2:	68f8      	ldr	r0, [r7, #12]
 80124d4:	f7ef fc44 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 80124d8:	21c8      	movs	r1, #200	; 0xc8
 80124da:	68f8      	ldr	r0, [r7, #12]
 80124dc:	f7ef fc92 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80124e0:	4603      	mov	r3, r0
 80124e2:	b25b      	sxtb	r3, r3
 80124e4:	43db      	mvns	r3, r3
 80124e6:	b2db      	uxtb	r3, r3
 80124e8:	09db      	lsrs	r3, r3, #7
 80124ea:	b2db      	uxtb	r3, r3
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d000      	beq.n	80124f2 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 80124f0:	e7f2      	b.n	80124d8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 80124f2:	2280      	movs	r2, #128	; 0x80
 80124f4:	21c8      	movs	r1, #200	; 0xc8
 80124f6:	68f8      	ldr	r0, [r7, #12]
 80124f8:	f7ef fc32 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 80124fc:	21f8      	movs	r1, #248	; 0xf8
 80124fe:	68f8      	ldr	r0, [r7, #12]
 8012500:	f7ef fc80 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012504:	4603      	mov	r3, r0
 8012506:	f003 030f 	and.w	r3, r3, #15
 801250a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801250e:	e76d      	b.n	80123ec <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 8012510:	8bba      	ldrh	r2, [r7, #28]
 8012512:	8a7b      	ldrh	r3, [r7, #18]
 8012514:	1ad3      	subs	r3, r2, r3
 8012516:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 8012518:	8a7b      	ldrh	r3, [r7, #18]
 801251a:	6a3a      	ldr	r2, [r7, #32]
 801251c:	4413      	add	r3, r2
 801251e:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 8012520:	e721      	b.n	8012366 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 8012522:	bf00      	nop
 8012524:	e000      	b.n	8012528 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 8012526:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 8012528:	21f8      	movs	r1, #248	; 0xf8
 801252a:	68f8      	ldr	r0, [r7, #12]
 801252c:	f7ef fc6a 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012530:	4603      	mov	r3, r0
 8012532:	f003 0320 	and.w	r3, r3, #32
 8012536:	2b00      	cmp	r3, #0
 8012538:	d001      	beq.n	801253e <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 801253a:	2101      	movs	r1, #1
 801253c:	e000      	b.n	8012540 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 801253e:	2100      	movs	r1, #0
 8012540:	68ba      	ldr	r2, [r7, #8]
 8012542:	7893      	ldrb	r3, [r2, #2]
 8012544:	f361 0300 	bfi	r3, r1, #0, #1
 8012548:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 801254a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801254e:	4618      	mov	r0, r3
 8012550:	3728      	adds	r7, #40	; 0x28
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}

08012556 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 8012556:	b580      	push	{r7, lr}
 8012558:	b086      	sub	sp, #24
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
 801255e:	4608      	mov	r0, r1
 8012560:	4611      	mov	r1, r2
 8012562:	461a      	mov	r2, r3
 8012564:	4603      	mov	r3, r0
 8012566:	70fb      	strb	r3, [r7, #3]
 8012568:	460b      	mov	r3, r1
 801256a:	70bb      	strb	r3, [r7, #2]
 801256c:	4613      	mov	r3, r2
 801256e:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 8012570:	f7f0 f906 	bl	8002780 <HAL_GetTick>
 8012574:	4603      	mov	r3, r0
 8012576:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801257a:	3308      	adds	r3, #8
 801257c:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 801257e:	2300      	movs	r3, #0
 8012580:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 8012582:	2300      	movs	r3, #0
 8012584:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 8012586:	2300      	movs	r3, #0
 8012588:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 801258a:	f7f0 f8f9 	bl	8002780 <HAL_GetTick>
 801258e:	4602      	mov	r2, r0
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	1ad3      	subs	r3, r2, r3
 8012594:	0fdb      	lsrs	r3, r3, #31
 8012596:	b2db      	uxtb	r3, r3
 8012598:	2b00      	cmp	r3, #0
 801259a:	d04c      	beq.n	8012636 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 801259c:	78fa      	ldrb	r2, [r7, #3]
 801259e:	78bb      	ldrb	r3, [r7, #2]
 80125a0:	4313      	orrs	r3, r2
 80125a2:	b2db      	uxtb	r3, r3
 80125a4:	461a      	mov	r2, r3
 80125a6:	21f0      	movs	r1, #240	; 0xf0
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f7ef fbd9 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 80125ae:	23ff      	movs	r3, #255	; 0xff
 80125b0:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 80125b2:	f7f0 f8e5 	bl	8002780 <HAL_GetTick>
 80125b6:	4602      	mov	r2, r0
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	1ad3      	subs	r3, r2, r3
 80125bc:	0fdb      	lsrs	r3, r3, #31
 80125be:	b2db      	uxtb	r3, r3
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d010      	beq.n	80125e6 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 80125c4:	21c8      	movs	r1, #200	; 0xc8
 80125c6:	6878      	ldr	r0, [r7, #4]
 80125c8:	f7ef fc1c 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80125cc:	4603      	mov	r3, r0
 80125ce:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 80125d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	daec      	bge.n	80125b2 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 80125d8:	2280      	movs	r2, #128	; 0x80
 80125da:	21c8      	movs	r1, #200	; 0xc8
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f7ef fbbf 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 80125e2:	2300      	movs	r3, #0
 80125e4:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 80125e6:	21f8      	movs	r1, #248	; 0xf8
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f7ef fc0b 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80125ee:	4603      	mov	r3, r0
 80125f0:	f003 030f 	and.w	r3, r3, #15
 80125f4:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 80125f6:	7dfb      	ldrb	r3, [r7, #23]
 80125f8:	2b04      	cmp	r3, #4
 80125fa:	d002      	beq.n	8012602 <_ZN3USB11dispatchPktEhht+0xac>
 80125fc:	2b0e      	cmp	r3, #14
 80125fe:	d00c      	beq.n	801261a <_ZN3USB11dispatchPktEhht+0xc4>
 8012600:	e013      	b.n	801262a <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 8012602:	8abb      	ldrh	r3, [r7, #20]
 8012604:	3301      	adds	r3, #1
 8012606:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 8012608:	883b      	ldrh	r3, [r7, #0]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d00f      	beq.n	801262e <_ZN3USB11dispatchPktEhht+0xd8>
 801260e:	8aba      	ldrh	r2, [r7, #20]
 8012610:	883b      	ldrh	r3, [r7, #0]
 8012612:	429a      	cmp	r2, r3
 8012614:	d10b      	bne.n	801262e <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 8012616:	7dfb      	ldrb	r3, [r7, #23]
 8012618:	e00e      	b.n	8012638 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 801261a:	7dbb      	ldrb	r3, [r7, #22]
 801261c:	3301      	adds	r3, #1
 801261e:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 8012620:	7dbb      	ldrb	r3, [r7, #22]
 8012622:	2b03      	cmp	r3, #3
 8012624:	d105      	bne.n	8012632 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 8012626:	7dfb      	ldrb	r3, [r7, #23]
 8012628:	e006      	b.n	8012638 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 801262a:	7dfb      	ldrb	r3, [r7, #23]
 801262c:	e004      	b.n	8012638 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 801262e:	bf00      	nop
 8012630:	e7ab      	b.n	801258a <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 8012632:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8012634:	e7a9      	b.n	801258a <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 8012636:	7dfb      	ldrb	r3, [r7, #23]
}
 8012638:	4618      	mov	r0, r3
 801263a:	3718      	adds	r7, #24
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}

08012640 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b084      	sub	sp, #16
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 8012648:	2300      	movs	r3, #0
 801264a:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f000 fdfd 	bl	801324c <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f000 fe12 	bl	801327c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 8012658:	4603      	mov	r3, r0
 801265a:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 801265c:	7b3b      	ldrb	r3, [r7, #12]
 801265e:	2b03      	cmp	r3, #3
 8012660:	d82e      	bhi.n	80126c0 <_ZN3USB4TaskEv+0x80>
 8012662:	a201      	add	r2, pc, #4	; (adr r2, 8012668 <_ZN3USB4TaskEv+0x28>)
 8012664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012668:	08012685 	.word	0x08012685
 801266c:	08012679 	.word	0x08012679
 8012670:	080126a1 	.word	0x080126a1
 8012674:	0801269d 	.word	0x0801269d
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 8012678:	4bbf      	ldr	r3, [pc, #764]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 801267a:	2213      	movs	r2, #19
 801267c:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 801267e:	2300      	movs	r3, #0
 8012680:	73fb      	strb	r3, [r7, #15]
                        break;
 8012682:	e01d      	b.n	80126c0 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 8012684:	4bbc      	ldr	r3, [pc, #752]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801268c:	2b10      	cmp	r3, #16
 801268e:	d002      	beq.n	8012696 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 8012690:	4bb9      	ldr	r3, [pc, #740]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 8012692:	2211      	movs	r2, #17
 8012694:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 8012696:	2300      	movs	r3, #0
 8012698:	73fb      	strb	r3, [r7, #15]
                        break;
 801269a:	e011      	b.n	80126c0 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 801269c:	2301      	movs	r3, #1
 801269e:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 80126a0:	4bb5      	ldr	r3, [pc, #724]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80126a8:	2b10      	cmp	r3, #16
 80126aa:	d108      	bne.n	80126be <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 80126ac:	f7f0 f868 	bl	8002780 <HAL_GetTick>
 80126b0:	4603      	mov	r3, r0
 80126b2:	33c8      	adds	r3, #200	; 0xc8
 80126b4:	4ab1      	ldr	r2, [pc, #708]	; (801297c <_ZN3USB4TaskEv+0x33c>)
 80126b6:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 80126b8:	4baf      	ldr	r3, [pc, #700]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 80126ba:	2220      	movs	r2, #32
 80126bc:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 80126be:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80126c0:	2300      	movs	r3, #0
 80126c2:	73bb      	strb	r3, [r7, #14]
 80126c4:	7bbb      	ldrb	r3, [r7, #14]
 80126c6:	2b0f      	cmp	r3, #15
 80126c8:	d81b      	bhi.n	8012702 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 80126ca:	7bba      	ldrb	r2, [r7, #14]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	321e      	adds	r2, #30
 80126d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d010      	beq.n	80126fa <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 80126d8:	7bba      	ldrb	r2, [r7, #14]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	321e      	adds	r2, #30
 80126de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80126e2:	7bba      	ldrb	r2, [r7, #14]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	321e      	adds	r2, #30
 80126e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	330c      	adds	r3, #12
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	4608      	mov	r0, r1
 80126f4:	4798      	blx	r3
 80126f6:	4603      	mov	r3, r0
 80126f8:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80126fa:	7bbb      	ldrb	r3, [r7, #14]
 80126fc:	3301      	adds	r3, #1
 80126fe:	73bb      	strb	r3, [r7, #14]
 8012700:	e7e0      	b.n	80126c4 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 8012702:	4b9d      	ldr	r3, [pc, #628]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 8012704:	781b      	ldrb	r3, [r3, #0]
 8012706:	2ba0      	cmp	r3, #160	; 0xa0
 8012708:	f000 8123 	beq.w	8012952 <_ZN3USB4TaskEv+0x312>
 801270c:	2ba0      	cmp	r3, #160	; 0xa0
 801270e:	f300 812f 	bgt.w	8012970 <_ZN3USB4TaskEv+0x330>
 8012712:	2b90      	cmp	r3, #144	; 0x90
 8012714:	f000 811f 	beq.w	8012956 <_ZN3USB4TaskEv+0x316>
 8012718:	2b90      	cmp	r3, #144	; 0x90
 801271a:	f300 8129 	bgt.w	8012970 <_ZN3USB4TaskEv+0x330>
 801271e:	2b80      	cmp	r3, #128	; 0x80
 8012720:	f000 80fe 	beq.w	8012920 <_ZN3USB4TaskEv+0x2e0>
 8012724:	2b80      	cmp	r3, #128	; 0x80
 8012726:	f300 8123 	bgt.w	8012970 <_ZN3USB4TaskEv+0x330>
 801272a:	2b51      	cmp	r3, #81	; 0x51
 801272c:	f000 80ea 	beq.w	8012904 <_ZN3USB4TaskEv+0x2c4>
 8012730:	2b51      	cmp	r3, #81	; 0x51
 8012732:	f300 811d 	bgt.w	8012970 <_ZN3USB4TaskEv+0x330>
 8012736:	2b40      	cmp	r3, #64	; 0x40
 8012738:	dc6a      	bgt.n	8012810 <_ZN3USB4TaskEv+0x1d0>
 801273a:	2b11      	cmp	r3, #17
 801273c:	f2c0 8118 	blt.w	8012970 <_ZN3USB4TaskEv+0x330>
 8012740:	3b11      	subs	r3, #17
 8012742:	2b2f      	cmp	r3, #47	; 0x2f
 8012744:	f200 8114 	bhi.w	8012970 <_ZN3USB4TaskEv+0x330>
 8012748:	a201      	add	r2, pc, #4	; (adr r2, 8012750 <_ZN3USB4TaskEv+0x110>)
 801274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801274e:	bf00      	nop
 8012750:	08012817 	.word	0x08012817
 8012754:	0801295b 	.word	0x0801295b
 8012758:	0801295b 	.word	0x0801295b
 801275c:	08012971 	.word	0x08012971
 8012760:	08012971 	.word	0x08012971
 8012764:	08012971 	.word	0x08012971
 8012768:	08012971 	.word	0x08012971
 801276c:	08012971 	.word	0x08012971
 8012770:	08012971 	.word	0x08012971
 8012774:	08012971 	.word	0x08012971
 8012778:	08012971 	.word	0x08012971
 801277c:	08012971 	.word	0x08012971
 8012780:	08012971 	.word	0x08012971
 8012784:	08012971 	.word	0x08012971
 8012788:	08012971 	.word	0x08012971
 801278c:	08012867 	.word	0x08012867
 8012790:	08012971 	.word	0x08012971
 8012794:	08012971 	.word	0x08012971
 8012798:	08012971 	.word	0x08012971
 801279c:	08012971 	.word	0x08012971
 80127a0:	08012971 	.word	0x08012971
 80127a4:	08012971 	.word	0x08012971
 80127a8:	08012971 	.word	0x08012971
 80127ac:	08012971 	.word	0x08012971
 80127b0:	08012971 	.word	0x08012971
 80127b4:	08012971 	.word	0x08012971
 80127b8:	08012971 	.word	0x08012971
 80127bc:	08012971 	.word	0x08012971
 80127c0:	08012971 	.word	0x08012971
 80127c4:	08012971 	.word	0x08012971
 80127c8:	08012971 	.word	0x08012971
 80127cc:	08012883 	.word	0x08012883
 80127d0:	08012971 	.word	0x08012971
 80127d4:	08012971 	.word	0x08012971
 80127d8:	08012971 	.word	0x08012971
 80127dc:	08012971 	.word	0x08012971
 80127e0:	08012971 	.word	0x08012971
 80127e4:	08012971 	.word	0x08012971
 80127e8:	08012971 	.word	0x08012971
 80127ec:	08012971 	.word	0x08012971
 80127f0:	08012971 	.word	0x08012971
 80127f4:	08012971 	.word	0x08012971
 80127f8:	08012971 	.word	0x08012971
 80127fc:	08012971 	.word	0x08012971
 8012800:	08012971 	.word	0x08012971
 8012804:	08012971 	.word	0x08012971
 8012808:	08012971 	.word	0x08012971
 801280c:	08012895 	.word	0x08012895
 8012810:	2b50      	cmp	r3, #80	; 0x50
 8012812:	d05f      	beq.n	80128d4 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 8012814:	e0ac      	b.n	8012970 <_ZN3USB4TaskEv+0x330>
                        init();
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f7ff fa8e 	bl	8011d38 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801281c:	2300      	movs	r3, #0
 801281e:	737b      	strb	r3, [r7, #13]
 8012820:	7b7b      	ldrb	r3, [r7, #13]
 8012822:	2b0f      	cmp	r3, #15
 8012824:	d81b      	bhi.n	801285e <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 8012826:	7b7a      	ldrb	r2, [r7, #13]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	321e      	adds	r2, #30
 801282c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d010      	beq.n	8012856 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 8012834:	7b7a      	ldrb	r2, [r7, #13]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	321e      	adds	r2, #30
 801283a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801283e:	7b7a      	ldrb	r2, [r7, #13]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	321e      	adds	r2, #30
 8012844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	3308      	adds	r3, #8
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	4608      	mov	r0, r1
 8012850:	4798      	blx	r3
 8012852:	4603      	mov	r3, r0
 8012854:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8012856:	7b7b      	ldrb	r3, [r7, #13]
 8012858:	3301      	adds	r3, #1
 801285a:	737b      	strb	r3, [r7, #13]
 801285c:	e7e0      	b.n	8012820 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 801285e:	4b46      	ldr	r3, [pc, #280]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 8012860:	2212      	movs	r2, #18
 8012862:	701a      	strb	r2, [r3, #0]
                        break;
 8012864:	e084      	b.n	8012970 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 8012866:	f7ef ff8b 	bl	8002780 <HAL_GetTick>
 801286a:	4602      	mov	r2, r0
 801286c:	4b43      	ldr	r3, [pc, #268]	; (801297c <_ZN3USB4TaskEv+0x33c>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	1ad3      	subs	r3, r2, r3
 8012872:	43db      	mvns	r3, r3
 8012874:	0fdb      	lsrs	r3, r3, #31
 8012876:	b2db      	uxtb	r3, r3
 8012878:	2b00      	cmp	r3, #0
 801287a:	d070      	beq.n	801295e <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 801287c:	4b3e      	ldr	r3, [pc, #248]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 801287e:	2230      	movs	r2, #48	; 0x30
 8012880:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012882:	2201      	movs	r2, #1
 8012884:	21e8      	movs	r1, #232	; 0xe8
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f7ef fa6a 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 801288c:	4b3a      	ldr	r3, [pc, #232]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 801288e:	2240      	movs	r2, #64	; 0x40
 8012890:	701a      	strb	r2, [r3, #0]
                        break;
 8012892:	e06d      	b.n	8012970 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 8012894:	21e8      	movs	r1, #232	; 0xe8
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f7ef fab4 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801289c:	4603      	mov	r3, r0
 801289e:	f003 0301 	and.w	r3, r3, #1
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	bf0c      	ite	eq
 80128a6:	2301      	moveq	r3, #1
 80128a8:	2300      	movne	r3, #0
 80128aa:	b2db      	uxtb	r3, r3
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d058      	beq.n	8012962 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 80128b0:	21d8      	movs	r1, #216	; 0xd8
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f7ef faa6 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80128b8:	4603      	mov	r3, r0
 80128ba:	f043 0308 	orr.w	r3, r3, #8
 80128be:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 80128c0:	7b3b      	ldrb	r3, [r7, #12]
 80128c2:	461a      	mov	r2, r3
 80128c4:	21d8      	movs	r1, #216	; 0xd8
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f7ef fa4a 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 80128cc:	4b2a      	ldr	r3, [pc, #168]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 80128ce:	2250      	movs	r2, #80	; 0x50
 80128d0:	701a      	strb	r2, [r3, #0]
                        break;
 80128d2:	e046      	b.n	8012962 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 80128d4:	21c8      	movs	r1, #200	; 0xc8
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f7ef fa94 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80128dc:	4603      	mov	r3, r0
 80128de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	bf14      	ite	ne
 80128e6:	2301      	movne	r3, #1
 80128e8:	2300      	moveq	r3, #0
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d03a      	beq.n	8012966 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 80128f0:	4b21      	ldr	r3, [pc, #132]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 80128f2:	2251      	movs	r2, #81	; 0x51
 80128f4:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 80128f6:	f7ef ff43 	bl	8002780 <HAL_GetTick>
 80128fa:	4603      	mov	r3, r0
 80128fc:	3314      	adds	r3, #20
 80128fe:	4a1f      	ldr	r2, [pc, #124]	; (801297c <_ZN3USB4TaskEv+0x33c>)
 8012900:	6013      	str	r3, [r2, #0]
                        break;
 8012902:	e030      	b.n	8012966 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 8012904:	f7ef ff3c 	bl	8002780 <HAL_GetTick>
 8012908:	4602      	mov	r2, r0
 801290a:	4b1c      	ldr	r3, [pc, #112]	; (801297c <_ZN3USB4TaskEv+0x33c>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	1ad3      	subs	r3, r2, r3
 8012910:	43db      	mvns	r3, r3
 8012912:	0fdb      	lsrs	r3, r3, #31
 8012914:	b2db      	uxtb	r3, r3
 8012916:	2b00      	cmp	r3, #0
 8012918:	d027      	beq.n	801296a <_ZN3USB4TaskEv+0x32a>
 801291a:	4b17      	ldr	r3, [pc, #92]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 801291c:	2280      	movs	r2, #128	; 0x80
 801291e:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 8012920:	7bfb      	ldrb	r3, [r7, #15]
 8012922:	2200      	movs	r2, #0
 8012924:	2100      	movs	r1, #0
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f000 f920 	bl	8012b6c <_ZN3USB11ConfiguringEhhb>
 801292c:	4603      	mov	r3, r0
 801292e:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 8012930:	7afb      	ldrb	r3, [r7, #11]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d009      	beq.n	801294a <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 8012936:	7afb      	ldrb	r3, [r7, #11]
 8012938:	2bd2      	cmp	r3, #210	; 0xd2
 801293a:	d018      	beq.n	801296e <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 801293c:	4a10      	ldr	r2, [pc, #64]	; (8012980 <_ZN3USB4TaskEv+0x340>)
 801293e:	7afb      	ldrb	r3, [r7, #11]
 8012940:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 8012942:	4b0d      	ldr	r3, [pc, #52]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 8012944:	22a0      	movs	r2, #160	; 0xa0
 8012946:	701a      	strb	r2, [r3, #0]
                        break;
 8012948:	e011      	b.n	801296e <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 801294a:	4b0b      	ldr	r3, [pc, #44]	; (8012978 <_ZN3USB4TaskEv+0x338>)
 801294c:	2290      	movs	r2, #144	; 0x90
 801294e:	701a      	strb	r2, [r3, #0]
                        break;
 8012950:	e00d      	b.n	801296e <_ZN3USB4TaskEv+0x32e>
                        break;
 8012952:	bf00      	nop
 8012954:	e00c      	b.n	8012970 <_ZN3USB4TaskEv+0x330>
                        break;
 8012956:	bf00      	nop
 8012958:	e00a      	b.n	8012970 <_ZN3USB4TaskEv+0x330>
                        break;
 801295a:	bf00      	nop
 801295c:	e008      	b.n	8012970 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 801295e:	bf00      	nop
 8012960:	e006      	b.n	8012970 <_ZN3USB4TaskEv+0x330>
                        break;
 8012962:	bf00      	nop
 8012964:	e004      	b.n	8012970 <_ZN3USB4TaskEv+0x330>
                        break;
 8012966:	bf00      	nop
 8012968:	e002      	b.n	8012970 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 801296a:	bf00      	nop
 801296c:	e000      	b.n	8012970 <_ZN3USB4TaskEv+0x330>
                        break;
 801296e:	bf00      	nop
}
 8012970:	bf00      	nop
 8012972:	3710      	adds	r7, #16
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}
 8012978:	20005405 	.word	0x20005405
 801297c:	20005408 	.word	0x20005408
 8012980:	20005404 	.word	0x20005404

08012984 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 8012984:	b580      	push	{r7, lr}
 8012986:	b086      	sub	sp, #24
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	4608      	mov	r0, r1
 801298e:	4611      	mov	r1, r2
 8012990:	461a      	mov	r2, r3
 8012992:	4603      	mov	r3, r0
 8012994:	70fb      	strb	r3, [r7, #3]
 8012996:	460b      	mov	r3, r1
 8012998:	70bb      	strb	r3, [r7, #2]
 801299a:	4613      	mov	r3, r2
 801299c:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 801299e:	2300      	movs	r3, #0
 80129a0:	617b      	str	r3, [r7, #20]
 80129a2:	2300      	movs	r3, #0
 80129a4:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2100      	movs	r1, #0
 80129aa:	4618      	mov	r0, r3
 80129ac:	f000 fbc0 	bl	8013130 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 80129b0:	6178      	str	r0, [r7, #20]

        if(!p0)
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d101      	bne.n	80129bc <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80129b8:	23d6      	movs	r3, #214	; 0xd6
 80129ba:	e03a      	b.n	8012a32 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d101      	bne.n	80129c8 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 80129c4:	23d7      	movs	r3, #215	; 0xd7
 80129c6:	e034      	b.n	8012a32 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	787a      	ldrb	r2, [r7, #1]
 80129cc:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	78bb      	ldrb	r3, [r7, #2]
 80129d2:	78f9      	ldrb	r1, [r7, #3]
 80129d4:	2200      	movs	r2, #0
 80129d6:	f000 fc5f 	bl	8013298 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 80129da:	4603      	mov	r3, r0
 80129dc:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 80129de:	7bfb      	ldrb	r3, [r7, #15]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d101      	bne.n	80129e8 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 80129e4:	23d4      	movs	r3, #212	; 0xd4
 80129e6:	e024      	b.n	8012a32 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	7bfa      	ldrb	r2, [r7, #15]
 80129ec:	4611      	mov	r1, r2
 80129ee:	4618      	mov	r0, r3
 80129f0:	f000 fb9e 	bl	8013130 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 80129f4:	6138      	str	r0, [r7, #16]

        if(!p)
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d101      	bne.n	8012a00 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80129fc:	23d6      	movs	r3, #214	; 0xd6
 80129fe:	e018      	b.n	8012a32 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	787a      	ldrb	r2, [r7, #1]
 8012a04:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 8012a06:	7bfb      	ldrb	r3, [r7, #15]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	2100      	movs	r1, #0
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f000 fae3 	bl	8012fd8 <_ZN3USB7setAddrEhhh>
 8012a12:	4603      	mov	r3, r0
 8012a14:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 8012a16:	7bbb      	ldrb	r3, [r7, #14]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d009      	beq.n	8012a30 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	7bfa      	ldrb	r2, [r7, #15]
 8012a20:	4611      	mov	r1, r2
 8012a22:	4618      	mov	r0, r3
 8012a24:	f000 fcd0 	bl	80133c8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	73fb      	strb	r3, [r7, #15]
                return rcode;
 8012a2c:	7bbb      	ldrb	r3, [r7, #14]
 8012a2e:	e000      	b.n	8012a32 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 8012a30:	2300      	movs	r3, #0
};
 8012a32:	4618      	mov	r0, r3
 8012a34:	3718      	adds	r7, #24
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}

08012a3a <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 8012a3a:	b590      	push	{r4, r7, lr}
 8012a3c:	b085      	sub	sp, #20
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]
 8012a42:	4608      	mov	r0, r1
 8012a44:	4611      	mov	r1, r2
 8012a46:	461a      	mov	r2, r3
 8012a48:	4603      	mov	r3, r0
 8012a4a:	70fb      	strb	r3, [r7, #3]
 8012a4c:	460b      	mov	r3, r1
 8012a4e:	70bb      	strb	r3, [r7, #2]
 8012a50:	4613      	mov	r3, r2
 8012a52:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 8012a54:	2300      	movs	r3, #0
 8012a56:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 8012a58:	78fa      	ldrb	r2, [r7, #3]
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	321e      	adds	r2, #30
 8012a5e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012a62:	78fa      	ldrb	r2, [r7, #3]
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	321e      	adds	r2, #30
 8012a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	3304      	adds	r3, #4
 8012a70:	681c      	ldr	r4, [r3, #0]
 8012a72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012a76:	787a      	ldrb	r2, [r7, #1]
 8012a78:	78b9      	ldrb	r1, [r7, #2]
 8012a7a:	47a0      	blx	r4
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 8012a80:	7bbb      	ldrb	r3, [r7, #14]
 8012a82:	2be0      	cmp	r3, #224	; 0xe0
 8012a84:	d11c      	bne.n	8012ac0 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 8012a86:	78bb      	ldrb	r3, [r7, #2]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d108      	bne.n	8012a9e <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012a8c:	2201      	movs	r2, #1
 8012a8e:	21e8      	movs	r1, #232	; 0xe8
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7ef f965 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8012a96:	2066      	movs	r0, #102	; 0x66
 8012a98:	f7ef fe7e 	bl	8002798 <HAL_Delay>
 8012a9c:	e022      	b.n	8012ae4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8012a9e:	78ba      	ldrb	r2, [r7, #2]
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	321e      	adds	r2, #30
 8012aa4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012aa8:	78ba      	ldrb	r2, [r7, #2]
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	321e      	adds	r2, #30
 8012aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	3314      	adds	r3, #20
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	787a      	ldrb	r2, [r7, #1]
 8012aba:	4611      	mov	r1, r2
 8012abc:	4798      	blx	r3
 8012abe:	e011      	b.n	8012ae4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8012ac0:	7bbb      	ldrb	r3, [r7, #14]
 8012ac2:	2b0d      	cmp	r3, #13
 8012ac4:	d109      	bne.n	8012ada <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8012ac6:	7bfb      	ldrb	r3, [r7, #15]
 8012ac8:	2b02      	cmp	r3, #2
 8012aca:	d806      	bhi.n	8012ada <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 8012acc:	2064      	movs	r0, #100	; 0x64
 8012ace:	f7ef fe63 	bl	8002798 <HAL_Delay>
                retries++;
 8012ad2:	7bfb      	ldrb	r3, [r7, #15]
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	73fb      	strb	r3, [r7, #15]
                goto again;
 8012ad8:	e7be      	b.n	8012a58 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 8012ada:	7bbb      	ldrb	r3, [r7, #14]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d001      	beq.n	8012ae4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 8012ae0:	7bbb      	ldrb	r3, [r7, #14]
 8012ae2:	e03f      	b.n	8012b64 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 8012ae4:	78fa      	ldrb	r2, [r7, #3]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	321e      	adds	r2, #30
 8012aea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012aee:	78fa      	ldrb	r2, [r7, #3]
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	321e      	adds	r2, #30
 8012af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	681c      	ldr	r4, [r3, #0]
 8012afc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012b00:	787a      	ldrb	r2, [r7, #1]
 8012b02:	78b9      	ldrb	r1, [r7, #2]
 8012b04:	47a0      	blx	r4
 8012b06:	4603      	mov	r3, r0
 8012b08:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8012b0a:	7bbb      	ldrb	r3, [r7, #14]
 8012b0c:	2b0d      	cmp	r3, #13
 8012b0e:	d109      	bne.n	8012b24 <_ZN3USB13AttemptConfigEhhhb+0xea>
 8012b10:	7bfb      	ldrb	r3, [r7, #15]
 8012b12:	2b02      	cmp	r3, #2
 8012b14:	d806      	bhi.n	8012b24 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 8012b16:	2064      	movs	r0, #100	; 0x64
 8012b18:	f7ef fe3e 	bl	8002798 <HAL_Delay>
                retries++;
 8012b1c:	7bfb      	ldrb	r3, [r7, #15]
 8012b1e:	3301      	adds	r3, #1
 8012b20:	73fb      	strb	r3, [r7, #15]
                goto again;
 8012b22:	e799      	b.n	8012a58 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 8012b24:	7bbb      	ldrb	r3, [r7, #14]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d01b      	beq.n	8012b62 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 8012b2a:	78bb      	ldrb	r3, [r7, #2]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d108      	bne.n	8012b42 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012b30:	2201      	movs	r2, #1
 8012b32:	21e8      	movs	r1, #232	; 0xe8
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f7ef f913 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8012b3a:	2066      	movs	r0, #102	; 0x66
 8012b3c:	f7ef fe2c 	bl	8002798 <HAL_Delay>
 8012b40:	e00f      	b.n	8012b62 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8012b42:	78ba      	ldrb	r2, [r7, #2]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	321e      	adds	r2, #30
 8012b48:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012b4c:	78ba      	ldrb	r2, [r7, #2]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	321e      	adds	r2, #30
 8012b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	3314      	adds	r3, #20
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	787a      	ldrb	r2, [r7, #1]
 8012b5e:	4611      	mov	r1, r2
 8012b60:	4798      	blx	r3
                }
        }
        return rcode;
 8012b62:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	3714      	adds	r7, #20
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd90      	pop	{r4, r7, pc}

08012b6c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b090      	sub	sp, #64	; 0x40
 8012b70:	af02      	add	r7, sp, #8
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	4608      	mov	r0, r1
 8012b76:	4611      	mov	r1, r2
 8012b78:	461a      	mov	r2, r3
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	70fb      	strb	r3, [r7, #3]
 8012b7e:	460b      	mov	r3, r1
 8012b80:	70bb      	strb	r3, [r7, #2]
 8012b82:	4613      	mov	r3, r2
 8012b84:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 8012b86:	2300      	movs	r3, #0
 8012b88:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 8012b8c:	f107 030c 	add.w	r3, r7, #12
 8012b90:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 8012b92:	2300      	movs	r3, #0
 8012b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8012b96:	2300      	movs	r3, #0
 8012b98:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 8012b9e:	2308      	movs	r3, #8
 8012ba0:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8012ba2:	7abb      	ldrb	r3, [r7, #10]
 8012ba4:	f36f 0300 	bfc	r3, #0, #1
 8012ba8:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 8012baa:	7abb      	ldrb	r3, [r7, #10]
 8012bac:	f36f 0341 	bfc	r3, #1, #1
 8012bb0:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8012bb2:	7abb      	ldrb	r3, [r7, #10]
 8012bb4:	220f      	movs	r2, #15
 8012bb6:	f362 0387 	bfi	r3, r2, #2, #6
 8012bba:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 8012bbc:	6878      	ldr	r0, [r7, #4]
 8012bbe:	f7fa fd13 	bl	800d5e8 <_ZN3USB14GetAddressPoolEv>
 8012bc2:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8012bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	2100      	movs	r1, #0
 8012bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bce:	4798      	blx	r3
 8012bd0:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 8012bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d101      	bne.n	8012bdc <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012bd8:	23d6      	movs	r3, #214	; 0xd6
 8012bda:	e15c      	b.n	8012e96 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 8012bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 8012be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be4:	f107 0208 	add.w	r2, r7, #8
 8012be8:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 8012bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bec:	787a      	ldrb	r2, [r7, #1]
 8012bee:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 8012bf0:	f107 030c 	add.w	r3, r7, #12
 8012bf4:	9300      	str	r3, [sp, #0]
 8012bf6:	2312      	movs	r3, #18
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	2100      	movs	r1, #0
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f000 f94e 	bl	8012e9e <_ZN3USB11getDevDescrEhhtPh>
 8012c02:	4603      	mov	r3, r0
 8012c04:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 8012c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c0c:	601a      	str	r2, [r3, #0]

        if(rcode) {
 8012c0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d002      	beq.n	8012c1c <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8012c16:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012c1a:	e13c      	b.n	8012e96 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 8012c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c1e:	7a1a      	ldrb	r2, [r3, #8]
 8012c20:	7a5b      	ldrb	r3, [r3, #9]
 8012c22:	021b      	lsls	r3, r3, #8
 8012c24:	4313      	orrs	r3, r2
 8012c26:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8012c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c2a:	7a9a      	ldrb	r2, [r3, #10]
 8012c2c:	7adb      	ldrb	r3, [r3, #11]
 8012c2e:	021b      	lsls	r3, r3, #8
 8012c30:	4313      	orrs	r3, r2
 8012c32:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8012c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c36:	791b      	ldrb	r3, [r3, #4]
 8012c38:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 8012c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c3c:	795b      	ldrb	r3, [r3, #5]
 8012c3e:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012c40:	2300      	movs	r3, #0
 8012c42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012c46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c4a:	2b0f      	cmp	r3, #15
 8012c4c:	f200 8081 	bhi.w	8012d52 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8012c50:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	321e      	adds	r2, #30
 8012c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d06e      	beq.n	8012d3e <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012c60:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	321e      	adds	r2, #30
 8012c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012c6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	321e      	adds	r2, #30
 8012c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	3310      	adds	r3, #16
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	4608      	mov	r0, r1
 8012c80:	4798      	blx	r3
 8012c82:	4603      	mov	r3, r0
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	bf14      	ite	ne
 8012c88:	2301      	movne	r3, #1
 8012c8a:	2300      	moveq	r3, #0
 8012c8c:	b2db      	uxtb	r3, r3
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d157      	bne.n	8012d42 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 8012c92:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	321e      	adds	r2, #30
 8012c9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012c9e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	321e      	adds	r2, #30
 8012ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	3320      	adds	r3, #32
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	7fba      	ldrb	r2, [r7, #30]
 8012cb2:	4611      	mov	r1, r2
 8012cb4:	4798      	blx	r3
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d02b      	beq.n	8012d14 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8012cbc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	321e      	adds	r2, #30
 8012cc4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012cc8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	321e      	adds	r2, #30
 8012cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	3318      	adds	r3, #24
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	8c3a      	ldrh	r2, [r7, #32]
 8012cdc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8012cde:	4798      	blx	r3
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d114      	bne.n	8012d10 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8012ce6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	321e      	adds	r2, #30
 8012cee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012cf2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	321e      	adds	r2, #30
 8012cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	331c      	adds	r3, #28
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	7ffa      	ldrb	r2, [r7, #31]
 8012d06:	4611      	mov	r1, r2
 8012d08:	4798      	blx	r3
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d001      	beq.n	8012d14 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8012d10:	2301      	movs	r3, #1
 8012d12:	e000      	b.n	8012d16 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8012d14:	2300      	movs	r3, #0
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d014      	beq.n	8012d44 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8012d1a:	78b8      	ldrb	r0, [r7, #2]
 8012d1c:	78fa      	ldrb	r2, [r7, #3]
 8012d1e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8012d22:	787b      	ldrb	r3, [r7, #1]
 8012d24:	9300      	str	r3, [sp, #0]
 8012d26:	4603      	mov	r3, r0
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7ff fe86 	bl	8012a3a <_ZN3USB13AttemptConfigEhhhb>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8012d34:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012d38:	2bd1      	cmp	r3, #209	; 0xd1
 8012d3a:	d109      	bne.n	8012d50 <_ZN3USB11ConfiguringEhhb+0x1e4>
 8012d3c:	e002      	b.n	8012d44 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8012d3e:	bf00      	nop
 8012d40:	e000      	b.n	8012d44 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012d42:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012d44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d48:	3301      	adds	r3, #1
 8012d4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012d4e:	e77a      	b.n	8012c46 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8012d50:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8012d52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d56:	2b0f      	cmp	r3, #15
 8012d58:	d802      	bhi.n	8012d60 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8012d5a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012d5e:	e09a      	b.n	8012e96 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012d60:	2300      	movs	r3, #0
 8012d62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012d66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d6a:	2b0f      	cmp	r3, #15
 8012d6c:	f200 8088 	bhi.w	8012e80 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8012d70:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	321e      	adds	r2, #30
 8012d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d074      	beq.n	8012e6a <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012d80:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	321e      	adds	r2, #30
 8012d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d8c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	321e      	adds	r2, #30
 8012d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	3310      	adds	r3, #16
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	4608      	mov	r0, r1
 8012da0:	4798      	blx	r3
 8012da2:	4603      	mov	r3, r0
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	bf14      	ite	ne
 8012da8:	2301      	movne	r3, #1
 8012daa:	2300      	moveq	r3, #0
 8012dac:	b2db      	uxtb	r3, r3
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d15d      	bne.n	8012e6e <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8012db2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	321e      	adds	r2, #30
 8012dba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012dbe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	321e      	adds	r2, #30
 8012dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	3320      	adds	r3, #32
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	7fba      	ldrb	r2, [r7, #30]
 8012dd2:	4611      	mov	r1, r2
 8012dd4:	4798      	blx	r3
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d02b      	beq.n	8012e34 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8012ddc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	321e      	adds	r2, #30
 8012de4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012de8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	321e      	adds	r2, #30
 8012df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	3318      	adds	r3, #24
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	8c3a      	ldrh	r2, [r7, #32]
 8012dfc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8012dfe:	4798      	blx	r3
 8012e00:	4603      	mov	r3, r0
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d114      	bne.n	8012e30 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8012e06:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	321e      	adds	r2, #30
 8012e0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012e12:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	321e      	adds	r2, #30
 8012e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	331c      	adds	r3, #28
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	7ffa      	ldrb	r2, [r7, #31]
 8012e26:	4611      	mov	r1, r2
 8012e28:	4798      	blx	r3
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d001      	beq.n	8012e34 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8012e30:	2301      	movs	r3, #1
 8012e32:	e000      	b.n	8012e36 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8012e34:	2300      	movs	r3, #0
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d11b      	bne.n	8012e72 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8012e3a:	78b8      	ldrb	r0, [r7, #2]
 8012e3c:	78fa      	ldrb	r2, [r7, #3]
 8012e3e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8012e42:	787b      	ldrb	r3, [r7, #1]
 8012e44:	9300      	str	r3, [sp, #0]
 8012e46:	4603      	mov	r3, r0
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f7ff fdf6 	bl	8012a3a <_ZN3USB13AttemptConfigEhhhb>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8012e54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012e58:	2bd1      	cmp	r3, #209	; 0xd1
 8012e5a:	d00b      	beq.n	8012e74 <_ZN3USB11ConfiguringEhhb+0x308>
 8012e5c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012e60:	2bd9      	cmp	r3, #217	; 0xd9
 8012e62:	d007      	beq.n	8012e74 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8012e64:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012e68:	e015      	b.n	8012e96 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 8012e6a:	bf00      	nop
 8012e6c:	e002      	b.n	8012e74 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012e6e:	bf00      	nop
 8012e70:	e000      	b.n	8012e74 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8012e72:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012e74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e78:	3301      	adds	r3, #1
 8012e7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e7e:	e772      	b.n	8012d66 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8012e80:	787b      	ldrb	r3, [r7, #1]
 8012e82:	78ba      	ldrb	r2, [r7, #2]
 8012e84:	78f9      	ldrb	r1, [r7, #3]
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f7ff fd7c 	bl	8012984 <_ZN3USB17DefaultAddressingEhhb>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8012e92:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3738      	adds	r7, #56	; 0x38
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}

08012e9e <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 8012e9e:	b580      	push	{r7, lr}
 8012ea0:	b08a      	sub	sp, #40	; 0x28
 8012ea2:	af08      	add	r7, sp, #32
 8012ea4:	6078      	str	r0, [r7, #4]
 8012ea6:	4608      	mov	r0, r1
 8012ea8:	4611      	mov	r1, r2
 8012eaa:	461a      	mov	r2, r3
 8012eac:	4603      	mov	r3, r0
 8012eae:	70fb      	strb	r3, [r7, #3]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	70bb      	strb	r3, [r7, #2]
 8012eb4:	4613      	mov	r3, r2
 8012eb6:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8012eb8:	78ba      	ldrb	r2, [r7, #2]
 8012eba:	78f9      	ldrb	r1, [r7, #3]
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	9307      	str	r3, [sp, #28]
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	9306      	str	r3, [sp, #24]
 8012ec4:	883b      	ldrh	r3, [r7, #0]
 8012ec6:	9305      	str	r3, [sp, #20]
 8012ec8:	883b      	ldrh	r3, [r7, #0]
 8012eca:	9304      	str	r3, [sp, #16]
 8012ecc:	2300      	movs	r3, #0
 8012ece:	9303      	str	r3, [sp, #12]
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	9302      	str	r3, [sp, #8]
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	9301      	str	r3, [sp, #4]
 8012ed8:	2306      	movs	r3, #6
 8012eda:	9300      	str	r3, [sp, #0]
 8012edc:	2380      	movs	r3, #128	; 0x80
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f7fe fffd 	bl	8011ede <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8012ee4:	4603      	mov	r3, r0
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3708      	adds	r7, #8
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}

08012eee <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 8012eee:	b580      	push	{r7, lr}
 8012ef0:	b08a      	sub	sp, #40	; 0x28
 8012ef2:	af08      	add	r7, sp, #32
 8012ef4:	6078      	str	r0, [r7, #4]
 8012ef6:	4608      	mov	r0, r1
 8012ef8:	4611      	mov	r1, r2
 8012efa:	461a      	mov	r2, r3
 8012efc:	4603      	mov	r3, r0
 8012efe:	70fb      	strb	r3, [r7, #3]
 8012f00:	460b      	mov	r3, r1
 8012f02:	70bb      	strb	r3, [r7, #2]
 8012f04:	4613      	mov	r3, r2
 8012f06:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8012f08:	78ba      	ldrb	r2, [r7, #2]
 8012f0a:	78f9      	ldrb	r1, [r7, #3]
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	9307      	str	r3, [sp, #28]
 8012f10:	697b      	ldr	r3, [r7, #20]
 8012f12:	9306      	str	r3, [sp, #24]
 8012f14:	883b      	ldrh	r3, [r7, #0]
 8012f16:	9305      	str	r3, [sp, #20]
 8012f18:	883b      	ldrh	r3, [r7, #0]
 8012f1a:	9304      	str	r3, [sp, #16]
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	9303      	str	r3, [sp, #12]
 8012f20:	2302      	movs	r3, #2
 8012f22:	9302      	str	r3, [sp, #8]
 8012f24:	7c3b      	ldrb	r3, [r7, #16]
 8012f26:	9301      	str	r3, [sp, #4]
 8012f28:	2306      	movs	r3, #6
 8012f2a:	9300      	str	r3, [sp, #0]
 8012f2c:	2380      	movs	r3, #128	; 0x80
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7fe ffd5 	bl	8011ede <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8012f34:	4603      	mov	r3, r0
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3708      	adds	r7, #8
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}

08012f3e <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 8012f3e:	b580      	push	{r7, lr}
 8012f40:	b09e      	sub	sp, #120	; 0x78
 8012f42:	af08      	add	r7, sp, #32
 8012f44:	6078      	str	r0, [r7, #4]
 8012f46:	4608      	mov	r0, r1
 8012f48:	4611      	mov	r1, r2
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	70fb      	strb	r3, [r7, #3]
 8012f50:	460b      	mov	r3, r1
 8012f52:	70bb      	strb	r3, [r7, #2]
 8012f54:	4613      	mov	r3, r2
 8012f56:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8012f58:	2340      	movs	r3, #64	; 0x40
 8012f5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 8012f5e:	f107 030c 	add.w	r3, r7, #12
 8012f62:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8012f64:	78ba      	ldrb	r2, [r7, #2]
 8012f66:	78f9      	ldrb	r1, [r7, #3]
 8012f68:	f107 030c 	add.w	r3, r7, #12
 8012f6c:	9301      	str	r3, [sp, #4]
 8012f6e:	787b      	ldrb	r3, [r7, #1]
 8012f70:	9300      	str	r3, [sp, #0]
 8012f72:	2309      	movs	r3, #9
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f7ff ffba 	bl	8012eee <_ZN3USB12getConfDescrEhhthPh>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8012f80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d002      	beq.n	8012f8e <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8012f88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012f8c:	e020      	b.n	8012fd0 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 8012f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f90:	789a      	ldrb	r2, [r3, #2]
 8012f92:	78db      	ldrb	r3, [r3, #3]
 8012f94:	021b      	lsls	r3, r3, #8
 8012f96:	4313      	orrs	r3, r2
 8012f98:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 8012f9c:	78ba      	ldrb	r2, [r7, #2]
 8012f9e:	78f9      	ldrb	r1, [r7, #3]
 8012fa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012fa2:	9307      	str	r3, [sp, #28]
 8012fa4:	f107 030c 	add.w	r3, r7, #12
 8012fa8:	9306      	str	r3, [sp, #24]
 8012faa:	2340      	movs	r3, #64	; 0x40
 8012fac:	9305      	str	r3, [sp, #20]
 8012fae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8012fb2:	9304      	str	r3, [sp, #16]
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	9303      	str	r3, [sp, #12]
 8012fb8:	2302      	movs	r3, #2
 8012fba:	9302      	str	r3, [sp, #8]
 8012fbc:	787b      	ldrb	r3, [r7, #1]
 8012fbe:	9301      	str	r3, [sp, #4]
 8012fc0:	2306      	movs	r3, #6
 8012fc2:	9300      	str	r3, [sp, #0]
 8012fc4:	2380      	movs	r3, #128	; 0x80
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	f7fe ff89 	bl	8011ede <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	bf00      	nop
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3758      	adds	r7, #88	; 0x58
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b08c      	sub	sp, #48	; 0x30
 8012fdc:	af08      	add	r7, sp, #32
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	4608      	mov	r0, r1
 8012fe2:	4611      	mov	r1, r2
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	70fb      	strb	r3, [r7, #3]
 8012fea:	460b      	mov	r3, r1
 8012fec:	70bb      	strb	r3, [r7, #2]
 8012fee:	4613      	mov	r3, r2
 8012ff0:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8012ff2:	78ba      	ldrb	r2, [r7, #2]
 8012ff4:	78f9      	ldrb	r1, [r7, #3]
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	9307      	str	r3, [sp, #28]
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	9306      	str	r3, [sp, #24]
 8012ffe:	2300      	movs	r3, #0
 8013000:	9305      	str	r3, [sp, #20]
 8013002:	2300      	movs	r3, #0
 8013004:	9304      	str	r3, [sp, #16]
 8013006:	2300      	movs	r3, #0
 8013008:	9303      	str	r3, [sp, #12]
 801300a:	2300      	movs	r3, #0
 801300c:	9302      	str	r3, [sp, #8]
 801300e:	787b      	ldrb	r3, [r7, #1]
 8013010:	9301      	str	r3, [sp, #4]
 8013012:	2305      	movs	r3, #5
 8013014:	9300      	str	r3, [sp, #0]
 8013016:	2300      	movs	r3, #0
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f7fe ff60 	bl	8011ede <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801301e:	4603      	mov	r3, r0
 8013020:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8013022:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013026:	f7ef fbb7 	bl	8002798 <HAL_Delay>
        return rcode;
 801302a:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 801302c:	4618      	mov	r0, r3
 801302e:	3710      	adds	r7, #16
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}

08013034 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8013034:	b580      	push	{r7, lr}
 8013036:	b08a      	sub	sp, #40	; 0x28
 8013038:	af08      	add	r7, sp, #32
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	4608      	mov	r0, r1
 801303e:	4611      	mov	r1, r2
 8013040:	461a      	mov	r2, r3
 8013042:	4603      	mov	r3, r0
 8013044:	70fb      	strb	r3, [r7, #3]
 8013046:	460b      	mov	r3, r1
 8013048:	70bb      	strb	r3, [r7, #2]
 801304a:	4613      	mov	r3, r2
 801304c:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 801304e:	78ba      	ldrb	r2, [r7, #2]
 8013050:	78f9      	ldrb	r1, [r7, #3]
 8013052:	2300      	movs	r3, #0
 8013054:	9307      	str	r3, [sp, #28]
 8013056:	2300      	movs	r3, #0
 8013058:	9306      	str	r3, [sp, #24]
 801305a:	2300      	movs	r3, #0
 801305c:	9305      	str	r3, [sp, #20]
 801305e:	2300      	movs	r3, #0
 8013060:	9304      	str	r3, [sp, #16]
 8013062:	2300      	movs	r3, #0
 8013064:	9303      	str	r3, [sp, #12]
 8013066:	2300      	movs	r3, #0
 8013068:	9302      	str	r3, [sp, #8]
 801306a:	787b      	ldrb	r3, [r7, #1]
 801306c:	9301      	str	r3, [sp, #4]
 801306e:	2309      	movs	r3, #9
 8013070:	9300      	str	r3, [sp, #0]
 8013072:	2300      	movs	r3, #0
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f7fe ff32 	bl	8011ede <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801307a:	4603      	mov	r3, r0
}
 801307c:	4618      	mov	r0, r3
 801307e:	3708      	adds	r7, #8
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 8013084:	b480      	push	{r7}
 8013086:	b083      	sub	sp, #12
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
};
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	4618      	mov	r0, r3
 8013090:	370c      	adds	r7, #12
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr
	...

0801309c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 801309c:	b480      	push	{r7}
 801309e:	b083      	sub	sp, #12
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
 80130a4:	4a04      	ldr	r2, [pc, #16]	; (80130b8 <_ZN11AddressPoolC1Ev+0x1c>)
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	601a      	str	r2, [r3, #0]
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	4618      	mov	r0, r3
 80130ae:	370c      	adds	r7, #12
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr
 80130b8:	080149e4 	.word	0x080149e4

080130bc <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 80130bc:	b580      	push	{r7, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7ff ffe8 	bl	801309c <_ZN11AddressPoolC1Ev>
 80130cc:	4a17      	ldr	r2, [pc, #92]	; (801312c <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	601a      	str	r2, [r3, #0]
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	2200      	movs	r2, #0
 80130d6:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 80130d8:	2100      	movs	r1, #0
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f000 f990 	bl	8013400 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	2200      	movs	r2, #0
 80130e4:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	1d1a      	adds	r2, r3, #4
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	2200      	movs	r2, #0
 80130f2:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2208      	movs	r2, #8
 80130f8:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 80130fa:	687a      	ldr	r2, [r7, #4]
 80130fc:	7993      	ldrb	r3, [r2, #6]
 80130fe:	f36f 0300 	bfc	r3, #0, #1
 8013102:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8013104:	687a      	ldr	r2, [r7, #4]
 8013106:	7993      	ldrb	r3, [r2, #6]
 8013108:	f36f 0341 	bfc	r3, #1, #1
 801310c:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	7993      	ldrb	r3, [r2, #6]
 8013112:	210f      	movs	r1, #15
 8013114:	f361 0387 	bfi	r3, r1, #2, #6
 8013118:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f000 f9a1 	bl	8013462 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	4618      	mov	r0, r3
 8013124:	3708      	adds	r7, #8
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}
 801312a:	bf00      	nop
 801312c:	080149d0 	.word	0x080149d0

08013130 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8013130:	b580      	push	{r7, lr}
 8013132:	b084      	sub	sp, #16
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	460b      	mov	r3, r1
 801313a:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 801313c:	78fb      	ldrb	r3, [r7, #3]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d102      	bne.n	8013148 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	3308      	adds	r3, #8
 8013146:	e014      	b.n	8013172 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8013148:	78fb      	ldrb	r3, [r7, #3]
 801314a:	4619      	mov	r1, r3
 801314c:	6878      	ldr	r0, [r7, #4]
 801314e:	f000 f9a1 	bl	8013494 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8013152:	4603      	mov	r3, r0
 8013154:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8013156:	7bfb      	ldrb	r3, [r7, #15]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d008      	beq.n	801316e <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f103 0108 	add.w	r1, r3, #8
 8013162:	7bfa      	ldrb	r2, [r7, #15]
 8013164:	4613      	mov	r3, r2
 8013166:	00db      	lsls	r3, r3, #3
 8013168:	1a9b      	subs	r3, r3, r2
 801316a:	440b      	add	r3, r1
 801316c:	e000      	b.n	8013170 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 801316e:	2300      	movs	r3, #0
 8013170:	bf00      	nop
        };
 8013172:	4618      	mov	r0, r3
 8013174:	3710      	adds	r7, #16
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}
	...

0801317c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 801317c:	b580      	push	{r7, lr}
 801317e:	b086      	sub	sp, #24
 8013180:	af00      	add	r7, sp, #0
 8013182:	60f8      	str	r0, [r7, #12]
 8013184:	607b      	str	r3, [r7, #4]
 8013186:	460b      	mov	r3, r1
 8013188:	72fb      	strb	r3, [r7, #11]
 801318a:	4613      	mov	r3, r2
 801318c:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 801318e:	f7ed fbb9 	bl	8000904 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 8013192:	7afb      	ldrb	r3, [r7, #11]
 8013194:	f043 0302 	orr.w	r3, r3, #2
 8013198:	b2db      	uxtb	r3, r3
 801319a:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 801319c:	f107 0117 	add.w	r1, r7, #23
 80131a0:	f04f 33ff 	mov.w	r3, #4294967295
 80131a4:	2201      	movs	r2, #1
 80131a6:	480b      	ldr	r0, [pc, #44]	; (80131d4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 80131a8:	f7f2 fd23 	bl	8005bf2 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 80131ac:	7abb      	ldrb	r3, [r7, #10]
 80131ae:	b29a      	uxth	r2, r3
 80131b0:	f04f 33ff 	mov.w	r3, #4294967295
 80131b4:	6879      	ldr	r1, [r7, #4]
 80131b6:	4807      	ldr	r0, [pc, #28]	; (80131d4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 80131b8:	f7f2 fd1b 	bl	8005bf2 <HAL_SPI_Transmit>
        data_p += nbytes;
 80131bc:	7abb      	ldrb	r3, [r7, #10]
 80131be:	687a      	ldr	r2, [r7, #4]
 80131c0:	4413      	add	r3, r2
 80131c2:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 80131c4:	f7ed fb92 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 80131c8:	687b      	ldr	r3, [r7, #4]
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	3718      	adds	r7, #24
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}
 80131d2:	bf00      	nop
 80131d4:	20000340 	.word	0x20000340

080131d8 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 80131d8:	b480      	push	{r7}
 80131da:	b083      	sub	sp, #12
 80131dc:	af00      	add	r7, sp, #0
 80131de:	4603      	mov	r3, r0
 80131e0:	6039      	str	r1, [r7, #0]
 80131e2:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 80131e4:	bf00      	nop
 80131e6:	370c      	adds	r7, #12
 80131e8:	46bd      	mov	sp, r7
 80131ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ee:	4770      	bx	lr

080131f0 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b084      	sub	sp, #16
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	60f8      	str	r0, [r7, #12]
 80131f8:	607b      	str	r3, [r7, #4]
 80131fa:	460b      	mov	r3, r1
 80131fc:	72fb      	strb	r3, [r7, #11]
 80131fe:	4613      	mov	r3, r2
 8013200:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8013202:	f7ed fb7f 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8013206:	f107 010b 	add.w	r1, r7, #11
 801320a:	f04f 33ff 	mov.w	r3, #4294967295
 801320e:	2201      	movs	r2, #1
 8013210:	480d      	ldr	r0, [pc, #52]	; (8013248 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8013212:	f7f2 fcee 	bl	8005bf2 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8013216:	7abb      	ldrb	r3, [r7, #10]
 8013218:	461a      	mov	r2, r3
 801321a:	2100      	movs	r1, #0
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f000 fa91 	bl	8013744 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8013222:	7abb      	ldrb	r3, [r7, #10]
 8013224:	b29a      	uxth	r2, r3
 8013226:	f04f 33ff 	mov.w	r3, #4294967295
 801322a:	6879      	ldr	r1, [r7, #4]
 801322c:	4806      	ldr	r0, [pc, #24]	; (8013248 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 801322e:	f7f2 fe1c 	bl	8005e6a <HAL_SPI_Receive>
        data_p += nbytes;
 8013232:	7abb      	ldrb	r3, [r7, #10]
 8013234:	687a      	ldr	r2, [r7, #4]
 8013236:	4413      	add	r3, r2
 8013238:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 801323a:	f7ed fb57 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 801323e:	687b      	ldr	r3, [r7, #4]
}
 8013240:	4618      	mov	r0, r3
 8013242:	3710      	adds	r7, #16
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}
 8013248:	20000340 	.word	0x20000340

0801324c <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 801324c:	b580      	push	{r7, lr}
 801324e:	b084      	sub	sp, #16
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8013254:	2300      	movs	r3, #0
 8013256:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8013258:	f7fe fd46 	bl	8011ce8 <_ZN2P95IsSetEv>
 801325c:	4603      	mov	r3, r0
 801325e:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8013260:	7bbb      	ldrb	r3, [r7, #14]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d104      	bne.n	8013270 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f000 f937 	bl	80134da <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 801326c:	4603      	mov	r3, r0
 801326e:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 8013270:	7bfb      	ldrb	r3, [r7, #15]
}
 8013272:	4618      	mov	r0, r3
 8013274:	3710      	adds	r7, #16
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
	...

0801327c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 801327c:	b480      	push	{r7}
 801327e:	b083      	sub	sp, #12
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
                return vbusState;
 8013284:	4b03      	ldr	r3, [pc, #12]	; (8013294 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 8013286:	781b      	ldrb	r3, [r3, #0]
        };
 8013288:	4618      	mov	r0, r3
 801328a:	370c      	adds	r7, #12
 801328c:	46bd      	mov	sp, r7
 801328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013292:	4770      	bx	lr
 8013294:	200006c4 	.word	0x200006c4

08013298 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 8013298:	b580      	push	{r7, lr}
 801329a:	b084      	sub	sp, #16
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
 80132a0:	4608      	mov	r0, r1
 80132a2:	4611      	mov	r1, r2
 80132a4:	461a      	mov	r2, r3
 80132a6:	4603      	mov	r3, r0
 80132a8:	70fb      	strb	r3, [r7, #3]
 80132aa:	460b      	mov	r3, r1
 80132ac:	70bb      	strb	r3, [r7, #2]
 80132ae:	4613      	mov	r3, r2
 80132b0:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 80132b2:	78fb      	ldrb	r3, [r7, #3]
 80132b4:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 80132b6:	7b3b      	ldrb	r3, [r7, #12]
 80132b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80132bc:	b2db      	uxtb	r3, r3
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d102      	bne.n	80132c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 80132c2:	787b      	ldrb	r3, [r7, #1]
 80132c4:	2b07      	cmp	r3, #7
 80132c6:	d901      	bls.n	80132cc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 80132c8:	2300      	movs	r3, #0
 80132ca:	e079      	b.n	80133c0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 80132cc:	78bb      	ldrb	r3, [r7, #2]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d005      	beq.n	80132de <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	79db      	ldrb	r3, [r3, #7]
 80132d6:	2b07      	cmp	r3, #7
 80132d8:	d101      	bne.n	80132de <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 80132da:	2300      	movs	r3, #0
 80132dc:	e070      	b.n	80133c0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 80132de:	2100      	movs	r1, #0
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f000 f8d7 	bl	8013494 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 80132e6:	4603      	mov	r3, r0
 80132e8:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 80132ea:	7bfb      	ldrb	r3, [r7, #15]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d101      	bne.n	80132f4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 80132f0:	2300      	movs	r3, #0
 80132f2:	e065      	b.n	80133c0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 80132f4:	7b3b      	ldrb	r3, [r7, #12]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d124      	bne.n	8013344 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 80132fa:	78bb      	ldrb	r3, [r7, #2]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d00f      	beq.n	8013320 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8013300:	7bfa      	ldrb	r2, [r7, #15]
 8013302:	6879      	ldr	r1, [r7, #4]
 8013304:	4613      	mov	r3, r2
 8013306:	00db      	lsls	r3, r3, #3
 8013308:	1a9b      	subs	r3, r3, r2
 801330a:	440b      	add	r3, r1
 801330c:	330c      	adds	r3, #12
 801330e:	2241      	movs	r2, #65	; 0x41
 8013310:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	79db      	ldrb	r3, [r3, #7]
 8013316:	3301      	adds	r3, #1
 8013318:	b2da      	uxtb	r2, r3
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	71da      	strb	r2, [r3, #7]
 801331e:	e008      	b.n	8013332 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8013320:	7bfa      	ldrb	r2, [r7, #15]
 8013322:	6879      	ldr	r1, [r7, #4]
 8013324:	4613      	mov	r3, r2
 8013326:	00db      	lsls	r3, r3, #3
 8013328:	1a9b      	subs	r3, r3, r2
 801332a:	440b      	add	r3, r1
 801332c:	330c      	adds	r3, #12
 801332e:	2201      	movs	r2, #1
 8013330:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 8013332:	7bfa      	ldrb	r2, [r7, #15]
 8013334:	6879      	ldr	r1, [r7, #4]
 8013336:	4613      	mov	r3, r2
 8013338:	00db      	lsls	r3, r3, #3
 801333a:	1a9b      	subs	r3, r3, r2
 801333c:	440b      	add	r3, r1
 801333e:	330c      	adds	r3, #12
 8013340:	781b      	ldrb	r3, [r3, #0]
 8013342:	e03d      	b.n	80133c0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 8013344:	2300      	movs	r3, #0
 8013346:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 8013348:	7b3b      	ldrb	r3, [r7, #12]
 801334a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801334e:	b2da      	uxtb	r2, r3
 8013350:	7a3b      	ldrb	r3, [r7, #8]
 8013352:	f362 03c5 	bfi	r3, r2, #3, #3
 8013356:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 8013358:	78bb      	ldrb	r3, [r7, #2]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d013      	beq.n	8013386 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 801335e:	7a3b      	ldrb	r3, [r7, #8]
 8013360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013364:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	79db      	ldrb	r3, [r3, #7]
 801336a:	3301      	adds	r3, #1
 801336c:	b2da      	uxtb	r2, r3
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	71da      	strb	r2, [r3, #7]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	79db      	ldrb	r3, [r3, #7]
 8013376:	f003 0307 	and.w	r3, r3, #7
 801337a:	b2da      	uxtb	r2, r3
 801337c:	7a3b      	ldrb	r3, [r7, #8]
 801337e:	f362 0302 	bfi	r3, r2, #0, #3
 8013382:	723b      	strb	r3, [r7, #8]
 8013384:	e00b      	b.n	801339e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 8013386:	7a3b      	ldrb	r3, [r7, #8]
 8013388:	f36f 1386 	bfc	r3, #6, #1
 801338c:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 801338e:	787b      	ldrb	r3, [r7, #1]
 8013390:	f003 0307 	and.w	r3, r3, #7
 8013394:	b2da      	uxtb	r2, r3
 8013396:	7a3b      	ldrb	r3, [r7, #8]
 8013398:	f362 0302 	bfi	r3, r2, #0, #3
 801339c:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 801339e:	7bfa      	ldrb	r2, [r7, #15]
 80133a0:	6879      	ldr	r1, [r7, #4]
 80133a2:	4613      	mov	r3, r2
 80133a4:	00db      	lsls	r3, r3, #3
 80133a6:	1a9b      	subs	r3, r3, r2
 80133a8:	440b      	add	r3, r1
 80133aa:	330c      	adds	r3, #12
 80133ac:	7a3a      	ldrb	r2, [r7, #8]
 80133ae:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 80133b0:	7bfa      	ldrb	r2, [r7, #15]
 80133b2:	6879      	ldr	r1, [r7, #4]
 80133b4:	4613      	mov	r3, r2
 80133b6:	00db      	lsls	r3, r3, #3
 80133b8:	1a9b      	subs	r3, r3, r2
 80133ba:	440b      	add	r3, r1
 80133bc:	330c      	adds	r3, #12
 80133be:	781b      	ldrb	r3, [r3, #0]
        };
 80133c0:	4618      	mov	r0, r3
 80133c2:	3710      	adds	r7, #16
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}

080133c8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	460b      	mov	r3, r1
 80133d2:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 80133d4:	78fb      	ldrb	r3, [r7, #3]
 80133d6:	2b41      	cmp	r3, #65	; 0x41
 80133d8:	d103      	bne.n	80133e2 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 80133da:	6878      	ldr	r0, [r7, #4]
 80133dc:	f000 f841 	bl	8013462 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 80133e0:	e00b      	b.n	80133fa <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 80133e2:	78fb      	ldrb	r3, [r7, #3]
 80133e4:	4619      	mov	r1, r3
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f000 f854 	bl	8013494 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 80133ec:	4603      	mov	r3, r0
 80133ee:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 80133f0:	7bfb      	ldrb	r3, [r7, #15]
 80133f2:	4619      	mov	r1, r3
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f000 f893 	bl	8013520 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 80133fa:	3710      	adds	r7, #16
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}

08013400 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	460b      	mov	r3, r1
 801340a:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 801340c:	78fa      	ldrb	r2, [r7, #3]
 801340e:	6879      	ldr	r1, [r7, #4]
 8013410:	4613      	mov	r3, r2
 8013412:	00db      	lsls	r3, r3, #3
 8013414:	1a9b      	subs	r3, r3, r2
 8013416:	440b      	add	r3, r1
 8013418:	330c      	adds	r3, #12
 801341a:	2200      	movs	r2, #0
 801341c:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 801341e:	78fa      	ldrb	r2, [r7, #3]
 8013420:	6879      	ldr	r1, [r7, #4]
 8013422:	4613      	mov	r3, r2
 8013424:	00db      	lsls	r3, r3, #3
 8013426:	1a9b      	subs	r3, r3, r2
 8013428:	440b      	add	r3, r1
 801342a:	330d      	adds	r3, #13
 801342c:	2201      	movs	r2, #1
 801342e:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 8013430:	78fa      	ldrb	r2, [r7, #3]
 8013432:	6879      	ldr	r1, [r7, #4]
 8013434:	4613      	mov	r3, r2
 8013436:	00db      	lsls	r3, r3, #3
 8013438:	1a9b      	subs	r3, r3, r2
 801343a:	440b      	add	r3, r1
 801343c:	330e      	adds	r3, #14
 801343e:	2200      	movs	r2, #0
 8013440:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 8013442:	78fa      	ldrb	r2, [r7, #3]
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	1d19      	adds	r1, r3, #4
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	4613      	mov	r3, r2
 801344c:	00db      	lsls	r3, r3, #3
 801344e:	1a9b      	subs	r3, r3, r2
 8013450:	4403      	add	r3, r0
 8013452:	3308      	adds	r3, #8
 8013454:	6019      	str	r1, [r3, #0]
        };
 8013456:	bf00      	nop
 8013458:	370c      	adds	r7, #12
 801345a:	46bd      	mov	sp, r7
 801345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013460:	4770      	bx	lr

08013462 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 8013462:	b580      	push	{r7, lr}
 8013464:	b084      	sub	sp, #16
 8013466:	af00      	add	r7, sp, #0
 8013468:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 801346a:	2301      	movs	r3, #1
 801346c:	73fb      	strb	r3, [r7, #15]
 801346e:	7bfb      	ldrb	r3, [r7, #15]
 8013470:	2b0f      	cmp	r3, #15
 8013472:	d808      	bhi.n	8013486 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 8013474:	7bfb      	ldrb	r3, [r7, #15]
 8013476:	4619      	mov	r1, r3
 8013478:	6878      	ldr	r0, [r7, #4]
 801347a:	f7ff ffc1 	bl	8013400 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 801347e:	7bfb      	ldrb	r3, [r7, #15]
 8013480:	3301      	adds	r3, #1
 8013482:	73fb      	strb	r3, [r7, #15]
 8013484:	e7f3      	b.n	801346e <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	2200      	movs	r2, #0
 801348a:	71da      	strb	r2, [r3, #7]
        };
 801348c:	bf00      	nop
 801348e:	3710      	adds	r7, #16
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}

08013494 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 8013494:	b480      	push	{r7}
 8013496:	b085      	sub	sp, #20
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
 801349c:	460b      	mov	r3, r1
 801349e:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80134a0:	2301      	movs	r3, #1
 80134a2:	73fb      	strb	r3, [r7, #15]
 80134a4:	7bfb      	ldrb	r3, [r7, #15]
 80134a6:	2b0f      	cmp	r3, #15
 80134a8:	d810      	bhi.n	80134cc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 80134aa:	7bfa      	ldrb	r2, [r7, #15]
 80134ac:	6879      	ldr	r1, [r7, #4]
 80134ae:	4613      	mov	r3, r2
 80134b0:	00db      	lsls	r3, r3, #3
 80134b2:	1a9b      	subs	r3, r3, r2
 80134b4:	440b      	add	r3, r1
 80134b6:	330c      	adds	r3, #12
 80134b8:	781b      	ldrb	r3, [r3, #0]
 80134ba:	78fa      	ldrb	r2, [r7, #3]
 80134bc:	429a      	cmp	r2, r3
 80134be:	d101      	bne.n	80134c4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 80134c0:	7bfb      	ldrb	r3, [r7, #15]
 80134c2:	e004      	b.n	80134ce <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80134c4:	7bfb      	ldrb	r3, [r7, #15]
 80134c6:	3301      	adds	r3, #1
 80134c8:	73fb      	strb	r3, [r7, #15]
 80134ca:	e7eb      	b.n	80134a4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 80134cc:	2300      	movs	r3, #0
        };
 80134ce:	4618      	mov	r0, r3
 80134d0:	3714      	adds	r7, #20
 80134d2:	46bd      	mov	sp, r7
 80134d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d8:	4770      	bx	lr

080134da <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 80134da:	b580      	push	{r7, lr}
 80134dc:	b084      	sub	sp, #16
 80134de:	af00      	add	r7, sp, #0
 80134e0:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 80134e2:	2300      	movs	r3, #0
 80134e4:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 80134e6:	21c8      	movs	r1, #200	; 0xc8
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f7ee fc8b 	bl	8001e04 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80134ee:	4603      	mov	r3, r0
 80134f0:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 80134f2:	7bbb      	ldrb	r3, [r7, #14]
 80134f4:	f003 0320 	and.w	r3, r3, #32
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d006      	beq.n	801350a <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f7ee fca3 	bl	8001e48 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8013502:	7bfb      	ldrb	r3, [r7, #15]
 8013504:	f043 0320 	orr.w	r3, r3, #32
 8013508:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 801350a:	7bfb      	ldrb	r3, [r7, #15]
 801350c:	461a      	mov	r2, r3
 801350e:	21c8      	movs	r1, #200	; 0xc8
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f7ee fc25 	bl	8001d60 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 8013516:	7bfb      	ldrb	r3, [r7, #15]
}
 8013518:	4618      	mov	r0, r3
 801351a:	3710      	adds	r7, #16
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8013520:	b580      	push	{r7, lr}
 8013522:	b084      	sub	sp, #16
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	460b      	mov	r3, r1
 801352a:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 801352c:	78fb      	ldrb	r3, [r7, #3]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d03a      	beq.n	80135a8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 8013532:	78fa      	ldrb	r2, [r7, #3]
 8013534:	6879      	ldr	r1, [r7, #4]
 8013536:	4613      	mov	r3, r2
 8013538:	00db      	lsls	r3, r3, #3
 801353a:	1a9b      	subs	r3, r3, r2
 801353c:	440b      	add	r3, r1
 801353e:	330c      	adds	r3, #12
 8013540:	781b      	ldrb	r3, [r3, #0]
 8013542:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 8013544:	7b3b      	ldrb	r3, [r7, #12]
 8013546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801354a:	b2db      	uxtb	r3, r3
 801354c:	2b00      	cmp	r3, #0
 801354e:	d025      	beq.n	801359c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8013550:	2301      	movs	r3, #1
 8013552:	73fb      	strb	r3, [r7, #15]
 8013554:	7bfb      	ldrb	r3, [r7, #15]
 8013556:	461a      	mov	r2, r3
 8013558:	7b39      	ldrb	r1, [r7, #12]
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f000 f828 	bl	80135b0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 8013560:	4603      	mov	r3, r0
 8013562:	73fb      	strb	r3, [r7, #15]
 8013564:	7bfb      	ldrb	r3, [r7, #15]
 8013566:	2b00      	cmp	r3, #0
 8013568:	bf14      	ite	ne
 801356a:	2301      	movne	r3, #1
 801356c:	2300      	moveq	r3, #0
 801356e:	b2db      	uxtb	r3, r3
 8013570:	2b00      	cmp	r3, #0
 8013572:	d005      	beq.n	8013580 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 8013574:	7bfb      	ldrb	r3, [r7, #15]
 8013576:	4619      	mov	r1, r3
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f7ff ffd1 	bl	8013520 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 801357e:	e7e9      	b.n	8013554 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	79db      	ldrb	r3, [r3, #7]
 8013584:	7b3a      	ldrb	r2, [r7, #12]
 8013586:	f3c2 0202 	ubfx	r2, r2, #0, #3
 801358a:	b2d2      	uxtb	r2, r2
 801358c:	4293      	cmp	r3, r2
 801358e:	d105      	bne.n	801359c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	79db      	ldrb	r3, [r3, #7]
 8013594:	3b01      	subs	r3, #1
 8013596:	b2da      	uxtb	r2, r3
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 801359c:	78fb      	ldrb	r3, [r7, #3]
 801359e:	4619      	mov	r1, r3
 80135a0:	6878      	ldr	r0, [r7, #4]
 80135a2:	f7ff ff2d 	bl	8013400 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 80135a6:	e000      	b.n	80135aa <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 80135a8:	bf00      	nop
        }
 80135aa:	3710      	adds	r7, #16
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}

080135b0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 80135b0:	b480      	push	{r7}
 80135b2:	b085      	sub	sp, #20
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	7039      	strb	r1, [r7, #0]
 80135ba:	4613      	mov	r3, r2
 80135bc:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 80135be:	78fb      	ldrb	r3, [r7, #3]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d004      	beq.n	80135ce <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 80135c4:	78fb      	ldrb	r3, [r7, #3]
 80135c6:	2b0f      	cmp	r3, #15
 80135c8:	d801      	bhi.n	80135ce <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 80135ca:	78fb      	ldrb	r3, [r7, #3]
 80135cc:	e000      	b.n	80135d0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 80135ce:	2301      	movs	r3, #1
 80135d0:	73fb      	strb	r3, [r7, #15]
 80135d2:	7bfb      	ldrb	r3, [r7, #15]
 80135d4:	2b0f      	cmp	r3, #15
 80135d6:	d816      	bhi.n	8013606 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 80135d8:	7bfa      	ldrb	r2, [r7, #15]
 80135da:	6879      	ldr	r1, [r7, #4]
 80135dc:	4613      	mov	r3, r2
 80135de:	00db      	lsls	r3, r3, #3
 80135e0:	1a9b      	subs	r3, r3, r2
 80135e2:	440b      	add	r3, r1
 80135e4:	3308      	adds	r3, #8
 80135e6:	791b      	ldrb	r3, [r3, #4]
 80135e8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80135ec:	b2da      	uxtb	r2, r3
 80135ee:	783b      	ldrb	r3, [r7, #0]
 80135f0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80135f4:	b2db      	uxtb	r3, r3
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d101      	bne.n	80135fe <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 80135fa:	7bfb      	ldrb	r3, [r7, #15]
 80135fc:	e004      	b.n	8013608 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 80135fe:	7bfb      	ldrb	r3, [r7, #15]
 8013600:	3301      	adds	r3, #1
 8013602:	73fb      	strb	r3, [r7, #15]
 8013604:	e7e5      	b.n	80135d2 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 8013606:	2300      	movs	r3, #0
        };
 8013608:	4618      	mov	r0, r3
 801360a:	3714      	adds	r7, #20
 801360c:	46bd      	mov	sp, r7
 801360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013612:	4770      	bx	lr

08013614 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 8013614:	b480      	push	{r7}
 8013616:	b085      	sub	sp, #20
 8013618:	af00      	add	r7, sp, #0
 801361a:	60f8      	str	r0, [r7, #12]
 801361c:	60b9      	str	r1, [r7, #8]
 801361e:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d101      	bne.n	801362c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 8013628:	2300      	movs	r3, #0
 801362a:	e031      	b.n	8013690 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	791b      	ldrb	r3, [r3, #4]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d022      	beq.n	801367a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	881b      	ldrh	r3, [r3, #0]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d01e      	beq.n	801367a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	681a      	ldr	r2, [r3, #0]
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	68f9      	ldr	r1, [r7, #12]
 8013646:	7949      	ldrb	r1, [r1, #5]
 8013648:	4608      	mov	r0, r1
 801364a:	68f9      	ldr	r1, [r7, #12]
 801364c:	7909      	ldrb	r1, [r1, #4]
 801364e:	1a41      	subs	r1, r0, r1
 8013650:	440b      	add	r3, r1
 8013652:	7812      	ldrb	r2, [r2, #0]
 8013654:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	791b      	ldrb	r3, [r3, #4]
 801365a:	3b01      	subs	r3, #1
 801365c:	b2da      	uxtb	r2, r3
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	711a      	strb	r2, [r3, #4]
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	881b      	ldrh	r3, [r3, #0]
 8013666:	3b01      	subs	r3, #1
 8013668:	b29a      	uxth	r2, r3
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	801a      	strh	r2, [r3, #0]
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	1c5a      	adds	r2, r3, #1
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	601a      	str	r2, [r3, #0]
 8013678:	e7d8      	b.n	801362c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	791b      	ldrb	r3, [r3, #4]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d001      	beq.n	8013686 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 8013682:	2300      	movs	r3, #0
 8013684:	e004      	b.n	8013690 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	795a      	ldrb	r2, [r3, #5]
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	711a      	strb	r2, [r3, #4]
        return true;
 801368e:	2301      	movs	r3, #1
}
 8013690:	4618      	mov	r0, r3
 8013692:	3714      	adds	r7, #20
 8013694:	46bd      	mov	sp, r7
 8013696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369a:	4770      	bx	lr

0801369c <__cxa_pure_virtual>:
 801369c:	b508      	push	{r3, lr}
 801369e:	f000 f80d 	bl	80136bc <_ZSt9terminatev>

080136a2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80136a2:	b508      	push	{r3, lr}
 80136a4:	4780      	blx	r0
 80136a6:	f000 f80e 	bl	80136c6 <abort>
	...

080136ac <_ZSt13get_terminatev>:
 80136ac:	4b02      	ldr	r3, [pc, #8]	; (80136b8 <_ZSt13get_terminatev+0xc>)
 80136ae:	6818      	ldr	r0, [r3, #0]
 80136b0:	f3bf 8f5b 	dmb	ish
 80136b4:	4770      	bx	lr
 80136b6:	bf00      	nop
 80136b8:	20000148 	.word	0x20000148

080136bc <_ZSt9terminatev>:
 80136bc:	b508      	push	{r3, lr}
 80136be:	f7ff fff5 	bl	80136ac <_ZSt13get_terminatev>
 80136c2:	f7ff ffee 	bl	80136a2 <_ZN10__cxxabiv111__terminateEPFvvE>

080136c6 <abort>:
 80136c6:	b508      	push	{r3, lr}
 80136c8:	2006      	movs	r0, #6
 80136ca:	f000 f86b 	bl	80137a4 <raise>
 80136ce:	2001      	movs	r0, #1
 80136d0:	f7ee fe32 	bl	8002338 <_exit>

080136d4 <__errno>:
 80136d4:	4b01      	ldr	r3, [pc, #4]	; (80136dc <__errno+0x8>)
 80136d6:	6818      	ldr	r0, [r3, #0]
 80136d8:	4770      	bx	lr
 80136da:	bf00      	nop
 80136dc:	2000014c 	.word	0x2000014c

080136e0 <__libc_init_array>:
 80136e0:	b570      	push	{r4, r5, r6, lr}
 80136e2:	4d0d      	ldr	r5, [pc, #52]	; (8013718 <__libc_init_array+0x38>)
 80136e4:	4c0d      	ldr	r4, [pc, #52]	; (801371c <__libc_init_array+0x3c>)
 80136e6:	1b64      	subs	r4, r4, r5
 80136e8:	10a4      	asrs	r4, r4, #2
 80136ea:	2600      	movs	r6, #0
 80136ec:	42a6      	cmp	r6, r4
 80136ee:	d109      	bne.n	8013704 <__libc_init_array+0x24>
 80136f0:	4d0b      	ldr	r5, [pc, #44]	; (8013720 <__libc_init_array+0x40>)
 80136f2:	4c0c      	ldr	r4, [pc, #48]	; (8013724 <__libc_init_array+0x44>)
 80136f4:	f000 f884 	bl	8013800 <_init>
 80136f8:	1b64      	subs	r4, r4, r5
 80136fa:	10a4      	asrs	r4, r4, #2
 80136fc:	2600      	movs	r6, #0
 80136fe:	42a6      	cmp	r6, r4
 8013700:	d105      	bne.n	801370e <__libc_init_array+0x2e>
 8013702:	bd70      	pop	{r4, r5, r6, pc}
 8013704:	f855 3b04 	ldr.w	r3, [r5], #4
 8013708:	4798      	blx	r3
 801370a:	3601      	adds	r6, #1
 801370c:	e7ee      	b.n	80136ec <__libc_init_array+0xc>
 801370e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013712:	4798      	blx	r3
 8013714:	3601      	adds	r6, #1
 8013716:	e7f2      	b.n	80136fe <__libc_init_array+0x1e>
 8013718:	08014a58 	.word	0x08014a58
 801371c:	08014a58 	.word	0x08014a58
 8013720:	08014a58 	.word	0x08014a58
 8013724:	08014a60 	.word	0x08014a60

08013728 <memcpy>:
 8013728:	440a      	add	r2, r1
 801372a:	4291      	cmp	r1, r2
 801372c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013730:	d100      	bne.n	8013734 <memcpy+0xc>
 8013732:	4770      	bx	lr
 8013734:	b510      	push	{r4, lr}
 8013736:	f811 4b01 	ldrb.w	r4, [r1], #1
 801373a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801373e:	4291      	cmp	r1, r2
 8013740:	d1f9      	bne.n	8013736 <memcpy+0xe>
 8013742:	bd10      	pop	{r4, pc}

08013744 <memset>:
 8013744:	4402      	add	r2, r0
 8013746:	4603      	mov	r3, r0
 8013748:	4293      	cmp	r3, r2
 801374a:	d100      	bne.n	801374e <memset+0xa>
 801374c:	4770      	bx	lr
 801374e:	f803 1b01 	strb.w	r1, [r3], #1
 8013752:	e7f9      	b.n	8013748 <memset+0x4>

08013754 <_raise_r>:
 8013754:	291f      	cmp	r1, #31
 8013756:	b538      	push	{r3, r4, r5, lr}
 8013758:	4604      	mov	r4, r0
 801375a:	460d      	mov	r5, r1
 801375c:	d904      	bls.n	8013768 <_raise_r+0x14>
 801375e:	2316      	movs	r3, #22
 8013760:	6003      	str	r3, [r0, #0]
 8013762:	f04f 30ff 	mov.w	r0, #4294967295
 8013766:	bd38      	pop	{r3, r4, r5, pc}
 8013768:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801376a:	b112      	cbz	r2, 8013772 <_raise_r+0x1e>
 801376c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013770:	b94b      	cbnz	r3, 8013786 <_raise_r+0x32>
 8013772:	4620      	mov	r0, r4
 8013774:	f000 f830 	bl	80137d8 <_getpid_r>
 8013778:	462a      	mov	r2, r5
 801377a:	4601      	mov	r1, r0
 801377c:	4620      	mov	r0, r4
 801377e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013782:	f000 b817 	b.w	80137b4 <_kill_r>
 8013786:	2b01      	cmp	r3, #1
 8013788:	d00a      	beq.n	80137a0 <_raise_r+0x4c>
 801378a:	1c59      	adds	r1, r3, #1
 801378c:	d103      	bne.n	8013796 <_raise_r+0x42>
 801378e:	2316      	movs	r3, #22
 8013790:	6003      	str	r3, [r0, #0]
 8013792:	2001      	movs	r0, #1
 8013794:	e7e7      	b.n	8013766 <_raise_r+0x12>
 8013796:	2400      	movs	r4, #0
 8013798:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801379c:	4628      	mov	r0, r5
 801379e:	4798      	blx	r3
 80137a0:	2000      	movs	r0, #0
 80137a2:	e7e0      	b.n	8013766 <_raise_r+0x12>

080137a4 <raise>:
 80137a4:	4b02      	ldr	r3, [pc, #8]	; (80137b0 <raise+0xc>)
 80137a6:	4601      	mov	r1, r0
 80137a8:	6818      	ldr	r0, [r3, #0]
 80137aa:	f7ff bfd3 	b.w	8013754 <_raise_r>
 80137ae:	bf00      	nop
 80137b0:	2000014c 	.word	0x2000014c

080137b4 <_kill_r>:
 80137b4:	b538      	push	{r3, r4, r5, lr}
 80137b6:	4d07      	ldr	r5, [pc, #28]	; (80137d4 <_kill_r+0x20>)
 80137b8:	2300      	movs	r3, #0
 80137ba:	4604      	mov	r4, r0
 80137bc:	4608      	mov	r0, r1
 80137be:	4611      	mov	r1, r2
 80137c0:	602b      	str	r3, [r5, #0]
 80137c2:	f7ee fda9 	bl	8002318 <_kill>
 80137c6:	1c43      	adds	r3, r0, #1
 80137c8:	d102      	bne.n	80137d0 <_kill_r+0x1c>
 80137ca:	682b      	ldr	r3, [r5, #0]
 80137cc:	b103      	cbz	r3, 80137d0 <_kill_r+0x1c>
 80137ce:	6023      	str	r3, [r4, #0]
 80137d0:	bd38      	pop	{r3, r4, r5, pc}
 80137d2:	bf00      	nop
 80137d4:	20005d70 	.word	0x20005d70

080137d8 <_getpid_r>:
 80137d8:	f7ee bd96 	b.w	8002308 <_getpid>

080137dc <strncmp>:
 80137dc:	b510      	push	{r4, lr}
 80137de:	b16a      	cbz	r2, 80137fc <strncmp+0x20>
 80137e0:	3901      	subs	r1, #1
 80137e2:	1884      	adds	r4, r0, r2
 80137e4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80137e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80137ec:	4293      	cmp	r3, r2
 80137ee:	d103      	bne.n	80137f8 <strncmp+0x1c>
 80137f0:	42a0      	cmp	r0, r4
 80137f2:	d001      	beq.n	80137f8 <strncmp+0x1c>
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d1f5      	bne.n	80137e4 <strncmp+0x8>
 80137f8:	1a98      	subs	r0, r3, r2
 80137fa:	bd10      	pop	{r4, pc}
 80137fc:	4610      	mov	r0, r2
 80137fe:	e7fc      	b.n	80137fa <strncmp+0x1e>

08013800 <_init>:
 8013800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013802:	bf00      	nop
 8013804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013806:	bc08      	pop	{r3}
 8013808:	469e      	mov	lr, r3
 801380a:	4770      	bx	lr

0801380c <_fini>:
 801380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801380e:	bf00      	nop
 8013810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013812:	bc08      	pop	{r3}
 8013814:	469e      	mov	lr, r3
 8013816:	4770      	bx	lr
