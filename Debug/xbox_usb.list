
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014450  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fe4  08014620  08014620  00024620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016604  08016604  00030188  2**0
                  CONTENTS
  4 .ARM          00000008  08016604  08016604  00026604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801660c  0801660c  00030188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801660c  0801660c  0002660c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016614  08016614  00026614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08016618  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005be4  20000188  080167a0  00030188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005d6c  080167a0  00035d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006bf03  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009b90  00000000  00000000  0009c0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b60  00000000  00000000  000a5c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000029c8  00000000  00000000  000a87b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d991  00000000  00000000  000ab178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000345c0  00000000  00000000  000d8b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f93fb  00000000  00000000  0010d0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002064c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd64  00000000  00000000  00206518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000188 	.word	0x20000188
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014608 	.word	0x08014608

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000018c 	.word	0x2000018c
 800020c:	08014608 	.word	0x08014608

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f000 f805 	bl	8000618 <_ZN5Print5printEli>
 800060e:	4603      	mov	r3, r0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d109      	bne.n	800063e <_ZN5Print5printEli+0x26>
    return write(n);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	e029      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d11d      	bne.n	8000680 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	2b00      	cmp	r3, #0
 8000648:	da12      	bge.n	8000670 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800064a:	212d      	movs	r1, #45	; 0x2d
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ffc1 	bl	80005d4 <_ZN5Print5printEc>
 8000652:	4603      	mov	r3, r0
 8000654:	617b      	str	r3, [r7, #20]
      n = -n;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	425b      	negs	r3, r3
 800065a:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	220a      	movs	r2, #10
 8000660:	4619      	mov	r1, r3
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f000 f819 	bl	800069a <_ZN5Print11printNumberEmh>
 8000668:	4602      	mov	r2, r0
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	4413      	add	r3, r2
 800066e:	e010      	b.n	8000692 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	220a      	movs	r2, #10
 8000674:	4619      	mov	r1, r3
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f000 f80f 	bl	800069a <_ZN5Print11printNumberEmh>
 800067c:	4603      	mov	r3, r0
 800067e:	e008      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	4619      	mov	r1, r3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f000 f806 	bl	800069a <_ZN5Print11printNumberEmh>
 800068e:	4603      	mov	r3, r0
 8000690:	bf00      	nop
  }
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b090      	sub	sp, #64	; 0x40
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	3320      	adds	r3, #32
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80006b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d801      	bhi.n	80006c0 <_ZN5Print11printNumberEmh+0x26>
 80006bc:	230a      	movs	r3, #10
 80006be:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80006ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	79f9      	ldrb	r1, [r7, #7]
 80006d8:	fb11 f303 	smulbb	r3, r1, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80006e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d804      	bhi.n	80006f6 <_ZN5Print11printNumberEmh+0x5c>
 80006ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006f0:	3330      	adds	r3, #48	; 0x30
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	e003      	b.n	80006fe <_ZN5Print11printNumberEmh+0x64>
 80006f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006fa:	3337      	adds	r3, #55	; 0x37
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000700:	3a01      	subs	r2, #1
 8000702:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000706:	7013      	strb	r3, [r2, #0]
  } while(n);
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d000      	beq.n	8000710 <_ZN5Print11printNumberEmh+0x76>
  do {
 800070e:	e7d7      	b.n	80006c0 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f7ff ff00 	bl	8000518 <_ZN5Print5writeEPKc>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3740      	adds	r7, #64	; 0x40
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3304      	adds	r3, #4
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1cf9      	adds	r1, r7, #3
 8000738:	2201      	movs	r2, #1
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	4798      	blx	r3
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6918      	ldr	r0, [r3, #16]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	b29a      	uxth	r2, r3
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	6979      	ldr	r1, [r7, #20]
 8000766:	f006 f924 	bl	80069b2 <HAL_UART_Transmit>
	return size;
 800076a:	687b      	ldr	r3, [r7, #4]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6918      	ldr	r0, [r3, #16]
 8000780:	f107 010f 	add.w	r1, r7, #15
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	2201      	movs	r2, #1
 800078a:	f006 f9a4 	bl	8006ad6 <HAL_UART_Receive>
	return data;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	return -1;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	return -1;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <_ZN5PrintC1Ev+0x24>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	080155a8 	.word	0x080155a8

08000804 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ffe4 	bl	80007dc <_ZN5PrintC1Ev>
 8000814:	4a05      	ldr	r2, [pc, #20]	; (800082c <_ZN6StreamC1Ev+0x28>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	080156f8 	.word	0x080156f8

08000830 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ffe1 	bl	8000804 <_ZN6StreamC1Ev>
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	611a      	str	r2, [r3, #16]
	};
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	080155b8 	.word	0x080155b8

0800085c <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	4903      	ldr	r1, [pc, #12]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <_ZN2P910SetDirReadEv+0x28>)
 8000876:	f001 ff65 	bl	8002744 <HAL_GPIO_Init>
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001a4 	.word	0x200001a4
 8000884:	40020800 	.word	0x40020800

08000888 <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
 800088c:	2201      	movs	r2, #1
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <_ZN3P103SetEv+0x14>)
 8000892:	f002 f903 	bl	8002a9c <HAL_GPIO_WritePin>
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020400 	.word	0x40020400

080008a0 <_ZN3P105ClearEv>:
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	2200      	movs	r2, #0
 80008a6:	2140      	movs	r1, #64	; 0x40
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <_ZN3P105ClearEv+0x14>)
 80008aa:	f002 f8f7 	bl	8002a9c <HAL_GPIO_WritePin>
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40020400 	.word	0x40020400

080008b8 <_ZN3P1011SetDirWriteEv>:
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008be:	2240      	movs	r2, #64	; 0x40
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008d0:	2203      	movs	r2, #3
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	4902      	ldr	r1, [pc, #8]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <_ZN3P1011SetDirWriteEv+0x2c>)
 80008d8:	f001 ff34 	bl	8002744 <HAL_GPIO_Init>
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200001b8 	.word	0x200001b8
 80008e4:	40020400 	.word	0x40020400

080008e8 <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2201      	movs	r2, #1
 80008fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2206      	movs	r2, #6
 8000902:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d004      	beq.n	800092c <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ffde 	bl	80008e8 <_ZN3BTD11pairWithHIDEv>
        };
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4798      	blx	r3
                OnInitBTHID();
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	331c      	adds	r3, #28
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	4798      	blx	r3
        };
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	460b      	mov	r3, r1
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	72fb      	strb	r3, [r7, #11]
                return;
 800096c:	bf00      	nop
        }
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <_ZN9PS4ParserC1Ev+0x20>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
                Reset();
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f011 fef0 	bl	801276c <_ZN9PS4Parser5ResetEv>
        };
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	080156ec 	.word	0x080156ec

0800099c <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 f81c 	bl	80009e6 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2b20      	cmp	r3, #32
 80009c6:	d105      	bne.n	80009d4 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 80009c8:	22ff      	movs	r2, #255	; 0xff
 80009ca:	2100      	movs	r1, #0
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f80a 	bl	80009e6 <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 80009d2:	e004      	b.n	80009de <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 80009d4:	2200      	movs	r2, #0
 80009d6:	21ff      	movs	r1, #255	; 0xff
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f804 	bl	80009e6 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	460b      	mov	r3, r1
 80009f0:	70fb      	strb	r3, [r7, #3]
 80009f2:	4613      	mov	r3, r2
 80009f4:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	78fa      	ldrb	r2, [r7, #3]
 80009fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	78ba      	ldrb	r2, [r7, #2]
 8000a02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	4608      	mov	r0, r1
 8000a24:	4611      	mov	r1, r2
 8000a26:	461a      	mov	r2, r3
 8000a28:	4603      	mov	r3, r0
 8000a2a:	70fb      	strb	r3, [r7, #3]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	70bb      	strb	r3, [r7, #2]
 8000a30:	4613      	mov	r3, r2
 8000a32:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	78fa      	ldrb	r2, [r7, #3]
 8000a38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	78ba      	ldrb	r2, [r7, #2]
 8000a40:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	787a      	ldrb	r2, [r7, #1]
 8000a48:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	141b      	asrs	r3, r3, #16
 8000a6e:	b2d9      	uxtb	r1, r3
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	121b      	asrs	r3, r3, #8
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffcd 	bl	8000a1a <_ZN9PS4Parser6setLedEhhh>
        };
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68b9      	ldr	r1, [r7, #8]
 8000aa0:	f010 fb98 	bl	80111d4 <_ZN5BTHIDC1EP3BTDbPKc>
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3378      	adds	r3, #120	; 0x78
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff65 	bl	8000978 <_ZN9PS4ParserC1Ev>
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3378      	adds	r3, #120	; 0x78
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f011 fe54 	bl	801276c <_ZN9PS4Parser5ResetEv>
        };
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	080156b0 	.word	0x080156b0
 8000ad4:	080156e0 	.word	0x080156e0

08000ad8 <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	460b      	mov	r3, r1
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3378      	adds	r3, #120	; 0x78
 8000b02:	7af9      	ldrb	r1, [r7, #11]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f011 fd56 	bl	80125b8 <_ZN9PS4Parser5ParseEhPh>
        };
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3378      	adds	r3, #120	; 0x78
 8000b20:	4618      	mov	r0, r3
 8000b22:	f011 fe23 	bl	801276c <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 f855 	bl	8000bd6 <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d105      	bne.n	8000b40 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3378      	adds	r3, #120	; 0x78
 8000b38:	21ff      	movs	r1, #255	; 0xff
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff90 	bl	8000a60 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3378      	adds	r3, #120	; 0x78
 8000b54:	4618      	mov	r0, r3
 8000b56:	f011 fe09 	bl	801276c <_ZN9PS4Parser5ResetEv>
        };
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b096      	sub	sp, #88	; 0x58
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	224f      	movs	r2, #79	; 0x4f
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f013 fce9 	bl	801454c <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000b7a:	2352      	movs	r3, #82	; 0x52
 8000b7c:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000b7e:	2311      	movs	r3, #17
 8000b80:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000b86:	23ff      	movs	r3, #255	; 0xff
 8000b88:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	785b      	ldrb	r3, [r3, #1]
 8000b8e:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	78db      	ldrb	r3, [r3, #3]
 8000ba0:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	791b      	ldrb	r3, [r3, #4]
 8000ba6:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	795b      	ldrb	r3, [r3, #5]
 8000bac:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	799b      	ldrb	r3, [r3, #6]
 8000bb2:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	224f      	movs	r2, #79	; 0x4f
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f000 f81a 	bl	8000bfc <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000bc8:	bf00      	nop
 8000bca:	3758      	adds	r7, #88	; 0x58
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000bd0:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000bd4:	e7c5      	b.n	8000b62 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000bd6 <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b084      	sub	sp, #16
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000bde:	2343      	movs	r3, #67	; 0x43
 8000be0:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000be2:	2302      	movs	r3, #2
 8000be4:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	2202      	movs	r2, #2
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f804 	bl	8000bfc <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b087      	sub	sp, #28
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	4613      	mov	r3, r2
 8000c08:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	6898      	ldr	r0, [r3, #8]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	8999      	ldrh	r1, [r3, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	7d9b      	ldrb	r3, [r3, #22]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	7dd2      	ldrb	r2, [r2, #23]
 8000c1a:	79fc      	ldrb	r4, [r7, #7]
 8000c1c:	9201      	str	r2, [sp, #4]
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	4623      	mov	r3, r4
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f00f fb10 	bl	8010248 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd90      	pop	{r4, r7, pc}

08000c30 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
    {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c34:	f001 fc3e 	bl	80024b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f8e6 	bl	8000e08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3c:	f000 fa44 	bl	80010c8 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c40:	f000 fa14 	bl	800106c <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000c44:	f000 f9d6 	bl	8000ff4 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000c48:	f00c f920 	bl	800ce8c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000c4c:	f000 f974 	bl	8000f38 <_ZL13MX_TIM14_Initv>
  MX_I2C1_Init();
 8000c50:	f000 f99c 	bl	8000f8c <_ZL12MX_I2C1_Initv>

  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* For the USB Host Shield Library*/
  SPI_Handle = hspi1;
 8000c54:	4a4a      	ldr	r2, [pc, #296]	; (8000d80 <main+0x150>)
 8000c56:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <main+0x154>)
 8000c58:	4610      	mov	r0, r2
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	2358      	movs	r3, #88	; 0x58
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f013 fc66 	bl	8014530 <memcpy>
  UART_Handle = huart2;
 8000c64:	4a48      	ldr	r2, [pc, #288]	; (8000d88 <main+0x158>)
 8000c66:	4b49      	ldr	r3, [pc, #292]	; (8000d8c <main+0x15c>)
 8000c68:	4610      	mov	r0, r2
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	2344      	movs	r3, #68	; 0x44
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f013 fc5e 	bl	8014530 <memcpy>
  //ssd1306_TestFPS();
  /* The Primary Timer, since using freeRTOS, not using systick */
  HAL_TIM_Base_Start_IT(&htim14);
 8000c74:	4846      	ldr	r0, [pc, #280]	; (8000d90 <main+0x160>)
 8000c76:	f005 fbfb 	bl	8006470 <HAL_TIM_Base_Start_IT>

  /* Verify our CPU Frequency
   * We should get a 500ms delay here */
  Serial.print(F("\r\nCPU Frequency is: "));
 8000c7a:	4946      	ldr	r1, [pc, #280]	; (8000d94 <main+0x164>)
 8000c7c:	4846      	ldr	r0, [pc, #280]	; (8000d98 <main+0x168>)
 8000c7e:	f7ff fc8d 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq() / 1000000;
 8000c82:	f003 fe1d 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a44      	ldr	r2, [pc, #272]	; (8000d9c <main+0x16c>)
 8000c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8e:	0c9b      	lsrs	r3, r3, #18
 8000c90:	4a43      	ldr	r2, [pc, #268]	; (8000da0 <main+0x170>)
 8000c92:	6013      	str	r3, [r2, #0]
  Serial.print((int) cpu_freq);
 8000c94:	4b42      	ldr	r3, [pc, #264]	; (8000da0 <main+0x170>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	220a      	movs	r2, #10
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	483e      	ldr	r0, [pc, #248]	; (8000d98 <main+0x168>)
 8000c9e:	f7ff fcab 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print("MHz");
 8000ca2:	4940      	ldr	r1, [pc, #256]	; (8000da4 <main+0x174>)
 8000ca4:	483c      	ldr	r0, [pc, #240]	; (8000d98 <main+0x168>)
 8000ca6:	f7ff fc87 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000caa:	493f      	ldr	r1, [pc, #252]	; (8000da8 <main+0x178>)
 8000cac:	483a      	ldr	r0, [pc, #232]	; (8000d98 <main+0x168>)
 8000cae:	f7ff fc83 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000cb2:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <main+0x160>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <main+0x17c>)
 8000cbc:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500);
 8000cbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc2:	f001 fc39 	bl	8002538 <HAL_Delay>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000cc6:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <main+0x160>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4b37      	ldr	r3, [pc, #220]	; (8000dac <main+0x17c>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	4b35      	ldr	r3, [pc, #212]	; (8000dac <main+0x17c>)
 8000cd8:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000cda:	4935      	ldr	r1, [pc, #212]	; (8000db0 <main+0x180>)
 8000cdc:	482e      	ldr	r0, [pc, #184]	; (8000d98 <main+0x168>)
 8000cde:	f7ff fc6b 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int) timer_val / 10);
 8000ce2:	4b32      	ldr	r3, [pc, #200]	; (8000dac <main+0x17c>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	4a33      	ldr	r2, [pc, #204]	; (8000db4 <main+0x184>)
 8000ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	220a      	movs	r2, #10
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4828      	ldr	r0, [pc, #160]	; (8000d98 <main+0x168>)
 8000cf6:	f7ff fc7f 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print(" ms");
 8000cfa:	492f      	ldr	r1, [pc, #188]	; (8000db8 <main+0x188>)
 8000cfc:	4826      	ldr	r0, [pc, #152]	; (8000d98 <main+0x168>)
 8000cfe:	f7ff fc5b 	bl	80005b8 <_ZN5Print5printEPKc>

//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;
  Serial.print((int) hal_gettick);
 8000d02:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <main+0x18c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	220a      	movs	r2, #10
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4823      	ldr	r0, [pc, #140]	; (8000d98 <main+0x168>)
 8000d0c:	f7ff fc74 	bl	80005f8 <_ZN5Print5printEii>

  /* USER CODE END 2 */
  /* Init scheduler */

  ssd1306_Init();
 8000d10:	f007 fcf0 	bl	80086f4 <ssd1306_Init>
  osKernelInitialize();
 8000d14:	f009 fb66 	bl	800a3e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000d18:	4a29      	ldr	r2, [pc, #164]	; (8000dc0 <main+0x190>)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4829      	ldr	r0, [pc, #164]	; (8000dc4 <main+0x194>)
 8000d1e:	f009 fbab 	bl	800a478 <osThreadNew>
 8000d22:	4603      	mov	r3, r0
 8000d24:	4a28      	ldr	r2, [pc, #160]	; (8000dc8 <main+0x198>)
 8000d26:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000d28:	4a28      	ldr	r2, [pc, #160]	; (8000dcc <main+0x19c>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4828      	ldr	r0, [pc, #160]	; (8000dd0 <main+0x1a0>)
 8000d2e:	f009 fba3 	bl	800a478 <osThreadNew>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4a27      	ldr	r2, [pc, #156]	; (8000dd4 <main+0x1a4>)
 8000d36:	6013      	str	r3, [r2, #0]

  /* creation of controllerJoin */
  controllerJoinHandle = osThreadNew(StartControllerJoin, NULL, &controllerJoin_attributes);
 8000d38:	4a27      	ldr	r2, [pc, #156]	; (8000dd8 <main+0x1a8>)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4827      	ldr	r0, [pc, #156]	; (8000ddc <main+0x1ac>)
 8000d3e:	f009 fb9b 	bl	800a478 <osThreadNew>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <main+0x1b0>)
 8000d46:	6013      	str	r3, [r2, #0]

  /* creation of buttonPress */
  buttonPressHandle = osThreadNew(StartButtonPress, NULL, &buttonPress_attributes);
 8000d48:	4a26      	ldr	r2, [pc, #152]	; (8000de4 <main+0x1b4>)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4826      	ldr	r0, [pc, #152]	; (8000de8 <main+0x1b8>)
 8000d4e:	f009 fb93 	bl	800a478 <osThreadNew>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a25      	ldr	r2, [pc, #148]	; (8000dec <main+0x1bc>)
 8000d56:	6013      	str	r3, [r2, #0]

  /* creation of updateLCD */
  updateLCDHandle = osThreadNew(StartUpdateLCD, NULL, &updateLCD_attributes);
 8000d58:	4a25      	ldr	r2, [pc, #148]	; (8000df0 <main+0x1c0>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4825      	ldr	r0, [pc, #148]	; (8000df4 <main+0x1c4>)
 8000d5e:	f009 fb8b 	bl	800a478 <osThreadNew>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4a24      	ldr	r2, [pc, #144]	; (8000df8 <main+0x1c8>)
 8000d66:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* creation of getLatencies, Used to Meaesure latencies of tasks*/
  getLatencies = osThreadNew(StartGetLatencies, NULL, &getLatencies_attributes);
 8000d68:	4a24      	ldr	r2, [pc, #144]	; (8000dfc <main+0x1cc>)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4824      	ldr	r0, [pc, #144]	; (8000e00 <main+0x1d0>)
 8000d6e:	f009 fb83 	bl	800a478 <osThreadNew>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <main+0x1d4>)
 8000d76:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d78:	f009 fb58 	bl	800a42c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <main+0x14c>
 8000d7e:	bf00      	nop
 8000d80:	20000324 	.word	0x20000324
 8000d84:	20000228 	.word	0x20000228
 8000d88:	2000037c 	.word	0x2000037c
 8000d8c:	20000280 	.word	0x20000280
 8000d90:	200002c4 	.word	0x200002c4
 8000d94:	08014668 	.word	0x08014668
 8000d98:	200003c0 	.word	0x200003c0
 8000d9c:	431bde83 	.word	0x431bde83
 8000da0:	20000678 	.word	0x20000678
 8000da4:	08014680 	.word	0x08014680
 8000da8:	08014684 	.word	0x08014684
 8000dac:	2000067c 	.word	0x2000067c
 8000db0:	0801468c 	.word	0x0801468c
 8000db4:	cccccccd 	.word	0xcccccccd
 8000db8:	080146a0 	.word	0x080146a0
 8000dbc:	20000680 	.word	0x20000680
 8000dc0:	080155d0 	.word	0x080155d0
 8000dc4:	080012b9 	.word	0x080012b9
 8000dc8:	2000030c 	.word	0x2000030c
 8000dcc:	080155f4 	.word	0x080155f4
 8000dd0:	080019c5 	.word	0x080019c5
 8000dd4:	20000310 	.word	0x20000310
 8000dd8:	08015618 	.word	0x08015618
 8000ddc:	08001a15 	.word	0x08001a15
 8000de0:	20000314 	.word	0x20000314
 8000de4:	0801563c 	.word	0x0801563c
 8000de8:	08001a6d 	.word	0x08001a6d
 8000dec:	20000318 	.word	0x20000318
 8000df0:	08015660 	.word	0x08015660
 8000df4:	08001b19 	.word	0x08001b19
 8000df8:	2000031c 	.word	0x2000031c
 8000dfc:	08015684 	.word	0x08015684
 8000e00:	08001255 	.word	0x08001255
 8000e04:	20000320 	.word	0x20000320

08000e08 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
    {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0ac      	sub	sp, #176	; 0xb0
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e12:	2234      	movs	r2, #52	; 0x34
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f013 fb98 	bl	801454c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	225c      	movs	r2, #92	; 0x5c
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f013 fb89 	bl	801454c <memset>

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b3c      	ldr	r3, [pc, #240]	; (8000f30 <SystemClock_Config+0x128>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a3b      	ldr	r2, [pc, #236]	; (8000f30 <SystemClock_Config+0x128>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b39      	ldr	r3, [pc, #228]	; (8000f30 <SystemClock_Config+0x128>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <SystemClock_Config+0x12c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a35      	ldr	r2, [pc, #212]	; (8000f34 <SystemClock_Config+0x12c>)
 8000e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <SystemClock_Config+0x12c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e72:	2301      	movs	r3, #1
 8000e74:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e92:	23a8      	movs	r3, #168	; 0xa8
 8000e94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eaa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 fa48 	bl	8005344 <HAL_RCC_OscConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf14      	ite	ne
 8000eba:	2301      	movne	r3, #1
 8000ebc:	2300      	moveq	r3, #0
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0xc0>
      {
    Error_Handler();
 8000ec4:	f000 ff5c 	bl	8001d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ec8:	230f      	movs	r3, #15
 8000eca:	66bb      	str	r3, [r7, #104]	; 0x68
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ed4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ed8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ede:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ee0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 fc04 	bl	80046f4 <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	bf14      	ite	ne
 8000ef2:	2301      	movne	r3, #1
 8000ef4:	2300      	moveq	r3, #0
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <SystemClock_Config+0xf8>
      {
    Error_Handler();
 8000efc:	f000 ff40 	bl	8001d80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f04:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000f06:	2300      	movs	r3, #0
 8000f08:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fd3c 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x120>
      {
    Error_Handler();
 8000f24:	f000 ff2c 	bl	8001d80 <Error_Handler>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	37b0      	adds	r7, #176	; 0xb0
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000

08000f38 <_ZL13MX_TIM14_Initv>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
    {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <_ZL13MX_TIM14_Initv+0x4c>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <_ZL13MX_TIM14_Initv+0x50>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168 / 2) * 100 - 1;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <_ZL13MX_TIM14_Initv+0x4c>)
 8000f44:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000f48:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <_ZL13MX_TIM14_Initv+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000 - 1;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <_ZL13MX_TIM14_Initv+0x4c>)
 8000f52:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f56:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <_ZL13MX_TIM14_Initv+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <_ZL13MX_TIM14_Initv+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <_ZL13MX_TIM14_Initv+0x4c>)
 8000f66:	f005 fa33 	bl	80063d0 <HAL_TIM_Base_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf14      	ite	ne
 8000f70:	2301      	movne	r3, #1
 8000f72:	2300      	moveq	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <_ZL13MX_TIM14_Initv+0x46>
      {
    Error_Handler();
 8000f7a:	f000 ff01 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200002c4 	.word	0x200002c4
 8000f88:	40002000 	.word	0x40002000

08000f8c <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
    {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000f92:	4a16      	ldr	r2, [pc, #88]	; (8000fec <_ZL12MX_I2C1_Initv+0x60>)
 8000f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000f98:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <_ZL12MX_I2C1_Initv+0x64>)
 8000f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc8:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fca:	f001 fd81 	bl	8002ad0 <HAL_I2C_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf14      	ite	ne
 8000fd4:	2301      	movne	r3, #1
 8000fd6:	2300      	moveq	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <_ZL12MX_I2C1_Initv+0x56>
      {
    Error_Handler();
 8000fde:	f000 fecf 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200001d4 	.word	0x200001d4
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	000186a0 	.word	0x000186a0

08000ff4 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
    {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <_ZL12MX_SPI1_Initv+0x70>)
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <_ZL12MX_SPI1_Initv+0x74>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <_ZL12MX_SPI1_Initv+0x70>)
 8001000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001004:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <_ZL12MX_SPI1_Initv+0x70>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_ZL12MX_SPI1_Initv+0x70>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <_ZL12MX_SPI1_Initv+0x70>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <_ZL12MX_SPI1_Initv+0x70>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <_ZL12MX_SPI1_Initv+0x70>)
 8001020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001024:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <_ZL12MX_SPI1_Initv+0x70>)
 8001028:	2218      	movs	r2, #24
 800102a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <_ZL12MX_SPI1_Initv+0x70>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <_ZL12MX_SPI1_Initv+0x70>)
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <_ZL12MX_SPI1_Initv+0x70>)
 800103a:	2200      	movs	r2, #0
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <_ZL12MX_SPI1_Initv+0x70>)
 8001040:	220a      	movs	r2, #10
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <_ZL12MX_SPI1_Initv+0x70>)
 8001046:	f004 fc1b 	bl	8005880 <HAL_SPI_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	bf14      	ite	ne
 8001050:	2301      	movne	r3, #1
 8001052:	2300      	moveq	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <_ZL12MX_SPI1_Initv+0x6a>
      {
    Error_Handler();
 800105a:	f000 fe91 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000228 	.word	0x20000228
 8001068:	40013000 	.word	0x40013000

0800106c <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
    {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001072:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010a4:	f005 fc38 	bl	8006918 <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	bf14      	ite	ne
 80010ae:	2301      	movne	r3, #1
 80010b0:	2300      	moveq	r3, #0
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <_ZL19MX_USART2_UART_Initv+0x50>
      {
    Error_Handler();
 80010b8:	f000 fe62 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000280 	.word	0x20000280
 80010c4:	40004400 	.word	0x40004400

080010c8 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
    {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <_ZL12MX_GPIO_Initv+0xf4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a35      	ldr	r2, [pc, #212]	; (80011bc <_ZL12MX_GPIO_Initv+0xf4>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b33      	ldr	r3, [pc, #204]	; (80011bc <_ZL12MX_GPIO_Initv+0xf4>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <_ZL12MX_GPIO_Initv+0xf4>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a2e      	ldr	r2, [pc, #184]	; (80011bc <_ZL12MX_GPIO_Initv+0xf4>)
 8001104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <_ZL12MX_GPIO_Initv+0xf4>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <_ZL12MX_GPIO_Initv+0xf4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a27      	ldr	r2, [pc, #156]	; (80011bc <_ZL12MX_GPIO_Initv+0xf4>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <_ZL12MX_GPIO_Initv+0xf4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <_ZL12MX_GPIO_Initv+0xf4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a20      	ldr	r2, [pc, #128]	; (80011bc <_ZL12MX_GPIO_Initv+0xf4>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <_ZL12MX_GPIO_Initv+0xf4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800114e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <_ZL12MX_GPIO_Initv+0xf8>)
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4818      	ldr	r0, [pc, #96]	; (80011c4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001164:	f001 faee 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001172:	2301      	movs	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4812      	ldr	r0, [pc, #72]	; (80011c8 <_ZL12MX_GPIO_Initv+0x100>)
 800117e:	f001 fae1 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001182:	2310      	movs	r3, #16
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118a:	2301      	movs	r3, #1
 800118c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <_ZL12MX_GPIO_Initv+0x104>)
 8001196:	f001 fad5 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800119a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <_ZL12MX_GPIO_Initv+0x104>)
 80011b0:	f001 fac8 	bl	8002744 <HAL_GPIO_Init>
}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	10210000 	.word	0x10210000
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020400 	.word	0x40020400

080011d0 <_Z23ProcessKeyCodeInContexth>:

/* USER CODE BEGIN 4 */
void ProcessKeyCodeInContext(uint8_t keyCode)
    {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  /*Updates the display_no
   * We could also just call display funcitons directly here, but since we have extra processing speed
   * Let's play with freeRTOS */
  if (display_no == 0) { /* This is the status screen, show if controller or not connected */
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <_Z23ProcessKeyCodeInContexth+0x78>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10d      	bne.n	80011fe <_Z23ProcessKeyCodeInContexth+0x2e>
    if (keyCode == BACK_BTN)
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d103      	bne.n	80011f0 <_Z23ProcessKeyCodeInContexth+0x20>
      display_no = 1;
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <_Z23ProcessKeyCodeInContexth+0x78>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e01e      	b.n	800122e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == FORWARD_BTN)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d11b      	bne.n	800122e <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 1;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <_Z23ProcessKeyCodeInContexth+0x78>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	e017      	b.n	800122e <_Z23ProcessKeyCodeInContexth+0x5e>
  } else if (display_no == 1) { /* Pair Controller Screen */
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <_Z23ProcessKeyCodeInContexth+0x78>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d113      	bne.n	800122e <_Z23ProcessKeyCodeInContexth+0x5e>
    if (keyCode == BACK_BTN)
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b03      	cmp	r3, #3
 800120a:	d103      	bne.n	8001214 <_Z23ProcessKeyCodeInContexth+0x44>
      display_no = 0;
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <_Z23ProcessKeyCodeInContexth+0x78>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
 8001212:	e00c      	b.n	800122e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == FORWARD_BTN)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b06      	cmp	r3, #6
 8001218:	d103      	bne.n	8001222 <_Z23ProcessKeyCodeInContexth+0x52>
      display_no = 0;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <_Z23ProcessKeyCodeInContexth+0x78>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
 8001220:	e005      	b.n	800122e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == SELECT_BTN) {
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b05      	cmp	r3, #5
 8001226:	d102      	bne.n	800122e <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 7; /* Only get to the pair status screen from here */
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_Z23ProcessKeyCodeInContexth+0x78>)
 800122a:	2207      	movs	r2, #7
 800122c:	701a      	strb	r2, [r3, #0]
  } else if (display_no == 2) {

  }
//  Serial.print("\r\nDisplay no is: ");
//  Serial.print(display_no);
  display_run_once = 0;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_Z23ProcessKeyCodeInContexth+0x7c>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
  display_force_update = 1;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <_Z23ProcessKeyCodeInContexth+0x80>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000684 	.word	0x20000684
 800124c:	20000688 	.word	0x20000688
 8001250:	20000687 	.word	0x20000687

08001254 <_Z17StartGetLatenciesPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerJoin */
void StartGetLatencies(void *argument)
    {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetLatencies */
  /* Infinite loop */
  for (;;)
      {
#if rtos_delay_view //this is just used to measure the delay of StartGetBT task
    if (timer_val_getBT >= 7) {
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <_Z17StartGetLatenciesPv+0x50>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	2b06      	cmp	r3, #6
 8001262:	d90a      	bls.n	800127a <_Z17StartGetLatenciesPv+0x26>
      Serial.print("\r\nWarning High CPU/BT Latency, getBT latency is: ");
 8001264:	4910      	ldr	r1, [pc, #64]	; (80012a8 <_Z17StartGetLatenciesPv+0x54>)
 8001266:	4811      	ldr	r0, [pc, #68]	; (80012ac <_Z17StartGetLatenciesPv+0x58>)
 8001268:	f7ff f9a6 	bl	80005b8 <_ZN5Print5printEPKc>
      Serial.print(timer_val_getBT);
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <_Z17StartGetLatenciesPv+0x50>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	220a      	movs	r2, #10
 8001272:	4619      	mov	r1, r3
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <_Z17StartGetLatenciesPv+0x58>)
 8001276:	f7ff f9bf 	bl	80005f8 <_ZN5Print5printEii>
    }
    if (timer_val_getUSB >= 4) {
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <_Z17StartGetLatenciesPv+0x5c>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	2b03      	cmp	r3, #3
 8001280:	d90a      	bls.n	8001298 <_Z17StartGetLatenciesPv+0x44>
      Serial.print("\r\nWarning High CPU/USB Latency, getUSB latency is: ");
 8001282:	490c      	ldr	r1, [pc, #48]	; (80012b4 <_Z17StartGetLatenciesPv+0x60>)
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <_Z17StartGetLatenciesPv+0x58>)
 8001286:	f7ff f997 	bl	80005b8 <_ZN5Print5printEPKc>
      Serial.print(timer_val_getUSB);
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <_Z17StartGetLatenciesPv+0x5c>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	220a      	movs	r2, #10
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <_Z17StartGetLatenciesPv+0x58>)
 8001294:	f7ff f9b0 	bl	80005f8 <_ZN5Print5printEii>
    //Serial.print(" ");
//    Serial.print(rumble_brequest_sent);
    //Serial.print("\r\nController Idle Time: ");
//    Serial.print(button_press_idle);
#endif
    osDelay(1000);
 8001298:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129c:	f009 f97e 	bl	800a59c <osDelay>
    if (timer_val_getBT >= 7) {
 80012a0:	e7dc      	b.n	800125c <_Z17StartGetLatenciesPv+0x8>
 80012a2:	bf00      	nop
 80012a4:	2000068a 	.word	0x2000068a
 80012a8:	080146a4 	.word	0x080146a4
 80012ac:	200003c0 	.word	0x200003c0
 80012b0:	2000068c 	.word	0x2000068c
 80012b4:	080146d8 	.word	0x080146d8

080012b8 <_Z10StartGetBTPv>:
  /* USER CODE END StartGetLatencies */
}
/* USER CODE END 4 */

void StartGetBT(void *argument)
    {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 80012c0:	48ae      	ldr	r0, [pc, #696]	; (800157c <_Z10StartGetBTPv+0x2c4>)
 80012c2:	f000 fd6b 	bl	8001d9c <_ZN8MAX3421eI3P102P9E4InitEv>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	bf0c      	ite	eq
 80012ce:	2301      	moveq	r3, #1
 80012d0:	2300      	movne	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <_Z10StartGetBTPv+0x2a>
    Serial.print(F("\r\nOSC did not start"));
 80012d8:	49a9      	ldr	r1, [pc, #676]	; (8001580 <_Z10StartGetBTPv+0x2c8>)
 80012da:	48aa      	ldr	r0, [pc, #680]	; (8001584 <_Z10StartGetBTPv+0x2cc>)
 80012dc:	f7ff f95e 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
    while (1)
 80012e0:	e7fe      	b.n	80012e0 <_Z10StartGetBTPv+0x28>
      ; // Halt
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 80012e2:	49a9      	ldr	r1, [pc, #676]	; (8001588 <_Z10StartGetBTPv+0x2d0>)
 80012e4:	48a7      	ldr	r0, [pc, #668]	; (8001584 <_Z10StartGetBTPv+0x2cc>)
 80012e6:	f7ff f959 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  /*Initialize our gamepad, this is for use on a PC*/
  gameHID.JoyX = 0;
 80012ea:	4ba8      	ldr	r3, [pc, #672]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 80012f0:	4ba6      	ldr	r3, [pc, #664]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 80012f6:	4ba5      	ldr	r3, [pc, #660]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 80012fc:	4ba3      	ldr	r3, [pc, #652]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 80012fe:	2200      	movs	r2, #0
 8001300:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 8001302:	4ba2      	ldr	r3, [pc, #648]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 8001308:	4ba0      	ldr	r3, [pc, #640]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 800130a:	2200      	movs	r2, #0
 800130c:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 800130e:	4a9f      	ldr	r2, [pc, #636]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 8001310:	7993      	ldrb	r3, [r2, #6]
 8001312:	f36f 0300 	bfc	r3, #0, #1
 8001316:	7193      	strb	r3, [r2, #6]

  /* Initalize our Xbox Controller data that we will send in our hid reports */
  xboxHID.startByte = 0x00;
 8001318:	4b9d      	ldr	r3, [pc, #628]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 800131e:	4b9c      	ldr	r3, [pc, #624]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001320:	2214      	movs	r2, #20
 8001322:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0x00;
 8001324:	4b9a      	ldr	r3, [pc, #616]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001326:	2200      	movs	r2, #0
 8001328:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 800132a:	4b99      	ldr	r3, [pc, #612]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 800132c:	2200      	movs	r2, #0
 800132e:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 8001330:	4b97      	ldr	r3, [pc, #604]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001332:	2200      	movs	r2, #0
 8001334:	715a      	strb	r2, [r3, #5]
  xboxHID.X = 0;
 8001336:	4b96      	ldr	r3, [pc, #600]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001338:	2200      	movs	r2, #0
 800133a:	719a      	strb	r2, [r3, #6]
  xboxHID.Y = 0;
 800133c:	4b94      	ldr	r3, [pc, #592]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 800133e:	2200      	movs	r2, #0
 8001340:	71da      	strb	r2, [r3, #7]
  xboxHID.BLACK = 0;
 8001342:	4b93      	ldr	r3, [pc, #588]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001344:	2200      	movs	r2, #0
 8001346:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 8001348:	4b91      	ldr	r3, [pc, #580]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 800134a:	2200      	movs	r2, #0
 800134c:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 800134e:	4b90      	ldr	r3, [pc, #576]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001350:	2200      	movs	r2, #0
 8001352:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 8001354:	4b8e      	ldr	r3, [pc, #568]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001356:	2200      	movs	r2, #0
 8001358:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 800135a:	4b8d      	ldr	r3, [pc, #564]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 800135c:	2200      	movs	r2, #0
 800135e:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 8001360:	4b8b      	ldr	r3, [pc, #556]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001362:	2200      	movs	r2, #0
 8001364:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 8001366:	4b8a      	ldr	r3, [pc, #552]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001368:	2200      	movs	r2, #0
 800136a:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 800136c:	4b88      	ldr	r3, [pc, #544]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 800136e:	2200      	movs	r2, #0
 8001370:	825a      	strh	r2, [r3, #18]
//		}
//		if(usb_failed || usb_failed2) {
//			Serial.print("\r\nUSBd failed");
//		}
#if rtos_delay_view
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 8001372:	4b88      	ldr	r3, [pc, #544]	; (8001594 <_Z10StartGetBTPv+0x2dc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b87      	ldr	r3, [pc, #540]	; (8001598 <_Z10StartGetBTPv+0x2e0>)
 800137c:	801a      	strh	r2, [r3, #0]
#endif
    Usb.Task();
 800137e:	487f      	ldr	r0, [pc, #508]	; (800157c <_Z10StartGetBTPv+0x2c4>)
 8001380:	f011 ff54 	bl	801322c <_ZN3USB4TaskEv>
    if (PS4.connected()) {
 8001384:	4885      	ldr	r0, [pc, #532]	; (800159c <_Z10StartGetBTPv+0x2e4>)
 8001386:	f7ff fba7 	bl	8000ad8 <_ZN5PS4BT9connectedEv>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 82c2 	beq.w	8001916 <_Z10StartGetBTPv+0x65e>
      ps4_connected = 1;
 8001392:	4b83      	ldr	r3, [pc, #524]	; (80015a0 <_Z10StartGetBTPv+0x2e8>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
      LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8001398:	2100      	movs	r1, #0
 800139a:	4882      	ldr	r0, [pc, #520]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 800139c:	f011 f8fb 	bl	8012596 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b80      	ldr	r3, [pc, #512]	; (80015a8 <_Z10StartGetBTPv+0x2f0>)
 80013a6:	701a      	strb	r2, [r3, #0]
      LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 80013a8:	2101      	movs	r1, #1
 80013aa:	487e      	ldr	r0, [pc, #504]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 80013ac:	f011 f8f3 	bl	8012596 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80013b0:	4603      	mov	r3, r0
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b7d      	ldr	r3, [pc, #500]	; (80015ac <_Z10StartGetBTPv+0x2f4>)
 80013b6:	701a      	strb	r2, [r3, #0]
      RightHatX_val = PS4.getAnalogHat(RightHatX);
 80013b8:	2102      	movs	r1, #2
 80013ba:	487a      	ldr	r0, [pc, #488]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 80013bc:	f011 f8eb 	bl	8012596 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b7a      	ldr	r3, [pc, #488]	; (80015b0 <_Z10StartGetBTPv+0x2f8>)
 80013c6:	701a      	strb	r2, [r3, #0]
      RightHatY_val = PS4.getAnalogHat(RightHatY);
 80013c8:	2103      	movs	r1, #3
 80013ca:	4876      	ldr	r0, [pc, #472]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 80013cc:	f011 f8e3 	bl	8012596 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b77      	ldr	r3, [pc, #476]	; (80015b4 <_Z10StartGetBTPv+0x2fc>)
 80013d6:	701a      	strb	r2, [r3, #0]
				gameHID.Joy2Y = 0;
				xboxHID.rightStickX = 0;
				xboxHID.rightStickY = 0;
			}
#elif !deadzone_enable
      gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 80013d8:	2100      	movs	r1, #0
 80013da:	4872      	ldr	r0, [pc, #456]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 80013dc:	f011 f8db 	bl	8012596 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80013e0:	4603      	mov	r3, r0
 80013e2:	3b80      	subs	r3, #128	; 0x80
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	b25a      	sxtb	r2, r3
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 80013ea:	709a      	strb	r2, [r3, #2]
      gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 80013ec:	2101      	movs	r1, #1
 80013ee:	486d      	ldr	r0, [pc, #436]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 80013f0:	f011 f8d1 	bl	8012596 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80013f4:	4603      	mov	r3, r0
 80013f6:	3b80      	subs	r3, #128	; 0x80
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	b25a      	sxtb	r2, r3
 80013fc:	4b63      	ldr	r3, [pc, #396]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 80013fe:	70da      	strb	r2, [r3, #3]
      xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 8001400:	4b62      	ldr	r3, [pc, #392]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 8001402:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b61      	ldr	r3, [pc, #388]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 800140c:	819a      	strh	r2, [r3, #12]
      xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 8001410:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 800141a:	81da      	strh	r2, [r3, #14]
      /* The Y axis by default is inverted on the Xbox */
      xboxHID.leftStickY = -xboxHID.leftStickY - 128;
 800141c:	4b5c      	ldr	r3, [pc, #368]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 800141e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001422:	b29a      	uxth	r2, r3
 8001424:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001428:	1a9b      	subs	r3, r3, r2
 800142a:	b29b      	uxth	r3, r3
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b58      	ldr	r3, [pc, #352]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001430:	81da      	strh	r2, [r3, #14]

      gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8001432:	2102      	movs	r1, #2
 8001434:	485b      	ldr	r0, [pc, #364]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 8001436:	f011 f8ae 	bl	8012596 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800143a:	4603      	mov	r3, r0
 800143c:	3b80      	subs	r3, #128	; 0x80
 800143e:	b2db      	uxtb	r3, r3
 8001440:	b25a      	sxtb	r2, r3
 8001442:	4b52      	ldr	r3, [pc, #328]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 8001444:	711a      	strb	r2, [r3, #4]
      gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8001446:	2103      	movs	r1, #3
 8001448:	4856      	ldr	r0, [pc, #344]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 800144a:	f011 f8a4 	bl	8012596 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800144e:	4603      	mov	r3, r0
 8001450:	3b80      	subs	r3, #128	; 0x80
 8001452:	b2db      	uxtb	r3, r3
 8001454:	b25a      	sxtb	r2, r3
 8001456:	4b4d      	ldr	r3, [pc, #308]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 8001458:	715a      	strb	r2, [r3, #5]
      xboxHID.rightStickX = gameHID.Joy2X << 8;
 800145a:	4b4c      	ldr	r3, [pc, #304]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 800145c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b21a      	sxth	r2, r3
 8001464:	4b4a      	ldr	r3, [pc, #296]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001466:	821a      	strh	r2, [r3, #16]
      xboxHID.rightStickY = gameHID.Joy2Y << 8;
 8001468:	4b48      	ldr	r3, [pc, #288]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 800146a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	b21a      	sxth	r2, r3
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001474:	825a      	strh	r2, [r3, #18]

      /* The Y axis by default is inverted on the Xbox */
      xboxHID.rightStickY = -xboxHID.rightStickY - 128;
 8001476:	4b46      	ldr	r3, [pc, #280]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001478:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800147c:	b29a      	uxth	r2, r3
 800147e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001482:	1a9b      	subs	r3, r3, r2
 8001484:	b29b      	uxth	r3, r3
 8001486:	b21a      	sxth	r2, r3
 8001488:	4b41      	ldr	r3, [pc, #260]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 800148a:	825a      	strh	r2, [r3, #18]
#endif
      xboxHID.L = PS4.getAnalogButton(L2);
 800148c:	2108      	movs	r1, #8
 800148e:	4845      	ldr	r0, [pc, #276]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 8001490:	f011 f868 	bl	8012564 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 800149a:	729a      	strb	r2, [r3, #10]
      xboxHID.R = PS4.getAnalogButton(R2);
 800149c:	2109      	movs	r1, #9
 800149e:	4841      	ldr	r0, [pc, #260]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 80014a0:	f011 f860 	bl	8012564 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b39      	ldr	r3, [pc, #228]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 80014aa:	72da      	strb	r2, [r3, #11]
      gameHID.Joy_LT = xboxHID.L - 128;
 80014ac:	4b38      	ldr	r3, [pc, #224]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 80014ae:	7a9b      	ldrb	r3, [r3, #10]
 80014b0:	3b80      	subs	r3, #128	; 0x80
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	4b35      	ldr	r3, [pc, #212]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 80014b8:	701a      	strb	r2, [r3, #0]
      gameHID.Joy_RT = xboxHID.R - 128;
 80014ba:	4b35      	ldr	r3, [pc, #212]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 80014bc:	7adb      	ldrb	r3, [r3, #11]
 80014be:	3b80      	subs	r3, #128	; 0x80
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	b25a      	sxtb	r2, r3
 80014c4:	4b31      	ldr	r3, [pc, #196]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 80014c6:	705a      	strb	r2, [r3, #1]

      if (PS4.getButtonClick(PS)) {
 80014c8:	2110      	movs	r1, #16
 80014ca:	4836      	ldr	r0, [pc, #216]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 80014cc:	f011 f80a 	bl	80124e4 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d008      	beq.n	80014e8 <_Z10StartGetBTPv+0x230>
        PS4.disconnect();
 80014d6:	4831      	ldr	r0, [pc, #196]	; (800159c <_Z10StartGetBTPv+0x2e4>)
 80014d8:	f00f feed 	bl	80112b6 <_ZN5BTHID10disconnectEv>
        display_run_once = 0;
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <_Z10StartGetBTPv+0x300>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
        rumble_once = 0;
 80014e2:	4b36      	ldr	r3, [pc, #216]	; (80015bc <_Z10StartGetBTPv+0x304>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
      }

      if (PS4.getButtonPress(TRIANGLE)) {
 80014e8:	210c      	movs	r1, #12
 80014ea:	482e      	ldr	r0, [pc, #184]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 80014ec:	f010 ffd2 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00b      	beq.n	800150e <_Z10StartGetBTPv+0x256>
        gameHID.ps4ButtonsTag.button_triangle = 1;
 80014f6:	4a25      	ldr	r2, [pc, #148]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 80014f8:	79d3      	ldrb	r3, [r2, #7]
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	71d3      	strb	r3, [r2, #7]
        xboxHID.Y = 0xFF;
 8001500:	4b23      	ldr	r3, [pc, #140]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001502:	22ff      	movs	r2, #255	; 0xff
 8001504:	71da      	strb	r2, [r3, #7]
        button_press_idle = 0;
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <_Z10StartGetBTPv+0x308>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	e007      	b.n	800151e <_Z10StartGetBTPv+0x266>
      } else {
        gameHID.ps4ButtonsTag.button_triangle = 0;
 800150e:	4a1f      	ldr	r2, [pc, #124]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 8001510:	79d3      	ldrb	r3, [r2, #7]
 8001512:	f36f 0300 	bfc	r3, #0, #1
 8001516:	71d3      	strb	r3, [r2, #7]
        xboxHID.Y = 0;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 800151a:	2200      	movs	r2, #0
 800151c:	71da      	strb	r2, [r3, #7]
      }

      if (PS4.getButtonPress(CIRCLE)) {
 800151e:	210d      	movs	r1, #13
 8001520:	4820      	ldr	r0, [pc, #128]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 8001522:	f010 ffb7 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00b      	beq.n	8001544 <_Z10StartGetBTPv+0x28c>
        gameHID.ps4ButtonsTag.button_circle = 1;
 800152c:	4a17      	ldr	r2, [pc, #92]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 800152e:	7993      	ldrb	r3, [r2, #6]
 8001530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001534:	7193      	strb	r3, [r2, #6]
        xboxHID.B = 0xFF;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001538:	22ff      	movs	r2, #255	; 0xff
 800153a:	715a      	strb	r2, [r3, #5]
        button_press_idle = 0;
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <_Z10StartGetBTPv+0x308>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e007      	b.n	8001554 <_Z10StartGetBTPv+0x29c>
      } else {
        gameHID.ps4ButtonsTag.button_circle = 0;
 8001544:	4a11      	ldr	r2, [pc, #68]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 8001546:	7993      	ldrb	r3, [r2, #6]
 8001548:	f36f 13c7 	bfc	r3, #7, #1
 800154c:	7193      	strb	r3, [r2, #6]
        xboxHID.B = 0;
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 8001550:	2200      	movs	r2, #0
 8001552:	715a      	strb	r2, [r3, #5]
      }

      if (PS4.getButtonPress(CROSS)) {
 8001554:	210e      	movs	r1, #14
 8001556:	4813      	ldr	r0, [pc, #76]	; (80015a4 <_Z10StartGetBTPv+0x2ec>)
 8001558:	f010 ff9c 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d030      	beq.n	80015c4 <_Z10StartGetBTPv+0x30c>
        gameHID.ps4ButtonsTag.button_cross = 1;
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <_Z10StartGetBTPv+0x2d4>)
 8001564:	7993      	ldrb	r3, [r2, #6]
 8001566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800156a:	7193      	strb	r3, [r2, #6]
        xboxHID.A = 0xFF;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <_Z10StartGetBTPv+0x2d8>)
 800156e:	22ff      	movs	r2, #255	; 0xff
 8001570:	711a      	strb	r2, [r3, #4]
        button_press_idle = 0;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_Z10StartGetBTPv+0x308>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e02c      	b.n	80015d4 <_Z10StartGetBTPv+0x31c>
 800157a:	bf00      	nop
 800157c:	200003d4 	.word	0x200003d4
 8001580:	0801470c 	.word	0x0801470c
 8001584:	200003c0 	.word	0x200003c0
 8001588:	08014720 	.word	0x08014720
 800158c:	20000690 	.word	0x20000690
 8001590:	20000698 	.word	0x20000698
 8001594:	200002c4 	.word	0x200002c4
 8001598:	2000068a 	.word	0x2000068a
 800159c:	200005a8 	.word	0x200005a8
 80015a0:	20000672 	.word	0x20000672
 80015a4:	20000620 	.word	0x20000620
 80015a8:	20000673 	.word	0x20000673
 80015ac:	20000674 	.word	0x20000674
 80015b0:	20000675 	.word	0x20000675
 80015b4:	20000676 	.word	0x20000676
 80015b8:	20000688 	.word	0x20000688
 80015bc:	20000671 	.word	0x20000671
 80015c0:	200006b0 	.word	0x200006b0
      } else {
        gameHID.ps4ButtonsTag.button_cross = 0;
 80015c4:	4aac      	ldr	r2, [pc, #688]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 80015c6:	7993      	ldrb	r3, [r2, #6]
 80015c8:	f36f 1386 	bfc	r3, #6, #1
 80015cc:	7193      	strb	r3, [r2, #6]
        xboxHID.A = 0;
 80015ce:	4bab      	ldr	r3, [pc, #684]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	711a      	strb	r2, [r3, #4]
      }

      if (PS4.getButtonPress(SQUARE)) {
 80015d4:	210f      	movs	r1, #15
 80015d6:	48aa      	ldr	r0, [pc, #680]	; (8001880 <_Z10StartGetBTPv+0x5c8>)
 80015d8:	f010 ff5c 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <_Z10StartGetBTPv+0x342>
        gameHID.ps4ButtonsTag.button_square = 1;
 80015e2:	4aa5      	ldr	r2, [pc, #660]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 80015e4:	79d3      	ldrb	r3, [r2, #7]
 80015e6:	f043 0302 	orr.w	r3, r3, #2
 80015ea:	71d3      	strb	r3, [r2, #7]
        xboxHID.X = 0xFF;
 80015ec:	4ba3      	ldr	r3, [pc, #652]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80015ee:	22ff      	movs	r2, #255	; 0xff
 80015f0:	719a      	strb	r2, [r3, #6]
        button_press_idle = 0;
 80015f2:	4ba4      	ldr	r3, [pc, #656]	; (8001884 <_Z10StartGetBTPv+0x5cc>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e007      	b.n	800160a <_Z10StartGetBTPv+0x352>
      } else {
        gameHID.ps4ButtonsTag.button_square = 0;
 80015fa:	4a9f      	ldr	r2, [pc, #636]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 80015fc:	79d3      	ldrb	r3, [r2, #7]
 80015fe:	f36f 0341 	bfc	r3, #1, #1
 8001602:	71d3      	strb	r3, [r2, #7]
        xboxHID.X = 0;
 8001604:	4b9d      	ldr	r3, [pc, #628]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 8001606:	2200      	movs	r2, #0
 8001608:	719a      	strb	r2, [r3, #6]
      }

      if (PS4.getButtonPress(UP)) {
 800160a:	2100      	movs	r1, #0
 800160c:	489c      	ldr	r0, [pc, #624]	; (8001880 <_Z10StartGetBTPv+0x5c8>)
 800160e:	f010 ff41 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00c      	beq.n	8001632 <_Z10StartGetBTPv+0x37a>
        gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8001618:	4a97      	ldr	r2, [pc, #604]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 800161a:	79d3      	ldrb	r3, [r2, #7]
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DUP;
 8001622:	4b96      	ldr	r3, [pc, #600]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 8001624:	789b      	ldrb	r3, [r3, #2]
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b93      	ldr	r3, [pc, #588]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 800162e:	709a      	strb	r2, [r3, #2]
 8001630:	e00b      	b.n	800164a <_Z10StartGetBTPv+0x392>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8001632:	4a91      	ldr	r2, [pc, #580]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 8001634:	79d3      	ldrb	r3, [r2, #7]
 8001636:	f36f 0382 	bfc	r3, #2, #1
 800163a:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 800163c:	4b8f      	ldr	r3, [pc, #572]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 800163e:	789b      	ldrb	r3, [r3, #2]
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b8d      	ldr	r3, [pc, #564]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 8001648:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(RIGHT)) {
 800164a:	2101      	movs	r1, #1
 800164c:	488c      	ldr	r0, [pc, #560]	; (8001880 <_Z10StartGetBTPv+0x5c8>)
 800164e:	f010 ff21 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00c      	beq.n	8001672 <_Z10StartGetBTPv+0x3ba>
        gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8001658:	4a87      	ldr	r2, [pc, #540]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 800165a:	79d3      	ldrb	r3, [r2, #7]
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DRIGHT;
 8001662:	4b86      	ldr	r3, [pc, #536]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 8001664:	789b      	ldrb	r3, [r3, #2]
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b83      	ldr	r3, [pc, #524]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 800166e:	709a      	strb	r2, [r3, #2]
 8001670:	e00b      	b.n	800168a <_Z10StartGetBTPv+0x3d2>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8001672:	4a81      	ldr	r2, [pc, #516]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 8001674:	79d3      	ldrb	r3, [r2, #7]
 8001676:	f36f 03c3 	bfc	r3, #3, #1
 800167a:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 800167c:	4b7f      	ldr	r3, [pc, #508]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 800167e:	789b      	ldrb	r3, [r3, #2]
 8001680:	f023 0308 	bic.w	r3, r3, #8
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b7d      	ldr	r3, [pc, #500]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 8001688:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(DOWN)) {
 800168a:	2102      	movs	r1, #2
 800168c:	487c      	ldr	r0, [pc, #496]	; (8001880 <_Z10StartGetBTPv+0x5c8>)
 800168e:	f010 ff01 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00c      	beq.n	80016b2 <_Z10StartGetBTPv+0x3fa>
        gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8001698:	4a77      	ldr	r2, [pc, #476]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 800169a:	79d3      	ldrb	r3, [r2, #7]
 800169c:	f043 0320 	orr.w	r3, r3, #32
 80016a0:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DDOWN;
 80016a2:	4b76      	ldr	r3, [pc, #472]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80016a4:	789b      	ldrb	r3, [r3, #2]
 80016a6:	f043 0302 	orr.w	r3, r3, #2
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b73      	ldr	r3, [pc, #460]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80016ae:	709a      	strb	r2, [r3, #2]
 80016b0:	e00b      	b.n	80016ca <_Z10StartGetBTPv+0x412>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_down = 0;
 80016b2:	4a71      	ldr	r2, [pc, #452]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 80016b4:	79d3      	ldrb	r3, [r2, #7]
 80016b6:	f36f 1345 	bfc	r3, #5, #1
 80016ba:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 80016bc:	4b6f      	ldr	r3, [pc, #444]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	f023 0302 	bic.w	r3, r3, #2
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b6d      	ldr	r3, [pc, #436]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80016c8:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(LEFT)) {
 80016ca:	2103      	movs	r1, #3
 80016cc:	486c      	ldr	r0, [pc, #432]	; (8001880 <_Z10StartGetBTPv+0x5c8>)
 80016ce:	f010 fee1 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00c      	beq.n	80016f2 <_Z10StartGetBTPv+0x43a>
        gameHID.ps4ButtonsTag.button_dpad_left = 1;
 80016d8:	4a67      	ldr	r2, [pc, #412]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 80016da:	79d3      	ldrb	r3, [r2, #7]
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DLEFT;
 80016e2:	4b66      	ldr	r3, [pc, #408]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80016e4:	789b      	ldrb	r3, [r3, #2]
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b63      	ldr	r3, [pc, #396]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80016ee:	709a      	strb	r2, [r3, #2]
 80016f0:	e00b      	b.n	800170a <_Z10StartGetBTPv+0x452>

      } else {
        gameHID.ps4ButtonsTag.button_dpad_left = 0;
 80016f2:	4a61      	ldr	r2, [pc, #388]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 80016f4:	79d3      	ldrb	r3, [r2, #7]
 80016f6:	f36f 1304 	bfc	r3, #4, #1
 80016fa:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 80016fc:	4b5f      	ldr	r3, [pc, #380]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80016fe:	789b      	ldrb	r3, [r3, #2]
 8001700:	f023 0304 	bic.w	r3, r3, #4
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b5d      	ldr	r3, [pc, #372]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 8001708:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(L1)) {
 800170a:	210a      	movs	r1, #10
 800170c:	485c      	ldr	r0, [pc, #368]	; (8001880 <_Z10StartGetBTPv+0x5c8>)
 800170e:	f010 fec1 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00b      	beq.n	8001730 <_Z10StartGetBTPv+0x478>
        gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8001718:	4a57      	ldr	r2, [pc, #348]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 800171a:	7993      	ldrb	r3, [r2, #6]
 800171c:	f043 0320 	orr.w	r3, r3, #32
 8001720:	7193      	strb	r3, [r2, #6]
        xboxHID.WHITE = 0xFF;
 8001722:	4b56      	ldr	r3, [pc, #344]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 8001724:	22ff      	movs	r2, #255	; 0xff
 8001726:	725a      	strb	r2, [r3, #9]
        button_press_idle = 0;
 8001728:	4b56      	ldr	r3, [pc, #344]	; (8001884 <_Z10StartGetBTPv+0x5cc>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e007      	b.n	8001740 <_Z10StartGetBTPv+0x488>

      } else {
        gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001730:	4a51      	ldr	r2, [pc, #324]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 8001732:	7993      	ldrb	r3, [r2, #6]
 8001734:	f36f 1345 	bfc	r3, #5, #1
 8001738:	7193      	strb	r3, [r2, #6]
        xboxHID.WHITE = 0;
 800173a:	4b50      	ldr	r3, [pc, #320]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 800173c:	2200      	movs	r2, #0
 800173e:	725a      	strb	r2, [r3, #9]
      }

      if (PS4.getButtonPress(L3)) {
 8001740:	2106      	movs	r1, #6
 8001742:	484f      	ldr	r0, [pc, #316]	; (8001880 <_Z10StartGetBTPv+0x5c8>)
 8001744:	f010 fea6 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00f      	beq.n	800176e <_Z10StartGetBTPv+0x4b6>
        gameHID.ps4ButtonsTag.button_left_thumb = 1;
 800174e:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 8001750:	79d3      	ldrb	r3, [r2, #7]
 8001752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001756:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_LS_BTN;
 8001758:	4b48      	ldr	r3, [pc, #288]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 800175a:	789b      	ldrb	r3, [r3, #2]
 800175c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b46      	ldr	r3, [pc, #280]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 8001764:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <_Z10StartGetBTPv+0x5cc>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e00b      	b.n	8001786 <_Z10StartGetBTPv+0x4ce>
      } else {
        gameHID.ps4ButtonsTag.button_left_thumb = 0;
 800176e:	4a42      	ldr	r2, [pc, #264]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 8001770:	79d3      	ldrb	r3, [r2, #7]
 8001772:	f36f 1386 	bfc	r3, #6, #1
 8001776:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 8001778:	4b40      	ldr	r3, [pc, #256]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 800177a:	789b      	ldrb	r3, [r3, #2]
 800177c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b3e      	ldr	r3, [pc, #248]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 8001784:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(R1)) {
 8001786:	210b      	movs	r1, #11
 8001788:	483d      	ldr	r0, [pc, #244]	; (8001880 <_Z10StartGetBTPv+0x5c8>)
 800178a:	f010 fe83 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00b      	beq.n	80017ac <_Z10StartGetBTPv+0x4f4>
        gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8001794:	4a38      	ldr	r2, [pc, #224]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 8001796:	7993      	ldrb	r3, [r2, #6]
 8001798:	f043 0310 	orr.w	r3, r3, #16
 800179c:	7193      	strb	r3, [r2, #6]
        xboxHID.BLACK = 0xFF;
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80017a0:	22ff      	movs	r2, #255	; 0xff
 80017a2:	721a      	strb	r2, [r3, #8]
        button_press_idle = 0;
 80017a4:	4b37      	ldr	r3, [pc, #220]	; (8001884 <_Z10StartGetBTPv+0x5cc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e007      	b.n	80017bc <_Z10StartGetBTPv+0x504>
      } else {
        gameHID.ps4ButtonsTag.button_right_trigger = 0;
 80017ac:	4a32      	ldr	r2, [pc, #200]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 80017ae:	7993      	ldrb	r3, [r2, #6]
 80017b0:	f36f 1304 	bfc	r3, #4, #1
 80017b4:	7193      	strb	r3, [r2, #6]
        xboxHID.BLACK = 0;
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	721a      	strb	r2, [r3, #8]
      }

      if (PS4.getButtonPress(R3)) {
 80017bc:	2107      	movs	r1, #7
 80017be:	4830      	ldr	r0, [pc, #192]	; (8001880 <_Z10StartGetBTPv+0x5c8>)
 80017c0:	f010 fe68 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00f      	beq.n	80017ea <_Z10StartGetBTPv+0x532>
        gameHID.ps4ButtonsTag.button_right_thumb = 1;
 80017ca:	4a2b      	ldr	r2, [pc, #172]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 80017cc:	79d3      	ldrb	r3, [r2, #7]
 80017ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d2:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_RS_BTN;
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80017d6:	789b      	ldrb	r3, [r3, #2]
 80017d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4b27      	ldr	r3, [pc, #156]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80017e0:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 80017e2:	4b28      	ldr	r3, [pc, #160]	; (8001884 <_Z10StartGetBTPv+0x5cc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e00b      	b.n	8001802 <_Z10StartGetBTPv+0x54a>
      } else {
        gameHID.ps4ButtonsTag.button_right_thumb = 0;
 80017ea:	4a23      	ldr	r2, [pc, #140]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 80017ec:	79d3      	ldrb	r3, [r2, #7]
 80017ee:	f36f 13c7 	bfc	r3, #7, #1
 80017f2:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 80017f6:	789b      	ldrb	r3, [r3, #2]
 80017f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 8001800:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(SHARE)) {
 8001802:	2104      	movs	r1, #4
 8001804:	481e      	ldr	r0, [pc, #120]	; (8001880 <_Z10StartGetBTPv+0x5c8>)
 8001806:	f010 fe45 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00f      	beq.n	8001830 <_Z10StartGetBTPv+0x578>
        gameHID.ps4ButtonsTag.button_share = 1;
 8001810:	4a19      	ldr	r2, [pc, #100]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 8001812:	7993      	ldrb	r3, [r2, #6]
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons |= XBOX_BACK_BTN;
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 800181c:	789b      	ldrb	r3, [r3, #2]
 800181e:	f043 0320 	orr.w	r3, r3, #32
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 8001826:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <_Z10StartGetBTPv+0x5cc>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e00b      	b.n	8001848 <_Z10StartGetBTPv+0x590>
      } else {
        gameHID.ps4ButtonsTag.button_share = 0;
 8001830:	4a11      	ldr	r2, [pc, #68]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 8001832:	7993      	ldrb	r3, [r2, #6]
 8001834:	f36f 03c3 	bfc	r3, #3, #1
 8001838:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 800183c:	789b      	ldrb	r3, [r3, #2]
 800183e:	f023 0320 	bic.w	r3, r3, #32
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 8001846:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(OPTIONS)) {
 8001848:	2105      	movs	r1, #5
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <_Z10StartGetBTPv+0x5c8>)
 800184c:	f010 fe22 	bl	8012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d018      	beq.n	8001888 <_Z10StartGetBTPv+0x5d0>
        gameHID.ps4ButtonsTag.button_start = 1;
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <_Z10StartGetBTPv+0x5c0>)
 8001858:	7993      	ldrb	r3, [r2, #6]
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons |= XBOX_START_BTN;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 8001862:	789b      	ldrb	r3, [r3, #2]
 8001864:	f043 0310 	orr.w	r3, r3, #16
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <_Z10StartGetBTPv+0x5c4>)
 800186c:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <_Z10StartGetBTPv+0x5cc>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e014      	b.n	80018a0 <_Z10StartGetBTPv+0x5e8>
 8001876:	bf00      	nop
 8001878:	20000690 	.word	0x20000690
 800187c:	20000698 	.word	0x20000698
 8001880:	20000620 	.word	0x20000620
 8001884:	200006b0 	.word	0x200006b0
      } else {
        gameHID.ps4ButtonsTag.button_start = 0;
 8001888:	4a3b      	ldr	r2, [pc, #236]	; (8001978 <_Z10StartGetBTPv+0x6c0>)
 800188a:	7993      	ldrb	r3, [r2, #6]
 800188c:	f36f 0382 	bfc	r3, #2, #1
 8001890:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 8001892:	4b3a      	ldr	r3, [pc, #232]	; (800197c <_Z10StartGetBTPv+0x6c4>)
 8001894:	789b      	ldrb	r3, [r3, #2]
 8001896:	f023 0310 	bic.w	r3, r3, #16
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b37      	ldr	r3, [pc, #220]	; (800197c <_Z10StartGetBTPv+0x6c4>)
 800189e:	709a      	strb	r2, [r3, #2]
      }

      /*We don't want to spam the PS4 controller with rumble updates
       * If we do not do this, latency increases greatly */
      new_rumble_val_L = rx_buf[3];
 80018a0:	4b37      	ldr	r3, [pc, #220]	; (8001980 <_Z10StartGetBTPv+0x6c8>)
 80018a2:	78da      	ldrb	r2, [r3, #3]
 80018a4:	4b37      	ldr	r3, [pc, #220]	; (8001984 <_Z10StartGetBTPv+0x6cc>)
 80018a6:	701a      	strb	r2, [r3, #0]
      new_rumble_val_R = rx_buf[5];
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <_Z10StartGetBTPv+0x6c8>)
 80018aa:	795a      	ldrb	r2, [r3, #5]
 80018ac:	4b36      	ldr	r3, [pc, #216]	; (8001988 <_Z10StartGetBTPv+0x6d0>)
 80018ae:	701a      	strb	r2, [r3, #0]

      if (new_rumble_val_L != old_rumble_val_L || new_rumble_val_R != old_rumble_val_R) {
 80018b0:	4b34      	ldr	r3, [pc, #208]	; (8001984 <_Z10StartGetBTPv+0x6cc>)
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	4b35      	ldr	r3, [pc, #212]	; (800198c <_Z10StartGetBTPv+0x6d4>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d105      	bne.n	80018c8 <_Z10StartGetBTPv+0x610>
 80018bc:	4b32      	ldr	r3, [pc, #200]	; (8001988 <_Z10StartGetBTPv+0x6d0>)
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	4b33      	ldr	r3, [pc, #204]	; (8001990 <_Z10StartGetBTPv+0x6d8>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d00f      	beq.n	80018e8 <_Z10StartGetBTPv+0x630>
        PS4.setRumbleOn(new_rumble_val_L, new_rumble_val_R);
 80018c8:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <_Z10StartGetBTPv+0x6cc>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4a2e      	ldr	r2, [pc, #184]	; (8001988 <_Z10StartGetBTPv+0x6d0>)
 80018ce:	7812      	ldrb	r2, [r2, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4830      	ldr	r0, [pc, #192]	; (8001994 <_Z10StartGetBTPv+0x6dc>)
 80018d4:	f7ff f887 	bl	80009e6 <_ZN9PS4Parser11setRumbleOnEhh>
        old_rumble_val_L = new_rumble_val_L;
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <_Z10StartGetBTPv+0x6cc>)
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	4b2b      	ldr	r3, [pc, #172]	; (800198c <_Z10StartGetBTPv+0x6d4>)
 80018de:	701a      	strb	r2, [r3, #0]
        old_rumble_val_R = new_rumble_val_R;
 80018e0:	4b29      	ldr	r3, [pc, #164]	; (8001988 <_Z10StartGetBTPv+0x6d0>)
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <_Z10StartGetBTPv+0x6d8>)
 80018e6:	701a      	strb	r2, [r3, #0]
      }
      /* After roughly 5+minutes of idle time, disconnect controller
       * Not the best solution since the rate the counter increases is based on BT Latency */
      if (button_press_idle > 400000) {
 80018e8:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <_Z10StartGetBTPv+0x6e0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a2b      	ldr	r2, [pc, #172]	; (800199c <_Z10StartGetBTPv+0x6e4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d90b      	bls.n	800190a <_Z10StartGetBTPv+0x652>
        PS4.disconnect();
 80018f2:	482b      	ldr	r0, [pc, #172]	; (80019a0 <_Z10StartGetBTPv+0x6e8>)
 80018f4:	f00f fcdf 	bl	80112b6 <_ZN5BTHID10disconnectEv>
        rumble_once = 0;
 80018f8:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <_Z10StartGetBTPv+0x6ec>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
        button_press_idle = 0;
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <_Z10StartGetBTPv+0x6e0>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
        display_run_once = 0;
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <_Z10StartGetBTPv+0x6f0>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
      }
      button_press_idle++;
 800190a:	4b23      	ldr	r3, [pc, #140]	; (8001998 <_Z10StartGetBTPv+0x6e0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <_Z10StartGetBTPv+0x6e0>)
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	e021      	b.n	800195a <_Z10StartGetBTPv+0x6a2>

    } else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191a:	4824      	ldr	r0, [pc, #144]	; (80019ac <_Z10StartGetBTPv+0x6f4>)
 800191c:	f001 f8a6 	bl	8002a6c <HAL_GPIO_ReadPin>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	bf0c      	ite	eq
 8001926:	2301      	moveq	r3, #1
 8001928:	2300      	movne	r3, #0
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d011      	beq.n	8001954 <_Z10StartGetBTPv+0x69c>
      if (!buttonPressed) {
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <_Z10StartGetBTPv+0x6f8>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	f083 0301 	eor.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d006      	beq.n	800194c <_Z10StartGetBTPv+0x694>
        Serial.print(F("\r\nButton Pressed"));
 800193e:	491d      	ldr	r1, [pc, #116]	; (80019b4 <_Z10StartGetBTPv+0x6fc>)
 8001940:	481d      	ldr	r0, [pc, #116]	; (80019b8 <_Z10StartGetBTPv+0x700>)
 8001942:	f7fe fe2b 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
        PS4.pair(); // Start paring routine if user button was just pressed
 8001946:	4816      	ldr	r0, [pc, #88]	; (80019a0 <_Z10StartGetBTPv+0x6e8>)
 8001948:	f7fe ffe3 	bl	8000912 <_ZN5BTHID4pairEv>
      }
      buttonPressed = true;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <_Z10StartGetBTPv+0x6f8>)
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e002      	b.n	800195a <_Z10StartGetBTPv+0x6a2>
    } else
      buttonPressed = false;
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <_Z10StartGetBTPv+0x6f8>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
#if rtos_delay_view
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getBT;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <_Z10StartGetBTPv+0x704>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <_Z10StartGetBTPv+0x708>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <_Z10StartGetBTPv+0x708>)
 800196c:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(1);
 800196e:	2001      	movs	r0, #1
 8001970:	f008 fe14 	bl	800a59c <osDelay>
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 8001974:	e4fd      	b.n	8001372 <_Z10StartGetBTPv+0xba>
 8001976:	bf00      	nop
 8001978:	20000690 	.word	0x20000690
 800197c:	20000698 	.word	0x20000698
 8001980:	200001cc 	.word	0x200001cc
 8001984:	200006ae 	.word	0x200006ae
 8001988:	200006af 	.word	0x200006af
 800198c:	200006ac 	.word	0x200006ac
 8001990:	200006ad 	.word	0x200006ad
 8001994:	20000620 	.word	0x20000620
 8001998:	200006b0 	.word	0x200006b0
 800199c:	00061a80 	.word	0x00061a80
 80019a0:	200005a8 	.word	0x200005a8
 80019a4:	20000671 	.word	0x20000671
 80019a8:	20000688 	.word	0x20000688
 80019ac:	40020800 	.word	0x40020800
 80019b0:	20000670 	.word	0x20000670
 80019b4:	08014740 	.word	0x08014740
 80019b8:	200003c0 	.word	0x200003c0
 80019bc:	200002c4 	.word	0x200002c4
 80019c0:	2000068a 	.word	0x2000068a

080019c4 <_Z12StartSendUSBPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
    {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
  MX_USB_DEVICE_Init();
 80019cc:	f00b fa5e 	bl	800ce8c <MX_USB_DEVICE_Init>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
#endif

#if OG_XBOX_SETUP
#if rtos_delay_view
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <_Z12StartSendUSBPv+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <_Z12StartSendUSBPv+0x44>)
 80019da:	801a      	strh	r2, [r3, #0]
#endif
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 80019dc:	2214      	movs	r2, #20
 80019de:	490b      	ldr	r1, [pc, #44]	; (8001a0c <_Z12StartSendUSBPv+0x48>)
 80019e0:	480b      	ldr	r0, [pc, #44]	; (8001a10 <_Z12StartSendUSBPv+0x4c>)
 80019e2:	f007 fa77 	bl	8008ed4 <USBD_HID_SendReport>
#if rtos_delay_view
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getUSB;
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <_Z12StartSendUSBPv+0x40>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <_Z12StartSendUSBPv+0x44>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <_Z12StartSendUSBPv+0x44>)
 80019f8:	801a      	strh	r2, [r3, #0]
#endif
#endif
    osDelay(1);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f008 fdce 	bl	800a59c <osDelay>
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 8001a00:	e7e6      	b.n	80019d0 <_Z12StartSendUSBPv+0xc>
 8001a02:	bf00      	nop
 8001a04:	200002c4 	.word	0x200002c4
 8001a08:	2000068c 	.word	0x2000068c
 8001a0c:	20000698 	.word	0x20000698
 8001a10:	20005490 	.word	0x20005490

08001a14 <_Z19StartControllerJoinPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerJoin */
void StartControllerJoin(void *argument)
    {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerJoin */
  /* Infinite loop */
  for (;;)
      {
    if (PS4.connected() && !rumble_once) {
 8001a1c:	4810      	ldr	r0, [pc, #64]	; (8001a60 <_Z19StartControllerJoinPv+0x4c>)
 8001a1e:	f7ff f85b 	bl	8000ad8 <_ZN5PS4BT9connectedEv>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <_Z19StartControllerJoinPv+0x20>
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <_Z19StartControllerJoinPv+0x50>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <_Z19StartControllerJoinPv+0x20>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <_Z19StartControllerJoinPv+0x22>
 8001a34:	2300      	movs	r3, #0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00d      	beq.n	8001a56 <_Z19StartControllerJoinPv+0x42>
      PS4.setRumbleOn(RumbleLow);
 8001a3a:	2120      	movs	r1, #32
 8001a3c:	480a      	ldr	r0, [pc, #40]	; (8001a68 <_Z19StartControllerJoinPv+0x54>)
 8001a3e:	f7fe ffba 	bl	80009b6 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
      osDelay(500);
 8001a42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a46:	f008 fda9 	bl	800a59c <osDelay>
      PS4.setRumbleOff();
 8001a4a:	4807      	ldr	r0, [pc, #28]	; (8001a68 <_Z19StartControllerJoinPv+0x54>)
 8001a4c:	f7fe ffa6 	bl	800099c <_ZN9PS4Parser12setRumbleOffEv>
      rumble_once = 1;
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <_Z19StartControllerJoinPv+0x50>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
    }
    osDelay(300);
 8001a56:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a5a:	f008 fd9f 	bl	800a59c <osDelay>
    if (PS4.connected() && !rumble_once) {
 8001a5e:	e7dd      	b.n	8001a1c <_Z19StartControllerJoinPv+0x8>
 8001a60:	200005a8 	.word	0x200005a8
 8001a64:	20000671 	.word	0x20000671
 8001a68:	20000620 	.word	0x20000620

08001a6c <_Z16StartButtonPressPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonPress */
void StartButtonPress(void *argument)
    {
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPress */
  /* Infinite loop */
  for (;;)
      {
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a78:	4820      	ldr	r0, [pc, #128]	; (8001afc <_Z16StartButtonPressPv+0x90>)
 8001a7a:	f000 fff7 	bl	8002a6c <HAL_GPIO_ReadPin>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	b25c      	sxtb	r4, r3
        (HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8001a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a88:	481d      	ldr	r0, [pc, #116]	; (8001b00 <_Z16StartButtonPressPv+0x94>)
 8001a8a:	f000 ffef 	bl	8002a6c <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	005b      	lsls	r3, r3, #1
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001a92:	b25b      	sxtb	r3, r3
 8001a94:	4323      	orrs	r3, r4
 8001a96:	b25c      	sxtb	r4, r3
        (HAL_GPIO_ReadPin(FORWARD_BTN_GPIO) << 0);
 8001a98:	2110      	movs	r1, #16
 8001a9a:	4819      	ldr	r0, [pc, #100]	; (8001b00 <_Z16StartButtonPressPv+0x94>)
 8001a9c:	f000 ffe6 	bl	8002a6c <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b25b      	sxtb	r3, r3
        (HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8001aa4:	4323      	orrs	r3, r4
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	b2da      	uxtb	r2, r3
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <_Z16StartButtonPressPv+0x98>)
 8001aac:	701a      	strb	r2, [r3, #0]

    if (BUTTON_PRESSED) {
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_Z16StartButtonPressPv+0x98>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b07      	cmp	r3, #7
 8001ab4:	d018      	beq.n	8001ae8 <_Z16StartButtonPressPv+0x7c>
      if (buttonDebounced == 1) {  // you only get here if the same button combination has been pressed for 100mS
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <_Z16StartButtonPressPv+0x9c>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d110      	bne.n	8001ae0 <_Z16StartButtonPressPv+0x74>
        if (buttonProcessed == 0) { // here's where we do the real work on the keyboard, and ensure we only do it once/keypress
 8001abe:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <_Z16StartButtonPressPv+0xa0>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <_Z16StartButtonPressPv+0x88>
          buttonProcessed = 1;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <_Z16StartButtonPressPv+0xa0>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
          ProcessKeyCodeInContext(keyCode);
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <_Z16StartButtonPressPv+0x98>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fb7d 	bl	80011d0 <_Z23ProcessKeyCodeInContexth>
          Serial.print("Button Pressed\n");
 8001ad6:	490e      	ldr	r1, [pc, #56]	; (8001b10 <_Z16StartButtonPressPv+0xa4>)
 8001ad8:	480e      	ldr	r0, [pc, #56]	; (8001b14 <_Z16StartButtonPressPv+0xa8>)
 8001ada:	f7fe fd6d 	bl	80005b8 <_ZN5Print5printEPKc>
 8001ade:	e009      	b.n	8001af4 <_Z16StartButtonPressPv+0x88>
        }
      } else {
        buttonDebounced = true;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <_Z16StartButtonPressPv+0x9c>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	e005      	b.n	8001af4 <_Z16StartButtonPressPv+0x88>
      }
    } else {
      buttonDebounced = false;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <_Z16StartButtonPressPv+0x9c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
      buttonProcessed = false;
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <_Z16StartButtonPressPv+0xa0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
    }
//  	Serial.print("\r\n");
//  	Serial.print(keyCode);
    osDelay(100);
 8001af4:	2064      	movs	r0, #100	; 0x64
 8001af6:	f008 fd51 	bl	800a59c <osDelay>
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001afa:	e7bb      	b.n	8001a74 <_Z16StartButtonPressPv+0x8>
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000685 	.word	0x20000685
 8001b0c:	20000686 	.word	0x20000686
 8001b10:	08014754 	.word	0x08014754
 8001b14:	200003c0 	.word	0x200003c0

08001b18 <_Z14StartUpdateLCDPv>:
 * @brief Function implementing the updateLCD thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUpdateLCD */
void StartUpdateLCD(void *argument) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  //ssd1306_TestAll();
  //ssd1306_Fill(Black_);
  //ssd1306_UpdateScreen();
  for (;;) {
#if rtos_delay_view
    timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14);
 8001b20:	4b7e      	ldr	r3, [pc, #504]	; (8001d1c <_Z14StartUpdateLCDPv+0x204>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	4b7d      	ldr	r3, [pc, #500]	; (8001d20 <_Z14StartUpdateLCDPv+0x208>)
 8001b2a:	801a      	strh	r2, [r3, #0]
#endif
    if (display_run_once == 0) {
 8001b2c:	4b7d      	ldr	r3, [pc, #500]	; (8001d24 <_Z14StartUpdateLCDPv+0x20c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f040 80e4 	bne.w	8001cfe <_Z14StartUpdateLCDPv+0x1e6>
      ssd1306_Fill(Black_);
 8001b36:	2000      	movs	r0, #0
 8001b38:	f006 fe46 	bl	80087c8 <ssd1306_Fill>
      ssd1306_UpdateScreen();
 8001b3c:	f006 fe68 	bl	8008810 <ssd1306_UpdateScreen>
      switch (display_no) {
 8001b40:	4b79      	ldr	r3, [pc, #484]	; (8001d28 <_Z14StartUpdateLCDPv+0x210>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b07      	cmp	r3, #7
 8001b46:	f000 80a8 	beq.w	8001c9a <_Z14StartUpdateLCDPv+0x182>
 8001b4a:	2b07      	cmp	r3, #7
 8001b4c:	f300 80d7 	bgt.w	8001cfe <_Z14StartUpdateLCDPv+0x1e6>
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <_Z14StartUpdateLCDPv+0x44>
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	f000 808a 	beq.w	8001c6e <_Z14StartUpdateLCDPv+0x156>
 8001b5a:	e0d0      	b.n	8001cfe <_Z14StartUpdateLCDPv+0x1e6>
        case 0: {
          Serial.print("\nInside case 0\n");
 8001b5c:	4973      	ldr	r1, [pc, #460]	; (8001d2c <_Z14StartUpdateLCDPv+0x214>)
 8001b5e:	4874      	ldr	r0, [pc, #464]	; (8001d30 <_Z14StartUpdateLCDPv+0x218>)
 8001b60:	f7fe fd2a 	bl	80005b8 <_ZN5Print5printEPKc>
          uint8_t alternate_print = 1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
          if (!PS4.connected()) {
 8001b68:	4872      	ldr	r0, [pc, #456]	; (8001d34 <_Z14StartUpdateLCDPv+0x21c>)
 8001b6a:	f7fe ffb5 	bl	8000ad8 <_ZN5PS4BT9connectedEv>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f083 0301 	eor.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d017      	beq.n	8001baa <_Z14StartUpdateLCDPv+0x92>
            ssd1306_SetCursor((128 - 11 * 3) / 2, 0);
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	202f      	movs	r0, #47	; 0x2f
 8001b7e:	f006 ff7d 	bl	8008a7c <ssd1306_SetCursor>
            ssd1306_WriteString("Not", Font_11x18, White_);
 8001b82:	4a6d      	ldr	r2, [pc, #436]	; (8001d38 <_Z14StartUpdateLCDPv+0x220>)
 8001b84:	2301      	movs	r3, #1
 8001b86:	ca06      	ldmia	r2, {r1, r2}
 8001b88:	486c      	ldr	r0, [pc, #432]	; (8001d3c <_Z14StartUpdateLCDPv+0x224>)
 8001b8a:	f006 ff51 	bl	8008a30 <ssd1306_WriteString>
            display_force_update = 0;
 8001b8e:	4b6c      	ldr	r3, [pc, #432]	; (8001d40 <_Z14StartUpdateLCDPv+0x228>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
            ssd1306_SetCursor((128 - 11 * 9) / 2, 26);
 8001b94:	211a      	movs	r1, #26
 8001b96:	200e      	movs	r0, #14
 8001b98:	f006 ff70 	bl	8008a7c <ssd1306_SetCursor>
            ssd1306_WriteString("Connected", Font_11x18, White_);
 8001b9c:	4a66      	ldr	r2, [pc, #408]	; (8001d38 <_Z14StartUpdateLCDPv+0x220>)
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	ca06      	ldmia	r2, {r1, r2}
 8001ba2:	4868      	ldr	r0, [pc, #416]	; (8001d44 <_Z14StartUpdateLCDPv+0x22c>)
 8001ba4:	f006 ff44 	bl	8008a30 <ssd1306_WriteString>
 8001ba8:	e017      	b.n	8001bda <_Z14StartUpdateLCDPv+0xc2>
          } else if (PS4.connected()) {
 8001baa:	4862      	ldr	r0, [pc, #392]	; (8001d34 <_Z14StartUpdateLCDPv+0x21c>)
 8001bac:	f7fe ff94 	bl	8000ad8 <_ZN5PS4BT9connectedEv>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d011      	beq.n	8001bda <_Z14StartUpdateLCDPv+0xc2>
            ssd1306_SetCursor((128 - 11 * 9) / 2, 26);
 8001bb6:	211a      	movs	r1, #26
 8001bb8:	200e      	movs	r0, #14
 8001bba:	f006 ff5f 	bl	8008a7c <ssd1306_SetCursor>
            ssd1306_WriteString("Connected", Font_11x18, White_);
 8001bbe:	4a5e      	ldr	r2, [pc, #376]	; (8001d38 <_Z14StartUpdateLCDPv+0x220>)
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	ca06      	ldmia	r2, {r1, r2}
 8001bc4:	485f      	ldr	r0, [pc, #380]	; (8001d44 <_Z14StartUpdateLCDPv+0x22c>)
 8001bc6:	f006 ff33 	bl	8008a30 <ssd1306_WriteString>
            alternate_print = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
            display_run_once = 1;
 8001bce:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <_Z14StartUpdateLCDPv+0x20c>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
            display_force_update = 0;
 8001bd4:	4b5a      	ldr	r3, [pc, #360]	; (8001d40 <_Z14StartUpdateLCDPv+0x228>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
          }
          ssd1306_UpdateScreen();
 8001bda:	f006 fe19 	bl	8008810 <ssd1306_UpdateScreen>
          Serial.print("\nInside case 0-1\n");
 8001bde:	495a      	ldr	r1, [pc, #360]	; (8001d48 <_Z14StartUpdateLCDPv+0x230>)
 8001be0:	4853      	ldr	r0, [pc, #332]	; (8001d30 <_Z14StartUpdateLCDPv+0x218>)
 8001be2:	f7fe fce9 	bl	80005b8 <_ZN5Print5printEPKc>
          while (!PS4.connected() && display_force_update == 0) {
 8001be6:	4853      	ldr	r0, [pc, #332]	; (8001d34 <_Z14StartUpdateLCDPv+0x21c>)
 8001be8:	f7fe ff76 	bl	8000ad8 <_ZN5PS4BT9connectedEv>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f083 0301 	eor.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <_Z14StartUpdateLCDPv+0xec>
 8001bf8:	4b51      	ldr	r3, [pc, #324]	; (8001d40 <_Z14StartUpdateLCDPv+0x228>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <_Z14StartUpdateLCDPv+0xec>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <_Z14StartUpdateLCDPv+0xee>
 8001c04:	2300      	movs	r3, #0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <_Z14StartUpdateLCDPv+0xfa>
            osDelay(100);
 8001c0a:	2064      	movs	r0, #100	; 0x64
 8001c0c:	f008 fcc6 	bl	800a59c <osDelay>
          while (!PS4.connected() && display_force_update == 0) {
 8001c10:	e7e9      	b.n	8001be6 <_Z14StartUpdateLCDPv+0xce>
          }
          /* If the user presses a Button, interrupt and show next screen */
          if (display_force_update == 1) {
 8001c12:	4b4b      	ldr	r3, [pc, #300]	; (8001d40 <_Z14StartUpdateLCDPv+0x228>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d106      	bne.n	8001c28 <_Z14StartUpdateLCDPv+0x110>
            display_force_update = 0;
 8001c1a:	4b49      	ldr	r3, [pc, #292]	; (8001d40 <_Z14StartUpdateLCDPv+0x228>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
            display_run_once = 0;
 8001c20:	4b40      	ldr	r3, [pc, #256]	; (8001d24 <_Z14StartUpdateLCDPv+0x20c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
            break;
 8001c26:	e06a      	b.n	8001cfe <_Z14StartUpdateLCDPv+0x1e6>
          }
          /* When the controller is finally paired, update current screen
           * Only runs if the first PS4.connected() above does not run*/
          if (PS4.connected() && alternate_print) {
 8001c28:	4842      	ldr	r0, [pc, #264]	; (8001d34 <_Z14StartUpdateLCDPv+0x21c>)
 8001c2a:	f7fe ff55 	bl	8000ad8 <_ZN5PS4BT9connectedEv>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d004      	beq.n	8001c3e <_Z14StartUpdateLCDPv+0x126>
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <_Z14StartUpdateLCDPv+0x126>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <_Z14StartUpdateLCDPv+0x128>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d05b      	beq.n	8001cfc <_Z14StartUpdateLCDPv+0x1e4>
            ssd1306_Fill(Black_);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f006 fdbf 	bl	80087c8 <ssd1306_Fill>
            ssd1306_UpdateScreen();
 8001c4a:	f006 fde1 	bl	8008810 <ssd1306_UpdateScreen>
            //				    ssd1306_SetCursor(25,0);
            //				    ssd1306_WriteString("Status:", Font_11x18, White_);
            ssd1306_SetCursor((128 - 11 * 10) / 2, 26);
 8001c4e:	211a      	movs	r1, #26
 8001c50:	2009      	movs	r0, #9
 8001c52:	f006 ff13 	bl	8008a7c <ssd1306_SetCursor>
            ssd1306_WriteString("Connected!", Font_11x18, White_);
 8001c56:	4a38      	ldr	r2, [pc, #224]	; (8001d38 <_Z14StartUpdateLCDPv+0x220>)
 8001c58:	2301      	movs	r3, #1
 8001c5a:	ca06      	ldmia	r2, {r1, r2}
 8001c5c:	483b      	ldr	r0, [pc, #236]	; (8001d4c <_Z14StartUpdateLCDPv+0x234>)
 8001c5e:	f006 fee7 	bl	8008a30 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8001c62:	f006 fdd5 	bl	8008810 <ssd1306_UpdateScreen>
            display_run_once = 1;
 8001c66:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <_Z14StartUpdateLCDPv+0x20c>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
          }
          break;
 8001c6c:	e046      	b.n	8001cfc <_Z14StartUpdateLCDPv+0x1e4>
        }

        case 1:
          display_run_once = 1;
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <_Z14StartUpdateLCDPv+0x20c>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
          display_force_update = 0;
 8001c74:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <_Z14StartUpdateLCDPv+0x228>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
          ssd1306_Fill(Black_);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f006 fda4 	bl	80087c8 <ssd1306_Fill>
          ssd1306_SetCursor((128 - 11 * 5) / 2, 0);
 8001c80:	2100      	movs	r1, #0
 8001c82:	2024      	movs	r0, #36	; 0x24
 8001c84:	f006 fefa 	bl	8008a7c <ssd1306_SetCursor>
          ssd1306_WriteString("Pair?", Font_11x18, White_);
 8001c88:	4a2b      	ldr	r2, [pc, #172]	; (8001d38 <_Z14StartUpdateLCDPv+0x220>)
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	ca06      	ldmia	r2, {r1, r2}
 8001c8e:	4830      	ldr	r0, [pc, #192]	; (8001d50 <_Z14StartUpdateLCDPv+0x238>)
 8001c90:	f006 fece 	bl	8008a30 <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8001c94:	f006 fdbc 	bl	8008810 <ssd1306_UpdateScreen>
          break;
 8001c98:	e031      	b.n	8001cfe <_Z14StartUpdateLCDPv+0x1e6>

        case 7:
          Serial.print("Hi");
 8001c9a:	492e      	ldr	r1, [pc, #184]	; (8001d54 <_Z14StartUpdateLCDPv+0x23c>)
 8001c9c:	4824      	ldr	r0, [pc, #144]	; (8001d30 <_Z14StartUpdateLCDPv+0x218>)
 8001c9e:	f7fe fc8b 	bl	80005b8 <_ZN5Print5printEPKc>
          display_run_once = 1;
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <_Z14StartUpdateLCDPv+0x20c>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
          display_force_update = 0;
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <_Z14StartUpdateLCDPv+0x228>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
          ssd1306_Fill(Black_);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f006 fd8a 	bl	80087c8 <ssd1306_Fill>
          ssd1306_UpdateScreen();
 8001cb4:	f006 fdac 	bl	8008810 <ssd1306_UpdateScreen>
          ssd1306_SetCursor((128 - 11 * 10) / 2, 0);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2009      	movs	r0, #9
 8001cbc:	f006 fede 	bl	8008a7c <ssd1306_SetCursor>
          ssd1306_WriteString("Pairing...", Font_11x18, White_);
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <_Z14StartUpdateLCDPv+0x220>)
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	ca06      	ldmia	r2, {r1, r2}
 8001cc6:	4824      	ldr	r0, [pc, #144]	; (8001d58 <_Z14StartUpdateLCDPv+0x240>)
 8001cc8:	f006 feb2 	bl	8008a30 <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8001ccc:	f006 fda0 	bl	8008810 <ssd1306_UpdateScreen>

          PS4.pair();
 8001cd0:	4818      	ldr	r0, [pc, #96]	; (8001d34 <_Z14StartUpdateLCDPv+0x21c>)
 8001cd2:	f7fe fe1e 	bl	8000912 <_ZN5BTHID4pairEv>
          while (PS4.connected() == 0) {
 8001cd6:	4817      	ldr	r0, [pc, #92]	; (8001d34 <_Z14StartUpdateLCDPv+0x21c>)
 8001cd8:	f7fe fefe 	bl	8000ad8 <_ZN5PS4BT9connectedEv>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf0c      	ite	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	2300      	movne	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d000      	beq.n	8001cee <_Z14StartUpdateLCDPv+0x1d6>
 8001cec:	e7f3      	b.n	8001cd6 <_Z14StartUpdateLCDPv+0x1be>

          }

          display_no = 0;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <_Z14StartUpdateLCDPv+0x210>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
          display_run_once = 0;
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <_Z14StartUpdateLCDPv+0x20c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]

          //ssd1306_SetCursor((128 - 11 * 10) / 2, 26);
          //ssd1306_WriteString("Paired!", Font_11x18, White_);
          //ssd1306_UpdateScreen();
          break;
 8001cfa:	e000      	b.n	8001cfe <_Z14StartUpdateLCDPv+0x1e6>
          break;
 8001cfc:	bf00      	nop
      }
    }
#if rtos_delay_view
    timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_LCD;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <_Z14StartUpdateLCDPv+0x204>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <_Z14StartUpdateLCDPv+0x208>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <_Z14StartUpdateLCDPv+0x208>)
 8001d10:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(100);
 8001d12:	2064      	movs	r0, #100	; 0x64
 8001d14:	f008 fc42 	bl	800a59c <osDelay>
  }
 8001d18:	e702      	b.n	8001b20 <_Z14StartUpdateLCDPv+0x8>
 8001d1a:	bf00      	nop
 8001d1c:	200002c4 	.word	0x200002c4
 8001d20:	2000068e 	.word	0x2000068e
 8001d24:	20000688 	.word	0x20000688
 8001d28:	20000684 	.word	0x20000684
 8001d2c:	08014764 	.word	0x08014764
 8001d30:	200003c0 	.word	0x200003c0
 8001d34:	200005a8 	.word	0x200005a8
 8001d38:	20000010 	.word	0x20000010
 8001d3c:	08014774 	.word	0x08014774
 8001d40:	20000687 	.word	0x20000687
 8001d44:	08014778 	.word	0x08014778
 8001d48:	08014784 	.word	0x08014784
 8001d4c:	08014798 	.word	0x08014798
 8001d50:	080147a4 	.word	0x080147a4
 8001d54:	080147ac 	.word	0x080147ac
 8001d58:	080147b0 	.word	0x080147b0

08001d5c <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END StartUpdateLCD */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d6e:	f000 fbc3 	bl	80024f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40001c00 	.word	0x40001c00

08001d80 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
    {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  Serial.print("\r\nSomething went wrong!");
 8001d84:	4903      	ldr	r1, [pc, #12]	; (8001d94 <Error_Handler+0x14>)
 8001d86:	4804      	ldr	r0, [pc, #16]	; (8001d98 <Error_Handler+0x18>)
 8001d88:	f7fe fc16 	bl	80005b8 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d8c:	b672      	cpsid	i
}
 8001d8e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <Error_Handler+0x10>
 8001d92:	bf00      	nop
 8001d94:	080147bc 	.word	0x080147bc
 8001d98:	200003c0 	.word	0x200003c0

08001d9c <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 8001da4:	f7fe fd88 	bl	80008b8 <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8001da8:	f7fe fd6e 	bl	8000888 <_ZN3P103SetEv>
        spi::init();
 8001dac:	f000 f845 	bl	8001e3a <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8001db0:	f7fe fd54 	bl	800085c <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 8001db4:	2218      	movs	r2, #24
 8001db6:	2188      	movs	r1, #136	; 0x88
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f845 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f864 	bl	8001e8c <_ZN8MAX3421eI3P102P9E5resetEv>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	bf0c      	ite	eq
 8001dca:	2301      	moveq	r3, #1
 8001dcc:	2300      	movne	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 8001dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd8:	e02b      	b.n	8001e32 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 8001dda:	22c1      	movs	r2, #193	; 0xc1
 8001ddc:	21d8      	movs	r1, #216	; 0xd8
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f832 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 8001de4:	2260      	movs	r2, #96	; 0x60
 8001de6:	21d0      	movs	r1, #208	; 0xd0
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f82d 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8001dee:	2204      	movs	r2, #4
 8001df0:	21e8      	movs	r1, #232	; 0xe8
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f828 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 8001df8:	21e8      	movs	r1, #232	; 0xe8
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f876 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d000      	beq.n	8001e16 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8001e14:	e7f0      	b.n	8001df8 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f88a 	bl	8001f30 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	21c8      	movs	r1, #200	; 0xc8
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f811 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8001e26:	2201      	movs	r2, #1
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f80c 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
        }
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
 8001e54:	4613      	mov	r3, r2
 8001e56:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001e58:	f7fe fd22 	bl	80008a0 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	f043 0302 	orr.w	r3, r3, #2
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 8001e66:	78bb      	ldrb	r3, [r7, #2]
 8001e68:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8001e6a:	f107 010c 	add.w	r1, r7, #12
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	2202      	movs	r2, #2
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 8001e76:	f003 fd8c 	bl	8005992 <HAL_SPI_Transmit>
        SPI_SS::Set();
 8001e7a:	f7fe fd05 	bl	8000888 <_ZN3P103SetEv>
        return;
 8001e7e:	bf00      	nop
};
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000324 	.word	0x20000324

08001e8c <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001e98:	2220      	movs	r2, #32
 8001e9a:	2178      	movs	r1, #120	; 0x78
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ffd3 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2178      	movs	r1, #120	; 0x78
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffce 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001eac:	89fb      	ldrh	r3, [r7, #14]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	81fb      	strh	r3, [r7, #14]
 8001eb2:	89fb      	ldrh	r3, [r7, #14]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00f      	beq.n	8001ee2 <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 8001ec2:	2168      	movs	r1, #104	; 0x68
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f811 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d100      	bne.n	8001ee0 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 8001ede:	e7e5      	b.n	8001eac <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8001ee0:	bf00      	nop
        return ( i);
 8001ee2:	89fb      	ldrh	r3, [r7, #14]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 8001ef8:	f7fe fcd2 	bl	80008a0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8001efc:	1cf9      	adds	r1, r7, #3
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	2201      	movs	r2, #1
 8001f04:	4809      	ldr	r0, [pc, #36]	; (8001f2c <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001f06:	f003 fd44 	bl	8005992 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 8001f0e:	f107 010f 	add.w	r1, r7, #15
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	2201      	movs	r2, #1
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001f1a:	f003 fe76 	bl	8005c0a <HAL_SPI_Receive>
        SPI_SS::Set();
 8001f1e:	f7fe fcb3 	bl	8000888 <_ZN3P103SetEv>
        return (rv);
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000324 	.word	0x20000324

08001f30 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8001f38:	21f8      	movs	r1, #248	; 0xf8
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffd6 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f4a:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2bc0      	cmp	r3, #192	; 0xc0
 8001f50:	d04a      	beq.n	8001fe8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 8001f52:	2bc0      	cmp	r3, #192	; 0xc0
 8001f54:	dc55      	bgt.n	8002002 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001f56:	2b80      	cmp	r3, #128	; 0x80
 8001f58:	d006      	beq.n	8001f68 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 8001f5a:	2b80      	cmp	r3, #128	; 0x80
 8001f5c:	dc51      	bgt.n	8002002 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d046      	beq.n	8001ff0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 8001f62:	2b40      	cmp	r3, #64	; 0x40
 8001f64:	d020      	beq.n	8001fa8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 8001f66:	e04c      	b.n	8002002 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001f68:	21d8      	movs	r1, #216	; 0xd8
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ffbe 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bf0c      	ite	eq
 8001f7a:	2301      	moveq	r3, #1
 8001f7c:	2300      	movne	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001f84:	22c9      	movs	r2, #201	; 0xc9
 8001f86:	21d8      	movs	r1, #216	; 0xd8
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff5d 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	; (800200c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001f90:	2202      	movs	r2, #2
 8001f92:	701a      	strb	r2, [r3, #0]
                        break;
 8001f94:	e035      	b.n	8002002 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001f96:	22cb      	movs	r2, #203	; 0xcb
 8001f98:	21d8      	movs	r1, #216	; 0xd8
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ff54 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	701a      	strb	r2, [r3, #0]
                        break;
 8001fa6:	e02c      	b.n	8002002 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001fa8:	21d8      	movs	r1, #216	; 0xd8
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ff9e 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bf0c      	ite	eq
 8001fba:	2301      	moveq	r3, #1
 8001fbc:	2300      	movne	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001fc4:	22cb      	movs	r2, #203	; 0xcb
 8001fc6:	21d8      	movs	r1, #216	; 0xd8
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff3d 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	701a      	strb	r2, [r3, #0]
                        break;
 8001fd4:	e015      	b.n	8002002 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001fd6:	22c9      	movs	r2, #201	; 0xc9
 8001fd8:	21d8      	movs	r1, #216	; 0xd8
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff34 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	701a      	strb	r2, [r3, #0]
                        break;
 8001fe6:	e00c      	b.n	8002002 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
                        break;
 8001fee:	e008      	b.n	8002002 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8001ff0:	22d1      	movs	r2, #209	; 0xd1
 8001ff2:	21d8      	movs	r1, #216	; 0xd8
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff27 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
                        break;
 8002000:	bf00      	nop
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200006b4 	.word	0x200006b4

08002010 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d115      	bne.n	800204c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002026:	4293      	cmp	r3, r2
 8002028:	d110      	bne.n	800204c <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 800202a:	490a      	ldr	r1, [pc, #40]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800202c:	480a      	ldr	r0, [pc, #40]	; (8002058 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800202e:	f7fe fbff 	bl	8000830 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 8002032:	480a      	ldr	r0, [pc, #40]	; (800205c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002034:	f010 fc38 	bl	80128a8 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8002038:	4908      	ldr	r1, [pc, #32]	; (800205c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800203a:	4809      	ldr	r0, [pc, #36]	; (8002060 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800203c:	f00b fdc4 	bl	800dbc8 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002042:	2200      	movs	r2, #0
 8002044:	4906      	ldr	r1, [pc, #24]	; (8002060 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002046:	4808      	ldr	r0, [pc, #32]	; (8002068 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002048:	f7fe fd1e 	bl	8000a88 <_ZN5PS4BTC1EP3BTDbPKc>
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000280 	.word	0x20000280
 8002058:	200003c0 	.word	0x200003c0
 800205c:	200003d4 	.word	0x200003d4
 8002060:	20000490 	.word	0x20000490
 8002064:	080147d4 	.word	0x080147d4
 8002068:	200005a8 	.word	0x200005a8

0800206c <_GLOBAL__sub_I_rx_buf>:
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
 8002070:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002074:	2001      	movs	r0, #1
 8002076:	f7ff ffcb 	bl	8002010 <_Z41__static_initialization_and_destruction_0ii>
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_MspInit+0x54>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	4a11      	ldr	r2, [pc, #68]	; (80020d0 <HAL_MspInit+0x54>)
 800208c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002090:	6453      	str	r3, [r2, #68]	; 0x44
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_MspInit+0x54>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_MspInit+0x54>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <HAL_MspInit+0x54>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_MspInit+0x54>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	210f      	movs	r1, #15
 80020be:	f06f 0001 	mvn.w	r0, #1
 80020c2:	f000 fb15 	bl	80026f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800

080020d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_I2C_MspInit+0x84>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d12c      	bne.n	8002150 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_I2C_MspInit+0x88>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_I2C_MspInit+0x88>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_I2C_MspInit+0x88>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002112:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002118:	2312      	movs	r3, #18
 800211a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800211c:	2301      	movs	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002124:	2304      	movs	r3, #4
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	480c      	ldr	r0, [pc, #48]	; (8002160 <HAL_I2C_MspInit+0x8c>)
 8002130:	f000 fb08 	bl	8002744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_I2C_MspInit+0x88>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	4a07      	ldr	r2, [pc, #28]	; (800215c <HAL_I2C_MspInit+0x88>)
 800213e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002142:	6413      	str	r3, [r2, #64]	; 0x40
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_I2C_MspInit+0x88>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002150:	bf00      	nop
 8002152:	3728      	adds	r7, #40	; 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40005400 	.word	0x40005400
 800215c:	40023800 	.word	0x40023800
 8002160:	40020400 	.word	0x40020400

08002164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_SPI_MspInit+0x84>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d12b      	bne.n	80021de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <HAL_SPI_MspInit+0x88>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a17      	ldr	r2, [pc, #92]	; (80021ec <HAL_SPI_MspInit+0x88>)
 8002190:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_SPI_MspInit+0x88>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_SPI_MspInit+0x88>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a10      	ldr	r2, [pc, #64]	; (80021ec <HAL_SPI_MspInit+0x88>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <HAL_SPI_MspInit+0x88>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021be:	23e0      	movs	r3, #224	; 0xe0
 80021c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ca:	2303      	movs	r3, #3
 80021cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ce:	2305      	movs	r3, #5
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	; (80021f0 <HAL_SPI_MspInit+0x8c>)
 80021da:	f000 fab3 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021de:	bf00      	nop
 80021e0:	3728      	adds	r7, #40	; 0x28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40013000 	.word	0x40013000
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020000 	.word	0x40020000

080021f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0e      	ldr	r2, [pc, #56]	; (800223c <HAL_TIM_Base_MspInit+0x48>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d115      	bne.n	8002232 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_TIM_Base_MspInit+0x4c>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <HAL_TIM_Base_MspInit+0x4c>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_TIM_Base_MspInit+0x4c>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2105      	movs	r1, #5
 8002226:	202d      	movs	r0, #45	; 0x2d
 8002228:	f000 fa62 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800222c:	202d      	movs	r0, #45	; 0x2d
 800222e:	f000 fa7b 	bl	8002728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40002000 	.word	0x40002000
 8002240:	40023800 	.word	0x40023800

08002244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <HAL_UART_MspInit+0x84>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d12b      	bne.n	80022be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <HAL_UART_MspInit+0x88>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a17      	ldr	r2, [pc, #92]	; (80022cc <HAL_UART_MspInit+0x88>)
 8002270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_UART_MspInit+0x88>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_UART_MspInit+0x88>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a10      	ldr	r2, [pc, #64]	; (80022cc <HAL_UART_MspInit+0x88>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_UART_MspInit+0x88>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800229e:	230c      	movs	r3, #12
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ae:	2307      	movs	r3, #7
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	4805      	ldr	r0, [pc, #20]	; (80022d0 <HAL_UART_MspInit+0x8c>)
 80022ba:	f000 fa43 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022be:	bf00      	nop
 80022c0:	3728      	adds	r7, #40	; 0x28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40004400 	.word	0x40004400
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40020000 	.word	0x40020000

080022d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 80022e4:	2200      	movs	r2, #0
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	202c      	movs	r0, #44	; 0x2c
 80022ea:	f000 fa01 	bl	80026f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80022ee:	202c      	movs	r0, #44	; 0x2c
 80022f0:	f000 fa1a 	bl	8002728 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <HAL_InitTick+0xa4>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	4a1e      	ldr	r2, [pc, #120]	; (8002378 <HAL_InitTick+0xa4>)
 80022fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002302:	6413      	str	r3, [r2, #64]	; 0x40
 8002304:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <HAL_InitTick+0xa4>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002310:	f107 0210 	add.w	r2, r7, #16
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fb04 	bl	8004928 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002320:	f002 fada 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 8002324:	4603      	mov	r3, r0
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	4a13      	ldr	r2, [pc, #76]	; (800237c <HAL_InitTick+0xa8>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0c9b      	lsrs	r3, r3, #18
 8002334:	3b01      	subs	r3, #1
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_InitTick+0xac>)
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <HAL_InitTick+0xb0>)
 800233c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <HAL_InitTick+0xac>)
 8002340:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002344:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8002346:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <HAL_InitTick+0xac>)
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_InitTick+0xac>)
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_InitTick+0xac>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8002358:	4809      	ldr	r0, [pc, #36]	; (8002380 <HAL_InitTick+0xac>)
 800235a:	f004 f839 	bl	80063d0 <HAL_TIM_Base_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d104      	bne.n	800236e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8002364:	4806      	ldr	r0, [pc, #24]	; (8002380 <HAL_InitTick+0xac>)
 8002366:	f004 f883 	bl	8006470 <HAL_TIM_Base_Start_IT>
 800236a:	4603      	mov	r3, r0
 800236c:	e000      	b.n	8002370 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	3730      	adds	r7, #48	; 0x30
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40023800 	.word	0x40023800
 800237c:	431bde83 	.word	0x431bde83
 8002380:	20005404 	.word	0x20005404
 8002384:	40001c00 	.word	0x40001c00

08002388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800238c:	e7fe      	b.n	800238c <NMI_Handler+0x4>

0800238e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002392:	e7fe      	b.n	8002392 <HardFault_Handler+0x4>

08002394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <MemManage_Handler+0x4>

0800239a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800239e:	e7fe      	b.n	800239e <BusFault_Handler+0x4>

080023a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <UsageFault_Handler+0x4>

080023a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80023ba:	f004 f8c9 	bl	8006550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20005404 	.word	0x20005404

080023c8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80023ce:	f004 f8bf 	bl	8006550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200002c4 	.word	0x200002c4

080023dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <OTG_FS_IRQHandler+0x10>)
 80023e2:	f001 f927 	bl	8003634 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20005960 	.word	0x20005960

080023f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
	return 1;
 80023f4:	2301      	movs	r3, #1
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_kill>:

int _kill(int pid, int sig)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800240a:	f012 f867 	bl	80144dc <__errno>
 800240e:	4603      	mov	r3, r0
 8002410:	2216      	movs	r2, #22
 8002412:	601a      	str	r2, [r3, #0]
	return -1;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <_exit>:

void _exit (int status)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002428:	f04f 31ff 	mov.w	r1, #4294967295
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ffe7 	bl	8002400 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002432:	e7fe      	b.n	8002432 <_exit+0x12>

08002434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <SystemInit+0x28>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	4a07      	ldr	r2, [pc, #28]	; (800245c <SystemInit+0x28>)
 8002440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <SystemInit+0x28>)
 800244a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800244e:	609a      	str	r2, [r3, #8]
#endif
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002498 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002464:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002466:	e003      	b.n	8002470 <LoopCopyDataInit>

08002468 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800246a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800246c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800246e:	3104      	adds	r1, #4

08002470 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002470:	480b      	ldr	r0, [pc, #44]	; (80024a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002474:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002476:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002478:	d3f6      	bcc.n	8002468 <CopyDataInit>
  ldr  r2, =_sbss
 800247a:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800247c:	e002      	b.n	8002484 <LoopFillZerobss>

0800247e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800247e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002480:	f842 3b04 	str.w	r3, [r2], #4

08002484 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002486:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002488:	d3f9      	bcc.n	800247e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800248a:	f7ff ffd3 	bl	8002434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800248e:	f012 f82b 	bl	80144e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002492:	f7fe fbcd 	bl	8000c30 <main>
  bx  lr    
 8002496:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002498:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800249c:	08016618 	.word	0x08016618
  ldr  r0, =_sdata
 80024a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024a4:	20000188 	.word	0x20000188
  ldr  r2, =_sbss
 80024a8:	20000188 	.word	0x20000188
  ldr  r3, = _ebss
 80024ac:	20005d6c 	.word	0x20005d6c

080024b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b0:	e7fe      	b.n	80024b0 <ADC_IRQHandler>
	...

080024b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_Init+0x40>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0d      	ldr	r2, [pc, #52]	; (80024f4 <HAL_Init+0x40>)
 80024be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_Init+0x40>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <HAL_Init+0x40>)
 80024ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_Init+0x40>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <HAL_Init+0x40>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024dc:	2003      	movs	r0, #3
 80024de:	f000 f8fc 	bl	80026da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7ff fef6 	bl	80022d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e8:	f7ff fdc8 	bl	800207c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023c00 	.word	0x40023c00

080024f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_IncTick+0x20>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x24>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a04      	ldr	r2, [pc, #16]	; (800251c <HAL_IncTick+0x24>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	2000000c 	.word	0x2000000c
 800251c:	2000544c 	.word	0x2000544c

08002520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return uwTick;
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_GetTick+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	2000544c 	.word	0x2000544c

08002538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002540:	f7ff ffee 	bl	8002520 <HAL_GetTick>
 8002544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d005      	beq.n	800255e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_Delay+0x44>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800255e:	bf00      	nop
 8002560:	f7ff ffde 	bl	8002520 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	429a      	cmp	r2, r3
 800256e:	d8f7      	bhi.n	8002560 <HAL_Delay+0x28>
  {
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	2000000c 	.word	0x2000000c

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	60d3      	str	r3, [r2, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <__NVIC_EnableIRQ+0x38>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
         );
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ff4c 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002702:	f7ff ff61 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 8002706:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	6978      	ldr	r0, [r7, #20]
 800270e:	f7ff ffb1 	bl	8002674 <NVIC_EncodePriority>
 8002712:	4602      	mov	r2, r0
 8002714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff80 	bl	8002620 <__NVIC_SetPriority>
}
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ff54 	bl	80025e4 <__NVIC_EnableIRQ>
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	e165      	b.n	8002a2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002760:	2201      	movs	r2, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	429a      	cmp	r2, r3
 800277a:	f040 8154 	bne.w	8002a26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d005      	beq.n	8002796 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002792:	2b02      	cmp	r3, #2
 8002794:	d130      	bne.n	80027f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2203      	movs	r2, #3
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027cc:	2201      	movs	r2, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 0201 	and.w	r2, r3, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b03      	cmp	r3, #3
 8002802:	d017      	beq.n	8002834 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d123      	bne.n	8002888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	08da      	lsrs	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3208      	adds	r2, #8
 8002848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	220f      	movs	r2, #15
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	08da      	lsrs	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	69b9      	ldr	r1, [r7, #24]
 8002884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0203 	and.w	r2, r3, #3
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80ae 	beq.w	8002a26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b5d      	ldr	r3, [pc, #372]	; (8002a44 <HAL_GPIO_Init+0x300>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4a5c      	ldr	r2, [pc, #368]	; (8002a44 <HAL_GPIO_Init+0x300>)
 80028d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d8:	6453      	str	r3, [r2, #68]	; 0x44
 80028da:	4b5a      	ldr	r3, [pc, #360]	; (8002a44 <HAL_GPIO_Init+0x300>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028e6:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_GPIO_Init+0x304>)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4f      	ldr	r2, [pc, #316]	; (8002a4c <HAL_GPIO_Init+0x308>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d025      	beq.n	800295e <HAL_GPIO_Init+0x21a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4e      	ldr	r2, [pc, #312]	; (8002a50 <HAL_GPIO_Init+0x30c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01f      	beq.n	800295a <HAL_GPIO_Init+0x216>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4d      	ldr	r2, [pc, #308]	; (8002a54 <HAL_GPIO_Init+0x310>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d019      	beq.n	8002956 <HAL_GPIO_Init+0x212>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4c      	ldr	r2, [pc, #304]	; (8002a58 <HAL_GPIO_Init+0x314>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <HAL_GPIO_Init+0x20e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4b      	ldr	r2, [pc, #300]	; (8002a5c <HAL_GPIO_Init+0x318>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00d      	beq.n	800294e <HAL_GPIO_Init+0x20a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_GPIO_Init+0x31c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <HAL_GPIO_Init+0x206>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a49      	ldr	r2, [pc, #292]	; (8002a64 <HAL_GPIO_Init+0x320>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d101      	bne.n	8002946 <HAL_GPIO_Init+0x202>
 8002942:	2306      	movs	r3, #6
 8002944:	e00c      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 8002946:	2307      	movs	r3, #7
 8002948:	e00a      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 800294a:	2305      	movs	r3, #5
 800294c:	e008      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 800294e:	2304      	movs	r3, #4
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 8002952:	2303      	movs	r3, #3
 8002954:	e004      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 8002956:	2302      	movs	r3, #2
 8002958:	e002      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 800295e:	2300      	movs	r3, #0
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	f002 0203 	and.w	r2, r2, #3
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	4093      	lsls	r3, r2
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002970:	4935      	ldr	r1, [pc, #212]	; (8002a48 <HAL_GPIO_Init+0x304>)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800297e:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <HAL_GPIO_Init+0x324>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a2:	4a31      	ldr	r2, [pc, #196]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029a8:	4b2f      	ldr	r3, [pc, #188]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029cc:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d2:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a20:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <HAL_GPIO_Init+0x324>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	f67f ae96 	bls.w	8002760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3724      	adds	r7, #36	; 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40020000 	.word	0x40020000
 8002a50:	40020400 	.word	0x40020400
 8002a54:	40020800 	.word	0x40020800
 8002a58:	40020c00 	.word	0x40020c00
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40021400 	.word	0x40021400
 8002a64:	40021800 	.word	0x40021800
 8002a68:	40013c00 	.word	0x40013c00

08002a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	887b      	ldrh	r3, [r7, #2]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
 8002a88:	e001      	b.n	8002a8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aac:	787b      	ldrb	r3, [r7, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ab8:	e003      	b.n	8002ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	041a      	lsls	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	619a      	str	r2, [r3, #24]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e12b      	b.n	8002d3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff faec 	bl	80020d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2224      	movs	r2, #36	; 0x24
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0201 	bic.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b34:	f001 fed0 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 8002b38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4a81      	ldr	r2, [pc, #516]	; (8002d44 <HAL_I2C_Init+0x274>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d807      	bhi.n	8002b54 <HAL_I2C_Init+0x84>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a80      	ldr	r2, [pc, #512]	; (8002d48 <HAL_I2C_Init+0x278>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	bf94      	ite	ls
 8002b4c:	2301      	movls	r3, #1
 8002b4e:	2300      	movhi	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e006      	b.n	8002b62 <HAL_I2C_Init+0x92>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4a7d      	ldr	r2, [pc, #500]	; (8002d4c <HAL_I2C_Init+0x27c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	bf94      	ite	ls
 8002b5c:	2301      	movls	r3, #1
 8002b5e:	2300      	movhi	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e0e7      	b.n	8002d3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4a78      	ldr	r2, [pc, #480]	; (8002d50 <HAL_I2C_Init+0x280>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0c9b      	lsrs	r3, r3, #18
 8002b74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4a6a      	ldr	r2, [pc, #424]	; (8002d44 <HAL_I2C_Init+0x274>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d802      	bhi.n	8002ba4 <HAL_I2C_Init+0xd4>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	e009      	b.n	8002bb8 <HAL_I2C_Init+0xe8>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	4a69      	ldr	r2, [pc, #420]	; (8002d54 <HAL_I2C_Init+0x284>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	099b      	lsrs	r3, r3, #6
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	495c      	ldr	r1, [pc, #368]	; (8002d44 <HAL_I2C_Init+0x274>)
 8002bd4:	428b      	cmp	r3, r1
 8002bd6:	d819      	bhi.n	8002c0c <HAL_I2C_Init+0x13c>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1e59      	subs	r1, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be6:	1c59      	adds	r1, r3, #1
 8002be8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bec:	400b      	ands	r3, r1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_I2C_Init+0x138>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1e59      	subs	r1, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c00:	3301      	adds	r3, #1
 8002c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c06:	e051      	b.n	8002cac <HAL_I2C_Init+0x1dc>
 8002c08:	2304      	movs	r3, #4
 8002c0a:	e04f      	b.n	8002cac <HAL_I2C_Init+0x1dc>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d111      	bne.n	8002c38 <HAL_I2C_Init+0x168>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1e58      	subs	r0, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6859      	ldr	r1, [r3, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	440b      	add	r3, r1
 8002c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c26:	3301      	adds	r3, #1
 8002c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e012      	b.n	8002c5e <HAL_I2C_Init+0x18e>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1e58      	subs	r0, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	0099      	lsls	r1, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Init+0x196>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e022      	b.n	8002cac <HAL_I2C_Init+0x1dc>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10e      	bne.n	8002c8c <HAL_I2C_Init+0x1bc>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1e58      	subs	r0, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	440b      	add	r3, r1
 8002c7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c8a:	e00f      	b.n	8002cac <HAL_I2C_Init+0x1dc>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1e58      	subs	r0, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	0099      	lsls	r1, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	6809      	ldr	r1, [r1, #0]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6911      	ldr	r1, [r2, #16]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68d2      	ldr	r2, [r2, #12]
 8002ce6:	4311      	orrs	r1, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	000186a0 	.word	0x000186a0
 8002d48:	001e847f 	.word	0x001e847f
 8002d4c:	003d08ff 	.word	0x003d08ff
 8002d50:	431bde83 	.word	0x431bde83
 8002d54:	10624dd3 	.word	0x10624dd3

08002d58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	4608      	mov	r0, r1
 8002d62:	4611      	mov	r1, r2
 8002d64:	461a      	mov	r2, r3
 8002d66:	4603      	mov	r3, r0
 8002d68:	817b      	strh	r3, [r7, #10]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	813b      	strh	r3, [r7, #8]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d72:	f7ff fbd5 	bl	8002520 <HAL_GetTick>
 8002d76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	f040 80d9 	bne.w	8002f38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2319      	movs	r3, #25
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	496d      	ldr	r1, [pc, #436]	; (8002f44 <HAL_I2C_Mem_Write+0x1ec>)
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f971 	bl	8003078 <I2C_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e0cc      	b.n	8002f3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_I2C_Mem_Write+0x56>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e0c5      	b.n	8002f3a <HAL_I2C_Mem_Write+0x1e2>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d007      	beq.n	8002dd4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2221      	movs	r2, #33	; 0x21
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2240      	movs	r2, #64	; 0x40
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a3a      	ldr	r2, [r7, #32]
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4a4d      	ldr	r2, [pc, #308]	; (8002f48 <HAL_I2C_Mem_Write+0x1f0>)
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e16:	88f8      	ldrh	r0, [r7, #6]
 8002e18:	893a      	ldrh	r2, [r7, #8]
 8002e1a:	8979      	ldrh	r1, [r7, #10]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	4603      	mov	r3, r0
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f890 	bl	8002f4c <I2C_RequestMemoryWrite>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d052      	beq.n	8002ed8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e081      	b.n	8002f3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f9f2 	bl	8003224 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d107      	bne.n	8002e5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e06b      	b.n	8002f3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d11b      	bne.n	8002ed8 <HAL_I2C_Mem_Write+0x180>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d017      	beq.n	8002ed8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1aa      	bne.n	8002e36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f9de 	bl	80032a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00d      	beq.n	8002f0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d107      	bne.n	8002f08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e016      	b.n	8002f3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e000      	b.n	8002f3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f38:	2302      	movs	r3, #2
  }
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	00100002 	.word	0x00100002
 8002f48:	ffff0000 	.word	0xffff0000

08002f4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	4608      	mov	r0, r1
 8002f56:	4611      	mov	r1, r2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	817b      	strh	r3, [r7, #10]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	813b      	strh	r3, [r7, #8]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f878 	bl	8003078 <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f9c:	d103      	bne.n	8002fa6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e05f      	b.n	800306a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	6a3a      	ldr	r2, [r7, #32]
 8002fbe:	492d      	ldr	r1, [pc, #180]	; (8003074 <I2C_RequestMemoryWrite+0x128>)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f8b0 	bl	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e04c      	b.n	800306a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	6a39      	ldr	r1, [r7, #32]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f91a 	bl	8003224 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d107      	bne.n	800300e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e02b      	b.n	800306a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d105      	bne.n	8003024 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003018:	893b      	ldrh	r3, [r7, #8]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	611a      	str	r2, [r3, #16]
 8003022:	e021      	b.n	8003068 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003024:	893b      	ldrh	r3, [r7, #8]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	b29b      	uxth	r3, r3
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	6a39      	ldr	r1, [r7, #32]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f8f4 	bl	8003224 <I2C_WaitOnTXEFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b04      	cmp	r3, #4
 8003048:	d107      	bne.n	800305a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003058:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e005      	b.n	800306a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800305e:	893b      	ldrh	r3, [r7, #8]
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	00010002 	.word	0x00010002

08003078 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003088:	e025      	b.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003090:	d021      	beq.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003092:	f7ff fa45 	bl	8002520 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d302      	bcc.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d116      	bne.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f043 0220 	orr.w	r2, r3, #32
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e023      	b.n	800311e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d10d      	bne.n	80030fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	43da      	mvns	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4013      	ands	r3, r2
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf0c      	ite	eq
 80030f2:	2301      	moveq	r3, #1
 80030f4:	2300      	movne	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	e00c      	b.n	8003116 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	43da      	mvns	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4013      	ands	r3, r2
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	bf0c      	ite	eq
 800310e:	2301      	moveq	r3, #1
 8003110:	2300      	movne	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	429a      	cmp	r2, r3
 800311a:	d0b6      	beq.n	800308a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003134:	e051      	b.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003144:	d123      	bne.n	800318e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003154:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800315e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f043 0204 	orr.w	r2, r3, #4
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e046      	b.n	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d021      	beq.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003196:	f7ff f9c3 	bl	8002520 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d302      	bcc.n	80031ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d116      	bne.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e020      	b.n	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	0c1b      	lsrs	r3, r3, #16
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d10c      	bne.n	80031fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	43da      	mvns	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bf14      	ite	ne
 80031f6:	2301      	movne	r3, #1
 80031f8:	2300      	moveq	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	e00b      	b.n	8003216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	43da      	mvns	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4013      	ands	r3, r2
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	bf14      	ite	ne
 8003210:	2301      	movne	r3, #1
 8003212:	2300      	moveq	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d18d      	bne.n	8003136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003230:	e02d      	b.n	800328e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f878 	bl	8003328 <I2C_IsAcknowledgeFailed>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e02d      	b.n	800329e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d021      	beq.n	800328e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324a:	f7ff f969 	bl	8002520 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d116      	bne.n	800328e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f043 0220 	orr.w	r2, r3, #32
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e007      	b.n	800329e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003298:	2b80      	cmp	r3, #128	; 0x80
 800329a:	d1ca      	bne.n	8003232 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032b2:	e02d      	b.n	8003310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f837 	bl	8003328 <I2C_IsAcknowledgeFailed>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e02d      	b.n	8003320 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	d021      	beq.n	8003310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032cc:	f7ff f928 	bl	8002520 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d302      	bcc.n	80032e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d116      	bne.n	8003310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e007      	b.n	8003320 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b04      	cmp	r3, #4
 800331c:	d1ca      	bne.n	80032b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333e:	d11b      	bne.n	8003378 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003348:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	f043 0204 	orr.w	r2, r3, #4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003388:	b08f      	sub	sp, #60	; 0x3c
 800338a:	af0a      	add	r7, sp, #40	; 0x28
 800338c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e116      	b.n	80035c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f009 feaa 	bl	800d10c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2203      	movs	r2, #3
 80033bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f003 ff47 	bl	800726a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	687e      	ldr	r6, [r7, #4]
 80033e4:	466d      	mov	r5, sp
 80033e6:	f106 0410 	add.w	r4, r6, #16
 80033ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80033fa:	1d33      	adds	r3, r6, #4
 80033fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f003 fe1e 	bl	8007040 <USB_CoreInit>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2202      	movs	r2, #2
 800340e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0d7      	b.n	80035c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f003 ff35 	bl	800728c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
 8003426:	e04a      	b.n	80034be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	333d      	adds	r3, #61	; 0x3d
 8003438:	2201      	movs	r2, #1
 800343a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	333c      	adds	r3, #60	; 0x3c
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003450:	7bfa      	ldrb	r2, [r7, #15]
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	b298      	uxth	r0, r3
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	3342      	adds	r3, #66	; 0x42
 8003464:	4602      	mov	r2, r0
 8003466:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	333f      	adds	r3, #63	; 0x3f
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	3344      	adds	r3, #68	; 0x44
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3348      	adds	r3, #72	; 0x48
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	3350      	adds	r3, #80	; 0x50
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	3301      	adds	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d3af      	bcc.n	8003428 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]
 80034cc:	e044      	b.n	8003558 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	3301      	adds	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	429a      	cmp	r2, r3
 8003560:	d3b5      	bcc.n	80034ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	687e      	ldr	r6, [r7, #4]
 800356a:	466d      	mov	r5, sp
 800356c:	f106 0410 	add.w	r4, r6, #16
 8003570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003578:	e894 0003 	ldmia.w	r4, {r0, r1}
 800357c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003580:	1d33      	adds	r3, r6, #4
 8003582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003584:	6838      	ldr	r0, [r7, #0]
 8003586:	f003 feab 	bl	80072e0 <USB_DevInit>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e014      	b.n	80035c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d102      	bne.n	80035ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f001 f879 	bl	80046ac <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f004 fee6 	bl	8008390 <USB_DevDisconnect>

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_PCD_Start+0x1c>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e020      	b.n	800362c <HAL_PCD_Start+0x5e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d109      	bne.n	800360e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d005      	beq.n	800360e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f003 fe18 	bl	8007248 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f004 fe96 	bl	800834e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	b08d      	sub	sp, #52	; 0x34
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f004 ff54 	bl	80084f8 <USB_GetMode>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	f040 83ca 	bne.w	8003dec <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f004 feb8 	bl	80083d2 <USB_ReadInterrupts>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 83c0 	beq.w	8003dea <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f004 feaf 	bl	80083d2 <USB_ReadInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d107      	bne.n	800368e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f002 0202 	and.w	r2, r2, #2
 800368c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f004 fe9d 	bl	80083d2 <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b10      	cmp	r3, #16
 80036a0:	d161      	bne.n	8003766 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0210 	bic.w	r2, r2, #16
 80036b0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f003 020f 	and.w	r2, r3, #15
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	3304      	adds	r3, #4
 80036d0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	0c5b      	lsrs	r3, r3, #17
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d124      	bne.n	8003728 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d035      	beq.n	8003756 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	6a38      	ldr	r0, [r7, #32]
 80036fe:	f004 fd03 	bl	8008108 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800370e:	441a      	add	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	699a      	ldr	r2, [r3, #24]
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003720:	441a      	add	r2, r3
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	619a      	str	r2, [r3, #24]
 8003726:	e016      	b.n	8003756 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	0c5b      	lsrs	r3, r3, #17
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	2b06      	cmp	r3, #6
 8003732:	d110      	bne.n	8003756 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800373a:	2208      	movs	r2, #8
 800373c:	4619      	mov	r1, r3
 800373e:	6a38      	ldr	r0, [r7, #32]
 8003740:	f004 fce2 	bl	8008108 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	699a      	ldr	r2, [r3, #24]
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003750:	441a      	add	r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699a      	ldr	r2, [r3, #24]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0210 	orr.w	r2, r2, #16
 8003764:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f004 fe31 	bl	80083d2 <USB_ReadInterrupts>
 8003770:	4603      	mov	r3, r0
 8003772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003776:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800377a:	d16e      	bne.n	800385a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f004 fe37 	bl	80083f8 <USB_ReadDevAllOutEpInterrupt>
 800378a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800378c:	e062      	b.n	8003854 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d057      	beq.n	8003848 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	4611      	mov	r1, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f004 fe5c 	bl	8008460 <USB_ReadDevOutEPInterrupt>
 80037a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00c      	beq.n	80037ce <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c0:	461a      	mov	r2, r3
 80037c2:	2301      	movs	r3, #1
 80037c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fdc5 	bl	8004358 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00c      	beq.n	80037f2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e4:	461a      	mov	r2, r3
 80037e6:	2308      	movs	r3, #8
 80037e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80037ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 febf 	bl	8004570 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003808:	461a      	mov	r2, r3
 800380a:	2310      	movs	r3, #16
 800380c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003824:	461a      	mov	r2, r3
 8003826:	2320      	movs	r3, #32
 8003828:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d009      	beq.n	8003848 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003840:	461a      	mov	r2, r3
 8003842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003846:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	3301      	adds	r3, #1
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	085b      	lsrs	r3, r3, #1
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	2b00      	cmp	r3, #0
 8003858:	d199      	bne.n	800378e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f004 fdb7 	bl	80083d2 <USB_ReadInterrupts>
 8003864:	4603      	mov	r3, r0
 8003866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800386a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800386e:	f040 80c0 	bne.w	80039f2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f004 fdd8 	bl	800842c <USB_ReadDevAllInEpInterrupt>
 800387c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003882:	e0b2      	b.n	80039ea <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80a7 	beq.w	80039de <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f004 fdfe 	bl	800849c <USB_ReadDevInEPInterrupt>
 80038a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d057      	beq.n	800395c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	2201      	movs	r2, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69f9      	ldr	r1, [r7, #28]
 80038c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038cc:	4013      	ands	r3, r2
 80038ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038dc:	461a      	mov	r2, r3
 80038de:	2301      	movs	r3, #1
 80038e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d132      	bne.n	8003950 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	3348      	adds	r3, #72	; 0x48
 80038fa:	6819      	ldr	r1, [r3, #0]
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4403      	add	r3, r0
 800390a:	3344      	adds	r3, #68	; 0x44
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4419      	add	r1, r3
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4403      	add	r3, r0
 800391e:	3348      	adds	r3, #72	; 0x48
 8003920:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	2b00      	cmp	r3, #0
 8003926:	d113      	bne.n	8003950 <HAL_PCD_IRQHandler+0x31c>
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392c:	4613      	mov	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	3350      	adds	r3, #80	; 0x50
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d108      	bne.n	8003950 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003948:	461a      	mov	r2, r3
 800394a:	2101      	movs	r1, #1
 800394c:	f004 fe06 	bl	800855c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	b2db      	uxtb	r3, r3
 8003954:	4619      	mov	r1, r3
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f009 fc59 	bl	800d20e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003972:	461a      	mov	r2, r3
 8003974:	2308      	movs	r3, #8
 8003976:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398e:	461a      	mov	r2, r3
 8003990:	2310      	movs	r3, #16
 8003992:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d008      	beq.n	80039b0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039aa:	461a      	mov	r2, r3
 80039ac:	2340      	movs	r3, #64	; 0x40
 80039ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c6:	461a      	mov	r2, r3
 80039c8:	2302      	movs	r3, #2
 80039ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80039d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fc30 	bl	800423e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	3301      	adds	r3, #1
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f47f af49 	bne.w	8003884 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f004 fceb 	bl	80083d2 <USB_ReadInterrupts>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a06:	d122      	bne.n	8003a4e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d108      	bne.n	8003a38 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a2e:	2100      	movs	r1, #0
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f009 fe29 	bl	800d688 <HAL_PCDEx_LPM_Callback>
 8003a36:	e002      	b.n	8003a3e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f009 fc5f 	bl	800d2fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f004 fcbd 	bl	80083d2 <USB_ReadInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a62:	d112      	bne.n	8003a8a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d102      	bne.n	8003a7a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f009 fc1b 	bl	800d2b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003a88:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f004 fc9f 	bl	80083d2 <USB_ReadInterrupts>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a9e:	d121      	bne.n	8003ae4 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003aae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d111      	bne.n	8003ade <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	f003 020f 	and.w	r2, r3, #15
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f009 fdd6 	bl	800d688 <HAL_PCDEx_LPM_Callback>
 8003adc:	e002      	b.n	8003ae4 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f009 fbe6 	bl	800d2b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f004 fc72 	bl	80083d2 <USB_ReadInterrupts>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af8:	f040 80c7 	bne.w	8003c8a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2110      	movs	r1, #16
 8003b16:	4618      	mov	r0, r3
 8003b18:	f003 fd40 	bl	800759c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b20:	e056      	b.n	8003bd0 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b46:	0151      	lsls	r1, r2, #5
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	440a      	add	r2, r1
 8003b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b54:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b66:	0151      	lsls	r1, r2, #5
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	440a      	add	r2, r1
 8003b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b82:	461a      	mov	r2, r3
 8003b84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b88:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9a:	0151      	lsls	r1, r2, #5
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	440a      	add	r2, r1
 8003ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ba4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ba8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bba:	0151      	lsls	r1, r2, #5
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	440a      	add	r2, r1
 8003bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bc8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	3301      	adds	r3, #1
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d3a3      	bcc.n	8003b22 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003be8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003bec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d016      	beq.n	8003c24 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c06:	f043 030b 	orr.w	r3, r3, #11
 8003c0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c1c:	f043 030b 	orr.w	r3, r3, #11
 8003c20:	6453      	str	r3, [r2, #68]	; 0x44
 8003c22:	e015      	b.n	8003c50 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c36:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c4a:	f043 030b 	orr.w	r3, r3, #11
 8003c4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c74:	461a      	mov	r2, r3
 8003c76:	f004 fc71 	bl	800855c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f004 fb9f 	bl	80083d2 <USB_ReadInterrupts>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9e:	d124      	bne.n	8003cea <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f004 fc35 	bl	8008514 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f003 fcd5 	bl	800765e <USB_GetDevSpeed>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681c      	ldr	r4, [r3, #0]
 8003cc0:	f000 fdfe 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 8003cc4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f003 fa18 	bl	8007104 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f009 fac2 	bl	800d25e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f004 fb6f 	bl	80083d2 <USB_ReadInterrupts>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d10a      	bne.n	8003d14 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f009 fa9f 	bl	800d242 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f002 0208 	and.w	r2, r2, #8
 8003d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f004 fb5a 	bl	80083d2 <USB_ReadInterrupts>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d28:	d10f      	bne.n	8003d4a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	4619      	mov	r1, r3
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f009 fb01 	bl	800d33c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f004 fb3f 	bl	80083d2 <USB_ReadInterrupts>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d5e:	d10f      	bne.n	8003d80 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f009 fad4 	bl	800d318 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f004 fb24 	bl	80083d2 <USB_ReadInterrupts>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d94:	d10a      	bne.n	8003dac <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f009 fae2 	bl	800d360 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f004 fb0e 	bl	80083d2 <USB_ReadInterrupts>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d115      	bne.n	8003dec <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f009 fad2 	bl	800d37c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6859      	ldr	r1, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	e000      	b.n	8003dec <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003dea:	bf00      	nop
    }
  }
}
 8003dec:	3734      	adds	r7, #52	; 0x34
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd90      	pop	{r4, r7, pc}

08003df2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_PCD_SetAddress+0x1a>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e013      	b.n	8003e34 <HAL_PCD_SetAddress+0x42>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f004 fa6c 	bl	8008302 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	70fb      	strb	r3, [r7, #3]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	803b      	strh	r3, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	da0f      	bge.n	8003e82 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	f003 020f 	and.w	r2, r3, #15
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	3338      	adds	r3, #56	; 0x38
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	705a      	strb	r2, [r3, #1]
 8003e80:	e00f      	b.n	8003ea2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	f003 020f 	and.w	r2, r3, #15
 8003e88:	4613      	mov	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	4413      	add	r3, r2
 8003e98:	3304      	adds	r3, #4
 8003e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003eae:	883a      	ldrh	r2, [r7, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	78ba      	ldrb	r2, [r7, #2]
 8003eb8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	785b      	ldrb	r3, [r3, #1]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ecc:	78bb      	ldrb	r3, [r7, #2]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d102      	bne.n	8003ed8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_PCD_EP_Open+0xaa>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e00e      	b.n	8003f04 <HAL_PCD_EP_Open+0xc8>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68f9      	ldr	r1, [r7, #12]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f003 fbd7 	bl	80076a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003f02:	7afb      	ldrb	r3, [r7, #11]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	da0f      	bge.n	8003f40 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	f003 020f 	and.w	r2, r3, #15
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	3338      	adds	r3, #56	; 0x38
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	4413      	add	r3, r2
 8003f34:	3304      	adds	r3, #4
 8003f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	705a      	strb	r2, [r3, #1]
 8003f3e:	e00f      	b.n	8003f60 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	f003 020f 	and.w	r2, r3, #15
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	4413      	add	r3, r2
 8003f56:	3304      	adds	r3, #4
 8003f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_PCD_EP_Close+0x6e>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e00e      	b.n	8003f98 <HAL_PCD_EP_Close+0x8c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68f9      	ldr	r1, [r7, #12]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f003 fc15 	bl	80077b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	460b      	mov	r3, r1
 8003fae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fb0:	7afb      	ldrb	r3, [r7, #11]
 8003fb2:	f003 020f 	and.w	r2, r3, #15
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe2:	7afb      	ldrb	r3, [r7, #11]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d102      	bne.n	8003ffc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ffc:	7afb      	ldrb	r3, [r7, #11]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	6979      	ldr	r1, [r7, #20]
 8004014:	f003 fef0 	bl	8007df8 <USB_EP0StartXfer>
 8004018:	e008      	b.n	800402c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	6979      	ldr	r1, [r7, #20]
 8004028:	f003 fca2 	bl	8007970 <USB_EPStartXfer>
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	460b      	mov	r3, r1
 8004044:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004046:	7afb      	ldrb	r3, [r7, #11]
 8004048:	f003 020f 	and.w	r2, r3, #15
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	3338      	adds	r3, #56	; 0x38
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4413      	add	r3, r2
 800405a:	3304      	adds	r3, #4
 800405c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2201      	movs	r2, #1
 8004074:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004076:	7afb      	ldrb	r3, [r7, #11]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	b2da      	uxtb	r2, r3
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d102      	bne.n	8004090 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004090:	7afb      	ldrb	r3, [r7, #11]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	6979      	ldr	r1, [r7, #20]
 80040a8:	f003 fea6 	bl	8007df8 <USB_EP0StartXfer>
 80040ac:	e008      	b.n	80040c0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	6979      	ldr	r1, [r7, #20]
 80040bc:	f003 fc58 	bl	8007970 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	f003 020f 	and.w	r2, r3, #15
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d901      	bls.n	80040e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e050      	b.n	800418a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	da0f      	bge.n	8004110 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	f003 020f 	and.w	r2, r3, #15
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	3338      	adds	r3, #56	; 0x38
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4413      	add	r3, r2
 8004104:	3304      	adds	r3, #4
 8004106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	705a      	strb	r2, [r3, #1]
 800410e:	e00d      	b.n	800412c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	4413      	add	r3, r2
 8004122:	3304      	adds	r3, #4
 8004124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	b2da      	uxtb	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_PCD_EP_SetStall+0x82>
 8004148:	2302      	movs	r3, #2
 800414a:	e01e      	b.n	800418a <HAL_PCD_EP_SetStall+0xc0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	4618      	mov	r0, r3
 800415c:	f003 fffd 	bl	800815a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	b2d9      	uxtb	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800417a:	461a      	mov	r2, r3
 800417c:	f004 f9ee 	bl	800855c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	f003 020f 	and.w	r2, r3, #15
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d901      	bls.n	80041b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e042      	b.n	8004236 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	da0f      	bge.n	80041d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	f003 020f 	and.w	r2, r3, #15
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	3338      	adds	r3, #56	; 0x38
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	3304      	adds	r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	705a      	strb	r2, [r3, #1]
 80041d6:	e00f      	b.n	80041f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	f003 020f 	and.w	r2, r3, #15
 80041de:	4613      	mov	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	3304      	adds	r3, #4
 80041f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_PCD_EP_ClrStall+0x86>
 8004214:	2302      	movs	r3, #2
 8004216:	e00e      	b.n	8004236 <HAL_PCD_EP_ClrStall+0xa4>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68f9      	ldr	r1, [r7, #12]
 8004226:	4618      	mov	r0, r3
 8004228:	f004 f805 	bl	8008236 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b08a      	sub	sp, #40	; 0x28
 8004242:	af02      	add	r7, sp, #8
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	3338      	adds	r3, #56	; 0x38
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	3304      	adds	r3, #4
 8004264:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	429a      	cmp	r2, r3
 8004270:	d901      	bls.n	8004276 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e06c      	b.n	8004350 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	429a      	cmp	r2, r3
 800428a:	d902      	bls.n	8004292 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3303      	adds	r3, #3
 8004296:	089b      	lsrs	r3, r3, #2
 8004298:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800429a:	e02b      	b.n	80042f4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d902      	bls.n	80042b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	3303      	adds	r3, #3
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	68d9      	ldr	r1, [r3, #12]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	4603      	mov	r3, r0
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	f003 fee1 	bl	800809e <USB_WritePacket>

    ep->xfer_buff  += len;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	441a      	add	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	699a      	ldr	r2, [r3, #24]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	441a      	add	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	b29b      	uxth	r3, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	429a      	cmp	r2, r3
 8004308:	d809      	bhi.n	800431e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004312:	429a      	cmp	r2, r3
 8004314:	d203      	bcs.n	800431e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1be      	bne.n	800429c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	429a      	cmp	r2, r3
 8004328:	d811      	bhi.n	800434e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	2201      	movs	r2, #1
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	43db      	mvns	r3, r3
 8004344:	6939      	ldr	r1, [r7, #16]
 8004346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800434a:	4013      	ands	r3, r2
 800434c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3720      	adds	r7, #32
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	333c      	adds	r3, #60	; 0x3c
 8004370:	3304      	adds	r3, #4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b01      	cmp	r3, #1
 800438c:	f040 80a0 	bne.w	80044d0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d015      	beq.n	80043c6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a72      	ldr	r2, [pc, #456]	; (8004568 <PCD_EP_OutXfrComplete_int+0x210>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	f240 80dd 	bls.w	800455e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 80d7 	beq.w	800455e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043bc:	461a      	mov	r2, r3
 80043be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c2:	6093      	str	r3, [r2, #8]
 80043c4:	e0cb      	b.n	800455e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	461a      	mov	r2, r3
 80043de:	2320      	movs	r3, #32
 80043e0:	6093      	str	r3, [r2, #8]
 80043e2:	e0bc      	b.n	800455e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f040 80b7 	bne.w	800455e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4a5d      	ldr	r2, [pc, #372]	; (8004568 <PCD_EP_OutXfrComplete_int+0x210>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d90f      	bls.n	8004418 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440e:	461a      	mov	r2, r3
 8004410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004414:	6093      	str	r3, [r2, #8]
 8004416:	e0a2      	b.n	800455e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800442a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	0159      	lsls	r1, r3, #5
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	440b      	add	r3, r1
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800443e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4403      	add	r3, r0
 800444e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004452:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004466:	6819      	ldr	r1, [r3, #0]
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4403      	add	r3, r0
 8004476:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4419      	add	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4403      	add	r3, r0
 800448c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004490:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d114      	bne.n	80044c2 <PCD_EP_OutXfrComplete_int+0x16a>
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d108      	bne.n	80044c2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044ba:	461a      	mov	r2, r3
 80044bc:	2101      	movs	r1, #1
 80044be:	f004 f84d 	bl	800855c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f008 fe85 	bl	800d1d8 <HAL_PCD_DataOutStageCallback>
 80044ce:	e046      	b.n	800455e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a26      	ldr	r2, [pc, #152]	; (800456c <PCD_EP_OutXfrComplete_int+0x214>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d124      	bne.n	8004522 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ee:	461a      	mov	r2, r3
 80044f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f4:	6093      	str	r3, [r2, #8]
 80044f6:	e032      	b.n	800455e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450e:	461a      	mov	r2, r3
 8004510:	2320      	movs	r3, #32
 8004512:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f008 fe5c 	bl	800d1d8 <HAL_PCD_DataOutStageCallback>
 8004520:	e01d      	b.n	800455e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d114      	bne.n	8004552 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d108      	bne.n	8004552 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800454a:	461a      	mov	r2, r3
 800454c:	2100      	movs	r1, #0
 800454e:	f004 f805 	bl	800855c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f008 fe3d 	bl	800d1d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	4f54300a 	.word	0x4f54300a
 800456c:	4f54310a 	.word	0x4f54310a

08004570 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	333c      	adds	r3, #60	; 0x3c
 8004588:	3304      	adds	r3, #4
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d90e      	bls.n	80045c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045bc:	461a      	mov	r2, r3
 80045be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f008 fdf5 	bl	800d1b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d90c      	bls.n	80045ec <PCD_EP_OutSetupPacket_int+0x7c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d108      	bne.n	80045ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045e4:	461a      	mov	r2, r3
 80045e6:	2101      	movs	r1, #1
 80045e8:	f003 ffb8 	bl	800855c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	4f54300a 	.word	0x4f54300a

080045fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	70fb      	strb	r3, [r7, #3]
 8004608:	4613      	mov	r3, r2
 800460a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d107      	bne.n	800462a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800461a:	883b      	ldrh	r3, [r7, #0]
 800461c:	0419      	lsls	r1, r3, #16
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	430a      	orrs	r2, r1
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
 8004628:	e028      	b.n	800467c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	0c1b      	lsrs	r3, r3, #16
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	4413      	add	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004638:	2300      	movs	r3, #0
 800463a:	73fb      	strb	r3, [r7, #15]
 800463c:	e00d      	b.n	800465a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	3340      	adds	r3, #64	; 0x40
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4413      	add	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	3301      	adds	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
 800465a:	7bfa      	ldrb	r2, [r7, #15]
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	3b01      	subs	r3, #1
 8004660:	429a      	cmp	r2, r3
 8004662:	d3ec      	bcc.n	800463e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004664:	883b      	ldrh	r3, [r7, #0]
 8004666:	0418      	lsls	r0, r3, #16
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6819      	ldr	r1, [r3, #0]
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	3b01      	subs	r3, #1
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	4302      	orrs	r2, r0
 8004674:	3340      	adds	r3, #64	; 0x40
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	460b      	mov	r3, r1
 8004694:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046de:	f043 0303 	orr.w	r3, r3, #3
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0cc      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004708:	4b68      	ldr	r3, [pc, #416]	; (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d90c      	bls.n	8004730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b65      	ldr	r3, [pc, #404]	; (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800471e:	4b63      	ldr	r3, [pc, #396]	; (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d001      	beq.n	8004730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0b8      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d020      	beq.n	800477e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004748:	4b59      	ldr	r3, [pc, #356]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4a58      	ldr	r2, [pc, #352]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004760:	4b53      	ldr	r3, [pc, #332]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4a52      	ldr	r2, [pc, #328]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800476a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800476c:	4b50      	ldr	r3, [pc, #320]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	494d      	ldr	r1, [pc, #308]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	4313      	orrs	r3, r2
 800477c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d044      	beq.n	8004814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d107      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	4b47      	ldr	r3, [pc, #284]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d119      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e07f      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d003      	beq.n	80047b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d107      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b2:	4b3f      	ldr	r3, [pc, #252]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d109      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e06f      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c2:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e067      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d2:	4b37      	ldr	r3, [pc, #220]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f023 0203 	bic.w	r2, r3, #3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4934      	ldr	r1, [pc, #208]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e4:	f7fd fe9c 	bl	8002520 <HAL_GetTick>
 80047e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ea:	e00a      	b.n	8004802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ec:	f7fd fe98 	bl	8002520 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e04f      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004802:	4b2b      	ldr	r3, [pc, #172]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 020c 	and.w	r2, r3, #12
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	429a      	cmp	r2, r3
 8004812:	d1eb      	bne.n	80047ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004814:	4b25      	ldr	r3, [pc, #148]	; (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d20c      	bcs.n	800483c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004822:	4b22      	ldr	r3, [pc, #136]	; (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	4b20      	ldr	r3, [pc, #128]	; (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e032      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004848:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4916      	ldr	r1, [pc, #88]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	490e      	ldr	r1, [pc, #56]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800487a:	f000 fbb1 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 800487e:	4602      	mov	r2, r0
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	490a      	ldr	r1, [pc, #40]	; (80048b4 <HAL_RCC_ClockConfig+0x1c0>)
 800488c:	5ccb      	ldrb	r3, [r1, r3]
 800488e:	fa22 f303 	lsr.w	r3, r2, r3
 8004892:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004896:	4b09      	ldr	r3, [pc, #36]	; (80048bc <HAL_RCC_ClockConfig+0x1c8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fd fd1a 	bl	80022d4 <HAL_InitTick>

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40023c00 	.word	0x40023c00
 80048b0:	40023800 	.word	0x40023800
 80048b4:	08015710 	.word	0x08015710
 80048b8:	20000004 	.word	0x20000004
 80048bc:	20000008 	.word	0x20000008

080048c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c4:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000004 	.word	0x20000004

080048d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048dc:	f7ff fff0 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	0a9b      	lsrs	r3, r3, #10
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	4903      	ldr	r1, [pc, #12]	; (80048fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ee:	5ccb      	ldrb	r3, [r1, r3]
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40023800 	.word	0x40023800
 80048fc:	08015720 	.word	0x08015720

08004900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004904:	f7ff ffdc 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b05      	ldr	r3, [pc, #20]	; (8004920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	0b5b      	lsrs	r3, r3, #13
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4903      	ldr	r1, [pc, #12]	; (8004924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800491c:	4618      	mov	r0, r3
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40023800 	.word	0x40023800
 8004924:	08015720 	.word	0x08015720

08004928 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	220f      	movs	r2, #15
 8004936:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004938:	4b12      	ldr	r3, [pc, #72]	; (8004984 <HAL_RCC_GetClockConfig+0x5c>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 0203 	and.w	r2, r3, #3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004944:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <HAL_RCC_GetClockConfig+0x5c>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <HAL_RCC_GetClockConfig+0x5c>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_RCC_GetClockConfig+0x5c>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	08db      	lsrs	r3, r3, #3
 8004962:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800496a:	4b07      	ldr	r3, [pc, #28]	; (8004988 <HAL_RCC_GetClockConfig+0x60>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 020f 	and.w	r2, r3, #15
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	601a      	str	r2, [r3, #0]
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800
 8004988:	40023c00 	.word	0x40023c00

0800498c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08c      	sub	sp, #48	; 0x30
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d010      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80049c4:	4b6f      	ldr	r3, [pc, #444]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ca:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	496c      	ldr	r1, [pc, #432]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80049e2:	2301      	movs	r3, #1
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d010      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80049f2:	4b64      	ldr	r3, [pc, #400]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a00:	4960      	ldr	r1, [pc, #384]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004a10:	2301      	movs	r3, #1
 8004a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d017      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a20:	4b58      	ldr	r3, [pc, #352]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	4955      	ldr	r1, [pc, #340]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a3e:	d101      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004a40:	2301      	movs	r3, #1
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d017      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a5c:	4b49      	ldr	r3, [pc, #292]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6a:	4946      	ldr	r1, [pc, #280]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a7a:	d101      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 808a 	beq.w	8004bae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	4a38      	ldr	r2, [pc, #224]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aaa:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ab6:	4b34      	ldr	r3, [pc, #208]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a33      	ldr	r2, [pc, #204]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ac2:	f7fd fd2d 	bl	8002520 <HAL_GetTick>
 8004ac6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ac8:	e008      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004aca:	f7fd fd29 	bl	8002520 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e278      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004adc:	4b2a      	ldr	r3, [pc, #168]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ae8:	4b26      	ldr	r3, [pc, #152]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d02f      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b00:	6a3a      	ldr	r2, [r7, #32]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d028      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b06:	4b1f      	ldr	r3, [pc, #124]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b10:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b16:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b1c:	4a19      	ldr	r2, [pc, #100]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b22:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d114      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b2e:	f7fd fcf7 	bl	8002520 <HAL_GetTick>
 8004b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b34:	e00a      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b36:	f7fd fcf3 	bl	8002520 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e240      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4c:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ee      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b64:	d114      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004b66:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7a:	4902      	ldr	r1, [pc, #8]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	608b      	str	r3, [r1, #8]
 8004b80:	e00c      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	42470e40 	.word	0x42470e40
 8004b90:	4b4a      	ldr	r3, [pc, #296]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4a49      	ldr	r2, [pc, #292]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b9a:	6093      	str	r3, [r2, #8]
 8004b9c:	4b47      	ldr	r3, [pc, #284]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba8:	4944      	ldr	r1, [pc, #272]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d004      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004bc0:	4b3f      	ldr	r3, [pc, #252]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004bc2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004bd0:	4b3a      	ldr	r3, [pc, #232]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	4937      	ldr	r1, [pc, #220]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bf2:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c00:	492e      	ldr	r1, [pc, #184]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d011      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c14:	4b29      	ldr	r3, [pc, #164]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	4926      	ldr	r1, [pc, #152]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c32:	d101      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004c34:	2301      	movs	r3, #1
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004c44:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	491a      	ldr	r1, [pc, #104]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d011      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004c66:	4b15      	ldr	r3, [pc, #84]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c6c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c74:	4911      	ldr	r1, [pc, #68]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c84:	d101      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004c86:	2301      	movs	r3, #1
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c98:	f040 80ff 	bne.w	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c9c:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ca2:	f7fd fc3d 	bl	8002520 <HAL_GetTick>
 8004ca6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca8:	e00e      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004caa:	f7fd fc39 	bl	8002520 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d907      	bls.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e188      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	424711e0 	.word	0x424711e0
 8004cc4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cc8:	4b7e      	ldr	r3, [pc, #504]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1ea      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d009      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d028      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d124      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004cfc:	4b71      	ldr	r3, [pc, #452]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d02:	0c1b      	lsrs	r3, r3, #16
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	3301      	adds	r3, #1
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d0e:	4b6d      	ldr	r3, [pc, #436]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d14:	0e1b      	lsrs	r3, r3, #24
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	019b      	lsls	r3, r3, #6
 8004d26:	431a      	orrs	r2, r3
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	041b      	lsls	r3, r3, #16
 8004d30:	431a      	orrs	r2, r3
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	061b      	lsls	r3, r3, #24
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	071b      	lsls	r3, r3, #28
 8004d3e:	4961      	ldr	r1, [pc, #388]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d035      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d70:	d130      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004d72:	4b54      	ldr	r3, [pc, #336]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d78:	0c1b      	lsrs	r3, r3, #16
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	3301      	adds	r3, #1
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d84:	4b4f      	ldr	r3, [pc, #316]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d8a:	0f1b      	lsrs	r3, r3, #28
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	019b      	lsls	r3, r3, #6
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	3b01      	subs	r3, #1
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	431a      	orrs	r2, r3
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	071b      	lsls	r3, r3, #28
 8004db4:	4943      	ldr	r1, [pc, #268]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004dbc:	4b41      	ldr	r3, [pc, #260]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc2:	f023 021f 	bic.w	r2, r3, #31
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	493d      	ldr	r1, [pc, #244]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d029      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de8:	d124      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004dea:	4b36      	ldr	r3, [pc, #216]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	3301      	adds	r3, #1
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dfc:	4b31      	ldr	r3, [pc, #196]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e02:	0f1b      	lsrs	r3, r3, #28
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	019b      	lsls	r3, r3, #6
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	085b      	lsrs	r3, r3, #1
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	041b      	lsls	r3, r3, #16
 8004e20:	431a      	orrs	r2, r3
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	061b      	lsls	r3, r3, #24
 8004e26:	431a      	orrs	r2, r3
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	071b      	lsls	r3, r3, #28
 8004e2c:	4925      	ldr	r1, [pc, #148]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d016      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	019b      	lsls	r3, r3, #6
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	085b      	lsrs	r3, r3, #1
 8004e52:	3b01      	subs	r3, #1
 8004e54:	041b      	lsls	r3, r3, #16
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	061b      	lsls	r3, r3, #24
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	071b      	lsls	r3, r3, #28
 8004e66:	4917      	ldr	r1, [pc, #92]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e6e:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e74:	f7fd fb54 	bl	8002520 <HAL_GetTick>
 8004e78:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e7c:	f7fd fb50 	bl	8002520 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e09f      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	f040 8095 	bne.w	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ea8:	f7fd fb3a 	bl	8002520 <HAL_GetTick>
 8004eac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004eae:	e00f      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004eb0:	f7fd fb36 	bl	8002520 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d908      	bls.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e085      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004ec2:	bf00      	nop
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	42470068 	.word	0x42470068
 8004ecc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ed0:	4b41      	ldr	r3, [pc, #260]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004edc:	d0e8      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d02b      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d127      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004f06:	4b34      	ldr	r3, [pc, #208]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	0c1b      	lsrs	r3, r3, #16
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	3301      	adds	r3, #1
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699a      	ldr	r2, [r3, #24]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	019b      	lsls	r3, r3, #6
 8004f22:	431a      	orrs	r2, r3
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	061b      	lsls	r3, r3, #24
 8004f34:	4928      	ldr	r1, [pc, #160]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f3c:	4b26      	ldr	r3, [pc, #152]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f42:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	4922      	ldr	r1, [pc, #136]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01d      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f6a:	d118      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	0e1b      	lsrs	r3, r3, #24
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	019b      	lsls	r3, r3, #6
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	041b      	lsls	r3, r3, #16
 8004f90:	431a      	orrs	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	061b      	lsls	r3, r3, #24
 8004f96:	4910      	ldr	r1, [pc, #64]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f9e:	4b0f      	ldr	r3, [pc, #60]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fa4:	f7fd fabc 	bl	8002520 <HAL_GetTick>
 8004fa8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fac:	f7fd fab8 	bl	8002520 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e007      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fca:	d1ef      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3730      	adds	r7, #48	; 0x30
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	42470070 	.word	0x42470070

08004fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe4:	b088      	sub	sp, #32
 8004fe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ffc:	4bce      	ldr	r3, [pc, #824]	; (8005338 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 030c 	and.w	r3, r3, #12
 8005004:	2b0c      	cmp	r3, #12
 8005006:	f200 818d 	bhi.w	8005324 <HAL_RCC_GetSysClockFreq+0x344>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <HAL_RCC_GetSysClockFreq+0x30>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005045 	.word	0x08005045
 8005014:	08005325 	.word	0x08005325
 8005018:	08005325 	.word	0x08005325
 800501c:	08005325 	.word	0x08005325
 8005020:	0800504b 	.word	0x0800504b
 8005024:	08005325 	.word	0x08005325
 8005028:	08005325 	.word	0x08005325
 800502c:	08005325 	.word	0x08005325
 8005030:	08005051 	.word	0x08005051
 8005034:	08005325 	.word	0x08005325
 8005038:	08005325 	.word	0x08005325
 800503c:	08005325 	.word	0x08005325
 8005040:	080051c5 	.word	0x080051c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005044:	4bbd      	ldr	r3, [pc, #756]	; (800533c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005046:	61bb      	str	r3, [r7, #24]
       break;
 8005048:	e16f      	b.n	800532a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800504a:	4bbd      	ldr	r3, [pc, #756]	; (8005340 <HAL_RCC_GetSysClockFreq+0x360>)
 800504c:	61bb      	str	r3, [r7, #24]
      break;
 800504e:	e16c      	b.n	800532a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005050:	4bb9      	ldr	r3, [pc, #740]	; (8005338 <HAL_RCC_GetSysClockFreq+0x358>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005058:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800505a:	4bb7      	ldr	r3, [pc, #732]	; (8005338 <HAL_RCC_GetSysClockFreq+0x358>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d053      	beq.n	800510e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005066:	4bb4      	ldr	r3, [pc, #720]	; (8005338 <HAL_RCC_GetSysClockFreq+0x358>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	099b      	lsrs	r3, r3, #6
 800506c:	461a      	mov	r2, r3
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005076:	f04f 0100 	mov.w	r1, #0
 800507a:	ea02 0400 	and.w	r4, r2, r0
 800507e:	603c      	str	r4, [r7, #0]
 8005080:	400b      	ands	r3, r1
 8005082:	607b      	str	r3, [r7, #4]
 8005084:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005088:	4620      	mov	r0, r4
 800508a:	4629      	mov	r1, r5
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	014b      	lsls	r3, r1, #5
 8005096:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800509a:	0142      	lsls	r2, r0, #5
 800509c:	4610      	mov	r0, r2
 800509e:	4619      	mov	r1, r3
 80050a0:	4623      	mov	r3, r4
 80050a2:	1ac0      	subs	r0, r0, r3
 80050a4:	462b      	mov	r3, r5
 80050a6:	eb61 0103 	sbc.w	r1, r1, r3
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	f04f 0300 	mov.w	r3, #0
 80050b2:	018b      	lsls	r3, r1, #6
 80050b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050b8:	0182      	lsls	r2, r0, #6
 80050ba:	1a12      	subs	r2, r2, r0
 80050bc:	eb63 0301 	sbc.w	r3, r3, r1
 80050c0:	f04f 0000 	mov.w	r0, #0
 80050c4:	f04f 0100 	mov.w	r1, #0
 80050c8:	00d9      	lsls	r1, r3, #3
 80050ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050ce:	00d0      	lsls	r0, r2, #3
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4621      	mov	r1, r4
 80050d6:	1852      	adds	r2, r2, r1
 80050d8:	4629      	mov	r1, r5
 80050da:	eb43 0101 	adc.w	r1, r3, r1
 80050de:	460b      	mov	r3, r1
 80050e0:	f04f 0000 	mov.w	r0, #0
 80050e4:	f04f 0100 	mov.w	r1, #0
 80050e8:	0259      	lsls	r1, r3, #9
 80050ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80050ee:	0250      	lsls	r0, r2, #9
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4610      	mov	r0, r2
 80050f6:	4619      	mov	r1, r3
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	f7fb f88e 	bl	8000220 <__aeabi_uldivmod>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4613      	mov	r3, r2
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	e04c      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800510e:	4b8a      	ldr	r3, [pc, #552]	; (8005338 <HAL_RCC_GetSysClockFreq+0x358>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	099b      	lsrs	r3, r3, #6
 8005114:	461a      	mov	r2, r3
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800511e:	f04f 0100 	mov.w	r1, #0
 8005122:	ea02 0a00 	and.w	sl, r2, r0
 8005126:	ea03 0b01 	and.w	fp, r3, r1
 800512a:	4650      	mov	r0, sl
 800512c:	4659      	mov	r1, fp
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	014b      	lsls	r3, r1, #5
 8005138:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800513c:	0142      	lsls	r2, r0, #5
 800513e:	4610      	mov	r0, r2
 8005140:	4619      	mov	r1, r3
 8005142:	ebb0 000a 	subs.w	r0, r0, sl
 8005146:	eb61 010b 	sbc.w	r1, r1, fp
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	018b      	lsls	r3, r1, #6
 8005154:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005158:	0182      	lsls	r2, r0, #6
 800515a:	1a12      	subs	r2, r2, r0
 800515c:	eb63 0301 	sbc.w	r3, r3, r1
 8005160:	f04f 0000 	mov.w	r0, #0
 8005164:	f04f 0100 	mov.w	r1, #0
 8005168:	00d9      	lsls	r1, r3, #3
 800516a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800516e:	00d0      	lsls	r0, r2, #3
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	eb12 020a 	adds.w	r2, r2, sl
 8005178:	eb43 030b 	adc.w	r3, r3, fp
 800517c:	f04f 0000 	mov.w	r0, #0
 8005180:	f04f 0100 	mov.w	r1, #0
 8005184:	0299      	lsls	r1, r3, #10
 8005186:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800518a:	0290      	lsls	r0, r2, #10
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4610      	mov	r0, r2
 8005192:	4619      	mov	r1, r3
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	461a      	mov	r2, r3
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	f7fb f840 	bl	8000220 <__aeabi_uldivmod>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4613      	mov	r3, r2
 80051a6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051a8:	4b63      	ldr	r3, [pc, #396]	; (8005338 <HAL_RCC_GetSysClockFreq+0x358>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	0c1b      	lsrs	r3, r3, #16
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	3301      	adds	r3, #1
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c0:	61bb      	str	r3, [r7, #24]
      break;
 80051c2:	e0b2      	b.n	800532a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051c4:	4b5c      	ldr	r3, [pc, #368]	; (8005338 <HAL_RCC_GetSysClockFreq+0x358>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051cc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ce:	4b5a      	ldr	r3, [pc, #360]	; (8005338 <HAL_RCC_GetSysClockFreq+0x358>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d04d      	beq.n	8005276 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051da:	4b57      	ldr	r3, [pc, #348]	; (8005338 <HAL_RCC_GetSysClockFreq+0x358>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	099b      	lsrs	r3, r3, #6
 80051e0:	461a      	mov	r2, r3
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	ea02 0800 	and.w	r8, r2, r0
 80051f2:	ea03 0901 	and.w	r9, r3, r1
 80051f6:	4640      	mov	r0, r8
 80051f8:	4649      	mov	r1, r9
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	014b      	lsls	r3, r1, #5
 8005204:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005208:	0142      	lsls	r2, r0, #5
 800520a:	4610      	mov	r0, r2
 800520c:	4619      	mov	r1, r3
 800520e:	ebb0 0008 	subs.w	r0, r0, r8
 8005212:	eb61 0109 	sbc.w	r1, r1, r9
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	018b      	lsls	r3, r1, #6
 8005220:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005224:	0182      	lsls	r2, r0, #6
 8005226:	1a12      	subs	r2, r2, r0
 8005228:	eb63 0301 	sbc.w	r3, r3, r1
 800522c:	f04f 0000 	mov.w	r0, #0
 8005230:	f04f 0100 	mov.w	r1, #0
 8005234:	00d9      	lsls	r1, r3, #3
 8005236:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800523a:	00d0      	lsls	r0, r2, #3
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	eb12 0208 	adds.w	r2, r2, r8
 8005244:	eb43 0309 	adc.w	r3, r3, r9
 8005248:	f04f 0000 	mov.w	r0, #0
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	0259      	lsls	r1, r3, #9
 8005252:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005256:	0250      	lsls	r0, r2, #9
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4610      	mov	r0, r2
 800525e:	4619      	mov	r1, r3
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	461a      	mov	r2, r3
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	f7fa ffda 	bl	8000220 <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4613      	mov	r3, r2
 8005272:	61fb      	str	r3, [r7, #28]
 8005274:	e04a      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005276:	4b30      	ldr	r3, [pc, #192]	; (8005338 <HAL_RCC_GetSysClockFreq+0x358>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	099b      	lsrs	r3, r3, #6
 800527c:	461a      	mov	r2, r3
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005286:	f04f 0100 	mov.w	r1, #0
 800528a:	ea02 0400 	and.w	r4, r2, r0
 800528e:	ea03 0501 	and.w	r5, r3, r1
 8005292:	4620      	mov	r0, r4
 8005294:	4629      	mov	r1, r5
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	014b      	lsls	r3, r1, #5
 80052a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052a4:	0142      	lsls	r2, r0, #5
 80052a6:	4610      	mov	r0, r2
 80052a8:	4619      	mov	r1, r3
 80052aa:	1b00      	subs	r0, r0, r4
 80052ac:	eb61 0105 	sbc.w	r1, r1, r5
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	018b      	lsls	r3, r1, #6
 80052ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052be:	0182      	lsls	r2, r0, #6
 80052c0:	1a12      	subs	r2, r2, r0
 80052c2:	eb63 0301 	sbc.w	r3, r3, r1
 80052c6:	f04f 0000 	mov.w	r0, #0
 80052ca:	f04f 0100 	mov.w	r1, #0
 80052ce:	00d9      	lsls	r1, r3, #3
 80052d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d4:	00d0      	lsls	r0, r2, #3
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	1912      	adds	r2, r2, r4
 80052dc:	eb45 0303 	adc.w	r3, r5, r3
 80052e0:	f04f 0000 	mov.w	r0, #0
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	0299      	lsls	r1, r3, #10
 80052ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052ee:	0290      	lsls	r0, r2, #10
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4610      	mov	r0, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	f7fa ff8e 	bl	8000220 <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4613      	mov	r3, r2
 800530a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <HAL_RCC_GetSysClockFreq+0x358>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	0f1b      	lsrs	r3, r3, #28
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005320:	61bb      	str	r3, [r7, #24]
      break;
 8005322:	e002      	b.n	800532a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005326:	61bb      	str	r3, [r7, #24]
      break;
 8005328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800532a:	69bb      	ldr	r3, [r7, #24]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800
 800533c:	00f42400 	.word	0x00f42400
 8005340:	007a1200 	.word	0x007a1200

08005344 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e28d      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8083 	beq.w	800546a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005364:	4b94      	ldr	r3, [pc, #592]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 030c 	and.w	r3, r3, #12
 800536c:	2b04      	cmp	r3, #4
 800536e:	d019      	beq.n	80053a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005370:	4b91      	ldr	r3, [pc, #580]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005378:	2b08      	cmp	r3, #8
 800537a:	d106      	bne.n	800538a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800537c:	4b8e      	ldr	r3, [pc, #568]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005384:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005388:	d00c      	beq.n	80053a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538a:	4b8b      	ldr	r3, [pc, #556]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005392:	2b0c      	cmp	r3, #12
 8005394:	d112      	bne.n	80053bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005396:	4b88      	ldr	r3, [pc, #544]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a2:	d10b      	bne.n	80053bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a4:	4b84      	ldr	r3, [pc, #528]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d05b      	beq.n	8005468 <HAL_RCC_OscConfig+0x124>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d157      	bne.n	8005468 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e25a      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c4:	d106      	bne.n	80053d4 <HAL_RCC_OscConfig+0x90>
 80053c6:	4b7c      	ldr	r3, [pc, #496]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a7b      	ldr	r2, [pc, #492]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	e01d      	b.n	8005410 <HAL_RCC_OscConfig+0xcc>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053dc:	d10c      	bne.n	80053f8 <HAL_RCC_OscConfig+0xb4>
 80053de:	4b76      	ldr	r3, [pc, #472]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a75      	ldr	r2, [pc, #468]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b73      	ldr	r3, [pc, #460]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a72      	ldr	r2, [pc, #456]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	e00b      	b.n	8005410 <HAL_RCC_OscConfig+0xcc>
 80053f8:	4b6f      	ldr	r3, [pc, #444]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a6e      	ldr	r2, [pc, #440]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 80053fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4b6c      	ldr	r3, [pc, #432]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a6b      	ldr	r2, [pc, #428]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 800540a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800540e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d013      	beq.n	8005440 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fd f882 	bl	8002520 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005420:	f7fd f87e 	bl	8002520 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b64      	cmp	r3, #100	; 0x64
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e21f      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005432:	4b61      	ldr	r3, [pc, #388]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0f0      	beq.n	8005420 <HAL_RCC_OscConfig+0xdc>
 800543e:	e014      	b.n	800546a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fd f86e 	bl	8002520 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005448:	f7fd f86a 	bl	8002520 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	; 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e20b      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545a:	4b57      	ldr	r3, [pc, #348]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x104>
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d06f      	beq.n	8005556 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005476:	4b50      	ldr	r3, [pc, #320]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	2b00      	cmp	r3, #0
 8005480:	d017      	beq.n	80054b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005482:	4b4d      	ldr	r3, [pc, #308]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800548a:	2b08      	cmp	r3, #8
 800548c:	d105      	bne.n	800549a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800548e:	4b4a      	ldr	r3, [pc, #296]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800549a:	4b47      	ldr	r3, [pc, #284]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054a2:	2b0c      	cmp	r3, #12
 80054a4:	d11c      	bne.n	80054e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054a6:	4b44      	ldr	r3, [pc, #272]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d116      	bne.n	80054e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b2:	4b41      	ldr	r3, [pc, #260]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <HAL_RCC_OscConfig+0x186>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d001      	beq.n	80054ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e1d3      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ca:	4b3b      	ldr	r3, [pc, #236]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4937      	ldr	r1, [pc, #220]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054de:	e03a      	b.n	8005556 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d020      	beq.n	800552a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054e8:	4b34      	ldr	r3, [pc, #208]	; (80055bc <HAL_RCC_OscConfig+0x278>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ee:	f7fd f817 	bl	8002520 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054f6:	f7fd f813 	bl	8002520 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e1b4      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005508:	4b2b      	ldr	r3, [pc, #172]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005514:	4b28      	ldr	r3, [pc, #160]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	4925      	ldr	r1, [pc, #148]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 8005524:	4313      	orrs	r3, r2
 8005526:	600b      	str	r3, [r1, #0]
 8005528:	e015      	b.n	8005556 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800552a:	4b24      	ldr	r3, [pc, #144]	; (80055bc <HAL_RCC_OscConfig+0x278>)
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fc fff6 	bl	8002520 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005538:	f7fc fff2 	bl	8002520 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e193      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554a:	4b1b      	ldr	r3, [pc, #108]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d036      	beq.n	80055d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d016      	beq.n	8005598 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800556a:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800556c:	2201      	movs	r2, #1
 800556e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005570:	f7fc ffd6 	bl	8002520 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005578:	f7fc ffd2 	bl	8002520 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e173      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558a:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <HAL_RCC_OscConfig+0x274>)
 800558c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f0      	beq.n	8005578 <HAL_RCC_OscConfig+0x234>
 8005596:	e01b      	b.n	80055d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005598:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559e:	f7fc ffbf 	bl	8002520 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a4:	e00e      	b.n	80055c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055a6:	f7fc ffbb 	bl	8002520 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d907      	bls.n	80055c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e15c      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
 80055b8:	40023800 	.word	0x40023800
 80055bc:	42470000 	.word	0x42470000
 80055c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c4:	4b8a      	ldr	r3, [pc, #552]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80055c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1ea      	bne.n	80055a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 8097 	beq.w	800570c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055de:	2300      	movs	r3, #0
 80055e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055e2:	4b83      	ldr	r3, [pc, #524]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10f      	bne.n	800560e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	4b7f      	ldr	r3, [pc, #508]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	4a7e      	ldr	r2, [pc, #504]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80055f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055fc:	6413      	str	r3, [r2, #64]	; 0x40
 80055fe:	4b7c      	ldr	r3, [pc, #496]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005606:	60bb      	str	r3, [r7, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800560a:	2301      	movs	r3, #1
 800560c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560e:	4b79      	ldr	r3, [pc, #484]	; (80057f4 <HAL_RCC_OscConfig+0x4b0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005616:	2b00      	cmp	r3, #0
 8005618:	d118      	bne.n	800564c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800561a:	4b76      	ldr	r3, [pc, #472]	; (80057f4 <HAL_RCC_OscConfig+0x4b0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a75      	ldr	r2, [pc, #468]	; (80057f4 <HAL_RCC_OscConfig+0x4b0>)
 8005620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005626:	f7fc ff7b 	bl	8002520 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800562e:	f7fc ff77 	bl	8002520 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e118      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005640:	4b6c      	ldr	r3, [pc, #432]	; (80057f4 <HAL_RCC_OscConfig+0x4b0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d106      	bne.n	8005662 <HAL_RCC_OscConfig+0x31e>
 8005654:	4b66      	ldr	r3, [pc, #408]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005658:	4a65      	ldr	r2, [pc, #404]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	6713      	str	r3, [r2, #112]	; 0x70
 8005660:	e01c      	b.n	800569c <HAL_RCC_OscConfig+0x358>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b05      	cmp	r3, #5
 8005668:	d10c      	bne.n	8005684 <HAL_RCC_OscConfig+0x340>
 800566a:	4b61      	ldr	r3, [pc, #388]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566e:	4a60      	ldr	r2, [pc, #384]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005670:	f043 0304 	orr.w	r3, r3, #4
 8005674:	6713      	str	r3, [r2, #112]	; 0x70
 8005676:	4b5e      	ldr	r3, [pc, #376]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567a:	4a5d      	ldr	r2, [pc, #372]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	6713      	str	r3, [r2, #112]	; 0x70
 8005682:	e00b      	b.n	800569c <HAL_RCC_OscConfig+0x358>
 8005684:	4b5a      	ldr	r3, [pc, #360]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005688:	4a59      	ldr	r2, [pc, #356]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 800568a:	f023 0301 	bic.w	r3, r3, #1
 800568e:	6713      	str	r3, [r2, #112]	; 0x70
 8005690:	4b57      	ldr	r3, [pc, #348]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	4a56      	ldr	r2, [pc, #344]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005696:	f023 0304 	bic.w	r3, r3, #4
 800569a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d015      	beq.n	80056d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a4:	f7fc ff3c 	bl	8002520 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056aa:	e00a      	b.n	80056c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ac:	f7fc ff38 	bl	8002520 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e0d7      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c2:	4b4b      	ldr	r3, [pc, #300]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0ee      	beq.n	80056ac <HAL_RCC_OscConfig+0x368>
 80056ce:	e014      	b.n	80056fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d0:	f7fc ff26 	bl	8002520 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d8:	f7fc ff22 	bl	8002520 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e0c1      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ee:	4b40      	ldr	r3, [pc, #256]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1ee      	bne.n	80056d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d105      	bne.n	800570c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005700:	4b3b      	ldr	r3, [pc, #236]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	4a3a      	ldr	r2, [pc, #232]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800570a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80ad 	beq.w	8005870 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005716:	4b36      	ldr	r3, [pc, #216]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 030c 	and.w	r3, r3, #12
 800571e:	2b08      	cmp	r3, #8
 8005720:	d060      	beq.n	80057e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d145      	bne.n	80057b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572a:	4b33      	ldr	r3, [pc, #204]	; (80057f8 <HAL_RCC_OscConfig+0x4b4>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fc fef6 	bl	8002520 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005738:	f7fc fef2 	bl	8002520 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e093      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574a:	4b29      	ldr	r3, [pc, #164]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f0      	bne.n	8005738 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69da      	ldr	r2, [r3, #28]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	019b      	lsls	r3, r3, #6
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576c:	085b      	lsrs	r3, r3, #1
 800576e:	3b01      	subs	r3, #1
 8005770:	041b      	lsls	r3, r3, #16
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	061b      	lsls	r3, r3, #24
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	071b      	lsls	r3, r3, #28
 8005782:	491b      	ldr	r1, [pc, #108]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005788:	4b1b      	ldr	r3, [pc, #108]	; (80057f8 <HAL_RCC_OscConfig+0x4b4>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578e:	f7fc fec7 	bl	8002520 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005796:	f7fc fec3 	bl	8002520 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e064      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a8:	4b11      	ldr	r3, [pc, #68]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x452>
 80057b4:	e05c      	b.n	8005870 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b6:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <HAL_RCC_OscConfig+0x4b4>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057bc:	f7fc feb0 	bl	8002520 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c4:	f7fc feac 	bl	8002520 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e04d      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <HAL_RCC_OscConfig+0x4ac>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x480>
 80057e2:	e045      	b.n	8005870 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e040      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
 80057f0:	40023800 	.word	0x40023800
 80057f4:	40007000 	.word	0x40007000
 80057f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057fc:	4b1f      	ldr	r3, [pc, #124]	; (800587c <HAL_RCC_OscConfig+0x538>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d030      	beq.n	800586c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005814:	429a      	cmp	r2, r3
 8005816:	d129      	bne.n	800586c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d122      	bne.n	800586c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800582c:	4013      	ands	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005834:	4293      	cmp	r3, r2
 8005836:	d119      	bne.n	800586c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	085b      	lsrs	r3, r3, #1
 8005844:	3b01      	subs	r3, #1
 8005846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d10f      	bne.n	800586c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d107      	bne.n	800586c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40023800 	.word	0x40023800

08005880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e07b      	b.n	800598a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d108      	bne.n	80058ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a2:	d009      	beq.n	80058b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	61da      	str	r2, [r3, #28]
 80058aa:	e005      	b.n	80058b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fc fc46 	bl	8002164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593c:	ea42 0103 	orr.w	r1, r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	0c1b      	lsrs	r3, r3, #16
 8005956:	f003 0104 	and.w	r1, r3, #4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	f003 0210 	and.w	r2, r3, #16
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005978:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b088      	sub	sp, #32
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	603b      	str	r3, [r7, #0]
 800599e:	4613      	mov	r3, r2
 80059a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_SPI_Transmit+0x22>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e126      	b.n	8005c02 <HAL_SPI_Transmit+0x270>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059bc:	f7fc fdb0 	bl	8002520 <HAL_GetTick>
 80059c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d002      	beq.n	80059d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059d2:	2302      	movs	r3, #2
 80059d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059d6:	e10b      	b.n	8005bf0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_SPI_Transmit+0x52>
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d102      	bne.n	80059ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059e8:	e102      	b.n	8005bf0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2203      	movs	r2, #3
 80059ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	88fa      	ldrh	r2, [r7, #6]
 8005a02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	88fa      	ldrh	r2, [r7, #6]
 8005a08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a30:	d10f      	bne.n	8005a52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b40      	cmp	r3, #64	; 0x40
 8005a5e:	d007      	beq.n	8005a70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a78:	d14b      	bne.n	8005b12 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_SPI_Transmit+0xf6>
 8005a82:	8afb      	ldrh	r3, [r7, #22]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d13e      	bne.n	8005b06 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	881a      	ldrh	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	1c9a      	adds	r2, r3, #2
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005aac:	e02b      	b.n	8005b06 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d112      	bne.n	8005ae2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	881a      	ldrh	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	1c9a      	adds	r2, r3, #2
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ae0:	e011      	b.n	8005b06 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae2:	f7fc fd1d 	bl	8002520 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d803      	bhi.n	8005afa <HAL_SPI_Transmit+0x168>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d102      	bne.n	8005b00 <HAL_SPI_Transmit+0x16e>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d102      	bne.n	8005b06 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b04:	e074      	b.n	8005bf0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ce      	bne.n	8005aae <HAL_SPI_Transmit+0x11c>
 8005b10:	e04c      	b.n	8005bac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <HAL_SPI_Transmit+0x18e>
 8005b1a:	8afb      	ldrh	r3, [r7, #22]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d140      	bne.n	8005ba2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	330c      	adds	r3, #12
 8005b2a:	7812      	ldrb	r2, [r2, #0]
 8005b2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b46:	e02c      	b.n	8005ba2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d113      	bne.n	8005b7e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	7812      	ldrb	r2, [r2, #0]
 8005b62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b7c:	e011      	b.n	8005ba2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b7e:	f7fc fccf 	bl	8002520 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d803      	bhi.n	8005b96 <HAL_SPI_Transmit+0x204>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d102      	bne.n	8005b9c <HAL_SPI_Transmit+0x20a>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d102      	bne.n	8005ba2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ba0:	e026      	b.n	8005bf0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1cd      	bne.n	8005b48 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	6839      	ldr	r1, [r7, #0]
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 fbcb 	bl	800634c <SPI_EndRxTxTransaction>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bca:	2300      	movs	r3, #0
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	613b      	str	r3, [r7, #16]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	77fb      	strb	r3, [r7, #31]
 8005bec:	e000      	b.n	8005bf0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005bee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b088      	sub	sp, #32
 8005c0e:	af02      	add	r7, sp, #8
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	603b      	str	r3, [r7, #0]
 8005c16:	4613      	mov	r3, r2
 8005c18:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c26:	d112      	bne.n	8005c4e <HAL_SPI_Receive+0x44>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10e      	bne.n	8005c4e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2204      	movs	r2, #4
 8005c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c38:	88fa      	ldrh	r2, [r7, #6]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f8f1 	bl	8005e2c <HAL_SPI_TransmitReceive>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	e0ea      	b.n	8005e24 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_SPI_Receive+0x52>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e0e3      	b.n	8005e24 <HAL_SPI_Receive+0x21a>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c64:	f7fc fc5c 	bl	8002520 <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d002      	beq.n	8005c7c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
 8005c78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c7a:	e0ca      	b.n	8005e12 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_SPI_Receive+0x7e>
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d102      	bne.n	8005c8e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c8c:	e0c1      	b.n	8005e12 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2204      	movs	r2, #4
 8005c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	88fa      	ldrh	r2, [r7, #6]
 8005cac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd4:	d10f      	bne.n	8005cf6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cf4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d007      	beq.n	8005d14 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d162      	bne.n	8005de2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d1c:	e02e      	b.n	8005d7c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d115      	bne.n	8005d58 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f103 020c 	add.w	r2, r3, #12
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	7812      	ldrb	r2, [r2, #0]
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d56:	e011      	b.n	8005d7c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d58:	f7fc fbe2 	bl	8002520 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d803      	bhi.n	8005d70 <HAL_SPI_Receive+0x166>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6e:	d102      	bne.n	8005d76 <HAL_SPI_Receive+0x16c>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d102      	bne.n	8005d7c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d7a:	e04a      	b.n	8005e12 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1cb      	bne.n	8005d1e <HAL_SPI_Receive+0x114>
 8005d86:	e031      	b.n	8005dec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d113      	bne.n	8005dbe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	b292      	uxth	r2, r2
 8005da2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	1c9a      	adds	r2, r3, #2
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dbc:	e011      	b.n	8005de2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dbe:	f7fc fbaf 	bl	8002520 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d803      	bhi.n	8005dd6 <HAL_SPI_Receive+0x1cc>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd4:	d102      	bne.n	8005ddc <HAL_SPI_Receive+0x1d2>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005de0:	e017      	b.n	8005e12 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1cd      	bne.n	8005d88 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fa45 	bl	8006280 <SPI_EndRxTransaction>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	75fb      	strb	r3, [r7, #23]
 8005e0e:	e000      	b.n	8005e12 <HAL_SPI_Receive+0x208>
  }

error :
 8005e10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08c      	sub	sp, #48	; 0x30
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_SPI_TransmitReceive+0x26>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e18a      	b.n	8006168 <HAL_SPI_TransmitReceive+0x33c>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e5a:	f7fc fb61 	bl	8002520 <HAL_GetTick>
 8005e5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e70:	887b      	ldrh	r3, [r7, #2]
 8005e72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d00f      	beq.n	8005e9c <HAL_SPI_TransmitReceive+0x70>
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e82:	d107      	bne.n	8005e94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d103      	bne.n	8005e94 <HAL_SPI_TransmitReceive+0x68>
 8005e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d003      	beq.n	8005e9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e94:	2302      	movs	r3, #2
 8005e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e9a:	e15b      	b.n	8006154 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <HAL_SPI_TransmitReceive+0x82>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_SPI_TransmitReceive+0x82>
 8005ea8:	887b      	ldrh	r3, [r7, #2]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005eb4:	e14e      	b.n	8006154 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d003      	beq.n	8005eca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2205      	movs	r2, #5
 8005ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	887a      	ldrh	r2, [r7, #2]
 8005eda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	887a      	ldrh	r2, [r7, #2]
 8005ee0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	887a      	ldrh	r2, [r7, #2]
 8005eec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	887a      	ldrh	r2, [r7, #2]
 8005ef2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0a:	2b40      	cmp	r3, #64	; 0x40
 8005f0c:	d007      	beq.n	8005f1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f26:	d178      	bne.n	800601a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_SPI_TransmitReceive+0x10a>
 8005f30:	8b7b      	ldrh	r3, [r7, #26]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d166      	bne.n	8006004 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	881a      	ldrh	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	1c9a      	adds	r2, r3, #2
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f5a:	e053      	b.n	8006004 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d11b      	bne.n	8005fa2 <HAL_SPI_TransmitReceive+0x176>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d016      	beq.n	8005fa2 <HAL_SPI_TransmitReceive+0x176>
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d113      	bne.n	8005fa2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	881a      	ldrh	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	1c9a      	adds	r2, r3, #2
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d119      	bne.n	8005fe4 <HAL_SPI_TransmitReceive+0x1b8>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d014      	beq.n	8005fe4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	b292      	uxth	r2, r2
 8005fc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	1c9a      	adds	r2, r3, #2
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fe4:	f7fc fa9c 	bl	8002520 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d807      	bhi.n	8006004 <HAL_SPI_TransmitReceive+0x1d8>
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d003      	beq.n	8006004 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006002:	e0a7      	b.n	8006154 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1a6      	bne.n	8005f5c <HAL_SPI_TransmitReceive+0x130>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1a1      	bne.n	8005f5c <HAL_SPI_TransmitReceive+0x130>
 8006018:	e07c      	b.n	8006114 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_SPI_TransmitReceive+0x1fc>
 8006022:	8b7b      	ldrh	r3, [r7, #26]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d16b      	bne.n	8006100 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	7812      	ldrb	r2, [r2, #0]
 8006034:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800604e:	e057      	b.n	8006100 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b02      	cmp	r3, #2
 800605c:	d11c      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x26c>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d017      	beq.n	8006098 <HAL_SPI_TransmitReceive+0x26c>
 8006068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606a:	2b01      	cmp	r3, #1
 800606c:	d114      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	330c      	adds	r3, #12
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d119      	bne.n	80060da <HAL_SPI_TransmitReceive+0x2ae>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d014      	beq.n	80060da <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060d6:	2301      	movs	r3, #1
 80060d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060da:	f7fc fa21 	bl	8002520 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d803      	bhi.n	80060f2 <HAL_SPI_TransmitReceive+0x2c6>
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d102      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x2cc>
 80060f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d103      	bne.n	8006100 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060fe:	e029      	b.n	8006154 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1a2      	bne.n	8006050 <HAL_SPI_TransmitReceive+0x224>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d19d      	bne.n	8006050 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006116:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f917 	bl	800634c <SPI_EndRxTxTransaction>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d006      	beq.n	8006132 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2220      	movs	r2, #32
 800612e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006130:	e010      	b.n	8006154 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	e000      	b.n	8006154 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006152:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006164:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006168:	4618      	mov	r0, r3
 800616a:	3730      	adds	r7, #48	; 0x30
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	4613      	mov	r3, r2
 800617e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006180:	f7fc f9ce 	bl	8002520 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	4413      	add	r3, r2
 800618e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006190:	f7fc f9c6 	bl	8002520 <HAL_GetTick>
 8006194:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006196:	4b39      	ldr	r3, [pc, #228]	; (800627c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	015b      	lsls	r3, r3, #5
 800619c:	0d1b      	lsrs	r3, r3, #20
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	fb02 f303 	mul.w	r3, r2, r3
 80061a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061a6:	e054      	b.n	8006252 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ae:	d050      	beq.n	8006252 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061b0:	f7fc f9b6 	bl	8002520 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d902      	bls.n	80061c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d13d      	bne.n	8006242 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061de:	d111      	bne.n	8006204 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e8:	d004      	beq.n	80061f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f2:	d107      	bne.n	8006204 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006202:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800620c:	d10f      	bne.n	800622e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800622c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e017      	b.n	8006272 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	3b01      	subs	r3, #1
 8006250:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4013      	ands	r3, r2
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	429a      	cmp	r2, r3
 8006260:	bf0c      	ite	eq
 8006262:	2301      	moveq	r3, #1
 8006264:	2300      	movne	r3, #0
 8006266:	b2db      	uxtb	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	429a      	cmp	r2, r3
 800626e:	d19b      	bne.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000004 	.word	0x20000004

08006280 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006294:	d111      	bne.n	80062ba <SPI_EndRxTransaction+0x3a>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800629e:	d004      	beq.n	80062aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a8:	d107      	bne.n	80062ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062c2:	d12a      	bne.n	800631a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062cc:	d012      	beq.n	80062f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2200      	movs	r2, #0
 80062d6:	2180      	movs	r1, #128	; 0x80
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7ff ff49 	bl	8006170 <SPI_WaitFlagStateUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d02d      	beq.n	8006340 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e8:	f043 0220 	orr.w	r2, r3, #32
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e026      	b.n	8006342 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2200      	movs	r2, #0
 80062fc:	2101      	movs	r1, #1
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f7ff ff36 	bl	8006170 <SPI_WaitFlagStateUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01a      	beq.n	8006340 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630e:	f043 0220 	orr.w	r2, r3, #32
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e013      	b.n	8006342 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2200      	movs	r2, #0
 8006322:	2101      	movs	r1, #1
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f7ff ff23 	bl	8006170 <SPI_WaitFlagStateUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d007      	beq.n	8006340 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006334:	f043 0220 	orr.w	r2, r3, #32
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e000      	b.n	8006342 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af02      	add	r7, sp, #8
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006358:	4b1b      	ldr	r3, [pc, #108]	; (80063c8 <SPI_EndRxTxTransaction+0x7c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1b      	ldr	r2, [pc, #108]	; (80063cc <SPI_EndRxTxTransaction+0x80>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	0d5b      	lsrs	r3, r3, #21
 8006364:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006368:	fb02 f303 	mul.w	r3, r2, r3
 800636c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006376:	d112      	bne.n	800639e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2200      	movs	r2, #0
 8006380:	2180      	movs	r1, #128	; 0x80
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff fef4 	bl	8006170 <SPI_WaitFlagStateUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d016      	beq.n	80063bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006392:	f043 0220 	orr.w	r2, r3, #32
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e00f      	b.n	80063be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b4:	2b80      	cmp	r3, #128	; 0x80
 80063b6:	d0f2      	beq.n	800639e <SPI_EndRxTxTransaction+0x52>
 80063b8:	e000      	b.n	80063bc <SPI_EndRxTxTransaction+0x70>
        break;
 80063ba:	bf00      	nop
  }

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000004 	.word	0x20000004
 80063cc:	165e9f81 	.word	0x165e9f81

080063d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e041      	b.n	8006466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fb fefc 	bl	80021f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3304      	adds	r3, #4
 800640c:	4619      	mov	r1, r3
 800640e:	4610      	mov	r0, r2
 8006410:	f000 f9ce 	bl	80067b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	d001      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e04e      	b.n	8006526 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0201 	orr.w	r2, r2, #1
 800649e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a23      	ldr	r2, [pc, #140]	; (8006534 <HAL_TIM_Base_Start_IT+0xc4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d022      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b2:	d01d      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a1f      	ldr	r2, [pc, #124]	; (8006538 <HAL_TIM_Base_Start_IT+0xc8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d018      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1e      	ldr	r2, [pc, #120]	; (800653c <HAL_TIM_Base_Start_IT+0xcc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d013      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1c      	ldr	r2, [pc, #112]	; (8006540 <HAL_TIM_Base_Start_IT+0xd0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00e      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1b      	ldr	r2, [pc, #108]	; (8006544 <HAL_TIM_Base_Start_IT+0xd4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d009      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a19      	ldr	r2, [pc, #100]	; (8006548 <HAL_TIM_Base_Start_IT+0xd8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a18      	ldr	r2, [pc, #96]	; (800654c <HAL_TIM_Base_Start_IT+0xdc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d111      	bne.n	8006514 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b06      	cmp	r3, #6
 8006500:	d010      	beq.n	8006524 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0201 	orr.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006512:	e007      	b.n	8006524 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40010000 	.word	0x40010000
 8006538:	40000400 	.word	0x40000400
 800653c:	40000800 	.word	0x40000800
 8006540:	40000c00 	.word	0x40000c00
 8006544:	40010400 	.word	0x40010400
 8006548:	40014000 	.word	0x40014000
 800654c:	40001800 	.word	0x40001800

08006550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b02      	cmp	r3, #2
 8006564:	d122      	bne.n	80065ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b02      	cmp	r3, #2
 8006572:	d11b      	bne.n	80065ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f06f 0202 	mvn.w	r2, #2
 800657c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f8ee 	bl	8006774 <HAL_TIM_IC_CaptureCallback>
 8006598:	e005      	b.n	80065a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f8e0 	bl	8006760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f8f1 	bl	8006788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d122      	bne.n	8006600 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d11b      	bne.n	8006600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f06f 0204 	mvn.w	r2, #4
 80065d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f8c4 	bl	8006774 <HAL_TIM_IC_CaptureCallback>
 80065ec:	e005      	b.n	80065fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f8b6 	bl	8006760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f8c7 	bl	8006788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b08      	cmp	r3, #8
 800660c:	d122      	bne.n	8006654 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0308 	and.w	r3, r3, #8
 8006618:	2b08      	cmp	r3, #8
 800661a:	d11b      	bne.n	8006654 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0208 	mvn.w	r2, #8
 8006624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2204      	movs	r2, #4
 800662a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f89a 	bl	8006774 <HAL_TIM_IC_CaptureCallback>
 8006640:	e005      	b.n	800664e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f88c 	bl	8006760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f89d 	bl	8006788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0310 	and.w	r3, r3, #16
 800665e:	2b10      	cmp	r3, #16
 8006660:	d122      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b10      	cmp	r3, #16
 800666e:	d11b      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0210 	mvn.w	r2, #16
 8006678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2208      	movs	r2, #8
 800667e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f870 	bl	8006774 <HAL_TIM_IC_CaptureCallback>
 8006694:	e005      	b.n	80066a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f862 	bl	8006760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f873 	bl	8006788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d10e      	bne.n	80066d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d107      	bne.n	80066d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0201 	mvn.w	r2, #1
 80066cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fb fb44 	bl	8001d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066de:	2b80      	cmp	r3, #128	; 0x80
 80066e0:	d10e      	bne.n	8006700 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ec:	2b80      	cmp	r3, #128	; 0x80
 80066ee:	d107      	bne.n	8006700 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f902 	bl	8006904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d10e      	bne.n	800672c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006718:	2b40      	cmp	r3, #64	; 0x40
 800671a:	d107      	bne.n	800672c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f838 	bl	800679c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b20      	cmp	r3, #32
 8006738:	d10e      	bne.n	8006758 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b20      	cmp	r3, #32
 8006746:	d107      	bne.n	8006758 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f06f 0220 	mvn.w	r2, #32
 8006750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f8cc 	bl	80068f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a40      	ldr	r2, [pc, #256]	; (80068c4 <TIM_Base_SetConfig+0x114>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d013      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ce:	d00f      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a3d      	ldr	r2, [pc, #244]	; (80068c8 <TIM_Base_SetConfig+0x118>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00b      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3c      	ldr	r2, [pc, #240]	; (80068cc <TIM_Base_SetConfig+0x11c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d007      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a3b      	ldr	r2, [pc, #236]	; (80068d0 <TIM_Base_SetConfig+0x120>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a3a      	ldr	r2, [pc, #232]	; (80068d4 <TIM_Base_SetConfig+0x124>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d108      	bne.n	8006802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a2f      	ldr	r2, [pc, #188]	; (80068c4 <TIM_Base_SetConfig+0x114>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d02b      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006810:	d027      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a2c      	ldr	r2, [pc, #176]	; (80068c8 <TIM_Base_SetConfig+0x118>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d023      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2b      	ldr	r2, [pc, #172]	; (80068cc <TIM_Base_SetConfig+0x11c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d01f      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2a      	ldr	r2, [pc, #168]	; (80068d0 <TIM_Base_SetConfig+0x120>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01b      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a29      	ldr	r2, [pc, #164]	; (80068d4 <TIM_Base_SetConfig+0x124>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d017      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a28      	ldr	r2, [pc, #160]	; (80068d8 <TIM_Base_SetConfig+0x128>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a27      	ldr	r2, [pc, #156]	; (80068dc <TIM_Base_SetConfig+0x12c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00f      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a26      	ldr	r2, [pc, #152]	; (80068e0 <TIM_Base_SetConfig+0x130>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00b      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a25      	ldr	r2, [pc, #148]	; (80068e4 <TIM_Base_SetConfig+0x134>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a24      	ldr	r2, [pc, #144]	; (80068e8 <TIM_Base_SetConfig+0x138>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a23      	ldr	r2, [pc, #140]	; (80068ec <TIM_Base_SetConfig+0x13c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d108      	bne.n	8006874 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a0a      	ldr	r2, [pc, #40]	; (80068c4 <TIM_Base_SetConfig+0x114>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_Base_SetConfig+0xf8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a0c      	ldr	r2, [pc, #48]	; (80068d4 <TIM_Base_SetConfig+0x124>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d103      	bne.n	80068b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	615a      	str	r2, [r3, #20]
}
 80068b6:	bf00      	nop
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40010000 	.word	0x40010000
 80068c8:	40000400 	.word	0x40000400
 80068cc:	40000800 	.word	0x40000800
 80068d0:	40000c00 	.word	0x40000c00
 80068d4:	40010400 	.word	0x40010400
 80068d8:	40014000 	.word	0x40014000
 80068dc:	40014400 	.word	0x40014400
 80068e0:	40014800 	.word	0x40014800
 80068e4:	40001800 	.word	0x40001800
 80068e8:	40001c00 	.word	0x40001c00
 80068ec:	40002000 	.word	0x40002000

080068f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e03f      	b.n	80069aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d106      	bne.n	8006944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fb fc80 	bl	8002244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2224      	movs	r2, #36	; 0x24
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800695a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f9a7 	bl	8006cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691a      	ldr	r2, [r3, #16]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	695a      	ldr	r2, [r3, #20]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b08a      	sub	sp, #40	; 0x28
 80069b6:	af02      	add	r7, sp, #8
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	603b      	str	r3, [r7, #0]
 80069be:	4613      	mov	r3, r2
 80069c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d17c      	bne.n	8006acc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <HAL_UART_Transmit+0x2c>
 80069d8:	88fb      	ldrh	r3, [r7, #6]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e075      	b.n	8006ace <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_UART_Transmit+0x3e>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e06e      	b.n	8006ace <HAL_UART_Transmit+0x11c>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2221      	movs	r2, #33	; 0x21
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a06:	f7fb fd8b 	bl	8002520 <HAL_GetTick>
 8006a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	88fa      	ldrh	r2, [r7, #6]
 8006a10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	88fa      	ldrh	r2, [r7, #6]
 8006a16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a20:	d108      	bne.n	8006a34 <HAL_UART_Transmit+0x82>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d104      	bne.n	8006a34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	61bb      	str	r3, [r7, #24]
 8006a32:	e003      	b.n	8006a3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a44:	e02a      	b.n	8006a9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2180      	movs	r1, #128	; 0x80
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 f8e2 	bl	8006c1a <UART_WaitOnFlagUntilTimeout>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e036      	b.n	8006ace <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10b      	bne.n	8006a7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	3302      	adds	r3, #2
 8006a7a:	61bb      	str	r3, [r7, #24]
 8006a7c:	e007      	b.n	8006a8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	781a      	ldrb	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1cf      	bne.n	8006a46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2200      	movs	r2, #0
 8006aae:	2140      	movs	r1, #64	; 0x40
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f8b2 	bl	8006c1a <UART_WaitOnFlagUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e006      	b.n	8006ace <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e000      	b.n	8006ace <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006acc:	2302      	movs	r3, #2
  }
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b08a      	sub	sp, #40	; 0x28
 8006ada:	af02      	add	r7, sp, #8
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	603b      	str	r3, [r7, #0]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	f040 808c 	bne.w	8006c10 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_UART_Receive+0x2e>
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e084      	b.n	8006c12 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d101      	bne.n	8006b16 <HAL_UART_Receive+0x40>
 8006b12:	2302      	movs	r3, #2
 8006b14:	e07d      	b.n	8006c12 <HAL_UART_Receive+0x13c>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2222      	movs	r2, #34	; 0x22
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b32:	f7fb fcf5 	bl	8002520 <HAL_GetTick>
 8006b36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	88fa      	ldrh	r2, [r7, #6]
 8006b3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	88fa      	ldrh	r2, [r7, #6]
 8006b42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4c:	d108      	bne.n	8006b60 <HAL_UART_Receive+0x8a>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d104      	bne.n	8006b60 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	61bb      	str	r3, [r7, #24]
 8006b5e:	e003      	b.n	8006b68 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006b70:	e043      	b.n	8006bfa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2120      	movs	r1, #32
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f84c 	bl	8006c1a <UART_WaitOnFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e042      	b.n	8006c12 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10c      	bne.n	8006bac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	3302      	adds	r3, #2
 8006ba8:	61bb      	str	r3, [r7, #24]
 8006baa:	e01f      	b.n	8006bec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb4:	d007      	beq.n	8006bc6 <HAL_UART_Receive+0xf0>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10a      	bne.n	8006bd4 <HAL_UART_Receive+0xfe>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d106      	bne.n	8006bd4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	e008      	b.n	8006be6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	3301      	adds	r3, #1
 8006bea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1b6      	bne.n	8006b72 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	e000      	b.n	8006c12 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
  }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	603b      	str	r3, [r7, #0]
 8006c26:	4613      	mov	r3, r2
 8006c28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c2a:	e02c      	b.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c32:	d028      	beq.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d007      	beq.n	8006c4a <UART_WaitOnFlagUntilTimeout+0x30>
 8006c3a:	f7fb fc71 	bl	8002520 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d21d      	bcs.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68da      	ldr	r2, [r3, #12]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c58:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	695a      	ldr	r2, [r3, #20]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0201 	bic.w	r2, r2, #1
 8006c68:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e00f      	b.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	bf0c      	ite	eq
 8006c96:	2301      	moveq	r3, #1
 8006c98:	2300      	movne	r3, #0
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d0c3      	beq.n	8006c2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb4:	b09f      	sub	sp, #124	; 0x7c
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc6:	68d9      	ldr	r1, [r3, #12]
 8006cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	ea40 0301 	orr.w	r3, r0, r1
 8006cd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cf4:	f021 010c 	bic.w	r1, r1, #12
 8006cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d0e:	6999      	ldr	r1, [r3, #24]
 8006d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	ea40 0301 	orr.w	r3, r0, r1
 8006d18:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4bc5      	ldr	r3, [pc, #788]	; (8007034 <UART_SetConfig+0x384>)
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d004      	beq.n	8006d2e <UART_SetConfig+0x7e>
 8006d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	4bc3      	ldr	r3, [pc, #780]	; (8007038 <UART_SetConfig+0x388>)
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d103      	bne.n	8006d36 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d2e:	f7fd fde7 	bl	8004900 <HAL_RCC_GetPCLK2Freq>
 8006d32:	6778      	str	r0, [r7, #116]	; 0x74
 8006d34:	e002      	b.n	8006d3c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d36:	f7fd fdcf 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 8006d3a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d44:	f040 80b6 	bne.w	8006eb4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d4a:	461c      	mov	r4, r3
 8006d4c:	f04f 0500 	mov.w	r5, #0
 8006d50:	4622      	mov	r2, r4
 8006d52:	462b      	mov	r3, r5
 8006d54:	1891      	adds	r1, r2, r2
 8006d56:	6439      	str	r1, [r7, #64]	; 0x40
 8006d58:	415b      	adcs	r3, r3
 8006d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d60:	1912      	adds	r2, r2, r4
 8006d62:	eb45 0303 	adc.w	r3, r5, r3
 8006d66:	f04f 0000 	mov.w	r0, #0
 8006d6a:	f04f 0100 	mov.w	r1, #0
 8006d6e:	00d9      	lsls	r1, r3, #3
 8006d70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d74:	00d0      	lsls	r0, r2, #3
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	1911      	adds	r1, r2, r4
 8006d7c:	6639      	str	r1, [r7, #96]	; 0x60
 8006d7e:	416b      	adcs	r3, r5
 8006d80:	667b      	str	r3, [r7, #100]	; 0x64
 8006d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	1891      	adds	r1, r2, r2
 8006d8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d90:	415b      	adcs	r3, r3
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d9c:	f7f9 fa40 	bl	8000220 <__aeabi_uldivmod>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4ba5      	ldr	r3, [pc, #660]	; (800703c <UART_SetConfig+0x38c>)
 8006da6:	fba3 2302 	umull	r2, r3, r3, r2
 8006daa:	095b      	lsrs	r3, r3, #5
 8006dac:	011e      	lsls	r6, r3, #4
 8006dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006db0:	461c      	mov	r4, r3
 8006db2:	f04f 0500 	mov.w	r5, #0
 8006db6:	4622      	mov	r2, r4
 8006db8:	462b      	mov	r3, r5
 8006dba:	1891      	adds	r1, r2, r2
 8006dbc:	6339      	str	r1, [r7, #48]	; 0x30
 8006dbe:	415b      	adcs	r3, r3
 8006dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006dc6:	1912      	adds	r2, r2, r4
 8006dc8:	eb45 0303 	adc.w	r3, r5, r3
 8006dcc:	f04f 0000 	mov.w	r0, #0
 8006dd0:	f04f 0100 	mov.w	r1, #0
 8006dd4:	00d9      	lsls	r1, r3, #3
 8006dd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006dda:	00d0      	lsls	r0, r2, #3
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	1911      	adds	r1, r2, r4
 8006de2:	65b9      	str	r1, [r7, #88]	; 0x58
 8006de4:	416b      	adcs	r3, r5
 8006de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	461a      	mov	r2, r3
 8006dee:	f04f 0300 	mov.w	r3, #0
 8006df2:	1891      	adds	r1, r2, r2
 8006df4:	62b9      	str	r1, [r7, #40]	; 0x28
 8006df6:	415b      	adcs	r3, r3
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dfe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006e02:	f7f9 fa0d 	bl	8000220 <__aeabi_uldivmod>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4b8c      	ldr	r3, [pc, #560]	; (800703c <UART_SetConfig+0x38c>)
 8006e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	2164      	movs	r1, #100	; 0x64
 8006e14:	fb01 f303 	mul.w	r3, r1, r3
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	3332      	adds	r3, #50	; 0x32
 8006e1e:	4a87      	ldr	r2, [pc, #540]	; (800703c <UART_SetConfig+0x38c>)
 8006e20:	fba2 2303 	umull	r2, r3, r2, r3
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e2c:	441e      	add	r6, r3
 8006e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e30:	4618      	mov	r0, r3
 8006e32:	f04f 0100 	mov.w	r1, #0
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	1894      	adds	r4, r2, r2
 8006e3c:	623c      	str	r4, [r7, #32]
 8006e3e:	415b      	adcs	r3, r3
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
 8006e42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e46:	1812      	adds	r2, r2, r0
 8006e48:	eb41 0303 	adc.w	r3, r1, r3
 8006e4c:	f04f 0400 	mov.w	r4, #0
 8006e50:	f04f 0500 	mov.w	r5, #0
 8006e54:	00dd      	lsls	r5, r3, #3
 8006e56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e5a:	00d4      	lsls	r4, r2, #3
 8006e5c:	4622      	mov	r2, r4
 8006e5e:	462b      	mov	r3, r5
 8006e60:	1814      	adds	r4, r2, r0
 8006e62:	653c      	str	r4, [r7, #80]	; 0x50
 8006e64:	414b      	adcs	r3, r1
 8006e66:	657b      	str	r3, [r7, #84]	; 0x54
 8006e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	1891      	adds	r1, r2, r2
 8006e74:	61b9      	str	r1, [r7, #24]
 8006e76:	415b      	adcs	r3, r3
 8006e78:	61fb      	str	r3, [r7, #28]
 8006e7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e82:	f7f9 f9cd 	bl	8000220 <__aeabi_uldivmod>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4b6c      	ldr	r3, [pc, #432]	; (800703c <UART_SetConfig+0x38c>)
 8006e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	2164      	movs	r1, #100	; 0x64
 8006e94:	fb01 f303 	mul.w	r3, r1, r3
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	3332      	adds	r3, #50	; 0x32
 8006e9e:	4a67      	ldr	r2, [pc, #412]	; (800703c <UART_SetConfig+0x38c>)
 8006ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	f003 0207 	and.w	r2, r3, #7
 8006eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4432      	add	r2, r6
 8006eb0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006eb2:	e0b9      	b.n	8007028 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb6:	461c      	mov	r4, r3
 8006eb8:	f04f 0500 	mov.w	r5, #0
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	462b      	mov	r3, r5
 8006ec0:	1891      	adds	r1, r2, r2
 8006ec2:	6139      	str	r1, [r7, #16]
 8006ec4:	415b      	adcs	r3, r3
 8006ec6:	617b      	str	r3, [r7, #20]
 8006ec8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ecc:	1912      	adds	r2, r2, r4
 8006ece:	eb45 0303 	adc.w	r3, r5, r3
 8006ed2:	f04f 0000 	mov.w	r0, #0
 8006ed6:	f04f 0100 	mov.w	r1, #0
 8006eda:	00d9      	lsls	r1, r3, #3
 8006edc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ee0:	00d0      	lsls	r0, r2, #3
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	eb12 0804 	adds.w	r8, r2, r4
 8006eea:	eb43 0905 	adc.w	r9, r3, r5
 8006eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f04f 0100 	mov.w	r1, #0
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	f04f 0300 	mov.w	r3, #0
 8006f00:	008b      	lsls	r3, r1, #2
 8006f02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f06:	0082      	lsls	r2, r0, #2
 8006f08:	4640      	mov	r0, r8
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	f7f9 f988 	bl	8000220 <__aeabi_uldivmod>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4b49      	ldr	r3, [pc, #292]	; (800703c <UART_SetConfig+0x38c>)
 8006f16:	fba3 2302 	umull	r2, r3, r3, r2
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	011e      	lsls	r6, r3, #4
 8006f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f20:	4618      	mov	r0, r3
 8006f22:	f04f 0100 	mov.w	r1, #0
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	1894      	adds	r4, r2, r2
 8006f2c:	60bc      	str	r4, [r7, #8]
 8006f2e:	415b      	adcs	r3, r3
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f36:	1812      	adds	r2, r2, r0
 8006f38:	eb41 0303 	adc.w	r3, r1, r3
 8006f3c:	f04f 0400 	mov.w	r4, #0
 8006f40:	f04f 0500 	mov.w	r5, #0
 8006f44:	00dd      	lsls	r5, r3, #3
 8006f46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f4a:	00d4      	lsls	r4, r2, #3
 8006f4c:	4622      	mov	r2, r4
 8006f4e:	462b      	mov	r3, r5
 8006f50:	1814      	adds	r4, r2, r0
 8006f52:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f54:	414b      	adcs	r3, r1
 8006f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f04f 0100 	mov.w	r1, #0
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	008b      	lsls	r3, r1, #2
 8006f6c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f70:	0082      	lsls	r2, r0, #2
 8006f72:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f76:	f7f9 f953 	bl	8000220 <__aeabi_uldivmod>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4b2f      	ldr	r3, [pc, #188]	; (800703c <UART_SetConfig+0x38c>)
 8006f80:	fba3 1302 	umull	r1, r3, r3, r2
 8006f84:	095b      	lsrs	r3, r3, #5
 8006f86:	2164      	movs	r1, #100	; 0x64
 8006f88:	fb01 f303 	mul.w	r3, r1, r3
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	3332      	adds	r3, #50	; 0x32
 8006f92:	4a2a      	ldr	r2, [pc, #168]	; (800703c <UART_SetConfig+0x38c>)
 8006f94:	fba2 2303 	umull	r2, r3, r2, r3
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f9e:	441e      	add	r6, r3
 8006fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f04f 0100 	mov.w	r1, #0
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	1894      	adds	r4, r2, r2
 8006fae:	603c      	str	r4, [r7, #0]
 8006fb0:	415b      	adcs	r3, r3
 8006fb2:	607b      	str	r3, [r7, #4]
 8006fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fb8:	1812      	adds	r2, r2, r0
 8006fba:	eb41 0303 	adc.w	r3, r1, r3
 8006fbe:	f04f 0400 	mov.w	r4, #0
 8006fc2:	f04f 0500 	mov.w	r5, #0
 8006fc6:	00dd      	lsls	r5, r3, #3
 8006fc8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fcc:	00d4      	lsls	r4, r2, #3
 8006fce:	4622      	mov	r2, r4
 8006fd0:	462b      	mov	r3, r5
 8006fd2:	eb12 0a00 	adds.w	sl, r2, r0
 8006fd6:	eb43 0b01 	adc.w	fp, r3, r1
 8006fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f04f 0100 	mov.w	r1, #0
 8006fe4:	f04f 0200 	mov.w	r2, #0
 8006fe8:	f04f 0300 	mov.w	r3, #0
 8006fec:	008b      	lsls	r3, r1, #2
 8006fee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ff2:	0082      	lsls	r2, r0, #2
 8006ff4:	4650      	mov	r0, sl
 8006ff6:	4659      	mov	r1, fp
 8006ff8:	f7f9 f912 	bl	8000220 <__aeabi_uldivmod>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4b0e      	ldr	r3, [pc, #56]	; (800703c <UART_SetConfig+0x38c>)
 8007002:	fba3 1302 	umull	r1, r3, r3, r2
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	2164      	movs	r1, #100	; 0x64
 800700a:	fb01 f303 	mul.w	r3, r1, r3
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	3332      	adds	r3, #50	; 0x32
 8007014:	4a09      	ldr	r2, [pc, #36]	; (800703c <UART_SetConfig+0x38c>)
 8007016:	fba2 2303 	umull	r2, r3, r2, r3
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	f003 020f 	and.w	r2, r3, #15
 8007020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4432      	add	r2, r6
 8007026:	609a      	str	r2, [r3, #8]
}
 8007028:	bf00      	nop
 800702a:	377c      	adds	r7, #124	; 0x7c
 800702c:	46bd      	mov	sp, r7
 800702e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007032:	bf00      	nop
 8007034:	40011000 	.word	0x40011000
 8007038:	40011400 	.word	0x40011400
 800703c:	51eb851f 	.word	0x51eb851f

08007040 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007040:	b084      	sub	sp, #16
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	f107 001c 	add.w	r0, r7, #28
 800704e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	2b01      	cmp	r3, #1
 8007056:	d122      	bne.n	800709e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800706c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007082:	2b01      	cmp	r3, #1
 8007084:	d105      	bne.n	8007092 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 fac0 	bl	8008618 <USB_CoreReset>
 8007098:	4603      	mov	r3, r0
 800709a:	73fb      	strb	r3, [r7, #15]
 800709c:	e01a      	b.n	80070d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 fab4 	bl	8008618 <USB_CoreReset>
 80070b0:	4603      	mov	r3, r0
 80070b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80070b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	639a      	str	r2, [r3, #56]	; 0x38
 80070c6:	e005      	b.n	80070d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d10b      	bne.n	80070f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f043 0206 	orr.w	r2, r3, #6
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f043 0220 	orr.w	r2, r3, #32
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070fe:	b004      	add	sp, #16
 8007100:	4770      	bx	lr
	...

08007104 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	4613      	mov	r3, r2
 8007110:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	2b02      	cmp	r3, #2
 8007116:	d165      	bne.n	80071e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4a41      	ldr	r2, [pc, #260]	; (8007220 <USB_SetTurnaroundTime+0x11c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d906      	bls.n	800712e <USB_SetTurnaroundTime+0x2a>
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4a40      	ldr	r2, [pc, #256]	; (8007224 <USB_SetTurnaroundTime+0x120>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d202      	bcs.n	800712e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007128:	230f      	movs	r3, #15
 800712a:	617b      	str	r3, [r7, #20]
 800712c:	e062      	b.n	80071f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	4a3c      	ldr	r2, [pc, #240]	; (8007224 <USB_SetTurnaroundTime+0x120>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d306      	bcc.n	8007144 <USB_SetTurnaroundTime+0x40>
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	4a3b      	ldr	r2, [pc, #236]	; (8007228 <USB_SetTurnaroundTime+0x124>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d202      	bcs.n	8007144 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800713e:	230e      	movs	r3, #14
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	e057      	b.n	80071f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4a38      	ldr	r2, [pc, #224]	; (8007228 <USB_SetTurnaroundTime+0x124>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d306      	bcc.n	800715a <USB_SetTurnaroundTime+0x56>
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	4a37      	ldr	r2, [pc, #220]	; (800722c <USB_SetTurnaroundTime+0x128>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d202      	bcs.n	800715a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007154:	230d      	movs	r3, #13
 8007156:	617b      	str	r3, [r7, #20]
 8007158:	e04c      	b.n	80071f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	4a33      	ldr	r2, [pc, #204]	; (800722c <USB_SetTurnaroundTime+0x128>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d306      	bcc.n	8007170 <USB_SetTurnaroundTime+0x6c>
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	4a32      	ldr	r2, [pc, #200]	; (8007230 <USB_SetTurnaroundTime+0x12c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d802      	bhi.n	8007170 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800716a:	230c      	movs	r3, #12
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	e041      	b.n	80071f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4a2f      	ldr	r2, [pc, #188]	; (8007230 <USB_SetTurnaroundTime+0x12c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d906      	bls.n	8007186 <USB_SetTurnaroundTime+0x82>
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4a2e      	ldr	r2, [pc, #184]	; (8007234 <USB_SetTurnaroundTime+0x130>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d802      	bhi.n	8007186 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007180:	230b      	movs	r3, #11
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	e036      	b.n	80071f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	4a2a      	ldr	r2, [pc, #168]	; (8007234 <USB_SetTurnaroundTime+0x130>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d906      	bls.n	800719c <USB_SetTurnaroundTime+0x98>
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	4a29      	ldr	r2, [pc, #164]	; (8007238 <USB_SetTurnaroundTime+0x134>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d802      	bhi.n	800719c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007196:	230a      	movs	r3, #10
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	e02b      	b.n	80071f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4a26      	ldr	r2, [pc, #152]	; (8007238 <USB_SetTurnaroundTime+0x134>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d906      	bls.n	80071b2 <USB_SetTurnaroundTime+0xae>
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4a25      	ldr	r2, [pc, #148]	; (800723c <USB_SetTurnaroundTime+0x138>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d202      	bcs.n	80071b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80071ac:	2309      	movs	r3, #9
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	e020      	b.n	80071f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	4a21      	ldr	r2, [pc, #132]	; (800723c <USB_SetTurnaroundTime+0x138>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d306      	bcc.n	80071c8 <USB_SetTurnaroundTime+0xc4>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	4a20      	ldr	r2, [pc, #128]	; (8007240 <USB_SetTurnaroundTime+0x13c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d802      	bhi.n	80071c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80071c2:	2308      	movs	r3, #8
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	e015      	b.n	80071f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <USB_SetTurnaroundTime+0x13c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d906      	bls.n	80071de <USB_SetTurnaroundTime+0xda>
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4a1c      	ldr	r2, [pc, #112]	; (8007244 <USB_SetTurnaroundTime+0x140>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d202      	bcs.n	80071de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80071d8:	2307      	movs	r3, #7
 80071da:	617b      	str	r3, [r7, #20]
 80071dc:	e00a      	b.n	80071f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80071de:	2306      	movs	r3, #6
 80071e0:	617b      	str	r3, [r7, #20]
 80071e2:	e007      	b.n	80071f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d102      	bne.n	80071f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80071ea:	2309      	movs	r3, #9
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	e001      	b.n	80071f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80071f0:	2309      	movs	r3, #9
 80071f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	029b      	lsls	r3, r3, #10
 8007208:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800720c:	431a      	orrs	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	371c      	adds	r7, #28
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	00d8acbf 	.word	0x00d8acbf
 8007224:	00e4e1c0 	.word	0x00e4e1c0
 8007228:	00f42400 	.word	0x00f42400
 800722c:	01067380 	.word	0x01067380
 8007230:	011a499f 	.word	0x011a499f
 8007234:	01312cff 	.word	0x01312cff
 8007238:	014ca43f 	.word	0x014ca43f
 800723c:	016e3600 	.word	0x016e3600
 8007240:	01a6ab1f 	.word	0x01a6ab1f
 8007244:	01e84800 	.word	0x01e84800

08007248 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f043 0201 	orr.w	r2, r3, #1
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f023 0201 	bic.w	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	460b      	mov	r3, r1
 8007296:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d106      	bne.n	80072b8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	60da      	str	r2, [r3, #12]
 80072b6:	e00b      	b.n	80072d0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80072b8:	78fb      	ldrb	r3, [r7, #3]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60da      	str	r2, [r3, #12]
 80072ca:	e001      	b.n	80072d0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e003      	b.n	80072d8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80072d0:	2032      	movs	r0, #50	; 0x32
 80072d2:	f7fb f931 	bl	8002538 <HAL_Delay>

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072e0:	b084      	sub	sp, #16
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b086      	sub	sp, #24
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072fa:	2300      	movs	r3, #0
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	e009      	b.n	8007314 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	3340      	adds	r3, #64	; 0x40
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	2200      	movs	r2, #0
 800730c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3301      	adds	r3, #1
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	2b0e      	cmp	r3, #14
 8007318:	d9f2      	bls.n	8007300 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800731a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d11c      	bne.n	800735a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800732e:	f043 0302 	orr.w	r3, r3, #2
 8007332:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	e005      	b.n	8007366 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800736c:	461a      	mov	r2, r3
 800736e:	2300      	movs	r3, #0
 8007370:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007378:	4619      	mov	r1, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007380:	461a      	mov	r2, r3
 8007382:	680b      	ldr	r3, [r1, #0]
 8007384:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	2b01      	cmp	r3, #1
 800738a:	d10c      	bne.n	80073a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	2b00      	cmp	r3, #0
 8007390:	d104      	bne.n	800739c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007392:	2100      	movs	r1, #0
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f949 	bl	800762c <USB_SetDevSpeed>
 800739a:	e008      	b.n	80073ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800739c:	2101      	movs	r1, #1
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f944 	bl	800762c <USB_SetDevSpeed>
 80073a4:	e003      	b.n	80073ae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073a6:	2103      	movs	r1, #3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f93f 	bl	800762c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073ae:	2110      	movs	r1, #16
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f8f3 	bl	800759c <USB_FlushTxFifo>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f911 	bl	80075e8 <USB_FlushRxFifo>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d6:	461a      	mov	r2, r3
 80073d8:	2300      	movs	r3, #0
 80073da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e2:	461a      	mov	r2, r3
 80073e4:	2300      	movs	r3, #0
 80073e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ee:	461a      	mov	r2, r3
 80073f0:	2300      	movs	r3, #0
 80073f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073f4:	2300      	movs	r3, #0
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	e043      	b.n	8007482 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800740c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007410:	d118      	bne.n	8007444 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007424:	461a      	mov	r2, r3
 8007426:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	e013      	b.n	8007456 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743a:	461a      	mov	r2, r3
 800743c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	e008      	b.n	8007456 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007450:	461a      	mov	r2, r3
 8007452:	2300      	movs	r3, #0
 8007454:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007462:	461a      	mov	r2, r3
 8007464:	2300      	movs	r3, #0
 8007466:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007474:	461a      	mov	r2, r3
 8007476:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800747a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	3301      	adds	r3, #1
 8007480:	613b      	str	r3, [r7, #16]
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	429a      	cmp	r2, r3
 8007488:	d3b7      	bcc.n	80073fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800748a:	2300      	movs	r3, #0
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	e043      	b.n	8007518 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a6:	d118      	bne.n	80074da <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10a      	bne.n	80074c4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ba:	461a      	mov	r2, r3
 80074bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	e013      	b.n	80074ec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d0:	461a      	mov	r2, r3
 80074d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	e008      	b.n	80074ec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e6:	461a      	mov	r2, r3
 80074e8:	2300      	movs	r3, #0
 80074ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f8:	461a      	mov	r2, r3
 80074fa:	2300      	movs	r3, #0
 80074fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750a:	461a      	mov	r2, r3
 800750c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007510:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	3301      	adds	r3, #1
 8007516:	613b      	str	r3, [r7, #16]
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	429a      	cmp	r2, r3
 800751e:	d3b7      	bcc.n	8007490 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800752e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007532:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007540:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	2b00      	cmp	r3, #0
 8007546:	d105      	bne.n	8007554 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	f043 0210 	orr.w	r2, r3, #16
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	699a      	ldr	r2, [r3, #24]
 8007558:	4b0f      	ldr	r3, [pc, #60]	; (8007598 <USB_DevInit+0x2b8>)
 800755a:	4313      	orrs	r3, r2
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	f043 0208 	orr.w	r2, r3, #8
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007574:	2b01      	cmp	r3, #1
 8007576:	d107      	bne.n	8007588 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007580:	f043 0304 	orr.w	r3, r3, #4
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007594:	b004      	add	sp, #16
 8007596:	4770      	bx	lr
 8007598:	803c3800 	.word	0x803c3800

0800759c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	019b      	lsls	r3, r3, #6
 80075ae:	f043 0220 	orr.w	r2, r3, #32
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3301      	adds	r3, #1
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4a09      	ldr	r2, [pc, #36]	; (80075e4 <USB_FlushTxFifo+0x48>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d901      	bls.n	80075c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e006      	b.n	80075d6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b20      	cmp	r3, #32
 80075d2:	d0f0      	beq.n	80075b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	00030d40 	.word	0x00030d40

080075e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2210      	movs	r2, #16
 80075f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3301      	adds	r3, #1
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4a09      	ldr	r2, [pc, #36]	; (8007628 <USB_FlushRxFifo+0x40>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d901      	bls.n	800760c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e006      	b.n	800761a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	f003 0310 	and.w	r3, r3, #16
 8007614:	2b10      	cmp	r3, #16
 8007616:	d0f0      	beq.n	80075fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	00030d40 	.word	0x00030d40

0800762c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	68f9      	ldr	r1, [r7, #12]
 8007648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800764c:	4313      	orrs	r3, r2
 800764e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800765e:	b480      	push	{r7}
 8007660:	b087      	sub	sp, #28
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f003 0306 	and.w	r3, r3, #6
 8007676:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d102      	bne.n	8007684 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800767e:	2300      	movs	r3, #0
 8007680:	75fb      	strb	r3, [r7, #23]
 8007682:	e00a      	b.n	800769a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b02      	cmp	r3, #2
 8007688:	d002      	beq.n	8007690 <USB_GetDevSpeed+0x32>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b06      	cmp	r3, #6
 800768e:	d102      	bne.n	8007696 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007690:	2302      	movs	r3, #2
 8007692:	75fb      	strb	r3, [r7, #23]
 8007694:	e001      	b.n	800769a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007696:	230f      	movs	r3, #15
 8007698:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
}
 800769c:	4618      	mov	r0, r3
 800769e:	371c      	adds	r7, #28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d13a      	bne.n	800773a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	2101      	movs	r1, #1
 80076d6:	fa01 f303 	lsl.w	r3, r1, r3
 80076da:	b29b      	uxth	r3, r3
 80076dc:	68f9      	ldr	r1, [r7, #12]
 80076de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076e2:	4313      	orrs	r3, r2
 80076e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d155      	bne.n	80077a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4413      	add	r3, r2
 8007704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	78db      	ldrb	r3, [r3, #3]
 8007716:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007718:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	059b      	lsls	r3, r3, #22
 800771e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007720:	4313      	orrs	r3, r2
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	440a      	add	r2, r1
 800772a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800772e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	e036      	b.n	80077a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007740:	69da      	ldr	r2, [r3, #28]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	2101      	movs	r1, #1
 800774c:	fa01 f303 	lsl.w	r3, r1, r3
 8007750:	041b      	lsls	r3, r3, #16
 8007752:	68f9      	ldr	r1, [r7, #12]
 8007754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007758:	4313      	orrs	r3, r2
 800775a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d11a      	bne.n	80077a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	78db      	ldrb	r3, [r3, #3]
 800778c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800778e:	430b      	orrs	r3, r1
 8007790:	4313      	orrs	r3, r2
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	0151      	lsls	r1, r2, #5
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	440a      	add	r2, r1
 800779a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800779e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
	...

080077b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	785b      	ldrb	r3, [r3, #1]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d161      	bne.n	8007898 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ea:	d11f      	bne.n	800782c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	440a      	add	r2, r1
 8007802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007806:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800780a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	0151      	lsls	r1, r2, #5
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	440a      	add	r2, r1
 8007822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007826:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800782a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f003 030f 	and.w	r3, r3, #15
 800783c:	2101      	movs	r1, #1
 800783e:	fa01 f303 	lsl.w	r3, r1, r3
 8007842:	b29b      	uxth	r3, r3
 8007844:	43db      	mvns	r3, r3
 8007846:	68f9      	ldr	r1, [r7, #12]
 8007848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800784c:	4013      	ands	r3, r2
 800784e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007856:	69da      	ldr	r2, [r3, #28]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	2101      	movs	r1, #1
 8007862:	fa01 f303 	lsl.w	r3, r1, r3
 8007866:	b29b      	uxth	r3, r3
 8007868:	43db      	mvns	r3, r3
 800786a:	68f9      	ldr	r1, [r7, #12]
 800786c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007870:	4013      	ands	r3, r2
 8007872:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	0159      	lsls	r1, r3, #5
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	440b      	add	r3, r1
 800788a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788e:	4619      	mov	r1, r3
 8007890:	4b35      	ldr	r3, [pc, #212]	; (8007968 <USB_DeactivateEndpoint+0x1b0>)
 8007892:	4013      	ands	r3, r2
 8007894:	600b      	str	r3, [r1, #0]
 8007896:	e060      	b.n	800795a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ae:	d11f      	bne.n	80078f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	0151      	lsls	r1, r2, #5
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	440a      	add	r2, r1
 80078c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	0151      	lsls	r1, r2, #5
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	440a      	add	r2, r1
 80078e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	f003 030f 	and.w	r3, r3, #15
 8007900:	2101      	movs	r1, #1
 8007902:	fa01 f303 	lsl.w	r3, r1, r3
 8007906:	041b      	lsls	r3, r3, #16
 8007908:	43db      	mvns	r3, r3
 800790a:	68f9      	ldr	r1, [r7, #12]
 800790c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007910:	4013      	ands	r3, r2
 8007912:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	f003 030f 	and.w	r3, r3, #15
 8007924:	2101      	movs	r1, #1
 8007926:	fa01 f303 	lsl.w	r3, r1, r3
 800792a:	041b      	lsls	r3, r3, #16
 800792c:	43db      	mvns	r3, r3
 800792e:	68f9      	ldr	r1, [r7, #12]
 8007930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007934:	4013      	ands	r3, r2
 8007936:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4413      	add	r3, r2
 8007940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	0159      	lsls	r1, r3, #5
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	440b      	add	r3, r1
 800794e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007952:	4619      	mov	r1, r3
 8007954:	4b05      	ldr	r3, [pc, #20]	; (800796c <USB_DeactivateEndpoint+0x1b4>)
 8007956:	4013      	ands	r3, r2
 8007958:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	ec337800 	.word	0xec337800
 800796c:	eff37800 	.word	0xeff37800

08007970 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08a      	sub	sp, #40	; 0x28
 8007974:	af02      	add	r7, sp, #8
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	4613      	mov	r3, r2
 800797c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	785b      	ldrb	r3, [r3, #1]
 800798c:	2b01      	cmp	r3, #1
 800798e:	f040 815c 	bne.w	8007c4a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d132      	bne.n	8007a00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	0151      	lsls	r1, r2, #5
 80079ac:	69fa      	ldr	r2, [r7, #28]
 80079ae:	440a      	add	r2, r1
 80079b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	0151      	lsls	r1, r2, #5
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	440a      	add	r2, r1
 80079d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	0151      	lsls	r1, r2, #5
 80079f0:	69fa      	ldr	r2, [r7, #28]
 80079f2:	440a      	add	r2, r1
 80079f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f8:	0cdb      	lsrs	r3, r3, #19
 80079fa:	04db      	lsls	r3, r3, #19
 80079fc:	6113      	str	r3, [r2, #16]
 80079fe:	e074      	b.n	8007aea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	0151      	lsls	r1, r2, #5
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	440a      	add	r2, r1
 8007a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a1a:	0cdb      	lsrs	r3, r3, #19
 8007a1c:	04db      	lsls	r3, r3, #19
 8007a1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	0151      	lsls	r1, r2, #5
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	440a      	add	r2, r1
 8007a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	6959      	ldr	r1, [r3, #20]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	440b      	add	r3, r1
 8007a5c:	1e59      	subs	r1, r3, #1
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a66:	04d9      	lsls	r1, r3, #19
 8007a68:	4b9d      	ldr	r3, [pc, #628]	; (8007ce0 <USB_EPStartXfer+0x370>)
 8007a6a:	400b      	ands	r3, r1
 8007a6c:	69b9      	ldr	r1, [r7, #24]
 8007a6e:	0148      	lsls	r0, r1, #5
 8007a70:	69f9      	ldr	r1, [r7, #28]
 8007a72:	4401      	add	r1, r0
 8007a74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a92:	69b9      	ldr	r1, [r7, #24]
 8007a94:	0148      	lsls	r0, r1, #5
 8007a96:	69f9      	ldr	r1, [r7, #28]
 8007a98:	4401      	add	r1, r0
 8007a9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	78db      	ldrb	r3, [r3, #3]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d11f      	bne.n	8007aea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	0151      	lsls	r1, r2, #5
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	440a      	add	r2, r1
 8007ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ac8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	0151      	lsls	r1, r2, #5
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	440a      	add	r2, r1
 8007ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ae8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007aea:	79fb      	ldrb	r3, [r7, #7]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d14b      	bne.n	8007b88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d009      	beq.n	8007b0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b04:	461a      	mov	r2, r3
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	78db      	ldrb	r3, [r3, #3]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d128      	bne.n	8007b66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d110      	bne.n	8007b46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	0151      	lsls	r1, r2, #5
 8007b36:	69fa      	ldr	r2, [r7, #28]
 8007b38:	440a      	add	r2, r1
 8007b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	e00f      	b.n	8007b66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	0151      	lsls	r1, r2, #5
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	440a      	add	r2, r1
 8007b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	0151      	lsls	r1, r2, #5
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	440a      	add	r2, r1
 8007b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	e12f      	b.n	8007de8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	0151      	lsls	r1, r2, #5
 8007b9a:	69fa      	ldr	r2, [r7, #28]
 8007b9c:	440a      	add	r2, r1
 8007b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ba6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	78db      	ldrb	r3, [r3, #3]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d015      	beq.n	8007bdc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 8117 	beq.w	8007de8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	2101      	movs	r1, #1
 8007bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd0:	69f9      	ldr	r1, [r7, #28]
 8007bd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	634b      	str	r3, [r1, #52]	; 0x34
 8007bda:	e105      	b.n	8007de8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d110      	bne.n	8007c0e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	0151      	lsls	r1, r2, #5
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	440a      	add	r2, r1
 8007c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	e00f      	b.n	8007c2e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	69fa      	ldr	r2, [r7, #28]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	68d9      	ldr	r1, [r3, #12]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	781a      	ldrb	r2, [r3, #0]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	b298      	uxth	r0, r3
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	4603      	mov	r3, r0
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 fa2b 	bl	800809e <USB_WritePacket>
 8007c48:	e0ce      	b.n	8007de8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	0151      	lsls	r1, r2, #5
 8007c5c:	69fa      	ldr	r2, [r7, #28]
 8007c5e:	440a      	add	r2, r1
 8007c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c64:	0cdb      	lsrs	r3, r3, #19
 8007c66:	04db      	lsls	r3, r3, #19
 8007c68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	0151      	lsls	r1, r2, #5
 8007c7c:	69fa      	ldr	r2, [r7, #28]
 8007c7e:	440a      	add	r2, r1
 8007c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d126      	bne.n	8007ce4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cac:	69b9      	ldr	r1, [r7, #24]
 8007cae:	0148      	lsls	r0, r1, #5
 8007cb0:	69f9      	ldr	r1, [r7, #28]
 8007cb2:	4401      	add	r1, r0
 8007cb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	0151      	lsls	r1, r2, #5
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	440a      	add	r2, r1
 8007cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cda:	6113      	str	r3, [r2, #16]
 8007cdc:	e036      	b.n	8007d4c <USB_EPStartXfer+0x3dc>
 8007cde:	bf00      	nop
 8007ce0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	695a      	ldr	r2, [r3, #20]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	4413      	add	r3, r2
 8007cee:	1e5a      	subs	r2, r3, #1
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d06:	691a      	ldr	r2, [r3, #16]
 8007d08:	8afb      	ldrh	r3, [r7, #22]
 8007d0a:	04d9      	lsls	r1, r3, #19
 8007d0c:	4b39      	ldr	r3, [pc, #228]	; (8007df4 <USB_EPStartXfer+0x484>)
 8007d0e:	400b      	ands	r3, r1
 8007d10:	69b9      	ldr	r1, [r7, #24]
 8007d12:	0148      	lsls	r0, r1, #5
 8007d14:	69f9      	ldr	r1, [r7, #28]
 8007d16:	4401      	add	r1, r0
 8007d18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2c:	691a      	ldr	r2, [r3, #16]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	8af9      	ldrh	r1, [r7, #22]
 8007d34:	fb01 f303 	mul.w	r3, r1, r3
 8007d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d3c:	69b9      	ldr	r1, [r7, #24]
 8007d3e:	0148      	lsls	r0, r1, #5
 8007d40:	69f9      	ldr	r1, [r7, #28]
 8007d42:	4401      	add	r1, r0
 8007d44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d10d      	bne.n	8007d6e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	68d9      	ldr	r1, [r3, #12]
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6a:	460a      	mov	r2, r1
 8007d6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	78db      	ldrb	r3, [r3, #3]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d128      	bne.n	8007dc8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d110      	bne.n	8007da8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	0151      	lsls	r1, r2, #5
 8007d98:	69fa      	ldr	r2, [r7, #28]
 8007d9a:	440a      	add	r2, r1
 8007d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007da0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	e00f      	b.n	8007dc8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	0151      	lsls	r1, r2, #5
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	440a      	add	r2, r1
 8007dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dc6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007de2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007de6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3720      	adds	r7, #32
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	1ff80000 	.word	0x1ff80000

08007df8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	4613      	mov	r3, r2
 8007e04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	f040 80cd 	bne.w	8007fb4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d132      	bne.n	8007e88 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	0151      	lsls	r1, r2, #5
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	440a      	add	r2, r1
 8007e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	0151      	lsls	r1, r2, #5
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	440a      	add	r2, r1
 8007e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e80:	0cdb      	lsrs	r3, r3, #19
 8007e82:	04db      	lsls	r3, r3, #19
 8007e84:	6113      	str	r3, [r2, #16]
 8007e86:	e04e      	b.n	8007f26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	0151      	lsls	r1, r2, #5
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	440a      	add	r2, r1
 8007e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea2:	0cdb      	lsrs	r3, r3, #19
 8007ea4:	04db      	lsls	r3, r3, #19
 8007ea6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	0151      	lsls	r1, r2, #5
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	440a      	add	r2, r1
 8007ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ec6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007eca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	695a      	ldr	r2, [r3, #20]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d903      	bls.n	8007ee0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007efa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007efe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0c:	691a      	ldr	r2, [r3, #16]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f16:	6939      	ldr	r1, [r7, #16]
 8007f18:	0148      	lsls	r0, r1, #5
 8007f1a:	6979      	ldr	r1, [r7, #20]
 8007f1c:	4401      	add	r1, r0
 8007f1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f22:	4313      	orrs	r3, r2
 8007f24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d11e      	bne.n	8007f6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d009      	beq.n	8007f48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f40:	461a      	mov	r2, r3
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	0151      	lsls	r1, r2, #5
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	440a      	add	r2, r1
 8007f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	e092      	b.n	8008090 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	0151      	lsls	r1, r2, #5
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	440a      	add	r2, r1
 8007f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d07e      	beq.n	8008090 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	f003 030f 	and.w	r3, r3, #15
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa8:	6979      	ldr	r1, [r7, #20]
 8007faa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	634b      	str	r3, [r1, #52]	; 0x34
 8007fb2:	e06d      	b.n	8008090 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	0151      	lsls	r1, r2, #5
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	440a      	add	r2, r1
 8007fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fce:	0cdb      	lsrs	r3, r3, #19
 8007fd0:	04db      	lsls	r3, r3, #19
 8007fd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	0151      	lsls	r1, r2, #5
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	440a      	add	r2, r1
 8007fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ff2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ff6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d003      	beq.n	8008008 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	689a      	ldr	r2, [r3, #8]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	440a      	add	r2, r1
 800801e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008026:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008034:	691a      	ldr	r2, [r3, #16]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800803e:	6939      	ldr	r1, [r7, #16]
 8008040:	0148      	lsls	r0, r1, #5
 8008042:	6979      	ldr	r1, [r7, #20]
 8008044:	4401      	add	r1, r0
 8008046:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800804a:	4313      	orrs	r3, r2
 800804c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d10d      	bne.n	8008070 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d009      	beq.n	8008070 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	68d9      	ldr	r1, [r3, #12]
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806c:	460a      	mov	r2, r1
 800806e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	440a      	add	r2, r1
 8008086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800808a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800808e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	371c      	adds	r7, #28
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800809e:	b480      	push	{r7}
 80080a0:	b089      	sub	sp, #36	; 0x24
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	4611      	mov	r1, r2
 80080aa:	461a      	mov	r2, r3
 80080ac:	460b      	mov	r3, r1
 80080ae:	71fb      	strb	r3, [r7, #7]
 80080b0:	4613      	mov	r3, r2
 80080b2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80080bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d11a      	bne.n	80080fa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080c4:	88bb      	ldrh	r3, [r7, #4]
 80080c6:	3303      	adds	r3, #3
 80080c8:	089b      	lsrs	r3, r3, #2
 80080ca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080cc:	2300      	movs	r3, #0
 80080ce:	61bb      	str	r3, [r7, #24]
 80080d0:	e00f      	b.n	80080f2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80080d2:	79fb      	ldrb	r3, [r7, #7]
 80080d4:	031a      	lsls	r2, r3, #12
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080de:	461a      	mov	r2, r3
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	3304      	adds	r3, #4
 80080ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	3301      	adds	r3, #1
 80080f0:	61bb      	str	r3, [r7, #24]
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d3eb      	bcc.n	80080d2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3724      	adds	r7, #36	; 0x24
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008108:	b480      	push	{r7}
 800810a:	b089      	sub	sp, #36	; 0x24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	4613      	mov	r3, r2
 8008114:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800811e:	88fb      	ldrh	r3, [r7, #6]
 8008120:	3303      	adds	r3, #3
 8008122:	089b      	lsrs	r3, r3, #2
 8008124:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008126:	2300      	movs	r3, #0
 8008128:	61bb      	str	r3, [r7, #24]
 800812a:	e00b      	b.n	8008144 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	601a      	str	r2, [r3, #0]
    pDest++;
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	3304      	adds	r3, #4
 800813c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	3301      	adds	r3, #1
 8008142:	61bb      	str	r3, [r7, #24]
 8008144:	69ba      	ldr	r2, [r7, #24]
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	429a      	cmp	r2, r3
 800814a:	d3ef      	bcc.n	800812c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800814c:	69fb      	ldr	r3, [r7, #28]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3724      	adds	r7, #36	; 0x24
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800815a:	b480      	push	{r7}
 800815c:	b085      	sub	sp, #20
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	785b      	ldrb	r3, [r3, #1]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d12c      	bne.n	80081d0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	db12      	blt.n	80081ae <USB_EPSetStall+0x54>
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00f      	beq.n	80081ae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4413      	add	r3, r2
 8008196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	0151      	lsls	r1, r2, #5
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	440a      	add	r2, r1
 80081a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081ac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	0151      	lsls	r1, r2, #5
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	440a      	add	r2, r1
 80081c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	e02b      	b.n	8008228 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	db12      	blt.n	8008208 <USB_EPSetStall+0xae>
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00f      	beq.n	8008208 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	0151      	lsls	r1, r2, #5
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	440a      	add	r2, r1
 80081fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008202:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008206:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	0151      	lsls	r1, r2, #5
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	440a      	add	r2, r1
 800821e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008222:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008226:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008236:	b480      	push	{r7}
 8008238:	b085      	sub	sp, #20
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d128      	bne.n	80082a4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	0151      	lsls	r1, r2, #5
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	440a      	add	r2, r1
 8008268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800826c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008270:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	78db      	ldrb	r3, [r3, #3]
 8008276:	2b03      	cmp	r3, #3
 8008278:	d003      	beq.n	8008282 <USB_EPClearStall+0x4c>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	78db      	ldrb	r3, [r3, #3]
 800827e:	2b02      	cmp	r3, #2
 8008280:	d138      	bne.n	80082f4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	0151      	lsls	r1, r2, #5
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	440a      	add	r2, r1
 8008298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800829c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082a0:	6013      	str	r3, [r2, #0]
 80082a2:	e027      	b.n	80082f4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	0151      	lsls	r1, r2, #5
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	440a      	add	r2, r1
 80082ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	78db      	ldrb	r3, [r3, #3]
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d003      	beq.n	80082d4 <USB_EPClearStall+0x9e>
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	78db      	ldrb	r3, [r3, #3]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d10f      	bne.n	80082f4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	0151      	lsls	r1, r2, #5
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	440a      	add	r2, r1
 80082ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082f2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008302:	b480      	push	{r7}
 8008304:	b085      	sub	sp, #20
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	460b      	mov	r3, r1
 800830c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008320:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008324:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	78fb      	ldrb	r3, [r7, #3]
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008336:	68f9      	ldr	r1, [r7, #12]
 8008338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800833c:	4313      	orrs	r3, r2
 800833e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800834e:	b480      	push	{r7}
 8008350:	b085      	sub	sp, #20
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008368:	f023 0303 	bic.w	r3, r3, #3
 800836c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800837c:	f023 0302 	bic.w	r3, r3, #2
 8008380:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083aa:	f023 0303 	bic.w	r3, r3, #3
 80083ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083be:	f043 0302 	orr.w	r3, r3, #2
 80083c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b085      	sub	sp, #20
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4013      	ands	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083ea:	68fb      	ldr	r3, [r7, #12]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	4013      	ands	r3, r2
 800841a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	0c1b      	lsrs	r3, r3, #16
}
 8008420:	4618      	mov	r0, r3
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	4013      	ands	r3, r2
 800844e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	b29b      	uxth	r3, r3
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	4013      	ands	r3, r2
 800848c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800848e:	68bb      	ldr	r3, [r7, #8]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084be:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	f003 030f 	and.w	r3, r3, #15
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	fa22 f303 	lsr.w	r3, r2, r3
 80084cc:	01db      	lsls	r3, r3, #7
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	4013      	ands	r3, r2
 80084e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084ea:	68bb      	ldr	r3, [r7, #8]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	371c      	adds	r7, #28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	f003 0301 	and.w	r3, r3, #1
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800852e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008532:	f023 0307 	bic.w	r3, r3, #7
 8008536:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800854a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
	...

0800855c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	460b      	mov	r3, r1
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	333c      	adds	r3, #60	; 0x3c
 8008572:	3304      	adds	r3, #4
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	4a26      	ldr	r2, [pc, #152]	; (8008614 <USB_EP0_OutStart+0xb8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d90a      	bls.n	8008596 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800858c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008590:	d101      	bne.n	8008596 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	e037      	b.n	8008606 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859c:	461a      	mov	r2, r3
 800859e:	2300      	movs	r3, #0
 80085a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c4:	f043 0318 	orr.w	r3, r3, #24
 80085c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80085dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80085de:	7afb      	ldrb	r3, [r7, #11]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d10f      	bne.n	8008604 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ea:	461a      	mov	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008602:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	4f54300a 	.word	0x4f54300a

08008618 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3301      	adds	r3, #1
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	4a13      	ldr	r2, [pc, #76]	; (800867c <USB_CoreReset+0x64>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d901      	bls.n	8008636 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e01b      	b.n	800866e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	daf2      	bge.n	8008624 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800863e:	2300      	movs	r3, #0
 8008640:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f043 0201 	orr.w	r2, r3, #1
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3301      	adds	r3, #1
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4a09      	ldr	r2, [pc, #36]	; (800867c <USB_CoreReset+0x64>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d901      	bls.n	8008660 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e006      	b.n	800866e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b01      	cmp	r3, #1
 800866a:	d0f0      	beq.n	800864e <USB_CoreReset+0x36>

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	00030d40 	.word	0x00030d40

08008680 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8008680:	b480      	push	{r7}
 8008682:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8008684:	bf00      	nop
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
	...

08008690 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af04      	add	r7, sp, #16
 8008696:	4603      	mov	r3, r0
 8008698:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800869a:	f04f 33ff 	mov.w	r3, #4294967295
 800869e:	9302      	str	r3, [sp, #8]
 80086a0:	2301      	movs	r3, #1
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	1dfb      	adds	r3, r7, #7
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	2301      	movs	r3, #1
 80086aa:	2200      	movs	r2, #0
 80086ac:	2178      	movs	r1, #120	; 0x78
 80086ae:	4803      	ldr	r0, [pc, #12]	; (80086bc <ssd1306_WriteCommand+0x2c>)
 80086b0:	f7fa fb52 	bl	8002d58 <HAL_I2C_Mem_Write>
}
 80086b4:	bf00      	nop
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	200001d4 	.word	0x200001d4

080086c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af04      	add	r7, sp, #16
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	f04f 32ff 	mov.w	r2, #4294967295
 80086d2:	9202      	str	r2, [sp, #8]
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	2301      	movs	r3, #1
 80086dc:	2240      	movs	r2, #64	; 0x40
 80086de:	2178      	movs	r1, #120	; 0x78
 80086e0:	4803      	ldr	r0, [pc, #12]	; (80086f0 <ssd1306_WriteData+0x30>)
 80086e2:	f7fa fb39 	bl	8002d58 <HAL_I2C_Mem_Write>
}
 80086e6:	bf00      	nop
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	200001d4 	.word	0x200001d4

080086f4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80086f8:	f7ff ffc2 	bl	8008680 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80086fc:	2064      	movs	r0, #100	; 0x64
 80086fe:	f7f9 ff1b 	bl	8002538 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8008702:	2000      	movs	r0, #0
 8008704:	f000 f9e6 	bl	8008ad4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8008708:	2020      	movs	r0, #32
 800870a:	f7ff ffc1 	bl	8008690 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800870e:	2000      	movs	r0, #0
 8008710:	f7ff ffbe 	bl	8008690 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8008714:	20b0      	movs	r0, #176	; 0xb0
 8008716:	f7ff ffbb 	bl	8008690 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800871a:	20c8      	movs	r0, #200	; 0xc8
 800871c:	f7ff ffb8 	bl	8008690 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8008720:	2000      	movs	r0, #0
 8008722:	f7ff ffb5 	bl	8008690 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8008726:	2010      	movs	r0, #16
 8008728:	f7ff ffb2 	bl	8008690 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800872c:	2040      	movs	r0, #64	; 0x40
 800872e:	f7ff ffaf 	bl	8008690 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8008732:	20ff      	movs	r0, #255	; 0xff
 8008734:	f000 f9ba 	bl	8008aac <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8008738:	20a1      	movs	r0, #161	; 0xa1
 800873a:	f7ff ffa9 	bl	8008690 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800873e:	20a6      	movs	r0, #166	; 0xa6
 8008740:	f7ff ffa6 	bl	8008690 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008744:	20a8      	movs	r0, #168	; 0xa8
 8008746:	f7ff ffa3 	bl	8008690 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800874a:	203f      	movs	r0, #63	; 0x3f
 800874c:	f7ff ffa0 	bl	8008690 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008750:	20a4      	movs	r0, #164	; 0xa4
 8008752:	f7ff ff9d 	bl	8008690 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8008756:	20d3      	movs	r0, #211	; 0xd3
 8008758:	f7ff ff9a 	bl	8008690 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800875c:	2000      	movs	r0, #0
 800875e:	f7ff ff97 	bl	8008690 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8008762:	20d5      	movs	r0, #213	; 0xd5
 8008764:	f7ff ff94 	bl	8008690 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8008768:	20f0      	movs	r0, #240	; 0xf0
 800876a:	f7ff ff91 	bl	8008690 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800876e:	20d9      	movs	r0, #217	; 0xd9
 8008770:	f7ff ff8e 	bl	8008690 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8008774:	2022      	movs	r0, #34	; 0x22
 8008776:	f7ff ff8b 	bl	8008690 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800877a:	20da      	movs	r0, #218	; 0xda
 800877c:	f7ff ff88 	bl	8008690 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8008780:	2012      	movs	r0, #18
 8008782:	f7ff ff85 	bl	8008690 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8008786:	20db      	movs	r0, #219	; 0xdb
 8008788:	f7ff ff82 	bl	8008690 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800878c:	2020      	movs	r0, #32
 800878e:	f7ff ff7f 	bl	8008690 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8008792:	208d      	movs	r0, #141	; 0x8d
 8008794:	f7ff ff7c 	bl	8008690 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8008798:	2014      	movs	r0, #20
 800879a:	f7ff ff79 	bl	8008690 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800879e:	2001      	movs	r0, #1
 80087a0:	f000 f998 	bl	8008ad4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black_);
 80087a4:	2000      	movs	r0, #0
 80087a6:	f000 f80f 	bl	80087c8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80087aa:	f000 f831 	bl	8008810 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80087ae:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <ssd1306_Init+0xd0>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80087b4:	4b03      	ldr	r3, [pc, #12]	; (80087c4 <ssd1306_Init+0xd0>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80087ba:	4b02      	ldr	r3, [pc, #8]	; (80087c4 <ssd1306_Init+0xd0>)
 80087bc:	2201      	movs	r2, #1
 80087be:	715a      	strb	r2, [r3, #5]
}
 80087c0:	bf00      	nop
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	20000ab8 	.word	0x20000ab8

080087c8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
 80087d6:	e00d      	b.n	80087f4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black_) ? 0x00 : 0xFF;
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <ssd1306_Fill+0x1a>
 80087de:	2100      	movs	r1, #0
 80087e0:	e000      	b.n	80087e4 <ssd1306_Fill+0x1c>
 80087e2:	21ff      	movs	r1, #255	; 0xff
 80087e4:	4a09      	ldr	r2, [pc, #36]	; (800880c <ssd1306_Fill+0x44>)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4413      	add	r3, r2
 80087ea:	460a      	mov	r2, r1
 80087ec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3301      	adds	r3, #1
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087fa:	d3ed      	bcc.n	80087d8 <ssd1306_Fill+0x10>
    }
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	200006b8 	.word	0x200006b8

08008810 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8008816:	2300      	movs	r3, #0
 8008818:	71fb      	strb	r3, [r7, #7]
 800881a:	e016      	b.n	800884a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800881c:	79fb      	ldrb	r3, [r7, #7]
 800881e:	3b50      	subs	r3, #80	; 0x50
 8008820:	b2db      	uxtb	r3, r3
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff ff34 	bl	8008690 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8008828:	2000      	movs	r0, #0
 800882a:	f7ff ff31 	bl	8008690 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800882e:	2010      	movs	r0, #16
 8008830:	f7ff ff2e 	bl	8008690 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	01db      	lsls	r3, r3, #7
 8008838:	4a08      	ldr	r2, [pc, #32]	; (800885c <ssd1306_UpdateScreen+0x4c>)
 800883a:	4413      	add	r3, r2
 800883c:	2180      	movs	r1, #128	; 0x80
 800883e:	4618      	mov	r0, r3
 8008840:	f7ff ff3e 	bl	80086c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	3301      	adds	r3, #1
 8008848:	71fb      	strb	r3, [r7, #7]
 800884a:	79fb      	ldrb	r3, [r7, #7]
 800884c:	2b07      	cmp	r3, #7
 800884e:	d9e5      	bls.n	800881c <ssd1306_UpdateScreen+0xc>
    }
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	200006b8 	.word	0x200006b8

08008860 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	71fb      	strb	r3, [r7, #7]
 800886a:	460b      	mov	r3, r1
 800886c:	71bb      	strb	r3, [r7, #6]
 800886e:	4613      	mov	r3, r2
 8008870:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8008872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008876:	2b00      	cmp	r3, #0
 8008878:	db48      	blt.n	800890c <ssd1306_DrawPixel+0xac>
 800887a:	79bb      	ldrb	r3, [r7, #6]
 800887c:	2b3f      	cmp	r3, #63	; 0x3f
 800887e:	d845      	bhi.n	800890c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8008880:	4b25      	ldr	r3, [pc, #148]	; (8008918 <ssd1306_DrawPixel+0xb8>)
 8008882:	791b      	ldrb	r3, [r3, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d006      	beq.n	8008896 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8008888:	797b      	ldrb	r3, [r7, #5]
 800888a:	2b00      	cmp	r3, #0
 800888c:	bf0c      	ite	eq
 800888e:	2301      	moveq	r3, #1
 8008890:	2300      	movne	r3, #0
 8008892:	b2db      	uxtb	r3, r3
 8008894:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White_) {
 8008896:	797b      	ldrb	r3, [r7, #5]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d11a      	bne.n	80088d2 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800889c:	79fa      	ldrb	r2, [r7, #7]
 800889e:	79bb      	ldrb	r3, [r7, #6]
 80088a0:	08db      	lsrs	r3, r3, #3
 80088a2:	b2d8      	uxtb	r0, r3
 80088a4:	4603      	mov	r3, r0
 80088a6:	01db      	lsls	r3, r3, #7
 80088a8:	4413      	add	r3, r2
 80088aa:	4a1c      	ldr	r2, [pc, #112]	; (800891c <ssd1306_DrawPixel+0xbc>)
 80088ac:	5cd3      	ldrb	r3, [r2, r3]
 80088ae:	b25a      	sxtb	r2, r3
 80088b0:	79bb      	ldrb	r3, [r7, #6]
 80088b2:	f003 0307 	and.w	r3, r3, #7
 80088b6:	2101      	movs	r1, #1
 80088b8:	fa01 f303 	lsl.w	r3, r1, r3
 80088bc:	b25b      	sxtb	r3, r3
 80088be:	4313      	orrs	r3, r2
 80088c0:	b259      	sxtb	r1, r3
 80088c2:	79fa      	ldrb	r2, [r7, #7]
 80088c4:	4603      	mov	r3, r0
 80088c6:	01db      	lsls	r3, r3, #7
 80088c8:	4413      	add	r3, r2
 80088ca:	b2c9      	uxtb	r1, r1
 80088cc:	4a13      	ldr	r2, [pc, #76]	; (800891c <ssd1306_DrawPixel+0xbc>)
 80088ce:	54d1      	strb	r1, [r2, r3]
 80088d0:	e01d      	b.n	800890e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80088d2:	79fa      	ldrb	r2, [r7, #7]
 80088d4:	79bb      	ldrb	r3, [r7, #6]
 80088d6:	08db      	lsrs	r3, r3, #3
 80088d8:	b2d8      	uxtb	r0, r3
 80088da:	4603      	mov	r3, r0
 80088dc:	01db      	lsls	r3, r3, #7
 80088de:	4413      	add	r3, r2
 80088e0:	4a0e      	ldr	r2, [pc, #56]	; (800891c <ssd1306_DrawPixel+0xbc>)
 80088e2:	5cd3      	ldrb	r3, [r2, r3]
 80088e4:	b25a      	sxtb	r2, r3
 80088e6:	79bb      	ldrb	r3, [r7, #6]
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	2101      	movs	r1, #1
 80088ee:	fa01 f303 	lsl.w	r3, r1, r3
 80088f2:	b25b      	sxtb	r3, r3
 80088f4:	43db      	mvns	r3, r3
 80088f6:	b25b      	sxtb	r3, r3
 80088f8:	4013      	ands	r3, r2
 80088fa:	b259      	sxtb	r1, r3
 80088fc:	79fa      	ldrb	r2, [r7, #7]
 80088fe:	4603      	mov	r3, r0
 8008900:	01db      	lsls	r3, r3, #7
 8008902:	4413      	add	r3, r2
 8008904:	b2c9      	uxtb	r1, r1
 8008906:	4a05      	ldr	r2, [pc, #20]	; (800891c <ssd1306_DrawPixel+0xbc>)
 8008908:	54d1      	strb	r1, [r2, r3]
 800890a:	e000      	b.n	800890e <ssd1306_DrawPixel+0xae>
        return;
 800890c:	bf00      	nop
    }
}
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	20000ab8 	.word	0x20000ab8
 800891c:	200006b8 	.word	0x200006b8

08008920 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black_ or White_
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8008920:	b590      	push	{r4, r7, lr}
 8008922:	b089      	sub	sp, #36	; 0x24
 8008924:	af00      	add	r7, sp, #0
 8008926:	4604      	mov	r4, r0
 8008928:	1d38      	adds	r0, r7, #4
 800892a:	e880 0006 	stmia.w	r0, {r1, r2}
 800892e:	461a      	mov	r2, r3
 8008930:	4623      	mov	r3, r4
 8008932:	73fb      	strb	r3, [r7, #15]
 8008934:	4613      	mov	r3, r2
 8008936:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	2b1f      	cmp	r3, #31
 800893c:	d902      	bls.n	8008944 <ssd1306_WriteChar+0x24>
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	2b7e      	cmp	r3, #126	; 0x7e
 8008942:	d901      	bls.n	8008948 <ssd1306_WriteChar+0x28>
        return 0;
 8008944:	2300      	movs	r3, #0
 8008946:	e06d      	b.n	8008a24 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008948:	4b38      	ldr	r3, [pc, #224]	; (8008a2c <ssd1306_WriteChar+0x10c>)
 800894a:	881b      	ldrh	r3, [r3, #0]
 800894c:	461a      	mov	r2, r3
 800894e:	793b      	ldrb	r3, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	2b80      	cmp	r3, #128	; 0x80
 8008954:	dc06      	bgt.n	8008964 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8008956:	4b35      	ldr	r3, [pc, #212]	; (8008a2c <ssd1306_WriteChar+0x10c>)
 8008958:	885b      	ldrh	r3, [r3, #2]
 800895a:	461a      	mov	r2, r3
 800895c:	797b      	ldrb	r3, [r7, #5]
 800895e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008960:	2b40      	cmp	r3, #64	; 0x40
 8008962:	dd01      	ble.n	8008968 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8008964:	2300      	movs	r3, #0
 8008966:	e05d      	b.n	8008a24 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8008968:	2300      	movs	r3, #0
 800896a:	61fb      	str	r3, [r7, #28]
 800896c:	e04c      	b.n	8008a08 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	3b20      	subs	r3, #32
 8008974:	7979      	ldrb	r1, [r7, #5]
 8008976:	fb01 f303 	mul.w	r3, r1, r3
 800897a:	4619      	mov	r1, r3
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	440b      	add	r3, r1
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	4413      	add	r3, r2
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8008988:	2300      	movs	r3, #0
 800898a:	61bb      	str	r3, [r7, #24]
 800898c:	e034      	b.n	80089f8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	fa02 f303 	lsl.w	r3, r2, r3
 8008996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d012      	beq.n	80089c4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800899e:	4b23      	ldr	r3, [pc, #140]	; (8008a2c <ssd1306_WriteChar+0x10c>)
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	4413      	add	r3, r2
 80089aa:	b2d8      	uxtb	r0, r3
 80089ac:	4b1f      	ldr	r3, [pc, #124]	; (8008a2c <ssd1306_WriteChar+0x10c>)
 80089ae:	885b      	ldrh	r3, [r3, #2]
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	4413      	add	r3, r2
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	7bba      	ldrb	r2, [r7, #14]
 80089bc:	4619      	mov	r1, r3
 80089be:	f7ff ff4f 	bl	8008860 <ssd1306_DrawPixel>
 80089c2:	e016      	b.n	80089f2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80089c4:	4b19      	ldr	r3, [pc, #100]	; (8008a2c <ssd1306_WriteChar+0x10c>)
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	4413      	add	r3, r2
 80089d0:	b2d8      	uxtb	r0, r3
 80089d2:	4b16      	ldr	r3, [pc, #88]	; (8008a2c <ssd1306_WriteChar+0x10c>)
 80089d4:	885b      	ldrh	r3, [r3, #2]
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	4413      	add	r3, r2
 80089de:	b2d9      	uxtb	r1, r3
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	bf0c      	ite	eq
 80089e6:	2301      	moveq	r3, #1
 80089e8:	2300      	movne	r3, #0
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	461a      	mov	r2, r3
 80089ee:	f7ff ff37 	bl	8008860 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	3301      	adds	r3, #1
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	793b      	ldrb	r3, [r7, #4]
 80089fa:	461a      	mov	r2, r3
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d3c5      	bcc.n	800898e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	3301      	adds	r3, #1
 8008a06:	61fb      	str	r3, [r7, #28]
 8008a08:	797b      	ldrb	r3, [r7, #5]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d3ad      	bcc.n	800896e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8008a12:	4b06      	ldr	r3, [pc, #24]	; (8008a2c <ssd1306_WriteChar+0x10c>)
 8008a14:	881a      	ldrh	r2, [r3, #0]
 8008a16:	793b      	ldrb	r3, [r7, #4]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	4413      	add	r3, r2
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	4b03      	ldr	r3, [pc, #12]	; (8008a2c <ssd1306_WriteChar+0x10c>)
 8008a20:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3724      	adds	r7, #36	; 0x24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd90      	pop	{r4, r7, pc}
 8008a2c:	20000ab8 	.word	0x20000ab8

08008a30 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	1d38      	adds	r0, r7, #4
 8008a3a:	e880 0006 	stmia.w	r0, {r1, r2}
 8008a3e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8008a40:	e012      	b.n	8008a68 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	7818      	ldrb	r0, [r3, #0]
 8008a46:	78fb      	ldrb	r3, [r7, #3]
 8008a48:	1d3a      	adds	r2, r7, #4
 8008a4a:	ca06      	ldmia	r2, {r1, r2}
 8008a4c:	f7ff ff68 	bl	8008920 <ssd1306_WriteChar>
 8008a50:	4603      	mov	r3, r0
 8008a52:	461a      	mov	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d002      	beq.n	8008a62 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	e008      	b.n	8008a74 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3301      	adds	r3, #1
 8008a66:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1e8      	bne.n	8008a42 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	781b      	ldrb	r3, [r3, #0]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	460a      	mov	r2, r1
 8008a86:	71fb      	strb	r3, [r7, #7]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <ssd1306_SetCursor+0x2c>)
 8008a92:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8008a94:	79bb      	ldrb	r3, [r7, #6]
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	4b03      	ldr	r3, [pc, #12]	; (8008aa8 <ssd1306_SetCursor+0x2c>)
 8008a9a:	805a      	strh	r2, [r3, #2]
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	20000ab8 	.word	0x20000ab8

08008aac <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8008ab6:	2381      	movs	r3, #129	; 0x81
 8008ab8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff fde7 	bl	8008690 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7ff fde3 	bl	8008690 <ssd1306_WriteCommand>
}
 8008aca:	bf00      	nop
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d005      	beq.n	8008af0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8008ae4:	23af      	movs	r3, #175	; 0xaf
 8008ae6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8008ae8:	4b08      	ldr	r3, [pc, #32]	; (8008b0c <ssd1306_SetDisplayOn+0x38>)
 8008aea:	2201      	movs	r2, #1
 8008aec:	719a      	strb	r2, [r3, #6]
 8008aee:	e004      	b.n	8008afa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8008af0:	23ae      	movs	r3, #174	; 0xae
 8008af2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8008af4:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <ssd1306_SetDisplayOn+0x38>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff fdc7 	bl	8008690 <ssd1306_WriteCommand>
}
 8008b02:	bf00      	nop
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20000ab8 	.word	0x20000ab8

08008b10 <USBD_HID_Init>:
  * @retval status
  */
/* We have to add the dataout/ep_out function here to get USB pipe data out
 * This is only used with XBCD or THPS 2, every other XBOX game sends rumble through control requests */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008b1c:	2010      	movs	r0, #16
 8008b1e:	f004 fe01 	bl	800d724 <USBD_static_malloc>
 8008b22:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d105      	bne.n	8008b36 <USBD_HID_Init+0x26>
  {
	  //usb_failed = 1;
    pdev->pClassData = NULL;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008b32:	2302      	movs	r3, #2
 8008b34:	e033      	b.n	8008b9e <USBD_HID_Init+0x8e>
  }

  pdev->pClassData = (void *)hhid;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	7c1b      	ldrb	r3, [r3, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d107      	bne.n	8008b56 <USBD_HID_Init+0x46>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2207      	movs	r2, #7
 8008b4a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2207      	movs	r2, #7
 8008b50:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
 8008b54:	e006      	b.n	8008b64 <USBD_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2204      	movs	r2, #4
 8008b5a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2204      	movs	r2, #4
 8008b60:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008b64:	2320      	movs	r3, #32
 8008b66:	2203      	movs	r2, #3
 8008b68:	2181      	movs	r1, #129	; 0x81
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f004 fc7b 	bl	800d466 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8008b76:	2306      	movs	r3, #6
 8008b78:	2203      	movs	r2, #3
 8008b7a:	2102      	movs	r1, #2
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f004 fc72 	bl	800d466 <USBD_LL_OpenEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  (void)USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR,(uint8_t*)rx_buf, HID_EPOUT_SIZE);
 8008b8a:	2306      	movs	r3, #6
 8008b8c:	4a06      	ldr	r2, [pc, #24]	; (8008ba8 <USBD_HID_Init+0x98>)
 8008b8e:	2102      	movs	r1, #2
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f004 fd57 	bl	800d644 <USBD_LL_PrepareReceive>

  hhid->state = HID_IDLE;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	731a      	strb	r2, [r3, #12]

  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();

  /* Prepare Out endpoint to receive 1st packet */

  return (uint8_t)USBD_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	200001cc 	.word	0x200001cc

08008bac <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008bb8:	2181      	movs	r1, #129	; 0x81
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f004 fc79 	bl	800d4b2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, HID_EPOUT_ADDR);
 8008bcc:	2102      	movs	r1, #2
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f004 fc6f 	bl	800d4b2 <USBD_LL_CloseEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d009      	beq.n	8008c02 <USBD_HID_DeInit+0x56>
  {
    (void)USBD_free(pdev->pClassData);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f004 fda3 	bl	800d740 <USBD_static_free>
    pdev->pClassData = NULL;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c1c:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d104      	bne.n	8008c36 <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 8008c2c:	4b9f      	ldr	r3, [pc, #636]	; (8008eac <USBD_HID_Setup+0x2a0>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e136      	b.n	8008ea4 <USBD_HID_Setup+0x298>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c3e:	2b40      	cmp	r3, #64	; 0x40
 8008c40:	f000 80e1 	beq.w	8008e06 <USBD_HID_Setup+0x1fa>
 8008c44:	2b40      	cmp	r3, #64	; 0x40
 8008c46:	f200 8124 	bhi.w	8008e92 <USBD_HID_Setup+0x286>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d058      	beq.n	8008d00 <USBD_HID_Setup+0xf4>
 8008c4e:	2b20      	cmp	r3, #32
 8008c50:	f040 811f 	bne.w	8008e92 <USBD_HID_Setup+0x286>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	785b      	ldrb	r3, [r3, #1]
 8008c58:	3b02      	subs	r3, #2
 8008c5a:	2b09      	cmp	r3, #9
 8008c5c:	d848      	bhi.n	8008cf0 <USBD_HID_Setup+0xe4>
 8008c5e:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <USBD_HID_Setup+0x58>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008cbb 	.word	0x08008cbb
 8008c68:	08008c9b 	.word	0x08008c9b
 8008c6c:	08008cf1 	.word	0x08008cf1
 8008c70:	08008cf1 	.word	0x08008cf1
 8008c74:	08008cf1 	.word	0x08008cf1
 8008c78:	08008cf1 	.word	0x08008cf1
 8008c7c:	08008cf1 	.word	0x08008cf1
 8008c80:	08008ccb 	.word	0x08008ccb
 8008c84:	08008ca9 	.word	0x08008ca9
 8008c88:	08008c8d 	.word	0x08008c8d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	885b      	ldrh	r3, [r3, #2]
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	461a      	mov	r2, r3
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	601a      	str	r2, [r3, #0]
          break;
 8008c98:	e031      	b.n	8008cfe <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f001 fada 	bl	800a25a <USBD_CtlSendData>
          break;
 8008ca6:	e02a      	b.n	8008cfe <USBD_HID_Setup+0xf2>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	885b      	ldrh	r3, [r3, #2]
 8008cac:	0a1b      	lsrs	r3, r3, #8
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	605a      	str	r2, [r3, #4]
          break;
 8008cb8:	e021      	b.n	8008cfe <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 fac9 	bl	800a25a <USBD_CtlSendData>
          break;
 8008cc8:	e019      	b.n	8008cfe <USBD_HID_Setup+0xf2>

        /*We need to get Control request data for the rumble data from the XBOX, we have to add this ourselves */
        case HID_REQ_SET_REPORT:
          rumble_flag = 1;
 8008cca:	4b79      	ldr	r3, [pc, #484]	; (8008eb0 <USBD_HID_Setup+0x2a4>)
 8008ccc:	2201      	movs	r2, #1
 8008cce:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_ID = (uint8_t)(req->wValue);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	885b      	ldrh	r3, [r3, #2]
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	4b77      	ldr	r3, [pc, #476]	; (8008eb4 <USBD_HID_Setup+0x2a8>)
 8008cd8:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_LENGTH = (uint8_t)(req->wLength);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	88db      	ldrh	r3, [r3, #6]
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	4b75      	ldr	r3, [pc, #468]	; (8008eb8 <USBD_HID_Setup+0x2ac>)
 8008ce2:	701a      	strb	r2, [r3, #0]
          USBD_CtlPrepareRx (pdev, ctl_report_buf, HID_EPOUT_SIZE);
 8008ce4:	2206      	movs	r2, #6
 8008ce6:	4975      	ldr	r1, [pc, #468]	; (8008ebc <USBD_HID_Setup+0x2b0>)
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 fae2 	bl	800a2b2 <USBD_CtlPrepareRx>
          break;
 8008cee:	e006      	b.n	8008cfe <USBD_HID_Setup+0xf2>
//                            (uint8_t *)&Report_buf,
//                            8);
//          break;

        default:
          USBD_CtlError(pdev, req);
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 fa40 	bl	800a178 <USBD_CtlError>
          ret = USBD_FAIL;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	77fb      	strb	r3, [r7, #31]
          break;
 8008cfc:	bf00      	nop
      }
      break;
 8008cfe:	e0d0      	b.n	8008ea2 <USBD_HID_Setup+0x296>
    case USB_REQ_TYPE_STANDARD:

      switch (req->bRequest)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	785b      	ldrb	r3, [r3, #1]
 8008d04:	2b0b      	cmp	r3, #11
 8008d06:	d875      	bhi.n	8008df4 <USBD_HID_Setup+0x1e8>
 8008d08:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <USBD_HID_Setup+0x104>)
 8008d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0e:	bf00      	nop
 8008d10:	08008d41 	.word	0x08008d41
 8008d14:	08008e03 	.word	0x08008e03
 8008d18:	08008df5 	.word	0x08008df5
 8008d1c:	08008df5 	.word	0x08008df5
 8008d20:	08008df5 	.word	0x08008df5
 8008d24:	08008df5 	.word	0x08008df5
 8008d28:	08008d6b 	.word	0x08008d6b
 8008d2c:	08008df5 	.word	0x08008df5
 8008d30:	08008df5 	.word	0x08008df5
 8008d34:	08008df5 	.word	0x08008df5
 8008d38:	08008da3 	.word	0x08008da3
 8008d3c:	08008dcd 	.word	0x08008dcd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	d107      	bne.n	8008d5c <USBD_HID_Setup+0x150>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d4c:	f107 030e 	add.w	r3, r7, #14
 8008d50:	2202      	movs	r2, #2
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 fa80 	bl	800a25a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d5a:	e053      	b.n	8008e04 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f001 fa0a 	bl	800a178 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d64:	2303      	movs	r3, #3
 8008d66:	77fb      	strb	r3, [r7, #31]
          break;
 8008d68:	e04c      	b.n	8008e04 <USBD_HID_Setup+0x1f8>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	885b      	ldrh	r3, [r3, #2]
 8008d6e:	0a1b      	lsrs	r3, r3, #8
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	2b21      	cmp	r3, #33	; 0x21
 8008d74:	d10e      	bne.n	8008d94 <USBD_HID_Setup+0x188>
          {
            pbuf = USBD_HID_Desc;
 8008d76:	4b52      	ldr	r3, [pc, #328]	; (8008ec0 <USBD_HID_Setup+0x2b4>)
 8008d78:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	88db      	ldrh	r3, [r3, #6]
 8008d7e:	2b12      	cmp	r3, #18
 8008d80:	bf28      	it	cs
 8008d82:	2312      	movcs	r3, #18
 8008d84:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d86:	8afb      	ldrh	r3, [r7, #22]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	6939      	ldr	r1, [r7, #16]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f001 fa64 	bl	800a25a <USBD_CtlSendData>
          break;
 8008d92:	e037      	b.n	8008e04 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 f9ee 	bl	800a178 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	77fb      	strb	r3, [r7, #31]
            break;
 8008da0:	e030      	b.n	8008e04 <USBD_HID_Setup+0x1f8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d107      	bne.n	8008dbe <USBD_HID_Setup+0x1b2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	3308      	adds	r3, #8
 8008db2:	2201      	movs	r2, #1
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f001 fa4f 	bl	800a25a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dbc:	e022      	b.n	8008e04 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f001 f9d9 	bl	800a178 <USBD_CtlError>
            ret = USBD_FAIL;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	77fb      	strb	r3, [r7, #31]
          break;
 8008dca:	e01b      	b.n	8008e04 <USBD_HID_Setup+0x1f8>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d106      	bne.n	8008de6 <USBD_HID_Setup+0x1da>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	885b      	ldrh	r3, [r3, #2]
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	461a      	mov	r2, r3
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008de4:	e00e      	b.n	8008e04 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 f9c5 	bl	800a178 <USBD_CtlError>
            ret = USBD_FAIL;
 8008dee:	2303      	movs	r3, #3
 8008df0:	77fb      	strb	r3, [r7, #31]
          break;
 8008df2:	e007      	b.n	8008e04 <USBD_HID_Setup+0x1f8>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f001 f9be 	bl	800a178 <USBD_CtlError>
          ret = USBD_FAIL;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	77fb      	strb	r3, [r7, #31]
          break;
 8008e00:	e000      	b.n	8008e04 <USBD_HID_Setup+0x1f8>
          break;
 8008e02:	bf00      	nop
      }
      break;
 8008e04:	e04d      	b.n	8008ea2 <USBD_HID_Setup+0x296>
    /*This is for the og XBOX, this is the custom vendor request
     * We intercept these and return either the controller's capabilities
     * This is equivalent to the USB HID Descriptor which would normally be used for most devices */
    case (0xC1 & USB_REQ_TYPE_MASK):
    	 hid_setup_ran++;
 8008e06:	4b2f      	ldr	r3, [pc, #188]	; (8008ec4 <USBD_HID_Setup+0x2b8>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	4b2d      	ldr	r3, [pc, #180]	; (8008ec4 <USBD_HID_Setup+0x2b8>)
 8008e10:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	2b06      	cmp	r3, #6
 8008e18:	d10f      	bne.n	8008e3a <USBD_HID_Setup+0x22e>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	885b      	ldrh	r3, [r3, #2]
 8008e1e:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8008e22:	d10a      	bne.n	8008e3a <USBD_HID_Setup+0x22e>
    		len = 16;
 8008e24:	2310      	movs	r3, #16
 8008e26:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 8008e28:	4b25      	ldr	r3, [pc, #148]	; (8008ec0 <USBD_HID_Setup+0x2b4>)
 8008e2a:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008e2c:	8afb      	ldrh	r3, [r7, #22]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	6939      	ldr	r1, [r7, #16]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 fa11 	bl	800a25a <USBD_CtlSendData>
 8008e38:	e02a      	b.n	8008e90 <USBD_HID_Setup+0x284>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	785b      	ldrb	r3, [r3, #1]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d10f      	bne.n	8008e62 <USBD_HID_Setup+0x256>
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	885b      	ldrh	r3, [r3, #2]
 8008e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e4a:	d10a      	bne.n	8008e62 <USBD_HID_Setup+0x256>
    		len = 20;
 8008e4c:	2314      	movs	r3, #20
 8008e4e:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8008e50:	4b1d      	ldr	r3, [pc, #116]	; (8008ec8 <USBD_HID_Setup+0x2bc>)
 8008e52:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008e54:	8afb      	ldrh	r3, [r7, #22]
 8008e56:	461a      	mov	r2, r3
 8008e58:	6939      	ldr	r1, [r7, #16]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 f9fd 	bl	800a25a <USBD_CtlSendData>
 8008e60:	e016      	b.n	8008e90 <USBD_HID_Setup+0x284>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	785b      	ldrb	r3, [r3, #1]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d11a      	bne.n	8008ea0 <USBD_HID_Setup+0x294>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	885b      	ldrh	r3, [r3, #2]
 8008e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e72:	d115      	bne.n	8008ea0 <USBD_HID_Setup+0x294>
    		rumble_brequest_sent = 1;
 8008e74:	4b15      	ldr	r3, [pc, #84]	; (8008ecc <USBD_HID_Setup+0x2c0>)
 8008e76:	2201      	movs	r2, #1
 8008e78:	701a      	strb	r2, [r3, #0]
    		len = 6;
 8008e7a:	2306      	movs	r3, #6
 8008e7c:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8008e7e:	4b14      	ldr	r3, [pc, #80]	; (8008ed0 <USBD_HID_Setup+0x2c4>)
 8008e80:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008e82:	8afb      	ldrh	r3, [r7, #22]
 8008e84:	461a      	mov	r2, r3
 8008e86:	6939      	ldr	r1, [r7, #16]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 f9e6 	bl	800a25a <USBD_CtlSendData>
    	}
    break;
 8008e8e:	e007      	b.n	8008ea0 <USBD_HID_Setup+0x294>
 8008e90:	e006      	b.n	8008ea0 <USBD_HID_Setup+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 f96f 	bl	800a178 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	77fb      	strb	r3, [r7, #31]
      break;
 8008e9e:	e000      	b.n	8008ea2 <USBD_HID_Setup+0x296>
    break;
 8008ea0:	bf00      	nop
  }

  return (uint8_t)ret;
 8008ea2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3720      	adds	r7, #32
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	20000ac2 	.word	0x20000ac2
 8008eb0:	20000ace 	.word	0x20000ace
 8008eb4:	20000ac4 	.word	0x20000ac4
 8008eb8:	20000ac5 	.word	0x20000ac5
 8008ebc:	20000ac8 	.word	0x20000ac8
 8008ec0:	20000090 	.word	0x20000090
 8008ec4:	20000ac0 	.word	0x20000ac0
 8008ec8:	200000ac 	.word	0x200000ac
 8008ecc:	20000ac3 	.word	0x20000ac3
 8008ed0:	200000c0 	.word	0x200000c0

08008ed4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ee8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	e013      	b.n	8008f1c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d10c      	bne.n	8008f1a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	7b1b      	ldrb	r3, [r3, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d108      	bne.n	8008f1a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008f0e:	88fb      	ldrh	r3, [r7, #6]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	2181      	movs	r1, #129	; 0x81
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f004 fb74 	bl	800d602 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2220      	movs	r2, #32
 8008f30:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008f32:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	20000050 	.word	0x20000050

08008f44 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8008f4c:	bf00      	nop
 8008f4e:	4618      	mov	r0, r3
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
	...

08008f5c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2220      	movs	r2, #32
 8008f68:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008f6a:	4b03      	ldr	r3, [pc, #12]	; (8008f78 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	20000070 	.word	0x20000070

08008f7c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f8e:	2200      	movs	r2, #0
 8008f90:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <USBD_HID_DataOut>:
/* DataOut will only run for THPS 2 or activating rumble in XBCD on a PC */
static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
	dataout_ran++;
 8008fac:	4b08      	ldr	r3, [pc, #32]	; (8008fd0 <USBD_HID_DataOut+0x30>)
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	4b06      	ldr	r3, [pc, #24]	; (8008fd0 <USBD_HID_DataOut+0x30>)
 8008fb6:	701a      	strb	r2, [r3, #0]
	USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, (uint8_t*) (rx_buf), HID_EPOUT_SIZE);
 8008fb8:	2306      	movs	r3, #6
 8008fba:	4a06      	ldr	r2, [pc, #24]	; (8008fd4 <USBD_HID_DataOut+0x34>)
 8008fbc:	2102      	movs	r1, #2
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f004 fb40 	bl	800d644 <USBD_LL_PrepareReceive>
	return USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000ac1 	.word	0x20000ac1
 8008fd4:	200001cc 	.word	0x200001cc

08008fd8 <USBD_HID_EP0_RxReady>:
  * @retval status
  */
/*This is to put the rumble data from the USB control requests into rx_buf so we can read that in main
 * This is the standard way XBOX sends rumble data, this different from a PC which would send data through USB Out Pipe */
static uint8_t USBD_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
	if (rumble_flag) {
 8008fe0:	4b10      	ldr	r3, [pc, #64]	; (8009024 <USBD_HID_EP0_RxReady+0x4c>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d015      	beq.n	8009014 <USBD_HID_EP0_RxReady+0x3c>
		rumble_flag = 0;
 8008fe8:	4b0e      	ldr	r3, [pc, #56]	; (8009024 <USBD_HID_EP0_RxReady+0x4c>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	701a      	strb	r2, [r3, #0]
		if (USBD_HID_Report_LENGTH == HID_EPOUT_SIZE) {
 8008fee:	4b0e      	ldr	r3, [pc, #56]	; (8009028 <USBD_HID_EP0_RxReady+0x50>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	2b06      	cmp	r3, #6
 8008ff4:	d10e      	bne.n	8009014 <USBD_HID_EP0_RxReady+0x3c>
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	73fb      	strb	r3, [r7, #15]
 8008ffa:	e008      	b.n	800900e <USBD_HID_EP0_RxReady+0x36>
				rx_buf[i] = ctl_report_buf[i];
 8008ffc:	7bfa      	ldrb	r2, [r7, #15]
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
 8009000:	490a      	ldr	r1, [pc, #40]	; (800902c <USBD_HID_EP0_RxReady+0x54>)
 8009002:	5c89      	ldrb	r1, [r1, r2]
 8009004:	4a0a      	ldr	r2, [pc, #40]	; (8009030 <USBD_HID_EP0_RxReady+0x58>)
 8009006:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	3301      	adds	r3, #1
 800900c:	73fb      	strb	r3, [r7, #15]
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	2b05      	cmp	r3, #5
 8009012:	d9f3      	bls.n	8008ffc <USBD_HID_EP0_RxReady+0x24>
			}
		}
	}
	return (uint8_t) USBD_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20000ace 	.word	0x20000ace
 8009028:	20000ac5 	.word	0x20000ac5
 800902c:	20000ac8 	.word	0x20000ac8
 8009030:	200001cc 	.word	0x200001cc

08009034 <USBD_HID_EP0_TxSent>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_HID_EP0_TxSent(USBD_HandleTypeDef *pdev)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
//    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
//                                                              hhid->Report_buf[1]);
//    hhid->IsReportAvailable = 0U;
//  }

  return (uint8_t)USBD_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
	...

0800904c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	220a      	movs	r2, #10
 8009058:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800905a:	4b03      	ldr	r3, [pc, #12]	; (8009068 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	200000a0 	.word	0x200000a0

0800906c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	4613      	mov	r3, r2
 8009078:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d101      	bne.n	8009084 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009080:	2303      	movs	r3, #3
 8009082:	e01f      	b.n	80090c4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	79fa      	ldrb	r2, [r7, #7]
 80090b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f004 f96d 	bl	800d398 <USBD_LL_Init>
 80090be:	4603      	mov	r3, r0
 80090c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80090c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090d6:	2300      	movs	r3, #0
 80090d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e016      	b.n	8009112 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009100:	f107 020e 	add.w	r2, r7, #14
 8009104:	4610      	mov	r0, r2
 8009106:	4798      	blx	r3
 8009108:	4602      	mov	r2, r0
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f004 f984 	bl	800d430 <USBD_LL_Start>
 8009128:	4603      	mov	r3, r0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009132:	b480      	push	{r7}
 8009134:	b083      	sub	sp, #12
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009154:	2303      	movs	r3, #3
 8009156:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915e:	2b00      	cmp	r3, #0
 8009160:	d009      	beq.n	8009176 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	78fa      	ldrb	r2, [r7, #3]
 800916c:	4611      	mov	r1, r2
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	4798      	blx	r3
 8009172:	4603      	mov	r3, r0
 8009174:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009176:	7bfb      	ldrb	r3, [r7, #15]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	460b      	mov	r3, r1
 800918a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009192:	2b00      	cmp	r3, #0
 8009194:	d007      	beq.n	80091a6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	78fa      	ldrb	r2, [r7, #3]
 80091a0:	4611      	mov	r1, r2
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	4798      	blx	r3
  }

  return USBD_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 ff9e 	bl	800a104 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80091d6:	461a      	mov	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091e4:	f003 031f 	and.w	r3, r3, #31
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d01a      	beq.n	8009222 <USBD_LL_SetupStage+0x72>
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d822      	bhi.n	8009236 <USBD_LL_SetupStage+0x86>
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <USBD_LL_SetupStage+0x4a>
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d00a      	beq.n	800920e <USBD_LL_SetupStage+0x5e>
 80091f8:	e01d      	b.n	8009236 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fa62 	bl	80096cc <USBD_StdDevReq>
 8009208:	4603      	mov	r3, r0
 800920a:	73fb      	strb	r3, [r7, #15]
      break;
 800920c:	e020      	b.n	8009250 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fad4 	bl	80097c4 <USBD_StdItfReq>
 800921c:	4603      	mov	r3, r0
 800921e:	73fb      	strb	r3, [r7, #15]
      break;
 8009220:	e016      	b.n	8009250 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009228:	4619      	mov	r1, r3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fb13 	bl	8009856 <USBD_StdEPReq>
 8009230:	4603      	mov	r3, r0
 8009232:	73fb      	strb	r3, [r7, #15]
      break;
 8009234:	e00c      	b.n	8009250 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800923c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009240:	b2db      	uxtb	r3, r3
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f004 f953 	bl	800d4f0 <USBD_LL_StallEP>
 800924a:	4603      	mov	r3, r0
 800924c:	73fb      	strb	r3, [r7, #15]
      break;
 800924e:	bf00      	nop
  }

  return ret;
 8009250:	7bfb      	ldrb	r3, [r7, #15]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b086      	sub	sp, #24
 800925e:	af00      	add	r7, sp, #0
 8009260:	60f8      	str	r0, [r7, #12]
 8009262:	460b      	mov	r3, r1
 8009264:	607a      	str	r2, [r7, #4]
 8009266:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009268:	7afb      	ldrb	r3, [r7, #11]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d138      	bne.n	80092e0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009274:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800927c:	2b03      	cmp	r3, #3
 800927e:	d14a      	bne.n	8009316 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	689a      	ldr	r2, [r3, #8]
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	429a      	cmp	r2, r3
 800928a:	d913      	bls.n	80092b4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	1ad2      	subs	r2, r2, r3
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	4293      	cmp	r3, r2
 80092a4:	bf28      	it	cs
 80092a6:	4613      	movcs	r3, r2
 80092a8:	461a      	mov	r2, r3
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f001 f81d 	bl	800a2ec <USBD_CtlContinueRx>
 80092b2:	e030      	b.n	8009316 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b03      	cmp	r3, #3
 80092be:	d10b      	bne.n	80092d8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d005      	beq.n	80092d8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f001 f818 	bl	800a30e <USBD_CtlSendStatus>
 80092de:	e01a      	b.n	8009316 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b03      	cmp	r3, #3
 80092ea:	d114      	bne.n	8009316 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00e      	beq.n	8009316 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	7afa      	ldrb	r2, [r7, #11]
 8009302:	4611      	mov	r1, r2
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	4798      	blx	r3
 8009308:	4603      	mov	r3, r0
 800930a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	e000      	b.n	8009318 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	460b      	mov	r3, r1
 800932a:	607a      	str	r2, [r7, #4]
 800932c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800932e:	7afb      	ldrb	r3, [r7, #11]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d16b      	bne.n	800940c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3314      	adds	r3, #20
 8009338:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009340:	2b02      	cmp	r3, #2
 8009342:	d156      	bne.n	80093f2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	689a      	ldr	r2, [r3, #8]
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	429a      	cmp	r2, r3
 800934e:	d914      	bls.n	800937a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	1ad2      	subs	r2, r2, r3
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	461a      	mov	r2, r3
 8009364:	6879      	ldr	r1, [r7, #4]
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 ff92 	bl	800a290 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800936c:	2300      	movs	r3, #0
 800936e:	2200      	movs	r2, #0
 8009370:	2100      	movs	r1, #0
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f004 f966 	bl	800d644 <USBD_LL_PrepareReceive>
 8009378:	e03b      	b.n	80093f2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	68da      	ldr	r2, [r3, #12]
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	429a      	cmp	r2, r3
 8009384:	d11c      	bne.n	80093c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800938e:	429a      	cmp	r2, r3
 8009390:	d316      	bcc.n	80093c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800939c:	429a      	cmp	r2, r3
 800939e:	d20f      	bcs.n	80093c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80093a0:	2200      	movs	r2, #0
 80093a2:	2100      	movs	r1, #0
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 ff73 	bl	800a290 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093b2:	2300      	movs	r3, #0
 80093b4:	2200      	movs	r2, #0
 80093b6:	2100      	movs	r1, #0
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f004 f943 	bl	800d644 <USBD_LL_PrepareReceive>
 80093be:	e018      	b.n	80093f2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	d10b      	bne.n	80093e4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d005      	beq.n	80093e4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80093e4:	2180      	movs	r1, #128	; 0x80
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f004 f882 	bl	800d4f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f000 ffa1 	bl	800a334 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d122      	bne.n	8009442 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff fe98 	bl	8009132 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800940a:	e01a      	b.n	8009442 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b03      	cmp	r3, #3
 8009416:	d114      	bne.n	8009442 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00e      	beq.n	8009442 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	7afa      	ldrb	r2, [r7, #11]
 800942e:	4611      	mov	r1, r2
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	4798      	blx	r3
 8009434:	4603      	mov	r3, r0
 8009436:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009438:	7dfb      	ldrb	r3, [r7, #23]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800943e:	7dfb      	ldrb	r3, [r7, #23]
 8009440:	e000      	b.n	8009444 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800947c:	2303      	movs	r3, #3
 800947e:	e02f      	b.n	80094e0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00f      	beq.n	80094aa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d009      	beq.n	80094aa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	6852      	ldr	r2, [r2, #4]
 80094a2:	b2d2      	uxtb	r2, r2
 80094a4:	4611      	mov	r1, r2
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094aa:	2340      	movs	r3, #64	; 0x40
 80094ac:	2200      	movs	r2, #0
 80094ae:	2100      	movs	r1, #0
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f003 ffd8 	bl	800d466 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2240      	movs	r2, #64	; 0x40
 80094c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094c6:	2340      	movs	r3, #64	; 0x40
 80094c8:	2200      	movs	r2, #0
 80094ca:	2180      	movs	r1, #128	; 0x80
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f003 ffca 	bl	800d466 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2240      	movs	r2, #64	; 0x40
 80094dc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	78fa      	ldrb	r2, [r7, #3]
 80094f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009516:	b2da      	uxtb	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2204      	movs	r2, #4
 8009522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009542:	b2db      	uxtb	r3, r3
 8009544:	2b04      	cmp	r3, #4
 8009546:	d106      	bne.n	8009556 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800954e:	b2da      	uxtb	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009576:	2303      	movs	r3, #3
 8009578:	e012      	b.n	80095a0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b03      	cmp	r3, #3
 8009584:	d10b      	bne.n	800959e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800958c:	69db      	ldr	r3, [r3, #28]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d005      	beq.n	800959e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d101      	bne.n	80095c2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80095be:	2303      	movs	r3, #3
 80095c0:	e014      	b.n	80095ec <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	d10d      	bne.n	80095ea <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d007      	beq.n	80095ea <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	78fa      	ldrb	r2, [r7, #3]
 80095e4:	4611      	mov	r1, r2
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800960a:	2303      	movs	r3, #3
 800960c:	e014      	b.n	8009638 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b03      	cmp	r3, #3
 8009618:	d10d      	bne.n	8009636 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	2b00      	cmp	r3, #0
 8009624:	d007      	beq.n	8009636 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	78fa      	ldrb	r2, [r7, #3]
 8009630:	4611      	mov	r1, r2
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966c:	2b00      	cmp	r3, #0
 800966e:	d009      	beq.n	8009684 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	6852      	ldr	r2, [r2, #4]
 800967c:	b2d2      	uxtb	r2, r2
 800967e:	4611      	mov	r1, r2
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	4798      	blx	r3
  }

  return USBD_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800968e:	b480      	push	{r7}
 8009690:	b087      	sub	sp, #28
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	3301      	adds	r3, #1
 80096a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80096ac:	8a3b      	ldrh	r3, [r7, #16]
 80096ae:	021b      	lsls	r3, r3, #8
 80096b0:	b21a      	sxth	r2, r3
 80096b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	b21b      	sxth	r3, r3
 80096ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80096bc:	89fb      	ldrh	r3, [r7, #14]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	371c      	adds	r7, #28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
	...

080096cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	73fb      	strb	r3, [r7, #15]

	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	4798      	blx	r3
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]

	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096f4:	2b40      	cmp	r3, #64	; 0x40
 80096f6:	d005      	beq.n	8009704 <USBD_StdDevReq+0x38>
 80096f8:	2b40      	cmp	r3, #64	; 0x40
 80096fa:	d854      	bhi.n	80097a6 <USBD_StdDevReq+0xda>
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00b      	beq.n	8009718 <USBD_StdDevReq+0x4c>
 8009700:	2b20      	cmp	r3, #32
 8009702:	d150      	bne.n	80097a6 <USBD_StdDevReq+0xda>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	4798      	blx	r3
 8009712:	4603      	mov	r3, r0
 8009714:	73fb      	strb	r3, [r7, #15]
		  break;
 8009716:	e04e      	b.n	80097b6 <USBD_StdDevReq+0xea>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	785b      	ldrb	r3, [r3, #1]
 800971c:	2b09      	cmp	r3, #9
 800971e:	d83c      	bhi.n	800979a <USBD_StdDevReq+0xce>
 8009720:	a201      	add	r2, pc, #4	; (adr r2, 8009728 <USBD_StdDevReq+0x5c>)
 8009722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009726:	bf00      	nop
 8009728:	0800977d 	.word	0x0800977d
 800972c:	08009791 	.word	0x08009791
 8009730:	0800979b 	.word	0x0800979b
 8009734:	08009787 	.word	0x08009787
 8009738:	0800979b 	.word	0x0800979b
 800973c:	0800975b 	.word	0x0800975b
 8009740:	08009751 	.word	0x08009751
 8009744:	0800979b 	.word	0x0800979b
 8009748:	08009773 	.word	0x08009773
 800974c:	08009765 	.word	0x08009765
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f9e2 	bl	8009b1c <USBD_GetDescriptor>
			  break;
 8009758:	e024      	b.n	80097a4 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fb47 	bl	8009df0 <USBD_SetAddress>
			  break;
 8009762:	e01f      	b.n	80097a4 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fb86 	bl	8009e78 <USBD_SetConfig>
 800976c:	4603      	mov	r3, r0
 800976e:	73fb      	strb	r3, [r7, #15]
			  break;
 8009770:	e018      	b.n	80097a4 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fc25 	bl	8009fc4 <USBD_GetConfig>
			  break;
 800977a:	e013      	b.n	80097a4 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fc56 	bl	800a030 <USBD_GetStatus>
			  break;
 8009784:	e00e      	b.n	80097a4 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fc85 	bl	800a098 <USBD_SetFeature>
			  break;
 800978e:	e009      	b.n	80097a4 <USBD_StdDevReq+0xd8>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fc94 	bl	800a0c0 <USBD_ClrFeature>
			  break;
 8009798:	e004      	b.n	80097a4 <USBD_StdDevReq+0xd8>

			default:
			  USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fceb 	bl	800a178 <USBD_CtlError>
			  break;
 80097a2:	bf00      	nop
		  }
		  break;
 80097a4:	e007      	b.n	80097b6 <USBD_StdDevReq+0xea>

		default:
		  unknown_bmrequest = 1;
 80097a6:	4b06      	ldr	r3, [pc, #24]	; (80097c0 <USBD_StdDevReq+0xf4>)
 80097a8:	2201      	movs	r2, #1
 80097aa:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fce2 	bl	800a178 <USBD_CtlError>
		  break;
 80097b4:	bf00      	nop
	  }

  return ret;
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	20000acf 	.word	0x20000acf

080097c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097da:	2b40      	cmp	r3, #64	; 0x40
 80097dc:	d005      	beq.n	80097ea <USBD_StdItfReq+0x26>
 80097de:	2b40      	cmp	r3, #64	; 0x40
 80097e0:	d82f      	bhi.n	8009842 <USBD_StdItfReq+0x7e>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <USBD_StdItfReq+0x26>
 80097e6:	2b20      	cmp	r3, #32
 80097e8:	d12b      	bne.n	8009842 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	3b01      	subs	r3, #1
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d81d      	bhi.n	8009834 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	889b      	ldrh	r3, [r3, #4]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d813      	bhi.n	800982a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	4798      	blx	r3
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	88db      	ldrh	r3, [r3, #6]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d110      	bne.n	800983e <USBD_StdItfReq+0x7a>
 800981c:	7bfb      	ldrb	r3, [r7, #15]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10d      	bne.n	800983e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fd73 	bl	800a30e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009828:	e009      	b.n	800983e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fca3 	bl	800a178 <USBD_CtlError>
          break;
 8009832:	e004      	b.n	800983e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fc9e 	bl	800a178 <USBD_CtlError>
          break;
 800983c:	e000      	b.n	8009840 <USBD_StdItfReq+0x7c>
          break;
 800983e:	bf00      	nop
      }
      break;
 8009840:	e004      	b.n	800984c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fc97 	bl	800a178 <USBD_CtlError>
      break;
 800984a:	bf00      	nop
  }

  return ret;
 800984c:	7bfb      	ldrb	r3, [r7, #15]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b084      	sub	sp, #16
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	889b      	ldrh	r3, [r3, #4]
 8009868:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009872:	2b40      	cmp	r3, #64	; 0x40
 8009874:	d007      	beq.n	8009886 <USBD_StdEPReq+0x30>
 8009876:	2b40      	cmp	r3, #64	; 0x40
 8009878:	f200 8145 	bhi.w	8009b06 <USBD_StdEPReq+0x2b0>
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00c      	beq.n	800989a <USBD_StdEPReq+0x44>
 8009880:	2b20      	cmp	r3, #32
 8009882:	f040 8140 	bne.w	8009b06 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	4798      	blx	r3
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]
      break;
 8009898:	e13a      	b.n	8009b10 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	785b      	ldrb	r3, [r3, #1]
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d007      	beq.n	80098b2 <USBD_StdEPReq+0x5c>
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	f300 8129 	bgt.w	8009afa <USBD_StdEPReq+0x2a4>
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d07f      	beq.n	80099ac <USBD_StdEPReq+0x156>
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d03c      	beq.n	800992a <USBD_StdEPReq+0xd4>
 80098b0:	e123      	b.n	8009afa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d002      	beq.n	80098c4 <USBD_StdEPReq+0x6e>
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d016      	beq.n	80098f0 <USBD_StdEPReq+0x9a>
 80098c2:	e02c      	b.n	800991e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00d      	beq.n	80098e6 <USBD_StdEPReq+0x90>
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	2b80      	cmp	r3, #128	; 0x80
 80098ce:	d00a      	beq.n	80098e6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f003 fe0b 	bl	800d4f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098da:	2180      	movs	r1, #128	; 0x80
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f003 fe07 	bl	800d4f0 <USBD_LL_StallEP>
 80098e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098e4:	e020      	b.n	8009928 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fc45 	bl	800a178 <USBD_CtlError>
              break;
 80098ee:	e01b      	b.n	8009928 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	885b      	ldrh	r3, [r3, #2]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10e      	bne.n	8009916 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80098f8:	7bbb      	ldrb	r3, [r7, #14]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00b      	beq.n	8009916 <USBD_StdEPReq+0xc0>
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
 8009900:	2b80      	cmp	r3, #128	; 0x80
 8009902:	d008      	beq.n	8009916 <USBD_StdEPReq+0xc0>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	88db      	ldrh	r3, [r3, #6]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d104      	bne.n	8009916 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800990c:	7bbb      	ldrb	r3, [r7, #14]
 800990e:	4619      	mov	r1, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f003 fded 	bl	800d4f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fcf9 	bl	800a30e <USBD_CtlSendStatus>

              break;
 800991c:	e004      	b.n	8009928 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fc29 	bl	800a178 <USBD_CtlError>
              break;
 8009926:	bf00      	nop
          }
          break;
 8009928:	e0ec      	b.n	8009b04 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b02      	cmp	r3, #2
 8009934:	d002      	beq.n	800993c <USBD_StdEPReq+0xe6>
 8009936:	2b03      	cmp	r3, #3
 8009938:	d016      	beq.n	8009968 <USBD_StdEPReq+0x112>
 800993a:	e030      	b.n	800999e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800993c:	7bbb      	ldrb	r3, [r7, #14]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00d      	beq.n	800995e <USBD_StdEPReq+0x108>
 8009942:	7bbb      	ldrb	r3, [r7, #14]
 8009944:	2b80      	cmp	r3, #128	; 0x80
 8009946:	d00a      	beq.n	800995e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f003 fdcf 	bl	800d4f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009952:	2180      	movs	r1, #128	; 0x80
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f003 fdcb 	bl	800d4f0 <USBD_LL_StallEP>
 800995a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800995c:	e025      	b.n	80099aa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fc09 	bl	800a178 <USBD_CtlError>
              break;
 8009966:	e020      	b.n	80099aa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	885b      	ldrh	r3, [r3, #2]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d11b      	bne.n	80099a8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009976:	2b00      	cmp	r3, #0
 8009978:	d004      	beq.n	8009984 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f003 fdd5 	bl	800d52e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fcc2 	bl	800a30e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	4798      	blx	r3
 8009998:	4603      	mov	r3, r0
 800999a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800999c:	e004      	b.n	80099a8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fbe9 	bl	800a178 <USBD_CtlError>
              break;
 80099a6:	e000      	b.n	80099aa <USBD_StdEPReq+0x154>
              break;
 80099a8:	bf00      	nop
          }
          break;
 80099aa:	e0ab      	b.n	8009b04 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d002      	beq.n	80099be <USBD_StdEPReq+0x168>
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d032      	beq.n	8009a22 <USBD_StdEPReq+0x1cc>
 80099bc:	e097      	b.n	8009aee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d007      	beq.n	80099d4 <USBD_StdEPReq+0x17e>
 80099c4:	7bbb      	ldrb	r3, [r7, #14]
 80099c6:	2b80      	cmp	r3, #128	; 0x80
 80099c8:	d004      	beq.n	80099d4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fbd3 	bl	800a178 <USBD_CtlError>
                break;
 80099d2:	e091      	b.n	8009af8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	da0b      	bge.n	80099f4 <USBD_StdEPReq+0x19e>
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
 80099de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	3310      	adds	r3, #16
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	4413      	add	r3, r2
 80099f0:	3304      	adds	r3, #4
 80099f2:	e00b      	b.n	8009a0c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099f4:	7bbb      	ldrb	r3, [r7, #14]
 80099f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	4413      	add	r3, r2
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2202      	movs	r2, #2
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fc1d 	bl	800a25a <USBD_CtlSendData>
              break;
 8009a20:	e06a      	b.n	8009af8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	da11      	bge.n	8009a4e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
 8009a2c:	f003 020f 	and.w	r2, r3, #15
 8009a30:	6879      	ldr	r1, [r7, #4]
 8009a32:	4613      	mov	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	440b      	add	r3, r1
 8009a3c:	3324      	adds	r3, #36	; 0x24
 8009a3e:	881b      	ldrh	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d117      	bne.n	8009a74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fb96 	bl	800a178 <USBD_CtlError>
                  break;
 8009a4c:	e054      	b.n	8009af8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
 8009a50:	f003 020f 	and.w	r2, r3, #15
 8009a54:	6879      	ldr	r1, [r7, #4]
 8009a56:	4613      	mov	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4413      	add	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	440b      	add	r3, r1
 8009a60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d104      	bne.n	8009a74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fb83 	bl	800a178 <USBD_CtlError>
                  break;
 8009a72:	e041      	b.n	8009af8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	da0b      	bge.n	8009a94 <USBD_StdEPReq+0x23e>
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	3310      	adds	r3, #16
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	4413      	add	r3, r2
 8009a90:	3304      	adds	r3, #4
 8009a92:	e00b      	b.n	8009aac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	3304      	adds	r3, #4
 8009aac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009aae:	7bbb      	ldrb	r3, [r7, #14]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <USBD_StdEPReq+0x264>
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	2b80      	cmp	r3, #128	; 0x80
 8009ab8:	d103      	bne.n	8009ac2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2200      	movs	r2, #0
 8009abe:	601a      	str	r2, [r3, #0]
 8009ac0:	e00e      	b.n	8009ae0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f003 fd50 	bl	800d56c <USBD_LL_IsStallEP>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	e002      	b.n	8009ae0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	2200      	movs	r2, #0
 8009ade:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fbb7 	bl	800a25a <USBD_CtlSendData>
              break;
 8009aec:	e004      	b.n	8009af8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fb41 	bl	800a178 <USBD_CtlError>
              break;
 8009af6:	bf00      	nop
          }
          break;
 8009af8:	e004      	b.n	8009b04 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fb3b 	bl	800a178 <USBD_CtlError>
          break;
 8009b02:	bf00      	nop
      }
      break;
 8009b04:	e004      	b.n	8009b10 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fb35 	bl	800a178 <USBD_CtlError>
      break;
 8009b0e:	bf00      	nop
  }

  return ret;
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b26:	2300      	movs	r3, #0
 8009b28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	885b      	ldrh	r3, [r3, #2]
 8009b36:	0a1b      	lsrs	r3, r3, #8
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	2b06      	cmp	r3, #6
 8009b3e:	f200 8128 	bhi.w	8009d92 <USBD_GetDescriptor+0x276>
 8009b42:	a201      	add	r2, pc, #4	; (adr r2, 8009b48 <USBD_GetDescriptor+0x2c>)
 8009b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b48:	08009b65 	.word	0x08009b65
 8009b4c:	08009b7d 	.word	0x08009b7d
 8009b50:	08009bbd 	.word	0x08009bbd
 8009b54:	08009d93 	.word	0x08009d93
 8009b58:	08009d93 	.word	0x08009d93
 8009b5c:	08009d33 	.word	0x08009d33
 8009b60:	08009d5f 	.word	0x08009d5f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	7c12      	ldrb	r2, [r2, #16]
 8009b70:	f107 0108 	add.w	r1, r7, #8
 8009b74:	4610      	mov	r0, r2
 8009b76:	4798      	blx	r3
 8009b78:	60f8      	str	r0, [r7, #12]
      break;
 8009b7a:	e112      	b.n	8009da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	7c1b      	ldrb	r3, [r3, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10d      	bne.n	8009ba0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8c:	f107 0208 	add.w	r2, r7, #8
 8009b90:	4610      	mov	r0, r2
 8009b92:	4798      	blx	r3
 8009b94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b9e:	e100      	b.n	8009da2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	f107 0208 	add.w	r2, r7, #8
 8009bac:	4610      	mov	r0, r2
 8009bae:	4798      	blx	r3
 8009bb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	701a      	strb	r2, [r3, #0]
      break;
 8009bba:	e0f2      	b.n	8009da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	885b      	ldrh	r3, [r3, #2]
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b05      	cmp	r3, #5
 8009bc4:	f200 80ac 	bhi.w	8009d20 <USBD_GetDescriptor+0x204>
 8009bc8:	a201      	add	r2, pc, #4	; (adr r2, 8009bd0 <USBD_GetDescriptor+0xb4>)
 8009bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bce:	bf00      	nop
 8009bd0:	08009be9 	.word	0x08009be9
 8009bd4:	08009c1d 	.word	0x08009c1d
 8009bd8:	08009c51 	.word	0x08009c51
 8009bdc:	08009c85 	.word	0x08009c85
 8009be0:	08009cb9 	.word	0x08009cb9
 8009be4:	08009ced 	.word	0x08009ced
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00b      	beq.n	8009c0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	7c12      	ldrb	r2, [r2, #16]
 8009c00:	f107 0108 	add.w	r1, r7, #8
 8009c04:	4610      	mov	r0, r2
 8009c06:	4798      	blx	r3
 8009c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c0a:	e091      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fab2 	bl	800a178 <USBD_CtlError>
            err++;
 8009c14:	7afb      	ldrb	r3, [r7, #11]
 8009c16:	3301      	adds	r3, #1
 8009c18:	72fb      	strb	r3, [r7, #11]
          break;
 8009c1a:	e089      	b.n	8009d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00b      	beq.n	8009c40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	7c12      	ldrb	r2, [r2, #16]
 8009c34:	f107 0108 	add.w	r1, r7, #8
 8009c38:	4610      	mov	r0, r2
 8009c3a:	4798      	blx	r3
 8009c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c3e:	e077      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fa98 	bl	800a178 <USBD_CtlError>
            err++;
 8009c48:	7afb      	ldrb	r3, [r7, #11]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c4e:	e06f      	b.n	8009d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00b      	beq.n	8009c74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	7c12      	ldrb	r2, [r2, #16]
 8009c68:	f107 0108 	add.w	r1, r7, #8
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4798      	blx	r3
 8009c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c72:	e05d      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa7e 	bl	800a178 <USBD_CtlError>
            err++;
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	72fb      	strb	r3, [r7, #11]
          break;
 8009c82:	e055      	b.n	8009d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00b      	beq.n	8009ca8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	7c12      	ldrb	r2, [r2, #16]
 8009c9c:	f107 0108 	add.w	r1, r7, #8
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	4798      	blx	r3
 8009ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ca6:	e043      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fa64 	bl	800a178 <USBD_CtlError>
            err++;
 8009cb0:	7afb      	ldrb	r3, [r7, #11]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cb6:	e03b      	b.n	8009d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00b      	beq.n	8009cdc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	7c12      	ldrb	r2, [r2, #16]
 8009cd0:	f107 0108 	add.w	r1, r7, #8
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	4798      	blx	r3
 8009cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cda:	e029      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fa4a 	bl	800a178 <USBD_CtlError>
            err++;
 8009ce4:	7afb      	ldrb	r3, [r7, #11]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cea:	e021      	b.n	8009d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00b      	beq.n	8009d10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	7c12      	ldrb	r2, [r2, #16]
 8009d04:	f107 0108 	add.w	r1, r7, #8
 8009d08:	4610      	mov	r0, r2
 8009d0a:	4798      	blx	r3
 8009d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d0e:	e00f      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fa30 	bl	800a178 <USBD_CtlError>
            err++;
 8009d18:	7afb      	ldrb	r3, [r7, #11]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d1e:	e007      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fa28 	bl	800a178 <USBD_CtlError>
          err++;
 8009d28:	7afb      	ldrb	r3, [r7, #11]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009d2e:	bf00      	nop
      }
      break;
 8009d30:	e037      	b.n	8009da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	7c1b      	ldrb	r3, [r3, #16]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d109      	bne.n	8009d4e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d42:	f107 0208 	add.w	r2, r7, #8
 8009d46:	4610      	mov	r0, r2
 8009d48:	4798      	blx	r3
 8009d4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d4c:	e029      	b.n	8009da2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fa11 	bl	800a178 <USBD_CtlError>
        err++;
 8009d56:	7afb      	ldrb	r3, [r7, #11]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	72fb      	strb	r3, [r7, #11]
      break;
 8009d5c:	e021      	b.n	8009da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	7c1b      	ldrb	r3, [r3, #16]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10d      	bne.n	8009d82 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d6e:	f107 0208 	add.w	r2, r7, #8
 8009d72:	4610      	mov	r0, r2
 8009d74:	4798      	blx	r3
 8009d76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	2207      	movs	r2, #7
 8009d7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d80:	e00f      	b.n	8009da2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f9f7 	bl	800a178 <USBD_CtlError>
        err++;
 8009d8a:	7afb      	ldrb	r3, [r7, #11]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	72fb      	strb	r3, [r7, #11]
      break;
 8009d90:	e007      	b.n	8009da2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f9ef 	bl	800a178 <USBD_CtlError>
      err++;
 8009d9a:	7afb      	ldrb	r3, [r7, #11]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	72fb      	strb	r3, [r7, #11]
      break;
 8009da0:	bf00      	nop
  }

  if (err != 0U)
 8009da2:	7afb      	ldrb	r3, [r7, #11]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d11e      	bne.n	8009de6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	88db      	ldrh	r3, [r3, #6]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d016      	beq.n	8009dde <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009db0:	893b      	ldrh	r3, [r7, #8]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00e      	beq.n	8009dd4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	88da      	ldrh	r2, [r3, #6]
 8009dba:	893b      	ldrh	r3, [r7, #8]
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	bf28      	it	cs
 8009dc0:	4613      	movcs	r3, r2
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009dc6:	893b      	ldrh	r3, [r7, #8]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	68f9      	ldr	r1, [r7, #12]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fa44 	bl	800a25a <USBD_CtlSendData>
 8009dd2:	e009      	b.n	8009de8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f9ce 	bl	800a178 <USBD_CtlError>
 8009ddc:	e004      	b.n	8009de8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 fa95 	bl	800a30e <USBD_CtlSendStatus>
 8009de4:	e000      	b.n	8009de8 <USBD_GetDescriptor+0x2cc>
    return;
 8009de6:	bf00      	nop
  }
}
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop

08009df0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	889b      	ldrh	r3, [r3, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d131      	bne.n	8009e66 <USBD_SetAddress+0x76>
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	88db      	ldrh	r3, [r3, #6]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d12d      	bne.n	8009e66 <USBD_SetAddress+0x76>
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	885b      	ldrh	r3, [r3, #2]
 8009e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8009e10:	d829      	bhi.n	8009e66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	885b      	ldrh	r3, [r3, #2]
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b03      	cmp	r3, #3
 8009e28:	d104      	bne.n	8009e34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f9a3 	bl	800a178 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e32:	e01d      	b.n	8009e70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	7bfa      	ldrb	r2, [r7, #15]
 8009e38:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f003 fbbf 	bl	800d5c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fa61 	bl	800a30e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d004      	beq.n	8009e5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2202      	movs	r2, #2
 8009e56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5a:	e009      	b.n	8009e70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e64:	e004      	b.n	8009e70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f985 	bl	800a178 <USBD_CtlError>
  }
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	885b      	ldrh	r3, [r3, #2]
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	4b4c      	ldr	r3, [pc, #304]	; (8009fc0 <USBD_SetConfig+0x148>)
 8009e8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e90:	4b4b      	ldr	r3, [pc, #300]	; (8009fc0 <USBD_SetConfig+0x148>)
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d905      	bls.n	8009ea4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f96c 	bl	800a178 <USBD_CtlError>
    return USBD_FAIL;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	e088      	b.n	8009fb6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d002      	beq.n	8009eb6 <USBD_SetConfig+0x3e>
 8009eb0:	2b03      	cmp	r3, #3
 8009eb2:	d025      	beq.n	8009f00 <USBD_SetConfig+0x88>
 8009eb4:	e071      	b.n	8009f9a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009eb6:	4b42      	ldr	r3, [pc, #264]	; (8009fc0 <USBD_SetConfig+0x148>)
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d01c      	beq.n	8009ef8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009ebe:	4b40      	ldr	r3, [pc, #256]	; (8009fc0 <USBD_SetConfig+0x148>)
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ec8:	4b3d      	ldr	r3, [pc, #244]	; (8009fc0 <USBD_SetConfig+0x148>)
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff f93a 	bl	8009148 <USBD_SetClassConfig>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d004      	beq.n	8009ee8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f949 	bl	800a178 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ee6:	e065      	b.n	8009fb4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fa10 	bl	800a30e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2203      	movs	r2, #3
 8009ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ef6:	e05d      	b.n	8009fb4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fa08 	bl	800a30e <USBD_CtlSendStatus>
      break;
 8009efe:	e059      	b.n	8009fb4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f00:	4b2f      	ldr	r3, [pc, #188]	; (8009fc0 <USBD_SetConfig+0x148>)
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d112      	bne.n	8009f2e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009f10:	4b2b      	ldr	r3, [pc, #172]	; (8009fc0 <USBD_SetConfig+0x148>)
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	461a      	mov	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f1a:	4b29      	ldr	r3, [pc, #164]	; (8009fc0 <USBD_SetConfig+0x148>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7ff f92d 	bl	8009180 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f9f1 	bl	800a30e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f2c:	e042      	b.n	8009fb4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009f2e:	4b24      	ldr	r3, [pc, #144]	; (8009fc0 <USBD_SetConfig+0x148>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d02a      	beq.n	8009f92 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	4619      	mov	r1, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff f91b 	bl	8009180 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009f4a:	4b1d      	ldr	r3, [pc, #116]	; (8009fc0 <USBD_SetConfig+0x148>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f54:	4b1a      	ldr	r3, [pc, #104]	; (8009fc0 <USBD_SetConfig+0x148>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7ff f8f4 	bl	8009148 <USBD_SetClassConfig>
 8009f60:	4603      	mov	r3, r0
 8009f62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009f64:	7bfb      	ldrb	r3, [r7, #15]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00f      	beq.n	8009f8a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f903 	bl	800a178 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7ff f900 	bl	8009180 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2202      	movs	r2, #2
 8009f84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f88:	e014      	b.n	8009fb4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f9bf 	bl	800a30e <USBD_CtlSendStatus>
      break;
 8009f90:	e010      	b.n	8009fb4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f9bb 	bl	800a30e <USBD_CtlSendStatus>
      break;
 8009f98:	e00c      	b.n	8009fb4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f8eb 	bl	800a178 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009fa2:	4b07      	ldr	r3, [pc, #28]	; (8009fc0 <USBD_SetConfig+0x148>)
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7ff f8e9 	bl	8009180 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8009fb2:	bf00      	nop
  }

  return ret;
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20000ad0 	.word	0x20000ad0

08009fc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	88db      	ldrh	r3, [r3, #6]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d004      	beq.n	8009fe0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f8cd 	bl	800a178 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009fde:	e023      	b.n	800a028 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	dc02      	bgt.n	8009ff2 <USBD_GetConfig+0x2e>
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	dc03      	bgt.n	8009ff8 <USBD_GetConfig+0x34>
 8009ff0:	e015      	b.n	800a01e <USBD_GetConfig+0x5a>
 8009ff2:	2b03      	cmp	r3, #3
 8009ff4:	d00b      	beq.n	800a00e <USBD_GetConfig+0x4a>
 8009ff6:	e012      	b.n	800a01e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	3308      	adds	r3, #8
 800a002:	2201      	movs	r2, #1
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f927 	bl	800a25a <USBD_CtlSendData>
        break;
 800a00c:	e00c      	b.n	800a028 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	3304      	adds	r3, #4
 800a012:	2201      	movs	r2, #1
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f91f 	bl	800a25a <USBD_CtlSendData>
        break;
 800a01c:	e004      	b.n	800a028 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f8a9 	bl	800a178 <USBD_CtlError>
        break;
 800a026:	bf00      	nop
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a040:	b2db      	uxtb	r3, r3
 800a042:	3b01      	subs	r3, #1
 800a044:	2b02      	cmp	r3, #2
 800a046:	d81e      	bhi.n	800a086 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	88db      	ldrh	r3, [r3, #6]
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d004      	beq.n	800a05a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f890 	bl	800a178 <USBD_CtlError>
        break;
 800a058:	e01a      	b.n	800a090 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a066:	2b00      	cmp	r3, #0
 800a068:	d005      	beq.n	800a076 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	f043 0202 	orr.w	r2, r3, #2
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	330c      	adds	r3, #12
 800a07a:	2202      	movs	r2, #2
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f8eb 	bl	800a25a <USBD_CtlSendData>
      break;
 800a084:	e004      	b.n	800a090 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f875 	bl	800a178 <USBD_CtlError>
      break;
 800a08e:	bf00      	nop
  }
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	885b      	ldrh	r3, [r3, #2]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d106      	bne.n	800a0b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f92b 	bl	800a30e <USBD_CtlSendStatus>
  }
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d80b      	bhi.n	800a0f0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	885b      	ldrh	r3, [r3, #2]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d10c      	bne.n	800a0fa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f910 	bl	800a30e <USBD_CtlSendStatus>
      }
      break;
 800a0ee:	e004      	b.n	800a0fa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f840 	bl	800a178 <USBD_CtlError>
      break;
 800a0f8:	e000      	b.n	800a0fc <USBD_ClrFeature+0x3c>
      break;
 800a0fa:	bf00      	nop
  }
}
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	781a      	ldrb	r2, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	3301      	adds	r3, #1
 800a11e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	781a      	ldrb	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3301      	adds	r3, #1
 800a12c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7ff faad 	bl	800968e <SWAPBYTE>
 800a134:	4603      	mov	r3, r0
 800a136:	461a      	mov	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3301      	adds	r3, #1
 800a140:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	3301      	adds	r3, #1
 800a146:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f7ff faa0 	bl	800968e <SWAPBYTE>
 800a14e:	4603      	mov	r3, r0
 800a150:	461a      	mov	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	3301      	adds	r3, #1
 800a15a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	3301      	adds	r3, #1
 800a160:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f7ff fa93 	bl	800968e <SWAPBYTE>
 800a168:	4603      	mov	r3, r0
 800a16a:	461a      	mov	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	80da      	strh	r2, [r3, #6]
}
 800a170:	bf00      	nop
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a182:	2180      	movs	r1, #128	; 0x80
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f003 f9b3 	bl	800d4f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a18a:	2100      	movs	r1, #0
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f003 f9af 	bl	800d4f0 <USBD_LL_StallEP>
}
 800a192:	bf00      	nop
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b086      	sub	sp, #24
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	60f8      	str	r0, [r7, #12]
 800a1a2:	60b9      	str	r1, [r7, #8]
 800a1a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d036      	beq.n	800a21e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a1b4:	6938      	ldr	r0, [r7, #16]
 800a1b6:	f000 f836 	bl	800a226 <USBD_GetLen>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	3301      	adds	r3, #1
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a1c8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	7812      	ldrb	r2, [r2, #0]
 800a1d2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a1d4:	7dfb      	ldrb	r3, [r7, #23]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a1da:	7dfb      	ldrb	r3, [r7, #23]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	4413      	add	r3, r2
 800a1e0:	2203      	movs	r2, #3
 800a1e2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a1e4:	7dfb      	ldrb	r3, [r7, #23]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a1ea:	e013      	b.n	800a214 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	7812      	ldrb	r2, [r2, #0]
 800a1f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	613b      	str	r3, [r7, #16]
    idx++;
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
 800a200:	3301      	adds	r3, #1
 800a202:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a204:	7dfb      	ldrb	r3, [r7, #23]
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	4413      	add	r3, r2
 800a20a:	2200      	movs	r2, #0
 800a20c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
 800a210:	3301      	adds	r3, #1
 800a212:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e7      	bne.n	800a1ec <USBD_GetString+0x52>
 800a21c:	e000      	b.n	800a220 <USBD_GetString+0x86>
    return;
 800a21e:	bf00      	nop
  }
}
 800a220:	3718      	adds	r7, #24
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a226:	b480      	push	{r7}
 800a228:	b085      	sub	sp, #20
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a22e:	2300      	movs	r3, #0
 800a230:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a236:	e005      	b.n	800a244 <USBD_GetLen+0x1e>
  {
    len++;
 800a238:	7bfb      	ldrb	r3, [r7, #15]
 800a23a:	3301      	adds	r3, #1
 800a23c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	3301      	adds	r3, #1
 800a242:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1f5      	bne.n	800a238 <USBD_GetLen+0x12>
  }

  return len;
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b084      	sub	sp, #16
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	60b9      	str	r1, [r7, #8]
 800a264:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2202      	movs	r2, #2
 800a26a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	2100      	movs	r1, #0
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f003 f9be 	bl	800d602 <USBD_LL_Transmit>

  return USBD_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f003 f9ad 	bl	800d602 <USBD_LL_Transmit>

  return USBD_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	60f8      	str	r0, [r7, #12]
 800a2ba:	60b9      	str	r1, [r7, #8]
 800a2bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	2100      	movs	r1, #0
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f003 f9b1 	bl	800d644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f003 f9a0 	bl	800d644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2204      	movs	r2, #4
 800a31a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a31e:	2300      	movs	r3, #0
 800a320:	2200      	movs	r2, #0
 800a322:	2100      	movs	r1, #0
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f003 f96c 	bl	800d602 <USBD_LL_Transmit>

  return USBD_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2205      	movs	r2, #5
 800a340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a344:	2300      	movs	r3, #0
 800a346:	2200      	movs	r2, #0
 800a348:	2100      	movs	r1, #0
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f003 f97a 	bl	800d644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
	...

0800a35c <__NVIC_SetPriority>:
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	6039      	str	r1, [r7, #0]
 800a366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	db0a      	blt.n	800a386 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	b2da      	uxtb	r2, r3
 800a374:	490c      	ldr	r1, [pc, #48]	; (800a3a8 <__NVIC_SetPriority+0x4c>)
 800a376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a37a:	0112      	lsls	r2, r2, #4
 800a37c:	b2d2      	uxtb	r2, r2
 800a37e:	440b      	add	r3, r1
 800a380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a384:	e00a      	b.n	800a39c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	4908      	ldr	r1, [pc, #32]	; (800a3ac <__NVIC_SetPriority+0x50>)
 800a38c:	79fb      	ldrb	r3, [r7, #7]
 800a38e:	f003 030f 	and.w	r3, r3, #15
 800a392:	3b04      	subs	r3, #4
 800a394:	0112      	lsls	r2, r2, #4
 800a396:	b2d2      	uxtb	r2, r2
 800a398:	440b      	add	r3, r1
 800a39a:	761a      	strb	r2, [r3, #24]
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	e000e100 	.word	0xe000e100
 800a3ac:	e000ed00 	.word	0xe000ed00

0800a3b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a3b4:	4b05      	ldr	r3, [pc, #20]	; (800a3cc <SysTick_Handler+0x1c>)
 800a3b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a3b8:	f001 fcfe 	bl	800bdb8 <xTaskGetSchedulerState>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d001      	beq.n	800a3c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a3c2:	f002 fae9 	bl	800c998 <xPortSysTickHandler>
  }
}
 800a3c6:	bf00      	nop
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	e000e010 	.word	0xe000e010

0800a3d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	f06f 0004 	mvn.w	r0, #4
 800a3da:	f7ff ffbf 	bl	800a35c <__NVIC_SetPriority>
#endif
}
 800a3de:	bf00      	nop
 800a3e0:	bd80      	pop	{r7, pc}
	...

0800a3e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3ea:	f3ef 8305 	mrs	r3, IPSR
 800a3ee:	603b      	str	r3, [r7, #0]
  return(result);
 800a3f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a3f6:	f06f 0305 	mvn.w	r3, #5
 800a3fa:	607b      	str	r3, [r7, #4]
 800a3fc:	e00c      	b.n	800a418 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a3fe:	4b0a      	ldr	r3, [pc, #40]	; (800a428 <osKernelInitialize+0x44>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d105      	bne.n	800a412 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a406:	4b08      	ldr	r3, [pc, #32]	; (800a428 <osKernelInitialize+0x44>)
 800a408:	2201      	movs	r2, #1
 800a40a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	607b      	str	r3, [r7, #4]
 800a410:	e002      	b.n	800a418 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a412:	f04f 33ff 	mov.w	r3, #4294967295
 800a416:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a418:	687b      	ldr	r3, [r7, #4]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	20000ad4 	.word	0x20000ad4

0800a42c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a432:	f3ef 8305 	mrs	r3, IPSR
 800a436:	603b      	str	r3, [r7, #0]
  return(result);
 800a438:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a43e:	f06f 0305 	mvn.w	r3, #5
 800a442:	607b      	str	r3, [r7, #4]
 800a444:	e010      	b.n	800a468 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a446:	4b0b      	ldr	r3, [pc, #44]	; (800a474 <osKernelStart+0x48>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d109      	bne.n	800a462 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a44e:	f7ff ffbf 	bl	800a3d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a452:	4b08      	ldr	r3, [pc, #32]	; (800a474 <osKernelStart+0x48>)
 800a454:	2202      	movs	r2, #2
 800a456:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a458:	f001 f866 	bl	800b528 <vTaskStartScheduler>
      stat = osOK;
 800a45c:	2300      	movs	r3, #0
 800a45e:	607b      	str	r3, [r7, #4]
 800a460:	e002      	b.n	800a468 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a462:	f04f 33ff 	mov.w	r3, #4294967295
 800a466:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a468:	687b      	ldr	r3, [r7, #4]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	20000ad4 	.word	0x20000ad4

0800a478 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08e      	sub	sp, #56	; 0x38
 800a47c:	af04      	add	r7, sp, #16
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a484:	2300      	movs	r3, #0
 800a486:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a488:	f3ef 8305 	mrs	r3, IPSR
 800a48c:	617b      	str	r3, [r7, #20]
  return(result);
 800a48e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a490:	2b00      	cmp	r3, #0
 800a492:	d17e      	bne.n	800a592 <osThreadNew+0x11a>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d07b      	beq.n	800a592 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a49a:	2380      	movs	r3, #128	; 0x80
 800a49c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a49e:	2318      	movs	r3, #24
 800a4a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d045      	beq.n	800a53e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d002      	beq.n	800a4c0 <osThreadNew+0x48>
        name = attr->name;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d008      	beq.n	800a4e6 <osThreadNew+0x6e>
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	2b38      	cmp	r3, #56	; 0x38
 800a4d8:	d805      	bhi.n	800a4e6 <osThreadNew+0x6e>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	f003 0301 	and.w	r3, r3, #1
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d001      	beq.n	800a4ea <osThreadNew+0x72>
        return (NULL);
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	e054      	b.n	800a594 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d003      	beq.n	800a4fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	089b      	lsrs	r3, r3, #2
 800a4f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00e      	beq.n	800a520 <osThreadNew+0xa8>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	2b5b      	cmp	r3, #91	; 0x5b
 800a508:	d90a      	bls.n	800a520 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d006      	beq.n	800a520 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <osThreadNew+0xa8>
        mem = 1;
 800a51a:	2301      	movs	r3, #1
 800a51c:	61bb      	str	r3, [r7, #24]
 800a51e:	e010      	b.n	800a542 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10c      	bne.n	800a542 <osThreadNew+0xca>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d108      	bne.n	800a542 <osThreadNew+0xca>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d104      	bne.n	800a542 <osThreadNew+0xca>
          mem = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	61bb      	str	r3, [r7, #24]
 800a53c:	e001      	b.n	800a542 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d110      	bne.n	800a56a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a550:	9202      	str	r2, [sp, #8]
 800a552:	9301      	str	r3, [sp, #4]
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	6a3a      	ldr	r2, [r7, #32]
 800a55c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f000 fe0c 	bl	800b17c <xTaskCreateStatic>
 800a564:	4603      	mov	r3, r0
 800a566:	613b      	str	r3, [r7, #16]
 800a568:	e013      	b.n	800a592 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d110      	bne.n	800a592 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a570:	6a3b      	ldr	r3, [r7, #32]
 800a572:	b29a      	uxth	r2, r3
 800a574:	f107 0310 	add.w	r3, r7, #16
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f000 fe57 	bl	800b236 <xTaskCreate>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d001      	beq.n	800a592 <osThreadNew+0x11a>
            hTask = NULL;
 800a58e:	2300      	movs	r3, #0
 800a590:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a592:	693b      	ldr	r3, [r7, #16]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3728      	adds	r7, #40	; 0x28
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5a4:	f3ef 8305 	mrs	r3, IPSR
 800a5a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d003      	beq.n	800a5b8 <osDelay+0x1c>
    stat = osErrorISR;
 800a5b0:	f06f 0305 	mvn.w	r3, #5
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	e007      	b.n	800a5c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d002      	beq.n	800a5c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 ff7c 	bl	800b4c0 <vTaskDelay>
    }
  }

  return (stat);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	4a07      	ldr	r2, [pc, #28]	; (800a600 <vApplicationGetIdleTaskMemory+0x2c>)
 800a5e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	4a06      	ldr	r2, [pc, #24]	; (800a604 <vApplicationGetIdleTaskMemory+0x30>)
 800a5ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2280      	movs	r2, #128	; 0x80
 800a5f0:	601a      	str	r2, [r3, #0]
}
 800a5f2:	bf00      	nop
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	20000ad8 	.word	0x20000ad8
 800a604:	20000b34 	.word	0x20000b34

0800a608 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	4a07      	ldr	r2, [pc, #28]	; (800a634 <vApplicationGetTimerTaskMemory+0x2c>)
 800a618:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	4a06      	ldr	r2, [pc, #24]	; (800a638 <vApplicationGetTimerTaskMemory+0x30>)
 800a61e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a626:	601a      	str	r2, [r3, #0]
}
 800a628:	bf00      	nop
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	20000d34 	.word	0x20000d34
 800a638:	20000d90 	.word	0x20000d90

0800a63c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f103 0208 	add.w	r2, r3, #8
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f04f 32ff 	mov.w	r2, #4294967295
 800a654:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f103 0208 	add.w	r2, r3, #8
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f103 0208 	add.w	r2, r3, #8
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a68a:	bf00      	nop
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a696:	b480      	push	{r7}
 800a698:	b085      	sub	sp, #20
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	689a      	ldr	r2, [r3, #8]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	1c5a      	adds	r2, r3, #1
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	601a      	str	r2, [r3, #0]
}
 800a6d2:	bf00      	nop
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b085      	sub	sp, #20
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f4:	d103      	bne.n	800a6fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	e00c      	b.n	800a718 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	3308      	adds	r3, #8
 800a702:	60fb      	str	r3, [r7, #12]
 800a704:	e002      	b.n	800a70c <vListInsert+0x2e>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	429a      	cmp	r2, r3
 800a716:	d2f6      	bcs.n	800a706 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	683a      	ldr	r2, [r7, #0]
 800a732:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	1c5a      	adds	r2, r3, #1
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	601a      	str	r2, [r3, #0]
}
 800a744:	bf00      	nop
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	6892      	ldr	r2, [r2, #8]
 800a766:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	6852      	ldr	r2, [r2, #4]
 800a770:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d103      	bne.n	800a784 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	689a      	ldr	r2, [r3, #8]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	1e5a      	subs	r2, r3, #1
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10a      	bne.n	800a7ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7bc:	f383 8811 	msr	BASEPRI, r3
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a7ca:	bf00      	nop
 800a7cc:	e7fe      	b.n	800a7cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a7ce:	f002 f851 	bl	800c874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7da:	68f9      	ldr	r1, [r7, #12]
 800a7dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a7de:	fb01 f303 	mul.w	r3, r1, r3
 800a7e2:	441a      	add	r2, r3
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fe:	3b01      	subs	r3, #1
 800a800:	68f9      	ldr	r1, [r7, #12]
 800a802:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a804:	fb01 f303 	mul.w	r3, r1, r3
 800a808:	441a      	add	r2, r3
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	22ff      	movs	r2, #255	; 0xff
 800a812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	22ff      	movs	r2, #255	; 0xff
 800a81a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d114      	bne.n	800a84e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d01a      	beq.n	800a862 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	3310      	adds	r3, #16
 800a830:	4618      	mov	r0, r3
 800a832:	f001 f903 	bl	800ba3c <xTaskRemoveFromEventList>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d012      	beq.n	800a862 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a83c:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <xQueueGenericReset+0xcc>)
 800a83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	e009      	b.n	800a862 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	3310      	adds	r3, #16
 800a852:	4618      	mov	r0, r3
 800a854:	f7ff fef2 	bl	800a63c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3324      	adds	r3, #36	; 0x24
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7ff feed 	bl	800a63c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a862:	f002 f837 	bl	800c8d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a866:	2301      	movs	r3, #1
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	e000ed04 	.word	0xe000ed04

0800a874 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a874:	b580      	push	{r7, lr}
 800a876:	b08e      	sub	sp, #56	; 0x38
 800a878:	af02      	add	r7, sp, #8
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
 800a880:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10a      	bne.n	800a89e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a89a:	bf00      	nop
 800a89c:	e7fe      	b.n	800a89c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10a      	bne.n	800a8ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8b6:	bf00      	nop
 800a8b8:	e7fe      	b.n	800a8b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <xQueueGenericCreateStatic+0x52>
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <xQueueGenericCreateStatic+0x56>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e000      	b.n	800a8cc <xQueueGenericCreateStatic+0x58>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	623b      	str	r3, [r7, #32]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d102      	bne.n	800a8f2 <xQueueGenericCreateStatic+0x7e>
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <xQueueGenericCreateStatic+0x82>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e000      	b.n	800a8f8 <xQueueGenericCreateStatic+0x84>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10a      	bne.n	800a912 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	61fb      	str	r3, [r7, #28]
}
 800a90e:	bf00      	nop
 800a910:	e7fe      	b.n	800a910 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a912:	2350      	movs	r3, #80	; 0x50
 800a914:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	2b50      	cmp	r3, #80	; 0x50
 800a91a:	d00a      	beq.n	800a932 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a920:	f383 8811 	msr	BASEPRI, r3
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	61bb      	str	r3, [r7, #24]
}
 800a92e:	bf00      	nop
 800a930:	e7fe      	b.n	800a930 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a932:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00d      	beq.n	800a95a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a946:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	4613      	mov	r3, r2
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	68b9      	ldr	r1, [r7, #8]
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f000 f805 	bl	800a964 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3730      	adds	r7, #48	; 0x30
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
 800a970:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d103      	bne.n	800a980 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	69ba      	ldr	r2, [r7, #24]
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	e002      	b.n	800a986 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a992:	2101      	movs	r1, #1
 800a994:	69b8      	ldr	r0, [r7, #24]
 800a996:	f7ff ff05 	bl	800a7a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	78fa      	ldrb	r2, [r7, #3]
 800a99e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a9a2:	bf00      	nop
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
	...

0800a9ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08e      	sub	sp, #56	; 0x38
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10a      	bne.n	800a9de <xQueueGenericSend+0x32>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a9da:	bf00      	nop
 800a9dc:	e7fe      	b.n	800a9dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d103      	bne.n	800a9ec <xQueueGenericSend+0x40>
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d101      	bne.n	800a9f0 <xQueueGenericSend+0x44>
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e000      	b.n	800a9f2 <xQueueGenericSend+0x46>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10a      	bne.n	800aa0c <xQueueGenericSend+0x60>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d103      	bne.n	800aa1a <xQueueGenericSend+0x6e>
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d101      	bne.n	800aa1e <xQueueGenericSend+0x72>
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e000      	b.n	800aa20 <xQueueGenericSend+0x74>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10a      	bne.n	800aa3a <xQueueGenericSend+0x8e>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	623b      	str	r3, [r7, #32]
}
 800aa36:	bf00      	nop
 800aa38:	e7fe      	b.n	800aa38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa3a:	f001 f9bd 	bl	800bdb8 <xTaskGetSchedulerState>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d102      	bne.n	800aa4a <xQueueGenericSend+0x9e>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d101      	bne.n	800aa4e <xQueueGenericSend+0xa2>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e000      	b.n	800aa50 <xQueueGenericSend+0xa4>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10a      	bne.n	800aa6a <xQueueGenericSend+0xbe>
	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	61fb      	str	r3, [r7, #28]
}
 800aa66:	bf00      	nop
 800aa68:	e7fe      	b.n	800aa68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa6a:	f001 ff03 	bl	800c874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d302      	bcc.n	800aa80 <xQueueGenericSend+0xd4>
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d129      	bne.n	800aad4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	68b9      	ldr	r1, [r7, #8]
 800aa84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa86:	f000 fa0b 	bl	800aea0 <prvCopyDataToQueue>
 800aa8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d010      	beq.n	800aab6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa96:	3324      	adds	r3, #36	; 0x24
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f000 ffcf 	bl	800ba3c <xTaskRemoveFromEventList>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d013      	beq.n	800aacc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aaa4:	4b3f      	ldr	r3, [pc, #252]	; (800aba4 <xQueueGenericSend+0x1f8>)
 800aaa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaaa:	601a      	str	r2, [r3, #0]
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	f3bf 8f6f 	isb	sy
 800aab4:	e00a      	b.n	800aacc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d007      	beq.n	800aacc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aabc:	4b39      	ldr	r3, [pc, #228]	; (800aba4 <xQueueGenericSend+0x1f8>)
 800aabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aacc:	f001 ff02 	bl	800c8d4 <vPortExitCritical>
				return pdPASS;
 800aad0:	2301      	movs	r3, #1
 800aad2:	e063      	b.n	800ab9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d103      	bne.n	800aae2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aada:	f001 fefb 	bl	800c8d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aade:	2300      	movs	r3, #0
 800aae0:	e05c      	b.n	800ab9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d106      	bne.n	800aaf6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aae8:	f107 0314 	add.w	r3, r7, #20
 800aaec:	4618      	mov	r0, r3
 800aaee:	f001 f809 	bl	800bb04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aaf6:	f001 feed 	bl	800c8d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aafa:	f000 fd7b 	bl	800b5f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aafe:	f001 feb9 	bl	800c874 <vPortEnterCritical>
 800ab02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab08:	b25b      	sxtb	r3, r3
 800ab0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0e:	d103      	bne.n	800ab18 <xQueueGenericSend+0x16c>
 800ab10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab1e:	b25b      	sxtb	r3, r3
 800ab20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab24:	d103      	bne.n	800ab2e <xQueueGenericSend+0x182>
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab2e:	f001 fed1 	bl	800c8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab32:	1d3a      	adds	r2, r7, #4
 800ab34:	f107 0314 	add.w	r3, r7, #20
 800ab38:	4611      	mov	r1, r2
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 fff8 	bl	800bb30 <xTaskCheckForTimeOut>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d124      	bne.n	800ab90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ab46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab48:	f000 faa2 	bl	800b090 <prvIsQueueFull>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d018      	beq.n	800ab84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab54:	3310      	adds	r3, #16
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	4611      	mov	r1, r2
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 ff1e 	bl	800b99c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab62:	f000 fa2d 	bl	800afc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab66:	f000 fd53 	bl	800b610 <xTaskResumeAll>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f47f af7c 	bne.w	800aa6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ab72:	4b0c      	ldr	r3, [pc, #48]	; (800aba4 <xQueueGenericSend+0x1f8>)
 800ab74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	e772      	b.n	800aa6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab86:	f000 fa1b 	bl	800afc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab8a:	f000 fd41 	bl	800b610 <xTaskResumeAll>
 800ab8e:	e76c      	b.n	800aa6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab92:	f000 fa15 	bl	800afc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab96:	f000 fd3b 	bl	800b610 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3738      	adds	r7, #56	; 0x38
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b090      	sub	sp, #64	; 0x40
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800abba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10a      	bne.n	800abd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abd2:	bf00      	nop
 800abd4:	e7fe      	b.n	800abd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d103      	bne.n	800abe4 <xQueueGenericSendFromISR+0x3c>
 800abdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d101      	bne.n	800abe8 <xQueueGenericSendFromISR+0x40>
 800abe4:	2301      	movs	r3, #1
 800abe6:	e000      	b.n	800abea <xQueueGenericSendFromISR+0x42>
 800abe8:	2300      	movs	r3, #0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10a      	bne.n	800ac04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac00:	bf00      	nop
 800ac02:	e7fe      	b.n	800ac02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d103      	bne.n	800ac12 <xQueueGenericSendFromISR+0x6a>
 800ac0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d101      	bne.n	800ac16 <xQueueGenericSendFromISR+0x6e>
 800ac12:	2301      	movs	r3, #1
 800ac14:	e000      	b.n	800ac18 <xQueueGenericSendFromISR+0x70>
 800ac16:	2300      	movs	r3, #0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10a      	bne.n	800ac32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	623b      	str	r3, [r7, #32]
}
 800ac2e:	bf00      	nop
 800ac30:	e7fe      	b.n	800ac30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac32:	f001 ff01 	bl	800ca38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ac36:	f3ef 8211 	mrs	r2, BASEPRI
 800ac3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	61fa      	str	r2, [r7, #28]
 800ac4c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ac4e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac50:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d302      	bcc.n	800ac64 <xQueueGenericSendFromISR+0xbc>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d12f      	bne.n	800acc4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac72:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac74:	683a      	ldr	r2, [r7, #0]
 800ac76:	68b9      	ldr	r1, [r7, #8]
 800ac78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac7a:	f000 f911 	bl	800aea0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ac82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac86:	d112      	bne.n	800acae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d016      	beq.n	800acbe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac92:	3324      	adds	r3, #36	; 0x24
 800ac94:	4618      	mov	r0, r3
 800ac96:	f000 fed1 	bl	800ba3c <xTaskRemoveFromEventList>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00e      	beq.n	800acbe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00b      	beq.n	800acbe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2201      	movs	r2, #1
 800acaa:	601a      	str	r2, [r3, #0]
 800acac:	e007      	b.n	800acbe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800acae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800acb2:	3301      	adds	r3, #1
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	b25a      	sxtb	r2, r3
 800acb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800acbe:	2301      	movs	r3, #1
 800acc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800acc2:	e001      	b.n	800acc8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800acc4:	2300      	movs	r3, #0
 800acc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800acd2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800acd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3740      	adds	r7, #64	; 0x40
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
	...

0800ace0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08c      	sub	sp, #48	; 0x30
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800acec:	2300      	movs	r3, #0
 800acee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10a      	bne.n	800ad10 <xQueueReceive+0x30>
	__asm volatile
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	623b      	str	r3, [r7, #32]
}
 800ad0c:	bf00      	nop
 800ad0e:	e7fe      	b.n	800ad0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d103      	bne.n	800ad1e <xQueueReceive+0x3e>
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <xQueueReceive+0x42>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e000      	b.n	800ad24 <xQueueReceive+0x44>
 800ad22:	2300      	movs	r3, #0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10a      	bne.n	800ad3e <xQueueReceive+0x5e>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	61fb      	str	r3, [r7, #28]
}
 800ad3a:	bf00      	nop
 800ad3c:	e7fe      	b.n	800ad3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad3e:	f001 f83b 	bl	800bdb8 <xTaskGetSchedulerState>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d102      	bne.n	800ad4e <xQueueReceive+0x6e>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <xQueueReceive+0x72>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e000      	b.n	800ad54 <xQueueReceive+0x74>
 800ad52:	2300      	movs	r3, #0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10a      	bne.n	800ad6e <xQueueReceive+0x8e>
	__asm volatile
 800ad58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5c:	f383 8811 	msr	BASEPRI, r3
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	61bb      	str	r3, [r7, #24]
}
 800ad6a:	bf00      	nop
 800ad6c:	e7fe      	b.n	800ad6c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad6e:	f001 fd81 	bl	800c874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d01f      	beq.n	800adbe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad7e:	68b9      	ldr	r1, [r7, #8]
 800ad80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad82:	f000 f8f7 	bl	800af74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	1e5a      	subs	r2, r3, #1
 800ad8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00f      	beq.n	800adb6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad98:	3310      	adds	r3, #16
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 fe4e 	bl	800ba3c <xTaskRemoveFromEventList>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d007      	beq.n	800adb6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ada6:	4b3d      	ldr	r3, [pc, #244]	; (800ae9c <xQueueReceive+0x1bc>)
 800ada8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adb6:	f001 fd8d 	bl	800c8d4 <vPortExitCritical>
				return pdPASS;
 800adba:	2301      	movs	r3, #1
 800adbc:	e069      	b.n	800ae92 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d103      	bne.n	800adcc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800adc4:	f001 fd86 	bl	800c8d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800adc8:	2300      	movs	r3, #0
 800adca:	e062      	b.n	800ae92 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	2b00      	cmp	r3, #0
 800add0:	d106      	bne.n	800ade0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800add2:	f107 0310 	add.w	r3, r7, #16
 800add6:	4618      	mov	r0, r3
 800add8:	f000 fe94 	bl	800bb04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800addc:	2301      	movs	r3, #1
 800adde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ade0:	f001 fd78 	bl	800c8d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ade4:	f000 fc06 	bl	800b5f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ade8:	f001 fd44 	bl	800c874 <vPortEnterCritical>
 800adec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adf2:	b25b      	sxtb	r3, r3
 800adf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf8:	d103      	bne.n	800ae02 <xQueueReceive+0x122>
 800adfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae08:	b25b      	sxtb	r3, r3
 800ae0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0e:	d103      	bne.n	800ae18 <xQueueReceive+0x138>
 800ae10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae18:	f001 fd5c 	bl	800c8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae1c:	1d3a      	adds	r2, r7, #4
 800ae1e:	f107 0310 	add.w	r3, r7, #16
 800ae22:	4611      	mov	r1, r2
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 fe83 	bl	800bb30 <xTaskCheckForTimeOut>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d123      	bne.n	800ae78 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae32:	f000 f917 	bl	800b064 <prvIsQueueEmpty>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d017      	beq.n	800ae6c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3e:	3324      	adds	r3, #36	; 0x24
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	4611      	mov	r1, r2
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fda9 	bl	800b99c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae4c:	f000 f8b8 	bl	800afc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae50:	f000 fbde 	bl	800b610 <xTaskResumeAll>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d189      	bne.n	800ad6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ae5a:	4b10      	ldr	r3, [pc, #64]	; (800ae9c <xQueueReceive+0x1bc>)
 800ae5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae60:	601a      	str	r2, [r3, #0]
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	e780      	b.n	800ad6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae6e:	f000 f8a7 	bl	800afc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae72:	f000 fbcd 	bl	800b610 <xTaskResumeAll>
 800ae76:	e77a      	b.n	800ad6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae7a:	f000 f8a1 	bl	800afc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae7e:	f000 fbc7 	bl	800b610 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae84:	f000 f8ee 	bl	800b064 <prvIsQueueEmpty>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f43f af6f 	beq.w	800ad6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3730      	adds	r7, #48	; 0x30
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	e000ed04 	.word	0xe000ed04

0800aea0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aeac:	2300      	movs	r3, #0
 800aeae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10d      	bne.n	800aeda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d14d      	bne.n	800af62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 ff92 	bl	800bdf4 <xTaskPriorityDisinherit>
 800aed0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	609a      	str	r2, [r3, #8]
 800aed8:	e043      	b.n	800af62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d119      	bne.n	800af14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6858      	ldr	r0, [r3, #4]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee8:	461a      	mov	r2, r3
 800aeea:	68b9      	ldr	r1, [r7, #8]
 800aeec:	f009 fb20 	bl	8014530 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef8:	441a      	add	r2, r3
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	429a      	cmp	r2, r3
 800af08:	d32b      	bcc.n	800af62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	605a      	str	r2, [r3, #4]
 800af12:	e026      	b.n	800af62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	68d8      	ldr	r0, [r3, #12]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1c:	461a      	mov	r2, r3
 800af1e:	68b9      	ldr	r1, [r7, #8]
 800af20:	f009 fb06 	bl	8014530 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	68da      	ldr	r2, [r3, #12]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2c:	425b      	negs	r3, r3
 800af2e:	441a      	add	r2, r3
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	68da      	ldr	r2, [r3, #12]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d207      	bcs.n	800af50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	689a      	ldr	r2, [r3, #8]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af48:	425b      	negs	r3, r3
 800af4a:	441a      	add	r2, r3
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2b02      	cmp	r3, #2
 800af54:	d105      	bne.n	800af62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	3b01      	subs	r3, #1
 800af60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800af6a:	697b      	ldr	r3, [r7, #20]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af82:	2b00      	cmp	r3, #0
 800af84:	d018      	beq.n	800afb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68da      	ldr	r2, [r3, #12]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8e:	441a      	add	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68da      	ldr	r2, [r3, #12]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d303      	bcc.n	800afa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	68d9      	ldr	r1, [r3, #12]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb0:	461a      	mov	r2, r3
 800afb2:	6838      	ldr	r0, [r7, #0]
 800afb4:	f009 fabc 	bl	8014530 <memcpy>
	}
}
 800afb8:	bf00      	nop
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800afc8:	f001 fc54 	bl	800c874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afd4:	e011      	b.n	800affa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d012      	beq.n	800b004 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3324      	adds	r3, #36	; 0x24
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 fd2a 	bl	800ba3c <xTaskRemoveFromEventList>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800afee:	f000 fe01 	bl	800bbf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aff2:	7bfb      	ldrb	r3, [r7, #15]
 800aff4:	3b01      	subs	r3, #1
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800affa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800affe:	2b00      	cmp	r3, #0
 800b000:	dce9      	bgt.n	800afd6 <prvUnlockQueue+0x16>
 800b002:	e000      	b.n	800b006 <prvUnlockQueue+0x46>
					break;
 800b004:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	22ff      	movs	r2, #255	; 0xff
 800b00a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b00e:	f001 fc61 	bl	800c8d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b012:	f001 fc2f 	bl	800c874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b01c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b01e:	e011      	b.n	800b044 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d012      	beq.n	800b04e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	3310      	adds	r3, #16
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 fd05 	bl	800ba3c <xTaskRemoveFromEventList>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d001      	beq.n	800b03c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b038:	f000 fddc 	bl	800bbf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
 800b03e:	3b01      	subs	r3, #1
 800b040:	b2db      	uxtb	r3, r3
 800b042:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	dce9      	bgt.n	800b020 <prvUnlockQueue+0x60>
 800b04c:	e000      	b.n	800b050 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b04e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	22ff      	movs	r2, #255	; 0xff
 800b054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b058:	f001 fc3c 	bl	800c8d4 <vPortExitCritical>
}
 800b05c:	bf00      	nop
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b06c:	f001 fc02 	bl	800c874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b074:	2b00      	cmp	r3, #0
 800b076:	d102      	bne.n	800b07e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b078:	2301      	movs	r3, #1
 800b07a:	60fb      	str	r3, [r7, #12]
 800b07c:	e001      	b.n	800b082 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b07e:	2300      	movs	r3, #0
 800b080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b082:	f001 fc27 	bl	800c8d4 <vPortExitCritical>

	return xReturn;
 800b086:	68fb      	ldr	r3, [r7, #12]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b098:	f001 fbec 	bl	800c874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d102      	bne.n	800b0ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	60fb      	str	r3, [r7, #12]
 800b0ac:	e001      	b.n	800b0b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0b2:	f001 fc0f 	bl	800c8d4 <vPortExitCritical>

	return xReturn;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3710      	adds	r7, #16
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	e014      	b.n	800b0fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b0d0:	4a0f      	ldr	r2, [pc, #60]	; (800b110 <vQueueAddToRegistry+0x50>)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10b      	bne.n	800b0f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b0dc:	490c      	ldr	r1, [pc, #48]	; (800b110 <vQueueAddToRegistry+0x50>)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b0e6:	4a0a      	ldr	r2, [pc, #40]	; (800b110 <vQueueAddToRegistry+0x50>)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	00db      	lsls	r3, r3, #3
 800b0ec:	4413      	add	r3, r2
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b0f2:	e006      	b.n	800b102 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b07      	cmp	r3, #7
 800b0fe:	d9e7      	bls.n	800b0d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b100:	bf00      	nop
 800b102:	bf00      	nop
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	20005450 	.word	0x20005450

0800b114 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b124:	f001 fba6 	bl	800c874 <vPortEnterCritical>
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b12e:	b25b      	sxtb	r3, r3
 800b130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b134:	d103      	bne.n	800b13e <vQueueWaitForMessageRestricted+0x2a>
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b144:	b25b      	sxtb	r3, r3
 800b146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14a:	d103      	bne.n	800b154 <vQueueWaitForMessageRestricted+0x40>
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	2200      	movs	r2, #0
 800b150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b154:	f001 fbbe 	bl	800c8d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d106      	bne.n	800b16e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	3324      	adds	r3, #36	; 0x24
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	68b9      	ldr	r1, [r7, #8]
 800b168:	4618      	mov	r0, r3
 800b16a:	f000 fc3b 	bl	800b9e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b16e:	6978      	ldr	r0, [r7, #20]
 800b170:	f7ff ff26 	bl	800afc0 <prvUnlockQueue>
	}
 800b174:	bf00      	nop
 800b176:	3718      	adds	r7, #24
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08e      	sub	sp, #56	; 0x38
 800b180:	af04      	add	r7, sp, #16
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10a      	bne.n	800b1a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	623b      	str	r3, [r7, #32]
}
 800b1a2:	bf00      	nop
 800b1a4:	e7fe      	b.n	800b1a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	61fb      	str	r3, [r7, #28]
}
 800b1be:	bf00      	nop
 800b1c0:	e7fe      	b.n	800b1c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b1c2:	235c      	movs	r3, #92	; 0x5c
 800b1c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b5c      	cmp	r3, #92	; 0x5c
 800b1ca:	d00a      	beq.n	800b1e2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	61bb      	str	r3, [r7, #24]
}
 800b1de:	bf00      	nop
 800b1e0:	e7fe      	b.n	800b1e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b1e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d01e      	beq.n	800b228 <xTaskCreateStatic+0xac>
 800b1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d01b      	beq.n	800b228 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fc:	2202      	movs	r2, #2
 800b1fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b202:	2300      	movs	r3, #0
 800b204:	9303      	str	r3, [sp, #12]
 800b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b208:	9302      	str	r3, [sp, #8]
 800b20a:	f107 0314 	add.w	r3, r7, #20
 800b20e:	9301      	str	r3, [sp, #4]
 800b210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b212:	9300      	str	r3, [sp, #0]
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	68b9      	ldr	r1, [r7, #8]
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f000 f850 	bl	800b2c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b222:	f000 f8dd 	bl	800b3e0 <prvAddNewTaskToReadyList>
 800b226:	e001      	b.n	800b22c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b228:	2300      	movs	r3, #0
 800b22a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b22c:	697b      	ldr	r3, [r7, #20]
	}
 800b22e:	4618      	mov	r0, r3
 800b230:	3728      	adds	r7, #40	; 0x28
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b236:	b580      	push	{r7, lr}
 800b238:	b08c      	sub	sp, #48	; 0x30
 800b23a:	af04      	add	r7, sp, #16
 800b23c:	60f8      	str	r0, [r7, #12]
 800b23e:	60b9      	str	r1, [r7, #8]
 800b240:	603b      	str	r3, [r7, #0]
 800b242:	4613      	mov	r3, r2
 800b244:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b246:	88fb      	ldrh	r3, [r7, #6]
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	4618      	mov	r0, r3
 800b24c:	f001 fc34 	bl	800cab8 <pvPortMalloc>
 800b250:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00e      	beq.n	800b276 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b258:	205c      	movs	r0, #92	; 0x5c
 800b25a:	f001 fc2d 	bl	800cab8 <pvPortMalloc>
 800b25e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	697a      	ldr	r2, [r7, #20]
 800b26a:	631a      	str	r2, [r3, #48]	; 0x30
 800b26c:	e005      	b.n	800b27a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b26e:	6978      	ldr	r0, [r7, #20]
 800b270:	f001 fcee 	bl	800cc50 <vPortFree>
 800b274:	e001      	b.n	800b27a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b276:	2300      	movs	r3, #0
 800b278:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d017      	beq.n	800b2b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b288:	88fa      	ldrh	r2, [r7, #6]
 800b28a:	2300      	movs	r3, #0
 800b28c:	9303      	str	r3, [sp, #12]
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	9302      	str	r3, [sp, #8]
 800b292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b294:	9301      	str	r3, [sp, #4]
 800b296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	68b9      	ldr	r1, [r7, #8]
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f000 f80e 	bl	800b2c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2a4:	69f8      	ldr	r0, [r7, #28]
 800b2a6:	f000 f89b 	bl	800b3e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	61bb      	str	r3, [r7, #24]
 800b2ae:	e002      	b.n	800b2b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b2b6:	69bb      	ldr	r3, [r7, #24]
	}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3720      	adds	r7, #32
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b088      	sub	sp, #32
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
 800b2cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	21a5      	movs	r1, #165	; 0xa5
 800b2da:	f009 f937 	bl	801454c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	f023 0307 	bic.w	r3, r3, #7
 800b2f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	f003 0307 	and.w	r3, r3, #7
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00a      	beq.n	800b318 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b306:	f383 8811 	msr	BASEPRI, r3
 800b30a:	f3bf 8f6f 	isb	sy
 800b30e:	f3bf 8f4f 	dsb	sy
 800b312:	617b      	str	r3, [r7, #20]
}
 800b314:	bf00      	nop
 800b316:	e7fe      	b.n	800b316 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d01f      	beq.n	800b35e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b31e:	2300      	movs	r3, #0
 800b320:	61fb      	str	r3, [r7, #28]
 800b322:	e012      	b.n	800b34a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	4413      	add	r3, r2
 800b32a:	7819      	ldrb	r1, [r3, #0]
 800b32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	4413      	add	r3, r2
 800b332:	3334      	adds	r3, #52	; 0x34
 800b334:	460a      	mov	r2, r1
 800b336:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	4413      	add	r3, r2
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d006      	beq.n	800b352 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	3301      	adds	r3, #1
 800b348:	61fb      	str	r3, [r7, #28]
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	2b0f      	cmp	r3, #15
 800b34e:	d9e9      	bls.n	800b324 <prvInitialiseNewTask+0x64>
 800b350:	e000      	b.n	800b354 <prvInitialiseNewTask+0x94>
			{
				break;
 800b352:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b356:	2200      	movs	r2, #0
 800b358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b35c:	e003      	b.n	800b366 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b360:	2200      	movs	r2, #0
 800b362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b368:	2b37      	cmp	r3, #55	; 0x37
 800b36a:	d901      	bls.n	800b370 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b36c:	2337      	movs	r3, #55	; 0x37
 800b36e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b374:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b37a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	2200      	movs	r2, #0
 800b380:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b384:	3304      	adds	r3, #4
 800b386:	4618      	mov	r0, r3
 800b388:	f7ff f978 	bl	800a67c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38e:	3318      	adds	r3, #24
 800b390:	4618      	mov	r0, r3
 800b392:	f7ff f973 	bl	800a67c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b39a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3ba:	683a      	ldr	r2, [r7, #0]
 800b3bc:	68f9      	ldr	r1, [r7, #12]
 800b3be:	69b8      	ldr	r0, [r7, #24]
 800b3c0:	f001 f928 	bl	800c614 <pxPortInitialiseStack>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3d6:	bf00      	nop
 800b3d8:	3720      	adds	r7, #32
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
	...

0800b3e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3e8:	f001 fa44 	bl	800c874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3ec:	4b2d      	ldr	r3, [pc, #180]	; (800b4a4 <prvAddNewTaskToReadyList+0xc4>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	4a2c      	ldr	r2, [pc, #176]	; (800b4a4 <prvAddNewTaskToReadyList+0xc4>)
 800b3f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3f6:	4b2c      	ldr	r3, [pc, #176]	; (800b4a8 <prvAddNewTaskToReadyList+0xc8>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d109      	bne.n	800b412 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3fe:	4a2a      	ldr	r2, [pc, #168]	; (800b4a8 <prvAddNewTaskToReadyList+0xc8>)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b404:	4b27      	ldr	r3, [pc, #156]	; (800b4a4 <prvAddNewTaskToReadyList+0xc4>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d110      	bne.n	800b42e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b40c:	f000 fc16 	bl	800bc3c <prvInitialiseTaskLists>
 800b410:	e00d      	b.n	800b42e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b412:	4b26      	ldr	r3, [pc, #152]	; (800b4ac <prvAddNewTaskToReadyList+0xcc>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d109      	bne.n	800b42e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b41a:	4b23      	ldr	r3, [pc, #140]	; (800b4a8 <prvAddNewTaskToReadyList+0xc8>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b424:	429a      	cmp	r2, r3
 800b426:	d802      	bhi.n	800b42e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b428:	4a1f      	ldr	r2, [pc, #124]	; (800b4a8 <prvAddNewTaskToReadyList+0xc8>)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b42e:	4b20      	ldr	r3, [pc, #128]	; (800b4b0 <prvAddNewTaskToReadyList+0xd0>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3301      	adds	r3, #1
 800b434:	4a1e      	ldr	r2, [pc, #120]	; (800b4b0 <prvAddNewTaskToReadyList+0xd0>)
 800b436:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b438:	4b1d      	ldr	r3, [pc, #116]	; (800b4b0 <prvAddNewTaskToReadyList+0xd0>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b444:	4b1b      	ldr	r3, [pc, #108]	; (800b4b4 <prvAddNewTaskToReadyList+0xd4>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d903      	bls.n	800b454 <prvAddNewTaskToReadyList+0x74>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b450:	4a18      	ldr	r2, [pc, #96]	; (800b4b4 <prvAddNewTaskToReadyList+0xd4>)
 800b452:	6013      	str	r3, [r2, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b458:	4613      	mov	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4a15      	ldr	r2, [pc, #84]	; (800b4b8 <prvAddNewTaskToReadyList+0xd8>)
 800b462:	441a      	add	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	3304      	adds	r3, #4
 800b468:	4619      	mov	r1, r3
 800b46a:	4610      	mov	r0, r2
 800b46c:	f7ff f913 	bl	800a696 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b470:	f001 fa30 	bl	800c8d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b474:	4b0d      	ldr	r3, [pc, #52]	; (800b4ac <prvAddNewTaskToReadyList+0xcc>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00e      	beq.n	800b49a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b47c:	4b0a      	ldr	r3, [pc, #40]	; (800b4a8 <prvAddNewTaskToReadyList+0xc8>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b486:	429a      	cmp	r2, r3
 800b488:	d207      	bcs.n	800b49a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b48a:	4b0c      	ldr	r3, [pc, #48]	; (800b4bc <prvAddNewTaskToReadyList+0xdc>)
 800b48c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b49a:	bf00      	nop
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	20001664 	.word	0x20001664
 800b4a8:	20001190 	.word	0x20001190
 800b4ac:	20001670 	.word	0x20001670
 800b4b0:	20001680 	.word	0x20001680
 800b4b4:	2000166c 	.word	0x2000166c
 800b4b8:	20001194 	.word	0x20001194
 800b4bc:	e000ed04 	.word	0xe000ed04

0800b4c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d017      	beq.n	800b502 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4d2:	4b13      	ldr	r3, [pc, #76]	; (800b520 <vTaskDelay+0x60>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00a      	beq.n	800b4f0 <vTaskDelay+0x30>
	__asm volatile
 800b4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	60bb      	str	r3, [r7, #8]
}
 800b4ec:	bf00      	nop
 800b4ee:	e7fe      	b.n	800b4ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b4f0:	f000 f880 	bl	800b5f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fcea 	bl	800bed0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4fc:	f000 f888 	bl	800b610 <xTaskResumeAll>
 800b500:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d107      	bne.n	800b518 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b508:	4b06      	ldr	r3, [pc, #24]	; (800b524 <vTaskDelay+0x64>)
 800b50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b518:	bf00      	nop
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	2000168c 	.word	0x2000168c
 800b524:	e000ed04 	.word	0xe000ed04

0800b528 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b08a      	sub	sp, #40	; 0x28
 800b52c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b52e:	2300      	movs	r3, #0
 800b530:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b532:	2300      	movs	r3, #0
 800b534:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b536:	463a      	mov	r2, r7
 800b538:	1d39      	adds	r1, r7, #4
 800b53a:	f107 0308 	add.w	r3, r7, #8
 800b53e:	4618      	mov	r0, r3
 800b540:	f7ff f848 	bl	800a5d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	9202      	str	r2, [sp, #8]
 800b54c:	9301      	str	r3, [sp, #4]
 800b54e:	2300      	movs	r3, #0
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	2300      	movs	r3, #0
 800b554:	460a      	mov	r2, r1
 800b556:	4921      	ldr	r1, [pc, #132]	; (800b5dc <vTaskStartScheduler+0xb4>)
 800b558:	4821      	ldr	r0, [pc, #132]	; (800b5e0 <vTaskStartScheduler+0xb8>)
 800b55a:	f7ff fe0f 	bl	800b17c <xTaskCreateStatic>
 800b55e:	4603      	mov	r3, r0
 800b560:	4a20      	ldr	r2, [pc, #128]	; (800b5e4 <vTaskStartScheduler+0xbc>)
 800b562:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b564:	4b1f      	ldr	r3, [pc, #124]	; (800b5e4 <vTaskStartScheduler+0xbc>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b56c:	2301      	movs	r3, #1
 800b56e:	617b      	str	r3, [r7, #20]
 800b570:	e001      	b.n	800b576 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b572:	2300      	movs	r3, #0
 800b574:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d102      	bne.n	800b582 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b57c:	f000 fcfc 	bl	800bf78 <xTimerCreateTimerTask>
 800b580:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d116      	bne.n	800b5b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58c:	f383 8811 	msr	BASEPRI, r3
 800b590:	f3bf 8f6f 	isb	sy
 800b594:	f3bf 8f4f 	dsb	sy
 800b598:	613b      	str	r3, [r7, #16]
}
 800b59a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b59c:	4b12      	ldr	r3, [pc, #72]	; (800b5e8 <vTaskStartScheduler+0xc0>)
 800b59e:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b5a4:	4b11      	ldr	r3, [pc, #68]	; (800b5ec <vTaskStartScheduler+0xc4>)
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b5aa:	4b11      	ldr	r3, [pc, #68]	; (800b5f0 <vTaskStartScheduler+0xc8>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b5b0:	f001 f8be 	bl	800c730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b5b4:	e00e      	b.n	800b5d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5bc:	d10a      	bne.n	800b5d4 <vTaskStartScheduler+0xac>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	60fb      	str	r3, [r7, #12]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <vTaskStartScheduler+0xaa>
}
 800b5d4:	bf00      	nop
 800b5d6:	3718      	adds	r7, #24
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	080147dc 	.word	0x080147dc
 800b5e0:	0800bc0d 	.word	0x0800bc0d
 800b5e4:	20001688 	.word	0x20001688
 800b5e8:	20001684 	.word	0x20001684
 800b5ec:	20001670 	.word	0x20001670
 800b5f0:	20001668 	.word	0x20001668

0800b5f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b5f8:	4b04      	ldr	r3, [pc, #16]	; (800b60c <vTaskSuspendAll+0x18>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	4a03      	ldr	r2, [pc, #12]	; (800b60c <vTaskSuspendAll+0x18>)
 800b600:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b602:	bf00      	nop
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	2000168c 	.word	0x2000168c

0800b610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b616:	2300      	movs	r3, #0
 800b618:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b61a:	2300      	movs	r3, #0
 800b61c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b61e:	4b42      	ldr	r3, [pc, #264]	; (800b728 <xTaskResumeAll+0x118>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10a      	bne.n	800b63c <xTaskResumeAll+0x2c>
	__asm volatile
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	603b      	str	r3, [r7, #0]
}
 800b638:	bf00      	nop
 800b63a:	e7fe      	b.n	800b63a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b63c:	f001 f91a 	bl	800c874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b640:	4b39      	ldr	r3, [pc, #228]	; (800b728 <xTaskResumeAll+0x118>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3b01      	subs	r3, #1
 800b646:	4a38      	ldr	r2, [pc, #224]	; (800b728 <xTaskResumeAll+0x118>)
 800b648:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b64a:	4b37      	ldr	r3, [pc, #220]	; (800b728 <xTaskResumeAll+0x118>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d162      	bne.n	800b718 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b652:	4b36      	ldr	r3, [pc, #216]	; (800b72c <xTaskResumeAll+0x11c>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d05e      	beq.n	800b718 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b65a:	e02f      	b.n	800b6bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b65c:	4b34      	ldr	r3, [pc, #208]	; (800b730 <xTaskResumeAll+0x120>)
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	3318      	adds	r3, #24
 800b668:	4618      	mov	r0, r3
 800b66a:	f7ff f871 	bl	800a750 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3304      	adds	r3, #4
 800b672:	4618      	mov	r0, r3
 800b674:	f7ff f86c 	bl	800a750 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b67c:	4b2d      	ldr	r3, [pc, #180]	; (800b734 <xTaskResumeAll+0x124>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	429a      	cmp	r2, r3
 800b682:	d903      	bls.n	800b68c <xTaskResumeAll+0x7c>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b688:	4a2a      	ldr	r2, [pc, #168]	; (800b734 <xTaskResumeAll+0x124>)
 800b68a:	6013      	str	r3, [r2, #0]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b690:	4613      	mov	r3, r2
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	4413      	add	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4a27      	ldr	r2, [pc, #156]	; (800b738 <xTaskResumeAll+0x128>)
 800b69a:	441a      	add	r2, r3
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	3304      	adds	r3, #4
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	4610      	mov	r0, r2
 800b6a4:	f7fe fff7 	bl	800a696 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ac:	4b23      	ldr	r3, [pc, #140]	; (800b73c <xTaskResumeAll+0x12c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d302      	bcc.n	800b6bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b6b6:	4b22      	ldr	r3, [pc, #136]	; (800b740 <xTaskResumeAll+0x130>)
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6bc:	4b1c      	ldr	r3, [pc, #112]	; (800b730 <xTaskResumeAll+0x120>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1cb      	bne.n	800b65c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d001      	beq.n	800b6ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b6ca:	f000 fb55 	bl	800bd78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b6ce:	4b1d      	ldr	r3, [pc, #116]	; (800b744 <xTaskResumeAll+0x134>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d010      	beq.n	800b6fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b6da:	f000 f847 	bl	800b76c <xTaskIncrementTick>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b6e4:	4b16      	ldr	r3, [pc, #88]	; (800b740 <xTaskResumeAll+0x130>)
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1f1      	bne.n	800b6da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b6f6:	4b13      	ldr	r3, [pc, #76]	; (800b744 <xTaskResumeAll+0x134>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6fc:	4b10      	ldr	r3, [pc, #64]	; (800b740 <xTaskResumeAll+0x130>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d009      	beq.n	800b718 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b704:	2301      	movs	r3, #1
 800b706:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b708:	4b0f      	ldr	r3, [pc, #60]	; (800b748 <xTaskResumeAll+0x138>)
 800b70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b718:	f001 f8dc 	bl	800c8d4 <vPortExitCritical>

	return xAlreadyYielded;
 800b71c:	68bb      	ldr	r3, [r7, #8]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	2000168c 	.word	0x2000168c
 800b72c:	20001664 	.word	0x20001664
 800b730:	20001624 	.word	0x20001624
 800b734:	2000166c 	.word	0x2000166c
 800b738:	20001194 	.word	0x20001194
 800b73c:	20001190 	.word	0x20001190
 800b740:	20001678 	.word	0x20001678
 800b744:	20001674 	.word	0x20001674
 800b748:	e000ed04 	.word	0xe000ed04

0800b74c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b752:	4b05      	ldr	r3, [pc, #20]	; (800b768 <xTaskGetTickCount+0x1c>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b758:	687b      	ldr	r3, [r7, #4]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	20001668 	.word	0x20001668

0800b76c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b772:	2300      	movs	r3, #0
 800b774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b776:	4b4f      	ldr	r3, [pc, #316]	; (800b8b4 <xTaskIncrementTick+0x148>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f040 808f 	bne.w	800b89e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b780:	4b4d      	ldr	r3, [pc, #308]	; (800b8b8 <xTaskIncrementTick+0x14c>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	3301      	adds	r3, #1
 800b786:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b788:	4a4b      	ldr	r2, [pc, #300]	; (800b8b8 <xTaskIncrementTick+0x14c>)
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d120      	bne.n	800b7d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b794:	4b49      	ldr	r3, [pc, #292]	; (800b8bc <xTaskIncrementTick+0x150>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00a      	beq.n	800b7b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	603b      	str	r3, [r7, #0]
}
 800b7b0:	bf00      	nop
 800b7b2:	e7fe      	b.n	800b7b2 <xTaskIncrementTick+0x46>
 800b7b4:	4b41      	ldr	r3, [pc, #260]	; (800b8bc <xTaskIncrementTick+0x150>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	60fb      	str	r3, [r7, #12]
 800b7ba:	4b41      	ldr	r3, [pc, #260]	; (800b8c0 <xTaskIncrementTick+0x154>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a3f      	ldr	r2, [pc, #252]	; (800b8bc <xTaskIncrementTick+0x150>)
 800b7c0:	6013      	str	r3, [r2, #0]
 800b7c2:	4a3f      	ldr	r2, [pc, #252]	; (800b8c0 <xTaskIncrementTick+0x154>)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	4b3e      	ldr	r3, [pc, #248]	; (800b8c4 <xTaskIncrementTick+0x158>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	4a3d      	ldr	r2, [pc, #244]	; (800b8c4 <xTaskIncrementTick+0x158>)
 800b7d0:	6013      	str	r3, [r2, #0]
 800b7d2:	f000 fad1 	bl	800bd78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7d6:	4b3c      	ldr	r3, [pc, #240]	; (800b8c8 <xTaskIncrementTick+0x15c>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d349      	bcc.n	800b874 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7e0:	4b36      	ldr	r3, [pc, #216]	; (800b8bc <xTaskIncrementTick+0x150>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d104      	bne.n	800b7f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7ea:	4b37      	ldr	r3, [pc, #220]	; (800b8c8 <xTaskIncrementTick+0x15c>)
 800b7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f0:	601a      	str	r2, [r3, #0]
					break;
 800b7f2:	e03f      	b.n	800b874 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f4:	4b31      	ldr	r3, [pc, #196]	; (800b8bc <xTaskIncrementTick+0x150>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d203      	bcs.n	800b814 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b80c:	4a2e      	ldr	r2, [pc, #184]	; (800b8c8 <xTaskIncrementTick+0x15c>)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b812:	e02f      	b.n	800b874 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	3304      	adds	r3, #4
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fe ff99 	bl	800a750 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b822:	2b00      	cmp	r3, #0
 800b824:	d004      	beq.n	800b830 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	3318      	adds	r3, #24
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fe ff90 	bl	800a750 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b834:	4b25      	ldr	r3, [pc, #148]	; (800b8cc <xTaskIncrementTick+0x160>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d903      	bls.n	800b844 <xTaskIncrementTick+0xd8>
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b840:	4a22      	ldr	r2, [pc, #136]	; (800b8cc <xTaskIncrementTick+0x160>)
 800b842:	6013      	str	r3, [r2, #0]
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b848:	4613      	mov	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	4413      	add	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4a1f      	ldr	r2, [pc, #124]	; (800b8d0 <xTaskIncrementTick+0x164>)
 800b852:	441a      	add	r2, r3
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	3304      	adds	r3, #4
 800b858:	4619      	mov	r1, r3
 800b85a:	4610      	mov	r0, r2
 800b85c:	f7fe ff1b 	bl	800a696 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b864:	4b1b      	ldr	r3, [pc, #108]	; (800b8d4 <xTaskIncrementTick+0x168>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d3b8      	bcc.n	800b7e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b86e:	2301      	movs	r3, #1
 800b870:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b872:	e7b5      	b.n	800b7e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b874:	4b17      	ldr	r3, [pc, #92]	; (800b8d4 <xTaskIncrementTick+0x168>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87a:	4915      	ldr	r1, [pc, #84]	; (800b8d0 <xTaskIncrementTick+0x164>)
 800b87c:	4613      	mov	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	440b      	add	r3, r1
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d901      	bls.n	800b890 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b88c:	2301      	movs	r3, #1
 800b88e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b890:	4b11      	ldr	r3, [pc, #68]	; (800b8d8 <xTaskIncrementTick+0x16c>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d007      	beq.n	800b8a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b898:	2301      	movs	r3, #1
 800b89a:	617b      	str	r3, [r7, #20]
 800b89c:	e004      	b.n	800b8a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b89e:	4b0f      	ldr	r3, [pc, #60]	; (800b8dc <xTaskIncrementTick+0x170>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	4a0d      	ldr	r2, [pc, #52]	; (800b8dc <xTaskIncrementTick+0x170>)
 800b8a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b8a8:	697b      	ldr	r3, [r7, #20]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3718      	adds	r7, #24
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	2000168c 	.word	0x2000168c
 800b8b8:	20001668 	.word	0x20001668
 800b8bc:	2000161c 	.word	0x2000161c
 800b8c0:	20001620 	.word	0x20001620
 800b8c4:	2000167c 	.word	0x2000167c
 800b8c8:	20001684 	.word	0x20001684
 800b8cc:	2000166c 	.word	0x2000166c
 800b8d0:	20001194 	.word	0x20001194
 800b8d4:	20001190 	.word	0x20001190
 800b8d8:	20001678 	.word	0x20001678
 800b8dc:	20001674 	.word	0x20001674

0800b8e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8e6:	4b28      	ldr	r3, [pc, #160]	; (800b988 <vTaskSwitchContext+0xa8>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d003      	beq.n	800b8f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8ee:	4b27      	ldr	r3, [pc, #156]	; (800b98c <vTaskSwitchContext+0xac>)
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8f4:	e041      	b.n	800b97a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b8f6:	4b25      	ldr	r3, [pc, #148]	; (800b98c <vTaskSwitchContext+0xac>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8fc:	4b24      	ldr	r3, [pc, #144]	; (800b990 <vTaskSwitchContext+0xb0>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	60fb      	str	r3, [r7, #12]
 800b902:	e010      	b.n	800b926 <vTaskSwitchContext+0x46>
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10a      	bne.n	800b920 <vTaskSwitchContext+0x40>
	__asm volatile
 800b90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	607b      	str	r3, [r7, #4]
}
 800b91c:	bf00      	nop
 800b91e:	e7fe      	b.n	800b91e <vTaskSwitchContext+0x3e>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3b01      	subs	r3, #1
 800b924:	60fb      	str	r3, [r7, #12]
 800b926:	491b      	ldr	r1, [pc, #108]	; (800b994 <vTaskSwitchContext+0xb4>)
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	4613      	mov	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4413      	add	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	440b      	add	r3, r1
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d0e4      	beq.n	800b904 <vTaskSwitchContext+0x24>
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	4613      	mov	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4413      	add	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	4a13      	ldr	r2, [pc, #76]	; (800b994 <vTaskSwitchContext+0xb4>)
 800b946:	4413      	add	r3, r2
 800b948:	60bb      	str	r3, [r7, #8]
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	605a      	str	r2, [r3, #4]
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	3308      	adds	r3, #8
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d104      	bne.n	800b96a <vTaskSwitchContext+0x8a>
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	605a      	str	r2, [r3, #4]
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	4a09      	ldr	r2, [pc, #36]	; (800b998 <vTaskSwitchContext+0xb8>)
 800b972:	6013      	str	r3, [r2, #0]
 800b974:	4a06      	ldr	r2, [pc, #24]	; (800b990 <vTaskSwitchContext+0xb0>)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6013      	str	r3, [r2, #0]
}
 800b97a:	bf00      	nop
 800b97c:	3714      	adds	r7, #20
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	2000168c 	.word	0x2000168c
 800b98c:	20001678 	.word	0x20001678
 800b990:	2000166c 	.word	0x2000166c
 800b994:	20001194 	.word	0x20001194
 800b998:	20001190 	.word	0x20001190

0800b99c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10a      	bne.n	800b9c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b0:	f383 8811 	msr	BASEPRI, r3
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	60fb      	str	r3, [r7, #12]
}
 800b9be:	bf00      	nop
 800b9c0:	e7fe      	b.n	800b9c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9c2:	4b07      	ldr	r3, [pc, #28]	; (800b9e0 <vTaskPlaceOnEventList+0x44>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3318      	adds	r3, #24
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7fe fe87 	bl	800a6de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9d0:	2101      	movs	r1, #1
 800b9d2:	6838      	ldr	r0, [r7, #0]
 800b9d4:	f000 fa7c 	bl	800bed0 <prvAddCurrentTaskToDelayedList>
}
 800b9d8:	bf00      	nop
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	20001190 	.word	0x20001190

0800b9e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10a      	bne.n	800ba0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	617b      	str	r3, [r7, #20]
}
 800ba08:	bf00      	nop
 800ba0a:	e7fe      	b.n	800ba0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba0c:	4b0a      	ldr	r3, [pc, #40]	; (800ba38 <vTaskPlaceOnEventListRestricted+0x54>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3318      	adds	r3, #24
 800ba12:	4619      	mov	r1, r3
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f7fe fe3e 	bl	800a696 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ba20:	f04f 33ff 	mov.w	r3, #4294967295
 800ba24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba26:	6879      	ldr	r1, [r7, #4]
 800ba28:	68b8      	ldr	r0, [r7, #8]
 800ba2a:	f000 fa51 	bl	800bed0 <prvAddCurrentTaskToDelayedList>
	}
 800ba2e:	bf00      	nop
 800ba30:	3718      	adds	r7, #24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	20001190 	.word	0x20001190

0800ba3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10a      	bne.n	800ba68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	60fb      	str	r3, [r7, #12]
}
 800ba64:	bf00      	nop
 800ba66:	e7fe      	b.n	800ba66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	3318      	adds	r3, #24
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fe fe6f 	bl	800a750 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba72:	4b1e      	ldr	r3, [pc, #120]	; (800baec <xTaskRemoveFromEventList+0xb0>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d11d      	bne.n	800bab6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7fe fe66 	bl	800a750 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba88:	4b19      	ldr	r3, [pc, #100]	; (800baf0 <xTaskRemoveFromEventList+0xb4>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d903      	bls.n	800ba98 <xTaskRemoveFromEventList+0x5c>
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba94:	4a16      	ldr	r2, [pc, #88]	; (800baf0 <xTaskRemoveFromEventList+0xb4>)
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	4a13      	ldr	r2, [pc, #76]	; (800baf4 <xTaskRemoveFromEventList+0xb8>)
 800baa6:	441a      	add	r2, r3
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	3304      	adds	r3, #4
 800baac:	4619      	mov	r1, r3
 800baae:	4610      	mov	r0, r2
 800bab0:	f7fe fdf1 	bl	800a696 <vListInsertEnd>
 800bab4:	e005      	b.n	800bac2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	3318      	adds	r3, #24
 800baba:	4619      	mov	r1, r3
 800babc:	480e      	ldr	r0, [pc, #56]	; (800baf8 <xTaskRemoveFromEventList+0xbc>)
 800babe:	f7fe fdea 	bl	800a696 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac6:	4b0d      	ldr	r3, [pc, #52]	; (800bafc <xTaskRemoveFromEventList+0xc0>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bacc:	429a      	cmp	r2, r3
 800bace:	d905      	bls.n	800badc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bad0:	2301      	movs	r3, #1
 800bad2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bad4:	4b0a      	ldr	r3, [pc, #40]	; (800bb00 <xTaskRemoveFromEventList+0xc4>)
 800bad6:	2201      	movs	r2, #1
 800bad8:	601a      	str	r2, [r3, #0]
 800bada:	e001      	b.n	800bae0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800badc:	2300      	movs	r3, #0
 800bade:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bae0:	697b      	ldr	r3, [r7, #20]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	2000168c 	.word	0x2000168c
 800baf0:	2000166c 	.word	0x2000166c
 800baf4:	20001194 	.word	0x20001194
 800baf8:	20001624 	.word	0x20001624
 800bafc:	20001190 	.word	0x20001190
 800bb00:	20001678 	.word	0x20001678

0800bb04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb0c:	4b06      	ldr	r3, [pc, #24]	; (800bb28 <vTaskInternalSetTimeOutState+0x24>)
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb14:	4b05      	ldr	r3, [pc, #20]	; (800bb2c <vTaskInternalSetTimeOutState+0x28>)
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	605a      	str	r2, [r3, #4]
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	2000167c 	.word	0x2000167c
 800bb2c:	20001668 	.word	0x20001668

0800bb30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b088      	sub	sp, #32
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10a      	bne.n	800bb56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	613b      	str	r3, [r7, #16]
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10a      	bne.n	800bb72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	60fb      	str	r3, [r7, #12]
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bb72:	f000 fe7f 	bl	800c874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb76:	4b1d      	ldr	r3, [pc, #116]	; (800bbec <xTaskCheckForTimeOut+0xbc>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	69ba      	ldr	r2, [r7, #24]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb8e:	d102      	bne.n	800bb96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb90:	2300      	movs	r3, #0
 800bb92:	61fb      	str	r3, [r7, #28]
 800bb94:	e023      	b.n	800bbde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	4b15      	ldr	r3, [pc, #84]	; (800bbf0 <xTaskCheckForTimeOut+0xc0>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d007      	beq.n	800bbb2 <xTaskCheckForTimeOut+0x82>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	69ba      	ldr	r2, [r7, #24]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d302      	bcc.n	800bbb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bbac:	2301      	movs	r3, #1
 800bbae:	61fb      	str	r3, [r7, #28]
 800bbb0:	e015      	b.n	800bbde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d20b      	bcs.n	800bbd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	1ad2      	subs	r2, r2, r3
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7ff ff9b 	bl	800bb04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	61fb      	str	r3, [r7, #28]
 800bbd2:	e004      	b.n	800bbde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bbde:	f000 fe79 	bl	800c8d4 <vPortExitCritical>

	return xReturn;
 800bbe2:	69fb      	ldr	r3, [r7, #28]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3720      	adds	r7, #32
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	20001668 	.word	0x20001668
 800bbf0:	2000167c 	.word	0x2000167c

0800bbf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bbf8:	4b03      	ldr	r3, [pc, #12]	; (800bc08 <vTaskMissedYield+0x14>)
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	601a      	str	r2, [r3, #0]
}
 800bbfe:	bf00      	nop
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr
 800bc08:	20001678 	.word	0x20001678

0800bc0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc14:	f000 f852 	bl	800bcbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc18:	4b06      	ldr	r3, [pc, #24]	; (800bc34 <prvIdleTask+0x28>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d9f9      	bls.n	800bc14 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc20:	4b05      	ldr	r3, [pc, #20]	; (800bc38 <prvIdleTask+0x2c>)
 800bc22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc30:	e7f0      	b.n	800bc14 <prvIdleTask+0x8>
 800bc32:	bf00      	nop
 800bc34:	20001194 	.word	0x20001194
 800bc38:	e000ed04 	.word	0xe000ed04

0800bc3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc42:	2300      	movs	r3, #0
 800bc44:	607b      	str	r3, [r7, #4]
 800bc46:	e00c      	b.n	800bc62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	4413      	add	r3, r2
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	4a12      	ldr	r2, [pc, #72]	; (800bc9c <prvInitialiseTaskLists+0x60>)
 800bc54:	4413      	add	r3, r2
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fe fcf0 	bl	800a63c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	607b      	str	r3, [r7, #4]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b37      	cmp	r3, #55	; 0x37
 800bc66:	d9ef      	bls.n	800bc48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc68:	480d      	ldr	r0, [pc, #52]	; (800bca0 <prvInitialiseTaskLists+0x64>)
 800bc6a:	f7fe fce7 	bl	800a63c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc6e:	480d      	ldr	r0, [pc, #52]	; (800bca4 <prvInitialiseTaskLists+0x68>)
 800bc70:	f7fe fce4 	bl	800a63c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc74:	480c      	ldr	r0, [pc, #48]	; (800bca8 <prvInitialiseTaskLists+0x6c>)
 800bc76:	f7fe fce1 	bl	800a63c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc7a:	480c      	ldr	r0, [pc, #48]	; (800bcac <prvInitialiseTaskLists+0x70>)
 800bc7c:	f7fe fcde 	bl	800a63c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc80:	480b      	ldr	r0, [pc, #44]	; (800bcb0 <prvInitialiseTaskLists+0x74>)
 800bc82:	f7fe fcdb 	bl	800a63c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc86:	4b0b      	ldr	r3, [pc, #44]	; (800bcb4 <prvInitialiseTaskLists+0x78>)
 800bc88:	4a05      	ldr	r2, [pc, #20]	; (800bca0 <prvInitialiseTaskLists+0x64>)
 800bc8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc8c:	4b0a      	ldr	r3, [pc, #40]	; (800bcb8 <prvInitialiseTaskLists+0x7c>)
 800bc8e:	4a05      	ldr	r2, [pc, #20]	; (800bca4 <prvInitialiseTaskLists+0x68>)
 800bc90:	601a      	str	r2, [r3, #0]
}
 800bc92:	bf00      	nop
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	20001194 	.word	0x20001194
 800bca0:	200015f4 	.word	0x200015f4
 800bca4:	20001608 	.word	0x20001608
 800bca8:	20001624 	.word	0x20001624
 800bcac:	20001638 	.word	0x20001638
 800bcb0:	20001650 	.word	0x20001650
 800bcb4:	2000161c 	.word	0x2000161c
 800bcb8:	20001620 	.word	0x20001620

0800bcbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcc2:	e019      	b.n	800bcf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bcc4:	f000 fdd6 	bl	800c874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcc8:	4b10      	ldr	r3, [pc, #64]	; (800bd0c <prvCheckTasksWaitingTermination+0x50>)
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	3304      	adds	r3, #4
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fe fd3b 	bl	800a750 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bcda:	4b0d      	ldr	r3, [pc, #52]	; (800bd10 <prvCheckTasksWaitingTermination+0x54>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	3b01      	subs	r3, #1
 800bce0:	4a0b      	ldr	r2, [pc, #44]	; (800bd10 <prvCheckTasksWaitingTermination+0x54>)
 800bce2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bce4:	4b0b      	ldr	r3, [pc, #44]	; (800bd14 <prvCheckTasksWaitingTermination+0x58>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	3b01      	subs	r3, #1
 800bcea:	4a0a      	ldr	r2, [pc, #40]	; (800bd14 <prvCheckTasksWaitingTermination+0x58>)
 800bcec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bcee:	f000 fdf1 	bl	800c8d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 f810 	bl	800bd18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcf8:	4b06      	ldr	r3, [pc, #24]	; (800bd14 <prvCheckTasksWaitingTermination+0x58>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1e1      	bne.n	800bcc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd00:	bf00      	nop
 800bd02:	bf00      	nop
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	20001638 	.word	0x20001638
 800bd10:	20001664 	.word	0x20001664
 800bd14:	2000164c 	.word	0x2000164c

0800bd18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d108      	bne.n	800bd3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f000 ff8e 	bl	800cc50 <vPortFree>
				vPortFree( pxTCB );
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 ff8b 	bl	800cc50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd3a:	e018      	b.n	800bd6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d103      	bne.n	800bd4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 ff82 	bl	800cc50 <vPortFree>
	}
 800bd4c:	e00f      	b.n	800bd6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d00a      	beq.n	800bd6e <prvDeleteTCB+0x56>
	__asm volatile
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	60fb      	str	r3, [r7, #12]
}
 800bd6a:	bf00      	nop
 800bd6c:	e7fe      	b.n	800bd6c <prvDeleteTCB+0x54>
	}
 800bd6e:	bf00      	nop
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
	...

0800bd78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd7e:	4b0c      	ldr	r3, [pc, #48]	; (800bdb0 <prvResetNextTaskUnblockTime+0x38>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d104      	bne.n	800bd92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd88:	4b0a      	ldr	r3, [pc, #40]	; (800bdb4 <prvResetNextTaskUnblockTime+0x3c>)
 800bd8a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd90:	e008      	b.n	800bda4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd92:	4b07      	ldr	r3, [pc, #28]	; (800bdb0 <prvResetNextTaskUnblockTime+0x38>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	4a04      	ldr	r2, [pc, #16]	; (800bdb4 <prvResetNextTaskUnblockTime+0x3c>)
 800bda2:	6013      	str	r3, [r2, #0]
}
 800bda4:	bf00      	nop
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	2000161c 	.word	0x2000161c
 800bdb4:	20001684 	.word	0x20001684

0800bdb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bdbe:	4b0b      	ldr	r3, [pc, #44]	; (800bdec <xTaskGetSchedulerState+0x34>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d102      	bne.n	800bdcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	607b      	str	r3, [r7, #4]
 800bdca:	e008      	b.n	800bdde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdcc:	4b08      	ldr	r3, [pc, #32]	; (800bdf0 <xTaskGetSchedulerState+0x38>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d102      	bne.n	800bdda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bdd4:	2302      	movs	r3, #2
 800bdd6:	607b      	str	r3, [r7, #4]
 800bdd8:	e001      	b.n	800bdde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bdda:	2300      	movs	r3, #0
 800bddc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bdde:	687b      	ldr	r3, [r7, #4]
	}
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr
 800bdec:	20001670 	.word	0x20001670
 800bdf0:	2000168c 	.word	0x2000168c

0800bdf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be00:	2300      	movs	r3, #0
 800be02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d056      	beq.n	800beb8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be0a:	4b2e      	ldr	r3, [pc, #184]	; (800bec4 <xTaskPriorityDisinherit+0xd0>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	693a      	ldr	r2, [r7, #16]
 800be10:	429a      	cmp	r2, r3
 800be12:	d00a      	beq.n	800be2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800be14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be18:	f383 8811 	msr	BASEPRI, r3
 800be1c:	f3bf 8f6f 	isb	sy
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	60fb      	str	r3, [r7, #12]
}
 800be26:	bf00      	nop
 800be28:	e7fe      	b.n	800be28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10a      	bne.n	800be48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	60bb      	str	r3, [r7, #8]
}
 800be44:	bf00      	nop
 800be46:	e7fe      	b.n	800be46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be4c:	1e5a      	subs	r2, r3, #1
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d02c      	beq.n	800beb8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be62:	2b00      	cmp	r3, #0
 800be64:	d128      	bne.n	800beb8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	3304      	adds	r3, #4
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fe fc70 	bl	800a750 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be88:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <xTaskPriorityDisinherit+0xd4>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d903      	bls.n	800be98 <xTaskPriorityDisinherit+0xa4>
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be94:	4a0c      	ldr	r2, [pc, #48]	; (800bec8 <xTaskPriorityDisinherit+0xd4>)
 800be96:	6013      	str	r3, [r2, #0]
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9c:	4613      	mov	r3, r2
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	4413      	add	r3, r2
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4a09      	ldr	r2, [pc, #36]	; (800becc <xTaskPriorityDisinherit+0xd8>)
 800bea6:	441a      	add	r2, r3
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	3304      	adds	r3, #4
 800beac:	4619      	mov	r1, r3
 800beae:	4610      	mov	r0, r2
 800beb0:	f7fe fbf1 	bl	800a696 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800beb4:	2301      	movs	r3, #1
 800beb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800beb8:	697b      	ldr	r3, [r7, #20]
	}
 800beba:	4618      	mov	r0, r3
 800bebc:	3718      	adds	r7, #24
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	20001190 	.word	0x20001190
 800bec8:	2000166c 	.word	0x2000166c
 800becc:	20001194 	.word	0x20001194

0800bed0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800beda:	4b21      	ldr	r3, [pc, #132]	; (800bf60 <prvAddCurrentTaskToDelayedList+0x90>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bee0:	4b20      	ldr	r3, [pc, #128]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	3304      	adds	r3, #4
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fe fc32 	bl	800a750 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef2:	d10a      	bne.n	800bf0a <prvAddCurrentTaskToDelayedList+0x3a>
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d007      	beq.n	800bf0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800befa:	4b1a      	ldr	r3, [pc, #104]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3304      	adds	r3, #4
 800bf00:	4619      	mov	r1, r3
 800bf02:	4819      	ldr	r0, [pc, #100]	; (800bf68 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf04:	f7fe fbc7 	bl	800a696 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf08:	e026      	b.n	800bf58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4413      	add	r3, r2
 800bf10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf12:	4b14      	ldr	r3, [pc, #80]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d209      	bcs.n	800bf36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf22:	4b12      	ldr	r3, [pc, #72]	; (800bf6c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	4b0f      	ldr	r3, [pc, #60]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	4610      	mov	r0, r2
 800bf30:	f7fe fbd5 	bl	800a6de <vListInsert>
}
 800bf34:	e010      	b.n	800bf58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf36:	4b0e      	ldr	r3, [pc, #56]	; (800bf70 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	4b0a      	ldr	r3, [pc, #40]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3304      	adds	r3, #4
 800bf40:	4619      	mov	r1, r3
 800bf42:	4610      	mov	r0, r2
 800bf44:	f7fe fbcb 	bl	800a6de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf48:	4b0a      	ldr	r3, [pc, #40]	; (800bf74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d202      	bcs.n	800bf58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf52:	4a08      	ldr	r2, [pc, #32]	; (800bf74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	6013      	str	r3, [r2, #0]
}
 800bf58:	bf00      	nop
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	20001668 	.word	0x20001668
 800bf64:	20001190 	.word	0x20001190
 800bf68:	20001650 	.word	0x20001650
 800bf6c:	20001620 	.word	0x20001620
 800bf70:	2000161c 	.word	0x2000161c
 800bf74:	20001684 	.word	0x20001684

0800bf78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08a      	sub	sp, #40	; 0x28
 800bf7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf82:	f000 fb07 	bl	800c594 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf86:	4b1c      	ldr	r3, [pc, #112]	; (800bff8 <xTimerCreateTimerTask+0x80>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d021      	beq.n	800bfd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf96:	1d3a      	adds	r2, r7, #4
 800bf98:	f107 0108 	add.w	r1, r7, #8
 800bf9c:	f107 030c 	add.w	r3, r7, #12
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7fe fb31 	bl	800a608 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bfa6:	6879      	ldr	r1, [r7, #4]
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	9202      	str	r2, [sp, #8]
 800bfae:	9301      	str	r3, [sp, #4]
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	460a      	mov	r2, r1
 800bfb8:	4910      	ldr	r1, [pc, #64]	; (800bffc <xTimerCreateTimerTask+0x84>)
 800bfba:	4811      	ldr	r0, [pc, #68]	; (800c000 <xTimerCreateTimerTask+0x88>)
 800bfbc:	f7ff f8de 	bl	800b17c <xTaskCreateStatic>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	4a10      	ldr	r2, [pc, #64]	; (800c004 <xTimerCreateTimerTask+0x8c>)
 800bfc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bfc6:	4b0f      	ldr	r3, [pc, #60]	; (800c004 <xTimerCreateTimerTask+0x8c>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d10a      	bne.n	800bfee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfdc:	f383 8811 	msr	BASEPRI, r3
 800bfe0:	f3bf 8f6f 	isb	sy
 800bfe4:	f3bf 8f4f 	dsb	sy
 800bfe8:	613b      	str	r3, [r7, #16]
}
 800bfea:	bf00      	nop
 800bfec:	e7fe      	b.n	800bfec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bfee:	697b      	ldr	r3, [r7, #20]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3718      	adds	r7, #24
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	200016c0 	.word	0x200016c0
 800bffc:	080147e4 	.word	0x080147e4
 800c000:	0800c13d 	.word	0x0800c13d
 800c004:	200016c4 	.word	0x200016c4

0800c008 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b08a      	sub	sp, #40	; 0x28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c016:	2300      	movs	r3, #0
 800c018:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10a      	bne.n	800c036 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	623b      	str	r3, [r7, #32]
}
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c036:	4b1a      	ldr	r3, [pc, #104]	; (800c0a0 <xTimerGenericCommand+0x98>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d02a      	beq.n	800c094 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	2b05      	cmp	r3, #5
 800c04e:	dc18      	bgt.n	800c082 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c050:	f7ff feb2 	bl	800bdb8 <xTaskGetSchedulerState>
 800c054:	4603      	mov	r3, r0
 800c056:	2b02      	cmp	r3, #2
 800c058:	d109      	bne.n	800c06e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c05a:	4b11      	ldr	r3, [pc, #68]	; (800c0a0 <xTimerGenericCommand+0x98>)
 800c05c:	6818      	ldr	r0, [r3, #0]
 800c05e:	f107 0110 	add.w	r1, r7, #16
 800c062:	2300      	movs	r3, #0
 800c064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c066:	f7fe fca1 	bl	800a9ac <xQueueGenericSend>
 800c06a:	6278      	str	r0, [r7, #36]	; 0x24
 800c06c:	e012      	b.n	800c094 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c06e:	4b0c      	ldr	r3, [pc, #48]	; (800c0a0 <xTimerGenericCommand+0x98>)
 800c070:	6818      	ldr	r0, [r3, #0]
 800c072:	f107 0110 	add.w	r1, r7, #16
 800c076:	2300      	movs	r3, #0
 800c078:	2200      	movs	r2, #0
 800c07a:	f7fe fc97 	bl	800a9ac <xQueueGenericSend>
 800c07e:	6278      	str	r0, [r7, #36]	; 0x24
 800c080:	e008      	b.n	800c094 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c082:	4b07      	ldr	r3, [pc, #28]	; (800c0a0 <xTimerGenericCommand+0x98>)
 800c084:	6818      	ldr	r0, [r3, #0]
 800c086:	f107 0110 	add.w	r1, r7, #16
 800c08a:	2300      	movs	r3, #0
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	f7fe fd8b 	bl	800aba8 <xQueueGenericSendFromISR>
 800c092:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c096:	4618      	mov	r0, r3
 800c098:	3728      	adds	r7, #40	; 0x28
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	200016c0 	.word	0x200016c0

0800c0a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b088      	sub	sp, #32
 800c0a8:	af02      	add	r7, sp, #8
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ae:	4b22      	ldr	r3, [pc, #136]	; (800c138 <prvProcessExpiredTimer+0x94>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fe fb47 	bl	800a750 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0c8:	f003 0304 	and.w	r3, r3, #4
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d022      	beq.n	800c116 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	699a      	ldr	r2, [r3, #24]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	18d1      	adds	r1, r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	6978      	ldr	r0, [r7, #20]
 800c0de:	f000 f8d1 	bl	800c284 <prvInsertTimerInActiveList>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d01f      	beq.n	800c128 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	6978      	ldr	r0, [r7, #20]
 800c0f4:	f7ff ff88 	bl	800c008 <xTimerGenericCommand>
 800c0f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d113      	bne.n	800c128 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	60fb      	str	r3, [r7, #12]
}
 800c112:	bf00      	nop
 800c114:	e7fe      	b.n	800c114 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c11c:	f023 0301 	bic.w	r3, r3, #1
 800c120:	b2da      	uxtb	r2, r3
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	6a1b      	ldr	r3, [r3, #32]
 800c12c:	6978      	ldr	r0, [r7, #20]
 800c12e:	4798      	blx	r3
}
 800c130:	bf00      	nop
 800c132:	3718      	adds	r7, #24
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	200016b8 	.word	0x200016b8

0800c13c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c144:	f107 0308 	add.w	r3, r7, #8
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 f857 	bl	800c1fc <prvGetNextExpireTime>
 800c14e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	4619      	mov	r1, r3
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f000 f803 	bl	800c160 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c15a:	f000 f8d5 	bl	800c308 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c15e:	e7f1      	b.n	800c144 <prvTimerTask+0x8>

0800c160 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c16a:	f7ff fa43 	bl	800b5f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c16e:	f107 0308 	add.w	r3, r7, #8
 800c172:	4618      	mov	r0, r3
 800c174:	f000 f866 	bl	800c244 <prvSampleTimeNow>
 800c178:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d130      	bne.n	800c1e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10a      	bne.n	800c19c <prvProcessTimerOrBlockTask+0x3c>
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d806      	bhi.n	800c19c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c18e:	f7ff fa3f 	bl	800b610 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c192:	68f9      	ldr	r1, [r7, #12]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f7ff ff85 	bl	800c0a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c19a:	e024      	b.n	800c1e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d008      	beq.n	800c1b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c1a2:	4b13      	ldr	r3, [pc, #76]	; (800c1f0 <prvProcessTimerOrBlockTask+0x90>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d101      	bne.n	800c1b0 <prvProcessTimerOrBlockTask+0x50>
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e000      	b.n	800c1b2 <prvProcessTimerOrBlockTask+0x52>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1b4:	4b0f      	ldr	r3, [pc, #60]	; (800c1f4 <prvProcessTimerOrBlockTask+0x94>)
 800c1b6:	6818      	ldr	r0, [r3, #0]
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	683a      	ldr	r2, [r7, #0]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	f7fe ffa7 	bl	800b114 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c1c6:	f7ff fa23 	bl	800b610 <xTaskResumeAll>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10a      	bne.n	800c1e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c1d0:	4b09      	ldr	r3, [pc, #36]	; (800c1f8 <prvProcessTimerOrBlockTask+0x98>)
 800c1d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1d6:	601a      	str	r2, [r3, #0]
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	f3bf 8f6f 	isb	sy
}
 800c1e0:	e001      	b.n	800c1e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c1e2:	f7ff fa15 	bl	800b610 <xTaskResumeAll>
}
 800c1e6:	bf00      	nop
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	200016bc 	.word	0x200016bc
 800c1f4:	200016c0 	.word	0x200016c0
 800c1f8:	e000ed04 	.word	0xe000ed04

0800c1fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c204:	4b0e      	ldr	r3, [pc, #56]	; (800c240 <prvGetNextExpireTime+0x44>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <prvGetNextExpireTime+0x16>
 800c20e:	2201      	movs	r2, #1
 800c210:	e000      	b.n	800c214 <prvGetNextExpireTime+0x18>
 800c212:	2200      	movs	r2, #0
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d105      	bne.n	800c22c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c220:	4b07      	ldr	r3, [pc, #28]	; (800c240 <prvGetNextExpireTime+0x44>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	60fb      	str	r3, [r7, #12]
 800c22a:	e001      	b.n	800c230 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c22c:	2300      	movs	r3, #0
 800c22e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c230:	68fb      	ldr	r3, [r7, #12]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3714      	adds	r7, #20
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	200016b8 	.word	0x200016b8

0800c244 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c24c:	f7ff fa7e 	bl	800b74c <xTaskGetTickCount>
 800c250:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c252:	4b0b      	ldr	r3, [pc, #44]	; (800c280 <prvSampleTimeNow+0x3c>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d205      	bcs.n	800c268 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c25c:	f000 f936 	bl	800c4cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	601a      	str	r2, [r3, #0]
 800c266:	e002      	b.n	800c26e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c26e:	4a04      	ldr	r2, [pc, #16]	; (800c280 <prvSampleTimeNow+0x3c>)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c274:	68fb      	ldr	r3, [r7, #12]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	200016c8 	.word	0x200016c8

0800c284 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c292:	2300      	movs	r3, #0
 800c294:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	68ba      	ldr	r2, [r7, #8]
 800c29a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d812      	bhi.n	800c2d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	1ad2      	subs	r2, r2, r3
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	699b      	ldr	r3, [r3, #24]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d302      	bcc.n	800c2be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	617b      	str	r3, [r7, #20]
 800c2bc:	e01b      	b.n	800c2f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c2be:	4b10      	ldr	r3, [pc, #64]	; (800c300 <prvInsertTimerInActiveList+0x7c>)
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	3304      	adds	r3, #4
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	f7fe fa08 	bl	800a6de <vListInsert>
 800c2ce:	e012      	b.n	800c2f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d206      	bcs.n	800c2e6 <prvInsertTimerInActiveList+0x62>
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d302      	bcc.n	800c2e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	617b      	str	r3, [r7, #20]
 800c2e4:	e007      	b.n	800c2f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2e6:	4b07      	ldr	r3, [pc, #28]	; (800c304 <prvInsertTimerInActiveList+0x80>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	f7fe f9f4 	bl	800a6de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c2f6:	697b      	ldr	r3, [r7, #20]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3718      	adds	r7, #24
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	200016bc 	.word	0x200016bc
 800c304:	200016b8 	.word	0x200016b8

0800c308 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08e      	sub	sp, #56	; 0x38
 800c30c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c30e:	e0ca      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	da18      	bge.n	800c348 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c316:	1d3b      	adds	r3, r7, #4
 800c318:	3304      	adds	r3, #4
 800c31a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10a      	bne.n	800c338 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	61fb      	str	r3, [r7, #28]
}
 800c334:	bf00      	nop
 800c336:	e7fe      	b.n	800c336 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c33e:	6850      	ldr	r0, [r2, #4]
 800c340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c342:	6892      	ldr	r2, [r2, #8]
 800c344:	4611      	mov	r1, r2
 800c346:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f2c0 80aa 	blt.w	800c4a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	695b      	ldr	r3, [r3, #20]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d004      	beq.n	800c366 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35e:	3304      	adds	r3, #4
 800c360:	4618      	mov	r0, r3
 800c362:	f7fe f9f5 	bl	800a750 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c366:	463b      	mov	r3, r7
 800c368:	4618      	mov	r0, r3
 800c36a:	f7ff ff6b 	bl	800c244 <prvSampleTimeNow>
 800c36e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b09      	cmp	r3, #9
 800c374:	f200 8097 	bhi.w	800c4a6 <prvProcessReceivedCommands+0x19e>
 800c378:	a201      	add	r2, pc, #4	; (adr r2, 800c380 <prvProcessReceivedCommands+0x78>)
 800c37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37e:	bf00      	nop
 800c380:	0800c3a9 	.word	0x0800c3a9
 800c384:	0800c3a9 	.word	0x0800c3a9
 800c388:	0800c3a9 	.word	0x0800c3a9
 800c38c:	0800c41d 	.word	0x0800c41d
 800c390:	0800c431 	.word	0x0800c431
 800c394:	0800c47b 	.word	0x0800c47b
 800c398:	0800c3a9 	.word	0x0800c3a9
 800c39c:	0800c3a9 	.word	0x0800c3a9
 800c3a0:	0800c41d 	.word	0x0800c41d
 800c3a4:	0800c431 	.word	0x0800c431
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ae:	f043 0301 	orr.w	r3, r3, #1
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	18d1      	adds	r1, r2, r3
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c8:	f7ff ff5c 	bl	800c284 <prvInsertTimerInActiveList>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d069      	beq.n	800c4a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3e0:	f003 0304 	and.w	r3, r3, #4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d05e      	beq.n	800c4a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ec:	699b      	ldr	r3, [r3, #24]
 800c3ee:	441a      	add	r2, r3
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3fa:	f7ff fe05 	bl	800c008 <xTimerGenericCommand>
 800c3fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c400:	6a3b      	ldr	r3, [r7, #32]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d14f      	bne.n	800c4a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	61bb      	str	r3, [r7, #24]
}
 800c418:	bf00      	nop
 800c41a:	e7fe      	b.n	800c41a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c422:	f023 0301 	bic.w	r3, r3, #1
 800c426:	b2da      	uxtb	r2, r3
 800c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c42e:	e03a      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c436:	f043 0301 	orr.w	r3, r3, #1
 800c43a:	b2da      	uxtb	r2, r3
 800c43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c446:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44a:	699b      	ldr	r3, [r3, #24]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d10a      	bne.n	800c466 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	617b      	str	r3, [r7, #20]
}
 800c462:	bf00      	nop
 800c464:	e7fe      	b.n	800c464 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c468:	699a      	ldr	r2, [r3, #24]
 800c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46c:	18d1      	adds	r1, r2, r3
 800c46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c474:	f7ff ff06 	bl	800c284 <prvInsertTimerInActiveList>
					break;
 800c478:	e015      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c480:	f003 0302 	and.w	r3, r3, #2
 800c484:	2b00      	cmp	r3, #0
 800c486:	d103      	bne.n	800c490 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c48a:	f000 fbe1 	bl	800cc50 <vPortFree>
 800c48e:	e00a      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c496:	f023 0301 	bic.w	r3, r3, #1
 800c49a:	b2da      	uxtb	r2, r3
 800c49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c4a2:	e000      	b.n	800c4a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c4a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4a6:	4b08      	ldr	r3, [pc, #32]	; (800c4c8 <prvProcessReceivedCommands+0x1c0>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	1d39      	adds	r1, r7, #4
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fe fc16 	bl	800ace0 <xQueueReceive>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f47f af2a 	bne.w	800c310 <prvProcessReceivedCommands+0x8>
	}
}
 800c4bc:	bf00      	nop
 800c4be:	bf00      	nop
 800c4c0:	3730      	adds	r7, #48	; 0x30
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	200016c0 	.word	0x200016c0

0800c4cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b088      	sub	sp, #32
 800c4d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4d2:	e048      	b.n	800c566 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4d4:	4b2d      	ldr	r3, [pc, #180]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4de:	4b2b      	ldr	r3, [pc, #172]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7fe f92f 	bl	800a750 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c500:	f003 0304 	and.w	r3, r3, #4
 800c504:	2b00      	cmp	r3, #0
 800c506:	d02e      	beq.n	800c566 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	693a      	ldr	r2, [r7, #16]
 800c50e:	4413      	add	r3, r2
 800c510:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	429a      	cmp	r2, r3
 800c518:	d90e      	bls.n	800c538 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c526:	4b19      	ldr	r3, [pc, #100]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	3304      	adds	r3, #4
 800c52e:	4619      	mov	r1, r3
 800c530:	4610      	mov	r0, r2
 800c532:	f7fe f8d4 	bl	800a6de <vListInsert>
 800c536:	e016      	b.n	800c566 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c538:	2300      	movs	r3, #0
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	2300      	movs	r3, #0
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	2100      	movs	r1, #0
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f7ff fd60 	bl	800c008 <xTimerGenericCommand>
 800c548:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d10a      	bne.n	800c566 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	603b      	str	r3, [r7, #0]
}
 800c562:	bf00      	nop
 800c564:	e7fe      	b.n	800c564 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c566:	4b09      	ldr	r3, [pc, #36]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1b1      	bne.n	800c4d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c570:	4b06      	ldr	r3, [pc, #24]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c576:	4b06      	ldr	r3, [pc, #24]	; (800c590 <prvSwitchTimerLists+0xc4>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a04      	ldr	r2, [pc, #16]	; (800c58c <prvSwitchTimerLists+0xc0>)
 800c57c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c57e:	4a04      	ldr	r2, [pc, #16]	; (800c590 <prvSwitchTimerLists+0xc4>)
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	6013      	str	r3, [r2, #0]
}
 800c584:	bf00      	nop
 800c586:	3718      	adds	r7, #24
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	200016b8 	.word	0x200016b8
 800c590:	200016bc 	.word	0x200016bc

0800c594 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c59a:	f000 f96b 	bl	800c874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c59e:	4b15      	ldr	r3, [pc, #84]	; (800c5f4 <prvCheckForValidListAndQueue+0x60>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d120      	bne.n	800c5e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c5a6:	4814      	ldr	r0, [pc, #80]	; (800c5f8 <prvCheckForValidListAndQueue+0x64>)
 800c5a8:	f7fe f848 	bl	800a63c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5ac:	4813      	ldr	r0, [pc, #76]	; (800c5fc <prvCheckForValidListAndQueue+0x68>)
 800c5ae:	f7fe f845 	bl	800a63c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c5b2:	4b13      	ldr	r3, [pc, #76]	; (800c600 <prvCheckForValidListAndQueue+0x6c>)
 800c5b4:	4a10      	ldr	r2, [pc, #64]	; (800c5f8 <prvCheckForValidListAndQueue+0x64>)
 800c5b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c5b8:	4b12      	ldr	r3, [pc, #72]	; (800c604 <prvCheckForValidListAndQueue+0x70>)
 800c5ba:	4a10      	ldr	r2, [pc, #64]	; (800c5fc <prvCheckForValidListAndQueue+0x68>)
 800c5bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5be:	2300      	movs	r3, #0
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	4b11      	ldr	r3, [pc, #68]	; (800c608 <prvCheckForValidListAndQueue+0x74>)
 800c5c4:	4a11      	ldr	r2, [pc, #68]	; (800c60c <prvCheckForValidListAndQueue+0x78>)
 800c5c6:	2110      	movs	r1, #16
 800c5c8:	200a      	movs	r0, #10
 800c5ca:	f7fe f953 	bl	800a874 <xQueueGenericCreateStatic>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	4a08      	ldr	r2, [pc, #32]	; (800c5f4 <prvCheckForValidListAndQueue+0x60>)
 800c5d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5d4:	4b07      	ldr	r3, [pc, #28]	; (800c5f4 <prvCheckForValidListAndQueue+0x60>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d005      	beq.n	800c5e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5dc:	4b05      	ldr	r3, [pc, #20]	; (800c5f4 <prvCheckForValidListAndQueue+0x60>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	490b      	ldr	r1, [pc, #44]	; (800c610 <prvCheckForValidListAndQueue+0x7c>)
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe fd6c 	bl	800b0c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5e8:	f000 f974 	bl	800c8d4 <vPortExitCritical>
}
 800c5ec:	bf00      	nop
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	200016c0 	.word	0x200016c0
 800c5f8:	20001690 	.word	0x20001690
 800c5fc:	200016a4 	.word	0x200016a4
 800c600:	200016b8 	.word	0x200016b8
 800c604:	200016bc 	.word	0x200016bc
 800c608:	2000176c 	.word	0x2000176c
 800c60c:	200016cc 	.word	0x200016cc
 800c610:	080147ec 	.word	0x080147ec

0800c614 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c614:	b480      	push	{r7}
 800c616:	b085      	sub	sp, #20
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	3b04      	subs	r3, #4
 800c624:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c62c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	3b04      	subs	r3, #4
 800c632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	f023 0201 	bic.w	r2, r3, #1
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	3b04      	subs	r3, #4
 800c642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c644:	4a0c      	ldr	r2, [pc, #48]	; (800c678 <pxPortInitialiseStack+0x64>)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	3b14      	subs	r3, #20
 800c64e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	3b04      	subs	r3, #4
 800c65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f06f 0202 	mvn.w	r2, #2
 800c662:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	3b20      	subs	r3, #32
 800c668:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c66a:	68fb      	ldr	r3, [r7, #12]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr
 800c678:	0800c67d 	.word	0x0800c67d

0800c67c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c682:	2300      	movs	r3, #0
 800c684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c686:	4b12      	ldr	r3, [pc, #72]	; (800c6d0 <prvTaskExitError+0x54>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c68e:	d00a      	beq.n	800c6a6 <prvTaskExitError+0x2a>
	__asm volatile
 800c690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	60fb      	str	r3, [r7, #12]
}
 800c6a2:	bf00      	nop
 800c6a4:	e7fe      	b.n	800c6a4 <prvTaskExitError+0x28>
	__asm volatile
 800c6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6aa:	f383 8811 	msr	BASEPRI, r3
 800c6ae:	f3bf 8f6f 	isb	sy
 800c6b2:	f3bf 8f4f 	dsb	sy
 800c6b6:	60bb      	str	r3, [r7, #8]
}
 800c6b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6ba:	bf00      	nop
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d0fc      	beq.n	800c6bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6c2:	bf00      	nop
 800c6c4:	bf00      	nop
 800c6c6:	3714      	adds	r7, #20
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr
 800c6d0:	200000c8 	.word	0x200000c8
	...

0800c6e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6e0:	4b07      	ldr	r3, [pc, #28]	; (800c700 <pxCurrentTCBConst2>)
 800c6e2:	6819      	ldr	r1, [r3, #0]
 800c6e4:	6808      	ldr	r0, [r1, #0]
 800c6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ea:	f380 8809 	msr	PSP, r0
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f04f 0000 	mov.w	r0, #0
 800c6f6:	f380 8811 	msr	BASEPRI, r0
 800c6fa:	4770      	bx	lr
 800c6fc:	f3af 8000 	nop.w

0800c700 <pxCurrentTCBConst2>:
 800c700:	20001190 	.word	0x20001190
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop

0800c708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c708:	4808      	ldr	r0, [pc, #32]	; (800c72c <prvPortStartFirstTask+0x24>)
 800c70a:	6800      	ldr	r0, [r0, #0]
 800c70c:	6800      	ldr	r0, [r0, #0]
 800c70e:	f380 8808 	msr	MSP, r0
 800c712:	f04f 0000 	mov.w	r0, #0
 800c716:	f380 8814 	msr	CONTROL, r0
 800c71a:	b662      	cpsie	i
 800c71c:	b661      	cpsie	f
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	df00      	svc	0
 800c728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c72a:	bf00      	nop
 800c72c:	e000ed08 	.word	0xe000ed08

0800c730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c736:	4b46      	ldr	r3, [pc, #280]	; (800c850 <xPortStartScheduler+0x120>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a46      	ldr	r2, [pc, #280]	; (800c854 <xPortStartScheduler+0x124>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d10a      	bne.n	800c756 <xPortStartScheduler+0x26>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c744:	f383 8811 	msr	BASEPRI, r3
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	f3bf 8f4f 	dsb	sy
 800c750:	613b      	str	r3, [r7, #16]
}
 800c752:	bf00      	nop
 800c754:	e7fe      	b.n	800c754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c756:	4b3e      	ldr	r3, [pc, #248]	; (800c850 <xPortStartScheduler+0x120>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a3f      	ldr	r2, [pc, #252]	; (800c858 <xPortStartScheduler+0x128>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d10a      	bne.n	800c776 <xPortStartScheduler+0x46>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	60fb      	str	r3, [r7, #12]
}
 800c772:	bf00      	nop
 800c774:	e7fe      	b.n	800c774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c776:	4b39      	ldr	r3, [pc, #228]	; (800c85c <xPortStartScheduler+0x12c>)
 800c778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	22ff      	movs	r2, #255	; 0xff
 800c786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c790:	78fb      	ldrb	r3, [r7, #3]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	4b31      	ldr	r3, [pc, #196]	; (800c860 <xPortStartScheduler+0x130>)
 800c79c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c79e:	4b31      	ldr	r3, [pc, #196]	; (800c864 <xPortStartScheduler+0x134>)
 800c7a0:	2207      	movs	r2, #7
 800c7a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7a4:	e009      	b.n	800c7ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c7a6:	4b2f      	ldr	r3, [pc, #188]	; (800c864 <xPortStartScheduler+0x134>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	4a2d      	ldr	r2, [pc, #180]	; (800c864 <xPortStartScheduler+0x134>)
 800c7ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7b0:	78fb      	ldrb	r3, [r7, #3]
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7ba:	78fb      	ldrb	r3, [r7, #3]
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7c2:	2b80      	cmp	r3, #128	; 0x80
 800c7c4:	d0ef      	beq.n	800c7a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7c6:	4b27      	ldr	r3, [pc, #156]	; (800c864 <xPortStartScheduler+0x134>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f1c3 0307 	rsb	r3, r3, #7
 800c7ce:	2b04      	cmp	r3, #4
 800c7d0:	d00a      	beq.n	800c7e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	60bb      	str	r3, [r7, #8]
}
 800c7e4:	bf00      	nop
 800c7e6:	e7fe      	b.n	800c7e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7e8:	4b1e      	ldr	r3, [pc, #120]	; (800c864 <xPortStartScheduler+0x134>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	021b      	lsls	r3, r3, #8
 800c7ee:	4a1d      	ldr	r2, [pc, #116]	; (800c864 <xPortStartScheduler+0x134>)
 800c7f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7f2:	4b1c      	ldr	r3, [pc, #112]	; (800c864 <xPortStartScheduler+0x134>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c7fa:	4a1a      	ldr	r2, [pc, #104]	; (800c864 <xPortStartScheduler+0x134>)
 800c7fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	b2da      	uxtb	r2, r3
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c806:	4b18      	ldr	r3, [pc, #96]	; (800c868 <xPortStartScheduler+0x138>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a17      	ldr	r2, [pc, #92]	; (800c868 <xPortStartScheduler+0x138>)
 800c80c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c812:	4b15      	ldr	r3, [pc, #84]	; (800c868 <xPortStartScheduler+0x138>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a14      	ldr	r2, [pc, #80]	; (800c868 <xPortStartScheduler+0x138>)
 800c818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c81c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c81e:	f000 f8dd 	bl	800c9dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c822:	4b12      	ldr	r3, [pc, #72]	; (800c86c <xPortStartScheduler+0x13c>)
 800c824:	2200      	movs	r2, #0
 800c826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c828:	f000 f8fc 	bl	800ca24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c82c:	4b10      	ldr	r3, [pc, #64]	; (800c870 <xPortStartScheduler+0x140>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a0f      	ldr	r2, [pc, #60]	; (800c870 <xPortStartScheduler+0x140>)
 800c832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c838:	f7ff ff66 	bl	800c708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c83c:	f7ff f850 	bl	800b8e0 <vTaskSwitchContext>
	prvTaskExitError();
 800c840:	f7ff ff1c 	bl	800c67c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3718      	adds	r7, #24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	e000ed00 	.word	0xe000ed00
 800c854:	410fc271 	.word	0x410fc271
 800c858:	410fc270 	.word	0x410fc270
 800c85c:	e000e400 	.word	0xe000e400
 800c860:	200017bc 	.word	0x200017bc
 800c864:	200017c0 	.word	0x200017c0
 800c868:	e000ed20 	.word	0xe000ed20
 800c86c:	200000c8 	.word	0x200000c8
 800c870:	e000ef34 	.word	0xe000ef34

0800c874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	607b      	str	r3, [r7, #4]
}
 800c88c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c88e:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <vPortEnterCritical+0x58>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	3301      	adds	r3, #1
 800c894:	4a0d      	ldr	r2, [pc, #52]	; (800c8cc <vPortEnterCritical+0x58>)
 800c896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c898:	4b0c      	ldr	r3, [pc, #48]	; (800c8cc <vPortEnterCritical+0x58>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d10f      	bne.n	800c8c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8a0:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <vPortEnterCritical+0x5c>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00a      	beq.n	800c8c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	603b      	str	r3, [r7, #0]
}
 800c8bc:	bf00      	nop
 800c8be:	e7fe      	b.n	800c8be <vPortEnterCritical+0x4a>
	}
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	200000c8 	.word	0x200000c8
 800c8d0:	e000ed04 	.word	0xe000ed04

0800c8d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8da:	4b12      	ldr	r3, [pc, #72]	; (800c924 <vPortExitCritical+0x50>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10a      	bne.n	800c8f8 <vPortExitCritical+0x24>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	607b      	str	r3, [r7, #4]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8f8:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <vPortExitCritical+0x50>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	4a09      	ldr	r2, [pc, #36]	; (800c924 <vPortExitCritical+0x50>)
 800c900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c902:	4b08      	ldr	r3, [pc, #32]	; (800c924 <vPortExitCritical+0x50>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d105      	bne.n	800c916 <vPortExitCritical+0x42>
 800c90a:	2300      	movs	r3, #0
 800c90c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	f383 8811 	msr	BASEPRI, r3
}
 800c914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c916:	bf00      	nop
 800c918:	370c      	adds	r7, #12
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	200000c8 	.word	0x200000c8
	...

0800c930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c930:	f3ef 8009 	mrs	r0, PSP
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	4b15      	ldr	r3, [pc, #84]	; (800c990 <pxCurrentTCBConst>)
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	f01e 0f10 	tst.w	lr, #16
 800c940:	bf08      	it	eq
 800c942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94a:	6010      	str	r0, [r2, #0]
 800c94c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c950:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c954:	f380 8811 	msr	BASEPRI, r0
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f7fe ffbe 	bl	800b8e0 <vTaskSwitchContext>
 800c964:	f04f 0000 	mov.w	r0, #0
 800c968:	f380 8811 	msr	BASEPRI, r0
 800c96c:	bc09      	pop	{r0, r3}
 800c96e:	6819      	ldr	r1, [r3, #0]
 800c970:	6808      	ldr	r0, [r1, #0]
 800c972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c976:	f01e 0f10 	tst.w	lr, #16
 800c97a:	bf08      	it	eq
 800c97c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c980:	f380 8809 	msr	PSP, r0
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	f3af 8000 	nop.w

0800c990 <pxCurrentTCBConst>:
 800c990:	20001190 	.word	0x20001190
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop

0800c998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	607b      	str	r3, [r7, #4]
}
 800c9b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9b2:	f7fe fedb 	bl	800b76c <xTaskIncrementTick>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9bc:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <xPortSysTickHandler+0x40>)
 800c9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9c2:	601a      	str	r2, [r3, #0]
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	f383 8811 	msr	BASEPRI, r3
}
 800c9ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9d0:	bf00      	nop
 800c9d2:	3708      	adds	r7, #8
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	e000ed04 	.word	0xe000ed04

0800c9dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9dc:	b480      	push	{r7}
 800c9de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9e0:	4b0b      	ldr	r3, [pc, #44]	; (800ca10 <vPortSetupTimerInterrupt+0x34>)
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ca14 <vPortSetupTimerInterrupt+0x38>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9ec:	4b0a      	ldr	r3, [pc, #40]	; (800ca18 <vPortSetupTimerInterrupt+0x3c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a0a      	ldr	r2, [pc, #40]	; (800ca1c <vPortSetupTimerInterrupt+0x40>)
 800c9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9f6:	099b      	lsrs	r3, r3, #6
 800c9f8:	4a09      	ldr	r2, [pc, #36]	; (800ca20 <vPortSetupTimerInterrupt+0x44>)
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9fe:	4b04      	ldr	r3, [pc, #16]	; (800ca10 <vPortSetupTimerInterrupt+0x34>)
 800ca00:	2207      	movs	r2, #7
 800ca02:	601a      	str	r2, [r3, #0]
}
 800ca04:	bf00      	nop
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	e000e010 	.word	0xe000e010
 800ca14:	e000e018 	.word	0xe000e018
 800ca18:	20000004 	.word	0x20000004
 800ca1c:	10624dd3 	.word	0x10624dd3
 800ca20:	e000e014 	.word	0xe000e014

0800ca24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ca34 <vPortEnableVFP+0x10>
 800ca28:	6801      	ldr	r1, [r0, #0]
 800ca2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ca2e:	6001      	str	r1, [r0, #0]
 800ca30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca32:	bf00      	nop
 800ca34:	e000ed88 	.word	0xe000ed88

0800ca38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca3e:	f3ef 8305 	mrs	r3, IPSR
 800ca42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b0f      	cmp	r3, #15
 800ca48:	d914      	bls.n	800ca74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca4a:	4a17      	ldr	r2, [pc, #92]	; (800caa8 <vPortValidateInterruptPriority+0x70>)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	4413      	add	r3, r2
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca54:	4b15      	ldr	r3, [pc, #84]	; (800caac <vPortValidateInterruptPriority+0x74>)
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	7afa      	ldrb	r2, [r7, #11]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d20a      	bcs.n	800ca74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	607b      	str	r3, [r7, #4]
}
 800ca70:	bf00      	nop
 800ca72:	e7fe      	b.n	800ca72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca74:	4b0e      	ldr	r3, [pc, #56]	; (800cab0 <vPortValidateInterruptPriority+0x78>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca7c:	4b0d      	ldr	r3, [pc, #52]	; (800cab4 <vPortValidateInterruptPriority+0x7c>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d90a      	bls.n	800ca9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ca84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca88:	f383 8811 	msr	BASEPRI, r3
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f3bf 8f4f 	dsb	sy
 800ca94:	603b      	str	r3, [r7, #0]
}
 800ca96:	bf00      	nop
 800ca98:	e7fe      	b.n	800ca98 <vPortValidateInterruptPriority+0x60>
	}
 800ca9a:	bf00      	nop
 800ca9c:	3714      	adds	r7, #20
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	e000e3f0 	.word	0xe000e3f0
 800caac:	200017bc 	.word	0x200017bc
 800cab0:	e000ed0c 	.word	0xe000ed0c
 800cab4:	200017c0 	.word	0x200017c0

0800cab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08a      	sub	sp, #40	; 0x28
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cac4:	f7fe fd96 	bl	800b5f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cac8:	4b5b      	ldr	r3, [pc, #364]	; (800cc38 <pvPortMalloc+0x180>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d101      	bne.n	800cad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cad0:	f000 f920 	bl	800cd14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cad4:	4b59      	ldr	r3, [pc, #356]	; (800cc3c <pvPortMalloc+0x184>)
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4013      	ands	r3, r2
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f040 8093 	bne.w	800cc08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d01d      	beq.n	800cb24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cae8:	2208      	movs	r2, #8
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4413      	add	r3, r2
 800caee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f003 0307 	and.w	r3, r3, #7
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d014      	beq.n	800cb24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f023 0307 	bic.w	r3, r3, #7
 800cb00:	3308      	adds	r3, #8
 800cb02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f003 0307 	and.w	r3, r3, #7
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00a      	beq.n	800cb24 <pvPortMalloc+0x6c>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	617b      	str	r3, [r7, #20]
}
 800cb20:	bf00      	nop
 800cb22:	e7fe      	b.n	800cb22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d06e      	beq.n	800cc08 <pvPortMalloc+0x150>
 800cb2a:	4b45      	ldr	r3, [pc, #276]	; (800cc40 <pvPortMalloc+0x188>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d869      	bhi.n	800cc08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb34:	4b43      	ldr	r3, [pc, #268]	; (800cc44 <pvPortMalloc+0x18c>)
 800cb36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb38:	4b42      	ldr	r3, [pc, #264]	; (800cc44 <pvPortMalloc+0x18c>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb3e:	e004      	b.n	800cb4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d903      	bls.n	800cb5c <pvPortMalloc+0xa4>
 800cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1f1      	bne.n	800cb40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb5c:	4b36      	ldr	r3, [pc, #216]	; (800cc38 <pvPortMalloc+0x180>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d050      	beq.n	800cc08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb66:	6a3b      	ldr	r3, [r7, #32]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2208      	movs	r2, #8
 800cb6c:	4413      	add	r3, r2
 800cb6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	6a3b      	ldr	r3, [r7, #32]
 800cb76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	1ad2      	subs	r2, r2, r3
 800cb80:	2308      	movs	r3, #8
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d91f      	bls.n	800cbc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	f003 0307 	and.w	r3, r3, #7
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00a      	beq.n	800cbb0 <pvPortMalloc+0xf8>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	613b      	str	r3, [r7, #16]
}
 800cbac:	bf00      	nop
 800cbae:	e7fe      	b.n	800cbae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	685a      	ldr	r2, [r3, #4]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	1ad2      	subs	r2, r2, r3
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbc2:	69b8      	ldr	r0, [r7, #24]
 800cbc4:	f000 f908 	bl	800cdd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbc8:	4b1d      	ldr	r3, [pc, #116]	; (800cc40 <pvPortMalloc+0x188>)
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	1ad3      	subs	r3, r2, r3
 800cbd2:	4a1b      	ldr	r2, [pc, #108]	; (800cc40 <pvPortMalloc+0x188>)
 800cbd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbd6:	4b1a      	ldr	r3, [pc, #104]	; (800cc40 <pvPortMalloc+0x188>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	4b1b      	ldr	r3, [pc, #108]	; (800cc48 <pvPortMalloc+0x190>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d203      	bcs.n	800cbea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbe2:	4b17      	ldr	r3, [pc, #92]	; (800cc40 <pvPortMalloc+0x188>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a18      	ldr	r2, [pc, #96]	; (800cc48 <pvPortMalloc+0x190>)
 800cbe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	4b13      	ldr	r3, [pc, #76]	; (800cc3c <pvPortMalloc+0x184>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	431a      	orrs	r2, r3
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cbfe:	4b13      	ldr	r3, [pc, #76]	; (800cc4c <pvPortMalloc+0x194>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	4a11      	ldr	r2, [pc, #68]	; (800cc4c <pvPortMalloc+0x194>)
 800cc06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc08:	f7fe fd02 	bl	800b610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	f003 0307 	and.w	r3, r3, #7
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00a      	beq.n	800cc2c <pvPortMalloc+0x174>
	__asm volatile
 800cc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	60fb      	str	r3, [r7, #12]
}
 800cc28:	bf00      	nop
 800cc2a:	e7fe      	b.n	800cc2a <pvPortMalloc+0x172>
	return pvReturn;
 800cc2c:	69fb      	ldr	r3, [r7, #28]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3728      	adds	r7, #40	; 0x28
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	200053cc 	.word	0x200053cc
 800cc3c:	200053e0 	.word	0x200053e0
 800cc40:	200053d0 	.word	0x200053d0
 800cc44:	200053c4 	.word	0x200053c4
 800cc48:	200053d4 	.word	0x200053d4
 800cc4c:	200053d8 	.word	0x200053d8

0800cc50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d04d      	beq.n	800ccfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc62:	2308      	movs	r3, #8
 800cc64:	425b      	negs	r3, r3
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	4413      	add	r3, r2
 800cc6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	4b24      	ldr	r3, [pc, #144]	; (800cd08 <vPortFree+0xb8>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4013      	ands	r3, r2
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d10a      	bne.n	800cc94 <vPortFree+0x44>
	__asm volatile
 800cc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	60fb      	str	r3, [r7, #12]
}
 800cc90:	bf00      	nop
 800cc92:	e7fe      	b.n	800cc92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00a      	beq.n	800ccb2 <vPortFree+0x62>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	60bb      	str	r3, [r7, #8]
}
 800ccae:	bf00      	nop
 800ccb0:	e7fe      	b.n	800ccb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	4b14      	ldr	r3, [pc, #80]	; (800cd08 <vPortFree+0xb8>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4013      	ands	r3, r2
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d01e      	beq.n	800ccfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d11a      	bne.n	800ccfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	4b0e      	ldr	r3, [pc, #56]	; (800cd08 <vPortFree+0xb8>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	43db      	mvns	r3, r3
 800ccd2:	401a      	ands	r2, r3
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ccd8:	f7fe fc8c 	bl	800b5f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	685a      	ldr	r2, [r3, #4]
 800cce0:	4b0a      	ldr	r3, [pc, #40]	; (800cd0c <vPortFree+0xbc>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4413      	add	r3, r2
 800cce6:	4a09      	ldr	r2, [pc, #36]	; (800cd0c <vPortFree+0xbc>)
 800cce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccea:	6938      	ldr	r0, [r7, #16]
 800ccec:	f000 f874 	bl	800cdd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ccf0:	4b07      	ldr	r3, [pc, #28]	; (800cd10 <vPortFree+0xc0>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	4a06      	ldr	r2, [pc, #24]	; (800cd10 <vPortFree+0xc0>)
 800ccf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ccfa:	f7fe fc89 	bl	800b610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ccfe:	bf00      	nop
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	200053e0 	.word	0x200053e0
 800cd0c:	200053d0 	.word	0x200053d0
 800cd10:	200053dc 	.word	0x200053dc

0800cd14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd14:	b480      	push	{r7}
 800cd16:	b085      	sub	sp, #20
 800cd18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cd1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd20:	4b27      	ldr	r3, [pc, #156]	; (800cdc0 <prvHeapInit+0xac>)
 800cd22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f003 0307 	and.w	r3, r3, #7
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00c      	beq.n	800cd48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	3307      	adds	r3, #7
 800cd32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f023 0307 	bic.w	r3, r3, #7
 800cd3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd3c:	68ba      	ldr	r2, [r7, #8]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	4a1f      	ldr	r2, [pc, #124]	; (800cdc0 <prvHeapInit+0xac>)
 800cd44:	4413      	add	r3, r2
 800cd46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd4c:	4a1d      	ldr	r2, [pc, #116]	; (800cdc4 <prvHeapInit+0xb0>)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd52:	4b1c      	ldr	r3, [pc, #112]	; (800cdc4 <prvHeapInit+0xb0>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	68ba      	ldr	r2, [r7, #8]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd60:	2208      	movs	r2, #8
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	1a9b      	subs	r3, r3, r2
 800cd66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f023 0307 	bic.w	r3, r3, #7
 800cd6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	4a15      	ldr	r2, [pc, #84]	; (800cdc8 <prvHeapInit+0xb4>)
 800cd74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd76:	4b14      	ldr	r3, [pc, #80]	; (800cdc8 <prvHeapInit+0xb4>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd7e:	4b12      	ldr	r3, [pc, #72]	; (800cdc8 <prvHeapInit+0xb4>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2200      	movs	r2, #0
 800cd84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	1ad2      	subs	r2, r2, r3
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd94:	4b0c      	ldr	r3, [pc, #48]	; (800cdc8 <prvHeapInit+0xb4>)
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	4a0a      	ldr	r2, [pc, #40]	; (800cdcc <prvHeapInit+0xb8>)
 800cda2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	4a09      	ldr	r2, [pc, #36]	; (800cdd0 <prvHeapInit+0xbc>)
 800cdaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cdac:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <prvHeapInit+0xc0>)
 800cdae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cdb2:	601a      	str	r2, [r3, #0]
}
 800cdb4:	bf00      	nop
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr
 800cdc0:	200017c4 	.word	0x200017c4
 800cdc4:	200053c4 	.word	0x200053c4
 800cdc8:	200053cc 	.word	0x200053cc
 800cdcc:	200053d4 	.word	0x200053d4
 800cdd0:	200053d0 	.word	0x200053d0
 800cdd4:	200053e0 	.word	0x200053e0

0800cdd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cde0:	4b28      	ldr	r3, [pc, #160]	; (800ce84 <prvInsertBlockIntoFreeList+0xac>)
 800cde2:	60fb      	str	r3, [r7, #12]
 800cde4:	e002      	b.n	800cdec <prvInsertBlockIntoFreeList+0x14>
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	60fb      	str	r3, [r7, #12]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d8f7      	bhi.n	800cde6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	4413      	add	r3, r2
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d108      	bne.n	800ce1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	685a      	ldr	r2, [r3, #4]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	441a      	add	r2, r3
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	441a      	add	r2, r3
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d118      	bne.n	800ce60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	4b15      	ldr	r3, [pc, #84]	; (800ce88 <prvInsertBlockIntoFreeList+0xb0>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d00d      	beq.n	800ce56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	685a      	ldr	r2, [r3, #4]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	441a      	add	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	e008      	b.n	800ce68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce56:	4b0c      	ldr	r3, [pc, #48]	; (800ce88 <prvInsertBlockIntoFreeList+0xb0>)
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	e003      	b.n	800ce68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d002      	beq.n	800ce76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce76:	bf00      	nop
 800ce78:	3714      	adds	r7, #20
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	200053c4 	.word	0x200053c4
 800ce88:	200053cc 	.word	0x200053cc

0800ce8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce90:	2201      	movs	r2, #1
 800ce92:	4912      	ldr	r1, [pc, #72]	; (800cedc <MX_USB_DEVICE_Init+0x50>)
 800ce94:	4812      	ldr	r0, [pc, #72]	; (800cee0 <MX_USB_DEVICE_Init+0x54>)
 800ce96:	f7fc f8e9 	bl	800906c <USBD_Init>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d004      	beq.n	800ceaa <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800cea0:	4b10      	ldr	r3, [pc, #64]	; (800cee4 <MX_USB_DEVICE_Init+0x58>)
 800cea2:	2201      	movs	r2, #1
 800cea4:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800cea6:	f7f4 ff6b 	bl	8001d80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800ceaa:	490f      	ldr	r1, [pc, #60]	; (800cee8 <MX_USB_DEVICE_Init+0x5c>)
 800ceac:	480c      	ldr	r0, [pc, #48]	; (800cee0 <MX_USB_DEVICE_Init+0x54>)
 800ceae:	f7fc f90d 	bl	80090cc <USBD_RegisterClass>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d004      	beq.n	800cec2 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800ceb8:	4b0a      	ldr	r3, [pc, #40]	; (800cee4 <MX_USB_DEVICE_Init+0x58>)
 800ceba:	2201      	movs	r2, #1
 800cebc:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800cebe:	f7f4 ff5f 	bl	8001d80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cec2:	4807      	ldr	r0, [pc, #28]	; (800cee0 <MX_USB_DEVICE_Init+0x54>)
 800cec4:	f7fc f929 	bl	800911a <USBD_Start>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d004      	beq.n	800ced8 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800cece:	4b05      	ldr	r3, [pc, #20]	; (800cee4 <MX_USB_DEVICE_Init+0x58>)
 800ced0:	2201      	movs	r2, #1
 800ced2:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800ced4:	f7f4 ff54 	bl	8001d80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ced8:	bf00      	nop
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	200000cc 	.word	0x200000cc
 800cee0:	20005490 	.word	0x20005490
 800cee4:	200053e4 	.word	0x200053e4
 800cee8:	20000018 	.word	0x20000018

0800ceec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	4603      	mov	r3, r0
 800cef4:	6039      	str	r1, [r7, #0]
 800cef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	2212      	movs	r2, #18
 800cefc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cefe:	4b03      	ldr	r3, [pc, #12]	; (800cf0c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr
 800cf0c:	200000e8 	.word	0x200000e8

0800cf10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	4603      	mov	r3, r0
 800cf18:	6039      	str	r1, [r7, #0]
 800cf1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	2204      	movs	r2, #4
 800cf20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cf22:	4b03      	ldr	r3, [pc, #12]	; (800cf30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	370c      	adds	r7, #12
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr
 800cf30:	200000fc 	.word	0x200000fc

0800cf34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	6039      	str	r1, [r7, #0]
 800cf3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf40:	79fb      	ldrb	r3, [r7, #7]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d105      	bne.n	800cf52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf46:	683a      	ldr	r2, [r7, #0]
 800cf48:	4907      	ldr	r1, [pc, #28]	; (800cf68 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf4a:	4808      	ldr	r0, [pc, #32]	; (800cf6c <USBD_FS_ProductStrDescriptor+0x38>)
 800cf4c:	f7fd f925 	bl	800a19a <USBD_GetString>
 800cf50:	e004      	b.n	800cf5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	4904      	ldr	r1, [pc, #16]	; (800cf68 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf56:	4805      	ldr	r0, [pc, #20]	; (800cf6c <USBD_FS_ProductStrDescriptor+0x38>)
 800cf58:	f7fd f91f 	bl	800a19a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf5c:	4b02      	ldr	r3, [pc, #8]	; (800cf68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	20005760 	.word	0x20005760
 800cf6c:	080147f4 	.word	0x080147f4

0800cf70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	6039      	str	r1, [r7, #0]
 800cf7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	4904      	ldr	r1, [pc, #16]	; (800cf90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cf80:	4804      	ldr	r0, [pc, #16]	; (800cf94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cf82:	f7fd f90a 	bl	800a19a <USBD_GetString>
  return USBD_StrDesc;
 800cf86:	4b02      	ldr	r3, [pc, #8]	; (800cf90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	20005760 	.word	0x20005760
 800cf94:	0801480c 	.word	0x0801480c

0800cf98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	6039      	str	r1, [r7, #0]
 800cfa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	221a      	movs	r2, #26
 800cfa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cfaa:	f000 f843 	bl	800d034 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cfae:	4b02      	ldr	r3, [pc, #8]	; (800cfb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	20000100 	.word	0x20000100

0800cfbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	6039      	str	r1, [r7, #0]
 800cfc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cfc8:	79fb      	ldrb	r3, [r7, #7]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d105      	bne.n	800cfda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cfce:	683a      	ldr	r2, [r7, #0]
 800cfd0:	4907      	ldr	r1, [pc, #28]	; (800cff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cfd2:	4808      	ldr	r0, [pc, #32]	; (800cff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cfd4:	f7fd f8e1 	bl	800a19a <USBD_GetString>
 800cfd8:	e004      	b.n	800cfe4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	4904      	ldr	r1, [pc, #16]	; (800cff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cfde:	4805      	ldr	r0, [pc, #20]	; (800cff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cfe0:	f7fd f8db 	bl	800a19a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfe4:	4b02      	ldr	r3, [pc, #8]	; (800cff0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3708      	adds	r7, #8
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	20005760 	.word	0x20005760
 800cff4:	08014820 	.word	0x08014820

0800cff8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	4603      	mov	r3, r0
 800d000:	6039      	str	r1, [r7, #0]
 800d002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d004:	79fb      	ldrb	r3, [r7, #7]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d105      	bne.n	800d016 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d00a:	683a      	ldr	r2, [r7, #0]
 800d00c:	4907      	ldr	r1, [pc, #28]	; (800d02c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d00e:	4808      	ldr	r0, [pc, #32]	; (800d030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d010:	f7fd f8c3 	bl	800a19a <USBD_GetString>
 800d014:	e004      	b.n	800d020 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d016:	683a      	ldr	r2, [r7, #0]
 800d018:	4904      	ldr	r1, [pc, #16]	; (800d02c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d01a:	4805      	ldr	r0, [pc, #20]	; (800d030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d01c:	f7fd f8bd 	bl	800a19a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d020:	4b02      	ldr	r3, [pc, #8]	; (800d02c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d022:	4618      	mov	r0, r3
 800d024:	3708      	adds	r7, #8
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	20005760 	.word	0x20005760
 800d030:	0801482c 	.word	0x0801482c

0800d034 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d03a:	4b0f      	ldr	r3, [pc, #60]	; (800d078 <Get_SerialNum+0x44>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d040:	4b0e      	ldr	r3, [pc, #56]	; (800d07c <Get_SerialNum+0x48>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d046:	4b0e      	ldr	r3, [pc, #56]	; (800d080 <Get_SerialNum+0x4c>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4413      	add	r3, r2
 800d052:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d009      	beq.n	800d06e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d05a:	2208      	movs	r2, #8
 800d05c:	4909      	ldr	r1, [pc, #36]	; (800d084 <Get_SerialNum+0x50>)
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f000 f814 	bl	800d08c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d064:	2204      	movs	r2, #4
 800d066:	4908      	ldr	r1, [pc, #32]	; (800d088 <Get_SerialNum+0x54>)
 800d068:	68b8      	ldr	r0, [r7, #8]
 800d06a:	f000 f80f 	bl	800d08c <IntToUnicode>
  }
}
 800d06e:	bf00      	nop
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	1fff7a10 	.word	0x1fff7a10
 800d07c:	1fff7a14 	.word	0x1fff7a14
 800d080:	1fff7a18 	.word	0x1fff7a18
 800d084:	20000102 	.word	0x20000102
 800d088:	20000112 	.word	0x20000112

0800d08c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b087      	sub	sp, #28
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	4613      	mov	r3, r2
 800d098:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d09a:	2300      	movs	r3, #0
 800d09c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d09e:	2300      	movs	r3, #0
 800d0a0:	75fb      	strb	r3, [r7, #23]
 800d0a2:	e027      	b.n	800d0f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	0f1b      	lsrs	r3, r3, #28
 800d0a8:	2b09      	cmp	r3, #9
 800d0aa:	d80b      	bhi.n	800d0c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	0f1b      	lsrs	r3, r3, #28
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	7dfb      	ldrb	r3, [r7, #23]
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	440b      	add	r3, r1
 800d0bc:	3230      	adds	r2, #48	; 0x30
 800d0be:	b2d2      	uxtb	r2, r2
 800d0c0:	701a      	strb	r2, [r3, #0]
 800d0c2:	e00a      	b.n	800d0da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	0f1b      	lsrs	r3, r3, #28
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	7dfb      	ldrb	r3, [r7, #23]
 800d0cc:	005b      	lsls	r3, r3, #1
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	440b      	add	r3, r1
 800d0d4:	3237      	adds	r2, #55	; 0x37
 800d0d6:	b2d2      	uxtb	r2, r2
 800d0d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	011b      	lsls	r3, r3, #4
 800d0de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d0e0:	7dfb      	ldrb	r3, [r7, #23]
 800d0e2:	005b      	lsls	r3, r3, #1
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d0ee:	7dfb      	ldrb	r3, [r7, #23]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	75fb      	strb	r3, [r7, #23]
 800d0f4:	7dfa      	ldrb	r2, [r7, #23]
 800d0f6:	79fb      	ldrb	r3, [r7, #7]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d3d3      	bcc.n	800d0a4 <IntToUnicode+0x18>
  }
}
 800d0fc:	bf00      	nop
 800d0fe:	bf00      	nop
 800d100:	371c      	adds	r7, #28
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr
	...

0800d10c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b08a      	sub	sp, #40	; 0x28
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d114:	f107 0314 	add.w	r3, r7, #20
 800d118:	2200      	movs	r2, #0
 800d11a:	601a      	str	r2, [r3, #0]
 800d11c:	605a      	str	r2, [r3, #4]
 800d11e:	609a      	str	r2, [r3, #8]
 800d120:	60da      	str	r2, [r3, #12]
 800d122:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d12c:	d13a      	bne.n	800d1a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d12e:	2300      	movs	r3, #0
 800d130:	613b      	str	r3, [r7, #16]
 800d132:	4b1e      	ldr	r3, [pc, #120]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d136:	4a1d      	ldr	r2, [pc, #116]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d138:	f043 0301 	orr.w	r3, r3, #1
 800d13c:	6313      	str	r3, [r2, #48]	; 0x30
 800d13e:	4b1b      	ldr	r3, [pc, #108]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d142:	f003 0301 	and.w	r3, r3, #1
 800d146:	613b      	str	r3, [r7, #16]
 800d148:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d14a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d14e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d150:	2302      	movs	r3, #2
 800d152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d154:	2300      	movs	r3, #0
 800d156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d158:	2303      	movs	r3, #3
 800d15a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d15c:	230a      	movs	r3, #10
 800d15e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d160:	f107 0314 	add.w	r3, r7, #20
 800d164:	4619      	mov	r1, r3
 800d166:	4812      	ldr	r0, [pc, #72]	; (800d1b0 <HAL_PCD_MspInit+0xa4>)
 800d168:	f7f5 faec 	bl	8002744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d16c:	4b0f      	ldr	r3, [pc, #60]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d170:	4a0e      	ldr	r2, [pc, #56]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d176:	6353      	str	r3, [r2, #52]	; 0x34
 800d178:	2300      	movs	r3, #0
 800d17a:	60fb      	str	r3, [r7, #12]
 800d17c:	4b0b      	ldr	r3, [pc, #44]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d17e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d180:	4a0a      	ldr	r2, [pc, #40]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d186:	6453      	str	r3, [r2, #68]	; 0x44
 800d188:	4b08      	ldr	r3, [pc, #32]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d18c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d190:	60fb      	str	r3, [r7, #12]
 800d192:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d194:	2200      	movs	r2, #0
 800d196:	2105      	movs	r1, #5
 800d198:	2043      	movs	r0, #67	; 0x43
 800d19a:	f7f5 faa9 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d19e:	2043      	movs	r0, #67	; 0x43
 800d1a0:	f7f5 fac2 	bl	8002728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d1a4:	bf00      	nop
 800d1a6:	3728      	adds	r7, #40	; 0x28
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	40023800 	.word	0x40023800
 800d1b0:	40020000 	.word	0x40020000

0800d1b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	4610      	mov	r0, r2
 800d1cc:	f7fb fff0 	bl	80091b0 <USBD_LL_SetupStage>
}
 800d1d0:	bf00      	nop
 800d1d2:	3708      	adds	r7, #8
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d1ea:	78fa      	ldrb	r2, [r7, #3]
 800d1ec:	6879      	ldr	r1, [r7, #4]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	00db      	lsls	r3, r3, #3
 800d1f2:	1a9b      	subs	r3, r3, r2
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	440b      	add	r3, r1
 800d1f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	78fb      	ldrb	r3, [r7, #3]
 800d200:	4619      	mov	r1, r3
 800d202:	f7fc f82a 	bl	800925a <USBD_LL_DataOutStage>
}
 800d206:	bf00      	nop
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b082      	sub	sp, #8
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	460b      	mov	r3, r1
 800d218:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d220:	78fa      	ldrb	r2, [r7, #3]
 800d222:	6879      	ldr	r1, [r7, #4]
 800d224:	4613      	mov	r3, r2
 800d226:	00db      	lsls	r3, r3, #3
 800d228:	1a9b      	subs	r3, r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	440b      	add	r3, r1
 800d22e:	3348      	adds	r3, #72	; 0x48
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	78fb      	ldrb	r3, [r7, #3]
 800d234:	4619      	mov	r1, r3
 800d236:	f7fc f873 	bl	8009320 <USBD_LL_DataInStage>
}
 800d23a:	bf00      	nop
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b082      	sub	sp, #8
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d250:	4618      	mov	r0, r3
 800d252:	f7fc f987 	bl	8009564 <USBD_LL_SOF>
}
 800d256:	bf00      	nop
 800d258:	3708      	adds	r7, #8
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b084      	sub	sp, #16
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d266:	2301      	movs	r3, #1
 800d268:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d102      	bne.n	800d278 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d272:	2300      	movs	r3, #0
 800d274:	73fb      	strb	r3, [r7, #15]
 800d276:	e008      	b.n	800d28a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d102      	bne.n	800d286 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d280:	2301      	movs	r3, #1
 800d282:	73fb      	strb	r3, [r7, #15]
 800d284:	e001      	b.n	800d28a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d286:	f7f4 fd7b 	bl	8001d80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d290:	7bfa      	ldrb	r2, [r7, #15]
 800d292:	4611      	mov	r1, r2
 800d294:	4618      	mov	r0, r3
 800d296:	f7fc f927 	bl	80094e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7fc f8d3 	bl	800944c <USBD_LL_Reset>
}
 800d2a6:	bf00      	nop
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
	...

0800d2b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fc f922 	bl	8009508 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	6812      	ldr	r2, [r2, #0]
 800d2d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d2d6:	f043 0301 	orr.w	r3, r3, #1
 800d2da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a1b      	ldr	r3, [r3, #32]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d005      	beq.n	800d2f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d2e4:	4b04      	ldr	r3, [pc, #16]	; (800d2f8 <HAL_PCD_SuspendCallback+0x48>)
 800d2e6:	691b      	ldr	r3, [r3, #16]
 800d2e8:	4a03      	ldr	r2, [pc, #12]	; (800d2f8 <HAL_PCD_SuspendCallback+0x48>)
 800d2ea:	f043 0306 	orr.w	r3, r3, #6
 800d2ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d2f0:	bf00      	nop
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	e000ed00 	.word	0xe000ed00

0800d2fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7fc f912 	bl	8009534 <USBD_LL_Resume>
}
 800d310:	bf00      	nop
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	460b      	mov	r3, r1
 800d322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d32a:	78fa      	ldrb	r2, [r7, #3]
 800d32c:	4611      	mov	r1, r2
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fc f960 	bl	80095f4 <USBD_LL_IsoOUTIncomplete>
}
 800d334:	bf00      	nop
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	460b      	mov	r3, r1
 800d346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d34e:	78fa      	ldrb	r2, [r7, #3]
 800d350:	4611      	mov	r1, r2
 800d352:	4618      	mov	r0, r3
 800d354:	f7fc f928 	bl	80095a8 <USBD_LL_IsoINIncomplete>
}
 800d358:	bf00      	nop
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fc f966 	bl	8009640 <USBD_LL_DevConnected>
}
 800d374:	bf00      	nop
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fc f963 	bl	8009656 <USBD_LL_DevDisconnected>
}
 800d390:	bf00      	nop
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d13c      	bne.n	800d422 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d3a8:	4a20      	ldr	r2, [pc, #128]	; (800d42c <USBD_LL_Init+0x94>)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4a1e      	ldr	r2, [pc, #120]	; (800d42c <USBD_LL_Init+0x94>)
 800d3b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d3b8:	4b1c      	ldr	r3, [pc, #112]	; (800d42c <USBD_LL_Init+0x94>)
 800d3ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d3be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d3c0:	4b1a      	ldr	r3, [pc, #104]	; (800d42c <USBD_LL_Init+0x94>)
 800d3c2:	2206      	movs	r2, #6
 800d3c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d3c6:	4b19      	ldr	r3, [pc, #100]	; (800d42c <USBD_LL_Init+0x94>)
 800d3c8:	2202      	movs	r2, #2
 800d3ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d3cc:	4b17      	ldr	r3, [pc, #92]	; (800d42c <USBD_LL_Init+0x94>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d3d2:	4b16      	ldr	r3, [pc, #88]	; (800d42c <USBD_LL_Init+0x94>)
 800d3d4:	2202      	movs	r2, #2
 800d3d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d3d8:	4b14      	ldr	r3, [pc, #80]	; (800d42c <USBD_LL_Init+0x94>)
 800d3da:	2200      	movs	r2, #0
 800d3dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d3de:	4b13      	ldr	r3, [pc, #76]	; (800d42c <USBD_LL_Init+0x94>)
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d3e4:	4b11      	ldr	r3, [pc, #68]	; (800d42c <USBD_LL_Init+0x94>)
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d3ea:	4b10      	ldr	r3, [pc, #64]	; (800d42c <USBD_LL_Init+0x94>)
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d3f0:	4b0e      	ldr	r3, [pc, #56]	; (800d42c <USBD_LL_Init+0x94>)
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d3f6:	480d      	ldr	r0, [pc, #52]	; (800d42c <USBD_LL_Init+0x94>)
 800d3f8:	f7f5 ffc5 	bl	8003386 <HAL_PCD_Init>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d001      	beq.n	800d406 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d402:	f7f4 fcbd 	bl	8001d80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d406:	2180      	movs	r1, #128	; 0x80
 800d408:	4808      	ldr	r0, [pc, #32]	; (800d42c <USBD_LL_Init+0x94>)
 800d40a:	f7f7 f93e 	bl	800468a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d40e:	2240      	movs	r2, #64	; 0x40
 800d410:	2100      	movs	r1, #0
 800d412:	4806      	ldr	r0, [pc, #24]	; (800d42c <USBD_LL_Init+0x94>)
 800d414:	f7f7 f8f2 	bl	80045fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d418:	2280      	movs	r2, #128	; 0x80
 800d41a:	2101      	movs	r1, #1
 800d41c:	4803      	ldr	r0, [pc, #12]	; (800d42c <USBD_LL_Init+0x94>)
 800d41e:	f7f7 f8ed 	bl	80045fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	20005960 	.word	0x20005960

0800d430 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d446:	4618      	mov	r0, r3
 800d448:	f7f6 f8c1 	bl	80035ce <HAL_PCD_Start>
 800d44c:	4603      	mov	r3, r0
 800d44e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d450:	7bfb      	ldrb	r3, [r7, #15]
 800d452:	4618      	mov	r0, r3
 800d454:	f000 f97e 	bl	800d754 <USBD_Get_USB_Status>
 800d458:	4603      	mov	r3, r0
 800d45a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d45c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b084      	sub	sp, #16
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
 800d46e:	4608      	mov	r0, r1
 800d470:	4611      	mov	r1, r2
 800d472:	461a      	mov	r2, r3
 800d474:	4603      	mov	r3, r0
 800d476:	70fb      	strb	r3, [r7, #3]
 800d478:	460b      	mov	r3, r1
 800d47a:	70bb      	strb	r3, [r7, #2]
 800d47c:	4613      	mov	r3, r2
 800d47e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d480:	2300      	movs	r3, #0
 800d482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d48e:	78bb      	ldrb	r3, [r7, #2]
 800d490:	883a      	ldrh	r2, [r7, #0]
 800d492:	78f9      	ldrb	r1, [r7, #3]
 800d494:	f7f6 fcd2 	bl	8003e3c <HAL_PCD_EP_Open>
 800d498:	4603      	mov	r3, r0
 800d49a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f000 f958 	bl	800d754 <USBD_Get_USB_Status>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b084      	sub	sp, #16
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4cc:	78fa      	ldrb	r2, [r7, #3]
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7f6 fd1b 	bl	8003f0c <HAL_PCD_EP_Close>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4da:	7bfb      	ldrb	r3, [r7, #15]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f000 f939 	bl	800d754 <USBD_Get_USB_Status>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d50a:	78fa      	ldrb	r2, [r7, #3]
 800d50c:	4611      	mov	r1, r2
 800d50e:	4618      	mov	r0, r3
 800d510:	f7f6 fddb 	bl	80040ca <HAL_PCD_EP_SetStall>
 800d514:	4603      	mov	r3, r0
 800d516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d518:	7bfb      	ldrb	r3, [r7, #15]
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 f91a 	bl	800d754 <USBD_Get_USB_Status>
 800d520:	4603      	mov	r3, r0
 800d522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d524:	7bbb      	ldrb	r3, [r7, #14]
}
 800d526:	4618      	mov	r0, r3
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d52e:	b580      	push	{r7, lr}
 800d530:	b084      	sub	sp, #16
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
 800d536:	460b      	mov	r3, r1
 800d538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d53a:	2300      	movs	r3, #0
 800d53c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d53e:	2300      	movs	r3, #0
 800d540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d548:	78fa      	ldrb	r2, [r7, #3]
 800d54a:	4611      	mov	r1, r2
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7f6 fe20 	bl	8004192 <HAL_PCD_EP_ClrStall>
 800d552:	4603      	mov	r3, r0
 800d554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d556:	7bfb      	ldrb	r3, [r7, #15]
 800d558:	4618      	mov	r0, r3
 800d55a:	f000 f8fb 	bl	800d754 <USBD_Get_USB_Status>
 800d55e:	4603      	mov	r3, r0
 800d560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d562:	7bbb      	ldrb	r3, [r7, #14]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3710      	adds	r7, #16
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d57e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d584:	2b00      	cmp	r3, #0
 800d586:	da0b      	bge.n	800d5a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d588:	78fb      	ldrb	r3, [r7, #3]
 800d58a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d58e:	68f9      	ldr	r1, [r7, #12]
 800d590:	4613      	mov	r3, r2
 800d592:	00db      	lsls	r3, r3, #3
 800d594:	1a9b      	subs	r3, r3, r2
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	440b      	add	r3, r1
 800d59a:	333e      	adds	r3, #62	; 0x3e
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	e00b      	b.n	800d5b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d5a0:	78fb      	ldrb	r3, [r7, #3]
 800d5a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d5a6:	68f9      	ldr	r1, [r7, #12]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	00db      	lsls	r3, r3, #3
 800d5ac:	1a9b      	subs	r3, r3, r2
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	440b      	add	r3, r1
 800d5b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d5b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3714      	adds	r7, #20
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d5de:	78fa      	ldrb	r2, [r7, #3]
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7f6 fc05 	bl	8003df2 <HAL_PCD_SetAddress>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5ec:	7bfb      	ldrb	r3, [r7, #15]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f000 f8b0 	bl	800d754 <USBD_Get_USB_Status>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b086      	sub	sp, #24
 800d606:	af00      	add	r7, sp, #0
 800d608:	60f8      	str	r0, [r7, #12]
 800d60a:	607a      	str	r2, [r7, #4]
 800d60c:	603b      	str	r3, [r7, #0]
 800d60e:	460b      	mov	r3, r1
 800d610:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d620:	7af9      	ldrb	r1, [r7, #11]
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	f7f6 fd06 	bl	8004036 <HAL_PCD_EP_Transmit>
 800d62a:	4603      	mov	r3, r0
 800d62c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d62e:	7dfb      	ldrb	r3, [r7, #23]
 800d630:	4618      	mov	r0, r3
 800d632:	f000 f88f 	bl	800d754 <USBD_Get_USB_Status>
 800d636:	4603      	mov	r3, r0
 800d638:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d63a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3718      	adds	r7, #24
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b086      	sub	sp, #24
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	607a      	str	r2, [r7, #4]
 800d64e:	603b      	str	r3, [r7, #0]
 800d650:	460b      	mov	r3, r1
 800d652:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d654:	2300      	movs	r3, #0
 800d656:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d658:	2300      	movs	r3, #0
 800d65a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d662:	7af9      	ldrb	r1, [r7, #11]
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	f7f6 fc9a 	bl	8003fa0 <HAL_PCD_EP_Receive>
 800d66c:	4603      	mov	r3, r0
 800d66e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d670:	7dfb      	ldrb	r3, [r7, #23]
 800d672:	4618      	mov	r0, r3
 800d674:	f000 f86e 	bl	800d754 <USBD_Get_USB_Status>
 800d678:	4603      	mov	r3, r0
 800d67a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d67c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3718      	adds	r7, #24
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
	...

0800d688 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	460b      	mov	r3, r1
 800d692:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d694:	78fb      	ldrb	r3, [r7, #3]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d002      	beq.n	800d6a0 <HAL_PCDEx_LPM_Callback+0x18>
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d01f      	beq.n	800d6de <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d69e:	e03b      	b.n	800d718 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6a1b      	ldr	r3, [r3, #32]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d007      	beq.n	800d6b8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d6a8:	f7f3 fbae 	bl	8000e08 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6ac:	4b1c      	ldr	r3, [pc, #112]	; (800d720 <HAL_PCDEx_LPM_Callback+0x98>)
 800d6ae:	691b      	ldr	r3, [r3, #16]
 800d6b0:	4a1b      	ldr	r2, [pc, #108]	; (800d720 <HAL_PCDEx_LPM_Callback+0x98>)
 800d6b2:	f023 0306 	bic.w	r3, r3, #6
 800d6b6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	6812      	ldr	r2, [r2, #0]
 800d6c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d6ca:	f023 0301 	bic.w	r3, r3, #1
 800d6ce:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fb ff2c 	bl	8009534 <USBD_LL_Resume>
    break;
 800d6dc:	e01c      	b.n	800d718 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	6812      	ldr	r2, [r2, #0]
 800d6ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d6f0:	f043 0301 	orr.w	r3, r3, #1
 800d6f4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fb ff03 	bl	8009508 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6a1b      	ldr	r3, [r3, #32]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d005      	beq.n	800d716 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d70a:	4b05      	ldr	r3, [pc, #20]	; (800d720 <HAL_PCDEx_LPM_Callback+0x98>)
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	4a04      	ldr	r2, [pc, #16]	; (800d720 <HAL_PCDEx_LPM_Callback+0x98>)
 800d710:	f043 0306 	orr.w	r3, r3, #6
 800d714:	6113      	str	r3, [r2, #16]
    break;
 800d716:	bf00      	nop
}
 800d718:	bf00      	nop
 800d71a:	3708      	adds	r7, #8
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	e000ed00 	.word	0xe000ed00

0800d724 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d72c:	4b03      	ldr	r3, [pc, #12]	; (800d73c <USBD_static_malloc+0x18>)
}
 800d72e:	4618      	mov	r0, r3
 800d730:	370c      	adds	r7, #12
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	200053e8 	.word	0x200053e8

0800d740 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]

}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	4603      	mov	r3, r0
 800d75c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d75e:	2300      	movs	r3, #0
 800d760:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d762:	79fb      	ldrb	r3, [r7, #7]
 800d764:	2b03      	cmp	r3, #3
 800d766:	d817      	bhi.n	800d798 <USBD_Get_USB_Status+0x44>
 800d768:	a201      	add	r2, pc, #4	; (adr r2, 800d770 <USBD_Get_USB_Status+0x1c>)
 800d76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76e:	bf00      	nop
 800d770:	0800d781 	.word	0x0800d781
 800d774:	0800d787 	.word	0x0800d787
 800d778:	0800d78d 	.word	0x0800d78d
 800d77c:	0800d793 	.word	0x0800d793
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	73fb      	strb	r3, [r7, #15]
    break;
 800d784:	e00b      	b.n	800d79e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d786:	2303      	movs	r3, #3
 800d788:	73fb      	strb	r3, [r7, #15]
    break;
 800d78a:	e008      	b.n	800d79e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d78c:	2301      	movs	r3, #1
 800d78e:	73fb      	strb	r3, [r7, #15]
    break;
 800d790:	e005      	b.n	800d79e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d792:	2303      	movs	r3, #3
 800d794:	73fb      	strb	r3, [r7, #15]
    break;
 800d796:	e002      	b.n	800d79e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d798:	2303      	movs	r3, #3
 800d79a:	73fb      	strb	r3, [r7, #15]
    break;
 800d79c:	bf00      	nop
  }
  return usb_status;
 800d79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3714      	adds	r7, #20
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	4608      	mov	r0, r1
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	70fb      	strb	r3, [r7, #3]
 800d7be:	460b      	mov	r3, r1
 800d7c0:	70bb      	strb	r3, [r7, #2]
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	707b      	strb	r3, [r7, #1]
                return 0;
 800d7c6:	2300      	movs	r3, #0
        }
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	4608      	mov	r0, r1
 800d7de:	4611      	mov	r1, r2
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	70fb      	strb	r3, [r7, #3]
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	70bb      	strb	r3, [r7, #2]
 800d7ea:	4613      	mov	r3, r2
 800d7ec:	707b      	strb	r3, [r7, #1]
                return 0;
 800d7ee:	2300      	movs	r3, #0
        }
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
                return 0;
 800d804:	2300      	movs	r3, #0
        }
 800d806:	4618      	mov	r0, r3
 800d808:	370c      	adds	r7, #12
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr

0800d812 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800d812:	b480      	push	{r7}
 800d814:	b083      	sub	sp, #12
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
                return 0;
 800d81a:	2300      	movs	r3, #0
        }
 800d81c:	4618      	mov	r0, r3
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
                return 0;
 800d830:	2300      	movs	r3, #0
        }
 800d832:	4618      	mov	r0, r3
 800d834:	370c      	adds	r7, #12
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr

0800d83e <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800d83e:	b480      	push	{r7}
 800d840:	b083      	sub	sp, #12
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	460b      	mov	r3, r1
 800d848:	70fb      	strb	r3, [r7, #3]
                return;
 800d84a:	bf00      	nop
        } // Note used for hubs only!
 800d84c:	370c      	adds	r7, #12
 800d84e:	46bd      	mov	sp, r7
 800d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d854:	4770      	bx	lr

0800d856 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800d856:	b480      	push	{r7}
 800d858:	b083      	sub	sp, #12
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
 800d85e:	460b      	mov	r3, r1
 800d860:	807b      	strh	r3, [r7, #2]
 800d862:	4613      	mov	r3, r2
 800d864:	803b      	strh	r3, [r7, #0]
                return false;
 800d866:	2300      	movs	r3, #0
        }
 800d868:	4618      	mov	r0, r3
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	460b      	mov	r3, r1
 800d87e:	70fb      	strb	r3, [r7, #3]
                return false;
 800d880:	2300      	movs	r3, #0
        }
 800d882:	4618      	mov	r0, r3
 800d884:	370c      	adds	r7, #12
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr

0800d88e <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800d88e:	b480      	push	{r7}
 800d890:	b083      	sub	sp, #12
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
 800d896:	460b      	mov	r3, r1
 800d898:	70fb      	strb	r3, [r7, #3]
                return true;
 800d89a:	2301      	movs	r3, #1
        }
 800d89c:	4618      	mov	r0, r3
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800d8b0:	687b      	ldr	r3, [r7, #4]
        };
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	370c      	adds	r7, #12
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr

0800d8be <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800d8be:	b480      	push	{r7}
 800d8c0:	b085      	sub	sp, #20
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
 800d8c6:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	73fb      	strb	r3, [r7, #15]
 800d8cc:	7bfb      	ldrb	r3, [r7, #15]
 800d8ce:	2b0f      	cmp	r3, #15
 800d8d0:	d812      	bhi.n	800d8f8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800d8d2:	7bfa      	ldrb	r2, [r7, #15]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	321e      	adds	r2, #30
 800d8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d107      	bne.n	800d8f0 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800d8e0:	7bfa      	ldrb	r2, [r7, #15]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	321e      	adds	r2, #30
 800d8e6:	6839      	ldr	r1, [r7, #0]
 800d8e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	e004      	b.n	800d8fa <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d8f0:	7bfb      	ldrb	r3, [r7, #15]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	73fb      	strb	r3, [r7, #15]
 800d8f6:	e7e9      	b.n	800d8cc <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800d8f8:	23d3      	movs	r3, #211	; 0xd3
        };
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3714      	adds	r7, #20
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800d906:	b480      	push	{r7}
 800d908:	b083      	sub	sp, #12
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2200      	movs	r2, #0
 800d912:	701a      	strb	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2200      	movs	r2, #0
 800d918:	705a      	strb	r2, [r3, #1]
 800d91a:	2200      	movs	r2, #0
 800d91c:	709a      	strb	r2, [r3, #2]
 800d91e:	2200      	movs	r2, #0
 800d920:	70da      	strb	r2, [r3, #3]
 800d922:	2200      	movs	r2, #0
 800d924:	711a      	strb	r2, [r3, #4]
        };
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4618      	mov	r0, r3
 800d92a:	370c      	adds	r7, #12
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr

0800d934 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800d934:	b480      	push	{r7}
 800d936:	b083      	sub	sp, #12
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	601a      	str	r2, [r3, #0]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	711a      	strb	r2, [r3, #4]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	715a      	strb	r2, [r3, #5]
        };
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	4618      	mov	r0, r3
 800d952:	370c      	adds	r7, #12
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr

0800d95c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	781a      	ldrb	r2, [r3, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	715a      	strb	r2, [r3, #5]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	795a      	ldrb	r2, [r3, #5]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	711a      	strb	r2, [r3, #4]
        };
 800d980:	bf00      	nop
 800d982:	370c      	adds	r7, #12
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2200      	movs	r2, #0
 800d998:	601a      	str	r2, [r3, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2200      	movs	r2, #0
 800d99e:	711a      	strb	r2, [r3, #4]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	80da      	strh	r2, [r3, #6]
        };
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	370c      	adds	r7, #12
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	80da      	strh	r2, [r3, #6]
        };
 800d9ce:	bf00      	nop
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800d9da:	b480      	push	{r7}
 800d9dc:	b085      	sub	sp, #20
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	60f8      	str	r0, [r7, #12]
 800d9e2:	60b9      	str	r1, [r7, #8]
 800d9e4:	607a      	str	r2, [r7, #4]
 800d9e6:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	791b      	ldrb	r3, [r3, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d009      	beq.n	800da08 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800d9f4:	e029      	b.n	800da4a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	887a      	ldrh	r2, [r7, #2]
 800d9fa:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	791b      	ldrb	r3, [r3, #4]
 800da00:	3301      	adds	r3, #1
 800da02:	b2da      	uxtb	r2, r3
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	88db      	ldrh	r3, [r3, #6]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d015      	beq.n	800da3c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	881b      	ldrh	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d011      	beq.n	800da3c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	88db      	ldrh	r3, [r3, #6]
 800da1c:	3b01      	subs	r3, #1
 800da1e:	b29a      	uxth	r2, r3
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	80da      	strh	r2, [r3, #6]
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	1c5a      	adds	r2, r3, #1
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	601a      	str	r2, [r3, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	881b      	ldrh	r3, [r3, #0]
 800da32:	3b01      	subs	r3, #1
 800da34:	b29a      	uxth	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	801a      	strh	r2, [r3, #0]
 800da3a:	e7e5      	b.n	800da08 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	88db      	ldrh	r3, [r3, #6]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d102      	bne.n	800da4a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2200      	movs	r2, #0
 800da48:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	88db      	ldrh	r3, [r3, #6]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	bf0c      	ite	eq
 800da52:	2301      	moveq	r3, #1
 800da54:	2300      	movne	r3, #0
 800da56:	b2db      	uxtb	r3, r3
        };
 800da58:	4618      	mov	r0, r3
 800da5a:	3714      	adds	r7, #20
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	4608      	mov	r0, r1
 800da6e:	4611      	mov	r1, r2
 800da70:	461a      	mov	r2, r3
 800da72:	4603      	mov	r3, r0
 800da74:	70fb      	strb	r3, [r7, #3]
 800da76:	460b      	mov	r3, r1
 800da78:	70bb      	strb	r3, [r7, #2]
 800da7a:	4613      	mov	r3, r2
 800da7c:	707b      	strb	r3, [r7, #1]
        };
 800da7e:	bf00      	nop
 800da80:	370c      	adds	r7, #12
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
	...

0800da8c <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	4a04      	ldr	r2, [pc, #16]	; (800daa8 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4618      	mov	r0, r3
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr
 800daa8:	080164fc 	.word	0x080164fc

0800daac <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	4a04      	ldr	r2, [pc, #16]	; (800dac8 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	601a      	str	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4618      	mov	r0, r3
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr
 800dac8:	080164e4 	.word	0x080164e4

0800dacc <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
                return bAddress;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800dada:	4618      	mov	r0, r3
 800dadc:	370c      	adds	r7, #12
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr

0800dae6 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800dae6:	b480      	push	{r7}
 800dae8:	b083      	sub	sp, #12
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800daf4:	4618      	mov	r0, r3
 800daf6:	370c      	adds	r7, #12
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	460b      	mov	r3, r1
 800db0a:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800db0c:	78fb      	ldrb	r3, [r7, #3]
 800db0e:	2be0      	cmp	r3, #224	; 0xe0
 800db10:	bf0c      	ite	eq
 800db12:	2301      	moveq	r3, #1
 800db14:	2300      	movne	r3, #0
 800db16:	b2db      	uxtb	r3, r3
        };
 800db18:	4618      	mov	r0, r3
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	807b      	strh	r3, [r7, #2]
 800db30:	4613      	mov	r3, r2
 800db32:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800db34:	887b      	ldrh	r3, [r7, #2]
 800db36:	f640 225c 	movw	r2, #2652	; 0xa5c
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d104      	bne.n	800db48 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800db3e:	883b      	ldrh	r3, [r7, #0]
 800db40:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800db44:	4293      	cmp	r3, r2
 800db46:	d009      	beq.n	800db5c <_ZN3BTD8VIDPIDOKEtt+0x38>
 800db48:	887b      	ldrh	r3, [r7, #2]
 800db4a:	f240 520d 	movw	r2, #1293	; 0x50d
 800db4e:	4293      	cmp	r3, r2
 800db50:	d106      	bne.n	800db60 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800db52:	883b      	ldrh	r3, [r7, #0]
 800db54:	f240 625a 	movw	r2, #1626	; 0x65a
 800db58:	4293      	cmp	r3, r2
 800db5a:	d101      	bne.n	800db60 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800db5c:	2301      	movs	r3, #1
 800db5e:	e02d      	b.n	800dbbc <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	7d1b      	ldrb	r3, [r3, #20]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d113      	bne.n	800db90 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	7d5b      	ldrb	r3, [r3, #21]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d10f      	bne.n	800db90 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	7d9b      	ldrb	r3, [r3, #22]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10b      	bne.n	800db90 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	7ddb      	ldrb	r3, [r3, #23]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d107      	bne.n	800db90 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	7e1b      	ldrb	r3, [r3, #24]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d103      	bne.n	800db90 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	7e5b      	ldrb	r3, [r3, #25]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d014      	beq.n	800dbba <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800db90:	887b      	ldrh	r3, [r7, #2]
 800db92:	f240 524c 	movw	r2, #1356	; 0x54c
 800db96:	4293      	cmp	r3, r2
 800db98:	d10f      	bne.n	800dbba <_ZN3BTD8VIDPIDOKEtt+0x96>
 800db9a:	883b      	ldrh	r3, [r7, #0]
 800db9c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800dba0:	d009      	beq.n	800dbb6 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800dba2:	883b      	ldrh	r3, [r7, #0]
 800dba4:	f240 422f 	movw	r2, #1071	; 0x42f
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d004      	beq.n	800dbb6 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800dbac:	883b      	ldrh	r3, [r7, #0]
 800dbae:	f240 32d5 	movw	r2, #981	; 0x3d5
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d101      	bne.n	800dbba <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	e000      	b.n	800dbbc <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800dbba:	2300      	movs	r3, #0
        };
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	370c      	adds	r7, #12
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr

0800dbc8 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7ff ff59 	bl	800da8c <_ZN15USBDeviceConfigC1Ev>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	3304      	adds	r3, #4
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7ff ff64 	bl	800daac <_ZN17UsbConfigXtracterC1Ev>
 800dbe4:	4a2b      	ldr	r2, [pc, #172]	; (800dc94 <_ZN3BTDC1EP3USB+0xcc>)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	601a      	str	r2, [r3, #0]
 800dbea:	4a2b      	ldr	r2, [pc, #172]	; (800dc98 <_ZN3BTDC1EP3USB+0xd0>)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	605a      	str	r2, [r3, #4]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	683a      	ldr	r2, [r7, #0]
 800dc1c:	64da      	str	r2, [r3, #76]	; 0x4c
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2201      	movs	r2, #1
 800dc2a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	661a      	str	r2, [r3, #96]	; 0x60
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2200      	movs	r2, #0
 800dc38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	73fb      	strb	r3, [r7, #15]
 800dc50:	7bfb      	ldrb	r3, [r7, #15]
 800dc52:	2b03      	cmp	r3, #3
 800dc54:	d80a      	bhi.n	800dc6c <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800dc56:	7bfb      	ldrb	r3, [r7, #15]
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	3318      	adds	r3, #24
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	4413      	add	r3, r2
 800dc60:	2200      	movs	r2, #0
 800dc62:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dc64:	7bfb      	ldrb	r3, [r7, #15]
 800dc66:	3301      	adds	r3, #1
 800dc68:	73fb      	strb	r3, [r7, #15]
 800dc6a:	e7f1      	b.n	800dc50 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 fb31 	bl	800e2d4 <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d006      	beq.n	800dc88 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	4611      	mov	r1, r2
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7ff fe1b 	bl	800d8be <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3710      	adds	r7, #16
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	080164a4 	.word	0x080164a4
 800dc98:	080164d8 	.word	0x080164d8

0800dc9c <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800dc9c:	b590      	push	{r4, r7, lr}
 800dc9e:	b08f      	sub	sp, #60	; 0x3c
 800dca0:	af02      	add	r7, sp, #8
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	4608      	mov	r0, r1
 800dca6:	4611      	mov	r1, r2
 800dca8:	461a      	mov	r2, r3
 800dcaa:	4603      	mov	r3, r0
 800dcac:	70fb      	strb	r3, [r7, #3]
 800dcae:	460b      	mov	r3, r1
 800dcb0:	70bb      	strb	r3, [r7, #2]
 800dcb2:	4613      	mov	r3, r2
 800dcb4:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800dcb6:	2312      	movs	r3, #18
 800dcb8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800dcbc:	f107 0308 	add.w	r3, r7, #8
 800dcc0:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 fb02 	bl	800e2d4 <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7ff fde7 	bl	800d8a8 <_ZN3USB14GetAddressPoolEv>
 800dcda:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d005      	beq.n	800dcf2 <_ZN3BTD15ConfigureDeviceEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
 800dce6:	2180      	movs	r1, #128	; 0x80
 800dce8:	4852      	ldr	r0, [pc, #328]	; (800de34 <_ZN3BTD15ConfigureDeviceEhhb+0x198>)
 800dcea:	f006 fad5 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800dcee:	23d9      	movs	r3, #217	; 0xd9
 800dcf0:	e09c      	b.n	800de2c <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	69f8      	ldr	r0, [r7, #28]
 800dcfc:	4798      	blx	r3
 800dcfe:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d105      	bne.n	800dd12 <_ZN3BTD15ConfigureDeviceEhhb+0x76>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
 800dd06:	2180      	movs	r1, #128	; 0x80
 800dd08:	484b      	ldr	r0, [pc, #300]	; (800de38 <_ZN3BTD15ConfigureDeviceEhhb+0x19c>)
 800dd0a:	f006 fac5 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dd0e:	23d6      	movs	r3, #214	; 0xd6
 800dd10:	e08c      	b.n	800de2c <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        if(!p->epinfo) {
 800dd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d105      	bne.n	800dd26 <_ZN3BTD15ConfigureDeviceEhhb+0x8a>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
 800dd1a:	2180      	movs	r1, #128	; 0x80
 800dd1c:	4847      	ldr	r0, [pc, #284]	; (800de3c <_ZN3BTD15ConfigureDeviceEhhb+0x1a0>)
 800dd1e:	f006 fabb 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800dd22:	23d7      	movs	r3, #215	; 0xd7
 800dd24:	e082      	b.n	800de2c <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800dd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd34:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800dd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd38:	787a      	ldrb	r2, [r7, #1]
 800dd3a:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dd40:	f107 0308 	add.w	r3, r7, #8
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	2312      	movs	r3, #18
 800dd48:	2200      	movs	r2, #0
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	f005 fe9d 	bl	8013a8a <_ZN3USB11getDevDescrEhhtPh>
 800dd50:	4603      	mov	r3, r0
 800dd52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800dd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd58:	6a3a      	ldr	r2, [r7, #32]
 800dd5a:	601a      	str	r2, [r3, #0]

        if(rcode)
 800dd5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d14e      	bne.n	800de02 <_ZN3BTD15ConfigureDeviceEhhb+0x166>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	681c      	ldr	r4, [r3, #0]
 800dd6c:	78bb      	ldrb	r3, [r7, #2]
 800dd6e:	78f9      	ldrb	r1, [r7, #3]
 800dd70:	2200      	movs	r2, #0
 800dd72:	69f8      	ldr	r0, [r7, #28]
 800dd74:	47a0      	blx	r4
 800dd76:	4603      	mov	r3, r0
 800dd78:	461a      	mov	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d105      	bne.n	800dd96 <_ZN3BTD15ConfigureDeviceEhhb+0xfa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
 800dd8a:	2180      	movs	r1, #128	; 0x80
 800dd8c:	482c      	ldr	r0, [pc, #176]	; (800de40 <_ZN3BTD15ConfigureDeviceEhhb+0x1a4>)
 800dd8e:	f006 fa83 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800dd92:	23d4      	movs	r3, #212	; 0xd4
 800dd94:	e04a      	b.n	800de2c <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800dd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd98:	791b      	ldrb	r3, [r3, #4]
 800dd9a:	2b09      	cmp	r3, #9
 800dd9c:	d017      	beq.n	800ddce <_ZN3BTD15ConfigureDeviceEhhb+0x132>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800dd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda0:	79da      	ldrb	r2, [r3, #7]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddaa:	7c5a      	ldrb	r2, [r3, #17]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800ddb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb4:	891b      	ldrh	r3, [r3, #8]
 800ddb6:	b29a      	uxth	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800ddbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc0:	895b      	ldrh	r3, [r3, #10]
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800ddca:	23e0      	movs	r3, #224	; 0xe0
 800ddcc:	e02e      	b.n	800de2c <_ZN3BTD15ConfigureDeviceEhhb+0x190>
                goto FailHub;
 800ddce:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
 800ddd0:	2180      	movs	r1, #128	; 0x80
 800ddd2:	481c      	ldr	r0, [pc, #112]	; (800de44 <_ZN3BTD15ConfigureDeviceEhhb+0x1a8>)
 800ddd4:	f006 fa60 	bl	8014298 <_Z8E_NotifyPKci>
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dde2:	2300      	movs	r3, #0
 800dde4:	2200      	movs	r2, #0
 800dde6:	f005 feed 	bl	8013bc4 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800ddea:	23d1      	movs	r3, #209	; 0xd1
 800ddec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	3308      	adds	r3, #8
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	4798      	blx	r3
        return rcode;
 800ddfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de00:	e014      	b.n	800de2c <_ZN3BTD15ConfigureDeviceEhhb+0x190>
                goto FailGetDevDescr;
 800de02:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
 800de04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de08:	4618      	mov	r0, r3
 800de0a:	f006 fabd 	bl	8014388 <_Z21NotifyFailGetDevDescrh>
#endif
        if(rcode != hrJERR)
 800de0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de12:	2b0d      	cmp	r3, #13
 800de14:	d002      	beq.n	800de1c <_ZN3BTD15ConfigureDeviceEhhb+0x180>
                rcode = USB_ERROR_FailGetDevDescr;
 800de16:	23e1      	movs	r3, #225	; 0xe1
 800de18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	3308      	adds	r3, #8
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	4798      	blx	r3
        return rcode;
 800de28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800de2c:	4618      	mov	r0, r3
 800de2e:	3734      	adds	r7, #52	; 0x34
 800de30:	46bd      	mov	sp, r7
 800de32:	bd90      	pop	{r4, r7, pc}
 800de34:	0801483c 	.word	0x0801483c
 800de38:	08014850 	.word	0x08014850
 800de3c:	08014864 	.word	0x08014864
 800de40:	08014878 	.word	0x08014878
 800de44:	08014890 	.word	0x08014890

0800de48 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800de48:	b580      	push	{r7, lr}
 800de4a:	b096      	sub	sp, #88	; 0x58
 800de4c:	af02      	add	r7, sp, #8
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	4608      	mov	r0, r1
 800de52:	4611      	mov	r1, r2
 800de54:	461a      	mov	r2, r3
 800de56:	4603      	mov	r3, r0
 800de58:	70fb      	strb	r3, [r7, #3]
 800de5a:	460b      	mov	r3, r1
 800de5c:	70bb      	strb	r3, [r7, #2]
 800de5e:	4613      	mov	r3, r2
 800de60:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800de68:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        epInfo[1].epAddr = 0;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de78:	4618      	mov	r0, r3
 800de7a:	f7ff fd15 	bl	800d8a8 <_ZN3USB14GetAddressPoolEv>
 800de7e:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800de80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800de8c:	4611      	mov	r1, r2
 800de8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800de90:	4798      	blx	r3
 800de92:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800de94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de96:	2b00      	cmp	r3, #0
 800de98:	d105      	bne.n	800dea6 <_ZN3BTD4InitEhhb+0x5e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
 800de9a:	2180      	movs	r1, #128	; 0x80
 800de9c:	48ae      	ldr	r0, [pc, #696]	; (800e158 <_ZN3BTD4InitEhhb+0x310>)
 800de9e:	f006 f9fb 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dea2:	23d6      	movs	r3, #214	; 0xd6
 800dea4:	e20e      	b.n	800e2c4 <_ZN3BTD4InitEhhb+0x47c>
        }

        delay(300); // Assign new address to the device
 800dea6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800deaa:	f7f4 fb45 	bl	8002538 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800deb8:	2200      	movs	r2, #0
 800deba:	2100      	movs	r1, #0
 800debc:	f005 fe82 	bl	8013bc4 <_ZN3USB7setAddrEhhh>
 800dec0:	4603      	mov	r3, r0
 800dec2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800dec6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00d      	beq.n	800deea <_ZN3BTD4InitEhhb+0xa2>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
 800dece:	2180      	movs	r1, #128	; 0x80
 800ded0:	48a2      	ldr	r0, [pc, #648]	; (800e15c <_ZN3BTD4InitEhhb+0x314>)
 800ded2:	f006 f9e1 	bl	8014298 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (rcode, 0x80);
 800ded6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800deda:	2180      	movs	r1, #128	; 0x80
 800dedc:	4618      	mov	r0, r3
 800dede:	f002 fcd8 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
#endif
                p->lowspeed = false;
 800dee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dee4:	2200      	movs	r2, #0
 800dee6:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800dee8:	e1db      	b.n	800e2a2 <_ZN3BTD4InitEhhb+0x45a>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800deea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800deec:	2200      	movs	r2, #0
 800deee:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800def0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800defc:	4611      	mov	r1, r2
 800defe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800df00:	4798      	blx	r3
 800df02:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800df04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df06:	2b00      	cmp	r3, #0
 800df08:	d105      	bne.n	800df16 <_ZN3BTD4InitEhhb+0xce>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
 800df0a:	2180      	movs	r1, #128	; 0x80
 800df0c:	4892      	ldr	r0, [pc, #584]	; (800e158 <_ZN3BTD4InitEhhb+0x310>)
 800df0e:	f006 f9c3 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800df12:	23d6      	movs	r3, #214	; 0xd6
 800df14:	e1d6      	b.n	800e2c4 <_ZN3BTD4InitEhhb+0x47c>
        }

        p->lowspeed = lowspeed;
 800df16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df18:	787a      	ldrb	r2, [r7, #1]
 800df1a:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	3351      	adds	r3, #81	; 0x51
 800df2a:	2201      	movs	r2, #1
 800df2c:	f004 fd1b 	bl	8012966 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800df30:	4603      	mov	r3, r0
 800df32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800df36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	f040 818a 	bne.w	800e254 <_ZN3BTD4InitEhhb+0x40c>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800df46:	f240 524c 	movw	r2, #1356	; 0x54c
 800df4a:	4293      	cmp	r3, r2
 800df4c:	f040 80c5 	bne.w	800e0da <_ZN3BTD4InitEhhb+0x292>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800df56:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800df5a:	d00e      	beq.n	800df7a <_ZN3BTD4InitEhhb+0x132>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800df62:	f240 422f 	movw	r2, #1071	; 0x42f
 800df66:	4293      	cmp	r3, r2
 800df68:	d007      	beq.n	800df7a <_ZN3BTD4InitEhhb+0x132>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800df70:	f240 32d5 	movw	r2, #981	; 0x3d5
 800df74:	4293      	cmp	r3, r2
 800df76:	f040 80b0 	bne.w	800e0da <_ZN3BTD4InitEhhb+0x292>
                delay(100);
 800df7a:	2064      	movs	r0, #100	; 0x64
 800df7c:	f7f4 fadc 	bl	8002538 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800df90:	2301      	movs	r3, #1
 800df92:	f005 fe45 	bl	8013c20 <_ZN3USB7setConfEhhh>
 800df96:	4603      	mov	r3, r0
 800df98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800df9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	f040 8161 	bne.w	800e268 <_ZN3BTD4InitEhhb+0x420>
                        goto FailSetConfDescr;

#ifdef DEBUG_USB_HOST
                if(PID == PS3_PID || PID == PS3NAVIGATION_PID) {
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dfac:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800dfb0:	d006      	beq.n	800dfc0 <_ZN3BTD4InitEhhb+0x178>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dfb8:	f240 422f 	movw	r2, #1071	; 0x42f
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d10f      	bne.n	800dfe0 <_ZN3BTD4InitEhhb+0x198>
                        if(PID == PS3_PID)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dfc6:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800dfca:	d104      	bne.n	800dfd6 <_ZN3BTD4InitEhhb+0x18e>
                                Notify(PSTR("\r\nDualshock 3 Controller Connected"), 0x80);
 800dfcc:	2180      	movs	r1, #128	; 0x80
 800dfce:	4864      	ldr	r0, [pc, #400]	; (800e160 <_ZN3BTD4InitEhhb+0x318>)
 800dfd0:	f006 f962 	bl	8014298 <_Z8E_NotifyPKci>
                        if(PID == PS3_PID)
 800dfd4:	e008      	b.n	800dfe8 <_ZN3BTD4InitEhhb+0x1a0>
                        else // It must be a navigation controller
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
 800dfd6:	2180      	movs	r1, #128	; 0x80
 800dfd8:	4862      	ldr	r0, [pc, #392]	; (800e164 <_ZN3BTD4InitEhhb+0x31c>)
 800dfda:	f006 f95d 	bl	8014298 <_Z8E_NotifyPKci>
                        if(PID == PS3_PID)
 800dfde:	e003      	b.n	800dfe8 <_ZN3BTD4InitEhhb+0x1a0>
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
 800dfe0:	2180      	movs	r1, #128	; 0x80
 800dfe2:	4861      	ldr	r0, [pc, #388]	; (800e168 <_ZN3BTD4InitEhhb+0x320>)
 800dfe4:	f006 f958 	bl	8014298 <_Z8E_NotifyPKci>
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	7d1b      	ldrb	r3, [r3, #20]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d118      	bne.n	800e022 <_ZN3BTD4InitEhhb+0x1da>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	7d5b      	ldrb	r3, [r3, #21]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d114      	bne.n	800e022 <_ZN3BTD4InitEhhb+0x1da>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	7d9b      	ldrb	r3, [r3, #22]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d110      	bne.n	800e022 <_ZN3BTD4InitEhhb+0x1da>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	7ddb      	ldrb	r3, [r3, #23]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10c      	bne.n	800e022 <_ZN3BTD4InitEhhb+0x1da>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	7e1b      	ldrb	r3, [r3, #24]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d108      	bne.n	800e022 <_ZN3BTD4InitEhhb+0x1da>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	7e5b      	ldrb	r3, [r3, #25]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d104      	bne.n	800e022 <_ZN3BTD4InitEhhb+0x1da>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
 800e018:	2180      	movs	r1, #128	; 0x80
 800e01a:	4854      	ldr	r0, [pc, #336]	; (800e16c <_ZN3BTD4InitEhhb+0x324>)
 800e01c:	f006 f93c 	bl	8014298 <_Z8E_NotifyPKci>
 800e020:	e03f      	b.n	800e0a2 <_ZN3BTD4InitEhhb+0x25a>
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800e028:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800e02c:	d006      	beq.n	800e03c <_ZN3BTD4InitEhhb+0x1f4>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800e034:	f240 422f 	movw	r2, #1071	; 0x42f
 800e038:	4293      	cmp	r3, r2
 800e03a:	d106      	bne.n	800e04a <_ZN3BTD4InitEhhb+0x202>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	3314      	adds	r3, #20
 800e040:	4619      	mov	r1, r3
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f002 fba2 	bl	801078c <_ZN3BTD9setBdaddrEPh>
 800e048:	e005      	b.n	800e056 <_ZN3BTD4InitEhhb+0x20e>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	3314      	adds	r3, #20
 800e04e:	4619      	mov	r1, r3
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f002 fbdb 	bl	801080c <_ZN3BTD13setMoveBdaddrEPh>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nBluetooth Address was set to: "), 0x80);
 800e056:	2180      	movs	r1, #128	; 0x80
 800e058:	4845      	ldr	r0, [pc, #276]	; (800e170 <_ZN3BTD4InitEhhb+0x328>)
 800e05a:	f006 f91d 	bl	8014298 <_Z8E_NotifyPKci>
                        for(int8_t i = 5; i > 0; i--) {
 800e05e:	2305      	movs	r3, #5
 800e060:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800e064:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800e068:	2b00      	cmp	r3, #0
 800e06a:	dd14      	ble.n	800e096 <_ZN3BTD4InitEhhb+0x24e>
                                D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
 800e06c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	4413      	add	r3, r2
 800e074:	7d1b      	ldrb	r3, [r3, #20]
 800e076:	2180      	movs	r1, #128	; 0x80
 800e078:	4618      	mov	r0, r3
 800e07a:	f002 fc0a 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(":"), 0x80);
 800e07e:	2180      	movs	r1, #128	; 0x80
 800e080:	483c      	ldr	r0, [pc, #240]	; (800e174 <_ZN3BTD4InitEhhb+0x32c>)
 800e082:	f006 f909 	bl	8014298 <_Z8E_NotifyPKci>
                        for(int8_t i = 5; i > 0; i--) {
 800e086:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	3b01      	subs	r3, #1
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800e094:	e7e6      	b.n	800e064 <_ZN3BTD4InitEhhb+0x21c>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	7d1b      	ldrb	r3, [r3, #20]
 800e09a:	2180      	movs	r1, #128	; 0x80
 800e09c:	4618      	mov	r0, r3
 800e09e:	f002 fbf8 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	f005 fdb4 	bl	8013c20 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f005 fd7d 	bl	8013bc4 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	3308      	adds	r3, #8
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800e0d6:	23d1      	movs	r3, #209	; 0xd1
 800e0d8:	e0f4      	b.n	800e2c4 <_ZN3BTD4InitEhhb+0x47c>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800e0e0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800e0e4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d26e      	bcs.n	800e1ca <_ZN3BTD4InitEhhb+0x382>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800e0f2:	f640 225c 	movw	r2, #2652	; 0xa5c
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d106      	bne.n	800e108 <_ZN3BTD4InitEhhb+0x2c0>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800e100:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800e104:	4293      	cmp	r3, r2
 800e106:	d00d      	beq.n	800e124 <_ZN3BTD4InitEhhb+0x2dc>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800e10e:	f240 520d 	movw	r2, #1293	; 0x50d
 800e112:	4293      	cmp	r3, r2
 800e114:	d130      	bne.n	800e178 <_ZN3BTD4InitEhhb+0x330>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800e11c:	f240 625a 	movw	r2, #1626	; 0x65a
 800e120:	4293      	cmp	r3, r2
 800e122:	d129      	bne.n	800e178 <_ZN3BTD4InitEhhb+0x330>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	1d1a      	adds	r2, r3, #4
 800e128:	f107 0308 	add.w	r3, r7, #8
 800e12c:	4611      	mov	r1, r2
 800e12e:	4618      	mov	r0, r3
 800e130:	f002 fbce 	bl	80108d0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e13e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800e142:	f107 0308 	add.w	r3, r7, #8
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	4613      	mov	r3, r2
 800e14a:	2200      	movs	r2, #0
 800e14c:	f005 fced 	bl	8013b2a <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800e150:	4603      	mov	r3, r0
 800e152:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e156:	e028      	b.n	800e1aa <_ZN3BTD4InitEhhb+0x362>
 800e158:	08014850 	.word	0x08014850
 800e15c:	080148d4 	.word	0x080148d4
 800e160:	080148e0 	.word	0x080148e0
 800e164:	08014904 	.word	0x08014904
 800e168:	08014928 	.word	0x08014928
 800e16c:	08014948 	.word	0x08014948
 800e170:	080149d8 	.word	0x080149d8
 800e174:	080149fc 	.word	0x080149fc
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	1d1a      	adds	r2, r3, #4
 800e17c:	f107 0308 	add.w	r3, r7, #8
 800e180:	4611      	mov	r1, r2
 800e182:	4618      	mov	r0, r3
 800e184:	f002 fbf2 	bl	801096c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e192:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800e196:	f107 0308 	add.w	r3, r7, #8
 800e19a:	9300      	str	r3, [sp, #0]
 800e19c:	4613      	mov	r3, r2
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f005 fcc3 	bl	8013b2a <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800e1aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d156      	bne.n	800e260 <_ZN3BTD4InitEhhb+0x418>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800e1b8:	2b03      	cmp	r3, #3
 800e1ba:	d805      	bhi.n	800e1c8 <_ZN3BTD4InitEhhb+0x380>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800e1bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800e1c6:	e78b      	b.n	800e0e0 <_ZN3BTD4InitEhhb+0x298>
                                break;
 800e1c8:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800e1d0:	2b03      	cmp	r3, #3
 800e1d2:	d94f      	bls.n	800e274 <_ZN3BTD4InitEhhb+0x42c>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	3351      	adds	r3, #81	; 0x51
 800e1e8:	f004 fbbd 	bl	8012966 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800e1f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d12e      	bne.n	800e258 <_ZN3BTD4InitEhhb+0x410>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e210:	f005 fd06 	bl	8013c20 <_ZN3USB7setConfEhhh>
 800e214:	4603      	mov	r3, r0
 800e216:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800e21a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d124      	bne.n	800e26c <_ZN3BTD4InitEhhb+0x424>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2264      	movs	r2, #100	; 0x64
 800e226:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2200      	movs	r2, #0
 800e22e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2200      	movs	r2, #0
 800e236:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2200      	movs	r2, #0
 800e23e:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
 800e248:	2180      	movs	r1, #128	; 0x80
 800e24a:	4820      	ldr	r0, [pc, #128]	; (800e2cc <_ZN3BTD4InitEhhb+0x484>)
 800e24c:	f006 f824 	bl	8014298 <_Z8E_NotifyPKci>
#endif
        }
        return 0; // Successful configuration
 800e250:	2300      	movs	r3, #0
 800e252:	e037      	b.n	800e2c4 <_ZN3BTD4InitEhhb+0x47c>
                goto FailSetDevTblEntry;
 800e254:	bf00      	nop
 800e256:	e000      	b.n	800e25a <_ZN3BTD4InitEhhb+0x412>
                        goto FailSetDevTblEntry;
 800e258:	bf00      	nop

        /* Diagnostic messages */
FailSetDevTblEntry:
#ifdef DEBUG_USB_HOST
        NotifyFailSetDevTblEntry();
 800e25a:	f006 f877 	bl	801434c <_Z24NotifyFailSetDevTblEntryv>
        goto Fail;
 800e25e:	e020      	b.n	800e2a2 <_ZN3BTD4InitEhhb+0x45a>
                                goto FailGetConfDescr;
 800e260:	bf00      	nop
#endif

FailGetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetConfDescr();
 800e262:	f006 f87d 	bl	8014360 <_Z22NotifyFailGetConfDescrv>
        goto Fail;
 800e266:	e01c      	b.n	800e2a2 <_ZN3BTD4InitEhhb+0x45a>
                        goto FailSetConfDescr;
 800e268:	bf00      	nop
 800e26a:	e000      	b.n	800e26e <_ZN3BTD4InitEhhb+0x426>
                        goto FailSetConfDescr;
 800e26c:	bf00      	nop
#endif

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
 800e26e:	f006 f881 	bl	8014374 <_Z22NotifyFailSetConfDescrv>
#endif
        goto Fail;
 800e272:	e016      	b.n	800e2a2 <_ZN3BTD4InitEhhb+0x45a>
                        goto FailUnknownDevice;
 800e274:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800e282:	4619      	mov	r1, r3
 800e284:	4610      	mov	r0, r2
 800e286:	f006 f88f 	bl	80143a8 <_Z23NotifyFailUnknownDevicett>
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e294:	2300      	movs	r3, #0
 800e296:	2200      	movs	r2, #0
 800e298:	f005 fc94 	bl	8013bc4 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800e29c:	23d1      	movs	r3, #209	; 0xd1
 800e29e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
 800e2a2:	2180      	movs	r1, #128	; 0x80
 800e2a4:	480a      	ldr	r0, [pc, #40]	; (800e2d0 <_ZN3BTD4InitEhhb+0x488>)
 800e2a6:	f005 fff7 	bl	8014298 <_Z8E_NotifyPKci>
        NotifyFail(rcode);
 800e2aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f006 f89c 	bl	80143ec <_Z10NotifyFailh>
#endif
        Release();
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	3308      	adds	r3, #8
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	4798      	blx	r3
        return rcode;
 800e2c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3750      	adds	r7, #80	; 0x50
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	08014a00 	.word	0x08014a00
 800e2d0:	08014a20 	.word	0x08014a20

0800e2d4 <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800e2dc:	2300      	movs	r3, #0
 800e2de:	73fb      	strb	r3, [r7, #15]
 800e2e0:	7bfb      	ldrb	r3, [r7, #15]
 800e2e2:	2b03      	cmp	r3, #3
 800e2e4:	d845      	bhi.n	800e372 <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800e2e6:	7bfa      	ldrb	r2, [r7, #15]
 800e2e8:	6879      	ldr	r1, [r7, #4]
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	005b      	lsls	r3, r3, #1
 800e2ee:	4413      	add	r3, r2
 800e2f0:	440b      	add	r3, r1
 800e2f2:	3351      	adds	r3, #81	; 0x51
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d001      	beq.n	800e302 <_ZN3BTD10InitializeEv+0x2e>
 800e2fe:	2000      	movs	r0, #0
 800e300:	e000      	b.n	800e304 <_ZN3BTD10InitializeEv+0x30>
 800e302:	2008      	movs	r0, #8
 800e304:	7bfa      	ldrb	r2, [r7, #15]
 800e306:	6879      	ldr	r1, [r7, #4]
 800e308:	4613      	mov	r3, r2
 800e30a:	005b      	lsls	r3, r3, #1
 800e30c:	4413      	add	r3, r2
 800e30e:	440b      	add	r3, r1
 800e310:	3352      	adds	r3, #82	; 0x52
 800e312:	4602      	mov	r2, r0
 800e314:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800e316:	7bfa      	ldrb	r2, [r7, #15]
 800e318:	6879      	ldr	r1, [r7, #4]
 800e31a:	4613      	mov	r3, r2
 800e31c:	005b      	lsls	r3, r3, #1
 800e31e:	4413      	add	r3, r2
 800e320:	440b      	add	r3, r1
 800e322:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e326:	78d3      	ldrb	r3, [r2, #3]
 800e328:	f36f 0300 	bfc	r3, #0, #1
 800e32c:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800e32e:	7bfa      	ldrb	r2, [r7, #15]
 800e330:	6879      	ldr	r1, [r7, #4]
 800e332:	4613      	mov	r3, r2
 800e334:	005b      	lsls	r3, r3, #1
 800e336:	4413      	add	r3, r2
 800e338:	440b      	add	r3, r1
 800e33a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e33e:	78d3      	ldrb	r3, [r2, #3]
 800e340:	f36f 0341 	bfc	r3, #1, #1
 800e344:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800e346:	7bfb      	ldrb	r3, [r7, #15]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d001      	beq.n	800e350 <_ZN3BTD10InitializeEv+0x7c>
 800e34c:	2101      	movs	r1, #1
 800e34e:	e000      	b.n	800e352 <_ZN3BTD10InitializeEv+0x7e>
 800e350:	210f      	movs	r1, #15
 800e352:	7bfa      	ldrb	r2, [r7, #15]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	4613      	mov	r3, r2
 800e358:	005b      	lsls	r3, r3, #1
 800e35a:	4413      	add	r3, r2
 800e35c:	4403      	add	r3, r0
 800e35e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e362:	78d3      	ldrb	r3, [r2, #3]
 800e364:	f361 0387 	bfi	r3, r1, #2, #6
 800e368:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800e36a:	7bfb      	ldrb	r3, [r7, #15]
 800e36c:	3301      	adds	r3, #1
 800e36e:	73fb      	strb	r3, [r7, #15]
 800e370:	e7b6      	b.n	800e2e0 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800e372:	2300      	movs	r3, #0
 800e374:	73fb      	strb	r3, [r7, #15]
 800e376:	7bfb      	ldrb	r3, [r7, #15]
 800e378:	2b03      	cmp	r3, #3
 800e37a:	d81c      	bhi.n	800e3b6 <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800e37c:	7bfb      	ldrb	r3, [r7, #15]
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	3318      	adds	r3, #24
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	4413      	add	r3, r2
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d010      	beq.n	800e3ae <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800e38c:	7bfb      	ldrb	r3, [r7, #15]
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	3318      	adds	r3, #24
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	6859      	ldr	r1, [r3, #4]
 800e398:	7bfb      	ldrb	r3, [r7, #15]
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	3318      	adds	r3, #24
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	4413      	add	r3, r2
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	3308      	adds	r3, #8
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4608      	mov	r0, r1
 800e3ac:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800e3ae:	7bfb      	ldrb	r3, [r7, #15]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	73fb      	strb	r3, [r7, #15]
 800e3b4:	e7df      	b.n	800e376 <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2200      	movs	r2, #0
 800e400:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800e40c:	bf00      	nop
 800e40e:	3710      	adds	r7, #16
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	4608      	mov	r0, r1
 800e41e:	4611      	mov	r1, r2
 800e420:	461a      	mov	r2, r3
 800e422:	4603      	mov	r3, r0
 800e424:	70fb      	strb	r3, [r7, #3]
 800e426:	460b      	mov	r3, r1
 800e428:	70bb      	strb	r3, [r7, #2]
 800e42a:	4613      	mov	r3, r2
 800e42c:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800e42e:	787b      	ldrb	r3, [r7, #1]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d15d      	bne.n	800e4f0 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	78fa      	ldrb	r2, [r7, #3]
 800e438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	78db      	ldrb	r3, [r3, #3]
 800e440:	f003 0303 	and.w	r3, r3, #3
 800e444:	2b03      	cmp	r3, #3
 800e446:	d114      	bne.n	800e472 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	789b      	ldrb	r3, [r3, #2]
 800e44c:	b25b      	sxtb	r3, r3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	da0f      	bge.n	800e472 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800e452:	2301      	movs	r3, #1
 800e454:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800e456:	7bfa      	ldrb	r2, [r7, #15]
 800e458:	6879      	ldr	r1, [r7, #4]
 800e45a:	4613      	mov	r3, r2
 800e45c:	005b      	lsls	r3, r3, #1
 800e45e:	4413      	add	r3, r2
 800e460:	440b      	add	r3, r1
 800e462:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e466:	78d3      	ldrb	r3, [r2, #3]
 800e468:	2101      	movs	r1, #1
 800e46a:	f361 0387 	bfi	r3, r1, #2, #6
 800e46e:	70d3      	strb	r3, [r2, #3]
 800e470:	e00e      	b.n	800e490 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	78db      	ldrb	r3, [r3, #3]
 800e476:	f003 0303 	and.w	r3, r3, #3
 800e47a:	2b02      	cmp	r3, #2
 800e47c:	d13a      	bne.n	800e4f4 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	789b      	ldrb	r3, [r3, #2]
 800e482:	b25b      	sxtb	r3, r3
 800e484:	2b00      	cmp	r3, #0
 800e486:	da01      	bge.n	800e48c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800e488:	2302      	movs	r3, #2
 800e48a:	e000      	b.n	800e48e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800e48c:	2303      	movs	r3, #3
 800e48e:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	789b      	ldrb	r3, [r3, #2]
 800e494:	7bfa      	ldrb	r2, [r7, #15]
 800e496:	f003 030f 	and.w	r3, r3, #15
 800e49a:	b2d8      	uxtb	r0, r3
 800e49c:	6879      	ldr	r1, [r7, #4]
 800e49e:	4613      	mov	r3, r2
 800e4a0:	005b      	lsls	r3, r3, #1
 800e4a2:	4413      	add	r3, r2
 800e4a4:	440b      	add	r3, r1
 800e4a6:	3351      	adds	r3, #81	; 0x51
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	889b      	ldrh	r3, [r3, #4]
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	7bfa      	ldrb	r2, [r7, #15]
 800e4b4:	b2d8      	uxtb	r0, r3
 800e4b6:	6879      	ldr	r1, [r7, #4]
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	005b      	lsls	r3, r3, #1
 800e4bc:	4413      	add	r3, r2
 800e4be:	440b      	add	r3, r1
 800e4c0:	3352      	adds	r3, #82	; 0x52
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	799b      	ldrb	r3, [r3, #6]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d204      	bcs.n	800e4de <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	799a      	ldrb	r2, [r3, #6]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	b2da      	uxtb	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800e4ee:	e002      	b.n	800e4f6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800e4f0:	bf00      	nop
 800e4f2:	e000      	b.n	800e4f6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800e4f4:	bf00      	nop
}
 800e4f6:	3714      	adds	r7, #20
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800e500:	f1a0 0004 	sub.w	r0, r0, #4
 800e504:	f7ff bf86 	b.w	800e414 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800e508 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7ff fedf 	bl	800e2d4 <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7ff f9c4 	bl	800d8a8 <_ZN3USB14GetAddressPoolEv>
 800e520:	4603      	mov	r3, r0
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	3208      	adds	r2, #8
 800e526:	6812      	ldr	r2, [r2, #0]
 800e528:	6879      	ldr	r1, [r7, #4]
 800e52a:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800e52e:	4618      	mov	r0, r3
 800e530:	4790      	blx	r2
        return 0;
 800e532:	2300      	movs	r3, #0
}
 800e534:	4618      	mov	r0, r3
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800e54a:	f083 0301 	eor.w	r3, r3, #1
 800e54e:	b2db      	uxtb	r3, r3
 800e550:	2b00      	cmp	r3, #0
 800e552:	d001      	beq.n	800e558 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800e554:	2300      	movs	r3, #0
 800e556:	e01d      	b.n	800e594 <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800e558:	f7f3 ffe2 	bl	8002520 <HAL_GetTick>
 800e55c:	4602      	mov	r2, r0
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e562:	1ad3      	subs	r3, r2, r3
 800e564:	43db      	mvns	r3, r3
 800e566:	0fdb      	lsrs	r3, r3, #31
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d011      	beq.n	800e592 <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800e56e:	f7f3 ffd7 	bl	8002520 <HAL_GetTick>
 800e572:	4602      	mov	r2, r0
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e57a:	441a      	add	r2, r3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 f80b 	bl	800e59c <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 fc4a 	bl	800ee20 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f001 f8bb 	bl	800f708 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800e592:	2300      	movs	r3, #0
}
 800e594:	4618      	mov	r0, r3
 800e596:	3708      	adds	r7, #8
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800e59c:	b5b0      	push	{r4, r5, r7, lr}
 800e59e:	b088      	sub	sp, #32
 800e5a0:	af02      	add	r7, sp, #8
 800e5a2:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800e5a4:	2340      	movs	r3, #64	; 0x40
 800e5a6:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	3389      	adds	r3, #137	; 0x89
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800e5c2:	f107 050c 	add.w	r5, r7, #12
 800e5c6:	9201      	str	r2, [sp, #4]
 800e5c8:	9300      	str	r3, [sp, #0]
 800e5ca:	462b      	mov	r3, r5
 800e5cc:	4622      	mov	r2, r4
 800e5ce:	f004 fb33 	bl	8012c38 <_ZN3USB10inTransferEhhPtPhh>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800e5d6:	7bfb      	ldrb	r3, [r7, #15]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d003      	beq.n	800e5e4 <_ZN3BTD14HCI_event_taskEv+0x48>
 800e5dc:	7bfb      	ldrb	r3, [r7, #15]
 800e5de:	2b04      	cmp	r3, #4
 800e5e0:	f040 8411 	bne.w	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>
                switch(hcibuf[0]) { // Switch on event type
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	2b35      	cmp	r3, #53	; 0x35
 800e5ee:	f200 840a 	bhi.w	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>
 800e5f2:	a201      	add	r2, pc, #4	; (adr r2, 800e5f8 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800e5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f8:	0800e89b 	.word	0x0800e89b
 800e5fc:	0800e917 	.word	0x0800e917
 800e600:	0800eae5 	.word	0x0800eae5
 800e604:	0800ebe5 	.word	0x0800ebe5
 800e608:	0800eb57 	.word	0x0800eb57
 800e60c:	0800ed0f 	.word	0x0800ed0f
 800e610:	0800eb89 	.word	0x0800eb89
 800e614:	0800eded 	.word	0x0800eded
 800e618:	0800eded 	.word	0x0800eded
 800e61c:	0800ee07 	.word	0x0800ee07
 800e620:	0800ee07 	.word	0x0800ee07
 800e624:	0800eded 	.word	0x0800eded
 800e628:	0800eded 	.word	0x0800eded
 800e62c:	0800e6d1 	.word	0x0800e6d1
 800e630:	0800e835 	.word	0x0800e835
 800e634:	0800ee07 	.word	0x0800ee07
 800e638:	0800ee07 	.word	0x0800ee07
 800e63c:	0800eded 	.word	0x0800eded
 800e640:	0800eded 	.word	0x0800eded
 800e644:	0800ee07 	.word	0x0800ee07
 800e648:	0800ee07 	.word	0x0800ee07
 800e64c:	0800ecb1 	.word	0x0800ecb1
 800e650:	0800ecff 	.word	0x0800ecff
 800e654:	0800eded 	.word	0x0800eded
 800e658:	0800eded 	.word	0x0800eded
 800e65c:	0800eded 	.word	0x0800eded
 800e660:	0800eded 	.word	0x0800eded
 800e664:	0800ee07 	.word	0x0800ee07
 800e668:	0800ee07 	.word	0x0800ee07
 800e66c:	0800ee07 	.word	0x0800ee07
 800e670:	0800ee07 	.word	0x0800ee07
 800e674:	0800eded 	.word	0x0800eded
 800e678:	0800ee07 	.word	0x0800ee07
 800e67c:	0800ee07 	.word	0x0800ee07
 800e680:	0800ee07 	.word	0x0800ee07
 800e684:	0800ee07 	.word	0x0800ee07
 800e688:	0800ee07 	.word	0x0800ee07
 800e68c:	0800ee07 	.word	0x0800ee07
 800e690:	0800ee07 	.word	0x0800ee07
 800e694:	0800ee07 	.word	0x0800ee07
 800e698:	0800ee07 	.word	0x0800ee07
 800e69c:	0800ee07 	.word	0x0800ee07
 800e6a0:	0800ee07 	.word	0x0800ee07
 800e6a4:	0800ee07 	.word	0x0800ee07
 800e6a8:	0800ee07 	.word	0x0800ee07
 800e6ac:	0800ee07 	.word	0x0800ee07
 800e6b0:	0800ee07 	.word	0x0800ee07
 800e6b4:	0800ee07 	.word	0x0800ee07
 800e6b8:	0800edcd 	.word	0x0800edcd
 800e6bc:	0800eded 	.word	0x0800eded
 800e6c0:	0800eddd 	.word	0x0800eddd
 800e6c4:	0800ee07 	.word	0x0800ee07
 800e6c8:	0800ee07 	.word	0x0800ee07
 800e6cc:	0800eded 	.word	0x0800eded
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f040 838a 	bne.w	800edf0 <_ZN3BTD14HCI_event_taskEv+0x854>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e6e2:	f043 0301 	orr.w	r3, r3, #1
 800e6e6:	b29a      	uxth	r2, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d114      	bne.n	800e722 <_ZN3BTD14HCI_event_taskEv+0x186>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e6fe:	2b10      	cmp	r3, #16
 800e700:	d10f      	bne.n	800e722 <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e718:	b29a      	uxth	r2, r3
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e720:	e087      	b.n	800e832 <_ZN3BTD14HCI_event_taskEv+0x296>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e728:	2b04      	cmp	r3, #4
 800e72a:	d158      	bne.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x242>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e732:	2b10      	cmp	r3, #16
 800e734:	d153      	bne.n	800e7de <_ZN3BTD14HCI_event_taskEv+0x242>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e73c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e740:	2b00      	cmp	r3, #0
 800e742:	d142      	bne.n	800e7ca <_ZN3BTD14HCI_event_taskEv+0x22e>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d120      	bne.n	800e790 <_ZN3BTD14HCI_event_taskEv+0x1f4>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
 800e74e:	2180      	movs	r1, #128	; 0x80
 800e750:	48a9      	ldr	r0, [pc, #676]	; (800e9f8 <_ZN3BTD14HCI_event_taskEv+0x45c>)
 800e752:	f005 fda1 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800e75c:	f003 0308 	and.w	r3, r3, #8
 800e760:	2b00      	cmp	r3, #0
 800e762:	d008      	beq.n	800e776 <_ZN3BTD14HCI_event_taskEv+0x1da>
                                                                        simple_pairing_supported = true;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2201      	movs	r2, #1
 800e768:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
 800e76c:	2180      	movs	r1, #128	; 0x80
 800e76e:	48a3      	ldr	r0, [pc, #652]	; (800e9fc <_ZN3BTD14HCI_event_taskEv+0x460>)
 800e770:	f005 fd92 	bl	8014298 <_Z8E_NotifyPKci>
 800e774:	e007      	b.n	800e786 <_ZN3BTD14HCI_event_taskEv+0x1ea>
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2200      	movs	r2, #0
 800e77a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("does NOT support"), 0x80);
 800e77e:	2180      	movs	r1, #128	; 0x80
 800e780:	489f      	ldr	r0, [pc, #636]	; (800ea00 <_ZN3BTD14HCI_event_taskEv+0x464>)
 800e782:	f005 fd89 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                                                }
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR(" secure simple pairing (controller support)"), 0x80);
 800e786:	2180      	movs	r1, #128	; 0x80
 800e788:	489e      	ldr	r0, [pc, #632]	; (800ea04 <_ZN3BTD14HCI_event_taskEv+0x468>)
 800e78a:	f005 fd85 	bl	8014298 <_Z8E_NotifyPKci>
 800e78e:	e01c      	b.n	800e7ca <_ZN3BTD14HCI_event_taskEv+0x22e>
#endif
                                                        } else if(hcibuf[6] == 1) { // Page 1
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800e796:	2b01      	cmp	r3, #1
 800e798:	d117      	bne.n	800e7ca <_ZN3BTD14HCI_event_taskEv+0x22e>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
 800e79a:	2180      	movs	r1, #128	; 0x80
 800e79c:	4896      	ldr	r0, [pc, #600]	; (800e9f8 <_ZN3BTD14HCI_event_taskEv+0x45c>)
 800e79e:	f005 fd7b 	bl	8014298 <_Z8E_NotifyPKci>
                                                                if(hcibuf[8 + 0] & (1U << 0))
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e7a8:	f003 0301 	and.w	r3, r3, #1
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d004      	beq.n	800e7ba <_ZN3BTD14HCI_event_taskEv+0x21e>
                                                                        Notify(PSTR("supports"), 0x80);
 800e7b0:	2180      	movs	r1, #128	; 0x80
 800e7b2:	4892      	ldr	r0, [pc, #584]	; (800e9fc <_ZN3BTD14HCI_event_taskEv+0x460>)
 800e7b4:	f005 fd70 	bl	8014298 <_Z8E_NotifyPKci>
 800e7b8:	e003      	b.n	800e7c2 <_ZN3BTD14HCI_event_taskEv+0x226>
                                                                else
                                                                        Notify(PSTR("does NOT support"), 0x80);
 800e7ba:	2180      	movs	r1, #128	; 0x80
 800e7bc:	4890      	ldr	r0, [pc, #576]	; (800ea00 <_ZN3BTD14HCI_event_taskEv+0x464>)
 800e7be:	f005 fd6b 	bl	8014298 <_Z8E_NotifyPKci>
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
 800e7c2:	2180      	movs	r1, #128	; 0x80
 800e7c4:	4890      	ldr	r0, [pc, #576]	; (800ea08 <_ZN3BTD14HCI_event_taskEv+0x46c>)
 800e7c6:	f005 fd67 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e7d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e7d4:	b29a      	uxth	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e7dc:	e029      	b.n	800e832 <_ZN3BTD14HCI_event_taskEv+0x296>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e7e4:	2b09      	cmp	r3, #9
 800e7e6:	f040 8303 	bne.w	800edf0 <_ZN3BTD14HCI_event_taskEv+0x854>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e7f0:	2b10      	cmp	r3, #16
 800e7f2:	f040 82fd 	bne.w	800edf0 <_ZN3BTD14HCI_event_taskEv+0x854>
                                                for(uint8_t i = 0; i < 6; i++)
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	75fb      	strb	r3, [r7, #23]
 800e7fa:	7dfb      	ldrb	r3, [r7, #23]
 800e7fc:	2b05      	cmp	r3, #5
 800e7fe:	d80e      	bhi.n	800e81e <_ZN3BTD14HCI_event_taskEv+0x282>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800e800:	7dfb      	ldrb	r3, [r7, #23]
 800e802:	1d9a      	adds	r2, r3, #6
 800e804:	7dfb      	ldrb	r3, [r7, #23]
 800e806:	6879      	ldr	r1, [r7, #4]
 800e808:	440a      	add	r2, r1
 800e80a:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	4413      	add	r3, r2
 800e812:	460a      	mov	r2, r1
 800e814:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800e816:	7dfb      	ldrb	r3, [r7, #23]
 800e818:	3301      	adds	r3, #1
 800e81a:	75fb      	strb	r3, [r7, #23]
 800e81c:	e7ed      	b.n	800e7fa <_ZN3BTD14HCI_event_taskEv+0x25e>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e824:	f043 0320 	orr.w	r3, r3, #32
 800e828:	b29a      	uxth	r2, r3
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800e830:	e2de      	b.n	800edf0 <_ZN3BTD14HCI_event_taskEv+0x854>
 800e832:	e2dd      	b.n	800edf0 <_ZN3BTD14HCI_event_taskEv+0x854>

                        case EV_COMMAND_STATUS:
                                if(hcibuf[2]) { // Show status on serial if not OK
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	f000 82da 	beq.w	800edf4 <_ZN3BTD14HCI_event_taskEv+0x858>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nHCI Command Failed: "), 0x80);
 800e840:	2180      	movs	r1, #128	; 0x80
 800e842:	4872      	ldr	r0, [pc, #456]	; (800ea0c <_ZN3BTD14HCI_event_taskEv+0x470>)
 800e844:	f005 fd28 	bl	8014298 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e84e:	2180      	movs	r1, #128	; 0x80
 800e850:	4618      	mov	r0, r3
 800e852:	f002 f81e 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR("\r\nNum HCI Command Packets: "), 0x80);
 800e856:	2180      	movs	r1, #128	; 0x80
 800e858:	486d      	ldr	r0, [pc, #436]	; (800ea10 <_ZN3BTD14HCI_event_taskEv+0x474>)
 800e85a:	f005 fd1d 	bl	8014298 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[3], 0x80);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e864:	2180      	movs	r1, #128	; 0x80
 800e866:	4618      	mov	r0, r3
 800e868:	f002 f813 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR("\r\nCommand Opcode: "), 0x80);
 800e86c:	2180      	movs	r1, #128	; 0x80
 800e86e:	4869      	ldr	r0, [pc, #420]	; (800ea14 <_ZN3BTD14HCI_event_taskEv+0x478>)
 800e870:	f005 fd12 	bl	8014298 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[4], 0x80);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e87a:	2180      	movs	r1, #128	; 0x80
 800e87c:	4618      	mov	r0, r3
 800e87e:	f002 f808 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR(" "), 0x80);
 800e882:	2180      	movs	r1, #128	; 0x80
 800e884:	4864      	ldr	r0, [pc, #400]	; (800ea18 <_ZN3BTD14HCI_event_taskEv+0x47c>)
 800e886:	f005 fd07 	bl	8014298 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[5], 0x80);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800e890:	2180      	movs	r1, #128	; 0x80
 800e892:	4618      	mov	r0, r3
 800e894:	f001 fffd 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
#endif
                                }
                                break;
 800e898:	e2ac      	b.n	800edf4 <_ZN3BTD14HCI_event_taskEv+0x858>

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e8a0:	2b04      	cmp	r3, #4
 800e8a2:	d92f      	bls.n	800e904 <_ZN3BTD14HCI_event_taskEv+0x368>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d104      	bne.n	800e8b8 <_ZN3BTD14HCI_event_taskEv+0x31c>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d025      	beq.n	800e904 <_ZN3BTD14HCI_event_taskEv+0x368>
                                        inquiry_counter = 0;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#ifdef DEBUG_USB_HOST
                                        if(pairWithWii)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d004      	beq.n	800e8d4 <_ZN3BTD14HCI_event_taskEv+0x338>
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
 800e8ca:	2180      	movs	r1, #128	; 0x80
 800e8cc:	4853      	ldr	r0, [pc, #332]	; (800ea1c <_ZN3BTD14HCI_event_taskEv+0x480>)
 800e8ce:	f005 fce3 	bl	8014298 <_Z8E_NotifyPKci>
 800e8d2:	e003      	b.n	800e8dc <_ZN3BTD14HCI_event_taskEv+0x340>
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
 800e8d4:	2180      	movs	r1, #128	; 0x80
 800e8d6:	4852      	ldr	r0, [pc, #328]	; (800ea20 <_ZN3BTD14HCI_event_taskEv+0x484>)
 800e8d8:	f005 fcde 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                        connectToWii = false;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	220a      	movs	r2, #10
 800e900:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e90a:	3301      	adds	r3, #1
 800e90c:	b2da      	uxtb	r2, r3
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800e914:	e277      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f000 826b 	beq.w	800edf8 <_ZN3BTD14HCI_event_taskEv+0x85c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800e922:	2300      	movs	r3, #0
 800e924:	75bb      	strb	r3, [r7, #22]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e92c:	7dba      	ldrb	r2, [r7, #22]
 800e92e:	429a      	cmp	r2, r3
 800e930:	f080 8262 	bcs.w	800edf8 <_ZN3BTD14HCI_event_taskEv+0x85c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e93a:	00db      	lsls	r3, r3, #3
 800e93c:	b2da      	uxtb	r2, r3
 800e93e:	7dbb      	ldrb	r3, [r7, #22]
 800e940:	4619      	mov	r1, r3
 800e942:	0049      	lsls	r1, r1, #1
 800e944:	440b      	add	r3, r1
 800e946:	b2db      	uxtb	r3, r3
 800e948:	4413      	add	r3, r2
 800e94a:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800e94c:	2300      	movs	r3, #0
 800e94e:	757b      	strb	r3, [r7, #21]
 800e950:	7d7b      	ldrb	r3, [r7, #21]
 800e952:	2b02      	cmp	r3, #2
 800e954:	d811      	bhi.n	800e97a <_ZN3BTD14HCI_event_taskEv+0x3de>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800e956:	7d7b      	ldrb	r3, [r7, #21]
 800e958:	1d1a      	adds	r2, r3, #4
 800e95a:	7bbb      	ldrb	r3, [r7, #14]
 800e95c:	441a      	add	r2, r3
 800e95e:	7d7b      	ldrb	r3, [r7, #21]
 800e960:	6879      	ldr	r1, [r7, #4]
 800e962:	440a      	add	r2, r1
 800e964:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	4413      	add	r3, r2
 800e96c:	460a      	mov	r2, r1
 800e96e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800e972:	7d7b      	ldrb	r3, [r7, #21]
 800e974:	3301      	adds	r3, #1
 800e976:	757b      	strb	r3, [r7, #21]
 800e978:	e7ea      	b.n	800e950 <_ZN3BTD14HCI_event_taskEv+0x3b4>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e980:	2b00      	cmp	r3, #0
 800e982:	d04f      	beq.n	800ea24 <_ZN3BTD14HCI_event_taskEv+0x488>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d14a      	bne.n	800ea24 <_ZN3BTD14HCI_event_taskEv+0x488>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e994:	2b05      	cmp	r3, #5
 800e996:	d145      	bne.n	800ea24 <_ZN3BTD14HCI_event_taskEv+0x488>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e99e:	f003 030c 	and.w	r3, r3, #12
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d03e      	beq.n	800ea24 <_ZN3BTD14HCI_event_taskEv+0x488>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	753b      	strb	r3, [r7, #20]
 800e9b2:	7d3b      	ldrb	r3, [r7, #20]
 800e9b4:	2b05      	cmp	r3, #5
 800e9b6:	d814      	bhi.n	800e9e2 <_ZN3BTD14HCI_event_taskEv+0x446>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800e9b8:	7d3b      	ldrb	r3, [r7, #20]
 800e9ba:	1cd9      	adds	r1, r3, #3
 800e9bc:	7dba      	ldrb	r2, [r7, #22]
 800e9be:	4613      	mov	r3, r2
 800e9c0:	005b      	lsls	r3, r3, #1
 800e9c2:	4413      	add	r3, r2
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	18ca      	adds	r2, r1, r3
 800e9c8:	7d3b      	ldrb	r3, [r7, #20]
 800e9ca:	6879      	ldr	r1, [r7, #4]
 800e9cc:	440a      	add	r2, r1
 800e9ce:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	460a      	mov	r2, r1
 800e9d8:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800e9da:	7d3b      	ldrb	r3, [r7, #20]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	753b      	strb	r3, [r7, #20]
 800e9e0:	e7e7      	b.n	800e9b2 <_ZN3BTD14HCI_event_taskEv+0x416>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800e9f4:	e075      	b.n	800eae2 <_ZN3BTD14HCI_event_taskEv+0x546>
 800e9f6:	bf00      	nop
 800e9f8:	08014a40 	.word	0x08014a40
 800e9fc:	08014a4c 	.word	0x08014a4c
 800ea00:	08014a58 	.word	0x08014a58
 800ea04:	08014a6c 	.word	0x08014a6c
 800ea08:	08014a98 	.word	0x08014a98
 800ea0c:	08014ac0 	.word	0x08014ac0
 800ea10:	08014ad8 	.word	0x08014ad8
 800ea14:	08014af4 	.word	0x08014af4
 800ea18:	08014b08 	.word	0x08014b08
 800ea1c:	08014b0c 	.word	0x08014b0c
 800ea20:	08014b24 	.word	0x08014b24
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d055      	beq.n	800eada <_ZN3BTD14HCI_event_taskEv+0x53e>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800ea34:	f003 030f 	and.w	r3, r3, #15
 800ea38:	2b05      	cmp	r3, #5
 800ea3a:	d14e      	bne.n	800eada <_ZN3BTD14HCI_event_taskEv+0x53e>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ea42:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d047      	beq.n	800eada <_ZN3BTD14HCI_event_taskEv+0x53e>
#ifdef DEBUG_USB_HOST
                                                        checkRemoteName = true; // Used to print name in the serial monitor if serial debugging is enabled
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        if(classOfDevice[0] & 0x80)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ea58:	b25b      	sxtb	r3, r3
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	da03      	bge.n	800ea66 <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                                Notify(PSTR("\r\nMouse found"), 0x80);
 800ea5e:	2180      	movs	r1, #128	; 0x80
 800ea60:	48b8      	ldr	r0, [pc, #736]	; (800ed44 <_ZN3BTD14HCI_event_taskEv+0x7a8>)
 800ea62:	f005 fc19 	bl	8014298 <_Z8E_NotifyPKci>
                                                        if(classOfDevice[0] & 0x40)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ea6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d003      	beq.n	800ea7c <_ZN3BTD14HCI_event_taskEv+0x4e0>
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
 800ea74:	2180      	movs	r1, #128	; 0x80
 800ea76:	48b4      	ldr	r0, [pc, #720]	; (800ed48 <_ZN3BTD14HCI_event_taskEv+0x7ac>)
 800ea78:	f005 fc0e 	bl	8014298 <_Z8E_NotifyPKci>
                                                        if(classOfDevice[0] & 0x08)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ea82:	f003 0308 	and.w	r3, r3, #8
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d003      	beq.n	800ea92 <_ZN3BTD14HCI_event_taskEv+0x4f6>
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
 800ea8a:	2180      	movs	r1, #128	; 0x80
 800ea8c:	48af      	ldr	r0, [pc, #700]	; (800ed4c <_ZN3BTD14HCI_event_taskEv+0x7b0>)
 800ea8e:	f005 fc03 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800ea92:	2300      	movs	r3, #0
 800ea94:	74fb      	strb	r3, [r7, #19]
 800ea96:	7cfb      	ldrb	r3, [r7, #19]
 800ea98:	2b05      	cmp	r3, #5
 800ea9a:	d814      	bhi.n	800eac6 <_ZN3BTD14HCI_event_taskEv+0x52a>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800ea9c:	7cfb      	ldrb	r3, [r7, #19]
 800ea9e:	1cd9      	adds	r1, r3, #3
 800eaa0:	7dba      	ldrb	r2, [r7, #22]
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	005b      	lsls	r3, r3, #1
 800eaa6:	4413      	add	r3, r2
 800eaa8:	005b      	lsls	r3, r3, #1
 800eaaa:	18ca      	adds	r2, r1, r3
 800eaac:	7cfb      	ldrb	r3, [r7, #19]
 800eaae:	6879      	ldr	r1, [r7, #4]
 800eab0:	440a      	add	r2, r1
 800eab2:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	4413      	add	r3, r2
 800eaba:	460a      	mov	r2, r1
 800eabc:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800eabe:	7cfb      	ldrb	r3, [r7, #19]
 800eac0:	3301      	adds	r3, #1
 800eac2:	74fb      	strb	r3, [r7, #19]
 800eac4:	e7e7      	b.n	800ea96 <_ZN3BTD14HCI_event_taskEv+0x4fa>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ead0:	b29a      	uxth	r2, r3
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800ead8:	e003      	b.n	800eae2 <_ZN3BTD14HCI_event_taskEv+0x546>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800eada:	7dbb      	ldrb	r3, [r7, #22]
 800eadc:	3301      	adds	r3, #1
 800eade:	75bb      	strb	r3, [r7, #22]
 800eae0:	e721      	b.n	800e926 <_ZN3BTD14HCI_event_taskEv+0x38a>
                                                }
                                        }
                                }
                                break;
 800eae2:	e189      	b.n	800edf8 <_ZN3BTD14HCI_event_taskEv+0x85c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eaea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d11a      	bne.n	800eb36 <_ZN3BTD14HCI_event_taskEv+0x59a>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800eb06:	b21a      	sxth	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800eb0e:	021b      	lsls	r3, r3, #8
 800eb10:	b21b      	sxth	r3, r3
 800eb12:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800eb16:	b21b      	sxth	r3, r3
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	b21b      	sxth	r3, r3
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb28:	f043 0302 	orr.w	r3, r3, #2
 800eb2c:	b29a      	uxth	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800eb34:	e167      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2206      	movs	r2, #6
 800eb3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
 800eb3e:	2180      	movs	r1, #128	; 0x80
 800eb40:	4883      	ldr	r0, [pc, #524]	; (800ed50 <_ZN3BTD14HCI_event_taskEv+0x7b4>)
 800eb42:	f005 fba9 	bl	8014298 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800eb4c:	2180      	movs	r1, #128	; 0x80
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f001 fe9f 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                                break;
 800eb54:	e157      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f040 814d 	bne.w	800edfc <_ZN3BTD14HCI_event_taskEv+0x860>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb68:	f043 0304 	orr.w	r3, r3, #4
 800eb6c:	b29a      	uxth	r2, r3
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb7a:	f023 0302 	bic.w	r3, r3, #2
 800eb7e:	b29a      	uxth	r2, r3
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800eb86:	e139      	b.n	800edfc <_ZN3BTD14HCI_event_taskEv+0x860>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	f040 8136 	bne.w	800ee00 <_ZN3BTD14HCI_event_taskEv+0x864>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800eb94:	2300      	movs	r3, #0
 800eb96:	74bb      	strb	r3, [r7, #18]
 800eb98:	7cbb      	ldrb	r3, [r7, #18]
 800eb9a:	2b1d      	cmp	r3, #29
 800eb9c:	d818      	bhi.n	800ebd0 <_ZN3BTD14HCI_event_taskEv+0x634>
                                                remote_name[i] = hcibuf[9 + i];
 800eb9e:	7cbb      	ldrb	r3, [r7, #18]
 800eba0:	f103 0209 	add.w	r2, r3, #9
 800eba4:	7cbb      	ldrb	r3, [r7, #18]
 800eba6:	6879      	ldr	r1, [r7, #4]
 800eba8:	440a      	add	r2, r1
 800ebaa:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	460a      	mov	r2, r1
 800ebb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800ebb8:	7cbb      	ldrb	r3, [r7, #18]
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d003      	beq.n	800ebce <_ZN3BTD14HCI_event_taskEv+0x632>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800ebc6:	7cbb      	ldrb	r3, [r7, #18]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	74bb      	strb	r3, [r7, #18]
 800ebcc:	e7e4      	b.n	800eb98 <_ZN3BTD14HCI_event_taskEv+0x5fc>
                                                        break;
 800ebce:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ebd6:	f043 0308 	orr.w	r3, r3, #8
 800ebda:	b29a      	uxth	r2, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800ebe2:	e10d      	b.n	800ee00 <_ZN3BTD14HCI_event_taskEv+0x864>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	747b      	strb	r3, [r7, #17]
 800ebe8:	7c7b      	ldrb	r3, [r7, #17]
 800ebea:	2b05      	cmp	r3, #5
 800ebec:	d80e      	bhi.n	800ec0c <_ZN3BTD14HCI_event_taskEv+0x670>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800ebee:	7c7b      	ldrb	r3, [r7, #17]
 800ebf0:	1c9a      	adds	r2, r3, #2
 800ebf2:	7c7b      	ldrb	r3, [r7, #17]
 800ebf4:	6879      	ldr	r1, [r7, #4]
 800ebf6:	440a      	add	r2, r1
 800ebf8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	4413      	add	r3, r2
 800ec00:	460a      	mov	r2, r1
 800ec02:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800ec04:	7c7b      	ldrb	r3, [r7, #17]
 800ec06:	3301      	adds	r3, #1
 800ec08:	747b      	strb	r3, [r7, #17]
 800ec0a:	e7ed      	b.n	800ebe8 <_ZN3BTD14HCI_event_taskEv+0x64c>

                                for(uint8_t i = 0; i < 3; i++)
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	743b      	strb	r3, [r7, #16]
 800ec10:	7c3b      	ldrb	r3, [r7, #16]
 800ec12:	2b02      	cmp	r3, #2
 800ec14:	d810      	bhi.n	800ec38 <_ZN3BTD14HCI_event_taskEv+0x69c>
                                        classOfDevice[i] = hcibuf[i + 8];
 800ec16:	7c3b      	ldrb	r3, [r7, #16]
 800ec18:	f103 0208 	add.w	r2, r3, #8
 800ec1c:	7c3b      	ldrb	r3, [r7, #16]
 800ec1e:	6879      	ldr	r1, [r7, #4]
 800ec20:	440a      	add	r2, r1
 800ec22:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	4413      	add	r3, r2
 800ec2a:	460a      	mov	r2, r1
 800ec2c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800ec30:	7c3b      	ldrb	r3, [r7, #16]
 800ec32:	3301      	adds	r3, #1
 800ec34:	743b      	strb	r3, [r7, #16]
 800ec36:	e7eb      	b.n	800ec10 <_ZN3BTD14HCI_event_taskEv+0x674>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800ec3e:	f003 030f 	and.w	r3, r3, #15
 800ec42:	2b05      	cmp	r3, #5
 800ec44:	d12a      	bne.n	800ec9c <_ZN3BTD14HCI_event_taskEv+0x700>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ec4c:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d023      	beq.n	800ec9c <_ZN3BTD14HCI_event_taskEv+0x700>
#ifdef DEBUG_USB_HOST
                                        if(classOfDevice[0] & 0x80)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ec5a:	b25b      	sxtb	r3, r3
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	da03      	bge.n	800ec68 <_ZN3BTD14HCI_event_taskEv+0x6cc>
                                                Notify(PSTR("\r\nMouse is connecting"), 0x80);
 800ec60:	2180      	movs	r1, #128	; 0x80
 800ec62:	483c      	ldr	r0, [pc, #240]	; (800ed54 <_ZN3BTD14HCI_event_taskEv+0x7b8>)
 800ec64:	f005 fb18 	bl	8014298 <_Z8E_NotifyPKci>
                                        if(classOfDevice[0] & 0x40)
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ec6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d003      	beq.n	800ec7e <_ZN3BTD14HCI_event_taskEv+0x6e2>
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
 800ec76:	2180      	movs	r1, #128	; 0x80
 800ec78:	4837      	ldr	r0, [pc, #220]	; (800ed58 <_ZN3BTD14HCI_event_taskEv+0x7bc>)
 800ec7a:	f005 fb0d 	bl	8014298 <_Z8E_NotifyPKci>
                                        if(classOfDevice[0] & 0x08)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ec84:	f003 0308 	and.w	r3, r3, #8
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d003      	beq.n	800ec94 <_ZN3BTD14HCI_event_taskEv+0x6f8>
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
 800ec8c:	2180      	movs	r1, #128	; 0x80
 800ec8e:	4833      	ldr	r0, [pc, #204]	; (800ed5c <_ZN3BTD14HCI_event_taskEv+0x7c0>)
 800ec90:	f005 fb02 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                        incomingHIDDevice = true;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2201      	movs	r2, #1
 800ec98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eca2:	f043 0310 	orr.w	r3, r3, #16
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800ecae:	e0aa      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d007      	beq.n	800ecca <_ZN3BTD14HCI_event_taskEv+0x72e>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
 800ecba:	2180      	movs	r1, #128	; 0x80
 800ecbc:	4828      	ldr	r0, [pc, #160]	; (800ed60 <_ZN3BTD14HCI_event_taskEv+0x7c4>)
 800ecbe:	f005 faeb 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                        hci_pin_code_request_reply();
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f001 f884 	bl	800fdd0 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800ecc8:	e09d      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>
                                } else if(btdPin != NULL) {
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	691b      	ldr	r3, [r3, #16]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d00d      	beq.n	800ecee <_ZN3BTD14HCI_event_taskEv+0x752>
                                        Notify(PSTR("\r\nBluetooth pin is set too: "), 0x80);
 800ecd2:	2180      	movs	r1, #128	; 0x80
 800ecd4:	4823      	ldr	r0, [pc, #140]	; (800ed64 <_ZN3BTD14HCI_event_taskEv+0x7c8>)
 800ecd6:	f005 fadf 	bl	8014298 <_Z8E_NotifyPKci>
                                        NotifyStr(btdPin, 0x80);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	691b      	ldr	r3, [r3, #16]
 800ecde:	2180      	movs	r1, #128	; 0x80
 800ece0:	4618      	mov	r0, r3
 800ece2:	f005 fb01 	bl	80142e8 <_Z11E_NotifyStrPKci>
                                        hci_pin_code_request_reply();
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f001 f872 	bl	800fdd0 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800ecec:	e08b      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
 800ecee:	2180      	movs	r1, #128	; 0x80
 800ecf0:	481d      	ldr	r0, [pc, #116]	; (800ed68 <_ZN3BTD14HCI_event_taskEv+0x7cc>)
 800ecf2:	f005 fad1 	bl	8014298 <_Z8E_NotifyPKci>
                                        hci_pin_code_negative_request_reply();
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f001 f924 	bl	800ff44 <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800ecfc:	e083      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
 800ecfe:	2180      	movs	r1, #128	; 0x80
 800ed00:	481a      	ldr	r0, [pc, #104]	; (800ed6c <_ZN3BTD14HCI_event_taskEv+0x7d0>)
 800ed02:	f005 fac9 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                hci_link_key_request_negative_reply();
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f001 f957 	bl	800ffba <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800ed0c:	e07b      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d143      	bne.n	800eda0 <_ZN3BTD14HCI_event_taskEv+0x804>
                                        if(pairWithWii && !connectToWii) {
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d028      	beq.n	800ed74 <_ZN3BTD14HCI_event_taskEv+0x7d8>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed28:	f083 0301 	eor.w	r3, r3, #1
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d020      	beq.n	800ed74 <_ZN3BTD14HCI_event_taskEv+0x7d8>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
 800ed32:	2180      	movs	r1, #128	; 0x80
 800ed34:	480e      	ldr	r0, [pc, #56]	; (800ed70 <_ZN3BTD14HCI_event_taskEv+0x7d4>)
 800ed36:	f005 faaf 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2201      	movs	r2, #1
 800ed3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800ed42:	e05f      	b.n	800ee04 <_ZN3BTD14HCI_event_taskEv+0x868>
 800ed44:	08014b40 	.word	0x08014b40
 800ed48:	08014b50 	.word	0x08014b50
 800ed4c:	08014b64 	.word	0x08014b64
 800ed50:	08014b74 	.word	0x08014b74
 800ed54:	08014b8c 	.word	0x08014b8c
 800ed58:	08014ba4 	.word	0x08014ba4
 800ed5c:	08014bc0 	.word	0x08014bc0
 800ed60:	08014bd8 	.word	0x08014bd8
 800ed64:	08014bf0 	.word	0x08014bf0
 800ed68:	08014c10 	.word	0x08014c10
 800ed6c:	08014c24 	.word	0x08014c24
 800ed70:	08014c3c 	.word	0x08014c3c
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d042      	beq.n	800ee04 <_ZN3BTD14HCI_event_taskEv+0x868>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ed84:	f083 0301 	eor.w	r3, r3, #1
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d03a      	beq.n	800ee04 <_ZN3BTD14HCI_event_taskEv+0x868>
                                                Notify(PSTR("\r\nPairing successful with HID device"), 0x80);
 800ed8e:	2180      	movs	r1, #128	; 0x80
 800ed90:	481f      	ldr	r0, [pc, #124]	; (800ee10 <_ZN3BTD14HCI_event_taskEv+0x874>)
 800ed92:	f005 fa81 	bl	8014298 <_Z8E_NotifyPKci>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800ed9e:	e031      	b.n	800ee04 <_ZN3BTD14HCI_event_taskEv+0x868>
                                        Notify(PSTR("\r\nPairing Failed: "), 0x80);
 800eda0:	2180      	movs	r1, #128	; 0x80
 800eda2:	481c      	ldr	r0, [pc, #112]	; (800ee14 <_ZN3BTD14HCI_event_taskEv+0x878>)
 800eda4:	f005 fa78 	bl	8014298 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800edae:	2180      	movs	r1, #128	; 0x80
 800edb0:	4618      	mov	r0, r3
 800edb2:	f001 fd6e 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                                        hci_disconnect(hci_handle);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	8b5b      	ldrh	r3, [r3, #26]
 800edba:	4619      	mov	r1, r3
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f001 f9e4 	bl	801018a <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2210      	movs	r2, #16
 800edc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800edca:	e01b      	b.n	800ee04 <_ZN3BTD14HCI_event_taskEv+0x868>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
 800edcc:	2180      	movs	r1, #128	; 0x80
 800edce:	4812      	ldr	r0, [pc, #72]	; (800ee18 <_ZN3BTD14HCI_event_taskEv+0x87c>)
 800edd0:	f005 fa62 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                hci_io_capability_request_reply();
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f001 f92b 	bl	8010030 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800edda:	e014      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>
#endif
                                break;

                        case EV_USER_CONFIRMATION_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nUser confirmation Request"), 0x80);
 800eddc:	2180      	movs	r1, #128	; 0x80
 800edde:	480f      	ldr	r0, [pc, #60]	; (800ee1c <_ZN3BTD14HCI_event_taskEv+0x880>)
 800ede0:	f005 fa5a 	bl	8014298 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f001 f96a 	bl	80100be <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800edea:	e00c      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800edec:	bf00      	nop
 800edee:	e00a      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>
                                break;
 800edf0:	bf00      	nop
 800edf2:	e008      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>
                                break;
 800edf4:	bf00      	nop
 800edf6:	e006      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>
                                break;
 800edf8:	bf00      	nop
 800edfa:	e004      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>
                                break;
 800edfc:	bf00      	nop
 800edfe:	e002      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>
                                break;
 800ee00:	bf00      	nop
 800ee02:	e000      	b.n	800ee06 <_ZN3BTD14HCI_event_taskEv+0x86a>
                                break;
 800ee04:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800ee06:	bf00      	nop
 800ee08:	3718      	adds	r7, #24
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bdb0      	pop	{r4, r5, r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	08014c60 	.word	0x08014c60
 800ee14:	08014c88 	.word	0x08014c88
 800ee18:	08014c9c 	.word	0x08014c9c
 800ee1c:	08014cc0 	.word	0x08014cc0

0800ee20 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800ee20:	b590      	push	{r4, r7, lr}
 800ee22:	b085      	sub	sp, #20
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ee2e:	2b13      	cmp	r3, #19
 800ee30:	f200 843e 	bhi.w	800f6b0 <_ZN3BTD8HCI_taskEv+0x890>
 800ee34:	a201      	add	r2, pc, #4	; (adr r2, 800ee3c <_ZN3BTD8HCI_taskEv+0x1c>)
 800ee36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3a:	bf00      	nop
 800ee3c:	0800ee8d 	.word	0x0800ee8d
 800ee40:	0800eec7 	.word	0x0800eec7
 800ee44:	0800ef5d 	.word	0x0800ef5d
 800ee48:	0800ef85 	.word	0x0800ef85
 800ee4c:	0800efed 	.word	0x0800efed
 800ee50:	0800f041 	.word	0x0800f041
 800ee54:	0800f10b 	.word	0x0800f10b
 800ee58:	0800f155 	.word	0x0800f155
 800ee5c:	0800f23d 	.word	0x0800f23d
 800ee60:	0800f281 	.word	0x0800f281
 800ee64:	0800f2db 	.word	0x0800f2db
 800ee68:	0800f341 	.word	0x0800f341
 800ee6c:	0800f387 	.word	0x0800f387
 800ee70:	0800f50d 	.word	0x0800f50d
 800ee74:	0800f6b1 	.word	0x0800f6b1
 800ee78:	0800f5eb 	.word	0x0800f5eb
 800ee7c:	0800f619 	.word	0x0800f619
 800ee80:	0800f08b 	.word	0x0800f08b
 800ee84:	0800f0c1 	.word	0x0800f0c1
 800ee88:	0800f0e9 	.word	0x0800f0e9
                case HCI_INIT_STATE:
                        hci_counter++;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ee92:	3301      	adds	r3, #1
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	f240 8403 	bls.w	800f6b4 <_ZN3BTD8HCI_taskEv+0x894>
                                hci_reset();
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 fcc5 	bl	800f83e <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2200      	movs	r2, #0
 800eec0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800eec4:	e3f6      	b.n	800f6b4 <_ZN3BTD8HCI_taskEv+0x894>

                case HCI_RESET_STATE:
                        hci_counter++;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800eecc:	3301      	adds	r3, #1
 800eece:	b29a      	uxth	r2, r3
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eedc:	f003 0301 	and.w	r3, r3, #1
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d00f      	beq.n	800ef04 <_ZN3BTD8HCI_taskEv+0xe4>
                                hci_counter = 0;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2200      	movs	r2, #0
 800eee8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
 800eeec:	2180      	movs	r1, #128	; 0x80
 800eeee:	48c1      	ldr	r0, [pc, #772]	; (800f1f4 <_ZN3BTD8HCI_taskEv+0x3d4>)
 800eef0:	f005 f9d2 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                hci_state = HCI_CLASS_STATE;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2202      	movs	r2, #2
 800eef8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f001 f97c 	bl	80101fa <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800ef02:	e3d9      	b.n	800f6b8 <_ZN3BTD8HCI_taskEv+0x898>
                        } else if(hci_counter > hci_num_reset_loops) {
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800ef10:	429a      	cmp	r2, r3
 800ef12:	f240 83d1 	bls.w	800f6b8 <_ZN3BTD8HCI_taskEv+0x898>
                                hci_num_reset_loops *= 10;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	0092      	lsls	r2, r2, #2
 800ef20:	4413      	add	r3, r2
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	b29a      	uxth	r2, r3
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800ef32:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ef36:	d904      	bls.n	800ef42 <_ZN3BTD8HCI_taskEv+0x122>
                                        hci_num_reset_loops = 2000;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ef3e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
 800ef42:	2180      	movs	r1, #128	; 0x80
 800ef44:	48ac      	ldr	r0, [pc, #688]	; (800f1f8 <_ZN3BTD8HCI_taskEv+0x3d8>)
 800ef46:	f005 f9a7 	bl	8014298 <_Z8E_NotifyPKci>
                                hci_state = HCI_INIT_STATE;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2200      	movs	r2, #0
 800ef56:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800ef5a:	e3ad      	b.n	800f6b8 <_ZN3BTD8HCI_taskEv+0x898>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ef62:	f003 0301 	and.w	r3, r3, #1
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	f000 83a8 	beq.w	800f6bc <_ZN3BTD8HCI_taskEv+0x89c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
 800ef6c:	2180      	movs	r1, #128	; 0x80
 800ef6e:	48a3      	ldr	r0, [pc, #652]	; (800f1fc <_ZN3BTD8HCI_taskEv+0x3dc>)
 800ef70:	f005 f992 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                hci_state = HCI_BDADDR_STATE;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2203      	movs	r2, #3
 800ef78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 fcae 	bl	800f8de <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800ef82:	e39b      	b.n	800f6bc <_ZN3BTD8HCI_taskEv+0x89c>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ef8a:	f003 0320 	and.w	r3, r3, #32
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f000 8396 	beq.w	800f6c0 <_ZN3BTD8HCI_taskEv+0x8a0>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nLocal Bluetooth Address: "), 0x80);
 800ef94:	2180      	movs	r1, #128	; 0x80
 800ef96:	489a      	ldr	r0, [pc, #616]	; (800f200 <_ZN3BTD8HCI_taskEv+0x3e0>)
 800ef98:	f005 f97e 	bl	8014298 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 800ef9c:	2305      	movs	r3, #5
 800ef9e:	73fb      	strb	r3, [r7, #15]
 800efa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	dd13      	ble.n	800efd0 <_ZN3BTD8HCI_taskEv+0x1b0>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
 800efa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	4413      	add	r3, r2
 800efb0:	7d1b      	ldrb	r3, [r3, #20]
 800efb2:	2180      	movs	r1, #128	; 0x80
 800efb4:	4618      	mov	r0, r3
 800efb6:	f001 fc6c 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR(":"), 0x80);
 800efba:	2180      	movs	r1, #128	; 0x80
 800efbc:	4891      	ldr	r0, [pc, #580]	; (800f204 <_ZN3BTD8HCI_taskEv+0x3e4>)
 800efbe:	f005 f96b 	bl	8014298 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 800efc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	3b01      	subs	r3, #1
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	73fb      	strb	r3, [r7, #15]
 800efce:	e7e7      	b.n	800efa0 <_ZN3BTD8HCI_taskEv+0x180>
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	7d1b      	ldrb	r3, [r3, #20]
 800efd4:	2180      	movs	r1, #128	; 0x80
 800efd6:	4618      	mov	r0, r3
 800efd8:	f001 fc5b 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
#endif
                                hci_read_local_version_information();
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 fca2 	bl	800f926 <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2204      	movs	r2, #4
 800efe6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800efea:	e369      	b.n	800f6c0 <_ZN3BTD8HCI_taskEv+0x8a0>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	f000 8364 	beq.w	800f6c4 <_ZN3BTD8HCI_taskEv+0x8a4>
                                if(btdName != NULL) {
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	68db      	ldr	r3, [r3, #12]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00a      	beq.n	800f01a <_ZN3BTD8HCI_taskEv+0x1fa>
                                        hci_write_local_name(btdName);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	4619      	mov	r1, r3
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 fd75 	bl	800fafa <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2205      	movs	r2, #5
 800f014:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800f018:	e354      	b.n	800f6c4 <_ZN3BTD8HCI_taskEv+0x8a4>
                                } else if(useSimplePairing) {
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f020:	2b00      	cmp	r3, #0
 800f022:	d008      	beq.n	800f036 <_ZN3BTD8HCI_taskEv+0x216>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800f024:	2100      	movs	r1, #0
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f000 fca1 	bl	800f96e <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2211      	movs	r2, #17
 800f030:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800f034:	e346      	b.n	800f6c4 <_ZN3BTD8HCI_taskEv+0x8a4>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2206      	movs	r2, #6
 800f03a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800f03e:	e341      	b.n	800f6c4 <_ZN3BTD8HCI_taskEv+0x8a4>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f046:	f003 0301 	and.w	r3, r3, #1
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	f000 833c 	beq.w	800f6c8 <_ZN3BTD8HCI_taskEv+0x8a8>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
 800f050:	2180      	movs	r1, #128	; 0x80
 800f052:	486d      	ldr	r0, [pc, #436]	; (800f208 <_ZN3BTD8HCI_taskEv+0x3e8>)
 800f054:	f005 f920 	bl	8014298 <_Z8E_NotifyPKci>
                                NotifyStr(btdName, 0x80);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	68db      	ldr	r3, [r3, #12]
 800f05c:	2180      	movs	r1, #128	; 0x80
 800f05e:	4618      	mov	r0, r3
 800f060:	f005 f942 	bl	80142e8 <_Z11E_NotifyStrPKci>
#endif
                                if(useSimplePairing) {
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d008      	beq.n	800f080 <_ZN3BTD8HCI_taskEv+0x260>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800f06e:	2100      	movs	r1, #0
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f000 fc7c 	bl	800f96e <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2211      	movs	r2, #17
 800f07a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800f07e:	e323      	b.n	800f6c8 <_ZN3BTD8HCI_taskEv+0x8a8>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2206      	movs	r2, #6
 800f084:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800f088:	e31e      	b.n	800f6c8 <_ZN3BTD8HCI_taskEv+0x8a8>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f094:	2b00      	cmp	r3, #0
 800f096:	f000 8319 	beq.w	800f6cc <_ZN3BTD8HCI_taskEv+0x8ac>
                                if(simple_pairing_supported) {
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d008      	beq.n	800f0b6 <_ZN3BTD8HCI_taskEv+0x296>
                                        hci_write_simple_pairing_mode(true);
 800f0a4:	2101      	movs	r1, #1
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 fdab 	bl	800fc02 <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2212      	movs	r2, #18
 800f0b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800f0b4:	e30a      	b.n	800f6cc <_ZN3BTD8HCI_taskEv+0x8ac>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2206      	movs	r2, #6
 800f0ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800f0be:	e305      	b.n	800f6cc <_ZN3BTD8HCI_taskEv+0x8ac>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f0c6:	f003 0301 	and.w	r3, r3, #1
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	f000 8300 	beq.w	800f6d0 <_ZN3BTD8HCI_taskEv+0x8b0>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
 800f0d0:	2180      	movs	r1, #128	; 0x80
 800f0d2:	484e      	ldr	r0, [pc, #312]	; (800f20c <_ZN3BTD8HCI_taskEv+0x3ec>)
 800f0d4:	f005 f8e0 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                hci_set_event_mask();
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 fd57 	bl	800fb8c <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2213      	movs	r2, #19
 800f0e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800f0e6:	e2f3      	b.n	800f6d0 <_ZN3BTD8HCI_taskEv+0x8b0>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f0ee:	f003 0301 	and.w	r3, r3, #1
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	f000 82ee 	beq.w	800f6d4 <_ZN3BTD8HCI_taskEv+0x8b4>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
 800f0f8:	2180      	movs	r1, #128	; 0x80
 800f0fa:	4845      	ldr	r0, [pc, #276]	; (800f210 <_ZN3BTD8HCI_taskEv+0x3f0>)
 800f0fc:	f005 f8cc 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2206      	movs	r2, #6
 800f104:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800f108:	e2e4      	b.n	800f6d4 <_ZN3BTD8HCI_taskEv+0x8b4>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f110:	2b00      	cmp	r3, #0
 800f112:	d104      	bne.n	800f11e <_ZN3BTD8HCI_taskEv+0x2fe>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d015      	beq.n	800f14a <_ZN3BTD8HCI_taskEv+0x32a>
#ifdef DEBUG_USB_HOST
                                if(pairWithWii)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f124:	2b00      	cmp	r3, #0
 800f126:	d004      	beq.n	800f132 <_ZN3BTD8HCI_taskEv+0x312>
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
 800f128:	2180      	movs	r1, #128	; 0x80
 800f12a:	483a      	ldr	r0, [pc, #232]	; (800f214 <_ZN3BTD8HCI_taskEv+0x3f4>)
 800f12c:	f005 f8b4 	bl	8014298 <_Z8E_NotifyPKci>
 800f130:	e003      	b.n	800f13a <_ZN3BTD8HCI_taskEv+0x31a>
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
 800f132:	2180      	movs	r1, #128	; 0x80
 800f134:	4838      	ldr	r0, [pc, #224]	; (800f218 <_ZN3BTD8HCI_taskEv+0x3f8>)
 800f136:	f005 f8af 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                hci_inquiry();
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f000 fd87 	bl	800fc4e <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2207      	movs	r2, #7
 800f144:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800f148:	e2d7      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	220a      	movs	r2, #10
 800f14e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800f152:	e2d2      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f15a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f15e:	2b00      	cmp	r3, #0
 800f160:	f000 82ba 	beq.w	800f6d8 <_ZN3BTD8HCI_taskEv+0x8b8>
                                hci_inquiry_cancel(); // Stop inquiry
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 fdaa 	bl	800fcbe <_ZN3BTD18hci_inquiry_cancelEv>
#ifdef DEBUG_USB_HOST
                                if(pairWithWii)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f170:	2b00      	cmp	r3, #0
 800f172:	d004      	beq.n	800f17e <_ZN3BTD8HCI_taskEv+0x35e>
                                        Notify(PSTR("\r\nWiimote found"), 0x80);
 800f174:	2180      	movs	r1, #128	; 0x80
 800f176:	4829      	ldr	r0, [pc, #164]	; (800f21c <_ZN3BTD8HCI_taskEv+0x3fc>)
 800f178:	f005 f88e 	bl	8014298 <_Z8E_NotifyPKci>
 800f17c:	e003      	b.n	800f186 <_ZN3BTD8HCI_taskEv+0x366>
                                else
                                        Notify(PSTR("\r\nHID device found"), 0x80);
 800f17e:	2180      	movs	r1, #128	; 0x80
 800f180:	4827      	ldr	r0, [pc, #156]	; (800f220 <_ZN3BTD8HCI_taskEv+0x400>)
 800f182:	f005 f889 	bl	8014298 <_Z8E_NotifyPKci>

                                Notify(PSTR("\r\nNow just create the instance like so:"), 0x80);
 800f186:	2180      	movs	r1, #128	; 0x80
 800f188:	4826      	ldr	r0, [pc, #152]	; (800f224 <_ZN3BTD8HCI_taskEv+0x404>)
 800f18a:	f005 f885 	bl	8014298 <_Z8E_NotifyPKci>
                                if(pairWithWii)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f194:	2b00      	cmp	r3, #0
 800f196:	d004      	beq.n	800f1a2 <_ZN3BTD8HCI_taskEv+0x382>
                                        Notify(PSTR("\r\nWII Wii(&Btd);"), 0x80);
 800f198:	2180      	movs	r1, #128	; 0x80
 800f19a:	4823      	ldr	r0, [pc, #140]	; (800f228 <_ZN3BTD8HCI_taskEv+0x408>)
 800f19c:	f005 f87c 	bl	8014298 <_Z8E_NotifyPKci>
 800f1a0:	e003      	b.n	800f1aa <_ZN3BTD8HCI_taskEv+0x38a>
                                else
                                        Notify(PSTR("\r\nBTHID bthid(&Btd);"), 0x80);
 800f1a2:	2180      	movs	r1, #128	; 0x80
 800f1a4:	4821      	ldr	r0, [pc, #132]	; (800f22c <_ZN3BTD8HCI_taskEv+0x40c>)
 800f1a6:	f005 f877 	bl	8014298 <_Z8E_NotifyPKci>

                                Notify(PSTR("\r\nAnd then press any button on the "), 0x80);
 800f1aa:	2180      	movs	r1, #128	; 0x80
 800f1ac:	4820      	ldr	r0, [pc, #128]	; (800f230 <_ZN3BTD8HCI_taskEv+0x410>)
 800f1ae:	f005 f873 	bl	8014298 <_Z8E_NotifyPKci>
                                if(pairWithWii)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d004      	beq.n	800f1c6 <_ZN3BTD8HCI_taskEv+0x3a6>
                                        Notify(PSTR("Wiimote"), 0x80);
 800f1bc:	2180      	movs	r1, #128	; 0x80
 800f1be:	481d      	ldr	r0, [pc, #116]	; (800f234 <_ZN3BTD8HCI_taskEv+0x414>)
 800f1c0:	f005 f86a 	bl	8014298 <_Z8E_NotifyPKci>
 800f1c4:	e003      	b.n	800f1ce <_ZN3BTD8HCI_taskEv+0x3ae>
                                else
                                        Notify(PSTR("device"), 0x80);
 800f1c6:	2180      	movs	r1, #128	; 0x80
 800f1c8:	481b      	ldr	r0, [pc, #108]	; (800f238 <_ZN3BTD8HCI_taskEv+0x418>)
 800f1ca:	f005 f865 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                if(checkRemoteName) {
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d007      	beq.n	800f1e8 <_ZN3BTD8HCI_taskEv+0x3c8>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 fc3a 	bl	800fa52 <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	220c      	movs	r2, #12
 800f1e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800f1e6:	e277      	b.n	800f6d8 <_ZN3BTD8HCI_taskEv+0x8b8>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2208      	movs	r2, #8
 800f1ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800f1f0:	e272      	b.n	800f6d8 <_ZN3BTD8HCI_taskEv+0x8b8>
 800f1f2:	bf00      	nop
 800f1f4:	08014cdc 	.word	0x08014cdc
 800f1f8:	08014cf4 	.word	0x08014cf4
 800f1fc:	08014d10 	.word	0x08014d10
 800f200:	08014d28 	.word	0x08014d28
 800f204:	080149fc 	.word	0x080149fc
 800f208:	08014d44 	.word	0x08014d44
 800f20c:	08014d5c 	.word	0x08014d5c
 800f210:	08014d7c 	.word	0x08014d7c
 800f214:	08014d98 	.word	0x08014d98
 800f218:	08014e20 	.word	0x08014e20
 800f21c:	08014e4c 	.word	0x08014e4c
 800f220:	08014e5c 	.word	0x08014e5c
 800f224:	08014e70 	.word	0x08014e70
 800f228:	08014e98 	.word	0x08014e98
 800f22c:	08014eac 	.word	0x08014eac
 800f230:	08014ec4 	.word	0x08014ec4
 800f234:	08014ee8 	.word	0x08014ee8
 800f238:	08014ef0 	.word	0x08014ef0

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f242:	f003 0301 	and.w	r3, r3, #1
 800f246:	2b00      	cmp	r3, #0
 800f248:	f000 8248 	beq.w	800f6dc <_ZN3BTD8HCI_taskEv+0x8bc>
#ifdef DEBUG_USB_HOST
                                if(pairWithWii)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f252:	2b00      	cmp	r3, #0
 800f254:	d004      	beq.n	800f260 <_ZN3BTD8HCI_taskEv+0x440>
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
 800f256:	2180      	movs	r1, #128	; 0x80
 800f258:	48bf      	ldr	r0, [pc, #764]	; (800f558 <_ZN3BTD8HCI_taskEv+0x738>)
 800f25a:	f005 f81d 	bl	8014298 <_Z8E_NotifyPKci>
 800f25e:	e003      	b.n	800f268 <_ZN3BTD8HCI_taskEv+0x448>
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
 800f260:	2180      	movs	r1, #128	; 0x80
 800f262:	48be      	ldr	r0, [pc, #760]	; (800f55c <_ZN3BTD8HCI_taskEv+0x73c>)
 800f264:	f005 f818 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                checkRemoteName = false;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 fd3f 	bl	800fcf4 <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2209      	movs	r2, #9
 800f27a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800f27e:	e22d      	b.n	800f6dc <_ZN3BTD8HCI_taskEv+0x8bc>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f000 8228 	beq.w	800f6e0 <_ZN3BTD8HCI_taskEv+0x8c0>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f296:	f003 0302 	and.w	r3, r3, #2
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d015      	beq.n	800f2ca <_ZN3BTD8HCI_taskEv+0x4aa>
#ifdef DEBUG_USB_HOST
                                        if(pairWithWii)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d004      	beq.n	800f2b2 <_ZN3BTD8HCI_taskEv+0x492>
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
 800f2a8:	2180      	movs	r1, #128	; 0x80
 800f2aa:	48ad      	ldr	r0, [pc, #692]	; (800f560 <_ZN3BTD8HCI_taskEv+0x740>)
 800f2ac:	f004 fff4 	bl	8014298 <_Z8E_NotifyPKci>
 800f2b0:	e003      	b.n	800f2ba <_ZN3BTD8HCI_taskEv+0x49a>
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
 800f2b2:	2180      	movs	r1, #128	; 0x80
 800f2b4:	48ab      	ldr	r0, [pc, #684]	; (800f564 <_ZN3BTD8HCI_taskEv+0x744>)
 800f2b6:	f004 ffef 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 ff3a 	bl	8010134 <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	220a      	movs	r2, #10
 800f2c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800f2c8:	e20a      	b.n	800f6e0 <_ZN3BTD8HCI_taskEv+0x8c0>
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
 800f2ca:	2180      	movs	r1, #128	; 0x80
 800f2cc:	48a6      	ldr	r0, [pc, #664]	; (800f568 <_ZN3BTD8HCI_taskEv+0x748>)
 800f2ce:	f004 ffe3 	bl	8014298 <_Z8E_NotifyPKci>
                                        hci_connect(); // Try to connect one more time
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 fd0e 	bl	800fcf4 <_ZN3BTD11hci_connectEv>
                        break;
 800f2d8:	e202      	b.n	800f6e0 <_ZN3BTD8HCI_taskEv+0x8c0>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f2e0:	f083 0301 	eor.w	r3, r3, #1
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	f000 81fc 	beq.w	800f6e4 <_ZN3BTD8HCI_taskEv+0x8c4>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f2f2:	f083 0301 	eor.w	r3, r3, #1
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	f000 81f3 	beq.w	800f6e4 <_ZN3BTD8HCI_taskEv+0x8c4>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f304:	f083 0301 	eor.w	r3, r3, #1
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	f000 81ea 	beq.w	800f6e4 <_ZN3BTD8HCI_taskEv+0x8c4>
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f316:	f083 0301 	eor.w	r3, r3, #1
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f000 81e1 	beq.w	800f6e4 <_ZN3BTD8HCI_taskEv+0x8c4>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
 800f322:	2180      	movs	r1, #128	; 0x80
 800f324:	4891      	ldr	r0, [pc, #580]	; (800f56c <_ZN3BTD8HCI_taskEv+0x74c>)
 800f326:	f004 ffb7 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                hci_write_scan_enable();
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f000 faa6 	bl	800f87c <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2201      	movs	r2, #1
 800f334:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	220b      	movs	r2, #11
 800f33a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800f33e:	e1d1      	b.n	800f6e4 <_ZN3BTD8HCI_taskEv+0x8c4>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f346:	f003 0310 	and.w	r3, r3, #16
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d00e      	beq.n	800f36c <_ZN3BTD8HCI_taskEv+0x54c>
                                waitingForConnection = false;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
 800f354:	2180      	movs	r1, #128	; 0x80
 800f356:	4886      	ldr	r0, [pc, #536]	; (800f570 <_ZN3BTD8HCI_taskEv+0x750>)
 800f358:	f004 ff9e 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                hci_remote_name();
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 fb78 	bl	800fa52 <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	220c      	movs	r2, #12
 800f366:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800f36a:	e1bd      	b.n	800f6e8 <_ZN3BTD8HCI_taskEv+0x8c8>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f372:	f003 0304 	and.w	r3, r3, #4
 800f376:	2b00      	cmp	r3, #0
 800f378:	f000 81b6 	beq.w	800f6e8 <_ZN3BTD8HCI_taskEv+0x8c8>
                                hci_state = HCI_DISCONNECT_STATE;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2210      	movs	r2, #16
 800f380:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800f384:	e1b0      	b.n	800f6e8 <_ZN3BTD8HCI_taskEv+0x8c8>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f38c:	f003 0308 	and.w	r3, r3, #8
 800f390:	2b00      	cmp	r3, #0
 800f392:	f000 81ab 	beq.w	800f6ec <_ZN3BTD8HCI_taskEv+0x8cc>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
 800f396:	2180      	movs	r1, #128	; 0x80
 800f398:	4876      	ldr	r0, [pc, #472]	; (800f574 <_ZN3BTD8HCI_taskEv+0x754>)
 800f39a:	f004 ff7d 	bl	8014298 <_Z8E_NotifyPKci>
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
 800f39e:	2300      	movs	r3, #0
 800f3a0:	73bb      	strb	r3, [r7, #14]
 800f3a2:	7bbc      	ldrb	r4, [r7, #14]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	3322      	adds	r3, #34	; 0x22
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7f0 ff31 	bl	8000210 <strlen>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	429c      	cmp	r4, r3
 800f3b2:	d20c      	bcs.n	800f3ce <_ZN3BTD8HCI_taskEv+0x5ae>
                                        Notifyc(remote_name[i], 0x80);
 800f3b4:	7bbb      	ldrb	r3, [r7, #14]
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f3be:	2180      	movs	r1, #128	; 0x80
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f004 ff4f 	bl	8014264 <_Z9E_Notifycci>
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
 800f3c6:	7bbb      	ldrb	r3, [r7, #14]
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	73bb      	strb	r3, [r7, #14]
 800f3cc:	e7e9      	b.n	800f3a2 <_ZN3BTD8HCI_taskEv+0x582>
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	3322      	adds	r3, #34	; 0x22
 800f3d2:	2208      	movs	r2, #8
 800f3d4:	4968      	ldr	r1, [pc, #416]	; (800f578 <_ZN3BTD8HCI_taskEv+0x758>)
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f005 f904 	bl	80145e4 <strncmp>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d157      	bne.n	800f492 <_ZN3BTD8HCI_taskEv+0x672>
                                        incomingWii = true;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
 800f402:	2180      	movs	r1, #128	; 0x80
 800f404:	485d      	ldr	r0, [pc, #372]	; (800f57c <_ZN3BTD8HCI_taskEv+0x75c>)
 800f406:	f004 ff47 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	3322      	adds	r3, #34	; 0x22
 800f40e:	2216      	movs	r2, #22
 800f410:	495b      	ldr	r1, [pc, #364]	; (800f580 <_ZN3BTD8HCI_taskEv+0x760>)
 800f412:	4618      	mov	r0, r3
 800f414:	f005 f8e6 	bl	80145e4 <strncmp>
 800f418:	4603      	mov	r3, r0
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d108      	bne.n	800f430 <_ZN3BTD8HCI_taskEv+0x610>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
 800f41e:	2180      	movs	r1, #128	; 0x80
 800f420:	4858      	ldr	r0, [pc, #352]	; (800f584 <_ZN3BTD8HCI_taskEv+0x764>)
 800f422:	f004 ff39 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                                motionPlusInside = true;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2201      	movs	r2, #1
 800f42a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f42e:	e030      	b.n	800f492 <_ZN3BTD8HCI_taskEv+0x672>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	3322      	adds	r3, #34	; 0x22
 800f434:	2216      	movs	r2, #22
 800f436:	4954      	ldr	r1, [pc, #336]	; (800f588 <_ZN3BTD8HCI_taskEv+0x768>)
 800f438:	4618      	mov	r0, r3
 800f43a:	f005 f8d3 	bl	80145e4 <strncmp>
 800f43e:	4603      	mov	r3, r0
 800f440:	2b00      	cmp	r3, #0
 800f442:	d114      	bne.n	800f46e <_ZN3BTD8HCI_taskEv+0x64e>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
 800f444:	2180      	movs	r1, #128	; 0x80
 800f446:	4851      	ldr	r0, [pc, #324]	; (800f58c <_ZN3BTD8HCI_taskEv+0x76c>)
 800f448:	f004 ff26 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2201      	movs	r2, #1
 800f450:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f46c:	e011      	b.n	800f492 <_ZN3BTD8HCI_taskEv+0x672>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	3322      	adds	r3, #34	; 0x22
 800f472:	2213      	movs	r2, #19
 800f474:	4946      	ldr	r1, [pc, #280]	; (800f590 <_ZN3BTD8HCI_taskEv+0x770>)
 800f476:	4618      	mov	r0, r3
 800f478:	f005 f8b4 	bl	80145e4 <strncmp>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d107      	bne.n	800f492 <_ZN3BTD8HCI_taskEv+0x672>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
 800f482:	2180      	movs	r1, #128	; 0x80
 800f484:	4843      	ldr	r0, [pc, #268]	; (800f594 <_ZN3BTD8HCI_taskEv+0x774>)
 800f486:	f004 ff07 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                                pairWiiUsingSync = true;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d11b      	bne.n	800f4d4 <_ZN3BTD8HCI_taskEv+0x6b4>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800f4a2:	2b25      	cmp	r3, #37	; 0x25
 800f4a4:	d116      	bne.n	800f4d4 <_ZN3BTD8HCI_taskEv+0x6b4>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800f4ac:	2b08      	cmp	r3, #8
 800f4ae:	d111      	bne.n	800f4d4 <_ZN3BTD8HCI_taskEv+0x6b4>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	3322      	adds	r3, #34	; 0x22
 800f4b4:	2213      	movs	r2, #19
 800f4b6:	4938      	ldr	r1, [pc, #224]	; (800f598 <_ZN3BTD8HCI_taskEv+0x778>)
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f005 f893 	bl	80145e4 <strncmp>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d107      	bne.n	800f4d4 <_ZN3BTD8HCI_taskEv+0x6b4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
 800f4c4:	2180      	movs	r1, #128	; 0x80
 800f4c6:	4835      	ldr	r0, [pc, #212]	; (800f59c <_ZN3BTD8HCI_taskEv+0x77c>)
 800f4c8:	f004 fee6 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                        incomingPSController = true;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d104      	bne.n	800f4e8 <_ZN3BTD8HCI_taskEv+0x6c8>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d009      	beq.n	800f4fc <_ZN3BTD8HCI_taskEv+0x6dc>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d004      	beq.n	800f4fc <_ZN3BTD8HCI_taskEv+0x6dc>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2208      	movs	r2, #8
 800f4f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800f4fa:	e0f7      	b.n	800f6ec <_ZN3BTD8HCI_taskEv+0x8cc>
                                        hci_accept_connection();
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f000 fa60 	bl	800f9c2 <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	220d      	movs	r2, #13
 800f506:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800f50a:	e0ef      	b.n	800f6ec <_ZN3BTD8HCI_taskEv+0x8cc>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f512:	f003 0302 	and.w	r3, r3, #2
 800f516:	2b00      	cmp	r3, #0
 800f518:	f000 80ea 	beq.w	800f6f0 <_ZN3BTD8HCI_taskEv+0x8d0>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nConnected to Device: "), 0x80);
 800f51c:	2180      	movs	r1, #128	; 0x80
 800f51e:	4820      	ldr	r0, [pc, #128]	; (800f5a0 <_ZN3BTD8HCI_taskEv+0x780>)
 800f520:	f004 feba 	bl	8014298 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 800f524:	2305      	movs	r3, #5
 800f526:	737b      	strb	r3, [r7, #13]
 800f528:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	dd3b      	ble.n	800f5a8 <_ZN3BTD8HCI_taskEv+0x788>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
 800f530:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	4413      	add	r3, r2
 800f538:	7f1b      	ldrb	r3, [r3, #28]
 800f53a:	2180      	movs	r1, #128	; 0x80
 800f53c:	4618      	mov	r0, r3
 800f53e:	f001 f9a8 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR(":"), 0x80);
 800f542:	2180      	movs	r1, #128	; 0x80
 800f544:	4817      	ldr	r0, [pc, #92]	; (800f5a4 <_ZN3BTD8HCI_taskEv+0x784>)
 800f546:	f004 fea7 	bl	8014298 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 800f54a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f54e:	b2db      	uxtb	r3, r3
 800f550:	3b01      	subs	r3, #1
 800f552:	b2db      	uxtb	r3, r3
 800f554:	737b      	strb	r3, [r7, #13]
 800f556:	e7e7      	b.n	800f528 <_ZN3BTD8HCI_taskEv+0x708>
 800f558:	08014ef8 	.word	0x08014ef8
 800f55c:	08014f10 	.word	0x08014f10
 800f560:	08014f2c 	.word	0x08014f2c
 800f564:	08014f44 	.word	0x08014f44
 800f568:	08014f60 	.word	0x08014f60
 800f56c:	08014f88 	.word	0x08014f88
 800f570:	08014fb0 	.word	0x08014fb0
 800f574:	08014fd0 	.word	0x08014fd0
 800f578:	08014fe0 	.word	0x08014fe0
 800f57c:	08014fec 	.word	0x08014fec
 800f580:	08015004 	.word	0x08015004
 800f584:	0801501c 	.word	0x0801501c
 800f588:	08015038 	.word	0x08015038
 800f58c:	08015050 	.word	0x08015050
 800f590:	08015068 	.word	0x08015068
 800f594:	0801507c 	.word	0x0801507c
 800f598:	08015094 	.word	0x08015094
 800f59c:	080150a8 	.word	0x080150a8
 800f5a0:	080150cc 	.word	0x080150cc
 800f5a4:	080149fc 	.word	0x080149fc
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	7f1b      	ldrb	r3, [r3, #28]
 800f5ac:	2180      	movs	r1, #128	; 0x80
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f001 f96f 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
#endif
                                if(incomingPSController)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d003      	beq.n	800f5c6 <_ZN3BTD8HCI_taskEv+0x7a6>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	220f      	movs	r2, #15
 800f5e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800f5e8:	e082      	b.n	800f6f0 <_ZN3BTD8HCI_taskEv+0x8d0>

                case HCI_DONE_STATE:
                        hci_counter++;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f604:	d976      	bls.n	800f6f4 <_ZN3BTD8HCI_taskEv+0x8d4>
                                hci_counter = 0;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2200      	movs	r2, #0
 800f60a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	220a      	movs	r2, #10
 800f612:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800f616:	e06d      	b.n	800f6f4 <_ZN3BTD8HCI_taskEv+0x8d4>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f61e:	f003 0304 	and.w	r3, r3, #4
 800f622:	2b00      	cmp	r3, #0
 800f624:	d068      	beq.n	800f6f8 <_ZN3BTD8HCI_taskEv+0x8d8>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
 800f626:	2180      	movs	r1, #128	; 0x80
 800f628:	4836      	ldr	r0, [pc, #216]	; (800f704 <_ZN3BTD8HCI_taskEv+0x8e4>)
 800f62a:	f004 fe35 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                hci_event_flag = 0; // Clear all flags
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2200      	movs	r2, #0
 800f632:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	3389      	adds	r3, #137	; 0x89
 800f63a:	2240      	movs	r2, #64	; 0x40
 800f63c:	2100      	movs	r1, #0
 800f63e:	4618      	mov	r0, r3
 800f640:	f004 ff84 	bl	801454c <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	33c9      	adds	r3, #201	; 0xc9
 800f648:	2240      	movs	r2, #64	; 0x40
 800f64a:	2100      	movs	r1, #0
 800f64c:	4618      	mov	r0, r3
 800f64e:	f004 ff7d 	bl	801454c <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2200      	movs	r2, #0
 800f656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2200      	movs	r2, #0
 800f676:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	220a      	movs	r2, #10
 800f6aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800f6ae:	e023      	b.n	800f6f8 <_ZN3BTD8HCI_taskEv+0x8d8>
                default:
                        break;
 800f6b0:	bf00      	nop
 800f6b2:	e022      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6b4:	bf00      	nop
 800f6b6:	e020      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6b8:	bf00      	nop
 800f6ba:	e01e      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6bc:	bf00      	nop
 800f6be:	e01c      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6c0:	bf00      	nop
 800f6c2:	e01a      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6c4:	bf00      	nop
 800f6c6:	e018      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6c8:	bf00      	nop
 800f6ca:	e016      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6cc:	bf00      	nop
 800f6ce:	e014      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6d0:	bf00      	nop
 800f6d2:	e012      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6d4:	bf00      	nop
 800f6d6:	e010      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6d8:	bf00      	nop
 800f6da:	e00e      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6dc:	bf00      	nop
 800f6de:	e00c      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6e0:	bf00      	nop
 800f6e2:	e00a      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6e4:	bf00      	nop
 800f6e6:	e008      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6e8:	bf00      	nop
 800f6ea:	e006      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6ec:	bf00      	nop
 800f6ee:	e004      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6f0:	bf00      	nop
 800f6f2:	e002      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6f4:	bf00      	nop
 800f6f6:	e000      	b.n	800f6fa <_ZN3BTD8HCI_taskEv+0x8da>
                        break;
 800f6f8:	bf00      	nop
        }
}
 800f6fa:	bf00      	nop
 800f6fc:	3714      	adds	r7, #20
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd90      	pop	{r4, r7, pc}
 800f702:	bf00      	nop
 800f704:	080150e4 	.word	0x080150e4

0800f708 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800f708:	b5b0      	push	{r4, r5, r7, lr}
 800f70a:	b086      	sub	sp, #24
 800f70c:	af02      	add	r7, sp, #8
 800f70e:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800f710:	2340      	movs	r3, #64	; 0x40
 800f712:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	33c9      	adds	r3, #201	; 0xc9
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800f72e:	f107 050a 	add.w	r5, r7, #10
 800f732:	9201      	str	r2, [sp, #4]
 800f734:	9300      	str	r3, [sp, #0]
 800f736:	462b      	mov	r3, r5
 800f738:	4622      	mov	r2, r4
 800f73a:	f003 fa7d 	bl	8012c38 <_ZN3USB10inTransferEhhPtPhh>
 800f73e:	4603      	mov	r3, r0
 800f740:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800f742:	7b7b      	ldrb	r3, [r7, #13]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d125      	bne.n	800f794 <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800f748:	897b      	ldrh	r3, [r7, #10]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d022      	beq.n	800f794 <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f74e:	2300      	movs	r3, #0
 800f750:	73fb      	strb	r3, [r7, #15]
 800f752:	7bfb      	ldrb	r3, [r7, #15]
 800f754:	2b03      	cmp	r3, #3
 800f756:	d81d      	bhi.n	800f794 <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800f758:	7bfb      	ldrb	r3, [r7, #15]
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	3318      	adds	r3, #24
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	4413      	add	r3, r2
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d011      	beq.n	800f78c <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800f768:	7bfb      	ldrb	r3, [r7, #15]
 800f76a:	687a      	ldr	r2, [r7, #4]
 800f76c:	3318      	adds	r3, #24
 800f76e:	009b      	lsls	r3, r3, #2
 800f770:	4413      	add	r3, r2
 800f772:	6858      	ldr	r0, [r3, #4]
 800f774:	7bfb      	ldrb	r3, [r7, #15]
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	3318      	adds	r3, #24
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	4413      	add	r3, r2
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	687a      	ldr	r2, [r7, #4]
 800f786:	32c9      	adds	r2, #201	; 0xc9
 800f788:	4611      	mov	r1, r2
 800f78a:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f78c:	7bfb      	ldrb	r3, [r7, #15]
 800f78e:	3301      	adds	r3, #1
 800f790:	73fb      	strb	r3, [r7, #15]
 800f792:	e7de      	b.n	800f752 <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800f794:	2300      	movs	r3, #0
 800f796:	73bb      	strb	r3, [r7, #14]
 800f798:	7bbb      	ldrb	r3, [r7, #14]
 800f79a:	2b03      	cmp	r3, #3
 800f79c:	d81c      	bhi.n	800f7d8 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800f79e:	7bbb      	ldrb	r3, [r7, #14]
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	3318      	adds	r3, #24
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	4413      	add	r3, r2
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d010      	beq.n	800f7d0 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800f7ae:	7bbb      	ldrb	r3, [r7, #14]
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	3318      	adds	r3, #24
 800f7b4:	009b      	lsls	r3, r3, #2
 800f7b6:	4413      	add	r3, r2
 800f7b8:	6859      	ldr	r1, [r3, #4]
 800f7ba:	7bbb      	ldrb	r3, [r7, #14]
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	3318      	adds	r3, #24
 800f7c0:	009b      	lsls	r3, r3, #2
 800f7c2:	4413      	add	r3, r2
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	3304      	adds	r3, #4
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4608      	mov	r0, r1
 800f7ce:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800f7d0:	7bbb      	ldrb	r3, [r7, #14]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	73bb      	strb	r3, [r7, #14]
 800f7d6:	e7df      	b.n	800f798 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800f7d8:	bf00      	nop
 800f7da:	3710      	adds	r7, #16
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bdb0      	pop	{r4, r5, r7, pc}

0800f7e0 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b08c      	sub	sp, #48	; 0x30
 800f7e4:	af08      	add	r7, sp, #32
 800f7e6:	60f8      	str	r0, [r7, #12]
 800f7e8:	60b9      	str	r1, [r7, #8]
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f7f4:	f023 0301 	bic.w	r3, r3, #1
 800f7f8:	b29a      	uxth	r2, r3
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800f810:	2300      	movs	r3, #0
 800f812:	9307      	str	r3, [sp, #28]
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	9306      	str	r3, [sp, #24]
 800f818:	88fb      	ldrh	r3, [r7, #6]
 800f81a:	9305      	str	r3, [sp, #20]
 800f81c:	88fb      	ldrh	r3, [r7, #6]
 800f81e:	9304      	str	r3, [sp, #16]
 800f820:	2300      	movs	r3, #0
 800f822:	9303      	str	r3, [sp, #12]
 800f824:	2300      	movs	r3, #0
 800f826:	9302      	str	r3, [sp, #8]
 800f828:	2300      	movs	r3, #0
 800f82a:	9301      	str	r3, [sp, #4]
 800f82c:	2300      	movs	r3, #0
 800f82e:	9300      	str	r3, [sp, #0]
 800f830:	2320      	movs	r3, #32
 800f832:	f003 f928 	bl	8012a86 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800f836:	bf00      	nop
 800f838:	3710      	adds	r7, #16
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}

0800f83e <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800f83e:	b580      	push	{r7, lr}
 800f840:	b082      	sub	sp, #8
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2200      	movs	r2, #0
 800f84a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2203      	movs	r2, #3
 800f852:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	220c      	movs	r2, #12
 800f85a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2200      	movs	r2, #0
 800f862:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	3389      	adds	r3, #137	; 0x89
 800f86a:	2203      	movs	r2, #3
 800f86c:	4619      	mov	r1, r3
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7ff ffb6 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800f874:	bf00      	nop
 800f876:	3708      	adds	r7, #8
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f88a:	f023 0310 	bic.w	r3, r3, #16
 800f88e:	b29a      	uxth	r2, r3
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	221a      	movs	r2, #26
 800f89a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	220c      	movs	r2, #12
 800f8a2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d004      	beq.n	800f8c0 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2203      	movs	r2, #3
 800f8ba:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800f8be:	e003      	b.n	800f8c8 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2202      	movs	r2, #2
 800f8c4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	3389      	adds	r3, #137	; 0x89
 800f8cc:	2204      	movs	r2, #4
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f7ff ff85 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800f8d6:	bf00      	nop
 800f8d8:	3708      	adds	r7, #8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b082      	sub	sp, #8
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f8ec:	f023 0320 	bic.w	r3, r3, #32
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2209      	movs	r2, #9
 800f8fc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2210      	movs	r2, #16
 800f904:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2200      	movs	r2, #0
 800f90c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	3389      	adds	r3, #137	; 0x89
 800f914:	2203      	movs	r2, #3
 800f916:	4619      	mov	r1, r3
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f7ff ff61 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800f91e:	bf00      	nop
 800f920:	3708      	adds	r7, #8
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}

0800f926 <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800f926:	b580      	push	{r7, lr}
 800f928:	b082      	sub	sp, #8
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f938:	b29a      	uxth	r2, r3
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2201      	movs	r2, #1
 800f944:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2210      	movs	r2, #16
 800f94c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	3389      	adds	r3, #137	; 0x89
 800f95c:	2203      	movs	r2, #3
 800f95e:	4619      	mov	r1, r3
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f7ff ff3d 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800f966:	bf00      	nop
 800f968:	3708      	adds	r7, #8
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}

0800f96e <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800f96e:	b580      	push	{r7, lr}
 800f970:	b082      	sub	sp, #8
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
 800f976:	460b      	mov	r3, r1
 800f978:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f984:	b29a      	uxth	r2, r3
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2204      	movs	r2, #4
 800f990:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2210      	movs	r2, #16
 800f998:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	78fa      	ldrb	r2, [r7, #3]
 800f9a8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	3389      	adds	r3, #137	; 0x89
 800f9b0:	2204      	movs	r2, #4
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f7ff ff13 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800f9ba:	bf00      	nop
 800f9bc:	3708      	adds	r7, #8
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b082      	sub	sp, #8
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f9d0:	f023 0302 	bic.w	r3, r3, #2
 800f9d4:	b29a      	uxth	r2, r3
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2209      	movs	r2, #9
 800f9e0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2204      	movs	r2, #4
 800f9e8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2207      	movs	r2, #7
 800f9f0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	7f1a      	ldrb	r2, [r3, #28]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	7f5a      	ldrb	r2, [r3, #29]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	7f9a      	ldrb	r2, [r3, #30]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	7fda      	ldrb	r2, [r3, #31]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2200      	movs	r2, #0
 800fa38:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	3389      	adds	r3, #137	; 0x89
 800fa40:	220a      	movs	r2, #10
 800fa42:	4619      	mov	r1, r3
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f7ff fecb 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800fa4a:	bf00      	nop
 800fa4c:	3708      	adds	r7, #8
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b082      	sub	sp, #8
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fa60:	f023 0308 	bic.w	r3, r3, #8
 800fa64:	b29a      	uxth	r2, r3
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2219      	movs	r2, #25
 800fa70:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2204      	movs	r2, #4
 800fa78:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	220a      	movs	r2, #10
 800fa80:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	7f1a      	ldrb	r2, [r3, #28]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	7f5a      	ldrb	r2, [r3, #29]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	7f9a      	ldrb	r2, [r3, #30]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	7fda      	ldrb	r2, [r3, #31]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2201      	movs	r2, #1
 800fac8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2200      	movs	r2, #0
 800fad0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	3389      	adds	r3, #137	; 0x89
 800fae8:	220d      	movs	r2, #13
 800faea:	4619      	mov	r1, r3
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f7ff fe77 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800faf2:	bf00      	nop
 800faf4:	3708      	adds	r7, #8
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800fafa:	b590      	push	{r4, r7, lr}
 800fafc:	b085      	sub	sp, #20
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
 800fb02:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2213      	movs	r2, #19
 800fb08:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	220c      	movs	r2, #12
 800fb10:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800fb14:	6838      	ldr	r0, [r7, #0]
 800fb16:	f7f0 fb7b 	bl	8000210 <strlen>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	3301      	adds	r3, #1
 800fb20:	b2da      	uxtb	r2, r3
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800fb28:	2300      	movs	r3, #0
 800fb2a:	73fb      	strb	r3, [r7, #15]
 800fb2c:	7bfc      	ldrb	r4, [r7, #15]
 800fb2e:	6838      	ldr	r0, [r7, #0]
 800fb30:	f7f0 fb6e 	bl	8000210 <strlen>
 800fb34:	4603      	mov	r3, r0
 800fb36:	429c      	cmp	r4, r3
 800fb38:	d20e      	bcs.n	800fb58 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800fb3a:	7bfb      	ldrb	r3, [r7, #15]
 800fb3c:	683a      	ldr	r2, [r7, #0]
 800fb3e:	441a      	add	r2, r3
 800fb40:	7bfb      	ldrb	r3, [r7, #15]
 800fb42:	3303      	adds	r3, #3
 800fb44:	7811      	ldrb	r1, [r2, #0]
 800fb46:	687a      	ldr	r2, [r7, #4]
 800fb48:	4413      	add	r3, r2
 800fb4a:	460a      	mov	r2, r1
 800fb4c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800fb50:	7bfb      	ldrb	r3, [r7, #15]
 800fb52:	3301      	adds	r3, #1
 800fb54:	73fb      	strb	r3, [r7, #15]
 800fb56:	e7e9      	b.n	800fb2c <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800fb58:	7bfb      	ldrb	r3, [r7, #15]
 800fb5a:	3303      	adds	r3, #3
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	4413      	add	r3, r2
 800fb60:	2200      	movs	r2, #0
 800fb62:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800fb6c:	6838      	ldr	r0, [r7, #0]
 800fb6e:	f7f0 fb4f 	bl	8000210 <strlen>
 800fb72:	4603      	mov	r3, r0
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	3304      	adds	r3, #4
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	4621      	mov	r1, r4
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f7ff fe2e 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800fb84:	bf00      	nop
 800fb86:	3714      	adds	r7, #20
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd90      	pop	{r4, r7, pc}

0800fb8c <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2201      	movs	r2, #1
 800fb98:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	220c      	movs	r2, #12
 800fba0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2208      	movs	r2, #8
 800fba8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	22ff      	movs	r2, #255	; 0xff
 800fbb0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	22ff      	movs	r2, #255	; 0xff
 800fbb8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	22ff      	movs	r2, #255	; 0xff
 800fbc0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	22ff      	movs	r2, #255	; 0xff
 800fbc8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	22ff      	movs	r2, #255	; 0xff
 800fbd0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	221f      	movs	r2, #31
 800fbd8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	22ff      	movs	r2, #255	; 0xff
 800fbe0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	3389      	adds	r3, #137	; 0x89
 800fbf0:	220b      	movs	r2, #11
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f7ff fdf3 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800fbfa:	bf00      	nop
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b082      	sub	sp, #8
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
 800fc0a:	460b      	mov	r3, r1
 800fc0c:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2256      	movs	r2, #86	; 0x56
 800fc12:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	220c      	movs	r2, #12
 800fc1a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2201      	movs	r2, #1
 800fc22:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800fc26:	78fb      	ldrb	r3, [r7, #3]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d001      	beq.n	800fc30 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	e000      	b.n	800fc32 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800fc30:	2200      	movs	r2, #0
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	3389      	adds	r3, #137	; 0x89
 800fc3c:	2204      	movs	r2, #4
 800fc3e:	4619      	mov	r1, r3
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f7ff fdcd 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800fc46:	bf00      	nop
 800fc48:	3708      	adds	r7, #8
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}

0800fc4e <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800fc4e:	b580      	push	{r7, lr}
 800fc50:	b082      	sub	sp, #8
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fc5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2204      	movs	r2, #4
 800fc74:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2205      	movs	r2, #5
 800fc7c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2233      	movs	r2, #51	; 0x33
 800fc84:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	228b      	movs	r2, #139	; 0x8b
 800fc8c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	229e      	movs	r2, #158	; 0x9e
 800fc94:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2230      	movs	r2, #48	; 0x30
 800fc9c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	220a      	movs	r2, #10
 800fca4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	3389      	adds	r3, #137	; 0x89
 800fcac:	2208      	movs	r2, #8
 800fcae:	4619      	mov	r1, r3
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f7ff fd95 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800fcb6:	bf00      	nop
 800fcb8:	3708      	adds	r7, #8
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800fcbe:	b580      	push	{r7, lr}
 800fcc0:	b082      	sub	sp, #8
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2202      	movs	r2, #2
 800fcca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2204      	movs	r2, #4
 800fcd2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	3389      	adds	r3, #137	; 0x89
 800fce2:	2203      	movs	r2, #3
 800fce4:	4619      	mov	r1, r3
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f7ff fd7a 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800fcec:	bf00      	nop
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	331c      	adds	r3, #28
 800fd00:	4619      	mov	r1, r3
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 f804 	bl	800fd10 <_ZN3BTD11hci_connectEPh>
}
 800fd08:	bf00      	nop
 800fd0a:	3708      	adds	r7, #8
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fd20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2205      	movs	r2, #5
 800fd30:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2204      	movs	r2, #4
 800fd38:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	220d      	movs	r2, #13
 800fd40:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	781a      	ldrb	r2, [r3, #0]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	785a      	ldrb	r2, [r3, #1]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	789a      	ldrb	r2, [r3, #2]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	78da      	ldrb	r2, [r3, #3]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	791a      	ldrb	r2, [r3, #4]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	795a      	ldrb	r2, [r3, #5]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2218      	movs	r2, #24
 800fd84:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	22cc      	movs	r2, #204	; 0xcc
 800fd8c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2201      	movs	r2, #1
 800fd94:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2200      	movs	r2, #0
 800fda4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	3389      	adds	r3, #137	; 0x89
 800fdbc:	2210      	movs	r2, #16
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f7ff fd0d 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800fdc6:	bf00      	nop
 800fdc8:	3708      	adds	r7, #8
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
	...

0800fdd0 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800fdd0:	b590      	push	{r4, r7, lr}
 800fdd2:	b085      	sub	sp, #20
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	220d      	movs	r2, #13
 800fddc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2204      	movs	r2, #4
 800fde4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2217      	movs	r2, #23
 800fdec:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	7f1a      	ldrb	r2, [r3, #28]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	7f5a      	ldrb	r2, [r3, #29]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	7f9a      	ldrb	r2, [r3, #30]
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	7fda      	ldrb	r2, [r3, #31]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d043      	beq.n	800fec2 <_ZN3BTD26hci_pin_code_request_replyEv+0xf2>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2206      	movs	r2, #6
 800fe3e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d017      	beq.n	800fe7c <_ZN3BTD26hci_pin_code_request_replyEv+0xac>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
 800fe4c:	2180      	movs	r1, #128	; 0x80
 800fe4e:	483c      	ldr	r0, [pc, #240]	; (800ff40 <_ZN3BTD26hci_pin_code_request_replyEv+0x170>)
 800fe50:	f004 fa22 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800fe54:	2300      	movs	r3, #0
 800fe56:	73fb      	strb	r3, [r7, #15]
 800fe58:	7bfb      	ldrb	r3, [r7, #15]
 800fe5a:	2b05      	cmp	r3, #5
 800fe5c:	d822      	bhi.n	800fea4 <_ZN3BTD26hci_pin_code_request_replyEv+0xd4>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800fe5e:	7bfa      	ldrb	r2, [r7, #15]
 800fe60:	7bfb      	ldrb	r3, [r7, #15]
 800fe62:	330a      	adds	r3, #10
 800fe64:	6879      	ldr	r1, [r7, #4]
 800fe66:	440a      	add	r2, r1
 800fe68:	7d11      	ldrb	r1, [r2, #20]
 800fe6a:	687a      	ldr	r2, [r7, #4]
 800fe6c:	4413      	add	r3, r2
 800fe6e:	460a      	mov	r2, r1
 800fe70:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800fe74:	7bfb      	ldrb	r3, [r7, #15]
 800fe76:	3301      	adds	r3, #1
 800fe78:	73fb      	strb	r3, [r7, #15]
 800fe7a:	e7ed      	b.n	800fe58 <_ZN3BTD26hci_pin_code_request_replyEv+0x88>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	73bb      	strb	r3, [r7, #14]
 800fe80:	7bbb      	ldrb	r3, [r7, #14]
 800fe82:	2b05      	cmp	r3, #5
 800fe84:	d80e      	bhi.n	800fea4 <_ZN3BTD26hci_pin_code_request_replyEv+0xd4>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800fe86:	7bba      	ldrb	r2, [r7, #14]
 800fe88:	7bbb      	ldrb	r3, [r7, #14]
 800fe8a:	330a      	adds	r3, #10
 800fe8c:	6879      	ldr	r1, [r7, #4]
 800fe8e:	440a      	add	r2, r1
 800fe90:	7f11      	ldrb	r1, [r2, #28]
 800fe92:	687a      	ldr	r2, [r7, #4]
 800fe94:	4413      	add	r3, r2
 800fe96:	460a      	mov	r2, r1
 800fe98:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800fe9c:	7bbb      	ldrb	r3, [r7, #14]
 800fe9e:	3301      	adds	r3, #1
 800fea0:	73bb      	strb	r3, [r7, #14]
 800fea2:	e7ed      	b.n	800fe80 <_ZN3BTD26hci_pin_code_request_replyEv+0xb0>
                }
                for(uint8_t i = 16; i < 26; i++)
 800fea4:	2310      	movs	r3, #16
 800fea6:	737b      	strb	r3, [r7, #13]
 800fea8:	7b7b      	ldrb	r3, [r7, #13]
 800feaa:	2b19      	cmp	r3, #25
 800feac:	d83c      	bhi.n	800ff28 <_ZN3BTD26hci_pin_code_request_replyEv+0x158>
                        hcibuf[i] = 0x00; // The rest should be 0
 800feae:	7b7b      	ldrb	r3, [r7, #13]
 800feb0:	687a      	ldr	r2, [r7, #4]
 800feb2:	4413      	add	r3, r2
 800feb4:	2200      	movs	r2, #0
 800feb6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800feba:	7b7b      	ldrb	r3, [r7, #13]
 800febc:	3301      	adds	r3, #1
 800febe:	737b      	strb	r3, [r7, #13]
 800fec0:	e7f2      	b.n	800fea8 <_ZN3BTD26hci_pin_code_request_replyEv+0xd8>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	691b      	ldr	r3, [r3, #16]
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7f0 f9a2 	bl	8000210 <strlen>
 800fecc:	4603      	mov	r3, r0
 800fece:	b2da      	uxtb	r2, r3
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800fed6:	2300      	movs	r3, #0
 800fed8:	733b      	strb	r3, [r7, #12]
 800feda:	7b3c      	ldrb	r4, [r7, #12]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	691b      	ldr	r3, [r3, #16]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7f0 f995 	bl	8000210 <strlen>
 800fee6:	4603      	mov	r3, r0
 800fee8:	429c      	cmp	r4, r3
 800feea:	d20f      	bcs.n	800ff0c <_ZN3BTD26hci_pin_code_request_replyEv+0x13c>
                        hcibuf[i + 10] = btdPin[i];
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	691a      	ldr	r2, [r3, #16]
 800fef0:	7b3b      	ldrb	r3, [r7, #12]
 800fef2:	441a      	add	r2, r3
 800fef4:	7b3b      	ldrb	r3, [r7, #12]
 800fef6:	330a      	adds	r3, #10
 800fef8:	7811      	ldrb	r1, [r2, #0]
 800fefa:	687a      	ldr	r2, [r7, #4]
 800fefc:	4413      	add	r3, r2
 800fefe:	460a      	mov	r2, r1
 800ff00:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800ff04:	7b3b      	ldrb	r3, [r7, #12]
 800ff06:	3301      	adds	r3, #1
 800ff08:	733b      	strb	r3, [r7, #12]
 800ff0a:	e7e6      	b.n	800feda <_ZN3BTD26hci_pin_code_request_replyEv+0x10a>
                for(; i < 16; i++)
 800ff0c:	7b3b      	ldrb	r3, [r7, #12]
 800ff0e:	2b0f      	cmp	r3, #15
 800ff10:	d80a      	bhi.n	800ff28 <_ZN3BTD26hci_pin_code_request_replyEv+0x158>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800ff12:	7b3b      	ldrb	r3, [r7, #12]
 800ff14:	330a      	adds	r3, #10
 800ff16:	687a      	ldr	r2, [r7, #4]
 800ff18:	4413      	add	r3, r2
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800ff20:	7b3b      	ldrb	r3, [r7, #12]
 800ff22:	3301      	adds	r3, #1
 800ff24:	733b      	strb	r3, [r7, #12]
 800ff26:	e7f1      	b.n	800ff0c <_ZN3BTD26hci_pin_code_request_replyEv+0x13c>
        }

        HCI_Command(hcibuf, 26);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	3389      	adds	r3, #137	; 0x89
 800ff2c:	221a      	movs	r2, #26
 800ff2e:	4619      	mov	r1, r3
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7ff fc55 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800ff36:	bf00      	nop
 800ff38:	3714      	adds	r7, #20
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd90      	pop	{r4, r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	08015104 	.word	0x08015104

0800ff44 <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	220e      	movs	r2, #14
 800ff50:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2204      	movs	r2, #4
 800ff58:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2206      	movs	r2, #6
 800ff60:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	7f1a      	ldrb	r2, [r3, #28]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	7f5a      	ldrb	r2, [r3, #29]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	7f9a      	ldrb	r2, [r3, #30]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	7fda      	ldrb	r2, [r3, #31]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	3389      	adds	r3, #137	; 0x89
 800ffa8:	2209      	movs	r2, #9
 800ffaa:	4619      	mov	r1, r3
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f7ff fc17 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 800ffb2:	bf00      	nop
 800ffb4:	3708      	adds	r7, #8
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}

0800ffba <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800ffba:	b580      	push	{r7, lr}
 800ffbc:	b082      	sub	sp, #8
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	220c      	movs	r2, #12
 800ffc6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2204      	movs	r2, #4
 800ffce:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2206      	movs	r2, #6
 800ffd6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	7f1a      	ldrb	r2, [r3, #28]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	7f5a      	ldrb	r2, [r3, #29]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	7f9a      	ldrb	r2, [r3, #30]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	7fda      	ldrb	r2, [r3, #31]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	3389      	adds	r3, #137	; 0x89
 801001e:	2209      	movs	r2, #9
 8010020:	4619      	mov	r1, r3
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f7ff fbdc 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 8010028:	bf00      	nop
 801002a:	3708      	adds	r7, #8
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}

08010030 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	222b      	movs	r2, #43	; 0x2b
 801003c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2204      	movs	r2, #4
 8010044:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2209      	movs	r2, #9
 801004c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	7f1a      	ldrb	r2, [r3, #28]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	7f5a      	ldrb	r2, [r3, #29]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	7f9a      	ldrb	r2, [r3, #30]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	7fda      	ldrb	r2, [r3, #31]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2203      	movs	r2, #3
 8010094:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2200      	movs	r2, #0
 80100a4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	3389      	adds	r3, #137	; 0x89
 80100ac:	220c      	movs	r2, #12
 80100ae:	4619      	mov	r1, r3
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f7ff fb95 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 80100b6:	bf00      	nop
 80100b8:	3708      	adds	r7, #8
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}

080100be <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 80100be:	b580      	push	{r7, lr}
 80100c0:	b082      	sub	sp, #8
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	222c      	movs	r2, #44	; 0x2c
 80100ca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2204      	movs	r2, #4
 80100d2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2206      	movs	r2, #6
 80100da:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	7f1a      	ldrb	r2, [r3, #28]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	7f5a      	ldrb	r2, [r3, #29]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	7f9a      	ldrb	r2, [r3, #30]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	7fda      	ldrb	r2, [r3, #31]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f893 2020 	ldrb.w	r2, [r3, #32]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	3389      	adds	r3, #137	; 0x89
 8010122:	2209      	movs	r2, #9
 8010124:	4619      	mov	r1, r3
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f7ff fb5a 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 801012c:	bf00      	nop
 801012e:	3708      	adds	r7, #8
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2211      	movs	r2, #17
 8010140:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2204      	movs	r2, #4
 8010148:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2202      	movs	r2, #2
 8010150:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	8b5b      	ldrh	r3, [r3, #26]
 8010158:	b2da      	uxtb	r2, r3
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	8b5b      	ldrh	r3, [r3, #26]
 8010164:	121b      	asrs	r3, r3, #8
 8010166:	b2db      	uxtb	r3, r3
 8010168:	f003 030f 	and.w	r3, r3, #15
 801016c:	b2da      	uxtb	r2, r3
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	3389      	adds	r3, #137	; 0x89
 8010178:	2205      	movs	r2, #5
 801017a:	4619      	mov	r1, r3
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f7ff fb2f 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 8010182:	bf00      	nop
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}

0801018a <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 801018a:	b580      	push	{r7, lr}
 801018c:	b082      	sub	sp, #8
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
 8010192:	460b      	mov	r3, r1
 8010194:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 801019c:	f023 0304 	bic.w	r3, r3, #4
 80101a0:	b29a      	uxth	r2, r3
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2206      	movs	r2, #6
 80101ac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2204      	movs	r2, #4
 80101b4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2203      	movs	r2, #3
 80101bc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 80101c0:	887b      	ldrh	r3, [r7, #2]
 80101c2:	b2da      	uxtb	r2, r3
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 80101ca:	887b      	ldrh	r3, [r7, #2]
 80101cc:	121b      	asrs	r3, r3, #8
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	f003 030f 	and.w	r3, r3, #15
 80101d4:	b2da      	uxtb	r2, r3
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2213      	movs	r2, #19
 80101e0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	3389      	adds	r3, #137	; 0x89
 80101e8:	2206      	movs	r2, #6
 80101ea:	4619      	mov	r1, r3
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f7ff faf7 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 80101f2:	bf00      	nop
 80101f4:	3708      	adds	r7, #8
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}

080101fa <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 80101fa:	b580      	push	{r7, lr}
 80101fc:	b082      	sub	sp, #8
 80101fe:	af00      	add	r7, sp, #0
 8010200:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2224      	movs	r2, #36	; 0x24
 8010206:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	220c      	movs	r2, #12
 801020e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2203      	movs	r2, #3
 8010216:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2204      	movs	r2, #4
 801021e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2208      	movs	r2, #8
 8010226:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2200      	movs	r2, #0
 801022e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	3389      	adds	r3, #137	; 0x89
 8010236:	2206      	movs	r2, #6
 8010238:	4619      	mov	r1, r3
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f7ff fad0 	bl	800f7e0 <_ZN3BTD11HCI_CommandEPht>
}
 8010240:	bf00      	nop
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 8010248:	b5b0      	push	{r4, r5, r7, lr}
 801024a:	b08a      	sub	sp, #40	; 0x28
 801024c:	af02      	add	r7, sp, #8
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	607a      	str	r2, [r7, #4]
 8010252:	461a      	mov	r2, r3
 8010254:	460b      	mov	r3, r1
 8010256:	817b      	strh	r3, [r7, #10]
 8010258:	4613      	mov	r3, r2
 801025a:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 801025c:	466b      	mov	r3, sp
 801025e:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 8010260:	7a7b      	ldrb	r3, [r7, #9]
 8010262:	1ddc      	adds	r4, r3, #7
 8010264:	61bc      	str	r4, [r7, #24]
 8010266:	4623      	mov	r3, r4
 8010268:	3301      	adds	r3, #1
 801026a:	4618      	mov	r0, r3
 801026c:	f04f 0100 	mov.w	r1, #0
 8010270:	f04f 0200 	mov.w	r2, #0
 8010274:	f04f 0300 	mov.w	r3, #0
 8010278:	00cb      	lsls	r3, r1, #3
 801027a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801027e:	00c2      	lsls	r2, r0, #3
 8010280:	4623      	mov	r3, r4
 8010282:	3301      	adds	r3, #1
 8010284:	4618      	mov	r0, r3
 8010286:	f04f 0100 	mov.w	r1, #0
 801028a:	f04f 0200 	mov.w	r2, #0
 801028e:	f04f 0300 	mov.w	r3, #0
 8010292:	00cb      	lsls	r3, r1, #3
 8010294:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010298:	00c2      	lsls	r2, r0, #3
 801029a:	4623      	mov	r3, r4
 801029c:	3301      	adds	r3, #1
 801029e:	3307      	adds	r3, #7
 80102a0:	08db      	lsrs	r3, r3, #3
 80102a2:	00db      	lsls	r3, r3, #3
 80102a4:	ebad 0d03 	sub.w	sp, sp, r3
 80102a8:	ab02      	add	r3, sp, #8
 80102aa:	3300      	adds	r3, #0
 80102ac:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 80102ae:	897b      	ldrh	r3, [r7, #10]
 80102b0:	b2da      	uxtb	r2, r3
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 80102b6:	897b      	ldrh	r3, [r7, #10]
 80102b8:	121b      	asrs	r3, r3, #8
 80102ba:	b25b      	sxtb	r3, r3
 80102bc:	f003 030f 	and.w	r3, r3, #15
 80102c0:	b25b      	sxtb	r3, r3
 80102c2:	f043 0320 	orr.w	r3, r3, #32
 80102c6:	b25b      	sxtb	r3, r3
 80102c8:	b2da      	uxtb	r2, r3
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 80102ce:	7a7b      	ldrb	r3, [r7, #9]
 80102d0:	3304      	adds	r3, #4
 80102d2:	b2da      	uxtb	r2, r3
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 80102d8:	7a7b      	ldrb	r3, [r7, #9]
 80102da:	3304      	adds	r3, #4
 80102dc:	121b      	asrs	r3, r3, #8
 80102de:	b2da      	uxtb	r2, r3
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	7a7a      	ldrb	r2, [r7, #9]
 80102e8:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 80102ea:	7a7b      	ldrb	r3, [r7, #9]
 80102ec:	121b      	asrs	r3, r3, #8
 80102ee:	b2da      	uxtb	r2, r3
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80102fa:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8010302:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 8010304:	2300      	movs	r3, #0
 8010306:	83fb      	strh	r3, [r7, #30]
 8010308:	7a7b      	ldrb	r3, [r7, #9]
 801030a:	b29b      	uxth	r3, r3
 801030c:	8bfa      	ldrh	r2, [r7, #30]
 801030e:	429a      	cmp	r2, r3
 8010310:	d20b      	bcs.n	801032a <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 8010312:	8bfb      	ldrh	r3, [r7, #30]
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	441a      	add	r2, r3
 8010318:	8bfb      	ldrh	r3, [r7, #30]
 801031a:	3308      	adds	r3, #8
 801031c:	7811      	ldrb	r1, [r2, #0]
 801031e:	697a      	ldr	r2, [r7, #20]
 8010320:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 8010322:	8bfb      	ldrh	r3, [r7, #30]
 8010324:	3301      	adds	r3, #1
 8010326:	83fb      	strh	r3, [r7, #30]
 8010328:	e7ee      	b.n	8010308 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 801033a:	7a7b      	ldrb	r3, [r7, #9]
 801033c:	b29b      	uxth	r3, r3
 801033e:	3308      	adds	r3, #8
 8010340:	b29c      	uxth	r4, r3
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	9300      	str	r3, [sp, #0]
 8010346:	4623      	mov	r3, r4
 8010348:	f002 fd9e 	bl	8012e88 <_ZN3USB11outTransferEhhtPh>
 801034c:	4603      	mov	r3, r0
 801034e:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 8010350:	7cfb      	ldrb	r3, [r7, #19]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d01f      	beq.n	8010396 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x14e>
                delay(100); // This small delay prevents it from overflowing if it fails
 8010356:	2064      	movs	r0, #100	; 0x64
 8010358:	f7f2 f8ee 	bl	8002538 <HAL_Delay>
                Notify(PSTR("\r\nError sending L2CAP message: 0x"), 0x80);
 801035c:	2180      	movs	r1, #128	; 0x80
 801035e:	4810      	ldr	r0, [pc, #64]	; (80103a0 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x158>)
 8010360:	f003 ff9a 	bl	8014298 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (rcode, 0x80);
 8010364:	7cfb      	ldrb	r3, [r7, #19]
 8010366:	2180      	movs	r1, #128	; 0x80
 8010368:	4618      	mov	r0, r3
 801036a:	f000 fa92 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                Notify(PSTR(" - Channel ID: "), 0x80);
 801036e:	2180      	movs	r1, #128	; 0x80
 8010370:	480c      	ldr	r0, [pc, #48]	; (80103a4 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x15c>)
 8010372:	f003 ff91 	bl	8014298 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (channelHigh, 0x80);
 8010376:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801037a:	2180      	movs	r1, #128	; 0x80
 801037c:	4618      	mov	r0, r3
 801037e:	f000 fa88 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                Notify(PSTR(" "), 0x80);
 8010382:	2180      	movs	r1, #128	; 0x80
 8010384:	4808      	ldr	r0, [pc, #32]	; (80103a8 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x160>)
 8010386:	f003 ff87 	bl	8014298 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (channelLow, 0x80);
 801038a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801038e:	2180      	movs	r1, #128	; 0x80
 8010390:	4618      	mov	r0, r3
 8010392:	f000 fa7e 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
 8010396:	46ad      	mov	sp, r5
}
 8010398:	bf00      	nop
 801039a:	3720      	adds	r7, #32
 801039c:	46bd      	mov	sp, r7
 801039e:	bdb0      	pop	{r4, r5, r7, pc}
 80103a0:	0801512c 	.word	0x0801512c
 80103a4:	08015150 	.word	0x08015150
 80103a8:	08014b08 	.word	0x08014b08

080103ac <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b086      	sub	sp, #24
 80103b0:	af02      	add	r7, sp, #8
 80103b2:	60f8      	str	r0, [r7, #12]
 80103b4:	607b      	str	r3, [r7, #4]
 80103b6:	460b      	mov	r3, r1
 80103b8:	817b      	strh	r3, [r7, #10]
 80103ba:	4613      	mov	r3, r2
 80103bc:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	2202      	movs	r2, #2
 80103c2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	7a7a      	ldrb	r2, [r7, #9]
 80103ca:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	2204      	movs	r2, #4
 80103d2:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2200      	movs	r2, #0
 80103da:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 80103de:	8b3b      	ldrh	r3, [r7, #24]
 80103e0:	b2da      	uxtb	r2, r3
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 80103e8:	8b3b      	ldrh	r3, [r7, #24]
 80103ea:	121b      	asrs	r3, r3, #8
 80103ec:	b2da      	uxtb	r2, r3
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	781a      	ldrb	r2, [r3, #0]
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	785a      	ldrb	r2, [r3, #1]
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	f203 1209 	addw	r2, r3, #265	; 0x109
 801040e:	8979      	ldrh	r1, [r7, #10]
 8010410:	2300      	movs	r3, #0
 8010412:	9301      	str	r3, [sp, #4]
 8010414:	2301      	movs	r3, #1
 8010416:	9300      	str	r3, [sp, #0]
 8010418:	2308      	movs	r3, #8
 801041a:	68f8      	ldr	r0, [r7, #12]
 801041c:	f7ff ff14 	bl	8010248 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010420:	bf00      	nop
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 8010428:	b580      	push	{r7, lr}
 801042a:	b086      	sub	sp, #24
 801042c:	af02      	add	r7, sp, #8
 801042e:	60f8      	str	r0, [r7, #12]
 8010430:	607b      	str	r3, [r7, #4]
 8010432:	460b      	mov	r3, r1
 8010434:	817b      	strh	r3, [r7, #10]
 8010436:	4613      	mov	r3, r2
 8010438:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	2203      	movs	r2, #3
 801043e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	7a7a      	ldrb	r2, [r7, #9]
 8010446:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	2208      	movs	r2, #8
 801044e:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2200      	movs	r2, #0
 8010456:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	781a      	ldrb	r2, [r3, #0]
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	785a      	ldrb	r2, [r3, #1]
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	781a      	ldrb	r2, [r3, #0]
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	785a      	ldrb	r2, [r3, #1]
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	7f3a      	ldrb	r2, [r7, #28]
 8010486:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2200      	movs	r2, #0
 801048e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	2200      	movs	r2, #0
 8010496:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2200      	movs	r2, #0
 801049e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	f203 1209 	addw	r2, r3, #265	; 0x109
 80104a8:	8979      	ldrh	r1, [r7, #10]
 80104aa:	2300      	movs	r3, #0
 80104ac:	9301      	str	r3, [sp, #4]
 80104ae:	2301      	movs	r3, #1
 80104b0:	9300      	str	r3, [sp, #0]
 80104b2:	230c      	movs	r3, #12
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	f7ff fec7 	bl	8010248 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80104ba:	bf00      	nop
 80104bc:	3710      	adds	r7, #16
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}

080104c2 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 80104c2:	b580      	push	{r7, lr}
 80104c4:	b086      	sub	sp, #24
 80104c6:	af02      	add	r7, sp, #8
 80104c8:	60f8      	str	r0, [r7, #12]
 80104ca:	607b      	str	r3, [r7, #4]
 80104cc:	460b      	mov	r3, r1
 80104ce:	817b      	strh	r3, [r7, #10]
 80104d0:	4613      	mov	r3, r2
 80104d2:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2204      	movs	r2, #4
 80104d8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	7a7a      	ldrb	r2, [r7, #9]
 80104e0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	2208      	movs	r2, #8
 80104e8:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2200      	movs	r2, #0
 80104f0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	781a      	ldrb	r2, [r3, #0]
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	785a      	ldrb	r2, [r3, #1]
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2200      	movs	r2, #0
 801050c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2200      	movs	r2, #0
 8010514:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2201      	movs	r2, #1
 801051c:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2202      	movs	r2, #2
 8010524:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	22ff      	movs	r2, #255	; 0xff
 801052c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	22ff      	movs	r2, #255	; 0xff
 8010534:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f203 1209 	addw	r2, r3, #265	; 0x109
 801053e:	8979      	ldrh	r1, [r7, #10]
 8010540:	2300      	movs	r3, #0
 8010542:	9301      	str	r3, [sp, #4]
 8010544:	2301      	movs	r3, #1
 8010546:	9300      	str	r3, [sp, #0]
 8010548:	230c      	movs	r3, #12
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	f7ff fe7c 	bl	8010248 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010550:	bf00      	nop
 8010552:	3710      	adds	r7, #16
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 8010558:	b580      	push	{r7, lr}
 801055a:	b086      	sub	sp, #24
 801055c:	af02      	add	r7, sp, #8
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	607b      	str	r3, [r7, #4]
 8010562:	460b      	mov	r3, r1
 8010564:	817b      	strh	r3, [r7, #10]
 8010566:	4613      	mov	r3, r2
 8010568:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	2205      	movs	r2, #5
 801056e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	7a7a      	ldrb	r2, [r7, #9]
 8010576:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	220a      	movs	r2, #10
 801057e:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2200      	movs	r2, #0
 8010586:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	781a      	ldrb	r2, [r3, #0]
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	785a      	ldrb	r2, [r3, #1]
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2200      	movs	r2, #0
 80105a2:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2200      	movs	r2, #0
 80105aa:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2200      	movs	r2, #0
 80105b2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2200      	movs	r2, #0
 80105ba:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2201      	movs	r2, #1
 80105c2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2202      	movs	r2, #2
 80105ca:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	22a0      	movs	r2, #160	; 0xa0
 80105d2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2202      	movs	r2, #2
 80105da:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	f203 1209 	addw	r2, r3, #265	; 0x109
 80105e4:	8979      	ldrh	r1, [r7, #10]
 80105e6:	2300      	movs	r3, #0
 80105e8:	9301      	str	r3, [sp, #4]
 80105ea:	2301      	movs	r3, #1
 80105ec:	9300      	str	r3, [sp, #0]
 80105ee:	230e      	movs	r3, #14
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f7ff fe29 	bl	8010248 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80105f6:	bf00      	nop
 80105f8:	3710      	adds	r7, #16
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}

080105fe <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 80105fe:	b580      	push	{r7, lr}
 8010600:	b086      	sub	sp, #24
 8010602:	af02      	add	r7, sp, #8
 8010604:	60f8      	str	r0, [r7, #12]
 8010606:	607b      	str	r3, [r7, #4]
 8010608:	460b      	mov	r3, r1
 801060a:	817b      	strh	r3, [r7, #10]
 801060c:	4613      	mov	r3, r2
 801060e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2206      	movs	r2, #6
 8010614:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	7a7a      	ldrb	r2, [r7, #9]
 801061c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	2204      	movs	r2, #4
 8010624:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2200      	movs	r2, #0
 801062c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	781a      	ldrb	r2, [r3, #0]
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	785a      	ldrb	r2, [r3, #1]
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 8010644:	69bb      	ldr	r3, [r7, #24]
 8010646:	781a      	ldrb	r2, [r3, #0]
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 801064e:	69bb      	ldr	r3, [r7, #24]
 8010650:	785a      	ldrb	r2, [r3, #1]
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	f203 1209 	addw	r2, r3, #265	; 0x109
 801065e:	8979      	ldrh	r1, [r7, #10]
 8010660:	2300      	movs	r3, #0
 8010662:	9301      	str	r3, [sp, #4]
 8010664:	2301      	movs	r3, #1
 8010666:	9300      	str	r3, [sp, #0]
 8010668:	2308      	movs	r3, #8
 801066a:	68f8      	ldr	r0, [r7, #12]
 801066c:	f7ff fdec 	bl	8010248 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010670:	bf00      	nop
 8010672:	3710      	adds	r7, #16
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 8010678:	b580      	push	{r7, lr}
 801067a:	b086      	sub	sp, #24
 801067c:	af02      	add	r7, sp, #8
 801067e:	60f8      	str	r0, [r7, #12]
 8010680:	607b      	str	r3, [r7, #4]
 8010682:	460b      	mov	r3, r1
 8010684:	817b      	strh	r3, [r7, #10]
 8010686:	4613      	mov	r3, r2
 8010688:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2207      	movs	r2, #7
 801068e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	7a7a      	ldrb	r2, [r7, #9]
 8010696:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	2204      	movs	r2, #4
 801069e:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	2200      	movs	r2, #0
 80106a6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	781a      	ldrb	r2, [r3, #0]
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	785a      	ldrb	r2, [r3, #1]
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 80106be:	69bb      	ldr	r3, [r7, #24]
 80106c0:	781a      	ldrb	r2, [r3, #0]
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	785a      	ldrb	r2, [r3, #1]
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f203 1209 	addw	r2, r3, #265	; 0x109
 80106d8:	8979      	ldrh	r1, [r7, #10]
 80106da:	2300      	movs	r3, #0
 80106dc:	9301      	str	r3, [sp, #4]
 80106de:	2301      	movs	r3, #1
 80106e0:	9300      	str	r3, [sp, #0]
 80106e2:	2308      	movs	r3, #8
 80106e4:	68f8      	ldr	r0, [r7, #12]
 80106e6:	f7ff fdaf 	bl	8010248 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80106ea:	bf00      	nop
 80106ec:	3710      	adds	r7, #16
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}

080106f2 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b084      	sub	sp, #16
 80106f6:	af02      	add	r7, sp, #8
 80106f8:	6078      	str	r0, [r7, #4]
 80106fa:	4608      	mov	r0, r1
 80106fc:	4611      	mov	r1, r2
 80106fe:	461a      	mov	r2, r3
 8010700:	4603      	mov	r3, r0
 8010702:	807b      	strh	r3, [r7, #2]
 8010704:	460b      	mov	r3, r1
 8010706:	707b      	strb	r3, [r7, #1]
 8010708:	4613      	mov	r3, r2
 801070a:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	220b      	movs	r2, #11
 8010710:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	787a      	ldrb	r2, [r7, #1]
 8010718:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2208      	movs	r2, #8
 8010720:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2200      	movs	r2, #0
 8010728:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	783a      	ldrb	r2, [r7, #0]
 8010730:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	7c3a      	ldrb	r2, [r7, #16]
 8010738:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2200      	movs	r2, #0
 8010740:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2200      	movs	r2, #0
 8010748:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2200      	movs	r2, #0
 8010750:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2200      	movs	r2, #0
 8010758:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f203 1209 	addw	r2, r3, #265	; 0x109
 8010772:	8879      	ldrh	r1, [r7, #2]
 8010774:	2300      	movs	r3, #0
 8010776:	9301      	str	r3, [sp, #4]
 8010778:	2301      	movs	r3, #1
 801077a:	9300      	str	r3, [sp, #0]
 801077c:	230c      	movs	r3, #12
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f7ff fd62 	bl	8010248 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010784:	bf00      	nop
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 801078c:	b580      	push	{r7, lr}
 801078e:	b08e      	sub	sp, #56	; 0x38
 8010790:	af08      	add	r7, sp, #32
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 8010796:	2301      	movs	r3, #1
 8010798:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 801079a:	2300      	movs	r3, #0
 801079c:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 801079e:	2300      	movs	r3, #0
 80107a0:	75fb      	strb	r3, [r7, #23]
 80107a2:	7dfb      	ldrb	r3, [r7, #23]
 80107a4:	2b05      	cmp	r3, #5
 80107a6:	d811      	bhi.n	80107cc <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 80107a8:	7dfb      	ldrb	r3, [r7, #23]
 80107aa:	f1c3 0305 	rsb	r3, r3, #5
 80107ae:	461a      	mov	r2, r3
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	441a      	add	r2, r3
 80107b4:	7dfb      	ldrb	r3, [r7, #23]
 80107b6:	3302      	adds	r3, #2
 80107b8:	7812      	ldrb	r2, [r2, #0]
 80107ba:	f107 0118 	add.w	r1, r7, #24
 80107be:	440b      	add	r3, r1
 80107c0:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 80107c4:	7dfb      	ldrb	r3, [r7, #23]
 80107c6:	3301      	adds	r3, #1
 80107c8:	75fb      	strb	r3, [r7, #23]
 80107ca:	e7ea      	b.n	80107a2 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80107dc:	2300      	movs	r3, #0
 80107de:	9307      	str	r3, [sp, #28]
 80107e0:	f107 030c 	add.w	r3, r7, #12
 80107e4:	9306      	str	r3, [sp, #24]
 80107e6:	2308      	movs	r3, #8
 80107e8:	9305      	str	r3, [sp, #20]
 80107ea:	2308      	movs	r3, #8
 80107ec:	9304      	str	r3, [sp, #16]
 80107ee:	2300      	movs	r3, #0
 80107f0:	9303      	str	r3, [sp, #12]
 80107f2:	2303      	movs	r3, #3
 80107f4:	9302      	str	r3, [sp, #8]
 80107f6:	23f5      	movs	r3, #245	; 0xf5
 80107f8:	9301      	str	r3, [sp, #4]
 80107fa:	2309      	movs	r3, #9
 80107fc:	9300      	str	r3, [sp, #0]
 80107fe:	2321      	movs	r3, #33	; 0x21
 8010800:	f002 f941 	bl	8012a86 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 8010804:	bf00      	nop
 8010806:	3718      	adds	r7, #24
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}

0801080c <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 801080c:	b580      	push	{r7, lr}
 801080e:	b08e      	sub	sp, #56	; 0x38
 8010810:	af08      	add	r7, sp, #32
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 8010816:	2305      	movs	r3, #5
 8010818:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 801081a:	2310      	movs	r3, #16
 801081c:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 801081e:	2301      	movs	r3, #1
 8010820:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 8010822:	2302      	movs	r3, #2
 8010824:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 8010826:	2312      	movs	r3, #18
 8010828:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 801082a:	2300      	movs	r3, #0
 801082c:	75fb      	strb	r3, [r7, #23]
 801082e:	7dfb      	ldrb	r3, [r7, #23]
 8010830:	2b05      	cmp	r3, #5
 8010832:	d80e      	bhi.n	8010852 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 8010834:	7dfb      	ldrb	r3, [r7, #23]
 8010836:	683a      	ldr	r2, [r7, #0]
 8010838:	441a      	add	r2, r3
 801083a:	7dfb      	ldrb	r3, [r7, #23]
 801083c:	3301      	adds	r3, #1
 801083e:	7812      	ldrb	r2, [r2, #0]
 8010840:	f107 0118 	add.w	r1, r7, #24
 8010844:	440b      	add	r3, r1
 8010846:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 801084a:	7dfb      	ldrb	r3, [r7, #23]
 801084c:	3301      	adds	r3, #1
 801084e:	75fb      	strb	r3, [r7, #23]
 8010850:	e7ed      	b.n	801082e <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8010862:	2300      	movs	r3, #0
 8010864:	9307      	str	r3, [sp, #28]
 8010866:	f107 030c 	add.w	r3, r7, #12
 801086a:	9306      	str	r3, [sp, #24]
 801086c:	230b      	movs	r3, #11
 801086e:	9305      	str	r3, [sp, #20]
 8010870:	230b      	movs	r3, #11
 8010872:	9304      	str	r3, [sp, #16]
 8010874:	2300      	movs	r3, #0
 8010876:	9303      	str	r3, [sp, #12]
 8010878:	2303      	movs	r3, #3
 801087a:	9302      	str	r3, [sp, #8]
 801087c:	2305      	movs	r3, #5
 801087e:	9301      	str	r3, [sp, #4]
 8010880:	2309      	movs	r3, #9
 8010882:	9300      	str	r3, [sp, #0]
 8010884:	2321      	movs	r3, #33	; 0x21
 8010886:	f002 f8fe 	bl	8012a86 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 801088a:	bf00      	nop
 801088c:	3718      	adds	r7, #24
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}

08010892 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8010892:	b580      	push	{r7, lr}
 8010894:	b082      	sub	sp, #8
 8010896:	af00      	add	r7, sp, #0
 8010898:	4603      	mov	r3, r0
 801089a:	6039      	str	r1, [r7, #0]
 801089c:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
 801089e:	79fb      	ldrb	r3, [r7, #7]
 80108a0:	6839      	ldr	r1, [r7, #0]
 80108a2:	4618      	mov	r0, r3
 80108a4:	f000 f8b0 	bl	8010a08 <_Z8PrintHexIhEvT_i>
#endif
}
 80108a8:	bf00      	nop
 80108aa:	3708      	adds	r7, #8
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 80108b0:	b480      	push	{r7}
 80108b2:	b083      	sub	sp, #12
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	4a04      	ldr	r2, [pc, #16]	; (80108cc <_ZN13USBReadParserC1Ev+0x1c>)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	601a      	str	r2, [r3, #0]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	4618      	mov	r0, r3
 80108c2:	370c      	adds	r7, #12
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr
 80108cc:	080164f0 	.word	0x080164f0

080108d0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4618      	mov	r0, r3
 80108de:	f7ff ffe7 	bl	80108b0 <_ZN13USBReadParserC1Ev>
 80108e2:	4a21      	ldr	r2, [pc, #132]	; (8010968 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	601a      	str	r2, [r3, #0]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	683a      	ldr	r2, [r7, #0]
 80108ec:	605a      	str	r2, [r3, #4]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	3308      	adds	r3, #8
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7fd f807 	bl	800d906 <_ZN16MultiValueBufferC1Ev>
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	3310      	adds	r3, #16
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7fd f819 	bl	800d934 <_ZN20MultiByteValueParserC1Ev>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	3318      	adds	r3, #24
 8010906:	4618      	mov	r0, r3
 8010908:	f7fd f840 	bl	800d98c <_ZN11ByteSkipperC1Ev>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2200      	movs	r2, #0
 8010910:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2200      	movs	r2, #0
 8010918:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2200      	movs	r2, #0
 8010920:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2200      	movs	r2, #0
 8010928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f103 0220 	add.w	r2, r3, #32
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f103 0210 	add.w	r2, r3, #16
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	3308      	adds	r3, #8
 8010942:	4619      	mov	r1, r3
 8010944:	4610      	mov	r0, r2
 8010946:	f7fd f809 	bl	800d95c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f103 0218 	add.w	r2, r3, #24
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	3308      	adds	r3, #8
 8010954:	4619      	mov	r1, r3
 8010956:	4610      	mov	r0, r2
 8010958:	f7fd f82c 	bl	800d9b4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	4618      	mov	r0, r3
 8010960:	3708      	adds	r7, #8
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
 8010966:	bf00      	nop
 8010968:	08016498 	.word	0x08016498

0801096c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 801096c:	b580      	push	{r7, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
UseOr(false) {
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	4618      	mov	r0, r3
 801097a:	f7ff ff99 	bl	80108b0 <_ZN13USBReadParserC1Ev>
 801097e:	4a21      	ldr	r2, [pc, #132]	; (8010a04 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	601a      	str	r2, [r3, #0]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	683a      	ldr	r2, [r7, #0]
 8010988:	605a      	str	r2, [r3, #4]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	3308      	adds	r3, #8
 801098e:	4618      	mov	r0, r3
 8010990:	f7fc ffb9 	bl	800d906 <_ZN16MultiValueBufferC1Ev>
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	3310      	adds	r3, #16
 8010998:	4618      	mov	r0, r3
 801099a:	f7fc ffcb 	bl	800d934 <_ZN20MultiByteValueParserC1Ev>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	3318      	adds	r3, #24
 80109a2:	4618      	mov	r0, r3
 80109a4:	f7fc fff2 	bl	800d98c <_ZN11ByteSkipperC1Ev>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2200      	movs	r2, #0
 80109ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2200      	movs	r2, #0
 80109bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2200      	movs	r2, #0
 80109c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f103 0220 	add.w	r2, r3, #32
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f103 0210 	add.w	r2, r3, #16
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	3308      	adds	r3, #8
 80109de:	4619      	mov	r1, r3
 80109e0:	4610      	mov	r0, r2
 80109e2:	f7fc ffbb 	bl	800d95c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f103 0218 	add.w	r2, r3, #24
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	3308      	adds	r3, #8
 80109f0:	4619      	mov	r1, r3
 80109f2:	4610      	mov	r0, r2
 80109f4:	f7fc ffde 	bl	800d9b4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	4618      	mov	r0, r3
 80109fc:	3708      	adds	r7, #8
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	0801648c 	.word	0x0801648c

08010a08 <_Z8PrintHexIhEvT_i>:
void PrintHex(T val, int lvl) {
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b084      	sub	sp, #16
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	4603      	mov	r3, r0
 8010a10:	6039      	str	r1, [r7, #0]
 8010a12:	71fb      	strb	r3, [r7, #7]
        int num_nibbles = sizeof (T) * 2;
 8010a14:	2302      	movs	r3, #2
 8010a16:	60fb      	str	r3, [r7, #12]
                char v = 48 + (((val >> (num_nibbles - 1) * 4)) & 0x0f);
 8010a18:	79fa      	ldrb	r2, [r7, #7]
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	3b01      	subs	r3, #1
 8010a1e:	009b      	lsls	r3, r3, #2
 8010a20:	fa42 f303 	asr.w	r3, r2, r3
 8010a24:	b2db      	uxtb	r3, r3
 8010a26:	f003 030f 	and.w	r3, r3, #15
 8010a2a:	b2db      	uxtb	r3, r3
 8010a2c:	3330      	adds	r3, #48	; 0x30
 8010a2e:	72fb      	strb	r3, [r7, #11]
                if(v > 57) v += 7;
 8010a30:	7afb      	ldrb	r3, [r7, #11]
 8010a32:	2b39      	cmp	r3, #57	; 0x39
 8010a34:	d902      	bls.n	8010a3c <_Z8PrintHexIhEvT_i+0x34>
 8010a36:	7afb      	ldrb	r3, [r7, #11]
 8010a38:	3307      	adds	r3, #7
 8010a3a:	72fb      	strb	r3, [r7, #11]
                E_Notifyc(v, lvl);
 8010a3c:	7afb      	ldrb	r3, [r7, #11]
 8010a3e:	6839      	ldr	r1, [r7, #0]
 8010a40:	4618      	mov	r0, r3
 8010a42:	f003 fc0f 	bl	8014264 <_Z9E_Notifycci>
        do {
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	3b01      	subs	r3, #1
 8010a4a:	60fb      	str	r3, [r7, #12]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	bf14      	ite	ne
 8010a52:	2301      	movne	r3, #1
 8010a54:	2300      	moveq	r3, #0
 8010a56:	b2db      	uxtb	r3, r3
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d000      	beq.n	8010a5e <_Z8PrintHexIhEvT_i+0x56>
 8010a5c:	e7dc      	b.n	8010a18 <_Z8PrintHexIhEvT_i+0x10>
}
 8010a5e:	bf00      	nop
 8010a60:	3710      	adds	r7, #16
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}

08010a66 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b086      	sub	sp, #24
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	60f8      	str	r0, [r7, #12]
 8010a6e:	607a      	str	r2, [r7, #4]
 8010a70:	603b      	str	r3, [r7, #0]
 8010a72:	460b      	mov	r3, r1
 8010a74:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 8010a76:	897b      	ldrh	r3, [r7, #10]
 8010a78:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	613b      	str	r3, [r7, #16]

        while(cntdn)
 8010a7e:	8afb      	ldrh	r3, [r7, #22]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d00f      	beq.n	8010aa4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 8010a84:	f107 0216 	add.w	r2, r7, #22
 8010a88:	f107 0310 	add.w	r3, r7, #16
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	68f8      	ldr	r0, [r7, #12]
 8010a90:	f000 f82e 	bl	8010af0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 8010a94:	4603      	mov	r3, r0
 8010a96:	f083 0301 	eor.w	r3, r3, #1
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d100      	bne.n	8010aa2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 8010aa0:	e7ed      	b.n	8010a7e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 8010aa2:	bf00      	nop
}
 8010aa4:	3718      	adds	r7, #24
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}

08010aaa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 8010aaa:	b580      	push	{r7, lr}
 8010aac:	b086      	sub	sp, #24
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	60f8      	str	r0, [r7, #12]
 8010ab2:	607a      	str	r2, [r7, #4]
 8010ab4:	603b      	str	r3, [r7, #0]
 8010ab6:	460b      	mov	r3, r1
 8010ab8:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 8010aba:	897b      	ldrh	r3, [r7, #10]
 8010abc:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	613b      	str	r3, [r7, #16]
        while(cntdn)
 8010ac2:	8afb      	ldrh	r3, [r7, #22]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d00f      	beq.n	8010ae8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 8010ac8:	f107 0216 	add.w	r2, r7, #22
 8010acc:	f107 0310 	add.w	r3, r7, #16
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	68f8      	ldr	r0, [r7, #12]
 8010ad4:	f000 f982 	bl	8010ddc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	f083 0301 	eor.w	r3, r3, #1
 8010ade:	b2db      	uxtb	r3, r3
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d100      	bne.n	8010ae6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 8010ae4:	e7ed      	b.n	8010ac2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 8010ae6:	bf00      	nop
}
 8010ae8:	3718      	adds	r7, #24
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}
	...

08010af0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8010af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010af2:	b089      	sub	sp, #36	; 0x24
 8010af4:	af02      	add	r7, sp, #8
 8010af6:	60f8      	str	r0, [r7, #12]
 8010af8:	60b9      	str	r1, [r7, #8]
 8010afa:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	3320      	adds	r3, #32
 8010b00:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	3320      	adds	r3, #32
 8010b06:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b0e:	2b04      	cmp	r3, #4
 8010b10:	f200 815e 	bhi.w	8010dd0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8010b14:	a201      	add	r2, pc, #4	; (adr r2, 8010b1c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 8010b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b1a:	bf00      	nop
 8010b1c:	08010b31 	.word	0x08010b31
 8010b20:	08010b51 	.word	0x08010b51
 8010b24:	08010b93 	.word	0x08010b93
 8010b28:	08010ba7 	.word	0x08010ba7
 8010b2c:	08010c6b 	.word	0x08010c6b
                case 0:
                        theBuffer.valueSize = 2;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	2202      	movs	r2, #2
 8010b34:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f103 0210 	add.w	r2, r3, #16
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	3308      	adds	r3, #8
 8010b40:	4619      	mov	r1, r3
 8010b42:	4610      	mov	r0, r2
 8010b44:	f7fc ff0a 	bl	800d95c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	3310      	adds	r3, #16
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	68b9      	ldr	r1, [r7, #8]
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f003 fc5b 	bl	8014414 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	f083 0301 	eor.w	r3, r3, #1
 8010b64:	b2db      	uxtb	r3, r3
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d001      	beq.n	8010b6e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	e131      	b.n	8010dd2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8010b74:	781a      	ldrb	r2, [r3, #0]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8010b82:	785a      	ldrb	r2, [r3, #1]
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	2202      	movs	r2, #2
 8010b8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	3320      	adds	r3, #32
 8010b96:	1c9a      	adds	r2, r3, #2
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2203      	movs	r2, #3
 8010ba2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010bac:	3b02      	subs	r3, #2
 8010bae:	2b1f      	cmp	r3, #31
 8010bb0:	d847      	bhi.n	8010c42 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8010bb2:	a201      	add	r2, pc, #4	; (adr r2, 8010bb8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8010bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bb8:	08010c43 	.word	0x08010c43
 8010bbc:	08010c43 	.word	0x08010c43
 8010bc0:	08010c39 	.word	0x08010c39
 8010bc4:	08010c43 	.word	0x08010c43
 8010bc8:	08010c43 	.word	0x08010c43
 8010bcc:	08010c43 	.word	0x08010c43
 8010bd0:	08010c43 	.word	0x08010c43
 8010bd4:	08010c43 	.word	0x08010c43
 8010bd8:	08010c43 	.word	0x08010c43
 8010bdc:	08010c43 	.word	0x08010c43
 8010be0:	08010c43 	.word	0x08010c43
 8010be4:	08010c43 	.word	0x08010c43
 8010be8:	08010c43 	.word	0x08010c43
 8010bec:	08010c43 	.word	0x08010c43
 8010bf0:	08010c43 	.word	0x08010c43
 8010bf4:	08010c43 	.word	0x08010c43
 8010bf8:	08010c43 	.word	0x08010c43
 8010bfc:	08010c43 	.word	0x08010c43
 8010c00:	08010c43 	.word	0x08010c43
 8010c04:	08010c43 	.word	0x08010c43
 8010c08:	08010c43 	.word	0x08010c43
 8010c0c:	08010c43 	.word	0x08010c43
 8010c10:	08010c43 	.word	0x08010c43
 8010c14:	08010c43 	.word	0x08010c43
 8010c18:	08010c43 	.word	0x08010c43
 8010c1c:	08010c43 	.word	0x08010c43
 8010c20:	08010c43 	.word	0x08010c43
 8010c24:	08010c43 	.word	0x08010c43
 8010c28:	08010c43 	.word	0x08010c43
 8010c2c:	08010c43 	.word	0x08010c43
 8010c30:	08010c43 	.word	0x08010c43
 8010c34:	08010c43 	.word	0x08010c43
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 8010c40:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010c48:	3b02      	subs	r3, #2
 8010c4a:	b2da      	uxtb	r2, r3
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f103 0210 	add.w	r2, r3, #16
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	3308      	adds	r3, #8
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	4610      	mov	r0, r2
 8010c5e:	f7fc fe7d 	bl	800d95c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2204      	movs	r2, #4
 8010c66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010c70:	2b05      	cmp	r3, #5
 8010c72:	d055      	beq.n	8010d20 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 8010c74:	2b05      	cmp	r3, #5
 8010c76:	f300 8085 	bgt.w	8010d84 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 8010c7a:	2b02      	cmp	r3, #2
 8010c7c:	d002      	beq.n	8010c84 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 8010c7e:	2b04      	cmp	r3, #4
 8010c80:	d015      	beq.n	8010cae <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 8010c82:	e07f      	b.n	8010d84 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	3310      	adds	r3, #16
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	68b9      	ldr	r1, [r7, #8]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f003 fbc1 	bl	8014414 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010c92:	4603      	mov	r3, r0
 8010c94:	f083 0301 	eor.w	r3, r3, #1
 8010c98:	b2db      	uxtb	r3, r3
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d001      	beq.n	8010ca2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	e097      	b.n	8010dd2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	795a      	ldrb	r2, [r3, #5]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 8010cac:	e086      	b.n	8010dbc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	3310      	adds	r3, #16
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	68b9      	ldr	r1, [r7, #8]
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f003 fbac 	bl	8014414 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	f083 0301 	eor.w	r3, r3, #1
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d001      	beq.n	8010ccc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	e082      	b.n	8010dd2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	795b      	ldrb	r3, [r3, #5]
 8010cd0:	2be0      	cmp	r3, #224	; 0xe0
 8010cd2:	d16c      	bne.n	8010dae <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	799b      	ldrb	r3, [r3, #6]
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d16a      	bne.n	8010db2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d004      	beq.n	8010cf0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	79db      	ldrb	r3, [r3, #7]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d104      	bne.n	8010cf8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 8010cee:	e065      	b.n	8010dbc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	79db      	ldrb	r3, [r3, #7]
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	d15e      	bne.n	8010db6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	789a      	ldrb	r2, [r3, #2]
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	78da      	ldrb	r2, [r3, #3]
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	79da      	ldrb	r2, [r3, #7]
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 8010d1e:	e04d      	b.n	8010dbc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	3310      	adds	r3, #16
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	68b9      	ldr	r1, [r7, #8]
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f003 fb73 	bl	8014414 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	f083 0301 	eor.w	r3, r3, #1
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d001      	beq.n	8010d3e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	e049      	b.n	8010dd2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d038      	beq.n	8010dba <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d034      	beq.n	8010dba <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	6858      	ldr	r0, [r3, #4]
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	685b      	ldr	r3, [r3, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	681c      	ldr	r4, [r3, #0]
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010d74:	68fa      	ldr	r2, [r7, #12]
 8010d76:	3220      	adds	r2, #32
 8010d78:	9201      	str	r2, [sp, #4]
 8010d7a:	9300      	str	r3, [sp, #0]
 8010d7c:	4633      	mov	r3, r6
 8010d7e:	462a      	mov	r2, r5
 8010d80:	47a0      	blx	r4
                                        break;
 8010d82:	e01a      	b.n	8010dba <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	f103 0018 	add.w	r0, r3, #24
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	3b02      	subs	r3, #2
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	68b9      	ldr	r1, [r7, #8]
 8010d9a:	f7fc fe1e 	bl	800d9da <_ZN11ByteSkipper4SkipEPPhPtt>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	f083 0301 	eor.w	r3, r3, #1
 8010da4:	b2db      	uxtb	r3, r3
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d008      	beq.n	8010dbc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 8010daa:	2300      	movs	r3, #0
 8010dac:	e011      	b.n	8010dd2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 8010dae:	bf00      	nop
 8010db0:	e004      	b.n	8010dbc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 8010db2:	bf00      	nop
 8010db4:	e002      	b.n	8010dbc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 8010db6:	bf00      	nop
 8010db8:	e000      	b.n	8010dbc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 8010dba:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	f103 0220 	add.w	r2, r3, #32
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 8010dd0:	2301      	movs	r3, #1
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	371c      	adds	r7, #28
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dda:	bf00      	nop

08010ddc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8010ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dde:	b089      	sub	sp, #36	; 0x24
 8010de0:	af02      	add	r7, sp, #8
 8010de2:	60f8      	str	r0, [r7, #12]
 8010de4:	60b9      	str	r1, [r7, #8]
 8010de6:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	3320      	adds	r3, #32
 8010dec:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	3320      	adds	r3, #32
 8010df2:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010dfa:	2b04      	cmp	r3, #4
 8010dfc:	f200 815e 	bhi.w	80110bc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8010e00:	a201      	add	r2, pc, #4	; (adr r2, 8010e08 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 8010e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e06:	bf00      	nop
 8010e08:	08010e1d 	.word	0x08010e1d
 8010e0c:	08010e3d 	.word	0x08010e3d
 8010e10:	08010e7f 	.word	0x08010e7f
 8010e14:	08010e93 	.word	0x08010e93
 8010e18:	08010f57 	.word	0x08010f57
                        theBuffer.valueSize = 2;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	2202      	movs	r2, #2
 8010e20:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	f103 0210 	add.w	r2, r3, #16
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	3308      	adds	r3, #8
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	4610      	mov	r0, r2
 8010e30:	f7fc fd94 	bl	800d95c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	2201      	movs	r2, #1
 8010e38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	3310      	adds	r3, #16
 8010e40:	687a      	ldr	r2, [r7, #4]
 8010e42:	68b9      	ldr	r1, [r7, #8]
 8010e44:	4618      	mov	r0, r3
 8010e46:	f003 fae5 	bl	8014414 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	f083 0301 	eor.w	r3, r3, #1
 8010e50:	b2db      	uxtb	r3, r3
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d001      	beq.n	8010e5a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 8010e56:	2300      	movs	r3, #0
 8010e58:	e131      	b.n	80110be <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8010e60:	781a      	ldrb	r2, [r3, #0]
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8010e6e:	785a      	ldrb	r2, [r3, #1]
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	2202      	movs	r2, #2
 8010e7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	3320      	adds	r3, #32
 8010e82:	1c9a      	adds	r2, r3, #2
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	2203      	movs	r2, #3
 8010e8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010e98:	3b02      	subs	r3, #2
 8010e9a:	2b1f      	cmp	r3, #31
 8010e9c:	d847      	bhi.n	8010f2e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8010e9e:	a201      	add	r2, pc, #4	; (adr r2, 8010ea4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8010ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea4:	08010f2f 	.word	0x08010f2f
 8010ea8:	08010f2f 	.word	0x08010f2f
 8010eac:	08010f25 	.word	0x08010f25
 8010eb0:	08010f2f 	.word	0x08010f2f
 8010eb4:	08010f2f 	.word	0x08010f2f
 8010eb8:	08010f2f 	.word	0x08010f2f
 8010ebc:	08010f2f 	.word	0x08010f2f
 8010ec0:	08010f2f 	.word	0x08010f2f
 8010ec4:	08010f2f 	.word	0x08010f2f
 8010ec8:	08010f2f 	.word	0x08010f2f
 8010ecc:	08010f2f 	.word	0x08010f2f
 8010ed0:	08010f2f 	.word	0x08010f2f
 8010ed4:	08010f2f 	.word	0x08010f2f
 8010ed8:	08010f2f 	.word	0x08010f2f
 8010edc:	08010f2f 	.word	0x08010f2f
 8010ee0:	08010f2f 	.word	0x08010f2f
 8010ee4:	08010f2f 	.word	0x08010f2f
 8010ee8:	08010f2f 	.word	0x08010f2f
 8010eec:	08010f2f 	.word	0x08010f2f
 8010ef0:	08010f2f 	.word	0x08010f2f
 8010ef4:	08010f2f 	.word	0x08010f2f
 8010ef8:	08010f2f 	.word	0x08010f2f
 8010efc:	08010f2f 	.word	0x08010f2f
 8010f00:	08010f2f 	.word	0x08010f2f
 8010f04:	08010f2f 	.word	0x08010f2f
 8010f08:	08010f2f 	.word	0x08010f2f
 8010f0c:	08010f2f 	.word	0x08010f2f
 8010f10:	08010f2f 	.word	0x08010f2f
 8010f14:	08010f2f 	.word	0x08010f2f
 8010f18:	08010f2f 	.word	0x08010f2f
 8010f1c:	08010f2f 	.word	0x08010f2f
 8010f20:	08010f2f 	.word	0x08010f2f
                                        isGoodInterface = false;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	2200      	movs	r2, #0
 8010f28:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 8010f2c:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010f34:	3b02      	subs	r3, #2
 8010f36:	b2da      	uxtb	r2, r3
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	f103 0210 	add.w	r2, r3, #16
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	3308      	adds	r3, #8
 8010f46:	4619      	mov	r1, r3
 8010f48:	4610      	mov	r0, r2
 8010f4a:	f7fc fd07 	bl	800d95c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2204      	movs	r2, #4
 8010f52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010f5c:	2b05      	cmp	r3, #5
 8010f5e:	d055      	beq.n	801100c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 8010f60:	2b05      	cmp	r3, #5
 8010f62:	f300 8085 	bgt.w	8011070 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 8010f66:	2b02      	cmp	r3, #2
 8010f68:	d002      	beq.n	8010f70 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 8010f6a:	2b04      	cmp	r3, #4
 8010f6c:	d015      	beq.n	8010f9a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 8010f6e:	e07f      	b.n	8011070 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	3310      	adds	r3, #16
 8010f74:	687a      	ldr	r2, [r7, #4]
 8010f76:	68b9      	ldr	r1, [r7, #8]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f003 fa4b 	bl	8014414 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	f083 0301 	eor.w	r3, r3, #1
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d001      	beq.n	8010f8e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	e097      	b.n	80110be <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	795a      	ldrb	r2, [r3, #5]
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 8010f98:	e086      	b.n	80110a8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	3310      	adds	r3, #16
 8010f9e:	687a      	ldr	r2, [r7, #4]
 8010fa0:	68b9      	ldr	r1, [r7, #8]
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f003 fa36 	bl	8014414 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	f083 0301 	eor.w	r3, r3, #1
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d001      	beq.n	8010fb8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	e082      	b.n	80110be <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 8010fb8:	693b      	ldr	r3, [r7, #16]
 8010fba:	795b      	ldrb	r3, [r3, #5]
 8010fbc:	2bff      	cmp	r3, #255	; 0xff
 8010fbe:	d16c      	bne.n	801109a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	799b      	ldrb	r3, [r3, #6]
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d16a      	bne.n	801109e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d004      	beq.n	8010fdc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	79db      	ldrb	r3, [r3, #7]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d104      	bne.n	8010fe4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 8010fda:	e065      	b.n	80110a8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	79db      	ldrb	r3, [r3, #7]
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d15e      	bne.n	80110a2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	789a      	ldrb	r2, [r3, #2]
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	78da      	ldrb	r2, [r3, #3]
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	79da      	ldrb	r2, [r3, #7]
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 801100a:	e04d      	b.n	80110a8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	3310      	adds	r3, #16
 8011010:	687a      	ldr	r2, [r7, #4]
 8011012:	68b9      	ldr	r1, [r7, #8]
 8011014:	4618      	mov	r0, r3
 8011016:	f003 f9fd 	bl	8014414 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801101a:	4603      	mov	r3, r0
 801101c:	f083 0301 	eor.w	r3, r3, #1
 8011020:	b2db      	uxtb	r3, r3
 8011022:	2b00      	cmp	r3, #0
 8011024:	d001      	beq.n	801102a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 8011026:	2300      	movs	r3, #0
 8011028:	e049      	b.n	80110be <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011030:	2b00      	cmp	r3, #0
 8011032:	d038      	beq.n	80110a6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d034      	beq.n	80110a6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	6858      	ldr	r0, [r3, #4]
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	681c      	ldr	r4, [r3, #0]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011060:	68fa      	ldr	r2, [r7, #12]
 8011062:	3220      	adds	r2, #32
 8011064:	9201      	str	r2, [sp, #4]
 8011066:	9300      	str	r3, [sp, #0]
 8011068:	4633      	mov	r3, r6
 801106a:	462a      	mov	r2, r5
 801106c:	47a0      	blx	r4
                                        break;
 801106e:	e01a      	b.n	80110a6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	f103 0018 	add.w	r0, r3, #24
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801107c:	b29b      	uxth	r3, r3
 801107e:	3b02      	subs	r3, #2
 8011080:	b29b      	uxth	r3, r3
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	68b9      	ldr	r1, [r7, #8]
 8011086:	f7fc fca8 	bl	800d9da <_ZN11ByteSkipper4SkipEPPhPtt>
 801108a:	4603      	mov	r3, r0
 801108c:	f083 0301 	eor.w	r3, r3, #1
 8011090:	b2db      	uxtb	r3, r3
 8011092:	2b00      	cmp	r3, #0
 8011094:	d008      	beq.n	80110a8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 8011096:	2300      	movs	r3, #0
 8011098:	e011      	b.n	80110be <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 801109a:	bf00      	nop
 801109c:	e004      	b.n	80110a8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 801109e:	bf00      	nop
 80110a0:	e002      	b.n	80110a8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 80110a2:	bf00      	nop
 80110a4:	e000      	b.n	80110a8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 80110a6:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f103 0220 	add.w	r2, r3, #32
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	2200      	movs	r2, #0
 80110b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 80110bc:	2301      	movs	r3, #1
}
 80110be:	4618      	mov	r0, r3
 80110c0:	371c      	adds	r7, #28
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110c6:	bf00      	nop

080110c8 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 80110c8:	b480      	push	{r7}
 80110ca:	b085      	sub	sp, #20
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 80110d2:	2300      	movs	r3, #0
 80110d4:	73fb      	strb	r3, [r7, #15]
 80110d6:	7bfb      	ldrb	r3, [r7, #15]
 80110d8:	2b03      	cmp	r3, #3
 80110da:	d815      	bhi.n	8011108 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 80110dc:	7bfb      	ldrb	r3, [r7, #15]
 80110de:	687a      	ldr	r2, [r7, #4]
 80110e0:	3318      	adds	r3, #24
 80110e2:	009b      	lsls	r3, r3, #2
 80110e4:	4413      	add	r3, r2
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d109      	bne.n	8011100 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 80110ec:	7bfb      	ldrb	r3, [r7, #15]
 80110ee:	687a      	ldr	r2, [r7, #4]
 80110f0:	3318      	adds	r3, #24
 80110f2:	009b      	lsls	r3, r3, #2
 80110f4:	4413      	add	r3, r2
 80110f6:	683a      	ldr	r2, [r7, #0]
 80110f8:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 80110fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110fe:	e005      	b.n	801110c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8011100:	7bfb      	ldrb	r3, [r7, #15]
 8011102:	3301      	adds	r3, #1
 8011104:	73fb      	strb	r3, [r7, #15]
 8011106:	e7e6      	b.n	80110d6 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 8011108:	f04f 33ff 	mov.w	r3, #4294967295
        };
 801110c:	4618      	mov	r0, r3
 801110e:	3714      	adds	r7, #20
 8011110:	46bd      	mov	sp, r7
 8011112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011116:	4770      	bx	lr

08011118 <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	6039      	str	r1, [r7, #0]
 8011122:	4a0a      	ldr	r2, [pc, #40]	; (801114c <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	601a      	str	r2, [r3, #0]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	683a      	ldr	r2, [r7, #0]
 801112c:	609a      	str	r2, [r3, #8]
                if(pBtd)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	689b      	ldr	r3, [r3, #8]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d005      	beq.n	8011142 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	689b      	ldr	r3, [r3, #8]
 801113a:	6879      	ldr	r1, [r7, #4]
 801113c:	4618      	mov	r0, r3
 801113e:	f7ff ffc3 	bl	80110c8 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	4618      	mov	r0, r3
 8011146:	3708      	adds	r7, #8
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	08016554 	.word	0x08016554

08011150 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 8011150:	b480      	push	{r7}
 8011152:	b085      	sub	sp, #20
 8011154:	af00      	add	r7, sp, #0
 8011156:	60f8      	str	r0, [r7, #12]
 8011158:	60b9      	str	r1, [r7, #8]
 801115a:	4613      	mov	r3, r2
 801115c:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	461a      	mov	r2, r3
 8011164:	88fb      	ldrh	r3, [r7, #6]
 8011166:	b2db      	uxtb	r3, r3
 8011168:	429a      	cmp	r2, r3
 801116a:	d10b      	bne.n	8011184 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	3301      	adds	r3, #1
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	461a      	mov	r2, r3
 8011174:	88fb      	ldrh	r3, [r7, #6]
 8011176:	121b      	asrs	r3, r3, #8
 8011178:	f043 0320 	orr.w	r3, r3, #32
 801117c:	429a      	cmp	r2, r3
 801117e:	d101      	bne.n	8011184 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 8011180:	2301      	movs	r3, #1
 8011182:	e000      	b.n	8011186 <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 8011184:	2300      	movs	r3, #0
        }
 8011186:	4618      	mov	r0, r3
 8011188:	3714      	adds	r7, #20
 801118a:	46bd      	mov	sp, r7
 801118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011190:	4770      	bx	lr

08011192 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 8011192:	b480      	push	{r7}
 8011194:	b085      	sub	sp, #20
 8011196:	af00      	add	r7, sp, #0
 8011198:	60f8      	str	r0, [r7, #12]
 801119a:	460b      	mov	r3, r1
 801119c:	607a      	str	r2, [r7, #4]
 801119e:	72fb      	strb	r3, [r7, #11]
                return;
 80111a0:	bf00      	nop
        };
 80111a2:	3714      	adds	r7, #20
 80111a4:	46bd      	mov	sp, r7
 80111a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111aa:	4770      	bx	lr

080111ac <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 80111ac:	b480      	push	{r7}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
                return;
 80111b4:	bf00      	nop
        };
 80111b6:	370c      	adds	r7, #12
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr

080111c0 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 80111c0:	b480      	push	{r7}
 80111c2:	b083      	sub	sp, #12
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
                return;
 80111c8:	bf00      	nop
        }
 80111ca:	370c      	adds	r7, #12
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b086      	sub	sp, #24
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	603b      	str	r3, [r7, #0]
 80111e0:	4613      	mov	r3, r2
 80111e2:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	68b9      	ldr	r1, [r7, #8]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7ff ff95 	bl	8011118 <_ZN16BluetoothServiceC1EP3BTD>
 80111ee:	4a1f      	ldr	r2, [pc, #124]	; (801126c <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	601a      	str	r2, [r3, #0]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2200      	movs	r2, #0
 80111f8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 80111fc:	2300      	movs	r3, #0
 80111fe:	75fb      	strb	r3, [r7, #23]
 8011200:	7dfb      	ldrb	r3, [r7, #23]
 8011202:	2b01      	cmp	r3, #1
 8011204:	d809      	bhi.n	801121a <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 8011206:	7dfa      	ldrb	r2, [r7, #23]
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	3208      	adds	r2, #8
 801120c:	2100      	movs	r1, #0
 801120e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8011212:	7dfb      	ldrb	r3, [r7, #23]
 8011214:	3301      	adds	r3, #1
 8011216:	75fb      	strb	r3, [r7, #23]
 8011218:	e7f2      	b.n	8011200 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	689b      	ldr	r3, [r3, #8]
 801121e:	79fa      	ldrb	r2, [r7, #7]
 8011220:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	689b      	ldr	r3, [r3, #8]
 8011228:	683a      	ldr	r2, [r7, #0]
 801122a:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	2250      	movs	r2, #80	; 0x50
 8011230:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2200      	movs	r2, #0
 8011238:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2270      	movs	r2, #112	; 0x70
 8011240:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2200      	movs	r2, #0
 8011248:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2271      	movs	r2, #113	; 0x71
 8011250:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2200      	movs	r2, #0
 8011258:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 801125c:	68f8      	ldr	r0, [r7, #12]
 801125e:	f000 f807 	bl	8011270 <_ZN5BTHID5ResetEv>
}
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	4618      	mov	r0, r3
 8011266:	3718      	adds	r7, #24
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	08016528 	.word	0x08016528

08011270 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
        connected = false;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2200      	movs	r2, #0
 801127c:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	2200      	movs	r2, #0
 8011282:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2200      	movs	r2, #0
 801128a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2200      	movs	r2, #0
 8011292:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	220a      	movs	r2, #10
 8011298:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2200      	movs	r2, #0
 801129e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	3320      	adds	r3, #32
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	4798      	blx	r3
}
 80112ae:	bf00      	nop
 80112b0:	3708      	adds	r7, #8
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}

080112b6 <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 80112b6:	b590      	push	{r4, r7, lr}
 80112b8:	b085      	sub	sp, #20
 80112ba:	af02      	add	r7, sp, #8
 80112bc:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d014      	beq.n	80112f2 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6898      	ldr	r0, [r3, #8]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	8999      	ldrh	r1, [r3, #12]
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	7d1b      	ldrb	r3, [r3, #20]
 80112d4:	3301      	adds	r3, #1
 80112d6:	b2da      	uxtb	r2, r3
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	751a      	strb	r2, [r3, #20]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	7d1a      	ldrb	r2, [r3, #20]
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f103 041b 	add.w	r4, r3, #27
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	336f      	adds	r3, #111	; 0x6f
 80112ea:	9300      	str	r3, [sp, #0]
 80112ec:	4623      	mov	r3, r4
 80112ee:	f7ff f986 	bl	80105fe <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6898      	ldr	r0, [r3, #8]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	8999      	ldrh	r1, [r3, #12]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	7d1b      	ldrb	r3, [r3, #20]
 80112fe:	3301      	adds	r3, #1
 8011300:	b2da      	uxtb	r2, r3
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	751a      	strb	r2, [r3, #20]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	7d1a      	ldrb	r2, [r3, #20]
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f103 0418 	add.w	r4, r3, #24
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	336d      	adds	r3, #109	; 0x6d
 8011314:	9300      	str	r3, [sp, #0]
 8011316:	4623      	mov	r3, r4
 8011318:	f7ff f971 	bl	80105fe <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	3308      	adds	r3, #8
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	220e      	movs	r2, #14
 801132c:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2209      	movs	r2, #9
 8011332:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 8011336:	bf00      	nop
 8011338:	370c      	adds	r7, #12
 801133a:	46bd      	mov	sp, r7
 801133c:	bd90      	pop	{r4, r7, pc}
	...

08011340 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 8011340:	b590      	push	{r4, r7, lr}
 8011342:	b087      	sub	sp, #28
 8011344:	af02      	add	r7, sp, #8
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	6039      	str	r1, [r7, #0]
        if(!connected) {
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	7d5b      	ldrb	r3, [r3, #21]
 801134e:	f083 0301 	eor.w	r3, r3, #1
 8011352:	b2db      	uxtb	r3, r3
 8011354:	2b00      	cmp	r3, #0
 8011356:	d023      	beq.n	80113a0 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	3308      	adds	r3, #8
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	2b02      	cmp	r3, #2
 8011360:	d11e      	bne.n	80113a0 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	330c      	adds	r3, #12
 8011366:	781b      	ldrb	r3, [r3, #0]
 8011368:	461a      	mov	r2, r3
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	330d      	adds	r3, #13
 801136e:	781b      	ldrb	r3, [r3, #0]
 8011370:	021b      	lsls	r3, r3, #8
 8011372:	4313      	orrs	r3, r2
 8011374:	2b01      	cmp	r3, #1
 8011376:	d113      	bne.n	80113a0 <_ZN5BTHID7ACLDataEPh+0x60>
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	689b      	ldr	r3, [r3, #8]
 801137c:	7a9b      	ldrb	r3, [r3, #10]
 801137e:	f083 0301 	eor.w	r3, r3, #1
 8011382:	b2db      	uxtb	r3, r3
 8011384:	2b00      	cmp	r3, #0
 8011386:	d00b      	beq.n	80113a0 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	689b      	ldr	r3, [r3, #8]
 801138c:	2201      	movs	r2, #1
 801138e:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	689b      	ldr	r3, [r3, #8]
 8011394:	8b5a      	ldrh	r2, [r3, #26]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	220a      	movs	r2, #10
 801139e:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	689b      	ldr	r3, [r3, #8]
 80113a4:	7a5b      	ldrb	r3, [r3, #9]
 80113a6:	f083 0301 	eor.w	r3, r3, #1
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d03a      	beq.n	8011426 <_ZN5BTHID7ACLDataEPh+0xe6>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	689b      	ldr	r3, [r3, #8]
 80113b4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d034      	beq.n	8011426 <_ZN5BTHID7ACLDataEPh+0xe6>
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	7d5b      	ldrb	r3, [r3, #21]
 80113c0:	f083 0301 	eor.w	r3, r3, #1
 80113c4:	b2db      	uxtb	r3, r3
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d02d      	beq.n	8011426 <_ZN5BTHID7ACLDataEPh+0xe6>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80113d0:	f083 0301 	eor.w	r3, r3, #1
 80113d4:	b2db      	uxtb	r3, r3
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d025      	beq.n	8011426 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	3308      	adds	r3, #8
 80113de:	781b      	ldrb	r3, [r3, #0]
 80113e0:	2b02      	cmp	r3, #2
 80113e2:	d120      	bne.n	8011426 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	330c      	adds	r3, #12
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	461a      	mov	r2, r3
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	330d      	adds	r3, #13
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	021b      	lsls	r3, r3, #8
 80113f4:	4313      	orrs	r3, r2
 80113f6:	2b11      	cmp	r3, #17
 80113f8:	d115      	bne.n	8011426 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	689b      	ldr	r3, [r3, #8]
 80113fe:	2200      	movs	r2, #0
 8011400:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	689b      	ldr	r3, [r3, #8]
 8011408:	2201      	movs	r2, #1
 801140a:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2201      	movs	r2, #1
 8011410:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	689b      	ldr	r3, [r3, #8]
 8011418:	8b5a      	ldrh	r2, [r3, #26]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2200      	movs	r2, #0
 8011422:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	899b      	ldrh	r3, [r3, #12]
 801142c:	461a      	mov	r2, r3
 801142e:	6839      	ldr	r1, [r7, #0]
 8011430:	f7ff fe8e 	bl	8011150 <_ZN16BluetoothService14checkHciHandleEPht>
 8011434:	4603      	mov	r3, r0
 8011436:	2b00      	cmp	r3, #0
 8011438:	f000 8440 	beq.w	8011cbc <_ZN5BTHID7ACLDataEPh+0x97c>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	3306      	adds	r3, #6
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	461a      	mov	r2, r3
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	3307      	adds	r3, #7
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	021b      	lsls	r3, r3, #8
 801144c:	4313      	orrs	r3, r2
 801144e:	2b01      	cmp	r3, #1
 8011450:	f040 82f8 	bne.w	8011a44 <_ZN5BTHID7ACLDataEPh+0x704>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	3308      	adds	r3, #8
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	2b01      	cmp	r3, #1
 801145c:	d142      	bne.n	80114e4 <_ZN5BTHID7ACLDataEPh+0x1a4>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nL2CAP Command Rejected - Reason: "), 0x80);
 801145e:	2180      	movs	r1, #128	; 0x80
 8011460:	489c      	ldr	r0, [pc, #624]	; (80116d4 <_ZN5BTHID7ACLDataEPh+0x394>)
 8011462:	f002 ff19 	bl	8014298 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[13], 0x80);
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	330d      	adds	r3, #13
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	2180      	movs	r1, #128	; 0x80
 801146e:	4618      	mov	r0, r3
 8011470:	f7ff fa0f 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 8011474:	2180      	movs	r1, #128	; 0x80
 8011476:	4898      	ldr	r0, [pc, #608]	; (80116d8 <_ZN5BTHID7ACLDataEPh+0x398>)
 8011478:	f002 ff0e 	bl	8014298 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[12], 0x80);
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	330c      	adds	r3, #12
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	2180      	movs	r1, #128	; 0x80
 8011484:	4618      	mov	r0, r3
 8011486:	f7ff fa04 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 801148a:	2180      	movs	r1, #128	; 0x80
 801148c:	4892      	ldr	r0, [pc, #584]	; (80116d8 <_ZN5BTHID7ACLDataEPh+0x398>)
 801148e:	f002 ff03 	bl	8014298 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[17], 0x80);
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	3311      	adds	r3, #17
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	2180      	movs	r1, #128	; 0x80
 801149a:	4618      	mov	r0, r3
 801149c:	f7ff f9f9 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 80114a0:	2180      	movs	r1, #128	; 0x80
 80114a2:	488d      	ldr	r0, [pc, #564]	; (80116d8 <_ZN5BTHID7ACLDataEPh+0x398>)
 80114a4:	f002 fef8 	bl	8014298 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[16], 0x80);
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	3310      	adds	r3, #16
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	2180      	movs	r1, #128	; 0x80
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7ff f9ee 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 80114b6:	2180      	movs	r1, #128	; 0x80
 80114b8:	4887      	ldr	r0, [pc, #540]	; (80116d8 <_ZN5BTHID7ACLDataEPh+0x398>)
 80114ba:	f002 feed 	bl	8014298 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	330f      	adds	r3, #15
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	2180      	movs	r1, #128	; 0x80
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7ff f9e3 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 80114cc:	2180      	movs	r1, #128	; 0x80
 80114ce:	4882      	ldr	r0, [pc, #520]	; (80116d8 <_ZN5BTHID7ACLDataEPh+0x398>)
 80114d0:	f002 fee2 	bl	8014298 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	330e      	adds	r3, #14
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	2180      	movs	r1, #128	; 0x80
 80114dc:	4618      	mov	r0, r3
 80114de:	f7ff f9d8 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
 80114e2:	e3e5      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	3308      	adds	r3, #8
 80114e8:	781b      	ldrb	r3, [r3, #0]
 80114ea:	2b03      	cmp	r3, #3
 80114ec:	f040 8091 	bne.w	8011612 <_ZN5BTHID7ACLDataEPh+0x2d2>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	3310      	adds	r3, #16
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	461a      	mov	r2, r3
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	3311      	adds	r3, #17
 80114fc:	781b      	ldrb	r3, [r3, #0]
 80114fe:	021b      	lsls	r3, r3, #8
 8011500:	4313      	orrs	r3, r2
 8011502:	2b00      	cmp	r3, #0
 8011504:	f040 83d4 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	3312      	adds	r3, #18
 801150c:	781b      	ldrb	r3, [r3, #0]
 801150e:	461a      	mov	r2, r3
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	3313      	adds	r3, #19
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	021b      	lsls	r3, r3, #8
 8011518:	4313      	orrs	r3, r2
 801151a:	2b00      	cmp	r3, #0
 801151c:	f040 83c8 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	330e      	adds	r3, #14
 8011524:	781a      	ldrb	r2, [r3, #0]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801152c:	429a      	cmp	r2, r3
 801152e:	d128      	bne.n	8011582 <_ZN5BTHID7ACLDataEPh+0x242>
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	330f      	adds	r3, #15
 8011534:	781a      	ldrb	r2, [r3, #0]
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801153c:	429a      	cmp	r2, r3
 801153e:	d120      	bne.n	8011582 <_ZN5BTHID7ACLDataEPh+0x242>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	7a5a      	ldrb	r2, [r3, #9]
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	7b1a      	ldrb	r2, [r3, #12]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	7b5a      	ldrb	r2, [r3, #13]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
 8011558:	2180      	movs	r1, #128	; 0x80
 801155a:	4860      	ldr	r0, [pc, #384]	; (80116dc <_ZN5BTHID7ACLDataEPh+0x39c>)
 801155c:	f002 fe9c 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                                identifier++;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	7d1b      	ldrb	r3, [r3, #20]
 8011564:	3301      	adds	r3, #1
 8011566:	b2da      	uxtb	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6898      	ldr	r0, [r3, #8]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	8999      	ldrh	r1, [r3, #12]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	7d1a      	ldrb	r2, [r3, #20]
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	331b      	adds	r3, #27
 801157c:	f7fe ffa1 	bl	80104c2 <_ZN3BTD20l2cap_config_requestEthPh>
 8011580:	e396      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	330e      	adds	r3, #14
 8011586:	781a      	ldrb	r2, [r3, #0]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 801158e:	429a      	cmp	r2, r3
 8011590:	d11a      	bne.n	80115c8 <_ZN5BTHID7ACLDataEPh+0x288>
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	330f      	adds	r3, #15
 8011596:	781a      	ldrb	r2, [r3, #0]
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801159e:	429a      	cmp	r2, r3
 80115a0:	d112      	bne.n	80115c8 <_ZN5BTHID7ACLDataEPh+0x288>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	7a5a      	ldrb	r2, [r3, #9]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	7b1a      	ldrb	r2, [r3, #12]
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	7b5a      	ldrb	r2, [r3, #13]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	691b      	ldr	r3, [r3, #16]
 80115be:	f043 0204 	orr.w	r2, r3, #4
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	611a      	str	r2, [r3, #16]
 80115c6:	e373      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	330e      	adds	r3, #14
 80115cc:	781a      	ldrb	r2, [r3, #0]
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80115d4:	429a      	cmp	r2, r3
 80115d6:	f040 836b 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	330f      	adds	r3, #15
 80115de:	781a      	ldrb	r2, [r3, #0]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80115e6:	429a      	cmp	r2, r3
 80115e8:	f040 8362 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	7a5a      	ldrb	r2, [r3, #9]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	7b1a      	ldrb	r2, [r3, #12]
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	7b5a      	ldrb	r2, [r3, #13]
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	691b      	ldr	r3, [r3, #16]
 8011608:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	611a      	str	r2, [r3, #16]
 8011610:	e34e      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	3308      	adds	r3, #8
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	2b02      	cmp	r3, #2
 801161a:	d161      	bne.n	80116e0 <_ZN5BTHID7ACLDataEPh+0x3a0>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	330c      	adds	r3, #12
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	461a      	mov	r2, r3
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	330d      	adds	r3, #13
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	021b      	lsls	r3, r3, #8
 801162c:	4313      	orrs	r3, r2
 801162e:	2b01      	cmp	r3, #1
 8011630:	d112      	bne.n	8011658 <_ZN5BTHID7ACLDataEPh+0x318>
                                        identifier = l2capinbuf[9];
 8011632:	683b      	ldr	r3, [r7, #0]
 8011634:	7a5a      	ldrb	r2, [r3, #9]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	7b9a      	ldrb	r2, [r3, #14]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	7bda      	ldrb	r2, [r3, #15]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	691b      	ldr	r3, [r3, #16]
 801164e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	611a      	str	r2, [r3, #16]
 8011656:	e32b      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	330c      	adds	r3, #12
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	461a      	mov	r2, r3
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	330d      	adds	r3, #13
 8011664:	781b      	ldrb	r3, [r3, #0]
 8011666:	021b      	lsls	r3, r3, #8
 8011668:	4313      	orrs	r3, r2
 801166a:	2b11      	cmp	r3, #17
 801166c:	d112      	bne.n	8011694 <_ZN5BTHID7ACLDataEPh+0x354>
                                        identifier = l2capinbuf[9];
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	7a5a      	ldrb	r2, [r3, #9]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	7b9a      	ldrb	r2, [r3, #14]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	7bda      	ldrb	r2, [r3, #15]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	691b      	ldr	r3, [r3, #16]
 801168a:	f043 0201 	orr.w	r2, r3, #1
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	611a      	str	r2, [r3, #16]
 8011692:	e30d      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	330c      	adds	r3, #12
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	461a      	mov	r2, r3
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	330d      	adds	r3, #13
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	021b      	lsls	r3, r3, #8
 80116a4:	4313      	orrs	r3, r2
 80116a6:	2b13      	cmp	r3, #19
 80116a8:	f040 8302 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                        identifier = l2capinbuf[9];
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	7a5a      	ldrb	r2, [r3, #9]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	7b9a      	ldrb	r2, [r3, #14]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	7bda      	ldrb	r2, [r3, #15]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	691b      	ldr	r3, [r3, #16]
 80116c8:	f043 0210 	orr.w	r2, r3, #16
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	611a      	str	r2, [r3, #16]
 80116d0:	e2ee      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
 80116d2:	bf00      	nop
 80116d4:	08015160 	.word	0x08015160
 80116d8:	08015184 	.word	0x08015184
 80116dc:	08015188 	.word	0x08015188
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	3308      	adds	r3, #8
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	2b05      	cmp	r3, #5
 80116e8:	d15e      	bne.n	80117a8 <_ZN5BTHID7ACLDataEPh+0x468>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	3310      	adds	r3, #16
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	461a      	mov	r2, r3
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	3311      	adds	r3, #17
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	021b      	lsls	r3, r3, #8
 80116fa:	4313      	orrs	r3, r2
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	f040 82d7 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	330c      	adds	r3, #12
 8011706:	781a      	ldrb	r2, [r3, #0]
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801170e:	429a      	cmp	r2, r3
 8011710:	d112      	bne.n	8011738 <_ZN5BTHID7ACLDataEPh+0x3f8>
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	330d      	adds	r3, #13
 8011716:	781a      	ldrb	r2, [r3, #0]
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801171e:	429a      	cmp	r2, r3
 8011720:	d10a      	bne.n	8011738 <_ZN5BTHID7ACLDataEPh+0x3f8>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	7a5a      	ldrb	r2, [r3, #9]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	691b      	ldr	r3, [r3, #16]
 801172e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	611a      	str	r2, [r3, #16]
 8011736:	e2bb      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	330c      	adds	r3, #12
 801173c:	781a      	ldrb	r2, [r3, #0]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8011744:	429a      	cmp	r2, r3
 8011746:	d112      	bne.n	801176e <_ZN5BTHID7ACLDataEPh+0x42e>
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	330d      	adds	r3, #13
 801174c:	781a      	ldrb	r2, [r3, #0]
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011754:	429a      	cmp	r2, r3
 8011756:	d10a      	bne.n	801176e <_ZN5BTHID7ACLDataEPh+0x42e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	7a5a      	ldrb	r2, [r3, #9]
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	691b      	ldr	r3, [r3, #16]
 8011764:	f043 0202 	orr.w	r2, r3, #2
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	611a      	str	r2, [r3, #16]
 801176c:	e2a0      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	330c      	adds	r3, #12
 8011772:	781a      	ldrb	r2, [r3, #0]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801177a:	429a      	cmp	r2, r3
 801177c:	f040 8298 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	330d      	adds	r3, #13
 8011784:	781a      	ldrb	r2, [r3, #0]
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 801178c:	429a      	cmp	r2, r3
 801178e:	f040 828f 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	7a5a      	ldrb	r2, [r3, #9]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	691b      	ldr	r3, [r3, #16]
 801179e:	f043 0220 	orr.w	r2, r3, #32
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	611a      	str	r2, [r3, #16]
 80117a6:	e283      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	3308      	adds	r3, #8
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	2b04      	cmp	r3, #4
 80117b0:	d155      	bne.n	801185e <_ZN5BTHID7ACLDataEPh+0x51e>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	330c      	adds	r3, #12
 80117b6:	781a      	ldrb	r2, [r3, #0]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80117be:	429a      	cmp	r2, r3
 80117c0:	d113      	bne.n	80117ea <_ZN5BTHID7ACLDataEPh+0x4aa>
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	330d      	adds	r3, #13
 80117c6:	781a      	ldrb	r2, [r3, #0]
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d10b      	bne.n	80117ea <_ZN5BTHID7ACLDataEPh+0x4aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6898      	ldr	r0, [r3, #8]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	8999      	ldrh	r1, [r3, #12]
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	3309      	adds	r3, #9
 80117de:	781a      	ldrb	r2, [r3, #0]
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	331b      	adds	r3, #27
 80117e4:	f7fe feb8 	bl	8010558 <_ZN3BTD21l2cap_config_responseEthPh>
 80117e8:	e262      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	330c      	adds	r3, #12
 80117ee:	781a      	ldrb	r2, [r3, #0]
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d113      	bne.n	8011822 <_ZN5BTHID7ACLDataEPh+0x4e2>
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	330d      	adds	r3, #13
 80117fe:	781a      	ldrb	r2, [r3, #0]
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011806:	429a      	cmp	r2, r3
 8011808:	d10b      	bne.n	8011822 <_ZN5BTHID7ACLDataEPh+0x4e2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6898      	ldr	r0, [r3, #8]
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	8999      	ldrh	r1, [r3, #12]
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	3309      	adds	r3, #9
 8011816:	781a      	ldrb	r2, [r3, #0]
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	3316      	adds	r3, #22
 801181c:	f7fe fe9c 	bl	8010558 <_ZN3BTD21l2cap_config_responseEthPh>
 8011820:	e246      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	330c      	adds	r3, #12
 8011826:	781a      	ldrb	r2, [r3, #0]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801182e:	429a      	cmp	r2, r3
 8011830:	f040 823e 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	330d      	adds	r3, #13
 8011838:	781a      	ldrb	r2, [r3, #0]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8011840:	429a      	cmp	r2, r3
 8011842:	f040 8235 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6898      	ldr	r0, [r3, #8]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	8999      	ldrh	r1, [r3, #12]
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	3309      	adds	r3, #9
 8011852:	781a      	ldrb	r2, [r3, #0]
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	3318      	adds	r3, #24
 8011858:	f7fe fe7e 	bl	8010558 <_ZN3BTD21l2cap_config_responseEthPh>
 801185c:	e228      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	3308      	adds	r3, #8
 8011862:	781b      	ldrb	r3, [r3, #0]
 8011864:	2b06      	cmp	r3, #6
 8011866:	d17c      	bne.n	8011962 <_ZN5BTHID7ACLDataEPh+0x622>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	330c      	adds	r3, #12
 801186c:	781a      	ldrb	r2, [r3, #0]
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8011874:	429a      	cmp	r2, r3
 8011876:	d116      	bne.n	80118a6 <_ZN5BTHID7ACLDataEPh+0x566>
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	330d      	adds	r3, #13
 801187c:	781a      	ldrb	r2, [r3, #0]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8011884:	429a      	cmp	r2, r3
 8011886:	d10e      	bne.n	80118a6 <_ZN5BTHID7ACLDataEPh+0x566>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
 8011888:	2180      	movs	r1, #128	; 0x80
 801188a:	4893      	ldr	r0, [pc, #588]	; (8011ad8 <_ZN5BTHID7ACLDataEPh+0x798>)
 801188c:	f002 fd04 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                        identifier = l2capinbuf[9];
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	7a5a      	ldrb	r2, [r3, #9]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	691b      	ldr	r3, [r3, #16]
 801189c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	611a      	str	r2, [r3, #16]
 80118a4:	e204      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	330c      	adds	r3, #12
 80118aa:	781a      	ldrb	r2, [r3, #0]
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d125      	bne.n	8011902 <_ZN5BTHID7ACLDataEPh+0x5c2>
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	330d      	adds	r3, #13
 80118ba:	781a      	ldrb	r2, [r3, #0]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d11d      	bne.n	8011902 <_ZN5BTHID7ACLDataEPh+0x5c2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
 80118c6:	2180      	movs	r1, #128	; 0x80
 80118c8:	4884      	ldr	r0, [pc, #528]	; (8011adc <_ZN5BTHID7ACLDataEPh+0x79c>)
 80118ca:	f002 fce5 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                        identifier = l2capinbuf[9];
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	7a5a      	ldrb	r2, [r3, #9]
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6898      	ldr	r0, [r3, #8]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	8999      	ldrh	r1, [r3, #12]
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	7d1a      	ldrb	r2, [r3, #20]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	3316      	adds	r3, #22
 80118ec:	9300      	str	r3, [sp, #0]
 80118ee:	4623      	mov	r3, r4
 80118f0:	f7fe fec2 	bl	8010678 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	3308      	adds	r3, #8
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	4798      	blx	r3
 8011900:	e1d6      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	330c      	adds	r3, #12
 8011906:	781a      	ldrb	r2, [r3, #0]
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801190e:	429a      	cmp	r2, r3
 8011910:	f040 81ce 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	330d      	adds	r3, #13
 8011918:	781a      	ldrb	r2, [r3, #0]
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8011920:	429a      	cmp	r2, r3
 8011922:	f040 81c5 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
 8011926:	2180      	movs	r1, #128	; 0x80
 8011928:	486d      	ldr	r0, [pc, #436]	; (8011ae0 <_ZN5BTHID7ACLDataEPh+0x7a0>)
 801192a:	f002 fcb5 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                        identifier = l2capinbuf[9];
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	7a5a      	ldrb	r2, [r3, #9]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6898      	ldr	r0, [r3, #8]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	8999      	ldrh	r1, [r3, #12]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	7d1a      	ldrb	r2, [r3, #20]
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	3318      	adds	r3, #24
 801194c:	9300      	str	r3, [sp, #0]
 801194e:	4623      	mov	r3, r4
 8011950:	f7fe fe92 	bl	8010678 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	3308      	adds	r3, #8
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	4798      	blx	r3
 8011960:	e1a6      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	3308      	adds	r3, #8
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	2b07      	cmp	r3, #7
 801196a:	d14c      	bne.n	8011a06 <_ZN5BTHID7ACLDataEPh+0x6c6>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	330c      	adds	r3, #12
 8011970:	781a      	ldrb	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	7edb      	ldrb	r3, [r3, #27]
 8011976:	429a      	cmp	r2, r3
 8011978:	d111      	bne.n	801199e <_ZN5BTHID7ACLDataEPh+0x65e>
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	330d      	adds	r3, #13
 801197e:	781a      	ldrb	r2, [r3, #0]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	7f1b      	ldrb	r3, [r3, #28]
 8011984:	429a      	cmp	r2, r3
 8011986:	d10a      	bne.n	801199e <_ZN5BTHID7ACLDataEPh+0x65e>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	7a5a      	ldrb	r2, [r3, #9]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	691b      	ldr	r3, [r3, #16]
 8011994:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	611a      	str	r2, [r3, #16]
 801199c:	e188      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	330c      	adds	r3, #12
 80119a2:	781a      	ldrb	r2, [r3, #0]
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	7d9b      	ldrb	r3, [r3, #22]
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d111      	bne.n	80119d0 <_ZN5BTHID7ACLDataEPh+0x690>
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	330d      	adds	r3, #13
 80119b0:	781a      	ldrb	r2, [r3, #0]
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	7ddb      	ldrb	r3, [r3, #23]
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d10a      	bne.n	80119d0 <_ZN5BTHID7ACLDataEPh+0x690>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	7a5a      	ldrb	r2, [r3, #9]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	691b      	ldr	r3, [r3, #16]
 80119c6:	f043 0208 	orr.w	r2, r3, #8
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	611a      	str	r2, [r3, #16]
 80119ce:	e16f      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	330c      	adds	r3, #12
 80119d4:	781a      	ldrb	r2, [r3, #0]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	7e1b      	ldrb	r3, [r3, #24]
 80119da:	429a      	cmp	r2, r3
 80119dc:	f040 8168 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	330d      	adds	r3, #13
 80119e4:	781a      	ldrb	r2, [r3, #0]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	7e5b      	ldrb	r3, [r3, #25]
 80119ea:	429a      	cmp	r2, r3
 80119ec:	f040 8160 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	7a5a      	ldrb	r2, [r3, #9]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	691b      	ldr	r3, [r3, #16]
 80119fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	611a      	str	r2, [r3, #16]
 8011a04:	e154      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	3308      	adds	r3, #8
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	2b0a      	cmp	r3, #10
 8011a0e:	f040 814f 	bne.w	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
 8011a12:	2180      	movs	r1, #128	; 0x80
 8011a14:	4833      	ldr	r0, [pc, #204]	; (8011ae4 <_ZN5BTHID7ACLDataEPh+0x7a4>)
 8011a16:	f002 fc3f 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                identifier = l2capinbuf[9];
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	7a5a      	ldrb	r2, [r3, #9]
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6898      	ldr	r0, [r3, #8]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	8999      	ldrh	r1, [r3, #12]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	7d1a      	ldrb	r2, [r3, #20]
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	330c      	adds	r3, #12
 8011a32:	781c      	ldrb	r4, [r3, #0]
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	330d      	adds	r3, #13
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	9300      	str	r3, [sp, #0]
 8011a3c:	4623      	mov	r3, r4
 8011a3e:	f7fe fe58 	bl	80106f2 <_ZN3BTD26l2cap_information_responseEthhh>
 8011a42:	e135      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	3306      	adds	r3, #6
 8011a48:	781a      	ldrb	r2, [r3, #0]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8011a50:	429a      	cmp	r2, r3
 8011a52:	f040 8091 	bne.w	8011b78 <_ZN5BTHID7ACLDataEPh+0x838>
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	3307      	adds	r3, #7
 8011a5a:	781a      	ldrb	r2, [r3, #0]
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8011a62:	429a      	cmp	r2, r3
 8011a64:	f040 8088 	bne.w	8011b78 <_ZN5BTHID7ACLDataEPh+0x838>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	3308      	adds	r3, #8
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	2b02      	cmp	r3, #2
 8011a70:	d13a      	bne.n	8011ae8 <_ZN5BTHID7ACLDataEPh+0x7a8>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2203      	movs	r2, #3
 8011a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	7a5a      	ldrb	r2, [r3, #9]
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	7a9a      	ldrb	r2, [r3, #10]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2200      	movs	r2, #0
 8011a92:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2205      	movs	r2, #5
 8011a9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	3328      	adds	r3, #40	; 0x28
 8011aca:	220a      	movs	r2, #10
 8011acc:	4619      	mov	r1, r3
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f000 fbca 	bl	8012268 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8011ad4:	e0e9      	b.n	8011caa <_ZN5BTHID7ACLDataEPh+0x96a>
 8011ad6:	bf00      	nop
 8011ad8:	080151a4 	.word	0x080151a4
 8011adc:	080151c8 	.word	0x080151c8
 8011ae0:	080151f0 	.word	0x080151f0
 8011ae4:	08015218 	.word	0x08015218
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	3308      	adds	r3, #8
 8011aec:	781b      	ldrb	r3, [r3, #0]
 8011aee:	2b04      	cmp	r3, #4
 8011af0:	d131      	bne.n	8011b56 <_ZN5BTHID7ACLDataEPh+0x816>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2205      	movs	r2, #5
 8011af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	7a5a      	ldrb	r2, [r3, #9]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	7a9a      	ldrb	r2, [r3, #10]
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2200      	movs	r2, #0
 8011b12:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2205      	movs	r2, #5
 8011b1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2200      	movs	r2, #0
 8011b22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	2202      	movs	r2, #2
 8011b2a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	2235      	movs	r2, #53	; 0x35
 8011b32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2200      	movs	r2, #0
 8011b42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	3328      	adds	r3, #40	; 0x28
 8011b4a:	220a      	movs	r2, #10
 8011b4c:	4619      	mov	r1, r3
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f000 fb8a 	bl	8012268 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8011b54:	e0a9      	b.n	8011caa <_ZN5BTHID7ACLDataEPh+0x96a>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	3308      	adds	r3, #8
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	2b06      	cmp	r3, #6
 8011b5e:	f040 80a4 	bne.w	8011caa <_ZN5BTHID7ACLDataEPh+0x96a>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	3309      	adds	r3, #9
 8011b66:	7819      	ldrb	r1, [r3, #0]
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	330a      	adds	r3, #10
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	461a      	mov	r2, r3
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f000 fb93 	bl	801229c <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8011b76:	e098      	b.n	8011caa <_ZN5BTHID7ACLDataEPh+0x96a>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	3306      	adds	r3, #6
 8011b7c:	781a      	ldrb	r2, [r3, #0]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d162      	bne.n	8011c4e <_ZN5BTHID7ACLDataEPh+0x90e>
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	3307      	adds	r3, #7
 8011b8c:	781a      	ldrb	r2, [r3, #0]
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d15a      	bne.n	8011c4e <_ZN5BTHID7ACLDataEPh+0x90e>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	3308      	adds	r3, #8
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	2ba1      	cmp	r3, #161	; 0xa1
 8011ba0:	f040 8085 	bne.w	8011cae <_ZN5BTHID7ACLDataEPh+0x96e>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 8011ba4:	f7f0 fcbc 	bl	8002520 <HAL_GetTick>
 8011ba8:	4602      	mov	r2, r0
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	3305      	adds	r3, #5
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	021b      	lsls	r3, r3, #8
 8011bb6:	b21a      	sxth	r2, r3
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	3304      	adds	r3, #4
 8011bbc:	781b      	ldrb	r3, [r3, #0]
 8011bbe:	b21b      	sxth	r3, r3
 8011bc0:	4313      	orrs	r3, r2
 8011bc2:	b21b      	sxth	r3, r3
 8011bc4:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	3314      	adds	r3, #20
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	89fa      	ldrh	r2, [r7, #14]
 8011bd0:	b2d2      	uxtb	r2, r2
 8011bd2:	3a01      	subs	r2, #1
 8011bd4:	b2d1      	uxtb	r1, r2
 8011bd6:	683a      	ldr	r2, [r7, #0]
 8011bd8:	3209      	adds	r2, #9
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	3309      	adds	r3, #9
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	2b01      	cmp	r3, #1
 8011be6:	d002      	beq.n	8011bee <_ZN5BTHID7ACLDataEPh+0x8ae>
 8011be8:	2b02      	cmp	r3, #2
 8011bea:	d016      	beq.n	8011c1a <_ZN5BTHID7ACLDataEPh+0x8da>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 8011bec:	e05f      	b.n	8011cae <_ZN5BTHID7ACLDataEPh+0x96e>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6a1b      	ldr	r3, [r3, #32]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d027      	beq.n	8011c46 <_ZN5BTHID7ACLDataEPh+0x906>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6a18      	ldr	r0, [r3, #32]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6a1b      	ldr	r3, [r3, #32]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	681c      	ldr	r4, [r3, #0]
 8011c02:	89fb      	ldrh	r3, [r7, #14]
 8011c04:	b2db      	uxtb	r3, r3
 8011c06:	3b02      	subs	r3, #2
 8011c08:	b2da      	uxtb	r2, r3
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	330a      	adds	r3, #10
 8011c0e:	9300      	str	r3, [sp, #0]
 8011c10:	4613      	mov	r3, r2
 8011c12:	2200      	movs	r2, #0
 8011c14:	6879      	ldr	r1, [r7, #4]
 8011c16:	47a0      	blx	r4
                                                break;
 8011c18:	e015      	b.n	8011c46 <_ZN5BTHID7ACLDataEPh+0x906>
                                                if(pRptParser[MOUSE_PARSER_ID])
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d013      	beq.n	8011c4a <_ZN5BTHID7ACLDataEPh+0x90a>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	681c      	ldr	r4, [r3, #0]
 8011c2e:	89fb      	ldrh	r3, [r7, #14]
 8011c30:	b2db      	uxtb	r3, r3
 8011c32:	3b02      	subs	r3, #2
 8011c34:	b2da      	uxtb	r2, r3
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	330a      	adds	r3, #10
 8011c3a:	9300      	str	r3, [sp, #0]
 8011c3c:	4613      	mov	r3, r2
 8011c3e:	2200      	movs	r2, #0
 8011c40:	6879      	ldr	r1, [r7, #4]
 8011c42:	47a0      	blx	r4
                                                break;
 8011c44:	e001      	b.n	8011c4a <_ZN5BTHID7ACLDataEPh+0x90a>
                                                break;
 8011c46:	bf00      	nop
 8011c48:	e031      	b.n	8011cae <_ZN5BTHID7ACLDataEPh+0x96e>
                                                break;
 8011c4a:	bf00      	nop
                        }
 8011c4c:	e02f      	b.n	8011cae <_ZN5BTHID7ACLDataEPh+0x96e>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	3306      	adds	r3, #6
 8011c52:	781a      	ldrb	r2, [r3, #0]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d128      	bne.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	3307      	adds	r3, #7
 8011c62:	781a      	ldrb	r2, [r3, #0]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d120      	bne.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	3308      	adds	r3, #8
 8011c72:	781b      	ldrb	r3, [r3, #0]
 8011c74:	2ba3      	cmp	r3, #163	; 0xa3
 8011c76:	d11b      	bne.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	3305      	adds	r3, #5
 8011c7c:	781b      	ldrb	r3, [r3, #0]
 8011c7e:	021b      	lsls	r3, r3, #8
 8011c80:	b21a      	sxth	r2, r3
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	3304      	adds	r3, #4
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	b21b      	sxth	r3, r3
 8011c8a:	4313      	orrs	r3, r2
 8011c8c:	b21b      	sxth	r3, r3
 8011c8e:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	3318      	adds	r3, #24
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	89ba      	ldrh	r2, [r7, #12]
 8011c9a:	b2d2      	uxtb	r2, r2
 8011c9c:	3a01      	subs	r2, #1
 8011c9e:	b2d1      	uxtb	r1, r2
 8011ca0:	683a      	ldr	r2, [r7, #0]
 8011ca2:	3209      	adds	r2, #9
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	4798      	blx	r3
 8011ca8:	e002      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8011caa:	bf00      	nop
 8011cac:	e000      	b.n	8011cb0 <_ZN5BTHID7ACLDataEPh+0x970>
                        }
 8011cae:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f000 f807 	bl	8011cc4 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f000 f8cc 	bl	8011e54 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 8011cbc:	bf00      	nop
 8011cbe:	3714      	adds	r7, #20
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd90      	pop	{r4, r7, pc}

08011cc4 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 8011cc4:	b5b0      	push	{r4, r5, r7, lr}
 8011cc6:	b084      	sub	sp, #16
 8011cc8:	af02      	add	r7, sp, #8
 8011cca:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	7e9b      	ldrb	r3, [r3, #26]
 8011cd0:	2b0e      	cmp	r3, #14
 8011cd2:	f000 8090 	beq.w	8011df6 <_ZN5BTHID8SDP_taskEv+0x132>
 8011cd6:	2b0e      	cmp	r3, #14
 8011cd8:	f300 80af 	bgt.w	8011e3a <_ZN5BTHID8SDP_taskEv+0x176>
 8011cdc:	2b0a      	cmp	r3, #10
 8011cde:	d002      	beq.n	8011ce6 <_ZN5BTHID8SDP_taskEv+0x22>
 8011ce0:	2b0b      	cmp	r3, #11
 8011ce2:	d070      	beq.n	8011dc6 <_ZN5BTHID8SDP_taskEv+0x102>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 8011ce4:	e0a9      	b.n	8011e3a <_ZN5BTHID8SDP_taskEv+0x176>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	691b      	ldr	r3, [r3, #16]
 8011cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d045      	beq.n	8011d7e <_ZN5BTHID8SDP_taskEv+0xba>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	691b      	ldr	r3, [r3, #16]
 8011cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	611a      	str	r2, [r3, #16]
                                Notify(PSTR("\r\nSDP Incoming Connection Request"), 0x80);
 8011cfe:	2180      	movs	r1, #128	; 0x80
 8011d00:	4850      	ldr	r0, [pc, #320]	; (8011e44 <_ZN5BTHID8SDP_taskEv+0x180>)
 8011d02:	f002 fac9 	bl	8014298 <_Z8E_NotifyPKci>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	6898      	ldr	r0, [r3, #8]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	8999      	ldrh	r1, [r3, #12]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	7d1a      	ldrb	r2, [r3, #20]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	331b      	adds	r3, #27
 8011d1c:	2501      	movs	r5, #1
 8011d1e:	9501      	str	r5, [sp, #4]
 8011d20:	9300      	str	r3, [sp, #0]
 8011d22:	4623      	mov	r3, r4
 8011d24:	f7fe fb80 	bl	8010428 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8011d28:	2001      	movs	r0, #1
 8011d2a:	f7f0 fc05 	bl	8002538 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6898      	ldr	r0, [r3, #8]
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	8999      	ldrh	r1, [r3, #12]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	7d1a      	ldrb	r2, [r3, #20]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	331b      	adds	r3, #27
 8011d44:	2500      	movs	r5, #0
 8011d46:	9501      	str	r5, [sp, #4]
 8011d48:	9300      	str	r3, [sp, #0]
 8011d4a:	4623      	mov	r3, r4
 8011d4c:	f7fe fb6c 	bl	8010428 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	7d1b      	ldrb	r3, [r3, #20]
 8011d54:	3301      	adds	r3, #1
 8011d56:	b2da      	uxtb	r2, r3
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8011d5c:	2001      	movs	r0, #1
 8011d5e:	f7f0 fbeb 	bl	8002538 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6898      	ldr	r0, [r3, #8]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	8999      	ldrh	r1, [r3, #12]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	7d1a      	ldrb	r2, [r3, #20]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	331b      	adds	r3, #27
 8011d72:	f7fe fba6 	bl	80104c2 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	220b      	movs	r2, #11
 8011d7a:	769a      	strb	r2, [r3, #26]
                        break;
 8011d7c:	e058      	b.n	8011e30 <_ZN5BTHID8SDP_taskEv+0x16c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	691b      	ldr	r3, [r3, #16]
 8011d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d052      	beq.n	8011e30 <_ZN5BTHID8SDP_taskEv+0x16c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	691b      	ldr	r3, [r3, #16]
 8011d8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                Notify(PSTR("\r\nDisconnected SDP Channel"), 0x80);
 8011d9e:	2180      	movs	r1, #128	; 0x80
 8011da0:	4829      	ldr	r0, [pc, #164]	; (8011e48 <_ZN5BTHID8SDP_taskEv+0x184>)
 8011da2:	f002 fa79 	bl	8014298 <_Z8E_NotifyPKci>
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6898      	ldr	r0, [r3, #8]
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	8999      	ldrh	r1, [r3, #12]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	7d1a      	ldrb	r2, [r3, #20]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	331b      	adds	r3, #27
 8011dbc:	9300      	str	r3, [sp, #0]
 8011dbe:	4623      	mov	r3, r4
 8011dc0:	f7fe fc5a 	bl	8010678 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8011dc4:	e034      	b.n	8011e30 <_ZN5BTHID8SDP_taskEv+0x16c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	691b      	ldr	r3, [r3, #16]
 8011dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d030      	beq.n	8011e34 <_ZN5BTHID8SDP_taskEv+0x170>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	691b      	ldr	r3, [r3, #16]
 8011dd6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	611a      	str	r2, [r3, #16]
                                Notify(PSTR("\r\nSDP Successfully Configured"), 0x80);
 8011dde:	2180      	movs	r1, #128	; 0x80
 8011de0:	481a      	ldr	r0, [pc, #104]	; (8011e4c <_ZN5BTHID8SDP_taskEv+0x188>)
 8011de2:	f002 fa59 	bl	8014298 <_Z8E_NotifyPKci>
                                SDPConnected = true;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	2201      	movs	r2, #1
 8011dea:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	220a      	movs	r2, #10
 8011df2:	769a      	strb	r2, [r3, #26]
                        break;
 8011df4:	e01e      	b.n	8011e34 <_ZN5BTHID8SDP_taskEv+0x170>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	691b      	ldr	r3, [r3, #16]
 8011dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d01a      	beq.n	8011e38 <_ZN5BTHID8SDP_taskEv+0x174>
                                Notify(PSTR("\r\nDisconnected L2CAP Connection"), 0x80);
 8011e02:	2180      	movs	r1, #128	; 0x80
 8011e04:	4812      	ldr	r0, [pc, #72]	; (8011e50 <_ZN5BTHID8SDP_taskEv+0x18c>)
 8011e06:	f002 fa47 	bl	8014298 <_Z8E_NotifyPKci>
                                pBtd->hci_disconnect(hci_handle);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	689a      	ldr	r2, [r3, #8]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	899b      	ldrh	r3, [r3, #12]
 8011e12:	4619      	mov	r1, r3
 8011e14:	4610      	mov	r0, r2
 8011e16:	f7fe f9b8 	bl	801018a <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e20:	819a      	strh	r2, [r3, #12]
                                Reset();
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	3308      	adds	r3, #8
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	4798      	blx	r3
                        break;
 8011e2e:	e003      	b.n	8011e38 <_ZN5BTHID8SDP_taskEv+0x174>
                        break;
 8011e30:	bf00      	nop
 8011e32:	e002      	b.n	8011e3a <_ZN5BTHID8SDP_taskEv+0x176>
                        break;
 8011e34:	bf00      	nop
 8011e36:	e000      	b.n	8011e3a <_ZN5BTHID8SDP_taskEv+0x176>
                        break;
 8011e38:	bf00      	nop
}
 8011e3a:	bf00      	nop
 8011e3c:	3708      	adds	r7, #8
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bdb0      	pop	{r4, r5, r7, pc}
 8011e42:	bf00      	nop
 8011e44:	08015230 	.word	0x08015230
 8011e48:	08015254 	.word	0x08015254
 8011e4c:	08015270 	.word	0x08015270
 8011e50:	08015290 	.word	0x08015290

08011e54 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 8011e54:	b5b0      	push	{r4, r5, r7, lr}
 8011e56:	b084      	sub	sp, #16
 8011e58:	af02      	add	r7, sp, #8
 8011e5a:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8011e62:	3b01      	subs	r3, #1
 8011e64:	2b08      	cmp	r3, #8
 8011e66:	f200 814d 	bhi.w	8012104 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
 8011e6a:	a201      	add	r2, pc, #4	; (adr r2, 8011e70 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 8011e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e70:	080120e3 	.word	0x080120e3
 8011e74:	08011f4b 	.word	0x08011f4b
 8011e78:	08011f8b 	.word	0x08011f8b
 8011e7c:	08011e95 	.word	0x08011e95
 8011e80:	080120a7 	.word	0x080120a7
 8011e84:	08011ebb 	.word	0x08011ebb
 8011e88:	08011fdb 	.word	0x08011fdb
 8011e8c:	0801201b 	.word	0x0801201b
 8011e90:	0801205f 	.word	0x0801205f
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	691b      	ldr	r3, [r3, #16]
 8011e98:	f003 0302 	and.w	r3, r3, #2
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	f000 8122 	beq.w	80120e6 <_ZN5BTHID10L2CAP_taskEv+0x292>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
 8011ea2:	2180      	movs	r1, #128	; 0x80
 8011ea4:	4899      	ldr	r0, [pc, #612]	; (801210c <_ZN5BTHID10L2CAP_taskEv+0x2b8>)
 8011ea6:	f002 f9f7 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f000 fa32 	bl	8012314 <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2206      	movs	r2, #6
 8011eb4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011eb8:	e115      	b.n	80120e6 <_ZN5BTHID10L2CAP_taskEv+0x292>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	691b      	ldr	r3, [r3, #16]
 8011ebe:	f003 0310 	and.w	r3, r3, #16
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	f000 8111 	beq.w	80120ea <_ZN5BTHID10L2CAP_taskEv+0x296>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
 8011ec8:	2180      	movs	r1, #128	; 0x80
 8011eca:	4891      	ldr	r0, [pc, #580]	; (8012110 <_ZN5BTHID10L2CAP_taskEv+0x2bc>)
 8011ecc:	f002 f9e4 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6898      	ldr	r0, [r3, #8]
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	8999      	ldrh	r1, [r3, #12]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	7d1a      	ldrb	r2, [r3, #20]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	3318      	adds	r3, #24
 8011ee6:	2501      	movs	r5, #1
 8011ee8:	9501      	str	r5, [sp, #4]
 8011eea:	9300      	str	r3, [sp, #0]
 8011eec:	4623      	mov	r3, r4
 8011eee:	f7fe fa9b 	bl	8010428 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8011ef2:	2001      	movs	r0, #1
 8011ef4:	f7f0 fb20 	bl	8002538 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6898      	ldr	r0, [r3, #8]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	8999      	ldrh	r1, [r3, #12]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	7d1a      	ldrb	r2, [r3, #20]
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	3318      	adds	r3, #24
 8011f0e:	2500      	movs	r5, #0
 8011f10:	9501      	str	r5, [sp, #4]
 8011f12:	9300      	str	r3, [sp, #0]
 8011f14:	4623      	mov	r3, r4
 8011f16:	f7fe fa87 	bl	8010428 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	7d1b      	ldrb	r3, [r3, #20]
 8011f1e:	3301      	adds	r3, #1
 8011f20:	b2da      	uxtb	r2, r3
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8011f26:	2001      	movs	r0, #1
 8011f28:	f7f0 fb06 	bl	8002538 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6898      	ldr	r0, [r3, #8]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	8999      	ldrh	r1, [r3, #12]
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	7d1a      	ldrb	r2, [r3, #20]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	3318      	adds	r3, #24
 8011f3c:	f7fe fac1 	bl	80104c2 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2208      	movs	r2, #8
 8011f44:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011f48:	e0cf      	b.n	80120ea <_ZN5BTHID10L2CAP_taskEv+0x296>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	691b      	ldr	r3, [r3, #16]
 8011f4e:	f003 0304 	and.w	r3, r3, #4
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	f000 80cb 	beq.w	80120ee <_ZN5BTHID10L2CAP_taskEv+0x29a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
 8011f58:	2180      	movs	r1, #128	; 0x80
 8011f5a:	486e      	ldr	r0, [pc, #440]	; (8012114 <_ZN5BTHID10L2CAP_taskEv+0x2c0>)
 8011f5c:	f002 f99c 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	7d1b      	ldrb	r3, [r3, #20]
 8011f64:	3301      	adds	r3, #1
 8011f66:	b2da      	uxtb	r2, r3
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6898      	ldr	r0, [r3, #8]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	8999      	ldrh	r1, [r3, #12]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	7d1a      	ldrb	r2, [r3, #20]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	3316      	adds	r3, #22
 8011f7c:	f7fe faa1 	bl	80104c2 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2203      	movs	r2, #3
 8011f84:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011f88:	e0b1      	b.n	80120ee <_ZN5BTHID10L2CAP_taskEv+0x29a>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	691b      	ldr	r3, [r3, #16]
 8011f8e:	f003 0302 	and.w	r3, r3, #2
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	f000 80ad 	beq.w	80120f2 <_ZN5BTHID10L2CAP_taskEv+0x29e>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f000 f9bb 	bl	8012314 <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 8011f9e:	2001      	movs	r0, #1
 8011fa0:	f7f0 faca 	bl	8002538 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
 8011fa4:	2180      	movs	r1, #128	; 0x80
 8011fa6:	485c      	ldr	r0, [pc, #368]	; (8012118 <_ZN5BTHID10L2CAP_taskEv+0x2c4>)
 8011fa8:	f002 f976 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	7d1b      	ldrb	r3, [r3, #20]
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	b2da      	uxtb	r2, r3
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6898      	ldr	r0, [r3, #8]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	8999      	ldrh	r1, [r3, #12]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	7d1a      	ldrb	r2, [r3, #20]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	336d      	adds	r3, #109	; 0x6d
 8011fc8:	2413      	movs	r4, #19
 8011fca:	9400      	str	r4, [sp, #0]
 8011fcc:	f7fe f9ee 	bl	80103ac <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2207      	movs	r2, #7
 8011fd4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011fd8:	e08b      	b.n	80120f2 <_ZN5BTHID10L2CAP_taskEv+0x29e>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	691b      	ldr	r3, [r3, #16]
 8011fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	f000 8087 	beq.w	80120f6 <_ZN5BTHID10L2CAP_taskEv+0x2a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
 8011fe8:	2180      	movs	r1, #128	; 0x80
 8011fea:	484c      	ldr	r0, [pc, #304]	; (801211c <_ZN5BTHID10L2CAP_taskEv+0x2c8>)
 8011fec:	f002 f954 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	7d1b      	ldrb	r3, [r3, #20]
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	b2da      	uxtb	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6898      	ldr	r0, [r3, #8]
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	8999      	ldrh	r1, [r3, #12]
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	7d1a      	ldrb	r2, [r3, #20]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	3318      	adds	r3, #24
 801200c:	f7fe fa59 	bl	80104c2 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2208      	movs	r2, #8
 8012014:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8012018:	e06d      	b.n	80120f6 <_ZN5BTHID10L2CAP_taskEv+0x2a2>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	691b      	ldr	r3, [r3, #16]
 801201e:	f003 0320 	and.w	r3, r3, #32
 8012022:	2b00      	cmp	r3, #0
 8012024:	d069      	beq.n	80120fa <_ZN5BTHID10L2CAP_taskEv+0x2a6>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
 8012026:	2180      	movs	r1, #128	; 0x80
 8012028:	483d      	ldr	r0, [pc, #244]	; (8012120 <_ZN5BTHID10L2CAP_taskEv+0x2cc>)
 801202a:	f002 f935 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                pBtd->connectToHIDDevice = false;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	689b      	ldr	r3, [r3, #8]
 8012032:	2200      	movs	r2, #0
 8012034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	689b      	ldr	r3, [r3, #8]
 801203c:	2200      	movs	r2, #0
 801203e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2201      	movs	r2, #1
 8012046:	755a      	strb	r2, [r3, #21]
                                onInit();
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	3310      	adds	r3, #16
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2201      	movs	r2, #1
 8012058:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801205c:	e04d      	b.n	80120fa <_ZN5BTHID10L2CAP_taskEv+0x2a6>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	691b      	ldr	r3, [r3, #16]
 8012062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012066:	2b00      	cmp	r3, #0
 8012068:	d049      	beq.n	80120fe <_ZN5BTHID10L2CAP_taskEv+0x2aa>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
 801206a:	2180      	movs	r1, #128	; 0x80
 801206c:	482d      	ldr	r0, [pc, #180]	; (8012124 <_ZN5BTHID10L2CAP_taskEv+0x2d0>)
 801206e:	f002 f913 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	7d1b      	ldrb	r3, [r3, #20]
 8012076:	3301      	adds	r3, #1
 8012078:	b2da      	uxtb	r2, r3
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	6898      	ldr	r0, [r3, #8]
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	8999      	ldrh	r1, [r3, #12]
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	7d1a      	ldrb	r2, [r3, #20]
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f103 0416 	add.w	r4, r3, #22
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	336b      	adds	r3, #107	; 0x6b
 8012094:	9300      	str	r3, [sp, #0]
 8012096:	4623      	mov	r3, r4
 8012098:	f7fe fab1 	bl	80105fe <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2205      	movs	r2, #5
 80120a0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80120a4:	e02b      	b.n	80120fe <_ZN5BTHID10L2CAP_taskEv+0x2aa>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	691b      	ldr	r3, [r3, #16]
 80120aa:	f003 0308 	and.w	r3, r3, #8
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d027      	beq.n	8012102 <_ZN5BTHID10L2CAP_taskEv+0x2ae>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
 80120b2:	2180      	movs	r1, #128	; 0x80
 80120b4:	481c      	ldr	r0, [pc, #112]	; (8012128 <_ZN5BTHID10L2CAP_taskEv+0x2d4>)
 80120b6:	f002 f8ef 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                pBtd->hci_disconnect(hci_handle);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	689a      	ldr	r2, [r3, #8]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	899b      	ldrh	r3, [r3, #12]
 80120c2:	4619      	mov	r1, r3
 80120c4:	4610      	mov	r0, r2
 80120c6:	f7fe f860 	bl	801018a <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120d0:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2200      	movs	r2, #0
 80120d6:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2200      	movs	r2, #0
 80120dc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80120e0:	e00f      	b.n	8012102 <_ZN5BTHID10L2CAP_taskEv+0x2ae>
                        break;
 80120e2:	bf00      	nop
 80120e4:	e00e      	b.n	8012104 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 80120e6:	bf00      	nop
 80120e8:	e00c      	b.n	8012104 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 80120ea:	bf00      	nop
 80120ec:	e00a      	b.n	8012104 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 80120ee:	bf00      	nop
 80120f0:	e008      	b.n	8012104 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 80120f2:	bf00      	nop
 80120f4:	e006      	b.n	8012104 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 80120f6:	bf00      	nop
 80120f8:	e004      	b.n	8012104 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 80120fa:	bf00      	nop
 80120fc:	e002      	b.n	8012104 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 80120fe:	bf00      	nop
 8012100:	e000      	b.n	8012104 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8012102:	bf00      	nop
        }
}
 8012104:	bf00      	nop
 8012106:	3708      	adds	r7, #8
 8012108:	46bd      	mov	sp, r7
 801210a:	bdb0      	pop	{r4, r5, r7, pc}
 801210c:	080152b0 	.word	0x080152b0
 8012110:	080152d8 	.word	0x080152d8
 8012114:	08015304 	.word	0x08015304
 8012118:	08015328 	.word	0x08015328
 801211c:	08015350 	.word	0x08015350
 8012120:	08015374 	.word	0x08015374
 8012124:	08015390 	.word	0x08015390
 8012128:	080153b4 	.word	0x080153b4

0801212c <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 801212c:	b5b0      	push	{r4, r5, r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af02      	add	r7, sp, #8
 8012132:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801213a:	2b00      	cmp	r3, #0
 801213c:	f040 808c 	bne.w	8012258 <_ZN5BTHID3RunEv+0x12c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	689b      	ldr	r3, [r3, #8]
 8012144:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012148:	2b00      	cmp	r3, #0
 801214a:	d03e      	beq.n	80121ca <_ZN5BTHID3RunEv+0x9e>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	689b      	ldr	r3, [r3, #8]
 8012150:	7a5b      	ldrb	r3, [r3, #9]
 8012152:	f083 0301 	eor.w	r3, r3, #1
 8012156:	b2db      	uxtb	r3, r3
 8012158:	2b00      	cmp	r3, #0
 801215a:	d036      	beq.n	80121ca <_ZN5BTHID3RunEv+0x9e>
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	7d5b      	ldrb	r3, [r3, #21]
 8012160:	f083 0301 	eor.w	r3, r3, #1
 8012164:	b2db      	uxtb	r3, r3
 8012166:	2b00      	cmp	r3, #0
 8012168:	d02f      	beq.n	80121ca <_ZN5BTHID3RunEv+0x9e>
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8012170:	f083 0301 	eor.w	r3, r3, #1
 8012174:	b2db      	uxtb	r3, r3
 8012176:	2b00      	cmp	r3, #0
 8012178:	d027      	beq.n	80121ca <_ZN5BTHID3RunEv+0x9e>
                                pBtd->l2capConnectionClaimed = true;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	689b      	ldr	r3, [r3, #8]
 801217e:	2201      	movs	r2, #1
 8012180:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2201      	movs	r2, #1
 8012186:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
 801218a:	2180      	movs	r1, #128	; 0x80
 801218c:	4834      	ldr	r0, [pc, #208]	; (8012260 <_ZN5BTHID3RunEv+0x134>)
 801218e:	f002 f883 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	689b      	ldr	r3, [r3, #8]
 8012196:	8b5a      	ldrh	r2, [r3, #26]
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2200      	movs	r2, #0
 80121a0:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2200      	movs	r2, #0
 80121a6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6898      	ldr	r0, [r3, #8]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	8999      	ldrh	r1, [r3, #12]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	7d1a      	ldrb	r2, [r3, #20]
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	336b      	adds	r3, #107	; 0x6b
 80121b8:	2411      	movs	r4, #17
 80121ba:	9400      	str	r4, [sp, #0]
 80121bc:	f7fe f8f6 	bl	80103ac <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2202      	movs	r2, #2
 80121c4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 80121c8:	e045      	b.n	8012256 <_ZN5BTHID3RunEv+0x12a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	691b      	ldr	r3, [r3, #16]
 80121ce:	f003 0301 	and.w	r3, r3, #1
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d03f      	beq.n	8012256 <_ZN5BTHID3RunEv+0x12a>
                                Notify(PSTR("\r\nHID Control Incoming Connection Request"), 0x80);
 80121d6:	2180      	movs	r1, #128	; 0x80
 80121d8:	4822      	ldr	r0, [pc, #136]	; (8012264 <_ZN5BTHID3RunEv+0x138>)
 80121da:	f002 f85d 	bl	8014298 <_Z8E_NotifyPKci>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6898      	ldr	r0, [r3, #8]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	8999      	ldrh	r1, [r3, #12]
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	7d1a      	ldrb	r2, [r3, #20]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	3316      	adds	r3, #22
 80121f4:	2501      	movs	r5, #1
 80121f6:	9501      	str	r5, [sp, #4]
 80121f8:	9300      	str	r3, [sp, #0]
 80121fa:	4623      	mov	r3, r4
 80121fc:	f7fe f914 	bl	8010428 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8012200:	2001      	movs	r0, #1
 8012202:	f7f0 f999 	bl	8002538 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6898      	ldr	r0, [r3, #8]
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	8999      	ldrh	r1, [r3, #12]
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	7d1a      	ldrb	r2, [r3, #20]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	3316      	adds	r3, #22
 801221c:	2500      	movs	r5, #0
 801221e:	9501      	str	r5, [sp, #4]
 8012220:	9300      	str	r3, [sp, #0]
 8012222:	4623      	mov	r3, r4
 8012224:	f7fe f900 	bl	8010428 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	7d1b      	ldrb	r3, [r3, #20]
 801222c:	3301      	adds	r3, #1
 801222e:	b2da      	uxtb	r2, r3
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8012234:	2001      	movs	r0, #1
 8012236:	f7f0 f97f 	bl	8002538 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6898      	ldr	r0, [r3, #8]
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	8999      	ldrh	r1, [r3, #12]
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	7d1a      	ldrb	r2, [r3, #20]
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	3316      	adds	r3, #22
 801224a:	f7fe f93a 	bl	80104c2 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2204      	movs	r2, #4
 8012252:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 8012256:	bf00      	nop
        }
}
 8012258:	bf00      	nop
 801225a:	3708      	adds	r7, #8
 801225c:	46bd      	mov	sp, r7
 801225e:	bdb0      	pop	{r4, r5, r7, pc}
 8012260:	080153d4 	.word	0x080153d4
 8012264:	080153fc 	.word	0x080153fc

08012268 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 8012268:	b590      	push	{r4, r7, lr}
 801226a:	b087      	sub	sp, #28
 801226c:	af02      	add	r7, sp, #8
 801226e:	60f8      	str	r0, [r7, #12]
 8012270:	60b9      	str	r1, [r7, #8]
 8012272:	4613      	mov	r3, r2
 8012274:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	6898      	ldr	r0, [r3, #8]
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	8999      	ldrh	r1, [r3, #12]
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	7edb      	ldrb	r3, [r3, #27]
 8012282:	68fa      	ldr	r2, [r7, #12]
 8012284:	7f12      	ldrb	r2, [r2, #28]
 8012286:	79fc      	ldrb	r4, [r7, #7]
 8012288:	9201      	str	r2, [sp, #4]
 801228a:	9300      	str	r3, [sp, #0]
 801228c:	4623      	mov	r3, r4
 801228e:	68ba      	ldr	r2, [r7, #8]
 8012290:	f7fd ffda 	bl	8010248 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8012294:	bf00      	nop
 8012296:	3714      	adds	r7, #20
 8012298:	46bd      	mov	sp, r7
 801229a:	bd90      	pop	{r4, r7, pc}

0801229c <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	460b      	mov	r3, r1
 80122a6:	70fb      	strb	r3, [r7, #3]
 80122a8:	4613      	mov	r3, r2
 80122aa:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	2207      	movs	r2, #7
 80122b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	78fa      	ldrb	r2, [r7, #3]
 80122b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	78ba      	ldrb	r2, [r7, #2]
 80122c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2200      	movs	r2, #0
 80122c8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2205      	movs	r2, #5
 80122d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2200      	movs	r2, #0
 80122d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2202      	movs	r2, #2
 80122e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2235      	movs	r2, #53	; 0x35
 80122e8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2200      	movs	r2, #0
 80122f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2200      	movs	r2, #0
 80122f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	3328      	adds	r3, #40	; 0x28
 8012300:	220a      	movs	r2, #10
 8012302:	4619      	mov	r1, r3
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f7ff ffaf 	bl	8012268 <_ZN5BTHID11SDP_CommandEPhh>
}
 801230a:	bf00      	nop
 801230c:	3708      	adds	r7, #8
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
	...

08012314 <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 8012314:	b590      	push	{r4, r7, lr}
 8012316:	b087      	sub	sp, #28
 8012318:	af02      	add	r7, sp, #8
 801231a:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
 801231c:	2180      	movs	r1, #128	; 0x80
 801231e:	481b      	ldr	r0, [pc, #108]	; (801238c <_ZN5BTHID11setProtocolEv+0x78>)
 8012320:	f001 ffba 	bl	8014298 <_Z8E_NotifyPKci>
        D_PrintHex<uint8_t > (protocolMode, 0x80);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801232a:	2180      	movs	r1, #128	; 0x80
 801232c:	4618      	mov	r0, r3
 801232e:	f7fe fab0 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012338:	2b00      	cmp	r3, #0
 801233a:	d00c      	beq.n	8012356 <_ZN5BTHID11setProtocolEv+0x42>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012342:	2b01      	cmp	r3, #1
 8012344:	d007      	beq.n	8012356 <_ZN5BTHID11setProtocolEv+0x42>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
 8012346:	2180      	movs	r1, #128	; 0x80
 8012348:	4811      	ldr	r0, [pc, #68]	; (8012390 <_ZN5BTHID11setProtocolEv+0x7c>)
 801234a:	f001 ffa5 	bl	8014298 <_Z8E_NotifyPKci>
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2200      	movs	r2, #0
 8012352:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801235c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8012360:	b2db      	uxtb	r3, r3
 8012362:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6898      	ldr	r0, [r3, #8]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	8999      	ldrh	r1, [r3, #12]
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	7d9b      	ldrb	r3, [r3, #22]
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	7dd2      	ldrb	r2, [r2, #23]
 8012374:	f107 040f 	add.w	r4, r7, #15
 8012378:	9201      	str	r2, [sp, #4]
 801237a:	9300      	str	r3, [sp, #0]
 801237c:	2301      	movs	r3, #1
 801237e:	4622      	mov	r2, r4
 8012380:	f7fd ff62 	bl	8010248 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8012384:	bf00      	nop
 8012386:	3714      	adds	r7, #20
 8012388:	46bd      	mov	sp, r7
 801238a:	bd90      	pop	{r4, r7, pc}
 801238c:	08015428 	.word	0x08015428
 8012390:	08015440 	.word	0x08015440

08012394 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 8012394:	b480      	push	{r7}
 8012396:	b083      	sub	sp, #12
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	460b      	mov	r3, r1
 801239e:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 80123a0:	78fb      	ldrb	r3, [r7, #3]
 80123a2:	2b03      	cmp	r3, #3
 80123a4:	d86e      	bhi.n	8012484 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 80123a6:	a201      	add	r2, pc, #4	; (adr r2, 80123ac <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 80123a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ac:	080123bd 	.word	0x080123bd
 80123b0:	080123ef 	.word	0x080123ef
 80123b4:	08012421 	.word	0x08012421
 80123b8:	08012453 	.word	0x08012453
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	7a1b      	ldrb	r3, [r3, #8]
 80123c0:	f003 030f 	and.w	r3, r3, #15
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	2b07      	cmp	r3, #7
 80123c8:	d00d      	beq.n	80123e6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	7a1b      	ldrb	r3, [r3, #8]
 80123ce:	f003 030f 	and.w	r3, r3, #15
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d006      	beq.n	80123e6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	7a1b      	ldrb	r3, [r3, #8]
 80123dc:	f003 030f 	and.w	r3, r3, #15
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	2b01      	cmp	r3, #1
 80123e4:	d101      	bne.n	80123ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 80123e6:	2301      	movs	r3, #1
 80123e8:	e04d      	b.n	8012486 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80123ea:	2300      	movs	r3, #0
 80123ec:	e04b      	b.n	8012486 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	7a1b      	ldrb	r3, [r3, #8]
 80123f2:	f003 030f 	and.w	r3, r3, #15
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	2b01      	cmp	r3, #1
 80123fa:	d00d      	beq.n	8012418 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	7a1b      	ldrb	r3, [r3, #8]
 8012400:	f003 030f 	and.w	r3, r3, #15
 8012404:	b2db      	uxtb	r3, r3
 8012406:	2b02      	cmp	r3, #2
 8012408:	d006      	beq.n	8012418 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	7a1b      	ldrb	r3, [r3, #8]
 801240e:	f003 030f 	and.w	r3, r3, #15
 8012412:	b2db      	uxtb	r3, r3
 8012414:	2b03      	cmp	r3, #3
 8012416:	d101      	bne.n	801241c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 8012418:	2301      	movs	r3, #1
 801241a:	e034      	b.n	8012486 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 801241c:	2300      	movs	r3, #0
 801241e:	e032      	b.n	8012486 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	7a1b      	ldrb	r3, [r3, #8]
 8012424:	f003 030f 	and.w	r3, r3, #15
 8012428:	b2db      	uxtb	r3, r3
 801242a:	2b03      	cmp	r3, #3
 801242c:	d00d      	beq.n	801244a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	7a1b      	ldrb	r3, [r3, #8]
 8012432:	f003 030f 	and.w	r3, r3, #15
 8012436:	b2db      	uxtb	r3, r3
 8012438:	2b04      	cmp	r3, #4
 801243a:	d006      	beq.n	801244a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	7a1b      	ldrb	r3, [r3, #8]
 8012440:	f003 030f 	and.w	r3, r3, #15
 8012444:	b2db      	uxtb	r3, r3
 8012446:	2b05      	cmp	r3, #5
 8012448:	d101      	bne.n	801244e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 801244a:	2301      	movs	r3, #1
 801244c:	e01b      	b.n	8012486 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 801244e:	2300      	movs	r3, #0
 8012450:	e019      	b.n	8012486 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	7a1b      	ldrb	r3, [r3, #8]
 8012456:	f003 030f 	and.w	r3, r3, #15
 801245a:	b2db      	uxtb	r3, r3
 801245c:	2b05      	cmp	r3, #5
 801245e:	d00d      	beq.n	801247c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	7a1b      	ldrb	r3, [r3, #8]
 8012464:	f003 030f 	and.w	r3, r3, #15
 8012468:	b2db      	uxtb	r3, r3
 801246a:	2b06      	cmp	r3, #6
 801246c:	d006      	beq.n	801247c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	7a1b      	ldrb	r3, [r3, #8]
 8012472:	f003 030f 	and.w	r3, r3, #15
 8012476:	b2db      	uxtb	r3, r3
 8012478:	2b07      	cmp	r3, #7
 801247a:	d101      	bne.n	8012480 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 801247c:	2301      	movs	r3, #1
 801247e:	e002      	b.n	8012486 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8012480:	2300      	movs	r3, #0
 8012482:	e000      	b.n	8012486 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 8012484:	2300      	movs	r3, #0
        }
}
 8012486:	4618      	mov	r0, r3
 8012488:	370c      	adds	r7, #12
 801248a:	46bd      	mov	sp, r7
 801248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012490:	4770      	bx	lr
 8012492:	bf00      	nop

08012494 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	460b      	mov	r3, r1
 801249e:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 80124a0:	78fb      	ldrb	r3, [r7, #3]
 80124a2:	2b03      	cmp	r3, #3
 80124a4:	d806      	bhi.n	80124b4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 80124a6:	78fb      	ldrb	r3, [r7, #3]
 80124a8:	4619      	mov	r1, r3
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f7ff ff72 	bl	8012394 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80124b0:	4603      	mov	r3, r0
 80124b2:	e011      	b.n	80124d8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	689b      	ldr	r3, [r3, #8]
 80124b8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80124bc:	4619      	mov	r1, r3
 80124be:	78fb      	ldrb	r3, [r7, #3]
 80124c0:	4a07      	ldr	r2, [pc, #28]	; (80124e0 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 80124c2:	4413      	add	r3, r2
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	fa21 f303 	lsr.w	r3, r1, r3
 80124ca:	f003 0301 	and.w	r3, r3, #1
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	bf14      	ite	ne
 80124d2:	2301      	movne	r3, #1
 80124d4:	2300      	moveq	r3, #0
 80124d6:	b2db      	uxtb	r3, r3
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	08016568 	.word	0x08016568

080124e4 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 80124e4:	b480      	push	{r7}
 80124e6:	b085      	sub	sp, #20
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	460b      	mov	r3, r1
 80124ee:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 80124f0:	78fb      	ldrb	r3, [r7, #3]
 80124f2:	4a1b      	ldr	r2, [pc, #108]	; (8012560 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 80124f4:	4413      	add	r3, r2
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	461a      	mov	r2, r3
 80124fa:	2301      	movs	r3, #1
 80124fc:	4093      	lsls	r3, r2
 80124fe:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8012506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801250a:	021b      	lsls	r3, r3, #8
 801250c:	4313      	orrs	r3, r2
 801250e:	461a      	mov	r2, r3
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	4013      	ands	r3, r2
 8012514:	2b00      	cmp	r3, #0
 8012516:	bf14      	ite	ne
 8012518:	2301      	movne	r3, #1
 801251a:	2300      	moveq	r3, #0
 801251c:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8012524:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012528:	021b      	lsls	r3, r3, #8
 801252a:	4313      	orrs	r3, r2
 801252c:	461a      	mov	r2, r3
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	43db      	mvns	r3, r3
 8012532:	4013      	ands	r3, r2
 8012534:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	b2d1      	uxtb	r1, r2
 801253c:	2000      	movs	r0, #0
 801253e:	4301      	orrs	r1, r0
 8012540:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8012544:	0a12      	lsrs	r2, r2, #8
 8012546:	b292      	uxth	r2, r2
 8012548:	2100      	movs	r1, #0
 801254a:	430a      	orrs	r2, r1
 801254c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 8012550:	7afb      	ldrb	r3, [r7, #11]
}
 8012552:	4618      	mov	r0, r3
 8012554:	3714      	adds	r7, #20
 8012556:	46bd      	mov	sp, r7
 8012558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255c:	4770      	bx	lr
 801255e:	bf00      	nop
 8012560:	08016568 	.word	0x08016568

08012564 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 8012564:	b480      	push	{r7}
 8012566:	b083      	sub	sp, #12
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
 801256c:	460b      	mov	r3, r1
 801256e:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 8012570:	78fb      	ldrb	r3, [r7, #3]
 8012572:	2b08      	cmp	r3, #8
 8012574:	d102      	bne.n	801257c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	7adb      	ldrb	r3, [r3, #11]
 801257a:	e006      	b.n	801258a <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 801257c:	78fb      	ldrb	r3, [r7, #3]
 801257e:	2b09      	cmp	r3, #9
 8012580:	d102      	bne.n	8012588 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	7b1b      	ldrb	r3, [r3, #12]
 8012586:	e000      	b.n	801258a <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 8012588:	2300      	movs	r3, #0
}
 801258a:	4618      	mov	r0, r3
 801258c:	370c      	adds	r7, #12
 801258e:	46bd      	mov	sp, r7
 8012590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012594:	4770      	bx	lr

08012596 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 8012596:	b480      	push	{r7}
 8012598:	b083      	sub	sp, #12
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
 801259e:	460b      	mov	r3, r1
 80125a0:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 80125a2:	78fb      	ldrb	r3, [r7, #3]
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	4413      	add	r3, r2
 80125a8:	791b      	ldrb	r3, [r3, #4]
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	370c      	adds	r7, #12
 80125ae:	46bd      	mov	sp, r7
 80125b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b4:	4770      	bx	lr
	...

080125b8 <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b086      	sub	sp, #24
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	460b      	mov	r3, r1
 80125c2:	607a      	str	r2, [r7, #4]
 80125c4:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 80125c6:	7afb      	ldrb	r3, [r7, #11]
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	f240 80ba 	bls.w	8012742 <_ZN9PS4Parser5ParseEhPh+0x18a>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	f000 80b6 	beq.w	8012742 <_ZN9PS4Parser5ParseEhPh+0x18a>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	781b      	ldrb	r3, [r3, #0]
 80125da:	2b01      	cmp	r3, #1
 80125dc:	d10e      	bne.n	80125fc <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	1d18      	adds	r0, r3, #4
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	1c59      	adds	r1, r3, #1
 80125e6:	7afb      	ldrb	r3, [r7, #11]
 80125e8:	3b01      	subs	r3, #1
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	2b3c      	cmp	r3, #60	; 0x3c
 80125ee:	bf28      	it	cs
 80125f0:	233c      	movcs	r3, #60	; 0x3c
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	461a      	mov	r2, r3
 80125f6:	f001 ff9b 	bl	8014530 <memcpy>
 80125fa:	e02a      	b.n	8012652 <_ZN9PS4Parser5ParseEhPh+0x9a>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	781b      	ldrb	r3, [r3, #0]
 8012600:	2b11      	cmp	r3, #17
 8012602:	d11b      	bne.n	801263c <_ZN9PS4Parser5ParseEhPh+0x84>
                        if (len < 4) {
 8012604:	7afb      	ldrb	r3, [r7, #11]
 8012606:	2b03      	cmp	r3, #3
 8012608:	d809      	bhi.n	801261e <_ZN9PS4Parser5ParseEhPh+0x66>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
 801260a:	2180      	movs	r1, #128	; 0x80
 801260c:	4855      	ldr	r0, [pc, #340]	; (8012764 <_ZN9PS4Parser5ParseEhPh+0x1ac>)
 801260e:	f001 fe43 	bl	8014298 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (len, 0x80);
 8012612:	7afb      	ldrb	r3, [r7, #11]
 8012614:	2180      	movs	r1, #128	; 0x80
 8012616:	4618      	mov	r0, r3
 8012618:	f7fe f93b 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
#endif
                                return;
 801261c:	e09e      	b.n	801275c <_ZN9PS4Parser5ParseEhPh+0x1a4>
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	1d18      	adds	r0, r3, #4
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	1cd9      	adds	r1, r3, #3
 8012626:	7afb      	ldrb	r3, [r7, #11]
 8012628:	3b03      	subs	r3, #3
 801262a:	b2db      	uxtb	r3, r3
 801262c:	2b3c      	cmp	r3, #60	; 0x3c
 801262e:	bf28      	it	cs
 8012630:	233c      	movcs	r3, #60	; 0x3c
 8012632:	b2db      	uxtb	r3, r3
 8012634:	461a      	mov	r2, r3
 8012636:	f001 ff7b 	bl	8014530 <memcpy>
 801263a:	e00a      	b.n	8012652 <_ZN9PS4Parser5ParseEhPh+0x9a>
                } else {
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nUnknown report id: "), 0x80);
 801263c:	2180      	movs	r1, #128	; 0x80
 801263e:	484a      	ldr	r0, [pc, #296]	; (8012768 <_ZN9PS4Parser5ParseEhPh+0x1b0>)
 8012640:	f001 fe2a 	bl	8014298 <_Z8E_NotifyPKci>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	781b      	ldrb	r3, [r3, #0]
 8012648:	2180      	movs	r1, #128	; 0x80
 801264a:	4618      	mov	r0, r3
 801264c:	f7fe f921 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
#endif
                        return;
 8012650:	e084      	b.n	801275c <_ZN9PS4Parser5ParseEhPh+0x1a4>
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	689b      	ldr	r3, [r3, #8]
 8012656:	f3c3 0217 	ubfx	r2, r3, #0, #24
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801265e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8012662:	429a      	cmp	r2, r3
 8012664:	d06d      	beq.n	8012742 <_ZN9PS4Parser5ParseEhPh+0x18a>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	689b      	ldr	r3, [r3, #8]
 801266a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801266e:	461a      	mov	r2, r3
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012674:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8012678:	43db      	mvns	r3, r3
 801267a:	4013      	ands	r3, r2
 801267c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	b2d1      	uxtb	r1, r2
 8012684:	2000      	movs	r0, #0
 8012686:	4301      	orrs	r1, r0
 8012688:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 801268c:	0a12      	lsrs	r2, r2, #8
 801268e:	b292      	uxth	r2, r2
 8012690:	2100      	movs	r1, #0
 8012692:	430a      	orrs	r2, r1
 8012694:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	689b      	ldr	r3, [r3, #8]
 801269c:	f3c3 0117 	ubfx	r1, r3, #0, #24
 80126a0:	68fa      	ldr	r2, [r7, #12]
 80126a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80126a4:	f361 0317 	bfi	r3, r1, #0, #24
 80126a8:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 80126aa:	2300      	movs	r3, #0
 80126ac:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 80126ae:	2100      	movs	r1, #0
 80126b0:	68f8      	ldr	r0, [r7, #12]
 80126b2:	f7ff fe6f 	bl	8012394 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80126b6:	4603      	mov	r3, r0
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d003      	beq.n	80126c4 <_ZN9PS4Parser5ParseEhPh+0x10c>
                                newDpad |= 1 << UP;
 80126bc:	7dfb      	ldrb	r3, [r7, #23]
 80126be:	f043 0301 	orr.w	r3, r3, #1
 80126c2:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 80126c4:	2101      	movs	r1, #1
 80126c6:	68f8      	ldr	r0, [r7, #12]
 80126c8:	f7ff fe64 	bl	8012394 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80126cc:	4603      	mov	r3, r0
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d003      	beq.n	80126da <_ZN9PS4Parser5ParseEhPh+0x122>
                                newDpad |= 1 << RIGHT;
 80126d2:	7dfb      	ldrb	r3, [r7, #23]
 80126d4:	f043 0302 	orr.w	r3, r3, #2
 80126d8:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 80126da:	2102      	movs	r1, #2
 80126dc:	68f8      	ldr	r0, [r7, #12]
 80126de:	f7ff fe59 	bl	8012394 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80126e2:	4603      	mov	r3, r0
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d003      	beq.n	80126f0 <_ZN9PS4Parser5ParseEhPh+0x138>
                                newDpad |= 1 << DOWN;
 80126e8:	7dfb      	ldrb	r3, [r7, #23]
 80126ea:	f043 0304 	orr.w	r3, r3, #4
 80126ee:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 80126f0:	2103      	movs	r1, #3
 80126f2:	68f8      	ldr	r0, [r7, #12]
 80126f4:	f7ff fe4e 	bl	8012394 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80126f8:	4603      	mov	r3, r0
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d003      	beq.n	8012706 <_ZN9PS4Parser5ParseEhPh+0x14e>
                                newDpad |= 1 << LEFT;
 80126fe:	7dfb      	ldrb	r3, [r7, #23]
 8012700:	f043 0308 	orr.w	r3, r3, #8
 8012704:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801270c:	7dfa      	ldrb	r2, [r7, #23]
 801270e:	429a      	cmp	r2, r3
 8012710:	d017      	beq.n	8012742 <_ZN9PS4Parser5ParseEhPh+0x18a>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012718:	b25b      	sxtb	r3, r3
 801271a:	43db      	mvns	r3, r3
 801271c:	b25a      	sxtb	r2, r3
 801271e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012722:	4013      	ands	r3, r2
 8012724:	b25b      	sxtb	r3, r3
 8012726:	f003 030f 	and.w	r3, r3, #15
 801272a:	b2d9      	uxtb	r1, r3
 801272c:	68fa      	ldr	r2, [r7, #12]
 801272e:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8012732:	f361 0303 	bfi	r3, r1, #0, #4
 8012736:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	7dfa      	ldrb	r2, [r7, #23]
 801273e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012748:	2b00      	cmp	r3, #0
 801274a:	d007      	beq.n	801275c <_ZN9PS4Parser5ParseEhPh+0x1a4>
                sendOutputReport(&ps4Output); // Send output report
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	68fa      	ldr	r2, [r7, #12]
 8012754:	3246      	adds	r2, #70	; 0x46
 8012756:	4611      	mov	r1, r2
 8012758:	68f8      	ldr	r0, [r7, #12]
 801275a:	4798      	blx	r3
}
 801275c:	3718      	adds	r7, #24
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
 8012762:	bf00      	nop
 8012764:	0801547c 	.word	0x0801547c
 8012768:	08015494 	.word	0x08015494

0801276c <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 801276c:	b480      	push	{r7}
 801276e:	b085      	sub	sp, #20
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8012774:	2300      	movs	r3, #0
 8012776:	73fb      	strb	r3, [r7, #15]
 8012778:	7bfb      	ldrb	r3, [r7, #15]
 801277a:	2b03      	cmp	r3, #3
 801277c:	d808      	bhi.n	8012790 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 801277e:	7bfb      	ldrb	r3, [r7, #15]
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	4413      	add	r3, r2
 8012784:	227f      	movs	r2, #127	; 0x7f
 8012786:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8012788:	7bfb      	ldrb	r3, [r7, #15]
 801278a:	3301      	adds	r3, #1
 801278c:	73fb      	strb	r3, [r7, #15]
 801278e:	e7f3      	b.n	8012778 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 8012790:	687a      	ldr	r2, [r7, #4]
 8012792:	6893      	ldr	r3, [r2, #8]
 8012794:	f36f 0317 	bfc	r3, #0, #24
 8012798:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 801279a:	687a      	ldr	r2, [r7, #4]
 801279c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801279e:	f36f 0317 	bfc	r3, #0, #24
 80127a2:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 80127a4:	2300      	movs	r3, #0
 80127a6:	73fb      	strb	r3, [r7, #15]
 80127a8:	7bfb      	ldrb	r3, [r7, #15]
 80127aa:	2b01      	cmp	r3, #1
 80127ac:	d808      	bhi.n	80127c0 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 80127ae:	7bfb      	ldrb	r3, [r7, #15]
 80127b0:	687a      	ldr	r2, [r7, #4]
 80127b2:	4413      	add	r3, r2
 80127b4:	2200      	movs	r2, #0
 80127b6:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 80127b8:	7bfb      	ldrb	r3, [r7, #15]
 80127ba:	3301      	adds	r3, #1
 80127bc:	73fb      	strb	r3, [r7, #15]
 80127be:	e7f3      	b.n	80127a8 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 80127c0:	2300      	movs	r3, #0
 80127c2:	73fb      	strb	r3, [r7, #15]
 80127c4:	7bfb      	ldrb	r3, [r7, #15]
 80127c6:	2b02      	cmp	r3, #2
 80127c8:	d81b      	bhi.n	8012802 <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 80127ca:	2300      	movs	r3, #0
 80127cc:	73bb      	strb	r3, [r7, #14]
 80127ce:	7bbb      	ldrb	r3, [r7, #14]
 80127d0:	2b01      	cmp	r3, #1
 80127d2:	d812      	bhi.n	80127fa <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 80127d4:	7bfa      	ldrb	r2, [r7, #15]
 80127d6:	7bbb      	ldrb	r3, [r7, #14]
 80127d8:	6879      	ldr	r1, [r7, #4]
 80127da:	0098      	lsls	r0, r3, #2
 80127dc:	4613      	mov	r3, r2
 80127de:	00db      	lsls	r3, r3, #3
 80127e0:	4413      	add	r3, r2
 80127e2:	4403      	add	r3, r0
 80127e4:	440b      	add	r3, r1
 80127e6:	f103 0220 	add.w	r2, r3, #32
 80127ea:	7993      	ldrb	r3, [r2, #6]
 80127ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127f0:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 80127f2:	7bbb      	ldrb	r3, [r7, #14]
 80127f4:	3301      	adds	r3, #1
 80127f6:	73bb      	strb	r3, [r7, #14]
 80127f8:	e7e9      	b.n	80127ce <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 80127fa:	7bfb      	ldrb	r3, [r7, #15]
 80127fc:	3301      	adds	r3, #1
 80127fe:	73fb      	strb	r3, [r7, #15]
 8012800:	e7e0      	b.n	80127c4 <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 8012802:	687a      	ldr	r2, [r7, #4]
 8012804:	7a13      	ldrb	r3, [r2, #8]
 8012806:	2108      	movs	r1, #8
 8012808:	f361 0303 	bfi	r3, r1, #0, #4
 801280c:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8012814:	2108      	movs	r1, #8
 8012816:	f361 0303 	bfi	r3, r1, #0, #4
 801281a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8012824:	f36f 0303 	bfc	r3, #0, #4
 8012828:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2200      	movs	r2, #0
 8012830:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2200      	movs	r2, #0
 8012838:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	2200      	movs	r2, #0
 801284c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2200      	movs	r2, #0
 801286c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2200      	movs	r2, #0
 8012880:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8012884:	bf00      	nop
 8012886:	3714      	adds	r7, #20
 8012888:	46bd      	mov	sp, r7
 801288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288e:	4770      	bx	lr

08012890 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8012890:	b580      	push	{r7, lr}
 8012892:	af00      	add	r7, sp, #0
 8012894:	2180      	movs	r1, #128	; 0x80
 8012896:	4803      	ldr	r0, [pc, #12]	; (80128a4 <_ZN2P95IsSetEv+0x14>)
 8012898:	f7f0 f8e8 	bl	8002a6c <HAL_GPIO_ReadPin>
 801289c:	4603      	mov	r3, r0
 801289e:	4618      	mov	r0, r3
 80128a0:	bd80      	pop	{r7, pc}
 80128a2:	bf00      	nop
 80128a4:	40020800 	.word	0x40020800

080128a8 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f001 f9dd 	bl	8013c70 <_ZN8MAX3421eI3P102P9EC1Ev>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4618      	mov	r0, r3
 80128ba:	f001 f9f5 	bl	8013ca8 <_ZN15AddressPoolImplILh16EEC1Ev>
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2200      	movs	r2, #0
 80128c2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 80128c6:	4b05      	ldr	r3, [pc, #20]	; (80128dc <_ZN3USBC1Ev+0x34>)
 80128c8:	2211      	movs	r2, #17
 80128ca:	701a      	strb	r2, [r3, #0]
        init();
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f000 f807 	bl	80128e0 <_ZN3USB4initEv>
}
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	4618      	mov	r0, r3
 80128d6:	3708      	adds	r7, #8
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}
 80128dc:	200053fd 	.word	0x200053fd

080128e0 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 80128e0:	b480      	push	{r7}
 80128e2:	b083      	sub	sp, #12
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2200      	movs	r2, #0
 80128ec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 80128f0:	bf00      	nop
 80128f2:	370c      	adds	r7, #12
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr

080128fc <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b086      	sub	sp, #24
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	460b      	mov	r3, r1
 8012906:	70fb      	strb	r3, [r7, #3]
 8012908:	4613      	mov	r3, r2
 801290a:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	78fa      	ldrb	r2, [r7, #3]
 8012910:	4611      	mov	r1, r2
 8012912:	4618      	mov	r0, r3
 8012914:	f001 fa02 	bl	8013d1c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8012918:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d003      	beq.n	8012928 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d101      	bne.n	801292c <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8012928:	2300      	movs	r3, #0
 801292a:	e018      	b.n	801295e <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8012932:	2300      	movs	r3, #0
 8012934:	74fb      	strb	r3, [r7, #19]
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	795b      	ldrb	r3, [r3, #5]
 801293a:	7cfa      	ldrb	r2, [r7, #19]
 801293c:	429a      	cmp	r2, r3
 801293e:	d20d      	bcs.n	801295c <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8012940:	697b      	ldr	r3, [r7, #20]
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	78ba      	ldrb	r2, [r7, #2]
 8012946:	429a      	cmp	r2, r3
 8012948:	d101      	bne.n	801294e <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	e007      	b.n	801295e <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	3303      	adds	r3, #3
 8012952:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8012954:	7cfb      	ldrb	r3, [r7, #19]
 8012956:	3301      	adds	r3, #1
 8012958:	74fb      	strb	r3, [r7, #19]
 801295a:	e7ec      	b.n	8012936 <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 801295c:	2300      	movs	r3, #0
}
 801295e:	4618      	mov	r0, r3
 8012960:	3718      	adds	r7, #24
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}

08012966 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8012966:	b580      	push	{r7, lr}
 8012968:	b086      	sub	sp, #24
 801296a:	af00      	add	r7, sp, #0
 801296c:	60f8      	str	r0, [r7, #12]
 801296e:	607b      	str	r3, [r7, #4]
 8012970:	460b      	mov	r3, r1
 8012972:	72fb      	strb	r3, [r7, #11]
 8012974:	4613      	mov	r3, r2
 8012976:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d101      	bne.n	8012982 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 801297e:	23d8      	movs	r3, #216	; 0xd8
 8012980:	e015      	b.n	80129ae <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	7afa      	ldrb	r2, [r7, #11]
 8012986:	4611      	mov	r1, r2
 8012988:	4618      	mov	r0, r3
 801298a:	f001 f9c7 	bl	8013d1c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 801298e:	6178      	str	r0, [r7, #20]

        if(!p)
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d101      	bne.n	801299a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012996:	23d6      	movs	r3, #214	; 0xd6
 8012998:	e009      	b.n	80129ae <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	7afa      	ldrb	r2, [r7, #11]
 801299e:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	687a      	ldr	r2, [r7, #4]
 80129a4:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	7aba      	ldrb	r2, [r7, #10]
 80129aa:	715a      	strb	r2, [r3, #5]

        return 0;
 80129ac:	2300      	movs	r3, #0
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3718      	adds	r7, #24
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}

080129b6 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 80129b6:	b580      	push	{r7, lr}
 80129b8:	b086      	sub	sp, #24
 80129ba:	af00      	add	r7, sp, #0
 80129bc:	60f8      	str	r0, [r7, #12]
 80129be:	607b      	str	r3, [r7, #4]
 80129c0:	460b      	mov	r3, r1
 80129c2:	72fb      	strb	r3, [r7, #11]
 80129c4:	4613      	mov	r3, r2
 80129c6:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	7afa      	ldrb	r2, [r7, #11]
 80129cc:	4611      	mov	r1, r2
 80129ce:	4618      	mov	r0, r3
 80129d0:	f001 f9a4 	bl	8013d1c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 80129d4:	6178      	str	r0, [r7, #20]

        if(!p)
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d101      	bne.n	80129e0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80129dc:	23d6      	movs	r3, #214	; 0xd6
 80129de:	e04e      	b.n	8012a7e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d101      	bne.n	80129ec <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 80129e8:	23d7      	movs	r3, #215	; 0xd7
 80129ea:	e048      	b.n	8012a7e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 80129ec:	7aba      	ldrb	r2, [r7, #10]
 80129ee:	7afb      	ldrb	r3, [r7, #11]
 80129f0:	4619      	mov	r1, r3
 80129f2:	68f8      	ldr	r0, [r7, #12]
 80129f4:	f7ff ff82 	bl	80128fc <_ZN3USB14getEpInfoEntryEhh>
 80129f8:	4602      	mov	r2, r0
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d101      	bne.n	8012a0a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 8012a06:	23db      	movs	r3, #219	; 0xdb
 8012a08:	e039      	b.n	8012a7e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	789b      	ldrb	r3, [r3, #2]
 8012a10:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8012a14:	b2db      	uxtb	r3, r3
 8012a16:	2b0f      	cmp	r3, #15
 8012a18:	bf28      	it	cs
 8012a1a:	230f      	movcs	r3, #15
 8012a1c:	b2db      	uxtb	r3, r3
 8012a1e:	461a      	mov	r2, r3
 8012a20:	2301      	movs	r3, #1
 8012a22:	4093      	lsls	r3, r2
 8012a24:	b29a      	uxth	r2, r3
 8012a26:	6a3b      	ldr	r3, [r7, #32]
 8012a28:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8012a2a:	6a3b      	ldr	r3, [r7, #32]
 8012a2c:	881b      	ldrh	r3, [r3, #0]
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	b29a      	uxth	r2, r3
 8012a32:	6a3b      	ldr	r3, [r7, #32]
 8012a34:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 8012a36:	7afb      	ldrb	r3, [r7, #11]
 8012a38:	461a      	mov	r2, r3
 8012a3a:	21e0      	movs	r1, #224	; 0xe0
 8012a3c:	68f8      	ldr	r0, [r7, #12]
 8012a3e:	f7ef fa03 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 8012a42:	21d8      	movs	r1, #216	; 0xd8
 8012a44:	68f8      	ldr	r0, [r7, #12]
 8012a46:	f7ef fa51 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	799b      	ldrb	r3, [r3, #6]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d009      	beq.n	8012a6a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8012a5c:	7cfb      	ldrb	r3, [r7, #19]
 8012a5e:	4313      	orrs	r3, r2
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	f043 0302 	orr.w	r3, r3, #2
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	e003      	b.n	8012a72 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8012a6a:	7cfb      	ldrb	r3, [r7, #19]
 8012a6c:	f023 0306 	bic.w	r3, r3, #6
 8012a70:	b2db      	uxtb	r3, r3
 8012a72:	461a      	mov	r2, r3
 8012a74:	21d8      	movs	r1, #216	; 0xd8
 8012a76:	68f8      	ldr	r0, [r7, #12]
 8012a78:	f7ef f9e6 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8012a7c:	2300      	movs	r3, #0
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3718      	adds	r7, #24
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}

08012a86 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 8012a86:	b590      	push	{r4, r7, lr}
 8012a88:	b08b      	sub	sp, #44	; 0x2c
 8012a8a:	af02      	add	r7, sp, #8
 8012a8c:	6078      	str	r0, [r7, #4]
 8012a8e:	4608      	mov	r0, r1
 8012a90:	4611      	mov	r1, r2
 8012a92:	461a      	mov	r2, r3
 8012a94:	4603      	mov	r3, r0
 8012a96:	70fb      	strb	r3, [r7, #3]
 8012a98:	460b      	mov	r3, r1
 8012a9a:	70bb      	strb	r3, [r7, #2]
 8012a9c:	4613      	mov	r3, r2
 8012a9e:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8012aac:	f107 000c 	add.w	r0, r7, #12
 8012ab0:	78ba      	ldrb	r2, [r7, #2]
 8012ab2:	78f9      	ldrb	r1, [r7, #3]
 8012ab4:	f107 030a 	add.w	r3, r7, #10
 8012ab8:	9300      	str	r3, [sp, #0]
 8012aba:	4603      	mov	r3, r0
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f7ff ff7a 	bl	80129b6 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 8012ac6:	7ffb      	ldrb	r3, [r7, #31]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d001      	beq.n	8012ad0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8012acc:	7ffb      	ldrb	r3, [r7, #31]
 8012ace:	e0ae      	b.n	8012c2e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8012ad0:	787b      	ldrb	r3, [r7, #1]
 8012ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	bfcc      	ite	gt
 8012ada:	2301      	movgt	r3, #1
 8012adc:	2300      	movle	r3, #0
 8012ade:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8012ae0:	787b      	ldrb	r3, [r7, #1]
 8012ae2:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 8012ae4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8012ae8:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8012aea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012aee:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8012af0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012af4:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 8012af6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012af8:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8012afa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012afe:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8012b00:	f107 0310 	add.w	r3, r7, #16
 8012b04:	2208      	movs	r2, #8
 8012b06:	2120      	movs	r1, #32
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f001 f92d 	bl	8013d68 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8012b0e:	897b      	ldrh	r3, [r7, #10]
 8012b10:	78ba      	ldrb	r2, [r7, #2]
 8012b12:	2110      	movs	r1, #16
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f000 fb14 	bl	8013142 <_ZN3USB11dispatchPktEhht>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8012b1e:	7ffb      	ldrb	r3, [r7, #31]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d001      	beq.n	8012b28 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 8012b24:	7ffb      	ldrb	r3, [r7, #31]
 8012b26:	e082      	b.n	8012c2e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8012b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d072      	beq.n	8012c14 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8012b2e:	7efb      	ldrb	r3, [r7, #27]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d057      	beq.n	8012be4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 8012b34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012b38:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 8012b3a:	68fa      	ldr	r2, [r7, #12]
 8012b3c:	7893      	ldrb	r3, [r2, #2]
 8012b3e:	f043 0302 	orr.w	r3, r3, #2
 8012b42:	7093      	strb	r3, [r2, #2]

                        while(left) {
 8012b44:	8bbb      	ldrh	r3, [r7, #28]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d05f      	beq.n	8012c0a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 8012b4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012b4e:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 8012b50:	68f9      	ldr	r1, [r7, #12]
 8012b52:	897a      	ldrh	r2, [r7, #10]
 8012b54:	f107 0008 	add.w	r0, r7, #8
 8012b58:	2300      	movs	r3, #0
 8012b5a:	9301      	str	r3, [sp, #4]
 8012b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b5e:	9300      	str	r3, [sp, #0]
 8012b60:	4603      	mov	r3, r0
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f000 f8c8 	bl	8012cf8 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8012b6c:	7ffb      	ldrb	r3, [r7, #31]
 8012b6e:	2b06      	cmp	r3, #6
 8012b70:	d114      	bne.n	8012b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8012b72:	21f8      	movs	r1, #248	; 0xf8
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f7ef f9b9 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	f003 0320 	and.w	r3, r3, #32
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	bf0c      	ite	eq
 8012b84:	2301      	moveq	r3, #1
 8012b86:	2300      	movne	r3, #0
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	68fa      	ldr	r2, [r7, #12]
 8012b8c:	f003 0301 	and.w	r3, r3, #1
 8012b90:	b2d9      	uxtb	r1, r3
 8012b92:	7893      	ldrb	r3, [r2, #2]
 8012b94:	f361 0341 	bfi	r3, r1, #1, #1
 8012b98:	7093      	strb	r3, [r2, #2]
 8012b9a:	e7d3      	b.n	8012b44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8012b9c:	7ffb      	ldrb	r3, [r7, #31]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d001      	beq.n	8012ba6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 8012ba2:	7ffb      	ldrb	r3, [r7, #31]
 8012ba4:	e043      	b.n	8012c2e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 8012ba6:	7ffb      	ldrb	r3, [r7, #31]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d111      	bne.n	8012bd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8012bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d00e      	beq.n	8012bd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 8012bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	681c      	ldr	r4, [r3, #0]
 8012bb8:	8939      	ldrh	r1, [r7, #8]
 8012bba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012bbe:	8bbb      	ldrh	r3, [r7, #28]
 8012bc0:	1ad3      	subs	r3, r2, r3
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	833b      	strh	r3, [r7, #24]
 8012bc6:	f107 0318 	add.w	r3, r7, #24
 8012bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bcc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012bce:	47a0      	blx	r4

                                left -= read;
 8012bd0:	893b      	ldrh	r3, [r7, #8]
 8012bd2:	8bba      	ldrh	r2, [r7, #28]
 8012bd4:	1ad3      	subs	r3, r2, r3
 8012bd6:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8012bd8:	893b      	ldrh	r3, [r7, #8]
 8012bda:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d812      	bhi.n	8012c08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 8012be2:	e7af      	b.n	8012b44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 8012be4:	68fa      	ldr	r2, [r7, #12]
 8012be6:	7893      	ldrb	r3, [r2, #2]
 8012be8:	f043 0301 	orr.w	r3, r3, #1
 8012bec:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8012bee:	68f9      	ldr	r1, [r7, #12]
 8012bf0:	897a      	ldrh	r2, [r7, #10]
 8012bf2:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8012bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bf8:	9300      	str	r3, [sp, #0]
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f000 f975 	bl	8012eec <_ZN3USB11OutTransferEP6EpInfottPh>
 8012c02:	4603      	mov	r3, r0
 8012c04:	77fb      	strb	r3, [r7, #31]
 8012c06:	e000      	b.n	8012c0a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 8012c08:	bf00      	nop
                }
                if(rcode) //return error
 8012c0a:	7ffb      	ldrb	r3, [r7, #31]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d001      	beq.n	8012c14 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8012c10:	7ffb      	ldrb	r3, [r7, #31]
 8012c12:	e00c      	b.n	8012c2e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 8012c14:	7efb      	ldrb	r3, [r7, #27]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d001      	beq.n	8012c1e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 8012c1a:	21a0      	movs	r1, #160	; 0xa0
 8012c1c:	e000      	b.n	8012c20 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 8012c1e:	2180      	movs	r1, #128	; 0x80
 8012c20:	897b      	ldrh	r3, [r7, #10]
 8012c22:	78ba      	ldrb	r2, [r7, #2]
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f000 fa8c 	bl	8013142 <_ZN3USB11dispatchPktEhht>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	bf00      	nop
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3724      	adds	r7, #36	; 0x24
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd90      	pop	{r4, r7, pc}
	...

08012c38 <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b08a      	sub	sp, #40	; 0x28
 8012c3c:	af02      	add	r7, sp, #8
 8012c3e:	60f8      	str	r0, [r7, #12]
 8012c40:	607b      	str	r3, [r7, #4]
 8012c42:	460b      	mov	r3, r1
 8012c44:	72fb      	strb	r3, [r7, #11]
 8012c46:	4613      	mov	r3, r2
 8012c48:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8012c52:	f107 0018 	add.w	r0, r7, #24
 8012c56:	7aba      	ldrb	r2, [r7, #10]
 8012c58:	7af9      	ldrb	r1, [r7, #11]
 8012c5a:	f107 0316 	add.w	r3, r7, #22
 8012c5e:	9300      	str	r3, [sp, #0]
 8012c60:	4603      	mov	r3, r0
 8012c62:	68f8      	ldr	r0, [r7, #12]
 8012c64:	f7ff fea7 	bl	80129b6 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 8012c6c:	7ffb      	ldrb	r3, [r7, #31]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d028      	beq.n	8012cc4 <_ZN3USB10inTransferEhhPtPhh+0x8c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 8012c72:	2181      	movs	r1, #129	; 0x81
 8012c74:	481c      	ldr	r0, [pc, #112]	; (8012ce8 <_ZN3USB10inTransferEhhPtPhh+0xb0>)
 8012c76:	f001 fb0f 	bl	8014298 <_Z8E_NotifyPKci>
 8012c7a:	7ffb      	ldrb	r3, [r7, #31]
 8012c7c:	2181      	movs	r1, #129	; 0x81
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7fd fe07 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
 8012c84:	2181      	movs	r1, #129	; 0x81
 8012c86:	4819      	ldr	r0, [pc, #100]	; (8012cec <_ZN3USB10inTransferEhhPtPhh+0xb4>)
 8012c88:	f001 fb06 	bl	8014298 <_Z8E_NotifyPKci>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 8012c8c:	2181      	movs	r1, #129	; 0x81
 8012c8e:	4818      	ldr	r0, [pc, #96]	; (8012cf0 <_ZN3USB10inTransferEhhPtPhh+0xb8>)
 8012c90:	f001 fb02 	bl	8014298 <_Z8E_NotifyPKci>
 8012c94:	7afb      	ldrb	r3, [r7, #11]
 8012c96:	2181      	movs	r1, #129	; 0x81
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7fd fdfa 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
 8012c9e:	2181      	movs	r1, #129	; 0x81
 8012ca0:	4812      	ldr	r0, [pc, #72]	; (8012cec <_ZN3USB10inTransferEhhPtPhh+0xb4>)
 8012ca2:	f001 faf9 	bl	8014298 <_Z8E_NotifyPKci>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 8012ca6:	2181      	movs	r1, #129	; 0x81
 8012ca8:	4812      	ldr	r0, [pc, #72]	; (8012cf4 <_ZN3USB10inTransferEhhPtPhh+0xbc>)
 8012caa:	f001 faf5 	bl	8014298 <_Z8E_NotifyPKci>
 8012cae:	7abb      	ldrb	r3, [r7, #10]
 8012cb0:	2181      	movs	r1, #129	; 0x81
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7fd fded 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
 8012cb8:	2181      	movs	r1, #129	; 0x81
 8012cba:	480c      	ldr	r0, [pc, #48]	; (8012cec <_ZN3USB10inTransferEhhPtPhh+0xb4>)
 8012cbc:	f001 faec 	bl	8014298 <_Z8E_NotifyPKci>
                return rcode;
 8012cc0:	7ffb      	ldrb	r3, [r7, #31]
 8012cc2:	e00c      	b.n	8012cde <_ZN3USB10inTransferEhhPtPhh+0xa6>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 8012cc4:	69b9      	ldr	r1, [r7, #24]
 8012cc6:	8afa      	ldrh	r2, [r7, #22]
 8012cc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012ccc:	9301      	str	r3, [sp, #4]
 8012cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd0:	9300      	str	r3, [sp, #0]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	68f8      	ldr	r0, [r7, #12]
 8012cd6:	f000 f80f 	bl	8012cf8 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	bf00      	nop
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3720      	adds	r7, #32
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	080154ac 	.word	0x080154ac
 8012cec:	080154d4 	.word	0x080154d4
 8012cf0:	080154d8 	.word	0x080154d8
 8012cf4:	080154fc 	.word	0x080154fc

08012cf8 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b086      	sub	sp, #24
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	60f8      	str	r0, [r7, #12]
 8012d00:	60b9      	str	r1, [r7, #8]
 8012d02:	603b      	str	r3, [r7, #0]
 8012d04:	4613      	mov	r3, r2
 8012d06:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	881b      	ldrh	r3, [r3, #0]
 8012d10:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	785b      	ldrb	r3, [r3, #1]
 8012d16:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	789b      	ldrb	r3, [r3, #2]
 8012d22:	f003 0302 	and.w	r3, r3, #2
 8012d26:	b2db      	uxtb	r3, r3
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d001      	beq.n	8012d30 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8012d2c:	2320      	movs	r3, #32
 8012d2e:	e000      	b.n	8012d32 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8012d30:	2310      	movs	r3, #16
 8012d32:	461a      	mov	r2, r3
 8012d34:	21e8      	movs	r1, #232	; 0xe8
 8012d36:	68f8      	ldr	r0, [r7, #12]
 8012d38:	f7ef f886 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8012d3c:	68bb      	ldr	r3, [r7, #8]
 8012d3e:	781a      	ldrb	r2, [r3, #0]
 8012d40:	88fb      	ldrh	r3, [r7, #6]
 8012d42:	2100      	movs	r1, #0
 8012d44:	68f8      	ldr	r0, [r7, #12]
 8012d46:	f000 f9fc 	bl	8013142 <_ZN3USB11dispatchPktEhht>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 8012d4e:	7dfb      	ldrb	r3, [r7, #23]
 8012d50:	2b06      	cmp	r3, #6
 8012d52:	d123      	bne.n	8012d9c <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 8012d54:	21f8      	movs	r1, #248	; 0xf8
 8012d56:	68f8      	ldr	r0, [r7, #12]
 8012d58:	f7ef f8c8 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	f003 0310 	and.w	r3, r3, #16
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	bf0c      	ite	eq
 8012d66:	2301      	moveq	r3, #1
 8012d68:	2300      	movne	r3, #0
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	f003 0301 	and.w	r3, r3, #1
 8012d70:	b2d9      	uxtb	r1, r3
 8012d72:	68ba      	ldr	r2, [r7, #8]
 8012d74:	7893      	ldrb	r3, [r2, #2]
 8012d76:	f361 0341 	bfi	r3, r1, #1, #1
 8012d7a:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	789b      	ldrb	r3, [r3, #2]
 8012d80:	f003 0302 	and.w	r3, r3, #2
 8012d84:	b2db      	uxtb	r3, r3
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d001      	beq.n	8012d8e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 8012d8a:	2320      	movs	r3, #32
 8012d8c:	e000      	b.n	8012d90 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 8012d8e:	2310      	movs	r3, #16
 8012d90:	461a      	mov	r2, r3
 8012d92:	21e8      	movs	r1, #232	; 0xe8
 8012d94:	68f8      	ldr	r0, [r7, #12]
 8012d96:	f7ef f857 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 8012d9a:	e06e      	b.n	8012e7a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 8012d9c:	7dfb      	ldrb	r3, [r7, #23]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d16c      	bne.n	8012e7c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 8012da2:	21c8      	movs	r1, #200	; 0xc8
 8012da4:	68f8      	ldr	r0, [r7, #12]
 8012da6:	f7ef f8a1 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012daa:	4603      	mov	r3, r0
 8012dac:	f003 0304 	and.w	r3, r3, #4
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	bf0c      	ite	eq
 8012db4:	2301      	moveq	r3, #1
 8012db6:	2300      	movne	r3, #0
 8012db8:	b2db      	uxtb	r3, r3
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d002      	beq.n	8012dc4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8012dbe:	23f0      	movs	r3, #240	; 0xf0
 8012dc0:	75fb      	strb	r3, [r7, #23]
                        break;
 8012dc2:	e05c      	b.n	8012e7e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8012dc4:	2130      	movs	r1, #48	; 0x30
 8012dc6:	68f8      	ldr	r0, [r7, #12]
 8012dc8:	f7ef f890 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8012dd0:	7dba      	ldrb	r2, [r7, #22]
 8012dd2:	8a7b      	ldrh	r3, [r7, #18]
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	dd01      	ble.n	8012ddc <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 8012dd8:	8a7b      	ldrh	r3, [r7, #18]
 8012dda:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012de2:	b29b      	uxth	r3, r3
 8012de4:	8a7a      	ldrh	r2, [r7, #18]
 8012de6:	1ad3      	subs	r3, r2, r3
 8012de8:	b29b      	uxth	r3, r3
 8012dea:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8012dec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	da01      	bge.n	8012df8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8012df4:	2300      	movs	r3, #0
 8012df6:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 8012df8:	7dba      	ldrb	r2, [r7, #22]
 8012dfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012dfe:	4293      	cmp	r3, r2
 8012e00:	bfa8      	it	ge
 8012e02:	4613      	movge	r3, r2
 8012e04:	b2da      	uxtb	r2, r3
 8012e06:	6a3b      	ldr	r3, [r7, #32]
 8012e08:	2108      	movs	r1, #8
 8012e0a:	68f8      	ldr	r0, [r7, #12]
 8012e0c:	f000 ffda 	bl	8013dc4 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8012e10:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8012e12:	2204      	movs	r2, #4
 8012e14:	21c8      	movs	r1, #200	; 0xc8
 8012e16:	68f8      	ldr	r0, [r7, #12]
 8012e18:	f7ef f816 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	881a      	ldrh	r2, [r3, #0]
 8012e20:	7dbb      	ldrb	r3, [r7, #22]
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	4413      	add	r3, r2
 8012e26:	b29a      	uxth	r2, r3
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8012e2c:	7dba      	ldrb	r2, [r7, #22]
 8012e2e:	7c7b      	ldrb	r3, [r7, #17]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d304      	bcc.n	8012e3e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	881b      	ldrh	r3, [r3, #0]
 8012e38:	8a7a      	ldrh	r2, [r7, #18]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d813      	bhi.n	8012e66 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8012e3e:	21f8      	movs	r1, #248	; 0xf8
 8012e40:	68f8      	ldr	r0, [r7, #12]
 8012e42:	f7ef f853 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012e46:	4603      	mov	r3, r0
 8012e48:	f003 0310 	and.w	r3, r3, #16
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d001      	beq.n	8012e54 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 8012e50:	2101      	movs	r1, #1
 8012e52:	e000      	b.n	8012e56 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 8012e54:	2100      	movs	r1, #0
 8012e56:	68ba      	ldr	r2, [r7, #8]
 8012e58:	7893      	ldrb	r3, [r2, #2]
 8012e5a:	f361 0341 	bfi	r3, r1, #1, #1
 8012e5e:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 8012e60:	2300      	movs	r3, #0
 8012e62:	75fb      	strb	r3, [r7, #23]
                        break;
 8012e64:	e00b      	b.n	8012e7e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 8012e66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	f43f af66 	beq.w	8012d3c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 8012e70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7ef fb5f 	bl	8002538 <HAL_Delay>
        } //while( 1 )
 8012e7a:	e75f      	b.n	8012d3c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 8012e7c:	bf00      	nop
        return ( rcode);
 8012e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3718      	adds	r7, #24
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b088      	sub	sp, #32
 8012e8c:	af02      	add	r7, sp, #8
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	4608      	mov	r0, r1
 8012e92:	4611      	mov	r1, r2
 8012e94:	461a      	mov	r2, r3
 8012e96:	4603      	mov	r3, r0
 8012e98:	70fb      	strb	r3, [r7, #3]
 8012e9a:	460b      	mov	r3, r1
 8012e9c:	70bb      	strb	r3, [r7, #2]
 8012e9e:	4613      	mov	r3, r2
 8012ea0:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8012eaa:	f107 0010 	add.w	r0, r7, #16
 8012eae:	78ba      	ldrb	r2, [r7, #2]
 8012eb0:	78f9      	ldrb	r1, [r7, #3]
 8012eb2:	f107 030e 	add.w	r3, r7, #14
 8012eb6:	9300      	str	r3, [sp, #0]
 8012eb8:	4603      	mov	r3, r0
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f7ff fd7b 	bl	80129b6 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8012ec4:	7dfb      	ldrb	r3, [r7, #23]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d001      	beq.n	8012ece <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 8012eca:	7dfb      	ldrb	r3, [r7, #23]
 8012ecc:	e00a      	b.n	8012ee4 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 8012ece:	6939      	ldr	r1, [r7, #16]
 8012ed0:	89fa      	ldrh	r2, [r7, #14]
 8012ed2:	8838      	ldrh	r0, [r7, #0]
 8012ed4:	6a3b      	ldr	r3, [r7, #32]
 8012ed6:	9300      	str	r3, [sp, #0]
 8012ed8:	4603      	mov	r3, r0
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	f000 f806 	bl	8012eec <_ZN3USB11OutTransferEP6EpInfottPh>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	bf00      	nop
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	3718      	adds	r7, #24
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}

08012eec <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b08a      	sub	sp, #40	; 0x28
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	60f8      	str	r0, [r7, #12]
 8012ef4:	60b9      	str	r1, [r7, #8]
 8012ef6:	4611      	mov	r1, r2
 8012ef8:	461a      	mov	r2, r3
 8012efa:	460b      	mov	r3, r1
 8012efc:	80fb      	strh	r3, [r7, #6]
 8012efe:	4613      	mov	r3, r2
 8012f00:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 8012f02:	2300      	movs	r3, #0
 8012f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 8012f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f0a:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 8012f0c:	88bb      	ldrh	r3, [r7, #4]
 8012f0e:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	785b      	ldrb	r3, [r3, #1]
 8012f14:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 8012f16:	7efb      	ldrb	r3, [r7, #27]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d002      	beq.n	8012f22 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 8012f1c:	7efb      	ldrb	r3, [r7, #27]
 8012f1e:	2b40      	cmp	r3, #64	; 0x40
 8012f20:	d901      	bls.n	8012f26 <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 8012f22:	23da      	movs	r3, #218	; 0xda
 8012f24:	e109      	b.n	801313a <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 8012f26:	f7ef fafb 	bl	8002520 <HAL_GetTick>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8012f30:	3308      	adds	r3, #8
 8012f32:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	789b      	ldrb	r3, [r3, #2]
 8012f38:	f003 0301 	and.w	r3, r3, #1
 8012f3c:	b2db      	uxtb	r3, r3
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d001      	beq.n	8012f46 <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 8012f42:	2380      	movs	r3, #128	; 0x80
 8012f44:	e000      	b.n	8012f48 <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 8012f46:	2340      	movs	r3, #64	; 0x40
 8012f48:	461a      	mov	r2, r3
 8012f4a:	21e8      	movs	r1, #232	; 0xe8
 8012f4c:	68f8      	ldr	r0, [r7, #12]
 8012f4e:	f7ee ff7b 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 8012f52:	8bbb      	ldrh	r3, [r7, #28]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	f000 80da 	beq.w	801310e <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 8012f60:	2300      	movs	r3, #0
 8012f62:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 8012f64:	7efb      	ldrb	r3, [r7, #27]
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	8bba      	ldrh	r2, [r7, #28]
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	bf28      	it	cs
 8012f6e:	4613      	movcs	r3, r2
 8012f70:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 8012f72:	8a7b      	ldrh	r3, [r7, #18]
 8012f74:	b2da      	uxtb	r2, r3
 8012f76:	6a3b      	ldr	r3, [r7, #32]
 8012f78:	2110      	movs	r1, #16
 8012f7a:	68f8      	ldr	r0, [r7, #12]
 8012f7c:	f000 fef4 	bl	8013d68 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 8012f80:	8a7b      	ldrh	r3, [r7, #18]
 8012f82:	b2db      	uxtb	r3, r3
 8012f84:	461a      	mov	r2, r3
 8012f86:	2138      	movs	r1, #56	; 0x38
 8012f88:	68f8      	ldr	r0, [r7, #12]
 8012f8a:	f7ee ff5d 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	781b      	ldrb	r3, [r3, #0]
 8012f92:	f043 0320 	orr.w	r3, r3, #32
 8012f96:	b2db      	uxtb	r3, r3
 8012f98:	461a      	mov	r2, r3
 8012f9a:	21f0      	movs	r1, #240	; 0xf0
 8012f9c:	68f8      	ldr	r0, [r7, #12]
 8012f9e:	f7ee ff53 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8012fa2:	21c8      	movs	r1, #200	; 0xc8
 8012fa4:	68f8      	ldr	r0, [r7, #12]
 8012fa6:	f7ee ffa1 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012faa:	4603      	mov	r3, r0
 8012fac:	b25b      	sxtb	r3, r3
 8012fae:	43db      	mvns	r3, r3
 8012fb0:	b2db      	uxtb	r3, r3
 8012fb2:	09db      	lsrs	r3, r3, #7
 8012fb4:	b2db      	uxtb	r3, r3
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d000      	beq.n	8012fbc <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 8012fba:	e7f2      	b.n	8012fa2 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8012fbc:	2280      	movs	r2, #128	; 0x80
 8012fbe:	21c8      	movs	r1, #200	; 0xc8
 8012fc0:	68f8      	ldr	r0, [r7, #12]
 8012fc2:	f7ee ff41 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 8012fc6:	21f8      	movs	r1, #248	; 0xf8
 8012fc8:	68f8      	ldr	r0, [r7, #12]
 8012fca:	f7ee ff8f 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	f003 030f 	and.w	r3, r3, #15
 8012fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 8012fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d008      	beq.n	8012ff2 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8012fe0:	f7ef fa9e 	bl	8002520 <HAL_GetTick>
 8012fe4:	4602      	mov	r2, r0
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	da01      	bge.n	8012ff2 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8012fee:	2301      	movs	r3, #1
 8012ff0:	e000      	b.n	8012ff4 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	f000 8081 	beq.w	80130fc <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 8012ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ffe:	2b0e      	cmp	r3, #14
 8013000:	d012      	beq.n	8013028 <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 8013002:	2b0e      	cmp	r3, #14
 8013004:	f300 8085 	bgt.w	8013112 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 8013008:	2b04      	cmp	r3, #4
 801300a:	d002      	beq.n	8013012 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 801300c:	2b06      	cmp	r3, #6
 801300e:	d015      	beq.n	801303c <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 8013010:	e07f      	b.n	8013112 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 8013012:	8bfb      	ldrh	r3, [r7, #30]
 8013014:	3301      	adds	r3, #1
 8013016:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 8013018:	88fb      	ldrh	r3, [r7, #6]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d032      	beq.n	8013084 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 801301e:	8bfa      	ldrh	r2, [r7, #30]
 8013020:	88fb      	ldrh	r3, [r7, #6]
 8013022:	429a      	cmp	r2, r3
 8013024:	d12e      	bne.n	8013084 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 8013026:	e075      	b.n	8013114 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 8013028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801302c:	3301      	adds	r3, #1
 801302e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 8013032:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013036:	2b03      	cmp	r3, #3
 8013038:	d126      	bne.n	8013088 <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 801303a:	e06b      	b.n	8013114 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 801303c:	21f8      	movs	r1, #248	; 0xf8
 801303e:	68f8      	ldr	r0, [r7, #12]
 8013040:	f7ee ff54 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013044:	4603      	mov	r3, r0
 8013046:	f003 0320 	and.w	r3, r3, #32
 801304a:	2b00      	cmp	r3, #0
 801304c:	bf0c      	ite	eq
 801304e:	2301      	moveq	r3, #1
 8013050:	2300      	movne	r3, #0
 8013052:	b2db      	uxtb	r3, r3
 8013054:	f003 0301 	and.w	r3, r3, #1
 8013058:	b2d9      	uxtb	r1, r3
 801305a:	68ba      	ldr	r2, [r7, #8]
 801305c:	7893      	ldrb	r3, [r2, #2]
 801305e:	f361 0300 	bfi	r3, r1, #0, #1
 8013062:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	789b      	ldrb	r3, [r3, #2]
 8013068:	f003 0301 	and.w	r3, r3, #1
 801306c:	b2db      	uxtb	r3, r3
 801306e:	2b00      	cmp	r3, #0
 8013070:	d001      	beq.n	8013076 <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 8013072:	2380      	movs	r3, #128	; 0x80
 8013074:	e000      	b.n	8013078 <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 8013076:	2340      	movs	r3, #64	; 0x40
 8013078:	461a      	mov	r2, r3
 801307a:	21e8      	movs	r1, #232	; 0xe8
 801307c:	68f8      	ldr	r0, [r7, #12]
 801307e:	f7ee fee3 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 8013082:	e002      	b.n	801308a <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 8013084:	bf00      	nop
 8013086:	e000      	b.n	801308a <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 8013088:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 801308a:	2200      	movs	r2, #0
 801308c:	2138      	movs	r1, #56	; 0x38
 801308e:	68f8      	ldr	r0, [r7, #12]
 8013090:	f7ee feda 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 8013094:	6a3b      	ldr	r3, [r7, #32]
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	461a      	mov	r2, r3
 801309a:	2110      	movs	r1, #16
 801309c:	68f8      	ldr	r0, [r7, #12]
 801309e:	f7ee fed3 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 80130a2:	8a7b      	ldrh	r3, [r7, #18]
 80130a4:	b2db      	uxtb	r3, r3
 80130a6:	461a      	mov	r2, r3
 80130a8:	2138      	movs	r1, #56	; 0x38
 80130aa:	68f8      	ldr	r0, [r7, #12]
 80130ac:	f7ee fecc 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	781b      	ldrb	r3, [r3, #0]
 80130b4:	f043 0320 	orr.w	r3, r3, #32
 80130b8:	b2db      	uxtb	r3, r3
 80130ba:	461a      	mov	r2, r3
 80130bc:	21f0      	movs	r1, #240	; 0xf0
 80130be:	68f8      	ldr	r0, [r7, #12]
 80130c0:	f7ee fec2 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 80130c4:	21c8      	movs	r1, #200	; 0xc8
 80130c6:	68f8      	ldr	r0, [r7, #12]
 80130c8:	f7ee ff10 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 80130cc:	4603      	mov	r3, r0
 80130ce:	b25b      	sxtb	r3, r3
 80130d0:	43db      	mvns	r3, r3
 80130d2:	b2db      	uxtb	r3, r3
 80130d4:	09db      	lsrs	r3, r3, #7
 80130d6:	b2db      	uxtb	r3, r3
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d000      	beq.n	80130de <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 80130dc:	e7f2      	b.n	80130c4 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 80130de:	2280      	movs	r2, #128	; 0x80
 80130e0:	21c8      	movs	r1, #200	; 0xc8
 80130e2:	68f8      	ldr	r0, [r7, #12]
 80130e4:	f7ee feb0 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 80130e8:	21f8      	movs	r1, #248	; 0xf8
 80130ea:	68f8      	ldr	r0, [r7, #12]
 80130ec:	f7ee fefe 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 80130f0:	4603      	mov	r3, r0
 80130f2:	f003 030f 	and.w	r3, r3, #15
 80130f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 80130fa:	e76d      	b.n	8012fd8 <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 80130fc:	8bba      	ldrh	r2, [r7, #28]
 80130fe:	8a7b      	ldrh	r3, [r7, #18]
 8013100:	1ad3      	subs	r3, r2, r3
 8013102:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 8013104:	8a7b      	ldrh	r3, [r7, #18]
 8013106:	6a3a      	ldr	r2, [r7, #32]
 8013108:	4413      	add	r3, r2
 801310a:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 801310c:	e721      	b.n	8012f52 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 801310e:	bf00      	nop
 8013110:	e000      	b.n	8013114 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 8013112:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 8013114:	21f8      	movs	r1, #248	; 0xf8
 8013116:	68f8      	ldr	r0, [r7, #12]
 8013118:	f7ee fee8 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 801311c:	4603      	mov	r3, r0
 801311e:	f003 0320 	and.w	r3, r3, #32
 8013122:	2b00      	cmp	r3, #0
 8013124:	d001      	beq.n	801312a <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 8013126:	2101      	movs	r1, #1
 8013128:	e000      	b.n	801312c <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 801312a:	2100      	movs	r1, #0
 801312c:	68ba      	ldr	r2, [r7, #8]
 801312e:	7893      	ldrb	r3, [r2, #2]
 8013130:	f361 0300 	bfi	r3, r1, #0, #1
 8013134:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 8013136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801313a:	4618      	mov	r0, r3
 801313c:	3728      	adds	r7, #40	; 0x28
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}

08013142 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 8013142:	b580      	push	{r7, lr}
 8013144:	b086      	sub	sp, #24
 8013146:	af00      	add	r7, sp, #0
 8013148:	6078      	str	r0, [r7, #4]
 801314a:	4608      	mov	r0, r1
 801314c:	4611      	mov	r1, r2
 801314e:	461a      	mov	r2, r3
 8013150:	4603      	mov	r3, r0
 8013152:	70fb      	strb	r3, [r7, #3]
 8013154:	460b      	mov	r3, r1
 8013156:	70bb      	strb	r3, [r7, #2]
 8013158:	4613      	mov	r3, r2
 801315a:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 801315c:	f7ef f9e0 	bl	8002520 <HAL_GetTick>
 8013160:	4603      	mov	r3, r0
 8013162:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013166:	3308      	adds	r3, #8
 8013168:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 801316a:	2300      	movs	r3, #0
 801316c:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 801316e:	2300      	movs	r3, #0
 8013170:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 8013172:	2300      	movs	r3, #0
 8013174:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8013176:	f7ef f9d3 	bl	8002520 <HAL_GetTick>
 801317a:	4602      	mov	r2, r0
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	1ad3      	subs	r3, r2, r3
 8013180:	0fdb      	lsrs	r3, r3, #31
 8013182:	b2db      	uxtb	r3, r3
 8013184:	2b00      	cmp	r3, #0
 8013186:	d04c      	beq.n	8013222 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 8013188:	78fa      	ldrb	r2, [r7, #3]
 801318a:	78bb      	ldrb	r3, [r7, #2]
 801318c:	4313      	orrs	r3, r2
 801318e:	b2db      	uxtb	r3, r3
 8013190:	461a      	mov	r2, r3
 8013192:	21f0      	movs	r1, #240	; 0xf0
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f7ee fe57 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 801319a:	23ff      	movs	r3, #255	; 0xff
 801319c:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 801319e:	f7ef f9bf 	bl	8002520 <HAL_GetTick>
 80131a2:	4602      	mov	r2, r0
 80131a4:	693b      	ldr	r3, [r7, #16]
 80131a6:	1ad3      	subs	r3, r2, r3
 80131a8:	0fdb      	lsrs	r3, r3, #31
 80131aa:	b2db      	uxtb	r3, r3
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d010      	beq.n	80131d2 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 80131b0:	21c8      	movs	r1, #200	; 0xc8
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f7ee fe9a 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 80131b8:	4603      	mov	r3, r0
 80131ba:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 80131bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	daec      	bge.n	801319e <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 80131c4:	2280      	movs	r2, #128	; 0x80
 80131c6:	21c8      	movs	r1, #200	; 0xc8
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f7ee fe3d 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 80131ce:	2300      	movs	r3, #0
 80131d0:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 80131d2:	21f8      	movs	r1, #248	; 0xf8
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f7ee fe89 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 80131da:	4603      	mov	r3, r0
 80131dc:	f003 030f 	and.w	r3, r3, #15
 80131e0:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 80131e2:	7dfb      	ldrb	r3, [r7, #23]
 80131e4:	2b04      	cmp	r3, #4
 80131e6:	d002      	beq.n	80131ee <_ZN3USB11dispatchPktEhht+0xac>
 80131e8:	2b0e      	cmp	r3, #14
 80131ea:	d00c      	beq.n	8013206 <_ZN3USB11dispatchPktEhht+0xc4>
 80131ec:	e013      	b.n	8013216 <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 80131ee:	8abb      	ldrh	r3, [r7, #20]
 80131f0:	3301      	adds	r3, #1
 80131f2:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 80131f4:	883b      	ldrh	r3, [r7, #0]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d00f      	beq.n	801321a <_ZN3USB11dispatchPktEhht+0xd8>
 80131fa:	8aba      	ldrh	r2, [r7, #20]
 80131fc:	883b      	ldrh	r3, [r7, #0]
 80131fe:	429a      	cmp	r2, r3
 8013200:	d10b      	bne.n	801321a <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 8013202:	7dfb      	ldrb	r3, [r7, #23]
 8013204:	e00e      	b.n	8013224 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 8013206:	7dbb      	ldrb	r3, [r7, #22]
 8013208:	3301      	adds	r3, #1
 801320a:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 801320c:	7dbb      	ldrb	r3, [r7, #22]
 801320e:	2b03      	cmp	r3, #3
 8013210:	d105      	bne.n	801321e <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 8013212:	7dfb      	ldrb	r3, [r7, #23]
 8013214:	e006      	b.n	8013224 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 8013216:	7dfb      	ldrb	r3, [r7, #23]
 8013218:	e004      	b.n	8013224 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 801321a:	bf00      	nop
 801321c:	e7ab      	b.n	8013176 <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 801321e:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8013220:	e7a9      	b.n	8013176 <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 8013222:	7dfb      	ldrb	r3, [r7, #23]
}
 8013224:	4618      	mov	r0, r3
 8013226:	3718      	adds	r7, #24
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}

0801322c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b084      	sub	sp, #16
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 8013234:	2300      	movs	r3, #0
 8013236:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f000 fdf1 	bl	8013e20 <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f000 fe06 	bl	8013e50 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 8013244:	4603      	mov	r3, r0
 8013246:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 8013248:	7b3b      	ldrb	r3, [r7, #12]
 801324a:	2b03      	cmp	r3, #3
 801324c:	d82e      	bhi.n	80132ac <_ZN3USB4TaskEv+0x80>
 801324e:	a201      	add	r2, pc, #4	; (adr r2, 8013254 <_ZN3USB4TaskEv+0x28>)
 8013250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013254:	08013271 	.word	0x08013271
 8013258:	08013265 	.word	0x08013265
 801325c:	0801328d 	.word	0x0801328d
 8013260:	08013289 	.word	0x08013289
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 8013264:	4bbf      	ldr	r3, [pc, #764]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 8013266:	2213      	movs	r2, #19
 8013268:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 801326a:	2300      	movs	r3, #0
 801326c:	73fb      	strb	r3, [r7, #15]
                        break;
 801326e:	e01d      	b.n	80132ac <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 8013270:	4bbc      	ldr	r3, [pc, #752]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013278:	2b10      	cmp	r3, #16
 801327a:	d002      	beq.n	8013282 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 801327c:	4bb9      	ldr	r3, [pc, #740]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 801327e:	2211      	movs	r2, #17
 8013280:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 8013282:	2300      	movs	r3, #0
 8013284:	73fb      	strb	r3, [r7, #15]
                        break;
 8013286:	e011      	b.n	80132ac <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 8013288:	2301      	movs	r3, #1
 801328a:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 801328c:	4bb5      	ldr	r3, [pc, #724]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013294:	2b10      	cmp	r3, #16
 8013296:	d108      	bne.n	80132aa <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 8013298:	f7ef f942 	bl	8002520 <HAL_GetTick>
 801329c:	4603      	mov	r3, r0
 801329e:	33c8      	adds	r3, #200	; 0xc8
 80132a0:	4ab1      	ldr	r2, [pc, #708]	; (8013568 <_ZN3USB4TaskEv+0x33c>)
 80132a2:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 80132a4:	4baf      	ldr	r3, [pc, #700]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 80132a6:	2220      	movs	r2, #32
 80132a8:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 80132aa:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80132ac:	2300      	movs	r3, #0
 80132ae:	73bb      	strb	r3, [r7, #14]
 80132b0:	7bbb      	ldrb	r3, [r7, #14]
 80132b2:	2b0f      	cmp	r3, #15
 80132b4:	d81b      	bhi.n	80132ee <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 80132b6:	7bba      	ldrb	r2, [r7, #14]
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	321e      	adds	r2, #30
 80132bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d010      	beq.n	80132e6 <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 80132c4:	7bba      	ldrb	r2, [r7, #14]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	321e      	adds	r2, #30
 80132ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80132ce:	7bba      	ldrb	r2, [r7, #14]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	321e      	adds	r2, #30
 80132d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	330c      	adds	r3, #12
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	4608      	mov	r0, r1
 80132e0:	4798      	blx	r3
 80132e2:	4603      	mov	r3, r0
 80132e4:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80132e6:	7bbb      	ldrb	r3, [r7, #14]
 80132e8:	3301      	adds	r3, #1
 80132ea:	73bb      	strb	r3, [r7, #14]
 80132ec:	e7e0      	b.n	80132b0 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 80132ee:	4b9d      	ldr	r3, [pc, #628]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	2ba0      	cmp	r3, #160	; 0xa0
 80132f4:	f000 8123 	beq.w	801353e <_ZN3USB4TaskEv+0x312>
 80132f8:	2ba0      	cmp	r3, #160	; 0xa0
 80132fa:	f300 812f 	bgt.w	801355c <_ZN3USB4TaskEv+0x330>
 80132fe:	2b90      	cmp	r3, #144	; 0x90
 8013300:	f000 811f 	beq.w	8013542 <_ZN3USB4TaskEv+0x316>
 8013304:	2b90      	cmp	r3, #144	; 0x90
 8013306:	f300 8129 	bgt.w	801355c <_ZN3USB4TaskEv+0x330>
 801330a:	2b80      	cmp	r3, #128	; 0x80
 801330c:	f000 80fe 	beq.w	801350c <_ZN3USB4TaskEv+0x2e0>
 8013310:	2b80      	cmp	r3, #128	; 0x80
 8013312:	f300 8123 	bgt.w	801355c <_ZN3USB4TaskEv+0x330>
 8013316:	2b51      	cmp	r3, #81	; 0x51
 8013318:	f000 80ea 	beq.w	80134f0 <_ZN3USB4TaskEv+0x2c4>
 801331c:	2b51      	cmp	r3, #81	; 0x51
 801331e:	f300 811d 	bgt.w	801355c <_ZN3USB4TaskEv+0x330>
 8013322:	2b40      	cmp	r3, #64	; 0x40
 8013324:	dc6a      	bgt.n	80133fc <_ZN3USB4TaskEv+0x1d0>
 8013326:	2b11      	cmp	r3, #17
 8013328:	f2c0 8118 	blt.w	801355c <_ZN3USB4TaskEv+0x330>
 801332c:	3b11      	subs	r3, #17
 801332e:	2b2f      	cmp	r3, #47	; 0x2f
 8013330:	f200 8114 	bhi.w	801355c <_ZN3USB4TaskEv+0x330>
 8013334:	a201      	add	r2, pc, #4	; (adr r2, 801333c <_ZN3USB4TaskEv+0x110>)
 8013336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801333a:	bf00      	nop
 801333c:	08013403 	.word	0x08013403
 8013340:	08013547 	.word	0x08013547
 8013344:	08013547 	.word	0x08013547
 8013348:	0801355d 	.word	0x0801355d
 801334c:	0801355d 	.word	0x0801355d
 8013350:	0801355d 	.word	0x0801355d
 8013354:	0801355d 	.word	0x0801355d
 8013358:	0801355d 	.word	0x0801355d
 801335c:	0801355d 	.word	0x0801355d
 8013360:	0801355d 	.word	0x0801355d
 8013364:	0801355d 	.word	0x0801355d
 8013368:	0801355d 	.word	0x0801355d
 801336c:	0801355d 	.word	0x0801355d
 8013370:	0801355d 	.word	0x0801355d
 8013374:	0801355d 	.word	0x0801355d
 8013378:	08013453 	.word	0x08013453
 801337c:	0801355d 	.word	0x0801355d
 8013380:	0801355d 	.word	0x0801355d
 8013384:	0801355d 	.word	0x0801355d
 8013388:	0801355d 	.word	0x0801355d
 801338c:	0801355d 	.word	0x0801355d
 8013390:	0801355d 	.word	0x0801355d
 8013394:	0801355d 	.word	0x0801355d
 8013398:	0801355d 	.word	0x0801355d
 801339c:	0801355d 	.word	0x0801355d
 80133a0:	0801355d 	.word	0x0801355d
 80133a4:	0801355d 	.word	0x0801355d
 80133a8:	0801355d 	.word	0x0801355d
 80133ac:	0801355d 	.word	0x0801355d
 80133b0:	0801355d 	.word	0x0801355d
 80133b4:	0801355d 	.word	0x0801355d
 80133b8:	0801346f 	.word	0x0801346f
 80133bc:	0801355d 	.word	0x0801355d
 80133c0:	0801355d 	.word	0x0801355d
 80133c4:	0801355d 	.word	0x0801355d
 80133c8:	0801355d 	.word	0x0801355d
 80133cc:	0801355d 	.word	0x0801355d
 80133d0:	0801355d 	.word	0x0801355d
 80133d4:	0801355d 	.word	0x0801355d
 80133d8:	0801355d 	.word	0x0801355d
 80133dc:	0801355d 	.word	0x0801355d
 80133e0:	0801355d 	.word	0x0801355d
 80133e4:	0801355d 	.word	0x0801355d
 80133e8:	0801355d 	.word	0x0801355d
 80133ec:	0801355d 	.word	0x0801355d
 80133f0:	0801355d 	.word	0x0801355d
 80133f4:	0801355d 	.word	0x0801355d
 80133f8:	08013481 	.word	0x08013481
 80133fc:	2b50      	cmp	r3, #80	; 0x50
 80133fe:	d05f      	beq.n	80134c0 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 8013400:	e0ac      	b.n	801355c <_ZN3USB4TaskEv+0x330>
                        init();
 8013402:	6878      	ldr	r0, [r7, #4]
 8013404:	f7ff fa6c 	bl	80128e0 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8013408:	2300      	movs	r3, #0
 801340a:	737b      	strb	r3, [r7, #13]
 801340c:	7b7b      	ldrb	r3, [r7, #13]
 801340e:	2b0f      	cmp	r3, #15
 8013410:	d81b      	bhi.n	801344a <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 8013412:	7b7a      	ldrb	r2, [r7, #13]
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	321e      	adds	r2, #30
 8013418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d010      	beq.n	8013442 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 8013420:	7b7a      	ldrb	r2, [r7, #13]
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	321e      	adds	r2, #30
 8013426:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801342a:	7b7a      	ldrb	r2, [r7, #13]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	321e      	adds	r2, #30
 8013430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	3308      	adds	r3, #8
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	4608      	mov	r0, r1
 801343c:	4798      	blx	r3
 801343e:	4603      	mov	r3, r0
 8013440:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8013442:	7b7b      	ldrb	r3, [r7, #13]
 8013444:	3301      	adds	r3, #1
 8013446:	737b      	strb	r3, [r7, #13]
 8013448:	e7e0      	b.n	801340c <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 801344a:	4b46      	ldr	r3, [pc, #280]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 801344c:	2212      	movs	r2, #18
 801344e:	701a      	strb	r2, [r3, #0]
                        break;
 8013450:	e084      	b.n	801355c <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 8013452:	f7ef f865 	bl	8002520 <HAL_GetTick>
 8013456:	4602      	mov	r2, r0
 8013458:	4b43      	ldr	r3, [pc, #268]	; (8013568 <_ZN3USB4TaskEv+0x33c>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	1ad3      	subs	r3, r2, r3
 801345e:	43db      	mvns	r3, r3
 8013460:	0fdb      	lsrs	r3, r3, #31
 8013462:	b2db      	uxtb	r3, r3
 8013464:	2b00      	cmp	r3, #0
 8013466:	d070      	beq.n	801354a <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8013468:	4b3e      	ldr	r3, [pc, #248]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 801346a:	2230      	movs	r2, #48	; 0x30
 801346c:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 801346e:	2201      	movs	r2, #1
 8013470:	21e8      	movs	r1, #232	; 0xe8
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f7ee fce8 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8013478:	4b3a      	ldr	r3, [pc, #232]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 801347a:	2240      	movs	r2, #64	; 0x40
 801347c:	701a      	strb	r2, [r3, #0]
                        break;
 801347e:	e06d      	b.n	801355c <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 8013480:	21e8      	movs	r1, #232	; 0xe8
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f7ee fd32 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013488:	4603      	mov	r3, r0
 801348a:	f003 0301 	and.w	r3, r3, #1
 801348e:	2b00      	cmp	r3, #0
 8013490:	bf0c      	ite	eq
 8013492:	2301      	moveq	r3, #1
 8013494:	2300      	movne	r3, #0
 8013496:	b2db      	uxtb	r3, r3
 8013498:	2b00      	cmp	r3, #0
 801349a:	d058      	beq.n	801354e <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 801349c:	21d8      	movs	r1, #216	; 0xd8
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f7ee fd24 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 80134a4:	4603      	mov	r3, r0
 80134a6:	f043 0308 	orr.w	r3, r3, #8
 80134aa:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 80134ac:	7b3b      	ldrb	r3, [r7, #12]
 80134ae:	461a      	mov	r2, r3
 80134b0:	21d8      	movs	r1, #216	; 0xd8
 80134b2:	6878      	ldr	r0, [r7, #4]
 80134b4:	f7ee fcc8 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 80134b8:	4b2a      	ldr	r3, [pc, #168]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 80134ba:	2250      	movs	r2, #80	; 0x50
 80134bc:	701a      	strb	r2, [r3, #0]
                        break;
 80134be:	e046      	b.n	801354e <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 80134c0:	21c8      	movs	r1, #200	; 0xc8
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f7ee fd12 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 80134c8:	4603      	mov	r3, r0
 80134ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	bf14      	ite	ne
 80134d2:	2301      	movne	r3, #1
 80134d4:	2300      	moveq	r3, #0
 80134d6:	b2db      	uxtb	r3, r3
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d03a      	beq.n	8013552 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 80134dc:	4b21      	ldr	r3, [pc, #132]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 80134de:	2251      	movs	r2, #81	; 0x51
 80134e0:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 80134e2:	f7ef f81d 	bl	8002520 <HAL_GetTick>
 80134e6:	4603      	mov	r3, r0
 80134e8:	3314      	adds	r3, #20
 80134ea:	4a1f      	ldr	r2, [pc, #124]	; (8013568 <_ZN3USB4TaskEv+0x33c>)
 80134ec:	6013      	str	r3, [r2, #0]
                        break;
 80134ee:	e030      	b.n	8013552 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 80134f0:	f7ef f816 	bl	8002520 <HAL_GetTick>
 80134f4:	4602      	mov	r2, r0
 80134f6:	4b1c      	ldr	r3, [pc, #112]	; (8013568 <_ZN3USB4TaskEv+0x33c>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	1ad3      	subs	r3, r2, r3
 80134fc:	43db      	mvns	r3, r3
 80134fe:	0fdb      	lsrs	r3, r3, #31
 8013500:	b2db      	uxtb	r3, r3
 8013502:	2b00      	cmp	r3, #0
 8013504:	d027      	beq.n	8013556 <_ZN3USB4TaskEv+0x32a>
 8013506:	4b17      	ldr	r3, [pc, #92]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 8013508:	2280      	movs	r2, #128	; 0x80
 801350a:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 801350c:	7bfb      	ldrb	r3, [r7, #15]
 801350e:	2200      	movs	r2, #0
 8013510:	2100      	movs	r1, #0
 8013512:	6878      	ldr	r0, [r7, #4]
 8013514:	f000 f920 	bl	8013758 <_ZN3USB11ConfiguringEhhb>
 8013518:	4603      	mov	r3, r0
 801351a:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 801351c:	7afb      	ldrb	r3, [r7, #11]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d009      	beq.n	8013536 <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 8013522:	7afb      	ldrb	r3, [r7, #11]
 8013524:	2bd2      	cmp	r3, #210	; 0xd2
 8013526:	d018      	beq.n	801355a <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 8013528:	4a10      	ldr	r2, [pc, #64]	; (801356c <_ZN3USB4TaskEv+0x340>)
 801352a:	7afb      	ldrb	r3, [r7, #11]
 801352c:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 801352e:	4b0d      	ldr	r3, [pc, #52]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 8013530:	22a0      	movs	r2, #160	; 0xa0
 8013532:	701a      	strb	r2, [r3, #0]
                        break;
 8013534:	e011      	b.n	801355a <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 8013536:	4b0b      	ldr	r3, [pc, #44]	; (8013564 <_ZN3USB4TaskEv+0x338>)
 8013538:	2290      	movs	r2, #144	; 0x90
 801353a:	701a      	strb	r2, [r3, #0]
                        break;
 801353c:	e00d      	b.n	801355a <_ZN3USB4TaskEv+0x32e>
                        break;
 801353e:	bf00      	nop
 8013540:	e00c      	b.n	801355c <_ZN3USB4TaskEv+0x330>
                        break;
 8013542:	bf00      	nop
 8013544:	e00a      	b.n	801355c <_ZN3USB4TaskEv+0x330>
                        break;
 8013546:	bf00      	nop
 8013548:	e008      	b.n	801355c <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 801354a:	bf00      	nop
 801354c:	e006      	b.n	801355c <_ZN3USB4TaskEv+0x330>
                        break;
 801354e:	bf00      	nop
 8013550:	e004      	b.n	801355c <_ZN3USB4TaskEv+0x330>
                        break;
 8013552:	bf00      	nop
 8013554:	e002      	b.n	801355c <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 8013556:	bf00      	nop
 8013558:	e000      	b.n	801355c <_ZN3USB4TaskEv+0x330>
                        break;
 801355a:	bf00      	nop
}
 801355c:	bf00      	nop
 801355e:	3710      	adds	r7, #16
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}
 8013564:	200053fd 	.word	0x200053fd
 8013568:	20005400 	.word	0x20005400
 801356c:	200053fc 	.word	0x200053fc

08013570 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 8013570:	b580      	push	{r7, lr}
 8013572:	b086      	sub	sp, #24
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	4608      	mov	r0, r1
 801357a:	4611      	mov	r1, r2
 801357c:	461a      	mov	r2, r3
 801357e:	4603      	mov	r3, r0
 8013580:	70fb      	strb	r3, [r7, #3]
 8013582:	460b      	mov	r3, r1
 8013584:	70bb      	strb	r3, [r7, #2]
 8013586:	4613      	mov	r3, r2
 8013588:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 801358a:	2300      	movs	r3, #0
 801358c:	617b      	str	r3, [r7, #20]
 801358e:	2300      	movs	r3, #0
 8013590:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2100      	movs	r1, #0
 8013596:	4618      	mov	r0, r3
 8013598:	f000 fbc0 	bl	8013d1c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 801359c:	6178      	str	r0, [r7, #20]

        if(!p0)
 801359e:	697b      	ldr	r3, [r7, #20]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d101      	bne.n	80135a8 <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80135a4:	23d6      	movs	r3, #214	; 0xd6
 80135a6:	e03a      	b.n	801361e <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d101      	bne.n	80135b4 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 80135b0:	23d7      	movs	r3, #215	; 0xd7
 80135b2:	e034      	b.n	801361e <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	787a      	ldrb	r2, [r7, #1]
 80135b8:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	78bb      	ldrb	r3, [r7, #2]
 80135be:	78f9      	ldrb	r1, [r7, #3]
 80135c0:	2200      	movs	r2, #0
 80135c2:	f000 fc53 	bl	8013e6c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 80135c6:	4603      	mov	r3, r0
 80135c8:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 80135ca:	7bfb      	ldrb	r3, [r7, #15]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d101      	bne.n	80135d4 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 80135d0:	23d4      	movs	r3, #212	; 0xd4
 80135d2:	e024      	b.n	801361e <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	7bfa      	ldrb	r2, [r7, #15]
 80135d8:	4611      	mov	r1, r2
 80135da:	4618      	mov	r0, r3
 80135dc:	f000 fb9e 	bl	8013d1c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 80135e0:	6138      	str	r0, [r7, #16]

        if(!p)
 80135e2:	693b      	ldr	r3, [r7, #16]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d101      	bne.n	80135ec <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80135e8:	23d6      	movs	r3, #214	; 0xd6
 80135ea:	e018      	b.n	801361e <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	787a      	ldrb	r2, [r7, #1]
 80135f0:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 80135f2:	7bfb      	ldrb	r3, [r7, #15]
 80135f4:	2200      	movs	r2, #0
 80135f6:	2100      	movs	r1, #0
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f000 fae3 	bl	8013bc4 <_ZN3USB7setAddrEhhh>
 80135fe:	4603      	mov	r3, r0
 8013600:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 8013602:	7bbb      	ldrb	r3, [r7, #14]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d009      	beq.n	801361c <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	7bfa      	ldrb	r2, [r7, #15]
 801360c:	4611      	mov	r1, r2
 801360e:	4618      	mov	r0, r3
 8013610:	f000 fcc4 	bl	8013f9c <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 8013614:	2300      	movs	r3, #0
 8013616:	73fb      	strb	r3, [r7, #15]
                return rcode;
 8013618:	7bbb      	ldrb	r3, [r7, #14]
 801361a:	e000      	b.n	801361e <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 801361c:	2300      	movs	r3, #0
};
 801361e:	4618      	mov	r0, r3
 8013620:	3718      	adds	r7, #24
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}

08013626 <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 8013626:	b590      	push	{r4, r7, lr}
 8013628:	b085      	sub	sp, #20
 801362a:	af00      	add	r7, sp, #0
 801362c:	6078      	str	r0, [r7, #4]
 801362e:	4608      	mov	r0, r1
 8013630:	4611      	mov	r1, r2
 8013632:	461a      	mov	r2, r3
 8013634:	4603      	mov	r3, r0
 8013636:	70fb      	strb	r3, [r7, #3]
 8013638:	460b      	mov	r3, r1
 801363a:	70bb      	strb	r3, [r7, #2]
 801363c:	4613      	mov	r3, r2
 801363e:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 8013640:	2300      	movs	r3, #0
 8013642:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 8013644:	78fa      	ldrb	r2, [r7, #3]
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	321e      	adds	r2, #30
 801364a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801364e:	78fa      	ldrb	r2, [r7, #3]
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	321e      	adds	r2, #30
 8013654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	3304      	adds	r3, #4
 801365c:	681c      	ldr	r4, [r3, #0]
 801365e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013662:	787a      	ldrb	r2, [r7, #1]
 8013664:	78b9      	ldrb	r1, [r7, #2]
 8013666:	47a0      	blx	r4
 8013668:	4603      	mov	r3, r0
 801366a:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 801366c:	7bbb      	ldrb	r3, [r7, #14]
 801366e:	2be0      	cmp	r3, #224	; 0xe0
 8013670:	d11c      	bne.n	80136ac <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 8013672:	78bb      	ldrb	r3, [r7, #2]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d108      	bne.n	801368a <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8013678:	2201      	movs	r2, #1
 801367a:	21e8      	movs	r1, #232	; 0xe8
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f7ee fbe3 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8013682:	2066      	movs	r0, #102	; 0x66
 8013684:	f7ee ff58 	bl	8002538 <HAL_Delay>
 8013688:	e022      	b.n	80136d0 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 801368a:	78ba      	ldrb	r2, [r7, #2]
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	321e      	adds	r2, #30
 8013690:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013694:	78ba      	ldrb	r2, [r7, #2]
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	321e      	adds	r2, #30
 801369a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	3314      	adds	r3, #20
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	787a      	ldrb	r2, [r7, #1]
 80136a6:	4611      	mov	r1, r2
 80136a8:	4798      	blx	r3
 80136aa:	e011      	b.n	80136d0 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 80136ac:	7bbb      	ldrb	r3, [r7, #14]
 80136ae:	2b0d      	cmp	r3, #13
 80136b0:	d109      	bne.n	80136c6 <_ZN3USB13AttemptConfigEhhhb+0xa0>
 80136b2:	7bfb      	ldrb	r3, [r7, #15]
 80136b4:	2b02      	cmp	r3, #2
 80136b6:	d806      	bhi.n	80136c6 <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 80136b8:	2064      	movs	r0, #100	; 0x64
 80136ba:	f7ee ff3d 	bl	8002538 <HAL_Delay>
                retries++;
 80136be:	7bfb      	ldrb	r3, [r7, #15]
 80136c0:	3301      	adds	r3, #1
 80136c2:	73fb      	strb	r3, [r7, #15]
                goto again;
 80136c4:	e7be      	b.n	8013644 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 80136c6:	7bbb      	ldrb	r3, [r7, #14]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d001      	beq.n	80136d0 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 80136cc:	7bbb      	ldrb	r3, [r7, #14]
 80136ce:	e03f      	b.n	8013750 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 80136d0:	78fa      	ldrb	r2, [r7, #3]
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	321e      	adds	r2, #30
 80136d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80136da:	78fa      	ldrb	r2, [r7, #3]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	321e      	adds	r2, #30
 80136e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	681c      	ldr	r4, [r3, #0]
 80136e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80136ec:	787a      	ldrb	r2, [r7, #1]
 80136ee:	78b9      	ldrb	r1, [r7, #2]
 80136f0:	47a0      	blx	r4
 80136f2:	4603      	mov	r3, r0
 80136f4:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 80136f6:	7bbb      	ldrb	r3, [r7, #14]
 80136f8:	2b0d      	cmp	r3, #13
 80136fa:	d109      	bne.n	8013710 <_ZN3USB13AttemptConfigEhhhb+0xea>
 80136fc:	7bfb      	ldrb	r3, [r7, #15]
 80136fe:	2b02      	cmp	r3, #2
 8013700:	d806      	bhi.n	8013710 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 8013702:	2064      	movs	r0, #100	; 0x64
 8013704:	f7ee ff18 	bl	8002538 <HAL_Delay>
                retries++;
 8013708:	7bfb      	ldrb	r3, [r7, #15]
 801370a:	3301      	adds	r3, #1
 801370c:	73fb      	strb	r3, [r7, #15]
                goto again;
 801370e:	e799      	b.n	8013644 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 8013710:	7bbb      	ldrb	r3, [r7, #14]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d01b      	beq.n	801374e <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 8013716:	78bb      	ldrb	r3, [r7, #2]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d108      	bne.n	801372e <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 801371c:	2201      	movs	r2, #1
 801371e:	21e8      	movs	r1, #232	; 0xe8
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f7ee fb91 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8013726:	2066      	movs	r0, #102	; 0x66
 8013728:	f7ee ff06 	bl	8002538 <HAL_Delay>
 801372c:	e00f      	b.n	801374e <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 801372e:	78ba      	ldrb	r2, [r7, #2]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	321e      	adds	r2, #30
 8013734:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013738:	78ba      	ldrb	r2, [r7, #2]
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	321e      	adds	r2, #30
 801373e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	3314      	adds	r3, #20
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	787a      	ldrb	r2, [r7, #1]
 801374a:	4611      	mov	r1, r2
 801374c:	4798      	blx	r3
                }
        }
        return rcode;
 801374e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013750:	4618      	mov	r0, r3
 8013752:	3714      	adds	r7, #20
 8013754:	46bd      	mov	sp, r7
 8013756:	bd90      	pop	{r4, r7, pc}

08013758 <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 8013758:	b580      	push	{r7, lr}
 801375a:	b090      	sub	sp, #64	; 0x40
 801375c:	af02      	add	r7, sp, #8
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	4608      	mov	r0, r1
 8013762:	4611      	mov	r1, r2
 8013764:	461a      	mov	r2, r3
 8013766:	4603      	mov	r3, r0
 8013768:	70fb      	strb	r3, [r7, #3]
 801376a:	460b      	mov	r3, r1
 801376c:	70bb      	strb	r3, [r7, #2]
 801376e:	4613      	mov	r3, r2
 8013770:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 8013772:	2300      	movs	r3, #0
 8013774:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 8013778:	f107 030c 	add.w	r3, r7, #12
 801377c:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 801377e:	2300      	movs	r3, #0
 8013780:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8013782:	2300      	movs	r3, #0
 8013784:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 8013786:	2300      	movs	r3, #0
 8013788:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 801378a:	2308      	movs	r3, #8
 801378c:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 801378e:	7abb      	ldrb	r3, [r7, #10]
 8013790:	f36f 0300 	bfc	r3, #0, #1
 8013794:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 8013796:	7abb      	ldrb	r3, [r7, #10]
 8013798:	f36f 0341 	bfc	r3, #1, #1
 801379c:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 801379e:	7abb      	ldrb	r3, [r7, #10]
 80137a0:	220f      	movs	r2, #15
 80137a2:	f362 0387 	bfi	r3, r2, #2, #6
 80137a6:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f7fa f87d 	bl	800d8a8 <_ZN3USB14GetAddressPoolEv>
 80137ae:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 80137b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	2100      	movs	r1, #0
 80137b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137ba:	4798      	blx	r3
 80137bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 80137be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d101      	bne.n	80137c8 <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80137c4:	23d6      	movs	r3, #214	; 0xd6
 80137c6:	e15c      	b.n	8013a82 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 80137c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 80137ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d0:	f107 0208 	add.w	r2, r7, #8
 80137d4:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 80137d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d8:	787a      	ldrb	r2, [r7, #1]
 80137da:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 80137dc:	f107 030c 	add.w	r3, r7, #12
 80137e0:	9300      	str	r3, [sp, #0]
 80137e2:	2312      	movs	r3, #18
 80137e4:	2200      	movs	r2, #0
 80137e6:	2100      	movs	r1, #0
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f000 f94e 	bl	8013a8a <_ZN3USB11getDevDescrEhhtPh>
 80137ee:	4603      	mov	r3, r0
 80137f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 80137f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137f8:	601a      	str	r2, [r3, #0]

        if(rcode) {
 80137fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d002      	beq.n	8013808 <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8013802:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013806:	e13c      	b.n	8013a82 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 8013808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380a:	7a1a      	ldrb	r2, [r3, #8]
 801380c:	7a5b      	ldrb	r3, [r3, #9]
 801380e:	021b      	lsls	r3, r3, #8
 8013810:	4313      	orrs	r3, r2
 8013812:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8013814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013816:	7a9a      	ldrb	r2, [r3, #10]
 8013818:	7adb      	ldrb	r3, [r3, #11]
 801381a:	021b      	lsls	r3, r3, #8
 801381c:	4313      	orrs	r3, r2
 801381e:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8013820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013822:	791b      	ldrb	r3, [r3, #4]
 8013824:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 8013826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013828:	795b      	ldrb	r3, [r3, #5]
 801382a:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 801382c:	2300      	movs	r3, #0
 801382e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013832:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013836:	2b0f      	cmp	r3, #15
 8013838:	f200 8081 	bhi.w	801393e <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 801383c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	321e      	adds	r2, #30
 8013844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d06e      	beq.n	801392a <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 801384c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	321e      	adds	r2, #30
 8013854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013858:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	321e      	adds	r2, #30
 8013860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	3310      	adds	r3, #16
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	4608      	mov	r0, r1
 801386c:	4798      	blx	r3
 801386e:	4603      	mov	r3, r0
 8013870:	2b00      	cmp	r3, #0
 8013872:	bf14      	ite	ne
 8013874:	2301      	movne	r3, #1
 8013876:	2300      	moveq	r3, #0
 8013878:	b2db      	uxtb	r3, r3
 801387a:	2b00      	cmp	r3, #0
 801387c:	d157      	bne.n	801392e <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 801387e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	321e      	adds	r2, #30
 8013886:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801388a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	321e      	adds	r2, #30
 8013892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	3320      	adds	r3, #32
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	7fba      	ldrb	r2, [r7, #30]
 801389e:	4611      	mov	r1, r2
 80138a0:	4798      	blx	r3
 80138a2:	4603      	mov	r3, r0
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d02b      	beq.n	8013900 <_ZN3USB11ConfiguringEhhb+0x1a8>
 80138a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	321e      	adds	r2, #30
 80138b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80138b4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	321e      	adds	r2, #30
 80138bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	3318      	adds	r3, #24
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	8c3a      	ldrh	r2, [r7, #32]
 80138c8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80138ca:	4798      	blx	r3
 80138cc:	4603      	mov	r3, r0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d114      	bne.n	80138fc <_ZN3USB11ConfiguringEhhb+0x1a4>
 80138d2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	321e      	adds	r2, #30
 80138da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80138de:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	321e      	adds	r2, #30
 80138e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	331c      	adds	r3, #28
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	7ffa      	ldrb	r2, [r7, #31]
 80138f2:	4611      	mov	r1, r2
 80138f4:	4798      	blx	r3
 80138f6:	4603      	mov	r3, r0
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d001      	beq.n	8013900 <_ZN3USB11ConfiguringEhhb+0x1a8>
 80138fc:	2301      	movs	r3, #1
 80138fe:	e000      	b.n	8013902 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8013900:	2300      	movs	r3, #0
 8013902:	2b00      	cmp	r3, #0
 8013904:	d014      	beq.n	8013930 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8013906:	78b8      	ldrb	r0, [r7, #2]
 8013908:	78fa      	ldrb	r2, [r7, #3]
 801390a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 801390e:	787b      	ldrb	r3, [r7, #1]
 8013910:	9300      	str	r3, [sp, #0]
 8013912:	4603      	mov	r3, r0
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f7ff fe86 	bl	8013626 <_ZN3USB13AttemptConfigEhhhb>
 801391a:	4603      	mov	r3, r0
 801391c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8013920:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013924:	2bd1      	cmp	r3, #209	; 0xd1
 8013926:	d109      	bne.n	801393c <_ZN3USB11ConfiguringEhhb+0x1e4>
 8013928:	e002      	b.n	8013930 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 801392a:	bf00      	nop
 801392c:	e000      	b.n	8013930 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 801392e:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8013930:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013934:	3301      	adds	r3, #1
 8013936:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801393a:	e77a      	b.n	8013832 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 801393c:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 801393e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013942:	2b0f      	cmp	r3, #15
 8013944:	d802      	bhi.n	801394c <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8013946:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801394a:	e09a      	b.n	8013a82 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 801394c:	2300      	movs	r3, #0
 801394e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013952:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013956:	2b0f      	cmp	r3, #15
 8013958:	f200 8088 	bhi.w	8013a6c <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 801395c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	321e      	adds	r2, #30
 8013964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d074      	beq.n	8013a56 <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 801396c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	321e      	adds	r2, #30
 8013974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013978:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	321e      	adds	r2, #30
 8013980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	3310      	adds	r3, #16
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	4608      	mov	r0, r1
 801398c:	4798      	blx	r3
 801398e:	4603      	mov	r3, r0
 8013990:	2b00      	cmp	r3, #0
 8013992:	bf14      	ite	ne
 8013994:	2301      	movne	r3, #1
 8013996:	2300      	moveq	r3, #0
 8013998:	b2db      	uxtb	r3, r3
 801399a:	2b00      	cmp	r3, #0
 801399c:	d15d      	bne.n	8013a5a <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 801399e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	321e      	adds	r2, #30
 80139a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80139aa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	321e      	adds	r2, #30
 80139b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	3320      	adds	r3, #32
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	7fba      	ldrb	r2, [r7, #30]
 80139be:	4611      	mov	r1, r2
 80139c0:	4798      	blx	r3
 80139c2:	4603      	mov	r3, r0
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d02b      	beq.n	8013a20 <_ZN3USB11ConfiguringEhhb+0x2c8>
 80139c8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	321e      	adds	r2, #30
 80139d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80139d4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	321e      	adds	r2, #30
 80139dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	3318      	adds	r3, #24
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	8c3a      	ldrh	r2, [r7, #32]
 80139e8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80139ea:	4798      	blx	r3
 80139ec:	4603      	mov	r3, r0
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d114      	bne.n	8013a1c <_ZN3USB11ConfiguringEhhb+0x2c4>
 80139f2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	321e      	adds	r2, #30
 80139fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80139fe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	321e      	adds	r2, #30
 8013a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	331c      	adds	r3, #28
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	7ffa      	ldrb	r2, [r7, #31]
 8013a12:	4611      	mov	r1, r2
 8013a14:	4798      	blx	r3
 8013a16:	4603      	mov	r3, r0
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d001      	beq.n	8013a20 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	e000      	b.n	8013a22 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8013a20:	2300      	movs	r3, #0
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d11b      	bne.n	8013a5e <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8013a26:	78b8      	ldrb	r0, [r7, #2]
 8013a28:	78fa      	ldrb	r2, [r7, #3]
 8013a2a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8013a2e:	787b      	ldrb	r3, [r7, #1]
 8013a30:	9300      	str	r3, [sp, #0]
 8013a32:	4603      	mov	r3, r0
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	f7ff fdf6 	bl	8013626 <_ZN3USB13AttemptConfigEhhhb>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8013a40:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013a44:	2bd1      	cmp	r3, #209	; 0xd1
 8013a46:	d00b      	beq.n	8013a60 <_ZN3USB11ConfiguringEhhb+0x308>
 8013a48:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013a4c:	2bd9      	cmp	r3, #217	; 0xd9
 8013a4e:	d007      	beq.n	8013a60 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8013a50:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013a54:	e015      	b.n	8013a82 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 8013a56:	bf00      	nop
 8013a58:	e002      	b.n	8013a60 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8013a5a:	bf00      	nop
 8013a5c:	e000      	b.n	8013a60 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8013a5e:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8013a60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a64:	3301      	adds	r3, #1
 8013a66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013a6a:	e772      	b.n	8013952 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8013a6c:	787b      	ldrb	r3, [r7, #1]
 8013a6e:	78ba      	ldrb	r2, [r7, #2]
 8013a70:	78f9      	ldrb	r1, [r7, #3]
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f7ff fd7c 	bl	8013570 <_ZN3USB17DefaultAddressingEhhb>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8013a7e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8013a82:	4618      	mov	r0, r3
 8013a84:	3738      	adds	r7, #56	; 0x38
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}

08013a8a <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 8013a8a:	b580      	push	{r7, lr}
 8013a8c:	b08a      	sub	sp, #40	; 0x28
 8013a8e:	af08      	add	r7, sp, #32
 8013a90:	6078      	str	r0, [r7, #4]
 8013a92:	4608      	mov	r0, r1
 8013a94:	4611      	mov	r1, r2
 8013a96:	461a      	mov	r2, r3
 8013a98:	4603      	mov	r3, r0
 8013a9a:	70fb      	strb	r3, [r7, #3]
 8013a9c:	460b      	mov	r3, r1
 8013a9e:	70bb      	strb	r3, [r7, #2]
 8013aa0:	4613      	mov	r3, r2
 8013aa2:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8013aa4:	78ba      	ldrb	r2, [r7, #2]
 8013aa6:	78f9      	ldrb	r1, [r7, #3]
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	9307      	str	r3, [sp, #28]
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	9306      	str	r3, [sp, #24]
 8013ab0:	883b      	ldrh	r3, [r7, #0]
 8013ab2:	9305      	str	r3, [sp, #20]
 8013ab4:	883b      	ldrh	r3, [r7, #0]
 8013ab6:	9304      	str	r3, [sp, #16]
 8013ab8:	2300      	movs	r3, #0
 8013aba:	9303      	str	r3, [sp, #12]
 8013abc:	2301      	movs	r3, #1
 8013abe:	9302      	str	r3, [sp, #8]
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	9301      	str	r3, [sp, #4]
 8013ac4:	2306      	movs	r3, #6
 8013ac6:	9300      	str	r3, [sp, #0]
 8013ac8:	2380      	movs	r3, #128	; 0x80
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f7fe ffdb 	bl	8012a86 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8013ad0:	4603      	mov	r3, r0
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3708      	adds	r7, #8
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}

08013ada <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 8013ada:	b580      	push	{r7, lr}
 8013adc:	b08a      	sub	sp, #40	; 0x28
 8013ade:	af08      	add	r7, sp, #32
 8013ae0:	6078      	str	r0, [r7, #4]
 8013ae2:	4608      	mov	r0, r1
 8013ae4:	4611      	mov	r1, r2
 8013ae6:	461a      	mov	r2, r3
 8013ae8:	4603      	mov	r3, r0
 8013aea:	70fb      	strb	r3, [r7, #3]
 8013aec:	460b      	mov	r3, r1
 8013aee:	70bb      	strb	r3, [r7, #2]
 8013af0:	4613      	mov	r3, r2
 8013af2:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8013af4:	78ba      	ldrb	r2, [r7, #2]
 8013af6:	78f9      	ldrb	r1, [r7, #3]
 8013af8:	2300      	movs	r3, #0
 8013afa:	9307      	str	r3, [sp, #28]
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	9306      	str	r3, [sp, #24]
 8013b00:	883b      	ldrh	r3, [r7, #0]
 8013b02:	9305      	str	r3, [sp, #20]
 8013b04:	883b      	ldrh	r3, [r7, #0]
 8013b06:	9304      	str	r3, [sp, #16]
 8013b08:	2300      	movs	r3, #0
 8013b0a:	9303      	str	r3, [sp, #12]
 8013b0c:	2302      	movs	r3, #2
 8013b0e:	9302      	str	r3, [sp, #8]
 8013b10:	7c3b      	ldrb	r3, [r7, #16]
 8013b12:	9301      	str	r3, [sp, #4]
 8013b14:	2306      	movs	r3, #6
 8013b16:	9300      	str	r3, [sp, #0]
 8013b18:	2380      	movs	r3, #128	; 0x80
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f7fe ffb3 	bl	8012a86 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8013b20:	4603      	mov	r3, r0
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3708      	adds	r7, #8
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}

08013b2a <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 8013b2a:	b580      	push	{r7, lr}
 8013b2c:	b09e      	sub	sp, #120	; 0x78
 8013b2e:	af08      	add	r7, sp, #32
 8013b30:	6078      	str	r0, [r7, #4]
 8013b32:	4608      	mov	r0, r1
 8013b34:	4611      	mov	r1, r2
 8013b36:	461a      	mov	r2, r3
 8013b38:	4603      	mov	r3, r0
 8013b3a:	70fb      	strb	r3, [r7, #3]
 8013b3c:	460b      	mov	r3, r1
 8013b3e:	70bb      	strb	r3, [r7, #2]
 8013b40:	4613      	mov	r3, r2
 8013b42:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8013b44:	2340      	movs	r3, #64	; 0x40
 8013b46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 8013b4a:	f107 030c 	add.w	r3, r7, #12
 8013b4e:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8013b50:	78ba      	ldrb	r2, [r7, #2]
 8013b52:	78f9      	ldrb	r1, [r7, #3]
 8013b54:	f107 030c 	add.w	r3, r7, #12
 8013b58:	9301      	str	r3, [sp, #4]
 8013b5a:	787b      	ldrb	r3, [r7, #1]
 8013b5c:	9300      	str	r3, [sp, #0]
 8013b5e:	2309      	movs	r3, #9
 8013b60:	6878      	ldr	r0, [r7, #4]
 8013b62:	f7ff ffba 	bl	8013ada <_ZN3USB12getConfDescrEhhthPh>
 8013b66:	4603      	mov	r3, r0
 8013b68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8013b6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d002      	beq.n	8013b7a <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8013b74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013b78:	e020      	b.n	8013bbc <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 8013b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b7c:	789a      	ldrb	r2, [r3, #2]
 8013b7e:	78db      	ldrb	r3, [r3, #3]
 8013b80:	021b      	lsls	r3, r3, #8
 8013b82:	4313      	orrs	r3, r2
 8013b84:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 8013b88:	78ba      	ldrb	r2, [r7, #2]
 8013b8a:	78f9      	ldrb	r1, [r7, #3]
 8013b8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013b8e:	9307      	str	r3, [sp, #28]
 8013b90:	f107 030c 	add.w	r3, r7, #12
 8013b94:	9306      	str	r3, [sp, #24]
 8013b96:	2340      	movs	r3, #64	; 0x40
 8013b98:	9305      	str	r3, [sp, #20]
 8013b9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8013b9e:	9304      	str	r3, [sp, #16]
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	9303      	str	r3, [sp, #12]
 8013ba4:	2302      	movs	r3, #2
 8013ba6:	9302      	str	r3, [sp, #8]
 8013ba8:	787b      	ldrb	r3, [r7, #1]
 8013baa:	9301      	str	r3, [sp, #4]
 8013bac:	2306      	movs	r3, #6
 8013bae:	9300      	str	r3, [sp, #0]
 8013bb0:	2380      	movs	r3, #128	; 0x80
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	f7fe ff67 	bl	8012a86 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	bf00      	nop
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3758      	adds	r7, #88	; 0x58
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b08c      	sub	sp, #48	; 0x30
 8013bc8:	af08      	add	r7, sp, #32
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	4608      	mov	r0, r1
 8013bce:	4611      	mov	r1, r2
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	70fb      	strb	r3, [r7, #3]
 8013bd6:	460b      	mov	r3, r1
 8013bd8:	70bb      	strb	r3, [r7, #2]
 8013bda:	4613      	mov	r3, r2
 8013bdc:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8013bde:	78ba      	ldrb	r2, [r7, #2]
 8013be0:	78f9      	ldrb	r1, [r7, #3]
 8013be2:	2300      	movs	r3, #0
 8013be4:	9307      	str	r3, [sp, #28]
 8013be6:	2300      	movs	r3, #0
 8013be8:	9306      	str	r3, [sp, #24]
 8013bea:	2300      	movs	r3, #0
 8013bec:	9305      	str	r3, [sp, #20]
 8013bee:	2300      	movs	r3, #0
 8013bf0:	9304      	str	r3, [sp, #16]
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	9303      	str	r3, [sp, #12]
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	9302      	str	r3, [sp, #8]
 8013bfa:	787b      	ldrb	r3, [r7, #1]
 8013bfc:	9301      	str	r3, [sp, #4]
 8013bfe:	2305      	movs	r3, #5
 8013c00:	9300      	str	r3, [sp, #0]
 8013c02:	2300      	movs	r3, #0
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f7fe ff3e 	bl	8012a86 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8013c0e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013c12:	f7ee fc91 	bl	8002538 <HAL_Delay>
        return rcode;
 8013c16:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3710      	adds	r7, #16
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b08a      	sub	sp, #40	; 0x28
 8013c24:	af08      	add	r7, sp, #32
 8013c26:	6078      	str	r0, [r7, #4]
 8013c28:	4608      	mov	r0, r1
 8013c2a:	4611      	mov	r1, r2
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	4603      	mov	r3, r0
 8013c30:	70fb      	strb	r3, [r7, #3]
 8013c32:	460b      	mov	r3, r1
 8013c34:	70bb      	strb	r3, [r7, #2]
 8013c36:	4613      	mov	r3, r2
 8013c38:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 8013c3a:	78ba      	ldrb	r2, [r7, #2]
 8013c3c:	78f9      	ldrb	r1, [r7, #3]
 8013c3e:	2300      	movs	r3, #0
 8013c40:	9307      	str	r3, [sp, #28]
 8013c42:	2300      	movs	r3, #0
 8013c44:	9306      	str	r3, [sp, #24]
 8013c46:	2300      	movs	r3, #0
 8013c48:	9305      	str	r3, [sp, #20]
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	9304      	str	r3, [sp, #16]
 8013c4e:	2300      	movs	r3, #0
 8013c50:	9303      	str	r3, [sp, #12]
 8013c52:	2300      	movs	r3, #0
 8013c54:	9302      	str	r3, [sp, #8]
 8013c56:	787b      	ldrb	r3, [r7, #1]
 8013c58:	9301      	str	r3, [sp, #4]
 8013c5a:	2309      	movs	r3, #9
 8013c5c:	9300      	str	r3, [sp, #0]
 8013c5e:	2300      	movs	r3, #0
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f7fe ff10 	bl	8012a86 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8013c66:	4603      	mov	r3, r0
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	3708      	adds	r7, #8
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}

08013c70 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
};
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	370c      	adds	r7, #12
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c84:	4770      	bx	lr
	...

08013c88 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 8013c88:	b480      	push	{r7}
 8013c8a:	b083      	sub	sp, #12
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
 8013c90:	4a04      	ldr	r2, [pc, #16]	; (8013ca4 <_ZN11AddressPoolC1Ev+0x1c>)
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	601a      	str	r2, [r3, #0]
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	4618      	mov	r0, r3
 8013c9a:	370c      	adds	r7, #12
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca2:	4770      	bx	lr
 8013ca4:	08016598 	.word	0x08016598

08013ca8 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7ff ffe8 	bl	8013c88 <_ZN11AddressPoolC1Ev>
 8013cb8:	4a17      	ldr	r2, [pc, #92]	; (8013d18 <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	601a      	str	r2, [r3, #0]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8013cc4:	2100      	movs	r1, #0
 8013cc6:	6878      	ldr	r0, [r7, #4]
 8013cc8:	f000 f984 	bl	8013fd4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	2200      	movs	r2, #0
 8013cd0:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	1d1a      	adds	r2, r3, #4
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2208      	movs	r2, #8
 8013ce4:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 8013ce6:	687a      	ldr	r2, [r7, #4]
 8013ce8:	7993      	ldrb	r3, [r2, #6]
 8013cea:	f36f 0300 	bfc	r3, #0, #1
 8013cee:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8013cf0:	687a      	ldr	r2, [r7, #4]
 8013cf2:	7993      	ldrb	r3, [r2, #6]
 8013cf4:	f36f 0341 	bfc	r3, #1, #1
 8013cf8:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 8013cfa:	687a      	ldr	r2, [r7, #4]
 8013cfc:	7993      	ldrb	r3, [r2, #6]
 8013cfe:	210f      	movs	r1, #15
 8013d00:	f361 0387 	bfi	r3, r1, #2, #6
 8013d04:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f000 f995 	bl	8014036 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	4618      	mov	r0, r3
 8013d10:	3708      	adds	r7, #8
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd80      	pop	{r7, pc}
 8013d16:	bf00      	nop
 8013d18:	08016584 	.word	0x08016584

08013d1c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b084      	sub	sp, #16
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	460b      	mov	r3, r1
 8013d26:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 8013d28:	78fb      	ldrb	r3, [r7, #3]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d102      	bne.n	8013d34 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	3308      	adds	r3, #8
 8013d32:	e014      	b.n	8013d5e <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8013d34:	78fb      	ldrb	r3, [r7, #3]
 8013d36:	4619      	mov	r1, r3
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f000 f995 	bl	8014068 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8013d42:	7bfb      	ldrb	r3, [r7, #15]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d008      	beq.n	8013d5a <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f103 0108 	add.w	r1, r3, #8
 8013d4e:	7bfa      	ldrb	r2, [r7, #15]
 8013d50:	4613      	mov	r3, r2
 8013d52:	00db      	lsls	r3, r3, #3
 8013d54:	1a9b      	subs	r3, r3, r2
 8013d56:	440b      	add	r3, r1
 8013d58:	e000      	b.n	8013d5c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	bf00      	nop
        };
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3710      	adds	r7, #16
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}
	...

08013d68 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b086      	sub	sp, #24
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	60f8      	str	r0, [r7, #12]
 8013d70:	607b      	str	r3, [r7, #4]
 8013d72:	460b      	mov	r3, r1
 8013d74:	72fb      	strb	r3, [r7, #11]
 8013d76:	4613      	mov	r3, r2
 8013d78:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8013d7a:	f7ec fd91 	bl	80008a0 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 8013d7e:	7afb      	ldrb	r3, [r7, #11]
 8013d80:	f043 0302 	orr.w	r3, r3, #2
 8013d84:	b2db      	uxtb	r3, r3
 8013d86:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 8013d88:	f107 0117 	add.w	r1, r7, #23
 8013d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8013d90:	2201      	movs	r2, #1
 8013d92:	480b      	ldr	r0, [pc, #44]	; (8013dc0 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8013d94:	f7f1 fdfd 	bl	8005992 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8013d98:	7abb      	ldrb	r3, [r7, #10]
 8013d9a:	b29a      	uxth	r2, r3
 8013d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013da0:	6879      	ldr	r1, [r7, #4]
 8013da2:	4807      	ldr	r0, [pc, #28]	; (8013dc0 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8013da4:	f7f1 fdf5 	bl	8005992 <HAL_SPI_Transmit>
        data_p += nbytes;
 8013da8:	7abb      	ldrb	r3, [r7, #10]
 8013daa:	687a      	ldr	r2, [r7, #4]
 8013dac:	4413      	add	r3, r2
 8013dae:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8013db0:	f7ec fd6a 	bl	8000888 <_ZN3P103SetEv>
        return ( data_p);
 8013db4:	687b      	ldr	r3, [r7, #4]
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	3718      	adds	r7, #24
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}
 8013dbe:	bf00      	nop
 8013dc0:	20000324 	.word	0x20000324

08013dc4 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b084      	sub	sp, #16
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	60f8      	str	r0, [r7, #12]
 8013dcc:	607b      	str	r3, [r7, #4]
 8013dce:	460b      	mov	r3, r1
 8013dd0:	72fb      	strb	r3, [r7, #11]
 8013dd2:	4613      	mov	r3, r2
 8013dd4:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8013dd6:	f7ec fd63 	bl	80008a0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8013dda:	f107 010b 	add.w	r1, r7, #11
 8013dde:	f04f 33ff 	mov.w	r3, #4294967295
 8013de2:	2201      	movs	r2, #1
 8013de4:	480d      	ldr	r0, [pc, #52]	; (8013e1c <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8013de6:	f7f1 fdd4 	bl	8005992 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8013dea:	7abb      	ldrb	r3, [r7, #10]
 8013dec:	461a      	mov	r2, r3
 8013dee:	2100      	movs	r1, #0
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f000 fbab 	bl	801454c <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8013df6:	7abb      	ldrb	r3, [r7, #10]
 8013df8:	b29a      	uxth	r2, r3
 8013dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8013dfe:	6879      	ldr	r1, [r7, #4]
 8013e00:	4806      	ldr	r0, [pc, #24]	; (8013e1c <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8013e02:	f7f1 ff02 	bl	8005c0a <HAL_SPI_Receive>
        data_p += nbytes;
 8013e06:	7abb      	ldrb	r3, [r7, #10]
 8013e08:	687a      	ldr	r2, [r7, #4]
 8013e0a:	4413      	add	r3, r2
 8013e0c:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8013e0e:	f7ec fd3b 	bl	8000888 <_ZN3P103SetEv>
        return ( data_p);
 8013e12:	687b      	ldr	r3, [r7, #4]
}
 8013e14:	4618      	mov	r0, r3
 8013e16:	3710      	adds	r7, #16
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd80      	pop	{r7, pc}
 8013e1c:	20000324 	.word	0x20000324

08013e20 <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b084      	sub	sp, #16
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8013e2c:	f7fe fd30 	bl	8012890 <_ZN2P95IsSetEv>
 8013e30:	4603      	mov	r3, r0
 8013e32:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8013e34:	7bbb      	ldrb	r3, [r7, #14]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d104      	bne.n	8013e44 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f000 f937 	bl	80140ae <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 8013e40:	4603      	mov	r3, r0
 8013e42:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 8013e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	3710      	adds	r7, #16
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}
	...

08013e50 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 8013e50:	b480      	push	{r7}
 8013e52:	b083      	sub	sp, #12
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
                return vbusState;
 8013e58:	4b03      	ldr	r3, [pc, #12]	; (8013e68 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 8013e5a:	781b      	ldrb	r3, [r3, #0]
        };
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	370c      	adds	r7, #12
 8013e60:	46bd      	mov	sp, r7
 8013e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e66:	4770      	bx	lr
 8013e68:	200006b4 	.word	0x200006b4

08013e6c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b084      	sub	sp, #16
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	4608      	mov	r0, r1
 8013e76:	4611      	mov	r1, r2
 8013e78:	461a      	mov	r2, r3
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	70fb      	strb	r3, [r7, #3]
 8013e7e:	460b      	mov	r3, r1
 8013e80:	70bb      	strb	r3, [r7, #2]
 8013e82:	4613      	mov	r3, r2
 8013e84:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 8013e86:	78fb      	ldrb	r3, [r7, #3]
 8013e88:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 8013e8a:	7b3b      	ldrb	r3, [r7, #12]
 8013e8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013e90:	b2db      	uxtb	r3, r3
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d102      	bne.n	8013e9c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 8013e96:	787b      	ldrb	r3, [r7, #1]
 8013e98:	2b07      	cmp	r3, #7
 8013e9a:	d901      	bls.n	8013ea0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	e079      	b.n	8013f94 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 8013ea0:	78bb      	ldrb	r3, [r7, #2]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d005      	beq.n	8013eb2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	79db      	ldrb	r3, [r3, #7]
 8013eaa:	2b07      	cmp	r3, #7
 8013eac:	d101      	bne.n	8013eb2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	e070      	b.n	8013f94 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 8013eb2:	2100      	movs	r1, #0
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f000 f8d7 	bl	8014068 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 8013ebe:	7bfb      	ldrb	r3, [r7, #15]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d101      	bne.n	8013ec8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	e065      	b.n	8013f94 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8013ec8:	7b3b      	ldrb	r3, [r7, #12]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d124      	bne.n	8013f18 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 8013ece:	78bb      	ldrb	r3, [r7, #2]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d00f      	beq.n	8013ef4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8013ed4:	7bfa      	ldrb	r2, [r7, #15]
 8013ed6:	6879      	ldr	r1, [r7, #4]
 8013ed8:	4613      	mov	r3, r2
 8013eda:	00db      	lsls	r3, r3, #3
 8013edc:	1a9b      	subs	r3, r3, r2
 8013ede:	440b      	add	r3, r1
 8013ee0:	330c      	adds	r3, #12
 8013ee2:	2241      	movs	r2, #65	; 0x41
 8013ee4:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	79db      	ldrb	r3, [r3, #7]
 8013eea:	3301      	adds	r3, #1
 8013eec:	b2da      	uxtb	r2, r3
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	71da      	strb	r2, [r3, #7]
 8013ef2:	e008      	b.n	8013f06 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8013ef4:	7bfa      	ldrb	r2, [r7, #15]
 8013ef6:	6879      	ldr	r1, [r7, #4]
 8013ef8:	4613      	mov	r3, r2
 8013efa:	00db      	lsls	r3, r3, #3
 8013efc:	1a9b      	subs	r3, r3, r2
 8013efe:	440b      	add	r3, r1
 8013f00:	330c      	adds	r3, #12
 8013f02:	2201      	movs	r2, #1
 8013f04:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 8013f06:	7bfa      	ldrb	r2, [r7, #15]
 8013f08:	6879      	ldr	r1, [r7, #4]
 8013f0a:	4613      	mov	r3, r2
 8013f0c:	00db      	lsls	r3, r3, #3
 8013f0e:	1a9b      	subs	r3, r3, r2
 8013f10:	440b      	add	r3, r1
 8013f12:	330c      	adds	r3, #12
 8013f14:	781b      	ldrb	r3, [r3, #0]
 8013f16:	e03d      	b.n	8013f94 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 8013f18:	2300      	movs	r3, #0
 8013f1a:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 8013f1c:	7b3b      	ldrb	r3, [r7, #12]
 8013f1e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013f22:	b2da      	uxtb	r2, r3
 8013f24:	7a3b      	ldrb	r3, [r7, #8]
 8013f26:	f362 03c5 	bfi	r3, r2, #3, #3
 8013f2a:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 8013f2c:	78bb      	ldrb	r3, [r7, #2]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d013      	beq.n	8013f5a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 8013f32:	7a3b      	ldrb	r3, [r7, #8]
 8013f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f38:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	79db      	ldrb	r3, [r3, #7]
 8013f3e:	3301      	adds	r3, #1
 8013f40:	b2da      	uxtb	r2, r3
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	71da      	strb	r2, [r3, #7]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	79db      	ldrb	r3, [r3, #7]
 8013f4a:	f003 0307 	and.w	r3, r3, #7
 8013f4e:	b2da      	uxtb	r2, r3
 8013f50:	7a3b      	ldrb	r3, [r7, #8]
 8013f52:	f362 0302 	bfi	r3, r2, #0, #3
 8013f56:	723b      	strb	r3, [r7, #8]
 8013f58:	e00b      	b.n	8013f72 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 8013f5a:	7a3b      	ldrb	r3, [r7, #8]
 8013f5c:	f36f 1386 	bfc	r3, #6, #1
 8013f60:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 8013f62:	787b      	ldrb	r3, [r7, #1]
 8013f64:	f003 0307 	and.w	r3, r3, #7
 8013f68:	b2da      	uxtb	r2, r3
 8013f6a:	7a3b      	ldrb	r3, [r7, #8]
 8013f6c:	f362 0302 	bfi	r3, r2, #0, #3
 8013f70:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 8013f72:	7bfa      	ldrb	r2, [r7, #15]
 8013f74:	6879      	ldr	r1, [r7, #4]
 8013f76:	4613      	mov	r3, r2
 8013f78:	00db      	lsls	r3, r3, #3
 8013f7a:	1a9b      	subs	r3, r3, r2
 8013f7c:	440b      	add	r3, r1
 8013f7e:	330c      	adds	r3, #12
 8013f80:	7a3a      	ldrb	r2, [r7, #8]
 8013f82:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 8013f84:	7bfa      	ldrb	r2, [r7, #15]
 8013f86:	6879      	ldr	r1, [r7, #4]
 8013f88:	4613      	mov	r3, r2
 8013f8a:	00db      	lsls	r3, r3, #3
 8013f8c:	1a9b      	subs	r3, r3, r2
 8013f8e:	440b      	add	r3, r1
 8013f90:	330c      	adds	r3, #12
 8013f92:	781b      	ldrb	r3, [r3, #0]
        };
 8013f94:	4618      	mov	r0, r3
 8013f96:	3710      	adds	r7, #16
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	bd80      	pop	{r7, pc}

08013f9c <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b084      	sub	sp, #16
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8013fa8:	78fb      	ldrb	r3, [r7, #3]
 8013faa:	2b41      	cmp	r3, #65	; 0x41
 8013fac:	d103      	bne.n	8013fb6 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f000 f841 	bl	8014036 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8013fb4:	e00b      	b.n	8013fce <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 8013fb6:	78fb      	ldrb	r3, [r7, #3]
 8013fb8:	4619      	mov	r1, r3
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f000 f854 	bl	8014068 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8013fc4:	7bfb      	ldrb	r3, [r7, #15]
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f000 f893 	bl	80140f4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 8013fce:	3710      	adds	r7, #16
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	bd80      	pop	{r7, pc}

08013fd4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8013fd4:	b480      	push	{r7}
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
 8013fdc:	460b      	mov	r3, r1
 8013fde:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 8013fe0:	78fa      	ldrb	r2, [r7, #3]
 8013fe2:	6879      	ldr	r1, [r7, #4]
 8013fe4:	4613      	mov	r3, r2
 8013fe6:	00db      	lsls	r3, r3, #3
 8013fe8:	1a9b      	subs	r3, r3, r2
 8013fea:	440b      	add	r3, r1
 8013fec:	330c      	adds	r3, #12
 8013fee:	2200      	movs	r2, #0
 8013ff0:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 8013ff2:	78fa      	ldrb	r2, [r7, #3]
 8013ff4:	6879      	ldr	r1, [r7, #4]
 8013ff6:	4613      	mov	r3, r2
 8013ff8:	00db      	lsls	r3, r3, #3
 8013ffa:	1a9b      	subs	r3, r3, r2
 8013ffc:	440b      	add	r3, r1
 8013ffe:	330d      	adds	r3, #13
 8014000:	2201      	movs	r2, #1
 8014002:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 8014004:	78fa      	ldrb	r2, [r7, #3]
 8014006:	6879      	ldr	r1, [r7, #4]
 8014008:	4613      	mov	r3, r2
 801400a:	00db      	lsls	r3, r3, #3
 801400c:	1a9b      	subs	r3, r3, r2
 801400e:	440b      	add	r3, r1
 8014010:	330e      	adds	r3, #14
 8014012:	2200      	movs	r2, #0
 8014014:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 8014016:	78fa      	ldrb	r2, [r7, #3]
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	1d19      	adds	r1, r3, #4
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	4613      	mov	r3, r2
 8014020:	00db      	lsls	r3, r3, #3
 8014022:	1a9b      	subs	r3, r3, r2
 8014024:	4403      	add	r3, r0
 8014026:	3308      	adds	r3, #8
 8014028:	6019      	str	r1, [r3, #0]
        };
 801402a:	bf00      	nop
 801402c:	370c      	adds	r7, #12
 801402e:	46bd      	mov	sp, r7
 8014030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014034:	4770      	bx	lr

08014036 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 8014036:	b580      	push	{r7, lr}
 8014038:	b084      	sub	sp, #16
 801403a:	af00      	add	r7, sp, #0
 801403c:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 801403e:	2301      	movs	r3, #1
 8014040:	73fb      	strb	r3, [r7, #15]
 8014042:	7bfb      	ldrb	r3, [r7, #15]
 8014044:	2b0f      	cmp	r3, #15
 8014046:	d808      	bhi.n	801405a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 8014048:	7bfb      	ldrb	r3, [r7, #15]
 801404a:	4619      	mov	r1, r3
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f7ff ffc1 	bl	8013fd4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 8014052:	7bfb      	ldrb	r3, [r7, #15]
 8014054:	3301      	adds	r3, #1
 8014056:	73fb      	strb	r3, [r7, #15]
 8014058:	e7f3      	b.n	8014042 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2200      	movs	r2, #0
 801405e:	71da      	strb	r2, [r3, #7]
        };
 8014060:	bf00      	nop
 8014062:	3710      	adds	r7, #16
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}

08014068 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 8014068:	b480      	push	{r7}
 801406a:	b085      	sub	sp, #20
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
 8014070:	460b      	mov	r3, r1
 8014072:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8014074:	2301      	movs	r3, #1
 8014076:	73fb      	strb	r3, [r7, #15]
 8014078:	7bfb      	ldrb	r3, [r7, #15]
 801407a:	2b0f      	cmp	r3, #15
 801407c:	d810      	bhi.n	80140a0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 801407e:	7bfa      	ldrb	r2, [r7, #15]
 8014080:	6879      	ldr	r1, [r7, #4]
 8014082:	4613      	mov	r3, r2
 8014084:	00db      	lsls	r3, r3, #3
 8014086:	1a9b      	subs	r3, r3, r2
 8014088:	440b      	add	r3, r1
 801408a:	330c      	adds	r3, #12
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	78fa      	ldrb	r2, [r7, #3]
 8014090:	429a      	cmp	r2, r3
 8014092:	d101      	bne.n	8014098 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 8014094:	7bfb      	ldrb	r3, [r7, #15]
 8014096:	e004      	b.n	80140a2 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8014098:	7bfb      	ldrb	r3, [r7, #15]
 801409a:	3301      	adds	r3, #1
 801409c:	73fb      	strb	r3, [r7, #15]
 801409e:	e7eb      	b.n	8014078 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 80140a0:	2300      	movs	r3, #0
        };
 80140a2:	4618      	mov	r0, r3
 80140a4:	3714      	adds	r7, #20
 80140a6:	46bd      	mov	sp, r7
 80140a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ac:	4770      	bx	lr

080140ae <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 80140ae:	b580      	push	{r7, lr}
 80140b0:	b084      	sub	sp, #16
 80140b2:	af00      	add	r7, sp, #0
 80140b4:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 80140b6:	2300      	movs	r3, #0
 80140b8:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 80140ba:	21c8      	movs	r1, #200	; 0xc8
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f7ed ff15 	bl	8001eec <_ZN8MAX3421eI3P102P9E5regRdEh>
 80140c2:	4603      	mov	r3, r0
 80140c4:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 80140c6:	7bbb      	ldrb	r3, [r7, #14]
 80140c8:	f003 0320 	and.w	r3, r3, #32
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d006      	beq.n	80140de <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 80140d0:	6878      	ldr	r0, [r7, #4]
 80140d2:	f7ed ff2d 	bl	8001f30 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 80140d6:	7bfb      	ldrb	r3, [r7, #15]
 80140d8:	f043 0320 	orr.w	r3, r3, #32
 80140dc:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 80140de:	7bfb      	ldrb	r3, [r7, #15]
 80140e0:	461a      	mov	r2, r3
 80140e2:	21c8      	movs	r1, #200	; 0xc8
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f7ed feaf 	bl	8001e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 80140ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80140ec:	4618      	mov	r0, r3
 80140ee:	3710      	adds	r7, #16
 80140f0:	46bd      	mov	sp, r7
 80140f2:	bd80      	pop	{r7, pc}

080140f4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b084      	sub	sp, #16
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
 80140fc:	460b      	mov	r3, r1
 80140fe:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 8014100:	78fb      	ldrb	r3, [r7, #3]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d03a      	beq.n	801417c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 8014106:	78fa      	ldrb	r2, [r7, #3]
 8014108:	6879      	ldr	r1, [r7, #4]
 801410a:	4613      	mov	r3, r2
 801410c:	00db      	lsls	r3, r3, #3
 801410e:	1a9b      	subs	r3, r3, r2
 8014110:	440b      	add	r3, r1
 8014112:	330c      	adds	r3, #12
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 8014118:	7b3b      	ldrb	r3, [r7, #12]
 801411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801411e:	b2db      	uxtb	r3, r3
 8014120:	2b00      	cmp	r3, #0
 8014122:	d025      	beq.n	8014170 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8014124:	2301      	movs	r3, #1
 8014126:	73fb      	strb	r3, [r7, #15]
 8014128:	7bfb      	ldrb	r3, [r7, #15]
 801412a:	461a      	mov	r2, r3
 801412c:	7b39      	ldrb	r1, [r7, #12]
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f000 f828 	bl	8014184 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 8014134:	4603      	mov	r3, r0
 8014136:	73fb      	strb	r3, [r7, #15]
 8014138:	7bfb      	ldrb	r3, [r7, #15]
 801413a:	2b00      	cmp	r3, #0
 801413c:	bf14      	ite	ne
 801413e:	2301      	movne	r3, #1
 8014140:	2300      	moveq	r3, #0
 8014142:	b2db      	uxtb	r3, r3
 8014144:	2b00      	cmp	r3, #0
 8014146:	d005      	beq.n	8014154 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 8014148:	7bfb      	ldrb	r3, [r7, #15]
 801414a:	4619      	mov	r1, r3
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f7ff ffd1 	bl	80140f4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8014152:	e7e9      	b.n	8014128 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	79db      	ldrb	r3, [r3, #7]
 8014158:	7b3a      	ldrb	r2, [r7, #12]
 801415a:	f3c2 0202 	ubfx	r2, r2, #0, #3
 801415e:	b2d2      	uxtb	r2, r2
 8014160:	4293      	cmp	r3, r2
 8014162:	d105      	bne.n	8014170 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	79db      	ldrb	r3, [r3, #7]
 8014168:	3b01      	subs	r3, #1
 801416a:	b2da      	uxtb	r2, r3
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 8014170:	78fb      	ldrb	r3, [r7, #3]
 8014172:	4619      	mov	r1, r3
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f7ff ff2d 	bl	8013fd4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 801417a:	e000      	b.n	801417e <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 801417c:	bf00      	nop
        }
 801417e:	3710      	adds	r7, #16
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}

08014184 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 8014184:	b480      	push	{r7}
 8014186:	b085      	sub	sp, #20
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
 801418c:	7039      	strb	r1, [r7, #0]
 801418e:	4613      	mov	r3, r2
 8014190:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 8014192:	78fb      	ldrb	r3, [r7, #3]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d004      	beq.n	80141a2 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8014198:	78fb      	ldrb	r3, [r7, #3]
 801419a:	2b0f      	cmp	r3, #15
 801419c:	d801      	bhi.n	80141a2 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 801419e:	78fb      	ldrb	r3, [r7, #3]
 80141a0:	e000      	b.n	80141a4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 80141a2:	2301      	movs	r3, #1
 80141a4:	73fb      	strb	r3, [r7, #15]
 80141a6:	7bfb      	ldrb	r3, [r7, #15]
 80141a8:	2b0f      	cmp	r3, #15
 80141aa:	d816      	bhi.n	80141da <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 80141ac:	7bfa      	ldrb	r2, [r7, #15]
 80141ae:	6879      	ldr	r1, [r7, #4]
 80141b0:	4613      	mov	r3, r2
 80141b2:	00db      	lsls	r3, r3, #3
 80141b4:	1a9b      	subs	r3, r3, r2
 80141b6:	440b      	add	r3, r1
 80141b8:	3308      	adds	r3, #8
 80141ba:	791b      	ldrb	r3, [r3, #4]
 80141bc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80141c0:	b2da      	uxtb	r2, r3
 80141c2:	783b      	ldrb	r3, [r7, #0]
 80141c4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80141c8:	b2db      	uxtb	r3, r3
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d101      	bne.n	80141d2 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 80141ce:	7bfb      	ldrb	r3, [r7, #15]
 80141d0:	e004      	b.n	80141dc <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 80141d2:	7bfb      	ldrb	r3, [r7, #15]
 80141d4:	3301      	adds	r3, #1
 80141d6:	73fb      	strb	r3, [r7, #15]
 80141d8:	e7e5      	b.n	80141a6 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 80141da:	2300      	movs	r3, #0
        };
 80141dc:	4618      	mov	r0, r3
 80141de:	3714      	adds	r7, #20
 80141e0:	46bd      	mov	sp, r7
 80141e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e6:	4770      	bx	lr

080141e8 <_Z10D_PrintHexItEvT_i>:
template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b082      	sub	sp, #8
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	4603      	mov	r3, r0
 80141f0:	6039      	str	r1, [r7, #0]
 80141f2:	80fb      	strh	r3, [r7, #6]
        PrintHex<T > (val, lvl);
 80141f4:	88fb      	ldrh	r3, [r7, #6]
 80141f6:	6839      	ldr	r1, [r7, #0]
 80141f8:	4618      	mov	r0, r3
 80141fa:	f000 f804 	bl	8014206 <_Z8PrintHexItEvT_i>
}
 80141fe:	bf00      	nop
 8014200:	3708      	adds	r7, #8
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}

08014206 <_Z8PrintHexItEvT_i>:
void PrintHex(T val, int lvl) {
 8014206:	b580      	push	{r7, lr}
 8014208:	b084      	sub	sp, #16
 801420a:	af00      	add	r7, sp, #0
 801420c:	4603      	mov	r3, r0
 801420e:	6039      	str	r1, [r7, #0]
 8014210:	80fb      	strh	r3, [r7, #6]
        int num_nibbles = sizeof (T) * 2;
 8014212:	2304      	movs	r3, #4
 8014214:	60fb      	str	r3, [r7, #12]
                char v = 48 + (((val >> (num_nibbles - 1) * 4)) & 0x0f);
 8014216:	88fa      	ldrh	r2, [r7, #6]
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	3b01      	subs	r3, #1
 801421c:	009b      	lsls	r3, r3, #2
 801421e:	fa42 f303 	asr.w	r3, r2, r3
 8014222:	b2db      	uxtb	r3, r3
 8014224:	f003 030f 	and.w	r3, r3, #15
 8014228:	b2db      	uxtb	r3, r3
 801422a:	3330      	adds	r3, #48	; 0x30
 801422c:	72fb      	strb	r3, [r7, #11]
                if(v > 57) v += 7;
 801422e:	7afb      	ldrb	r3, [r7, #11]
 8014230:	2b39      	cmp	r3, #57	; 0x39
 8014232:	d902      	bls.n	801423a <_Z8PrintHexItEvT_i+0x34>
 8014234:	7afb      	ldrb	r3, [r7, #11]
 8014236:	3307      	adds	r3, #7
 8014238:	72fb      	strb	r3, [r7, #11]
                E_Notifyc(v, lvl);
 801423a:	7afb      	ldrb	r3, [r7, #11]
 801423c:	6839      	ldr	r1, [r7, #0]
 801423e:	4618      	mov	r0, r3
 8014240:	f000 f810 	bl	8014264 <_Z9E_Notifycci>
        do {
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	3b01      	subs	r3, #1
 8014248:	60fb      	str	r3, [r7, #12]
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	2b00      	cmp	r3, #0
 801424e:	bf14      	ite	ne
 8014250:	2301      	movne	r3, #1
 8014252:	2300      	moveq	r3, #0
 8014254:	b2db      	uxtb	r3, r3
 8014256:	2b00      	cmp	r3, #0
 8014258:	d000      	beq.n	801425c <_Z8PrintHexItEvT_i+0x56>
 801425a:	e7dc      	b.n	8014216 <_Z8PrintHexItEvT_i+0x10>
}
 801425c:	bf00      	nop
 801425e:	3710      	adds	r7, #16
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}

08014264 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
 801426a:	4603      	mov	r3, r0
 801426c:	6039      	str	r1, [r7, #0]
 801426e:	71fb      	strb	r3, [r7, #7]
        if(UsbDEBUGlvl < lvl) return;
 8014270:	4b07      	ldr	r3, [pc, #28]	; (8014290 <_Z9E_Notifycci+0x2c>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	683a      	ldr	r2, [r7, #0]
 8014276:	429a      	cmp	r2, r3
 8014278:	dc05      	bgt.n	8014286 <_Z9E_Notifycci+0x22>
#if defined(ARDUINO) && ARDUINO >=100
        USB_HOST_SERIAL.print(c);
 801427a:	79fb      	ldrb	r3, [r7, #7]
 801427c:	4619      	mov	r1, r3
 801427e:	4805      	ldr	r0, [pc, #20]	; (8014294 <_Z9E_Notifycci+0x30>)
 8014280:	f7ec f9a8 	bl	80005d4 <_ZN5Print5printEc>
 8014284:	e000      	b.n	8014288 <_Z9E_Notifycci+0x24>
        if(UsbDEBUGlvl < lvl) return;
 8014286:	bf00      	nop
#else
        USB_HOST_SERIAL.print(c, BYTE);
#endif
        //USB_HOST_SERIAL.flush();
}
 8014288:	3708      	adds	r7, #8
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
 801428e:	bf00      	nop
 8014290:	2000011c 	.word	0x2000011c
 8014294:	200003c0 	.word	0x200003c0

08014298 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
 8014298:	b580      	push	{r7, lr}
 801429a:	b084      	sub	sp, #16
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	6039      	str	r1, [r7, #0]
        if(UsbDEBUGlvl < lvl) return;
 80142a2:	4b10      	ldr	r3, [pc, #64]	; (80142e4 <_Z8E_NotifyPKci+0x4c>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	683a      	ldr	r2, [r7, #0]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	dc15      	bgt.n	80142d8 <_Z8E_NotifyPKci+0x40>
        if(!msg) return;
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d014      	beq.n	80142dc <_Z8E_NotifyPKci+0x44>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	1c5a      	adds	r2, r3, #1
 80142b6:	607a      	str	r2, [r7, #4]
 80142b8:	781b      	ldrb	r3, [r3, #0]
 80142ba:	73fb      	strb	r3, [r7, #15]
 80142bc:	7bfb      	ldrb	r3, [r7, #15]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	bf14      	ite	ne
 80142c2:	2301      	movne	r3, #1
 80142c4:	2300      	moveq	r3, #0
 80142c6:	b2db      	uxtb	r3, r3
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d008      	beq.n	80142de <_Z8E_NotifyPKci+0x46>
 80142cc:	7bfb      	ldrb	r3, [r7, #15]
 80142ce:	6839      	ldr	r1, [r7, #0]
 80142d0:	4618      	mov	r0, r3
 80142d2:	f7ff ffc7 	bl	8014264 <_Z9E_Notifycci>
 80142d6:	e7ec      	b.n	80142b2 <_Z8E_NotifyPKci+0x1a>
        if(UsbDEBUGlvl < lvl) return;
 80142d8:	bf00      	nop
 80142da:	e000      	b.n	80142de <_Z8E_NotifyPKci+0x46>
        if(!msg) return;
 80142dc:	bf00      	nop
}
 80142de:	3710      	adds	r7, #16
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}
 80142e4:	2000011c 	.word	0x2000011c

080142e8 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b084      	sub	sp, #16
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
 80142f0:	6039      	str	r1, [r7, #0]
        if(UsbDEBUGlvl < lvl) return;
 80142f2:	4b10      	ldr	r3, [pc, #64]	; (8014334 <_Z11E_NotifyStrPKci+0x4c>)
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	683a      	ldr	r2, [r7, #0]
 80142f8:	429a      	cmp	r2, r3
 80142fa:	dc15      	bgt.n	8014328 <_Z11E_NotifyStrPKci+0x40>
        if(!msg) return;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d014      	beq.n	801432c <_Z11E_NotifyStrPKci+0x44>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	1c5a      	adds	r2, r3, #1
 8014306:	607a      	str	r2, [r7, #4]
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	73fb      	strb	r3, [r7, #15]
 801430c:	7bfb      	ldrb	r3, [r7, #15]
 801430e:	2b00      	cmp	r3, #0
 8014310:	bf14      	ite	ne
 8014312:	2301      	movne	r3, #1
 8014314:	2300      	moveq	r3, #0
 8014316:	b2db      	uxtb	r3, r3
 8014318:	2b00      	cmp	r3, #0
 801431a:	d008      	beq.n	801432e <_Z11E_NotifyStrPKci+0x46>
 801431c:	7bfb      	ldrb	r3, [r7, #15]
 801431e:	6839      	ldr	r1, [r7, #0]
 8014320:	4618      	mov	r0, r3
 8014322:	f7ff ff9f 	bl	8014264 <_Z9E_Notifycci>
 8014326:	e7ec      	b.n	8014302 <_Z11E_NotifyStrPKci+0x1a>
        if(UsbDEBUGlvl < lvl) return;
 8014328:	bf00      	nop
 801432a:	e000      	b.n	801432e <_Z11E_NotifyStrPKci+0x46>
        if(!msg) return;
 801432c:	bf00      	nop
}
 801432e:	3710      	adds	r7, #16
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}
 8014334:	2000011c 	.word	0x2000011c

08014338 <_Z21NotifyFailGetDevDescrv>:
        //USB_HOST_SERIAL.flush();
}

#ifdef DEBUG_USB_HOST

void NotifyFailGetDevDescr(void) {
 8014338:	b580      	push	{r7, lr}
 801433a:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\ngetDevDescr "), 0x80);
 801433c:	2180      	movs	r1, #128	; 0x80
 801433e:	4802      	ldr	r0, [pc, #8]	; (8014348 <_Z21NotifyFailGetDevDescrv+0x10>)
 8014340:	f7ff ffaa 	bl	8014298 <_Z8E_NotifyPKci>
}
 8014344:	bf00      	nop
 8014346:	bd80      	pop	{r7, pc}
 8014348:	0801551c 	.word	0x0801551c

0801434c <_Z24NotifyFailSetDevTblEntryv>:

void NotifyFailSetDevTblEntry(void) {
 801434c:	b580      	push	{r7, lr}
 801434e:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\nsetDevTblEn "), 0x80);
 8014350:	2180      	movs	r1, #128	; 0x80
 8014352:	4802      	ldr	r0, [pc, #8]	; (801435c <_Z24NotifyFailSetDevTblEntryv+0x10>)
 8014354:	f7ff ffa0 	bl	8014298 <_Z8E_NotifyPKci>
}
 8014358:	bf00      	nop
 801435a:	bd80      	pop	{r7, pc}
 801435c:	0801552c 	.word	0x0801552c

08014360 <_Z22NotifyFailGetConfDescrv>:

void NotifyFailGetConfDescr(void) {
 8014360:	b580      	push	{r7, lr}
 8014362:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\ngetConf "), 0x80);
 8014364:	2180      	movs	r1, #128	; 0x80
 8014366:	4802      	ldr	r0, [pc, #8]	; (8014370 <_Z22NotifyFailGetConfDescrv+0x10>)
 8014368:	f7ff ff96 	bl	8014298 <_Z8E_NotifyPKci>
}
 801436c:	bf00      	nop
 801436e:	bd80      	pop	{r7, pc}
 8014370:	0801553c 	.word	0x0801553c

08014374 <_Z22NotifyFailSetConfDescrv>:

void NotifyFailSetConfDescr(void) {
 8014374:	b580      	push	{r7, lr}
 8014376:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\nsetConf "), 0x80);
 8014378:	2180      	movs	r1, #128	; 0x80
 801437a:	4802      	ldr	r0, [pc, #8]	; (8014384 <_Z22NotifyFailSetConfDescrv+0x10>)
 801437c:	f7ff ff8c 	bl	8014298 <_Z8E_NotifyPKci>
}
 8014380:	bf00      	nop
 8014382:	bd80      	pop	{r7, pc}
 8014384:	08015548 	.word	0x08015548

08014388 <_Z21NotifyFailGetDevDescrh>:

void NotifyFailGetDevDescr(uint8_t reason) {
 8014388:	b580      	push	{r7, lr}
 801438a:	b082      	sub	sp, #8
 801438c:	af00      	add	r7, sp, #0
 801438e:	4603      	mov	r3, r0
 8014390:	71fb      	strb	r3, [r7, #7]
        NotifyFailGetDevDescr();
 8014392:	f7ff ffd1 	bl	8014338 <_Z21NotifyFailGetDevDescrv>
        NotifyFail(reason);
 8014396:	79fb      	ldrb	r3, [r7, #7]
 8014398:	4618      	mov	r0, r3
 801439a:	f000 f827 	bl	80143ec <_Z10NotifyFailh>
}
 801439e:	bf00      	nop
 80143a0:	3708      	adds	r7, #8
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
	...

080143a8 <_Z23NotifyFailUnknownDevicett>:
void NotifyFailSetConfDescr(uint8_t reason) {
        NotifyFailSetConfDescr();
        NotifyFail(reason);
}

void NotifyFailUnknownDevice(uint16_t VID, uint16_t PID) {
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	4603      	mov	r3, r0
 80143b0:	460a      	mov	r2, r1
 80143b2:	80fb      	strh	r3, [r7, #6]
 80143b4:	4613      	mov	r3, r2
 80143b6:	80bb      	strh	r3, [r7, #4]
        Notify(PSTR("\r\nUnknown Device Connected - VID: "), 0x80);
 80143b8:	2180      	movs	r1, #128	; 0x80
 80143ba:	480a      	ldr	r0, [pc, #40]	; (80143e4 <_Z23NotifyFailUnknownDevicett+0x3c>)
 80143bc:	f7ff ff6c 	bl	8014298 <_Z8E_NotifyPKci>
        D_PrintHex<uint16_t > (VID, 0x80);
 80143c0:	88fb      	ldrh	r3, [r7, #6]
 80143c2:	2180      	movs	r1, #128	; 0x80
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7ff ff0f 	bl	80141e8 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR(" PID: "), 0x80);
 80143ca:	2180      	movs	r1, #128	; 0x80
 80143cc:	4806      	ldr	r0, [pc, #24]	; (80143e8 <_Z23NotifyFailUnknownDevicett+0x40>)
 80143ce:	f7ff ff63 	bl	8014298 <_Z8E_NotifyPKci>
        D_PrintHex<uint16_t > (PID, 0x80);
 80143d2:	88bb      	ldrh	r3, [r7, #4]
 80143d4:	2180      	movs	r1, #128	; 0x80
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7ff ff06 	bl	80141e8 <_Z10D_PrintHexItEvT_i>
}
 80143dc:	bf00      	nop
 80143de:	3708      	adds	r7, #8
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}
 80143e4:	08015554 	.word	0x08015554
 80143e8:	08015578 	.word	0x08015578

080143ec <_Z10NotifyFailh>:

void NotifyFail(uint8_t rcode) {
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b082      	sub	sp, #8
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	4603      	mov	r3, r0
 80143f4:	71fb      	strb	r3, [r7, #7]
        D_PrintHex<uint8_t > (rcode, 0x80);
 80143f6:	79fb      	ldrb	r3, [r7, #7]
 80143f8:	2180      	movs	r1, #128	; 0x80
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7fc fa49 	bl	8010892 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\n"), 0x80);
 8014400:	2180      	movs	r1, #128	; 0x80
 8014402:	4803      	ldr	r0, [pc, #12]	; (8014410 <_Z10NotifyFailh+0x24>)
 8014404:	f7ff ff48 	bl	8014298 <_Z8E_NotifyPKci>
}
 8014408:	bf00      	nop
 801440a:	3708      	adds	r7, #8
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}
 8014410:	08015580 	.word	0x08015580

08014414 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 8014414:	b580      	push	{r7, lr}
 8014416:	b084      	sub	sp, #16
 8014418:	af00      	add	r7, sp, #0
 801441a:	60f8      	str	r0, [r7, #12]
 801441c:	60b9      	str	r1, [r7, #8]
 801441e:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d105      	bne.n	8014434 <_ZN20MultiByteValueParser5ParseEPPhPt+0x20>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
 8014428:	2180      	movs	r1, #128	; 0x80
 801442a:	481d      	ldr	r0, [pc, #116]	; (80144a0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x8c>)
 801442c:	f7ff ff34 	bl	8014298 <_Z8E_NotifyPKci>
                return false;
 8014430:	2300      	movs	r3, #0
 8014432:	e031      	b.n	8014498 <_ZN20MultiByteValueParser5ParseEPPhPt+0x84>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	791b      	ldrb	r3, [r3, #4]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d022      	beq.n	8014482 <_ZN20MultiByteValueParser5ParseEPPhPt+0x6e>
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	881b      	ldrh	r3, [r3, #0]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d01e      	beq.n	8014482 <_ZN20MultiByteValueParser5ParseEPPhPt+0x6e>
                pBuf[valueSize - countDown] = (**pp);
 8014444:	68bb      	ldr	r3, [r7, #8]
 8014446:	681a      	ldr	r2, [r3, #0]
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	68f9      	ldr	r1, [r7, #12]
 801444e:	7949      	ldrb	r1, [r1, #5]
 8014450:	4608      	mov	r0, r1
 8014452:	68f9      	ldr	r1, [r7, #12]
 8014454:	7909      	ldrb	r1, [r1, #4]
 8014456:	1a41      	subs	r1, r0, r1
 8014458:	440b      	add	r3, r1
 801445a:	7812      	ldrb	r2, [r2, #0]
 801445c:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	791b      	ldrb	r3, [r3, #4]
 8014462:	3b01      	subs	r3, #1
 8014464:	b2da      	uxtb	r2, r3
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	711a      	strb	r2, [r3, #4]
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	881b      	ldrh	r3, [r3, #0]
 801446e:	3b01      	subs	r3, #1
 8014470:	b29a      	uxth	r2, r3
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	801a      	strh	r2, [r3, #0]
 8014476:	68bb      	ldr	r3, [r7, #8]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	1c5a      	adds	r2, r3, #1
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	601a      	str	r2, [r3, #0]
 8014480:	e7d8      	b.n	8014434 <_ZN20MultiByteValueParser5ParseEPPhPt+0x20>

        if(countDown)
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	791b      	ldrb	r3, [r3, #4]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d001      	beq.n	801448e <_ZN20MultiByteValueParser5ParseEPPhPt+0x7a>
                return false;
 801448a:	2300      	movs	r3, #0
 801448c:	e004      	b.n	8014498 <_ZN20MultiByteValueParser5ParseEPPhPt+0x84>

        countDown = valueSize;
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	795a      	ldrb	r2, [r3, #5]
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	711a      	strb	r2, [r3, #4]
        return true;
 8014496:	2301      	movs	r3, #1
}
 8014498:	4618      	mov	r0, r3
 801449a:	3710      	adds	r7, #16
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}
 80144a0:	08015584 	.word	0x08015584

080144a4 <__cxa_pure_virtual>:
 80144a4:	b508      	push	{r3, lr}
 80144a6:	f000 f80d 	bl	80144c4 <_ZSt9terminatev>

080144aa <_ZN10__cxxabiv111__terminateEPFvvE>:
 80144aa:	b508      	push	{r3, lr}
 80144ac:	4780      	blx	r0
 80144ae:	f000 f80e 	bl	80144ce <abort>
	...

080144b4 <_ZSt13get_terminatev>:
 80144b4:	4b02      	ldr	r3, [pc, #8]	; (80144c0 <_ZSt13get_terminatev+0xc>)
 80144b6:	6818      	ldr	r0, [r3, #0]
 80144b8:	f3bf 8f5b 	dmb	ish
 80144bc:	4770      	bx	lr
 80144be:	bf00      	nop
 80144c0:	20000120 	.word	0x20000120

080144c4 <_ZSt9terminatev>:
 80144c4:	b508      	push	{r3, lr}
 80144c6:	f7ff fff5 	bl	80144b4 <_ZSt13get_terminatev>
 80144ca:	f7ff ffee 	bl	80144aa <_ZN10__cxxabiv111__terminateEPFvvE>

080144ce <abort>:
 80144ce:	b508      	push	{r3, lr}
 80144d0:	2006      	movs	r0, #6
 80144d2:	f000 f86b 	bl	80145ac <raise>
 80144d6:	2001      	movs	r0, #1
 80144d8:	f7ed ffa2 	bl	8002420 <_exit>

080144dc <__errno>:
 80144dc:	4b01      	ldr	r3, [pc, #4]	; (80144e4 <__errno+0x8>)
 80144de:	6818      	ldr	r0, [r3, #0]
 80144e0:	4770      	bx	lr
 80144e2:	bf00      	nop
 80144e4:	20000124 	.word	0x20000124

080144e8 <__libc_init_array>:
 80144e8:	b570      	push	{r4, r5, r6, lr}
 80144ea:	4d0d      	ldr	r5, [pc, #52]	; (8014520 <__libc_init_array+0x38>)
 80144ec:	4c0d      	ldr	r4, [pc, #52]	; (8014524 <__libc_init_array+0x3c>)
 80144ee:	1b64      	subs	r4, r4, r5
 80144f0:	10a4      	asrs	r4, r4, #2
 80144f2:	2600      	movs	r6, #0
 80144f4:	42a6      	cmp	r6, r4
 80144f6:	d109      	bne.n	801450c <__libc_init_array+0x24>
 80144f8:	4d0b      	ldr	r5, [pc, #44]	; (8014528 <__libc_init_array+0x40>)
 80144fa:	4c0c      	ldr	r4, [pc, #48]	; (801452c <__libc_init_array+0x44>)
 80144fc:	f000 f884 	bl	8014608 <_init>
 8014500:	1b64      	subs	r4, r4, r5
 8014502:	10a4      	asrs	r4, r4, #2
 8014504:	2600      	movs	r6, #0
 8014506:	42a6      	cmp	r6, r4
 8014508:	d105      	bne.n	8014516 <__libc_init_array+0x2e>
 801450a:	bd70      	pop	{r4, r5, r6, pc}
 801450c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014510:	4798      	blx	r3
 8014512:	3601      	adds	r6, #1
 8014514:	e7ee      	b.n	80144f4 <__libc_init_array+0xc>
 8014516:	f855 3b04 	ldr.w	r3, [r5], #4
 801451a:	4798      	blx	r3
 801451c:	3601      	adds	r6, #1
 801451e:	e7f2      	b.n	8014506 <__libc_init_array+0x1e>
 8014520:	0801660c 	.word	0x0801660c
 8014524:	0801660c 	.word	0x0801660c
 8014528:	0801660c 	.word	0x0801660c
 801452c:	08016614 	.word	0x08016614

08014530 <memcpy>:
 8014530:	440a      	add	r2, r1
 8014532:	4291      	cmp	r1, r2
 8014534:	f100 33ff 	add.w	r3, r0, #4294967295
 8014538:	d100      	bne.n	801453c <memcpy+0xc>
 801453a:	4770      	bx	lr
 801453c:	b510      	push	{r4, lr}
 801453e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014546:	4291      	cmp	r1, r2
 8014548:	d1f9      	bne.n	801453e <memcpy+0xe>
 801454a:	bd10      	pop	{r4, pc}

0801454c <memset>:
 801454c:	4402      	add	r2, r0
 801454e:	4603      	mov	r3, r0
 8014550:	4293      	cmp	r3, r2
 8014552:	d100      	bne.n	8014556 <memset+0xa>
 8014554:	4770      	bx	lr
 8014556:	f803 1b01 	strb.w	r1, [r3], #1
 801455a:	e7f9      	b.n	8014550 <memset+0x4>

0801455c <_raise_r>:
 801455c:	291f      	cmp	r1, #31
 801455e:	b538      	push	{r3, r4, r5, lr}
 8014560:	4604      	mov	r4, r0
 8014562:	460d      	mov	r5, r1
 8014564:	d904      	bls.n	8014570 <_raise_r+0x14>
 8014566:	2316      	movs	r3, #22
 8014568:	6003      	str	r3, [r0, #0]
 801456a:	f04f 30ff 	mov.w	r0, #4294967295
 801456e:	bd38      	pop	{r3, r4, r5, pc}
 8014570:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014572:	b112      	cbz	r2, 801457a <_raise_r+0x1e>
 8014574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014578:	b94b      	cbnz	r3, 801458e <_raise_r+0x32>
 801457a:	4620      	mov	r0, r4
 801457c:	f000 f830 	bl	80145e0 <_getpid_r>
 8014580:	462a      	mov	r2, r5
 8014582:	4601      	mov	r1, r0
 8014584:	4620      	mov	r0, r4
 8014586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801458a:	f000 b817 	b.w	80145bc <_kill_r>
 801458e:	2b01      	cmp	r3, #1
 8014590:	d00a      	beq.n	80145a8 <_raise_r+0x4c>
 8014592:	1c59      	adds	r1, r3, #1
 8014594:	d103      	bne.n	801459e <_raise_r+0x42>
 8014596:	2316      	movs	r3, #22
 8014598:	6003      	str	r3, [r0, #0]
 801459a:	2001      	movs	r0, #1
 801459c:	e7e7      	b.n	801456e <_raise_r+0x12>
 801459e:	2400      	movs	r4, #0
 80145a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80145a4:	4628      	mov	r0, r5
 80145a6:	4798      	blx	r3
 80145a8:	2000      	movs	r0, #0
 80145aa:	e7e0      	b.n	801456e <_raise_r+0x12>

080145ac <raise>:
 80145ac:	4b02      	ldr	r3, [pc, #8]	; (80145b8 <raise+0xc>)
 80145ae:	4601      	mov	r1, r0
 80145b0:	6818      	ldr	r0, [r3, #0]
 80145b2:	f7ff bfd3 	b.w	801455c <_raise_r>
 80145b6:	bf00      	nop
 80145b8:	20000124 	.word	0x20000124

080145bc <_kill_r>:
 80145bc:	b538      	push	{r3, r4, r5, lr}
 80145be:	4d07      	ldr	r5, [pc, #28]	; (80145dc <_kill_r+0x20>)
 80145c0:	2300      	movs	r3, #0
 80145c2:	4604      	mov	r4, r0
 80145c4:	4608      	mov	r0, r1
 80145c6:	4611      	mov	r1, r2
 80145c8:	602b      	str	r3, [r5, #0]
 80145ca:	f7ed ff19 	bl	8002400 <_kill>
 80145ce:	1c43      	adds	r3, r0, #1
 80145d0:	d102      	bne.n	80145d8 <_kill_r+0x1c>
 80145d2:	682b      	ldr	r3, [r5, #0]
 80145d4:	b103      	cbz	r3, 80145d8 <_kill_r+0x1c>
 80145d6:	6023      	str	r3, [r4, #0]
 80145d8:	bd38      	pop	{r3, r4, r5, pc}
 80145da:	bf00      	nop
 80145dc:	20005d68 	.word	0x20005d68

080145e0 <_getpid_r>:
 80145e0:	f7ed bf06 	b.w	80023f0 <_getpid>

080145e4 <strncmp>:
 80145e4:	b510      	push	{r4, lr}
 80145e6:	b16a      	cbz	r2, 8014604 <strncmp+0x20>
 80145e8:	3901      	subs	r1, #1
 80145ea:	1884      	adds	r4, r0, r2
 80145ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 80145f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80145f4:	4293      	cmp	r3, r2
 80145f6:	d103      	bne.n	8014600 <strncmp+0x1c>
 80145f8:	42a0      	cmp	r0, r4
 80145fa:	d001      	beq.n	8014600 <strncmp+0x1c>
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d1f5      	bne.n	80145ec <strncmp+0x8>
 8014600:	1a98      	subs	r0, r3, r2
 8014602:	bd10      	pop	{r4, pc}
 8014604:	4610      	mov	r0, r2
 8014606:	e7fc      	b.n	8014602 <strncmp+0x1e>

08014608 <_init>:
 8014608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801460a:	bf00      	nop
 801460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801460e:	bc08      	pop	{r3}
 8014610:	469e      	mov	lr, r3
 8014612:	4770      	bx	lr

08014614 <_fini>:
 8014614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014616:	bf00      	nop
 8014618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801461a:	bc08      	pop	{r3}
 801461c:	469e      	mov	lr, r3
 801461e:	4770      	bx	lr
