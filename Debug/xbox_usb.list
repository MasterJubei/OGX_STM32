
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a908  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800aad8  0800aad8  0001aad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac3c  0800ac3c  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac3c  0800ac3c  0001ac3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac44  0800ac44  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac44  0800ac44  0001ac44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac48  0800ac48  0001ac48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800ac4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000540c  20000110  0800ad5c  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000551c  0800ad5c  0002551c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002401a  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cfe  00000000  00000000  0004415a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb0  00000000  00000000  00048e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e00  00000000  00000000  0004ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000062bb  00000000  00000000  0004cc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000244de  00000000  00000000  00052ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2aa6  00000000  00000000  000773a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00159e47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008768  00000000  00000000  00159e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aac0 	.word	0x0800aac0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	0800aac0 	.word	0x0800aac0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc48 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f856 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f990 	bl	8000844 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f964 	bl	80007f0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000528:	f000 f908 	bl	800073c <MX_SPI1_Init>
  MX_TIM14_Init();
 800052c:	f000 f93c 	bl	80007a8 <MX_TIM14_Init>
  MX_I2C1_Init();
 8000530:	f000 f8d6 	bl	80006e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f007 f8a6 	bl	8007684 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000538:	4a15      	ldr	r2, [pc, #84]	; (8000590 <main+0x7c>)
 800053a:	2100      	movs	r1, #0
 800053c:	4815      	ldr	r0, [pc, #84]	; (8000594 <main+0x80>)
 800053e:	f007 f8eb 	bl	8007718 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a14      	ldr	r2, [pc, #80]	; (8000598 <main+0x84>)
 8000546:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000548:	4a14      	ldr	r2, [pc, #80]	; (800059c <main+0x88>)
 800054a:	2100      	movs	r1, #0
 800054c:	4814      	ldr	r0, [pc, #80]	; (80005a0 <main+0x8c>)
 800054e:	f007 f8e3 	bl	8007718 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a13      	ldr	r2, [pc, #76]	; (80005a4 <main+0x90>)
 8000556:	6013      	str	r3, [r2, #0]

  /* creation of controllerJoin */
  controllerJoinHandle = osThreadNew(StartControllerJoin, NULL, &controllerJoin_attributes);
 8000558:	4a13      	ldr	r2, [pc, #76]	; (80005a8 <main+0x94>)
 800055a:	2100      	movs	r1, #0
 800055c:	4813      	ldr	r0, [pc, #76]	; (80005ac <main+0x98>)
 800055e:	f007 f8db 	bl	8007718 <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <main+0x9c>)
 8000566:	6013      	str	r3, [r2, #0]

  /* creation of buttonPress */
  buttonPressHandle = osThreadNew(StartButtonPress, NULL, &buttonPress_attributes);
 8000568:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <main+0xa0>)
 800056a:	2100      	movs	r1, #0
 800056c:	4812      	ldr	r0, [pc, #72]	; (80005b8 <main+0xa4>)
 800056e:	f007 f8d3 	bl	8007718 <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a11      	ldr	r2, [pc, #68]	; (80005bc <main+0xa8>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of updateLCD */
  updateLCDHandle = osThreadNew(StartUpdateLCD, NULL, &updateLCD_attributes);
 8000578:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <main+0xac>)
 800057a:	2100      	movs	r1, #0
 800057c:	4811      	ldr	r0, [pc, #68]	; (80005c4 <main+0xb0>)
 800057e:	f007 f8cb 	bl	8007718 <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <main+0xb4>)
 8000586:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000588:	f007 f8a0 	bl	80076cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	e7fe      	b.n	800058c <main+0x78>
 800058e:	bf00      	nop
 8000590:	0800ab70 	.word	0x0800ab70
 8000594:	08000935 	.word	0x08000935
 8000598:	20000264 	.word	0x20000264
 800059c:	0800ab94 	.word	0x0800ab94
 80005a0:	08000949 	.word	0x08000949
 80005a4:	20000268 	.word	0x20000268
 80005a8:	0800abb8 	.word	0x0800abb8
 80005ac:	08000959 	.word	0x08000959
 80005b0:	2000026c 	.word	0x2000026c
 80005b4:	0800abdc 	.word	0x0800abdc
 80005b8:	08000969 	.word	0x08000969
 80005bc:	20000270 	.word	0x20000270
 80005c0:	0800ac00 	.word	0x0800ac00
 80005c4:	08000979 	.word	0x08000979
 80005c8:	20000274 	.word	0x20000274

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b0ac      	sub	sp, #176	; 0xb0
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005d6:	2234      	movs	r2, #52	; 0x34
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f00a fa68 	bl	800aab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	225c      	movs	r2, #92	; 0x5c
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00a fa59 	bl	800aab0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <SystemClock_Config+0x10c>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemClock_Config+0x10c>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	6413      	str	r3, [r2, #64]	; 0x40
 800060e:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <SystemClock_Config+0x10c>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemClock_Config+0x110>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a2e      	ldr	r2, [pc, #184]	; (80006dc <SystemClock_Config+0x110>)
 8000624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemClock_Config+0x110>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000636:	2301      	movs	r3, #1
 8000638:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000648:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000656:	23a8      	movs	r3, #168	; 0xa8
 8000658:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000662:	2307      	movs	r3, #7
 8000664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000672:	4618      	mov	r0, r3
 8000674:	f003 f818 	bl	80036a8 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800067e:	f000 f995 	bl	80009ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000692:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800069e:	2105      	movs	r1, #5
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 f95b 	bl	800295c <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006ac:	f000 f97e 	bl	80009ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80006b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80006b6:	2300      	movs	r3, #0
 80006b8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fa98 	bl	8002bf4 <HAL_RCCEx_PeriphCLKConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x102>
  {
    Error_Handler();
 80006ca:	f000 f96f 	bl	80009ac <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	37b0      	adds	r7, #176	; 0xb0
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C1_Init+0x50>)
 80006e6:	4a13      	ldr	r2, [pc, #76]	; (8000734 <MX_I2C1_Init+0x54>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C1_Init+0x50>)
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_I2C1_Init+0x58>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_I2C1_Init+0x50>)
 80006fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_I2C1_Init+0x50>)
 800071e:	f000 fe21 	bl	8001364 <HAL_I2C_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 f940 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000012c 	.word	0x2000012c
 8000734:	40005400 	.word	0x40005400
 8000738:	00061a80 	.word	0x00061a80

0800073c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_SPI1_Init+0x68>)
 8000744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800074c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000770:	2218      	movs	r2, #24
 8000772:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_SPI1_Init+0x64>)
 8000788:	220a      	movs	r2, #10
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_SPI1_Init+0x64>)
 800078e:	f003 fa29 	bl	8003be4 <HAL_SPI_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000798:	f000 f908 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000180 	.word	0x20000180
 80007a4:	40013000 	.word	0x40013000

080007a8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_TIM14_Init+0x40>)
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <MX_TIM14_Init+0x44>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_TIM14_Init+0x40>)
 80007b4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80007b8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_TIM14_Init+0x40>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_TIM14_Init+0x40>)
 80007c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80007c6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_TIM14_Init+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_TIM14_Init+0x40>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_TIM14_Init+0x40>)
 80007d6:	f003 fa8e 	bl	8003cf6 <HAL_TIM_Base_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80007e0:	f000 f8e4 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200001d8 	.word	0x200001d8
 80007ec:	40002000 	.word	0x40002000

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART2_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_USART2_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_USART2_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000828:	f003 fd08 	bl	800423c <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f8bb 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000220 	.word	0x20000220
 8000840:	40004400 	.word	0x40004400

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b30      	ldr	r3, [pc, #192]	; (8000920 <MX_GPIO_Init+0xdc>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a2f      	ldr	r2, [pc, #188]	; (8000920 <MX_GPIO_Init+0xdc>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_GPIO_Init+0xdc>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b29      	ldr	r3, [pc, #164]	; (8000920 <MX_GPIO_Init+0xdc>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a28      	ldr	r2, [pc, #160]	; (8000920 <MX_GPIO_Init+0xdc>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <MX_GPIO_Init+0xdc>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b22      	ldr	r3, [pc, #136]	; (8000920 <MX_GPIO_Init+0xdc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a21      	ldr	r2, [pc, #132]	; (8000920 <MX_GPIO_Init+0xdc>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_GPIO_Init+0xdc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_GPIO_Init+0xdc>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a1a      	ldr	r2, [pc, #104]	; (8000920 <MX_GPIO_Init+0xdc>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_GPIO_Init+0xdc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_GPIO_Init+0xe0>)
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <MX_GPIO_Init+0xe4>)
 80008e0:	f000 fbac 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_GPIO_Init+0xe8>)
 80008fa:	f000 fb9f 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000908:	2301      	movs	r3, #1
 800090a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_GPIO_Init+0xec>)
 8000914:	f000 fb92 	bl	800103c <HAL_GPIO_Init>

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	; 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	10210000 	.word	0x10210000
 8000928:	40020800 	.word	0x40020800
 800092c:	40020400 	.word	0x40020400
 8000930:	40020000 	.word	0x40020000

08000934 <StartGetBT>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGetBT */
void StartGetBT(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800093c:	f009 fbf6 	bl	800a12c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000940:	2001      	movs	r0, #1
 8000942:	f006 ff7b 	bl	800783c <osDelay>
 8000946:	e7fb      	b.n	8000940 <StartGetBT+0xc>

08000948 <StartSendUSB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f006 ff73 	bl	800783c <osDelay>
 8000956:	e7fb      	b.n	8000950 <StartSendUSB+0x8>

08000958 <StartControllerJoin>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerJoin */
void StartControllerJoin(void *argument)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerJoin */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000960:	2001      	movs	r0, #1
 8000962:	f006 ff6b 	bl	800783c <osDelay>
 8000966:	e7fb      	b.n	8000960 <StartControllerJoin+0x8>

08000968 <StartButtonPress>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonPress */
void StartButtonPress(void *argument)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPress */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f006 ff63 	bl	800783c <osDelay>
 8000976:	e7fb      	b.n	8000970 <StartButtonPress+0x8>

08000978 <StartUpdateLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateLCD */
void StartUpdateLCD(void *argument)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUpdateLCD */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000980:	2001      	movs	r0, #1
 8000982:	f006 ff5b 	bl	800783c <osDelay>
 8000986:	e7fb      	b.n	8000980 <StartUpdateLCD+0x8>

08000988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d101      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099a:	f000 fa29 	bl	8000df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40001c00 	.word	0x40001c00

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_MspInit+0x54>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <HAL_MspInit+0x54>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x54>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_MspInit+0x54>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_MspInit+0x54>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_MspInit+0x54>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	210f      	movs	r1, #15
 80009fa:	f06f 0001 	mvn.w	r0, #1
 80009fe:	f000 faf3 	bl	8000fe8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_I2C_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12c      	bne.n	8000a8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a54:	2312      	movs	r3, #18
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a60:	2304      	movs	r3, #4
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480c      	ldr	r0, [pc, #48]	; (8000a9c <HAL_I2C_MspInit+0x8c>)
 8000a6c:	f000 fae6 	bl	800103c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40005400 	.word	0x40005400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <HAL_SPI_MspInit+0x84>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d12b      	bne.n	8000b1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <HAL_SPI_MspInit+0x88>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <HAL_SPI_MspInit+0x88>)
 8000acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_SPI_MspInit+0x88>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_SPI_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <HAL_SPI_MspInit+0x88>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_SPI_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000afa:	23e0      	movs	r3, #224	; 0xe0
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <HAL_SPI_MspInit+0x8c>)
 8000b16:	f000 fa91 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b1a:	bf00      	nop
 8000b1c:	3728      	adds	r7, #40	; 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40013000 	.word	0x40013000
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000

08000b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_TIM_Base_MspInit+0x48>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d115      	bne.n	8000b6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HAL_TIM_Base_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a0c      	ldr	r2, [pc, #48]	; (8000b7c <HAL_TIM_Base_MspInit+0x4c>)
 8000b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_TIM_Base_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2105      	movs	r1, #5
 8000b62:	202d      	movs	r0, #45	; 0x2d
 8000b64:	f000 fa40 	bl	8000fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b68:	202d      	movs	r0, #45	; 0x2d
 8000b6a:	f000 fa59 	bl	8001020 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40002000 	.word	0x40002000
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_UART_MspInit+0x84>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12b      	bne.n	8000bfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bda:	230c      	movs	r3, #12
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bea:	2307      	movs	r3, #7
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_UART_MspInit+0x8c>)
 8000bf6:	f000 fa21 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40004400 	.word	0x40004400
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	; 0x30
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	202c      	movs	r0, #44	; 0x2c
 8000c26:	f000 f9df 	bl	8000fe8 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000c2a:	202c      	movs	r0, #44	; 0x2c
 8000c2c:	f000 f9f8 	bl	8001020 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <HAL_InitTick+0xa4>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <HAL_InitTick+0xa4>)
 8000c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c40:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <HAL_InitTick+0xa4>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c4c:	f107 0210 	add.w	r2, r7, #16
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 ff9a 	bl	8002b90 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c5c:	f001 ff70 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 8000c60:	4603      	mov	r3, r0
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c68:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <HAL_InitTick+0xa8>)
 8000c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6e:	0c9b      	lsrs	r3, r3, #18
 8000c70:	3b01      	subs	r3, #1
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_InitTick+0xac>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <HAL_InitTick+0xb0>)
 8000c78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_InitTick+0xac>)
 8000c7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c80:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <HAL_InitTick+0xac>)
 8000c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c86:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_InitTick+0xac>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_InitTick+0xac>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8000c94:	4809      	ldr	r0, [pc, #36]	; (8000cbc <HAL_InitTick+0xac>)
 8000c96:	f003 f82e 	bl	8003cf6 <HAL_TIM_Base_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d104      	bne.n	8000caa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8000ca0:	4806      	ldr	r0, [pc, #24]	; (8000cbc <HAL_InitTick+0xac>)
 8000ca2:	f003 f877 	bl	8003d94 <HAL_TIM_Base_Start_IT>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3730      	adds	r7, #48	; 0x30
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	431bde83 	.word	0x431bde83
 8000cbc:	20000278 	.word	0x20000278
 8000cc0:	40001c00 	.word	0x40001c00

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000cf6:	f003 f8bd 	bl	8003e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000278 	.word	0x20000278

08000d04 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000d0a:	f003 f8b3 	bl	8003e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200001d8 	.word	0x200001d8

08000d18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <OTG_FS_IRQHandler+0x10>)
 8000d1e:	f000 fdbc 	bl	800189a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20005100 	.word	0x20005100

08000d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <SystemInit+0x28>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d36:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <SystemInit+0x28>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SystemInit+0x28>)
 8000d42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d46:	609a      	str	r2, [r3, #8]
#endif
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d5e:	e003      	b.n	8000d68 <LoopCopyDataInit>

08000d60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d66:	3104      	adds	r1, #4

08000d68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d70:	d3f6      	bcc.n	8000d60 <CopyDataInit>
  ldr  r2, =_sbss
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d74:	e002      	b.n	8000d7c <LoopFillZerobss>

08000d76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d78:	f842 3b04 	str.w	r3, [r2], #4

08000d7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d80:	d3f9      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d82:	f7ff ffd3 	bl	8000d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f009 fe61 	bl	800aa4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fbc3 	bl	8000514 <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d94:	0800ac4c 	.word	0x0800ac4c
  ldr  r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d9c:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8000da0:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 8000da4:	2000551c 	.word	0x2000551c

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f8fc 	bl	8000fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff ff18 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fdea 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	200002c0 	.word	0x200002c0

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	200002c0 	.word	0x200002c0

08000e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_Delay+0x44>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffde 	bl	8000e18 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff4c 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffa:	f7ff ff61 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8000ffe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	68b9      	ldr	r1, [r7, #8]
 8001004:	6978      	ldr	r0, [r7, #20]
 8001006:	f7ff ffb1 	bl	8000f6c <NVIC_EncodePriority>
 800100a:	4602      	mov	r2, r0
 800100c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff80 	bl	8000f18 <__NVIC_SetPriority>
}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff54 	bl	8000edc <__NVIC_EnableIRQ>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e165      	b.n	8001324 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 8154 	bne.w	800131e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d005      	beq.n	800108e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	2b02      	cmp	r3, #2
 800108c:	d130      	bne.n	80010f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d017      	beq.n	800112c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80ae 	beq.w	800131e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <HAL_GPIO_Init+0x300>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a5c      	ldr	r2, [pc, #368]	; (800133c <HAL_GPIO_Init+0x300>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b5a      	ldr	r3, [pc, #360]	; (800133c <HAL_GPIO_Init+0x300>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011de:	4a58      	ldr	r2, [pc, #352]	; (8001340 <HAL_GPIO_Init+0x304>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4f      	ldr	r2, [pc, #316]	; (8001344 <HAL_GPIO_Init+0x308>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d025      	beq.n	8001256 <HAL_GPIO_Init+0x21a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4e      	ldr	r2, [pc, #312]	; (8001348 <HAL_GPIO_Init+0x30c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d01f      	beq.n	8001252 <HAL_GPIO_Init+0x216>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4d      	ldr	r2, [pc, #308]	; (800134c <HAL_GPIO_Init+0x310>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d019      	beq.n	800124e <HAL_GPIO_Init+0x212>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4c      	ldr	r2, [pc, #304]	; (8001350 <HAL_GPIO_Init+0x314>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d013      	beq.n	800124a <HAL_GPIO_Init+0x20e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4b      	ldr	r2, [pc, #300]	; (8001354 <HAL_GPIO_Init+0x318>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d00d      	beq.n	8001246 <HAL_GPIO_Init+0x20a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4a      	ldr	r2, [pc, #296]	; (8001358 <HAL_GPIO_Init+0x31c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d007      	beq.n	8001242 <HAL_GPIO_Init+0x206>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a49      	ldr	r2, [pc, #292]	; (800135c <HAL_GPIO_Init+0x320>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_GPIO_Init+0x202>
 800123a:	2306      	movs	r3, #6
 800123c:	e00c      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 800123e:	2307      	movs	r3, #7
 8001240:	e00a      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 8001246:	2304      	movs	r3, #4
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 8001256:	2300      	movs	r3, #0
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	; (8001340 <HAL_GPIO_Init+0x304>)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <HAL_GPIO_Init+0x324>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129a:	4a31      	ldr	r2, [pc, #196]	; (8001360 <HAL_GPIO_Init+0x324>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c4:	4a26      	ldr	r2, [pc, #152]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a11      	ldr	r2, [pc, #68]	; (8001360 <HAL_GPIO_Init+0x324>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3301      	adds	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	f67f ae96 	bls.w	8001058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40013800 	.word	0x40013800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400
 800134c:	40020800 	.word	0x40020800
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40021000 	.word	0x40021000
 8001358:	40021400 	.word	0x40021400
 800135c:	40021800 	.word	0x40021800
 8001360:	40013c00 	.word	0x40013c00

08001364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e12b      	b.n	80015ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d106      	bne.n	8001390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fb40 	bl	8000a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2224      	movs	r2, #36	; 0x24
 8001394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013c8:	f001 fbba 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 80013cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a81      	ldr	r2, [pc, #516]	; (80015d8 <HAL_I2C_Init+0x274>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d807      	bhi.n	80013e8 <HAL_I2C_Init+0x84>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4a80      	ldr	r2, [pc, #512]	; (80015dc <HAL_I2C_Init+0x278>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	bf94      	ite	ls
 80013e0:	2301      	movls	r3, #1
 80013e2:	2300      	movhi	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	e006      	b.n	80013f6 <HAL_I2C_Init+0x92>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4a7d      	ldr	r2, [pc, #500]	; (80015e0 <HAL_I2C_Init+0x27c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	bf94      	ite	ls
 80013f0:	2301      	movls	r3, #1
 80013f2:	2300      	movhi	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0e7      	b.n	80015ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4a78      	ldr	r2, [pc, #480]	; (80015e4 <HAL_I2C_Init+0x280>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0c9b      	lsrs	r3, r3, #18
 8001408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	430a      	orrs	r2, r1
 800141c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a6a      	ldr	r2, [pc, #424]	; (80015d8 <HAL_I2C_Init+0x274>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d802      	bhi.n	8001438 <HAL_I2C_Init+0xd4>
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	3301      	adds	r3, #1
 8001436:	e009      	b.n	800144c <HAL_I2C_Init+0xe8>
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	4a69      	ldr	r2, [pc, #420]	; (80015e8 <HAL_I2C_Init+0x284>)
 8001444:	fba2 2303 	umull	r2, r3, r2, r3
 8001448:	099b      	lsrs	r3, r3, #6
 800144a:	3301      	adds	r3, #1
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	430b      	orrs	r3, r1
 8001452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800145e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	495c      	ldr	r1, [pc, #368]	; (80015d8 <HAL_I2C_Init+0x274>)
 8001468:	428b      	cmp	r3, r1
 800146a:	d819      	bhi.n	80014a0 <HAL_I2C_Init+0x13c>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1e59      	subs	r1, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fbb1 f3f3 	udiv	r3, r1, r3
 800147a:	1c59      	adds	r1, r3, #1
 800147c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001480:	400b      	ands	r3, r1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00a      	beq.n	800149c <HAL_I2C_Init+0x138>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1e59      	subs	r1, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fbb1 f3f3 	udiv	r3, r1, r3
 8001494:	3301      	adds	r3, #1
 8001496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149a:	e051      	b.n	8001540 <HAL_I2C_Init+0x1dc>
 800149c:	2304      	movs	r3, #4
 800149e:	e04f      	b.n	8001540 <HAL_I2C_Init+0x1dc>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d111      	bne.n	80014cc <HAL_I2C_Init+0x168>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1e58      	subs	r0, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	440b      	add	r3, r1
 80014b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf0c      	ite	eq
 80014c4:	2301      	moveq	r3, #1
 80014c6:	2300      	movne	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	e012      	b.n	80014f2 <HAL_I2C_Init+0x18e>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1e58      	subs	r0, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6859      	ldr	r1, [r3, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	0099      	lsls	r1, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf0c      	ite	eq
 80014ec:	2301      	moveq	r3, #1
 80014ee:	2300      	movne	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_Init+0x196>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e022      	b.n	8001540 <HAL_I2C_Init+0x1dc>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10e      	bne.n	8001520 <HAL_I2C_Init+0x1bc>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1e58      	subs	r0, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6859      	ldr	r1, [r3, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	440b      	add	r3, r1
 8001510:	fbb0 f3f3 	udiv	r3, r0, r3
 8001514:	3301      	adds	r3, #1
 8001516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800151e:	e00f      	b.n	8001540 <HAL_I2C_Init+0x1dc>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1e58      	subs	r0, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	0099      	lsls	r1, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	fbb0 f3f3 	udiv	r3, r0, r3
 8001536:	3301      	adds	r3, #1
 8001538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	6809      	ldr	r1, [r1, #0]
 8001544:	4313      	orrs	r3, r2
 8001546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69da      	ldr	r2, [r3, #28]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800156e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6911      	ldr	r1, [r2, #16]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68d2      	ldr	r2, [r2, #12]
 800157a:	4311      	orrs	r1, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	430b      	orrs	r3, r1
 8001582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2220      	movs	r2, #32
 80015ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	000186a0 	.word	0x000186a0
 80015dc:	001e847f 	.word	0x001e847f
 80015e0:	003d08ff 	.word	0x003d08ff
 80015e4:	431bde83 	.word	0x431bde83
 80015e8:	10624dd3 	.word	0x10624dd3

080015ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ee:	b08f      	sub	sp, #60	; 0x3c
 80015f0:	af0a      	add	r7, sp, #40	; 0x28
 80015f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e116      	b.n	800182c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d106      	bne.n	800161e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f008 fec7 	bl	800a3ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2203      	movs	r2, #3
 8001622:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f003 f9d4 	bl	80049ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	687e      	ldr	r6, [r7, #4]
 800164a:	466d      	mov	r5, sp
 800164c:	f106 0410 	add.w	r4, r6, #16
 8001650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001658:	e894 0003 	ldmia.w	r4, {r0, r1}
 800165c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001660:	1d33      	adds	r3, r6, #4
 8001662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001664:	6838      	ldr	r0, [r7, #0]
 8001666:	f003 f8ab 	bl	80047c0 <USB_CoreInit>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2202      	movs	r2, #2
 8001674:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0d7      	b.n	800182c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f003 f9c2 	bl	8004a0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e04a      	b.n	8001724 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	333d      	adds	r3, #61	; 0x3d
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	333c      	adds	r3, #60	; 0x3c
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	b298      	uxth	r0, r3
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	1a9b      	subs	r3, r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	3342      	adds	r3, #66	; 0x42
 80016ca:	4602      	mov	r2, r0
 80016cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	333f      	adds	r3, #63	; 0x3f
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	3344      	adds	r3, #68	; 0x44
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	3348      	adds	r3, #72	; 0x48
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	3350      	adds	r3, #80	; 0x50
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	3301      	adds	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	429a      	cmp	r2, r3
 800172c:	d3af      	bcc.n	800168e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
 8001732:	e044      	b.n	80017be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	1a9b      	subs	r3, r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800178c:	7bfa      	ldrb	r2, [r7, #15]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	3301      	adds	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d3b5      	bcc.n	8001734 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	687e      	ldr	r6, [r7, #4]
 80017d0:	466d      	mov	r5, sp
 80017d2:	f106 0410 	add.w	r4, r6, #16
 80017d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80017e6:	1d33      	adds	r3, r6, #4
 80017e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ea:	6838      	ldr	r0, [r7, #0]
 80017ec:	f003 f938 	bl	8004a60 <USB_DevInit>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2202      	movs	r2, #2
 80017fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e014      	b.n	800182c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	2b01      	cmp	r3, #1
 8001818:	d102      	bne.n	8001820 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f001 f87a 	bl	8002914 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f004 f973 	bl	8005b10 <USB_DevDisconnect>

  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001834 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_PCD_Start+0x1c>
 800184c:	2302      	movs	r3, #2
 800184e:	e020      	b.n	8001892 <HAL_PCD_Start+0x5e>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	2b01      	cmp	r3, #1
 800185e:	d109      	bne.n	8001874 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001864:	2b01      	cmp	r3, #1
 8001866:	d005      	beq.n	8001874 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f003 f8a5 	bl	80049c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f004 f923 	bl	8005ace <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800189a:	b590      	push	{r4, r7, lr}
 800189c:	b08d      	sub	sp, #52	; 0x34
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f004 f9e1 	bl	8005c78 <USB_GetMode>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f040 83ca 	bne.w	8002052 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f004 f945 	bl	8005b52 <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 83c0 	beq.w	8002050 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f004 f93c 	bl	8005b52 <USB_ReadInterrupts>
 80018da:	4603      	mov	r3, r0
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d107      	bne.n	80018f4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f002 0202 	and.w	r2, r2, #2
 80018f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 f92a 	bl	8005b52 <USB_ReadInterrupts>
 80018fe:	4603      	mov	r3, r0
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	2b10      	cmp	r3, #16
 8001906:	d161      	bne.n	80019cc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0210 	bic.w	r2, r2, #16
 8001916:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	f003 020f 	and.w	r2, r3, #15
 8001924:	4613      	mov	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	3304      	adds	r3, #4
 8001936:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	0c5b      	lsrs	r3, r3, #17
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	2b02      	cmp	r3, #2
 8001942:	d124      	bne.n	800198e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d035      	beq.n	80019bc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800195a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800195e:	b29b      	uxth	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	6a38      	ldr	r0, [r7, #32]
 8001964:	f003 ff90 	bl	8005888 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001974:	441a      	add	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001986:	441a      	add	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	619a      	str	r2, [r3, #24]
 800198c:	e016      	b.n	80019bc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	0c5b      	lsrs	r3, r3, #17
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	2b06      	cmp	r3, #6
 8001998:	d110      	bne.n	80019bc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80019a0:	2208      	movs	r2, #8
 80019a2:	4619      	mov	r1, r3
 80019a4:	6a38      	ldr	r0, [r7, #32]
 80019a6:	f003 ff6f 	bl	8005888 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019b6:	441a      	add	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0210 	orr.w	r2, r2, #16
 80019ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f004 f8be 	bl	8005b52 <USB_ReadInterrupts>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80019e0:	d16e      	bne.n	8001ac0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f004 f8c4 	bl	8005b78 <USB_ReadDevAllOutEpInterrupt>
 80019f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80019f2:	e062      	b.n	8001aba <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80019f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d057      	beq.n	8001aae <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f004 f8e9 	bl	8005be0 <USB_ReadDevOutEPInterrupt>
 8001a0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00c      	beq.n	8001a34 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	015a      	lsls	r2, r3, #5
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a26:	461a      	mov	r2, r3
 8001a28:	2301      	movs	r3, #1
 8001a2a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fdc6 	bl	80025c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00c      	beq.n	8001a58 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fec0 	bl	80027d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	015a      	lsls	r2, r3, #5
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2310      	movs	r3, #16
 8001a72:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f003 0320 	and.w	r3, r3, #32
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d009      	beq.n	8001aae <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d199      	bne.n	80019f4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 f844 	bl	8005b52 <USB_ReadInterrupts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ad4:	f040 80c0 	bne.w	8001c58 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 f865 	bl	8005bac <USB_ReadDevAllInEpInterrupt>
 8001ae2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ae8:	e0b2      	b.n	8001c50 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80a7 	beq.w	8001c44 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 f88b 	bl	8005c1c <USB_ReadDevInEPInterrupt>
 8001b06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d057      	beq.n	8001bc2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	2201      	movs	r2, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69f9      	ldr	r1, [r7, #28]
 8001b2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b32:	4013      	ands	r3, r2
 8001b34:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	015a      	lsls	r2, r3, #5
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b42:	461a      	mov	r2, r3
 8001b44:	2301      	movs	r3, #1
 8001b46:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d132      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	1a9b      	subs	r3, r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3348      	adds	r3, #72	; 0x48
 8001b60:	6819      	ldr	r1, [r3, #0]
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4403      	add	r3, r0
 8001b70:	3344      	adds	r3, #68	; 0x44
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4419      	add	r1, r3
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	1a9b      	subs	r3, r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4403      	add	r3, r0
 8001b84:	3348      	adds	r3, #72	; 0x48
 8001b86:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d113      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x31c>
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b92:	4613      	mov	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3350      	adds	r3, #80	; 0x50
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d108      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	f004 f893 	bl	8005cdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f008 fc76 	bl	800a4ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	015a      	lsls	r2, r3, #5
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2308      	movs	r3, #8
 8001bdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	015a      	lsls	r2, r3, #5
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2310      	movs	r3, #16
 8001bf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c10:	461a      	mov	r2, r3
 8001c12:	2340      	movs	r3, #64	; 0x40
 8001c14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2302      	movs	r3, #2
 8001c30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fc30 	bl	80024a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	3301      	adds	r3, #1
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	085b      	lsrs	r3, r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f47f af49 	bne.w	8001aea <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 ff78 	bl	8005b52 <USB_ReadInterrupts>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c6c:	d122      	bne.n	8001cb4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d108      	bne.n	8001c9e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c94:	2100      	movs	r1, #0
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f008 fe46 	bl	800a928 <HAL_PCDEx_LPM_Callback>
 8001c9c:	e002      	b.n	8001ca4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f008 fc7c 	bl	800a59c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 ff4a 	bl	8005b52 <USB_ReadInterrupts>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc8:	d112      	bne.n	8001cf0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f008 fc38 	bl	800a550 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001cee:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 ff2c 	bl	8005b52 <USB_ReadInterrupts>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d04:	d121      	bne.n	8001d4a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695a      	ldr	r2, [r3, #20]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001d14:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d111      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	f003 020f 	and.w	r2, r3, #15
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f008 fdf3 	bl	800a928 <HAL_PCDEx_LPM_Callback>
 8001d42:	e002      	b.n	8001d4a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f008 fc03 	bl	800a550 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 feff 	bl	8005b52 <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5e:	f040 80c7 	bne.w	8001ef0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f002 ffcd 	bl	8004d1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d86:	e056      	b.n	8001e36 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8a:	015a      	lsls	r2, r3, #5
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d94:	461a      	mov	r2, r3
 8001d96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d9a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dac:	0151      	lsls	r1, r2, #5
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	440a      	add	r2, r1
 8001db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001db6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dba:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dcc:	0151      	lsls	r1, r2, #5
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	440a      	add	r2, r1
 8001dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001dd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001dda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de8:	461a      	mov	r2, r3
 8001dea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001dee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e00:	0151      	lsls	r1, r2, #5
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	440a      	add	r2, r1
 8001e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e20:	0151      	lsls	r1, r2, #5
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	440a      	add	r2, r1
 8001e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e2e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e32:	3301      	adds	r3, #1
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d3a3      	bcc.n	8001d88 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e4e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e52:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d016      	beq.n	8001e8a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e6c:	f043 030b 	orr.w	r3, r3, #11
 8001e70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e82:	f043 030b 	orr.w	r3, r3, #11
 8001e86:	6453      	str	r3, [r2, #68]	; 0x44
 8001e88:	e015      	b.n	8001eb6 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e9c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ea0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eb0:	f043 030b 	orr.w	r3, r3, #11
 8001eb4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ec4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ec8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001eda:	461a      	mov	r2, r3
 8001edc:	f003 fefe 	bl	8005cdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fe2c 	bl	8005b52 <USB_ReadInterrupts>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f04:	d124      	bne.n	8001f50 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f003 fec2 	bl	8005c94 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 ff62 	bl	8004dde <USB_GetDevSpeed>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681c      	ldr	r4, [r3, #0]
 8001f26:	f000 fdff 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8001f2a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	4620      	mov	r0, r4
 8001f36:	f002 fca5 	bl	8004884 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f008 fadf 	bl	800a4fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fdfc 	bl	8005b52 <USB_ReadInterrupts>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d10a      	bne.n	8001f7a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f008 fabc 	bl	800a4e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f002 0208 	and.w	r2, r2, #8
 8001f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fde7 	bl	8005b52 <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f8e:	d10f      	bne.n	8001fb0 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f008 fb1e 	bl	800a5dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001fae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f003 fdcc 	bl	8005b52 <USB_ReadInterrupts>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f008 faf1 	bl	800a5b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f003 fdb1 	bl	8005b52 <USB_ReadInterrupts>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffa:	d10a      	bne.n	8002012 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f008 faff 	bl	800a600 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f003 fd9b 	bl	8005b52 <USB_ReadInterrupts>
 800201c:	4603      	mov	r3, r0
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b04      	cmp	r3, #4
 8002024:	d115      	bne.n	8002052 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f008 faef 	bl	800a61c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	430a      	orrs	r2, r1
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	e000      	b.n	8002052 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002050:	bf00      	nop
    }
  }
}
 8002052:	3734      	adds	r7, #52	; 0x34
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}

08002058 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_PCD_SetAddress+0x1a>
 800206e:	2302      	movs	r3, #2
 8002070:	e013      	b.n	800209a <HAL_PCD_SetAddress+0x42>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fcf9 	bl	8005a82 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	4608      	mov	r0, r1
 80020ac:	4611      	mov	r1, r2
 80020ae:	461a      	mov	r2, r3
 80020b0:	4603      	mov	r3, r0
 80020b2:	70fb      	strb	r3, [r7, #3]
 80020b4:	460b      	mov	r3, r1
 80020b6:	803b      	strh	r3, [r7, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	da0f      	bge.n	80020e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	f003 020f 	and.w	r2, r3, #15
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	3338      	adds	r3, #56	; 0x38
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	3304      	adds	r3, #4
 80020de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	705a      	strb	r2, [r3, #1]
 80020e6:	e00f      	b.n	8002108 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	f003 020f 	and.w	r2, r3, #15
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	3304      	adds	r3, #4
 8002100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	b2da      	uxtb	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002114:	883a      	ldrh	r2, [r7, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	78ba      	ldrb	r2, [r7, #2]
 800211e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	785b      	ldrb	r3, [r3, #1]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002132:	78bb      	ldrb	r3, [r7, #2]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d102      	bne.n	800213e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_PCD_EP_Open+0xaa>
 8002148:	2302      	movs	r3, #2
 800214a:	e00e      	b.n	800216a <HAL_PCD_EP_Open+0xc8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68f9      	ldr	r1, [r7, #12]
 800215a:	4618      	mov	r0, r3
 800215c:	f002 fe64 	bl	8004e28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002168:	7afb      	ldrb	r3, [r7, #11]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	460b      	mov	r3, r1
 800217c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800217e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002182:	2b00      	cmp	r3, #0
 8002184:	da0f      	bge.n	80021a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	f003 020f 	and.w	r2, r3, #15
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	3338      	adds	r3, #56	; 0x38
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	3304      	adds	r3, #4
 800219c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	705a      	strb	r2, [r3, #1]
 80021a4:	e00f      	b.n	80021c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 020f 	and.w	r2, r3, #15
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	3304      	adds	r3, #4
 80021be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_PCD_EP_Close+0x6e>
 80021dc:	2302      	movs	r3, #2
 80021de:	e00e      	b.n	80021fe <HAL_PCD_EP_Close+0x8c>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68f9      	ldr	r1, [r7, #12]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 fea2 	bl	8004f38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	460b      	mov	r3, r1
 8002214:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002216:	7afb      	ldrb	r3, [r7, #11]
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2200      	movs	r2, #0
 8002246:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002248:	7afb      	ldrb	r3, [r7, #11]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	b2da      	uxtb	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d102      	bne.n	8002262 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002262:	7afb      	ldrb	r3, [r7, #11]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	2b00      	cmp	r3, #0
 800226a:	d109      	bne.n	8002280 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	6979      	ldr	r1, [r7, #20]
 800227a:	f003 f97d 	bl	8005578 <USB_EP0StartXfer>
 800227e:	e008      	b.n	8002292 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	6979      	ldr	r1, [r7, #20]
 800228e:	f002 ff2f 	bl	80050f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	460b      	mov	r3, r1
 80022aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ac:	7afb      	ldrb	r3, [r7, #11]
 80022ae:	f003 020f 	and.w	r2, r3, #15
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	3338      	adds	r3, #56	; 0x38
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	3304      	adds	r3, #4
 80022c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2201      	movs	r2, #1
 80022da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022dc:	7afb      	ldrb	r3, [r7, #11]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d102      	bne.n	80022f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022f6:	7afb      	ldrb	r3, [r7, #11]
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	6979      	ldr	r1, [r7, #20]
 800230e:	f003 f933 	bl	8005578 <USB_EP0StartXfer>
 8002312:	e008      	b.n	8002326 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	6979      	ldr	r1, [r7, #20]
 8002322:	f002 fee5 	bl	80050f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	f003 020f 	and.w	r2, r3, #15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	429a      	cmp	r2, r3
 8002348:	d901      	bls.n	800234e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e050      	b.n	80023f0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800234e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002352:	2b00      	cmp	r3, #0
 8002354:	da0f      	bge.n	8002376 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	f003 020f 	and.w	r2, r3, #15
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	3338      	adds	r3, #56	; 0x38
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	3304      	adds	r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	705a      	strb	r2, [r3, #1]
 8002374:	e00d      	b.n	8002392 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_PCD_EP_SetStall+0x82>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e01e      	b.n	80023f0 <HAL_PCD_EP_SetStall+0xc0>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68f9      	ldr	r1, [r7, #12]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 fa8a 	bl	80058da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10a      	bne.n	80023e6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	b2d9      	uxtb	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023e0:	461a      	mov	r2, r3
 80023e2:	f003 fc7b 	bl	8005cdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	d901      	bls.n	8002416 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e042      	b.n	800249c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800241a:	2b00      	cmp	r3, #0
 800241c:	da0f      	bge.n	800243e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	f003 020f 	and.w	r2, r3, #15
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	3338      	adds	r3, #56	; 0x38
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	3304      	adds	r3, #4
 8002434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	705a      	strb	r2, [r3, #1]
 800243c:	e00f      	b.n	800245e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	f003 020f 	and.w	r2, r3, #15
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	3304      	adds	r3, #4
 8002456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	b2da      	uxtb	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_EP_ClrStall+0x86>
 800247a:	2302      	movs	r3, #2
 800247c:	e00e      	b.n	800249c <HAL_PCD_EP_ClrStall+0xa4>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	4618      	mov	r0, r3
 800248e:	f003 fa92 	bl	80059b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	3338      	adds	r3, #56	; 0x38
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	3304      	adds	r3, #4
 80024ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d901      	bls.n	80024dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e06c      	b.n	80025b6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d902      	bls.n	80024f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	3303      	adds	r3, #3
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002500:	e02b      	b.n	800255a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	429a      	cmp	r2, r3
 8002516:	d902      	bls.n	800251e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3303      	adds	r3, #3
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	68d9      	ldr	r1, [r3, #12]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002536:	b2db      	uxtb	r3, r3
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	4603      	mov	r3, r0
 800253c:	6978      	ldr	r0, [r7, #20]
 800253e:	f003 f96e 	bl	800581e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	441a      	add	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	441a      	add	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	b29b      	uxth	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	429a      	cmp	r2, r3
 800256e:	d809      	bhi.n	8002584 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	699a      	ldr	r2, [r3, #24]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002578:	429a      	cmp	r2, r3
 800257a:	d203      	bcs.n	8002584 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1be      	bne.n	8002502 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	429a      	cmp	r2, r3
 800258e:	d811      	bhi.n	80025b4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	2201      	movs	r2, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	6939      	ldr	r1, [r7, #16]
 80025ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025b0:	4013      	ands	r3, r2
 80025b2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	333c      	adds	r3, #60	; 0x3c
 80025d8:	3304      	adds	r3, #4
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	f040 80a0 	bne.w	8002738 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d015      	beq.n	800262e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4a72      	ldr	r2, [pc, #456]	; (80027d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002606:	4293      	cmp	r3, r2
 8002608:	f240 80dd 	bls.w	80027c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80d7 	beq.w	80027c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002624:	461a      	mov	r2, r3
 8002626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800262a:	6093      	str	r3, [r2, #8]
 800262c:	e0cb      	b.n	80027c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002644:	461a      	mov	r2, r3
 8002646:	2320      	movs	r3, #32
 8002648:	6093      	str	r3, [r2, #8]
 800264a:	e0bc      	b.n	80027c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 80b7 	bne.w	80027c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4a5d      	ldr	r2, [pc, #372]	; (80027d0 <PCD_EP_OutXfrComplete_int+0x210>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d90f      	bls.n	8002680 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002676:	461a      	mov	r2, r3
 8002678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800267c:	6093      	str	r3, [r2, #8]
 800267e:	e0a2      	b.n	80027c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002692:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	0159      	lsls	r1, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	440b      	add	r3, r1
 800269c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80026a6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4403      	add	r3, r0
 80026b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80026ba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026ce:	6819      	ldr	r1, [r3, #0]
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4403      	add	r3, r0
 80026de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4419      	add	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4403      	add	r3, r0
 80026f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026f8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d114      	bne.n	800272a <PCD_EP_OutXfrComplete_int+0x16a>
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d108      	bne.n	800272a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002722:	461a      	mov	r2, r3
 8002724:	2101      	movs	r1, #1
 8002726:	f003 fad9 	bl	8005cdc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f007 fea1 	bl	800a478 <HAL_PCD_DataOutStageCallback>
 8002736:	e046      	b.n	80027c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a26      	ldr	r2, [pc, #152]	; (80027d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d124      	bne.n	800278a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002756:	461a      	mov	r2, r3
 8002758:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800275c:	6093      	str	r3, [r2, #8]
 800275e:	e032      	b.n	80027c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002776:	461a      	mov	r2, r3
 8002778:	2320      	movs	r3, #32
 800277a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4619      	mov	r1, r3
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f007 fe78 	bl	800a478 <HAL_PCD_DataOutStageCallback>
 8002788:	e01d      	b.n	80027c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d114      	bne.n	80027ba <PCD_EP_OutXfrComplete_int+0x1fa>
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d108      	bne.n	80027ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027b2:	461a      	mov	r2, r3
 80027b4:	2100      	movs	r1, #0
 80027b6:	f003 fa91 	bl	8005cdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	4619      	mov	r1, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f007 fe59 	bl	800a478 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	4f54300a 	.word	0x4f54300a
 80027d4:	4f54310a 	.word	0x4f54310a

080027d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	333c      	adds	r3, #60	; 0x3c
 80027f0:	3304      	adds	r3, #4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4a15      	ldr	r2, [pc, #84]	; (8002860 <PCD_EP_OutSetupPacket_int+0x88>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d90e      	bls.n	800282c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002824:	461a      	mov	r2, r3
 8002826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800282a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f007 fe11 	bl	800a454 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <PCD_EP_OutSetupPacket_int+0x88>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d90c      	bls.n	8002854 <PCD_EP_OutSetupPacket_int+0x7c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d108      	bne.n	8002854 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800284c:	461a      	mov	r2, r3
 800284e:	2101      	movs	r1, #1
 8002850:	f003 fa44 	bl	8005cdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	4f54300a 	.word	0x4f54300a

08002864 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	70fb      	strb	r3, [r7, #3]
 8002870:	4613      	mov	r3, r2
 8002872:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d107      	bne.n	8002892 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002882:	883b      	ldrh	r3, [r7, #0]
 8002884:	0419      	lsls	r1, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	430a      	orrs	r2, r1
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
 8002890:	e028      	b.n	80028e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	4413      	add	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	73fb      	strb	r3, [r7, #15]
 80028a4:	e00d      	b.n	80028c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	3340      	adds	r3, #64	; 0x40
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	0c1b      	lsrs	r3, r3, #16
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	4413      	add	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	3301      	adds	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3ec      	bcc.n	80028a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028cc:	883b      	ldrh	r3, [r7, #0]
 80028ce:	0418      	lsls	r0, r3, #16
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6819      	ldr	r1, [r3, #0]
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	4302      	orrs	r2, r0
 80028dc:	3340      	adds	r3, #64	; 0x40
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002946:	f043 0303 	orr.w	r3, r3, #3
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0cc      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b68      	ldr	r3, [pc, #416]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d90c      	bls.n	8002998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0b8      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b0:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b50      	ldr	r3, [pc, #320]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	494d      	ldr	r1, [pc, #308]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d044      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d119      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e07f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1a:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e067      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3a:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4934      	ldr	r1, [pc, #208]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a4c:	f7fe f9e4 	bl	8000e18 <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7fe f9e0 	bl	8000e18 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e04f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 020c 	and.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1eb      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d20c      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e032      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4916      	ldr	r1, [pc, #88]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	490e      	ldr	r1, [pc, #56]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ae2:	f000 fbb1 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	490a      	ldr	r1, [pc, #40]	; (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	5ccb      	ldrb	r3, [r1, r3]
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe f884 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023c00 	.word	0x40023c00
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	0800ac24 	.word	0x0800ac24
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000004 	.word	0x20000004

08002b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000000 	.word	0x20000000

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b44:	f7ff fff0 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	0a9b      	lsrs	r3, r3, #10
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4903      	ldr	r1, [pc, #12]	; (8002b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	0800ac34 	.word	0x0800ac34

08002b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b6c:	f7ff ffdc 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0b5b      	lsrs	r3, r3, #13
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	0800ac34 	.word	0x0800ac34

08002b90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0203 	and.w	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bac:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <HAL_RCC_GetClockConfig+0x5c>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_RCC_GetClockConfig+0x5c>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	08db      	lsrs	r3, r3, #3
 8002bca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_RCC_GetClockConfig+0x60>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 020f 	and.w	r2, r3, #15
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	601a      	str	r2, [r3, #0]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40023c00 	.word	0x40023c00

08002bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	; 0x30
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d010      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002c2c:	4b6f      	ldr	r3, [pc, #444]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c32:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	496c      	ldr	r1, [pc, #432]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d010      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002c5a:	4b64      	ldr	r3, [pc, #400]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c60:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	4960      	ldr	r1, [pc, #384]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d017      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c88:	4b58      	ldr	r3, [pc, #352]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4955      	ldr	r1, [pc, #340]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca6:	d101      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d017      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cc4:	4b49      	ldr	r3, [pc, #292]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	4946      	ldr	r1, [pc, #280]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 808a 	beq.w	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	4b39      	ldr	r3, [pc, #228]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a38      	ldr	r2, [pc, #224]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b36      	ldr	r3, [pc, #216]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d1e:	4b34      	ldr	r3, [pc, #208]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a33      	ldr	r2, [pc, #204]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe f875 	bl	8000e18 <HAL_GetTick>
 8002d2e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d32:	f7fe f871 	bl	8000e18 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e278      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d50:	4b26      	ldr	r3, [pc, #152]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d58:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d02f      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d028      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d6e:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d76:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d78:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d84:	4a19      	ldr	r2, [pc, #100]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d8a:	4b18      	ldr	r3, [pc, #96]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d114      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fe f83f 	bl	8000e18 <HAL_GetTick>
 8002d9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7fe f83b 	bl	8000e18 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e240      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db4:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ee      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dcc:	d114      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002dce:	4b07      	ldr	r3, [pc, #28]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de2:	4902      	ldr	r1, [pc, #8]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]
 8002de8:	e00c      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40007000 	.word	0x40007000
 8002df4:	42470e40 	.word	0x42470e40
 8002df8:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4a49      	ldr	r2, [pc, #292]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dfe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e02:	6093      	str	r3, [r2, #8]
 8002e04:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	4944      	ldr	r1, [pc, #272]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002e28:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002e2a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002e38:	4b3a      	ldr	r3, [pc, #232]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	4937      	ldr	r1, [pc, #220]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e5a:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e60:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e68:	492e      	ldr	r1, [pc, #184]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d011      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e7c:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e82:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	4926      	ldr	r1, [pc, #152]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e9a:	d101      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002eac:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	491a      	ldr	r1, [pc, #104]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d011      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002edc:	4911      	ldr	r1, [pc, #68]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f00:	f040 80ff 	bne.w	8003102 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f0a:	f7fd ff85 	bl	8000e18 <HAL_GetTick>
 8002f0e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f10:	e00e      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f12:	f7fd ff81 	bl	8000e18 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d907      	bls.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e188      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002f24:	40023800 	.word	0x40023800
 8002f28:	424711e0 	.word	0x424711e0
 8002f2c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f30:	4b7e      	ldr	r3, [pc, #504]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ea      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d028      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d124      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f64:	4b71      	ldr	r3, [pc, #452]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	3301      	adds	r3, #1
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f76:	4b6d      	ldr	r3, [pc, #436]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f7c:	0e1b      	lsrs	r3, r3, #24
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	019b      	lsls	r3, r3, #6
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	3b01      	subs	r3, #1
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	061b      	lsls	r3, r3, #24
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	071b      	lsls	r3, r3, #28
 8002fa6:	4961      	ldr	r1, [pc, #388]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d004      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d035      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd8:	d130      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002fda:	4b54      	ldr	r3, [pc, #336]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fec:	4b4f      	ldr	r3, [pc, #316]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff2:	0f1b      	lsrs	r3, r3, #28
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	019b      	lsls	r3, r3, #6
 8003004:	431a      	orrs	r2, r3
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	3b01      	subs	r3, #1
 800300c:	041b      	lsls	r3, r3, #16
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	431a      	orrs	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	071b      	lsls	r3, r3, #28
 800301c:	4943      	ldr	r1, [pc, #268]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003024:	4b41      	ldr	r3, [pc, #260]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800302a:	f023 021f 	bic.w	r2, r3, #31
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	493d      	ldr	r1, [pc, #244]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d029      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003050:	d124      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003052:	4b36      	ldr	r3, [pc, #216]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	3301      	adds	r3, #1
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003064:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306a:	0f1b      	lsrs	r3, r3, #28
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	019b      	lsls	r3, r3, #6
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	3b01      	subs	r3, #1
 8003086:	041b      	lsls	r3, r3, #16
 8003088:	431a      	orrs	r2, r3
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	431a      	orrs	r2, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	071b      	lsls	r3, r3, #28
 8003094:	4925      	ldr	r1, [pc, #148]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d016      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	019b      	lsls	r3, r3, #6
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	3b01      	subs	r3, #1
 80030bc:	041b      	lsls	r3, r3, #16
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	071b      	lsls	r3, r3, #28
 80030ce:	4917      	ldr	r1, [pc, #92]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030dc:	f7fd fe9c 	bl	8000e18 <HAL_GetTick>
 80030e0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030e4:	f7fd fe98 	bl	8000e18 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e09f      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	2b01      	cmp	r3, #1
 8003106:	f040 8095 	bne.w	8003234 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003110:	f7fd fe82 	bl	8000e18 <HAL_GetTick>
 8003114:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003116:	e00f      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003118:	f7fd fe7e 	bl	8000e18 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d908      	bls.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e085      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	42470068 	.word	0x42470068
 8003134:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003138:	4b41      	ldr	r3, [pc, #260]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003144:	d0e8      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003162:	2b00      	cmp	r3, #0
 8003164:	d02b      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	2b00      	cmp	r3, #0
 800316c:	d127      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800316e:	4b34      	ldr	r3, [pc, #208]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	3301      	adds	r3, #1
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	019b      	lsls	r3, r3, #6
 800318a:	431a      	orrs	r2, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	3b01      	subs	r3, #1
 8003192:	041b      	lsls	r3, r3, #16
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	061b      	lsls	r3, r3, #24
 800319c:	4928      	ldr	r1, [pc, #160]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031a4:	4b26      	ldr	r3, [pc, #152]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	3b01      	subs	r3, #1
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	4922      	ldr	r1, [pc, #136]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01d      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031d2:	d118      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031d4:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	0e1b      	lsrs	r3, r3, #24
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	019b      	lsls	r3, r3, #6
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	3b01      	subs	r3, #1
 80031f6:	041b      	lsls	r3, r3, #16
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	061b      	lsls	r3, r3, #24
 80031fe:	4910      	ldr	r1, [pc, #64]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003206:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800320c:	f7fd fe04 	bl	8000e18 <HAL_GetTick>
 8003210:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003214:	f7fd fe00 	bl	8000e18 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e007      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800322e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003232:	d1ef      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3730      	adds	r7, #48	; 0x30
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	42470070 	.word	0x42470070

08003248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800324c:	b0ae      	sub	sp, #184	; 0xb8
 800324e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800326e:	4bcb      	ldr	r3, [pc, #812]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b0c      	cmp	r3, #12
 8003278:	f200 8206 	bhi.w	8003688 <HAL_RCC_GetSysClockFreq+0x440>
 800327c:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <HAL_RCC_GetSysClockFreq+0x3c>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	080032b9 	.word	0x080032b9
 8003288:	08003689 	.word	0x08003689
 800328c:	08003689 	.word	0x08003689
 8003290:	08003689 	.word	0x08003689
 8003294:	080032c1 	.word	0x080032c1
 8003298:	08003689 	.word	0x08003689
 800329c:	08003689 	.word	0x08003689
 80032a0:	08003689 	.word	0x08003689
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	08003689 	.word	0x08003689
 80032ac:	08003689 	.word	0x08003689
 80032b0:	08003689 	.word	0x08003689
 80032b4:	080034b9 	.word	0x080034b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b8:	4bb9      	ldr	r3, [pc, #740]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80032ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80032be:	e1e7      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c0:	4bb8      	ldr	r3, [pc, #736]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80032c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032c6:	e1e3      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c8:	4bb4      	ldr	r3, [pc, #720]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d4:	4bb1      	ldr	r3, [pc, #708]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d071      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e0:	4bae      	ldr	r3, [pc, #696]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80032f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032fc:	2300      	movs	r3, #0
 80032fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003306:	4622      	mov	r2, r4
 8003308:	462b      	mov	r3, r5
 800330a:	f04f 0000 	mov.w	r0, #0
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	0159      	lsls	r1, r3, #5
 8003314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003318:	0150      	lsls	r0, r2, #5
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4621      	mov	r1, r4
 8003320:	1a51      	subs	r1, r2, r1
 8003322:	6439      	str	r1, [r7, #64]	; 0x40
 8003324:	4629      	mov	r1, r5
 8003326:	eb63 0301 	sbc.w	r3, r3, r1
 800332a:	647b      	str	r3, [r7, #68]	; 0x44
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003338:	4649      	mov	r1, r9
 800333a:	018b      	lsls	r3, r1, #6
 800333c:	4641      	mov	r1, r8
 800333e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003342:	4641      	mov	r1, r8
 8003344:	018a      	lsls	r2, r1, #6
 8003346:	4641      	mov	r1, r8
 8003348:	1a51      	subs	r1, r2, r1
 800334a:	63b9      	str	r1, [r7, #56]	; 0x38
 800334c:	4649      	mov	r1, r9
 800334e:	eb63 0301 	sbc.w	r3, r3, r1
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003360:	4649      	mov	r1, r9
 8003362:	00cb      	lsls	r3, r1, #3
 8003364:	4641      	mov	r1, r8
 8003366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336a:	4641      	mov	r1, r8
 800336c:	00ca      	lsls	r2, r1, #3
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	4603      	mov	r3, r0
 8003374:	4622      	mov	r2, r4
 8003376:	189b      	adds	r3, r3, r2
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
 800337a:	462b      	mov	r3, r5
 800337c:	460a      	mov	r2, r1
 800337e:	eb42 0303 	adc.w	r3, r2, r3
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003390:	4629      	mov	r1, r5
 8003392:	024b      	lsls	r3, r1, #9
 8003394:	4621      	mov	r1, r4
 8003396:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800339a:	4621      	mov	r1, r4
 800339c:	024a      	lsls	r2, r1, #9
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80033b4:	f7fc ff2c 	bl	8000210 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033c2:	e067      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c4:	4b75      	ldr	r3, [pc, #468]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	099b      	lsrs	r3, r3, #6
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033d0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80033d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80033de:	2300      	movs	r3, #0
 80033e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80033e6:	4622      	mov	r2, r4
 80033e8:	462b      	mov	r3, r5
 80033ea:	f04f 0000 	mov.w	r0, #0
 80033ee:	f04f 0100 	mov.w	r1, #0
 80033f2:	0159      	lsls	r1, r3, #5
 80033f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f8:	0150      	lsls	r0, r2, #5
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4621      	mov	r1, r4
 8003400:	1a51      	subs	r1, r2, r1
 8003402:	62b9      	str	r1, [r7, #40]	; 0x28
 8003404:	4629      	mov	r1, r5
 8003406:	eb63 0301 	sbc.w	r3, r3, r1
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003418:	4649      	mov	r1, r9
 800341a:	018b      	lsls	r3, r1, #6
 800341c:	4641      	mov	r1, r8
 800341e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003422:	4641      	mov	r1, r8
 8003424:	018a      	lsls	r2, r1, #6
 8003426:	4641      	mov	r1, r8
 8003428:	ebb2 0a01 	subs.w	sl, r2, r1
 800342c:	4649      	mov	r1, r9
 800342e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800343e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003442:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003446:	4692      	mov	sl, r2
 8003448:	469b      	mov	fp, r3
 800344a:	4623      	mov	r3, r4
 800344c:	eb1a 0303 	adds.w	r3, sl, r3
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	462b      	mov	r3, r5
 8003454:	eb4b 0303 	adc.w	r3, fp, r3
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003466:	4629      	mov	r1, r5
 8003468:	028b      	lsls	r3, r1, #10
 800346a:	4621      	mov	r1, r4
 800346c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003470:	4621      	mov	r1, r4
 8003472:	028a      	lsls	r2, r1, #10
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800347c:	2200      	movs	r2, #0
 800347e:	673b      	str	r3, [r7, #112]	; 0x70
 8003480:	677a      	str	r2, [r7, #116]	; 0x74
 8003482:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003486:	f7fc fec3 	bl	8000210 <__aeabi_uldivmod>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4613      	mov	r3, r2
 8003490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003494:	4b41      	ldr	r3, [pc, #260]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	3301      	adds	r3, #1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80034a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034b6:	e0eb      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b8:	4b38      	ldr	r3, [pc, #224]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034c4:	4b35      	ldr	r3, [pc, #212]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d06b      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d0:	4b32      	ldr	r3, [pc, #200]	; (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	2200      	movs	r2, #0
 80034d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80034da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e2:	663b      	str	r3, [r7, #96]	; 0x60
 80034e4:	2300      	movs	r3, #0
 80034e6:	667b      	str	r3, [r7, #100]	; 0x64
 80034e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80034ec:	4622      	mov	r2, r4
 80034ee:	462b      	mov	r3, r5
 80034f0:	f04f 0000 	mov.w	r0, #0
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	0159      	lsls	r1, r3, #5
 80034fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fe:	0150      	lsls	r0, r2, #5
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4621      	mov	r1, r4
 8003506:	1a51      	subs	r1, r2, r1
 8003508:	61b9      	str	r1, [r7, #24]
 800350a:	4629      	mov	r1, r5
 800350c:	eb63 0301 	sbc.w	r3, r3, r1
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800351e:	4659      	mov	r1, fp
 8003520:	018b      	lsls	r3, r1, #6
 8003522:	4651      	mov	r1, sl
 8003524:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003528:	4651      	mov	r1, sl
 800352a:	018a      	lsls	r2, r1, #6
 800352c:	4651      	mov	r1, sl
 800352e:	ebb2 0801 	subs.w	r8, r2, r1
 8003532:	4659      	mov	r1, fp
 8003534:	eb63 0901 	sbc.w	r9, r3, r1
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003544:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003548:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800354c:	4690      	mov	r8, r2
 800354e:	4699      	mov	r9, r3
 8003550:	4623      	mov	r3, r4
 8003552:	eb18 0303 	adds.w	r3, r8, r3
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	462b      	mov	r3, r5
 800355a:	eb49 0303 	adc.w	r3, r9, r3
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800356c:	4629      	mov	r1, r5
 800356e:	024b      	lsls	r3, r1, #9
 8003570:	4621      	mov	r1, r4
 8003572:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003576:	4621      	mov	r1, r4
 8003578:	024a      	lsls	r2, r1, #9
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003582:	2200      	movs	r2, #0
 8003584:	65bb      	str	r3, [r7, #88]	; 0x58
 8003586:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003588:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800358c:	f7fc fe40 	bl	8000210 <__aeabi_uldivmod>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4613      	mov	r3, r2
 8003596:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800359a:	e065      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x420>
 800359c:	40023800 	.word	0x40023800
 80035a0:	00f42400 	.word	0x00f42400
 80035a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a8:	4b3d      	ldr	r3, [pc, #244]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	099b      	lsrs	r3, r3, #6
 80035ae:	2200      	movs	r2, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	4611      	mov	r1, r2
 80035b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035b8:	653b      	str	r3, [r7, #80]	; 0x50
 80035ba:	2300      	movs	r3, #0
 80035bc:	657b      	str	r3, [r7, #84]	; 0x54
 80035be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80035c2:	4642      	mov	r2, r8
 80035c4:	464b      	mov	r3, r9
 80035c6:	f04f 0000 	mov.w	r0, #0
 80035ca:	f04f 0100 	mov.w	r1, #0
 80035ce:	0159      	lsls	r1, r3, #5
 80035d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d4:	0150      	lsls	r0, r2, #5
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4641      	mov	r1, r8
 80035dc:	1a51      	subs	r1, r2, r1
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	4649      	mov	r1, r9
 80035e2:	eb63 0301 	sbc.w	r3, r3, r1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80035f4:	4659      	mov	r1, fp
 80035f6:	018b      	lsls	r3, r1, #6
 80035f8:	4651      	mov	r1, sl
 80035fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035fe:	4651      	mov	r1, sl
 8003600:	018a      	lsls	r2, r1, #6
 8003602:	4651      	mov	r1, sl
 8003604:	1a54      	subs	r4, r2, r1
 8003606:	4659      	mov	r1, fp
 8003608:	eb63 0501 	sbc.w	r5, r3, r1
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	00eb      	lsls	r3, r5, #3
 8003616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800361a:	00e2      	lsls	r2, r4, #3
 800361c:	4614      	mov	r4, r2
 800361e:	461d      	mov	r5, r3
 8003620:	4643      	mov	r3, r8
 8003622:	18e3      	adds	r3, r4, r3
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	464b      	mov	r3, r9
 8003628:	eb45 0303 	adc.w	r3, r5, r3
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800363a:	4629      	mov	r1, r5
 800363c:	028b      	lsls	r3, r1, #10
 800363e:	4621      	mov	r1, r4
 8003640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003644:	4621      	mov	r1, r4
 8003646:	028a      	lsls	r2, r1, #10
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003650:	2200      	movs	r2, #0
 8003652:	64bb      	str	r3, [r7, #72]	; 0x48
 8003654:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003656:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800365a:	f7fc fdd9 	bl	8000210 <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4613      	mov	r3, r2
 8003664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	0f1b      	lsrs	r3, r3, #28
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800367a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003686:	e003      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800368a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800368e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003694:	4618      	mov	r0, r3
 8003696:	37b8      	adds	r7, #184	; 0xb8
 8003698:	46bd      	mov	sp, r7
 800369a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	00f42400 	.word	0x00f42400

080036a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e28d      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8083 	beq.w	80037ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036c8:	4b94      	ldr	r3, [pc, #592]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d019      	beq.n	8003708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036d4:	4b91      	ldr	r3, [pc, #580]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036e0:	4b8e      	ldr	r3, [pc, #568]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ec:	d00c      	beq.n	8003708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ee:	4b8b      	ldr	r3, [pc, #556]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d112      	bne.n	8003720 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fa:	4b88      	ldr	r3, [pc, #544]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003706:	d10b      	bne.n	8003720 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003708:	4b84      	ldr	r3, [pc, #528]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05b      	beq.n	80037cc <HAL_RCC_OscConfig+0x124>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d157      	bne.n	80037cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e25a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d106      	bne.n	8003738 <HAL_RCC_OscConfig+0x90>
 800372a:	4b7c      	ldr	r3, [pc, #496]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a7b      	ldr	r2, [pc, #492]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e01d      	b.n	8003774 <HAL_RCC_OscConfig+0xcc>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0xb4>
 8003742:	4b76      	ldr	r3, [pc, #472]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a75      	ldr	r2, [pc, #468]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b73      	ldr	r3, [pc, #460]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a72      	ldr	r2, [pc, #456]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0xcc>
 800375c:	4b6f      	ldr	r3, [pc, #444]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a6e      	ldr	r2, [pc, #440]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b6c      	ldr	r3, [pc, #432]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6b      	ldr	r2, [pc, #428]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800376e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fd fb4c 	bl	8000e18 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003784:	f7fd fb48 	bl	8000e18 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	; 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e21f      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	4b61      	ldr	r3, [pc, #388]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0xdc>
 80037a2:	e014      	b.n	80037ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fd fb38 	bl	8000e18 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ac:	f7fd fb34 	bl	8000e18 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	; 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e20b      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037be:	4b57      	ldr	r3, [pc, #348]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x104>
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d06f      	beq.n	80038ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037da:	4b50      	ldr	r3, [pc, #320]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d017      	beq.n	8003816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037e6:	4b4d      	ldr	r3, [pc, #308]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d105      	bne.n	80037fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037f2:	4b4a      	ldr	r3, [pc, #296]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fe:	4b47      	ldr	r3, [pc, #284]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d11c      	bne.n	8003844 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380a:	4b44      	ldr	r3, [pc, #272]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d116      	bne.n	8003844 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	4b41      	ldr	r3, [pc, #260]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_RCC_OscConfig+0x186>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e1d3      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382e:	4b3b      	ldr	r3, [pc, #236]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4937      	ldr	r1, [pc, #220]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003842:	e03a      	b.n	80038ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384c:	4b34      	ldr	r3, [pc, #208]	; (8003920 <HAL_RCC_OscConfig+0x278>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fd fae1 	bl	8000e18 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385a:	f7fd fadd 	bl	8000e18 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1b4      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	4b2b      	ldr	r3, [pc, #172]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003878:	4b28      	ldr	r3, [pc, #160]	; (800391c <HAL_RCC_OscConfig+0x274>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4925      	ldr	r1, [pc, #148]	; (800391c <HAL_RCC_OscConfig+0x274>)
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]
 800388c:	e015      	b.n	80038ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCC_OscConfig+0x278>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fd fac0 	bl	8000e18 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800389c:	f7fd fabc 	bl	8000e18 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e193      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	4b1b      	ldr	r3, [pc, #108]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d036      	beq.n	8003934 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d016      	beq.n	80038fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <HAL_RCC_OscConfig+0x27c>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fd faa0 	bl	8000e18 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fd fa9c 	bl	8000e18 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e173      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80038f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x234>
 80038fa:	e01b      	b.n	8003934 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038fc:	4b09      	ldr	r3, [pc, #36]	; (8003924 <HAL_RCC_OscConfig+0x27c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003902:	f7fd fa89 	bl	8000e18 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003908:	e00e      	b.n	8003928 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390a:	f7fd fa85 	bl	8000e18 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d907      	bls.n	8003928 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e15c      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
 800391c:	40023800 	.word	0x40023800
 8003920:	42470000 	.word	0x42470000
 8003924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003928:	4b8a      	ldr	r3, [pc, #552]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 800392a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ea      	bne.n	800390a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8097 	beq.w	8003a70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003942:	2300      	movs	r3, #0
 8003944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003946:	4b83      	ldr	r3, [pc, #524]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	4b7f      	ldr	r3, [pc, #508]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	4a7e      	ldr	r2, [pc, #504]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003960:	6413      	str	r3, [r2, #64]	; 0x40
 8003962:	4b7c      	ldr	r3, [pc, #496]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396e:	2301      	movs	r3, #1
 8003970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	4b79      	ldr	r3, [pc, #484]	; (8003b58 <HAL_RCC_OscConfig+0x4b0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d118      	bne.n	80039b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397e:	4b76      	ldr	r3, [pc, #472]	; (8003b58 <HAL_RCC_OscConfig+0x4b0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a75      	ldr	r2, [pc, #468]	; (8003b58 <HAL_RCC_OscConfig+0x4b0>)
 8003984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398a:	f7fd fa45 	bl	8000e18 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003992:	f7fd fa41 	bl	8000e18 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e118      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	4b6c      	ldr	r3, [pc, #432]	; (8003b58 <HAL_RCC_OscConfig+0x4b0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x31e>
 80039b8:	4b66      	ldr	r3, [pc, #408]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039bc:	4a65      	ldr	r2, [pc, #404]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6713      	str	r3, [r2, #112]	; 0x70
 80039c4:	e01c      	b.n	8003a00 <HAL_RCC_OscConfig+0x358>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x340>
 80039ce:	4b61      	ldr	r3, [pc, #388]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	4a60      	ldr	r2, [pc, #384]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	6713      	str	r3, [r2, #112]	; 0x70
 80039da:	4b5e      	ldr	r3, [pc, #376]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	4a5d      	ldr	r2, [pc, #372]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6713      	str	r3, [r2, #112]	; 0x70
 80039e6:	e00b      	b.n	8003a00 <HAL_RCC_OscConfig+0x358>
 80039e8:	4b5a      	ldr	r3, [pc, #360]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	4a59      	ldr	r2, [pc, #356]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	; 0x70
 80039f4:	4b57      	ldr	r3, [pc, #348]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a56      	ldr	r2, [pc, #344]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039fa:	f023 0304 	bic.w	r3, r3, #4
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fd fa06 	bl	8000e18 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7fd fa02 	bl	8000e18 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0d7      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a26:	4b4b      	ldr	r3, [pc, #300]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0ee      	beq.n	8003a10 <HAL_RCC_OscConfig+0x368>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fd f9f0 	bl	8000e18 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3c:	f7fd f9ec 	bl	8000e18 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e0c1      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a52:	4b40      	ldr	r3, [pc, #256]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ee      	bne.n	8003a3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d105      	bne.n	8003a70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a64:	4b3b      	ldr	r3, [pc, #236]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	4a3a      	ldr	r2, [pc, #232]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80ad 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a7a:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d060      	beq.n	8003b48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d145      	bne.n	8003b1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8e:	4b33      	ldr	r3, [pc, #204]	; (8003b5c <HAL_RCC_OscConfig+0x4b4>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fd f9c0 	bl	8000e18 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fd f9bc 	bl	8000e18 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e093      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aae:	4b29      	ldr	r3, [pc, #164]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	019b      	lsls	r3, r3, #6
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	061b      	lsls	r3, r3, #24
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	071b      	lsls	r3, r3, #28
 8003ae6:	491b      	ldr	r1, [pc, #108]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_RCC_OscConfig+0x4b4>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fd f991 	bl	8000e18 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fd f98d 	bl	8000e18 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e064      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0c:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x452>
 8003b18:	e05c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_RCC_OscConfig+0x4b4>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd f97a 	bl	8000e18 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fd f976 	bl	8000e18 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e04d      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x480>
 8003b46:	e045      	b.n	8003bd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e040      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b60:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <HAL_RCC_OscConfig+0x538>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d030      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d129      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d122      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b90:	4013      	ands	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d119      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d10f      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800

08003be4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e07b      	b.n	8003cee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d108      	bne.n	8003c10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c06:	d009      	beq.n	8003c1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	61da      	str	r2, [r3, #28]
 8003c0e:	e005      	b.n	8003c1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fc ff32 	bl	8000aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca0:	ea42 0103 	orr.w	r1, r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	f003 0104 	and.w	r1, r3, #4
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	f003 0210 	and.w	r2, r3, #16
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e041      	b.n	8003d8c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7fc ff07 	bl	8000b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f000 f9cd 	bl	80040d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d001      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e04e      	b.n	8003e4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a23      	ldr	r2, [pc, #140]	; (8003e58 <HAL_TIM_Base_Start_IT+0xc4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d022      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd6:	d01d      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <HAL_TIM_Base_Start_IT+0xc8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1e      	ldr	r2, [pc, #120]	; (8003e60 <HAL_TIM_Base_Start_IT+0xcc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <HAL_TIM_Base_Start_IT+0xd0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a19      	ldr	r2, [pc, #100]	; (8003e6c <HAL_TIM_Base_Start_IT+0xd8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d111      	bne.n	8003e38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	d010      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e36:	e007      	b.n	8003e48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40000800 	.word	0x40000800
 8003e64:	40000c00 	.word	0x40000c00
 8003e68:	40010400 	.word	0x40010400
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	40001800 	.word	0x40001800

08003e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d122      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d11b      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0202 	mvn.w	r2, #2
 8003ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f8ee 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f8e0 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f8f1 	bl	80040ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d122      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d11b      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0204 	mvn.w	r2, #4
 8003ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8c4 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003f10:	e005      	b.n	8003f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f8b6 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f8c7 	bl	80040ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d122      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d11b      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0208 	mvn.w	r2, #8
 8003f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f89a 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f88c 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f89d 	bl	80040ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d122      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d11b      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0210 	mvn.w	r2, #16
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f870 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003fb8:	e005      	b.n	8003fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f862 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f873 	bl	80040ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0201 	mvn.w	r2, #1
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc fcc8 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b80      	cmp	r3, #128	; 0x80
 8004004:	d10e      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004010:	2b80      	cmp	r3, #128	; 0x80
 8004012:	d107      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f902 	bl	8004228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d10e      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d107      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f838 	bl	80040c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b20      	cmp	r3, #32
 800405c:	d10e      	bne.n	800407c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b20      	cmp	r3, #32
 800406a:	d107      	bne.n	800407c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0220 	mvn.w	r2, #32
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f8cc 	bl	8004214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a40      	ldr	r2, [pc, #256]	; (80041e8 <TIM_Base_SetConfig+0x114>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d013      	beq.n	8004114 <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f2:	d00f      	beq.n	8004114 <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a3d      	ldr	r2, [pc, #244]	; (80041ec <TIM_Base_SetConfig+0x118>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00b      	beq.n	8004114 <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3c      	ldr	r2, [pc, #240]	; (80041f0 <TIM_Base_SetConfig+0x11c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3b      	ldr	r2, [pc, #236]	; (80041f4 <TIM_Base_SetConfig+0x120>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3a      	ldr	r2, [pc, #232]	; (80041f8 <TIM_Base_SetConfig+0x124>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d108      	bne.n	8004126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2f      	ldr	r2, [pc, #188]	; (80041e8 <TIM_Base_SetConfig+0x114>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d02b      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004134:	d027      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2c      	ldr	r2, [pc, #176]	; (80041ec <TIM_Base_SetConfig+0x118>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d023      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2b      	ldr	r2, [pc, #172]	; (80041f0 <TIM_Base_SetConfig+0x11c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01f      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2a      	ldr	r2, [pc, #168]	; (80041f4 <TIM_Base_SetConfig+0x120>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01b      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a29      	ldr	r2, [pc, #164]	; (80041f8 <TIM_Base_SetConfig+0x124>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d017      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a28      	ldr	r2, [pc, #160]	; (80041fc <TIM_Base_SetConfig+0x128>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a27      	ldr	r2, [pc, #156]	; (8004200 <TIM_Base_SetConfig+0x12c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00f      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a26      	ldr	r2, [pc, #152]	; (8004204 <TIM_Base_SetConfig+0x130>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00b      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a25      	ldr	r2, [pc, #148]	; (8004208 <TIM_Base_SetConfig+0x134>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d007      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a24      	ldr	r2, [pc, #144]	; (800420c <TIM_Base_SetConfig+0x138>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a23      	ldr	r2, [pc, #140]	; (8004210 <TIM_Base_SetConfig+0x13c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d108      	bne.n	8004198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <TIM_Base_SetConfig+0x114>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_Base_SetConfig+0xf8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0c      	ldr	r2, [pc, #48]	; (80041f8 <TIM_Base_SetConfig+0x124>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d103      	bne.n	80041d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	615a      	str	r2, [r3, #20]
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40010000 	.word	0x40010000
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00
 80041f8:	40010400 	.word	0x40010400
 80041fc:	40014000 	.word	0x40014000
 8004200:	40014400 	.word	0x40014400
 8004204:	40014800 	.word	0x40014800
 8004208:	40001800 	.word	0x40001800
 800420c:	40001c00 	.word	0x40001c00
 8004210:	40002000 	.word	0x40002000

08004214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e03f      	b.n	80042ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc fc8c 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2224      	movs	r2, #36	; 0x24
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800427e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f829 	bl	80042d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042dc:	b0c0      	sub	sp, #256	; 0x100
 80042de:	af00      	add	r7, sp, #0
 80042e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	68d9      	ldr	r1, [r3, #12]
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	ea40 0301 	orr.w	r3, r0, r1
 8004300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	431a      	orrs	r2, r3
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	431a      	orrs	r2, r3
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004330:	f021 010c 	bic.w	r1, r1, #12
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800433e:	430b      	orrs	r3, r1
 8004340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004352:	6999      	ldr	r1, [r3, #24]
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	ea40 0301 	orr.w	r3, r0, r1
 800435e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4b8f      	ldr	r3, [pc, #572]	; (80045a4 <UART_SetConfig+0x2cc>)
 8004368:	429a      	cmp	r2, r3
 800436a:	d005      	beq.n	8004378 <UART_SetConfig+0xa0>
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4b8d      	ldr	r3, [pc, #564]	; (80045a8 <UART_SetConfig+0x2d0>)
 8004374:	429a      	cmp	r2, r3
 8004376:	d104      	bne.n	8004382 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004378:	f7fe fbf6 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 800437c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004380:	e003      	b.n	800438a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004382:	f7fe fbdd 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 8004386:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800438a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004394:	f040 810c 	bne.w	80045b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800439c:	2200      	movs	r2, #0
 800439e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043aa:	4622      	mov	r2, r4
 80043ac:	462b      	mov	r3, r5
 80043ae:	1891      	adds	r1, r2, r2
 80043b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80043b2:	415b      	adcs	r3, r3
 80043b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043ba:	4621      	mov	r1, r4
 80043bc:	eb12 0801 	adds.w	r8, r2, r1
 80043c0:	4629      	mov	r1, r5
 80043c2:	eb43 0901 	adc.w	r9, r3, r1
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043da:	4690      	mov	r8, r2
 80043dc:	4699      	mov	r9, r3
 80043de:	4623      	mov	r3, r4
 80043e0:	eb18 0303 	adds.w	r3, r8, r3
 80043e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043e8:	462b      	mov	r3, r5
 80043ea:	eb49 0303 	adc.w	r3, r9, r3
 80043ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004402:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004406:	460b      	mov	r3, r1
 8004408:	18db      	adds	r3, r3, r3
 800440a:	653b      	str	r3, [r7, #80]	; 0x50
 800440c:	4613      	mov	r3, r2
 800440e:	eb42 0303 	adc.w	r3, r2, r3
 8004412:	657b      	str	r3, [r7, #84]	; 0x54
 8004414:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004418:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800441c:	f7fb fef8 	bl	8000210 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4b61      	ldr	r3, [pc, #388]	; (80045ac <UART_SetConfig+0x2d4>)
 8004426:	fba3 2302 	umull	r2, r3, r3, r2
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	011c      	lsls	r4, r3, #4
 800442e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004432:	2200      	movs	r2, #0
 8004434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004438:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800443c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004440:	4642      	mov	r2, r8
 8004442:	464b      	mov	r3, r9
 8004444:	1891      	adds	r1, r2, r2
 8004446:	64b9      	str	r1, [r7, #72]	; 0x48
 8004448:	415b      	adcs	r3, r3
 800444a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800444c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004450:	4641      	mov	r1, r8
 8004452:	eb12 0a01 	adds.w	sl, r2, r1
 8004456:	4649      	mov	r1, r9
 8004458:	eb43 0b01 	adc.w	fp, r3, r1
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004468:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800446c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004470:	4692      	mov	sl, r2
 8004472:	469b      	mov	fp, r3
 8004474:	4643      	mov	r3, r8
 8004476:	eb1a 0303 	adds.w	r3, sl, r3
 800447a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800447e:	464b      	mov	r3, r9
 8004480:	eb4b 0303 	adc.w	r3, fp, r3
 8004484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004494:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004498:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800449c:	460b      	mov	r3, r1
 800449e:	18db      	adds	r3, r3, r3
 80044a0:	643b      	str	r3, [r7, #64]	; 0x40
 80044a2:	4613      	mov	r3, r2
 80044a4:	eb42 0303 	adc.w	r3, r2, r3
 80044a8:	647b      	str	r3, [r7, #68]	; 0x44
 80044aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044b2:	f7fb fead 	bl	8000210 <__aeabi_uldivmod>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4611      	mov	r1, r2
 80044bc:	4b3b      	ldr	r3, [pc, #236]	; (80045ac <UART_SetConfig+0x2d4>)
 80044be:	fba3 2301 	umull	r2, r3, r3, r1
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	2264      	movs	r2, #100	; 0x64
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	1acb      	subs	r3, r1, r3
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044d2:	4b36      	ldr	r3, [pc, #216]	; (80045ac <UART_SetConfig+0x2d4>)
 80044d4:	fba3 2302 	umull	r2, r3, r3, r2
 80044d8:	095b      	lsrs	r3, r3, #5
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044e0:	441c      	add	r4, r3
 80044e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044f4:	4642      	mov	r2, r8
 80044f6:	464b      	mov	r3, r9
 80044f8:	1891      	adds	r1, r2, r2
 80044fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80044fc:	415b      	adcs	r3, r3
 80044fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004504:	4641      	mov	r1, r8
 8004506:	1851      	adds	r1, r2, r1
 8004508:	6339      	str	r1, [r7, #48]	; 0x30
 800450a:	4649      	mov	r1, r9
 800450c:	414b      	adcs	r3, r1
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800451c:	4659      	mov	r1, fp
 800451e:	00cb      	lsls	r3, r1, #3
 8004520:	4651      	mov	r1, sl
 8004522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004526:	4651      	mov	r1, sl
 8004528:	00ca      	lsls	r2, r1, #3
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	4603      	mov	r3, r0
 8004530:	4642      	mov	r2, r8
 8004532:	189b      	adds	r3, r3, r2
 8004534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004538:	464b      	mov	r3, r9
 800453a:	460a      	mov	r2, r1
 800453c:	eb42 0303 	adc.w	r3, r2, r3
 8004540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004550:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004554:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004558:	460b      	mov	r3, r1
 800455a:	18db      	adds	r3, r3, r3
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
 800455e:	4613      	mov	r3, r2
 8004560:	eb42 0303 	adc.w	r3, r2, r3
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800456a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800456e:	f7fb fe4f 	bl	8000210 <__aeabi_uldivmod>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <UART_SetConfig+0x2d4>)
 8004578:	fba3 1302 	umull	r1, r3, r3, r2
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	2164      	movs	r1, #100	; 0x64
 8004580:	fb01 f303 	mul.w	r3, r1, r3
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	3332      	adds	r3, #50	; 0x32
 800458a:	4a08      	ldr	r2, [pc, #32]	; (80045ac <UART_SetConfig+0x2d4>)
 800458c:	fba2 2303 	umull	r2, r3, r2, r3
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	f003 0207 	and.w	r2, r3, #7
 8004596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4422      	add	r2, r4
 800459e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045a0:	e105      	b.n	80047ae <UART_SetConfig+0x4d6>
 80045a2:	bf00      	nop
 80045a4:	40011000 	.word	0x40011000
 80045a8:	40011400 	.word	0x40011400
 80045ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045c2:	4642      	mov	r2, r8
 80045c4:	464b      	mov	r3, r9
 80045c6:	1891      	adds	r1, r2, r2
 80045c8:	6239      	str	r1, [r7, #32]
 80045ca:	415b      	adcs	r3, r3
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
 80045ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045d2:	4641      	mov	r1, r8
 80045d4:	1854      	adds	r4, r2, r1
 80045d6:	4649      	mov	r1, r9
 80045d8:	eb43 0501 	adc.w	r5, r3, r1
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	00eb      	lsls	r3, r5, #3
 80045e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ea:	00e2      	lsls	r2, r4, #3
 80045ec:	4614      	mov	r4, r2
 80045ee:	461d      	mov	r5, r3
 80045f0:	4643      	mov	r3, r8
 80045f2:	18e3      	adds	r3, r4, r3
 80045f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045f8:	464b      	mov	r3, r9
 80045fa:	eb45 0303 	adc.w	r3, r5, r3
 80045fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800460e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800461e:	4629      	mov	r1, r5
 8004620:	008b      	lsls	r3, r1, #2
 8004622:	4621      	mov	r1, r4
 8004624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004628:	4621      	mov	r1, r4
 800462a:	008a      	lsls	r2, r1, #2
 800462c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004630:	f7fb fdee 	bl	8000210 <__aeabi_uldivmod>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4b60      	ldr	r3, [pc, #384]	; (80047bc <UART_SetConfig+0x4e4>)
 800463a:	fba3 2302 	umull	r2, r3, r3, r2
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	011c      	lsls	r4, r3, #4
 8004642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004646:	2200      	movs	r2, #0
 8004648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800464c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004650:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004654:	4642      	mov	r2, r8
 8004656:	464b      	mov	r3, r9
 8004658:	1891      	adds	r1, r2, r2
 800465a:	61b9      	str	r1, [r7, #24]
 800465c:	415b      	adcs	r3, r3
 800465e:	61fb      	str	r3, [r7, #28]
 8004660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004664:	4641      	mov	r1, r8
 8004666:	1851      	adds	r1, r2, r1
 8004668:	6139      	str	r1, [r7, #16]
 800466a:	4649      	mov	r1, r9
 800466c:	414b      	adcs	r3, r1
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800467c:	4659      	mov	r1, fp
 800467e:	00cb      	lsls	r3, r1, #3
 8004680:	4651      	mov	r1, sl
 8004682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004686:	4651      	mov	r1, sl
 8004688:	00ca      	lsls	r2, r1, #3
 800468a:	4610      	mov	r0, r2
 800468c:	4619      	mov	r1, r3
 800468e:	4603      	mov	r3, r0
 8004690:	4642      	mov	r2, r8
 8004692:	189b      	adds	r3, r3, r2
 8004694:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004698:	464b      	mov	r3, r9
 800469a:	460a      	mov	r2, r1
 800469c:	eb42 0303 	adc.w	r3, r2, r3
 80046a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046bc:	4649      	mov	r1, r9
 80046be:	008b      	lsls	r3, r1, #2
 80046c0:	4641      	mov	r1, r8
 80046c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046c6:	4641      	mov	r1, r8
 80046c8:	008a      	lsls	r2, r1, #2
 80046ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046ce:	f7fb fd9f 	bl	8000210 <__aeabi_uldivmod>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4b39      	ldr	r3, [pc, #228]	; (80047bc <UART_SetConfig+0x4e4>)
 80046d8:	fba3 1302 	umull	r1, r3, r3, r2
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	2164      	movs	r1, #100	; 0x64
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	3332      	adds	r3, #50	; 0x32
 80046ea:	4a34      	ldr	r2, [pc, #208]	; (80047bc <UART_SetConfig+0x4e4>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f6:	441c      	add	r4, r3
 80046f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046fc:	2200      	movs	r2, #0
 80046fe:	673b      	str	r3, [r7, #112]	; 0x70
 8004700:	677a      	str	r2, [r7, #116]	; 0x74
 8004702:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004706:	4642      	mov	r2, r8
 8004708:	464b      	mov	r3, r9
 800470a:	1891      	adds	r1, r2, r2
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	415b      	adcs	r3, r3
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004716:	4641      	mov	r1, r8
 8004718:	1851      	adds	r1, r2, r1
 800471a:	6039      	str	r1, [r7, #0]
 800471c:	4649      	mov	r1, r9
 800471e:	414b      	adcs	r3, r1
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800472e:	4659      	mov	r1, fp
 8004730:	00cb      	lsls	r3, r1, #3
 8004732:	4651      	mov	r1, sl
 8004734:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004738:	4651      	mov	r1, sl
 800473a:	00ca      	lsls	r2, r1, #3
 800473c:	4610      	mov	r0, r2
 800473e:	4619      	mov	r1, r3
 8004740:	4603      	mov	r3, r0
 8004742:	4642      	mov	r2, r8
 8004744:	189b      	adds	r3, r3, r2
 8004746:	66bb      	str	r3, [r7, #104]	; 0x68
 8004748:	464b      	mov	r3, r9
 800474a:	460a      	mov	r2, r1
 800474c:	eb42 0303 	adc.w	r3, r2, r3
 8004750:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	663b      	str	r3, [r7, #96]	; 0x60
 800475c:	667a      	str	r2, [r7, #100]	; 0x64
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800476a:	4649      	mov	r1, r9
 800476c:	008b      	lsls	r3, r1, #2
 800476e:	4641      	mov	r1, r8
 8004770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004774:	4641      	mov	r1, r8
 8004776:	008a      	lsls	r2, r1, #2
 8004778:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800477c:	f7fb fd48 	bl	8000210 <__aeabi_uldivmod>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <UART_SetConfig+0x4e4>)
 8004786:	fba3 1302 	umull	r1, r3, r3, r2
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2164      	movs	r1, #100	; 0x64
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	3332      	adds	r3, #50	; 0x32
 8004798:	4a08      	ldr	r2, [pc, #32]	; (80047bc <UART_SetConfig+0x4e4>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	f003 020f 	and.w	r2, r3, #15
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4422      	add	r2, r4
 80047ac:	609a      	str	r2, [r3, #8]
}
 80047ae:	bf00      	nop
 80047b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047b4:	46bd      	mov	sp, r7
 80047b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ba:	bf00      	nop
 80047bc:	51eb851f 	.word	0x51eb851f

080047c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047c0:	b084      	sub	sp, #16
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	f107 001c 	add.w	r0, r7, #28
 80047ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d122      	bne.n	800481e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004802:	2b01      	cmp	r3, #1
 8004804:	d105      	bne.n	8004812 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f001 fac0 	bl	8005d98 <USB_CoreReset>
 8004818:	4603      	mov	r3, r0
 800481a:	73fb      	strb	r3, [r7, #15]
 800481c:	e01a      	b.n	8004854 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f001 fab4 	bl	8005d98 <USB_CoreReset>
 8004830:	4603      	mov	r3, r0
 8004832:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
 8004846:	e005      	b.n	8004854 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	2b01      	cmp	r3, #1
 8004858:	d10b      	bne.n	8004872 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f043 0206 	orr.w	r2, r3, #6
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f043 0220 	orr.w	r2, r3, #32
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800487e:	b004      	add	sp, #16
 8004880:	4770      	bx	lr
	...

08004884 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	4613      	mov	r3, r2
 8004890:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004892:	79fb      	ldrb	r3, [r7, #7]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d165      	bne.n	8004964 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4a41      	ldr	r2, [pc, #260]	; (80049a0 <USB_SetTurnaroundTime+0x11c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d906      	bls.n	80048ae <USB_SetTurnaroundTime+0x2a>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4a40      	ldr	r2, [pc, #256]	; (80049a4 <USB_SetTurnaroundTime+0x120>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d202      	bcs.n	80048ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048a8:	230f      	movs	r3, #15
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	e062      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4a3c      	ldr	r2, [pc, #240]	; (80049a4 <USB_SetTurnaroundTime+0x120>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d306      	bcc.n	80048c4 <USB_SetTurnaroundTime+0x40>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4a3b      	ldr	r2, [pc, #236]	; (80049a8 <USB_SetTurnaroundTime+0x124>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d202      	bcs.n	80048c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048be:	230e      	movs	r3, #14
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e057      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4a38      	ldr	r2, [pc, #224]	; (80049a8 <USB_SetTurnaroundTime+0x124>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d306      	bcc.n	80048da <USB_SetTurnaroundTime+0x56>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4a37      	ldr	r2, [pc, #220]	; (80049ac <USB_SetTurnaroundTime+0x128>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d202      	bcs.n	80048da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048d4:	230d      	movs	r3, #13
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e04c      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4a33      	ldr	r2, [pc, #204]	; (80049ac <USB_SetTurnaroundTime+0x128>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d306      	bcc.n	80048f0 <USB_SetTurnaroundTime+0x6c>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4a32      	ldr	r2, [pc, #200]	; (80049b0 <USB_SetTurnaroundTime+0x12c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d802      	bhi.n	80048f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80048ea:	230c      	movs	r3, #12
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	e041      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4a2f      	ldr	r2, [pc, #188]	; (80049b0 <USB_SetTurnaroundTime+0x12c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d906      	bls.n	8004906 <USB_SetTurnaroundTime+0x82>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4a2e      	ldr	r2, [pc, #184]	; (80049b4 <USB_SetTurnaroundTime+0x130>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d802      	bhi.n	8004906 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004900:	230b      	movs	r3, #11
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e036      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <USB_SetTurnaroundTime+0x130>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d906      	bls.n	800491c <USB_SetTurnaroundTime+0x98>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4a29      	ldr	r2, [pc, #164]	; (80049b8 <USB_SetTurnaroundTime+0x134>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d802      	bhi.n	800491c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004916:	230a      	movs	r3, #10
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e02b      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4a26      	ldr	r2, [pc, #152]	; (80049b8 <USB_SetTurnaroundTime+0x134>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d906      	bls.n	8004932 <USB_SetTurnaroundTime+0xae>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4a25      	ldr	r2, [pc, #148]	; (80049bc <USB_SetTurnaroundTime+0x138>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d202      	bcs.n	8004932 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800492c:	2309      	movs	r3, #9
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e020      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4a21      	ldr	r2, [pc, #132]	; (80049bc <USB_SetTurnaroundTime+0x138>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d306      	bcc.n	8004948 <USB_SetTurnaroundTime+0xc4>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4a20      	ldr	r2, [pc, #128]	; (80049c0 <USB_SetTurnaroundTime+0x13c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d802      	bhi.n	8004948 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004942:	2308      	movs	r3, #8
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	e015      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4a1d      	ldr	r2, [pc, #116]	; (80049c0 <USB_SetTurnaroundTime+0x13c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d906      	bls.n	800495e <USB_SetTurnaroundTime+0xda>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <USB_SetTurnaroundTime+0x140>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d202      	bcs.n	800495e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004958:	2307      	movs	r3, #7
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	e00a      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800495e:	2306      	movs	r3, #6
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	e007      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800496a:	2309      	movs	r3, #9
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e001      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004970:	2309      	movs	r3, #9
 8004972:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	029b      	lsls	r3, r3, #10
 8004988:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800498c:	431a      	orrs	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	00d8acbf 	.word	0x00d8acbf
 80049a4:	00e4e1c0 	.word	0x00e4e1c0
 80049a8:	00f42400 	.word	0x00f42400
 80049ac:	01067380 	.word	0x01067380
 80049b0:	011a499f 	.word	0x011a499f
 80049b4:	01312cff 	.word	0x01312cff
 80049b8:	014ca43f 	.word	0x014ca43f
 80049bc:	016e3600 	.word	0x016e3600
 80049c0:	01a6ab1f 	.word	0x01a6ab1f
 80049c4:	01e84800 	.word	0x01e84800

080049c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f043 0201 	orr.w	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f023 0201 	bic.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d106      	bne.n	8004a38 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60da      	str	r2, [r3, #12]
 8004a36:	e00b      	b.n	8004a50 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e001      	b.n	8004a50 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e003      	b.n	8004a58 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004a50:	2032      	movs	r0, #50	; 0x32
 8004a52:	f7fc f9ed 	bl	8000e30 <HAL_Delay>

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a60:	b084      	sub	sp, #16
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	e009      	b.n	8004a94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	3340      	adds	r3, #64	; 0x40
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	3301      	adds	r3, #1
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b0e      	cmp	r3, #14
 8004a98:	d9f2      	bls.n	8004a80 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d11c      	bne.n	8004ada <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aae:	f043 0302 	orr.w	r3, r3, #2
 8004ab2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	e005      	b.n	8004ae6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004aec:	461a      	mov	r2, r3
 8004aee:	2300      	movs	r3, #0
 8004af0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af8:	4619      	mov	r1, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b00:	461a      	mov	r2, r3
 8004b02:	680b      	ldr	r3, [r1, #0]
 8004b04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d10c      	bne.n	8004b26 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b12:	2100      	movs	r1, #0
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f949 	bl	8004dac <USB_SetDevSpeed>
 8004b1a:	e008      	b.n	8004b2e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f944 	bl	8004dac <USB_SetDevSpeed>
 8004b24:	e003      	b.n	8004b2e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b26:	2103      	movs	r1, #3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f93f 	bl	8004dac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b2e:	2110      	movs	r1, #16
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f8f3 	bl	8004d1c <USB_FlushTxFifo>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f911 	bl	8004d68 <USB_FlushRxFifo>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b56:	461a      	mov	r2, r3
 8004b58:	2300      	movs	r3, #0
 8004b5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b62:	461a      	mov	r2, r3
 8004b64:	2300      	movs	r3, #0
 8004b66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2300      	movs	r3, #0
 8004b72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	e043      	b.n	8004c02 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b90:	d118      	bne.n	8004bc4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	e013      	b.n	8004bd6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e008      	b.n	8004bd6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be2:	461a      	mov	r2, r3
 8004be4:	2300      	movs	r3, #0
 8004be6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d3b7      	bcc.n	8004b7a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	e043      	b.n	8004c98 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c26:	d118      	bne.n	8004c5a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e013      	b.n	8004c6c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	461a      	mov	r2, r3
 8004c52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	e008      	b.n	8004c6c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c66:	461a      	mov	r2, r3
 8004c68:	2300      	movs	r3, #0
 8004c6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c78:	461a      	mov	r2, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	3301      	adds	r3, #1
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d3b7      	bcc.n	8004c10 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cb2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004cc0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d105      	bne.n	8004cd4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f043 0210 	orr.w	r2, r3, #16
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <USB_DevInit+0x2b8>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f043 0208 	orr.w	r2, r3, #8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d107      	bne.n	8004d08 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d00:	f043 0304 	orr.w	r3, r3, #4
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d14:	b004      	add	sp, #16
 8004d16:	4770      	bx	lr
 8004d18:	803c3800 	.word	0x803c3800

08004d1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	019b      	lsls	r3, r3, #6
 8004d2e:	f043 0220 	orr.w	r2, r3, #32
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <USB_FlushTxFifo+0x48>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d901      	bls.n	8004d48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e006      	b.n	8004d56 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d0f0      	beq.n	8004d36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	00030d40 	.word	0x00030d40

08004d68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2210      	movs	r2, #16
 8004d78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <USB_FlushRxFifo+0x40>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d901      	bls.n	8004d8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e006      	b.n	8004d9a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d0f0      	beq.n	8004d7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	00030d40 	.word	0x00030d40

08004dac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	68f9      	ldr	r1, [r7, #12]
 8004dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b087      	sub	sp, #28
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 0306 	and.w	r3, r3, #6
 8004df6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	75fb      	strb	r3, [r7, #23]
 8004e02:	e00a      	b.n	8004e1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d002      	beq.n	8004e10 <USB_GetDevSpeed+0x32>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b06      	cmp	r3, #6
 8004e0e:	d102      	bne.n	8004e16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e10:	2302      	movs	r3, #2
 8004e12:	75fb      	strb	r3, [r7, #23]
 8004e14:	e001      	b.n	8004e1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e16:	230f      	movs	r3, #15
 8004e18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d13a      	bne.n	8004eba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	2101      	movs	r1, #1
 8004e56:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d155      	bne.n	8004f28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	78db      	ldrb	r3, [r3, #3]
 8004e96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	059b      	lsls	r3, r3, #22
 8004e9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	e036      	b.n	8004f28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	2101      	movs	r1, #1
 8004ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed0:	041b      	lsls	r3, r3, #16
 8004ed2:	68f9      	ldr	r1, [r7, #12]
 8004ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d11a      	bne.n	8004f28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	78db      	ldrb	r3, [r3, #3]
 8004f0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	4313      	orrs	r3, r2
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
	...

08004f38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d161      	bne.n	8005018 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f6a:	d11f      	bne.n	8004fac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004faa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	68f9      	ldr	r1, [r7, #12]
 8004fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fcc:	4013      	ands	r3, r2
 8004fce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	68f9      	ldr	r1, [r7, #12]
 8004fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	0159      	lsls	r1, r3, #5
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	440b      	add	r3, r1
 800500a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500e:	4619      	mov	r1, r3
 8005010:	4b35      	ldr	r3, [pc, #212]	; (80050e8 <USB_DeactivateEndpoint+0x1b0>)
 8005012:	4013      	ands	r3, r2
 8005014:	600b      	str	r3, [r1, #0]
 8005016:	e060      	b.n	80050da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800502a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800502e:	d11f      	bne.n	8005070 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	0151      	lsls	r1, r2, #5
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	440a      	add	r2, r1
 8005046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800504a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800504e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	0151      	lsls	r1, r2, #5
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	440a      	add	r2, r1
 8005066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800506a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800506e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	2101      	movs	r1, #1
 8005082:	fa01 f303 	lsl.w	r3, r1, r3
 8005086:	041b      	lsls	r3, r3, #16
 8005088:	43db      	mvns	r3, r3
 800508a:	68f9      	ldr	r1, [r7, #12]
 800508c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005090:	4013      	ands	r3, r2
 8005092:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	f003 030f 	and.w	r3, r3, #15
 80050a4:	2101      	movs	r1, #1
 80050a6:	fa01 f303 	lsl.w	r3, r1, r3
 80050aa:	041b      	lsls	r3, r3, #16
 80050ac:	43db      	mvns	r3, r3
 80050ae:	68f9      	ldr	r1, [r7, #12]
 80050b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050b4:	4013      	ands	r3, r2
 80050b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	0159      	lsls	r1, r3, #5
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	440b      	add	r3, r1
 80050ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d2:	4619      	mov	r1, r3
 80050d4:	4b05      	ldr	r3, [pc, #20]	; (80050ec <USB_DeactivateEndpoint+0x1b4>)
 80050d6:	4013      	ands	r3, r2
 80050d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	ec337800 	.word	0xec337800
 80050ec:	eff37800 	.word	0xeff37800

080050f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	; 0x28
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b01      	cmp	r3, #1
 800510e:	f040 815c 	bne.w	80053ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d132      	bne.n	8005180 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005134:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005138:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800513c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	440a      	add	r2, r1
 8005154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005158:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800515c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	0151      	lsls	r1, r2, #5
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	440a      	add	r2, r1
 8005174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005178:	0cdb      	lsrs	r3, r3, #19
 800517a:	04db      	lsls	r3, r3, #19
 800517c:	6113      	str	r3, [r2, #16]
 800517e:	e074      	b.n	800526a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	69fa      	ldr	r2, [r7, #28]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519a:	0cdb      	lsrs	r3, r3, #19
 800519c:	04db      	lsls	r3, r3, #19
 800519e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6959      	ldr	r1, [r3, #20]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	440b      	add	r3, r1
 80051dc:	1e59      	subs	r1, r3, #1
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80051e6:	04d9      	lsls	r1, r3, #19
 80051e8:	4b9d      	ldr	r3, [pc, #628]	; (8005460 <USB_EPStartXfer+0x370>)
 80051ea:	400b      	ands	r3, r1
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	0148      	lsls	r0, r1, #5
 80051f0:	69f9      	ldr	r1, [r7, #28]
 80051f2:	4401      	add	r1, r0
 80051f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051f8:	4313      	orrs	r3, r2
 80051fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005212:	69b9      	ldr	r1, [r7, #24]
 8005214:	0148      	lsls	r0, r1, #5
 8005216:	69f9      	ldr	r1, [r7, #28]
 8005218:	4401      	add	r1, r0
 800521a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800521e:	4313      	orrs	r3, r2
 8005220:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	78db      	ldrb	r3, [r3, #3]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d11f      	bne.n	800526a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	440a      	add	r2, r1
 8005240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005244:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005248:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	0151      	lsls	r1, r2, #5
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	440a      	add	r2, r1
 8005260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005264:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005268:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d14b      	bne.n	8005308 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d009      	beq.n	800528c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	461a      	mov	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	78db      	ldrb	r3, [r3, #3]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d128      	bne.n	80052e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d110      	bne.n	80052c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	e00f      	b.n	80052e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	0151      	lsls	r1, r2, #5
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	440a      	add	r2, r1
 80052fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005300:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e12f      	b.n	8005568 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	440a      	add	r2, r1
 800531e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005322:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005326:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	78db      	ldrb	r3, [r3, #3]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d015      	beq.n	800535c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8117 	beq.w	8005568 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	2101      	movs	r1, #1
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	69f9      	ldr	r1, [r7, #28]
 8005352:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005356:	4313      	orrs	r3, r2
 8005358:	634b      	str	r3, [r1, #52]	; 0x34
 800535a:	e105      	b.n	8005568 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	d110      	bne.n	800538e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	440a      	add	r2, r1
 8005382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005386:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	e00f      	b.n	80053ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	68d9      	ldr	r1, [r3, #12]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	781a      	ldrb	r2, [r3, #0]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	b298      	uxth	r0, r3
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	4603      	mov	r3, r0
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 fa2b 	bl	800581e <USB_WritePacket>
 80053c8:	e0ce      	b.n	8005568 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e4:	0cdb      	lsrs	r3, r3, #19
 80053e6:	04db      	lsls	r3, r3, #19
 80053e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	0151      	lsls	r1, r2, #5
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	440a      	add	r2, r1
 8005400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005404:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005408:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800540c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d126      	bne.n	8005464 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800542c:	69b9      	ldr	r1, [r7, #24]
 800542e:	0148      	lsls	r0, r1, #5
 8005430:	69f9      	ldr	r1, [r7, #28]
 8005432:	4401      	add	r1, r0
 8005434:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005438:	4313      	orrs	r3, r2
 800543a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	440a      	add	r2, r1
 8005452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005456:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800545a:	6113      	str	r3, [r2, #16]
 800545c:	e036      	b.n	80054cc <USB_EPStartXfer+0x3dc>
 800545e:	bf00      	nop
 8005460:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	695a      	ldr	r2, [r3, #20]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	4413      	add	r3, r2
 800546e:	1e5a      	subs	r2, r3, #1
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	fbb2 f3f3 	udiv	r3, r2, r3
 8005478:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	8afb      	ldrh	r3, [r7, #22]
 800548a:	04d9      	lsls	r1, r3, #19
 800548c:	4b39      	ldr	r3, [pc, #228]	; (8005574 <USB_EPStartXfer+0x484>)
 800548e:	400b      	ands	r3, r1
 8005490:	69b9      	ldr	r1, [r7, #24]
 8005492:	0148      	lsls	r0, r1, #5
 8005494:	69f9      	ldr	r1, [r7, #28]
 8005496:	4401      	add	r1, r0
 8005498:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800549c:	4313      	orrs	r3, r2
 800549e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	8af9      	ldrh	r1, [r7, #22]
 80054b4:	fb01 f303 	mul.w	r3, r1, r3
 80054b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054bc:	69b9      	ldr	r1, [r7, #24]
 80054be:	0148      	lsls	r0, r1, #5
 80054c0:	69f9      	ldr	r1, [r7, #28]
 80054c2:	4401      	add	r1, r0
 80054c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054c8:	4313      	orrs	r3, r2
 80054ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d10d      	bne.n	80054ee <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	68d9      	ldr	r1, [r3, #12]
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ea:	460a      	mov	r2, r1
 80054ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	78db      	ldrb	r3, [r3, #3]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d128      	bne.n	8005548 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005502:	2b00      	cmp	r3, #0
 8005504:	d110      	bne.n	8005528 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	440a      	add	r2, r1
 800551c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005520:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e00f      	b.n	8005548 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	0151      	lsls	r1, r2, #5
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	440a      	add	r2, r1
 800553e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005546:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	0151      	lsls	r1, r2, #5
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	440a      	add	r2, r1
 800555e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005562:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005566:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	1ff80000 	.word	0x1ff80000

08005578 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	4613      	mov	r3, r2
 8005584:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	785b      	ldrb	r3, [r3, #1]
 8005594:	2b01      	cmp	r3, #1
 8005596:	f040 80cd 	bne.w	8005734 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d132      	bne.n	8005608 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005600:	0cdb      	lsrs	r3, r3, #19
 8005602:	04db      	lsls	r3, r3, #19
 8005604:	6113      	str	r3, [r2, #16]
 8005606:	e04e      	b.n	80056a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	0151      	lsls	r1, r2, #5
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	440a      	add	r2, r1
 800561e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005622:	0cdb      	lsrs	r3, r3, #19
 8005624:	04db      	lsls	r3, r3, #19
 8005626:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	440a      	add	r2, r1
 800563e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005642:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005646:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800564a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	695a      	ldr	r2, [r3, #20]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	429a      	cmp	r2, r3
 8005656:	d903      	bls.n	8005660 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	0151      	lsls	r1, r2, #5
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	440a      	add	r2, r1
 8005676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800567e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005696:	6939      	ldr	r1, [r7, #16]
 8005698:	0148      	lsls	r0, r1, #5
 800569a:	6979      	ldr	r1, [r7, #20]
 800569c:	4401      	add	r1, r0
 800569e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056a2:	4313      	orrs	r3, r2
 80056a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d11e      	bne.n	80056ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d009      	beq.n	80056c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c0:	461a      	mov	r2, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	0151      	lsls	r1, r2, #5
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	440a      	add	r2, r1
 80056de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	e092      	b.n	8005810 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005704:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005708:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d07e      	beq.n	8005810 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	2101      	movs	r1, #1
 8005724:	fa01 f303 	lsl.w	r3, r1, r3
 8005728:	6979      	ldr	r1, [r7, #20]
 800572a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800572e:	4313      	orrs	r3, r2
 8005730:	634b      	str	r3, [r1, #52]	; 0x34
 8005732:	e06d      	b.n	8005810 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	440a      	add	r2, r1
 800574a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800574e:	0cdb      	lsrs	r3, r3, #19
 8005750:	04db      	lsls	r3, r3, #19
 8005752:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	0151      	lsls	r1, r2, #5
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	440a      	add	r2, r1
 800576a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800576e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005772:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005776:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	440a      	add	r2, r1
 800579e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057be:	6939      	ldr	r1, [r7, #16]
 80057c0:	0148      	lsls	r0, r1, #5
 80057c2:	6979      	ldr	r1, [r7, #20]
 80057c4:	4401      	add	r1, r0
 80057c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057ca:	4313      	orrs	r3, r2
 80057cc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d10d      	bne.n	80057f0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d009      	beq.n	80057f0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	68d9      	ldr	r1, [r3, #12]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ec:	460a      	mov	r2, r1
 80057ee:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800580e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800581e:	b480      	push	{r7}
 8005820:	b089      	sub	sp, #36	; 0x24
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	4611      	mov	r1, r2
 800582a:	461a      	mov	r2, r3
 800582c:	460b      	mov	r3, r1
 800582e:	71fb      	strb	r3, [r7, #7]
 8005830:	4613      	mov	r3, r2
 8005832:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800583c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005840:	2b00      	cmp	r3, #0
 8005842:	d11a      	bne.n	800587a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005844:	88bb      	ldrh	r3, [r7, #4]
 8005846:	3303      	adds	r3, #3
 8005848:	089b      	lsrs	r3, r3, #2
 800584a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800584c:	2300      	movs	r3, #0
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e00f      	b.n	8005872 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	031a      	lsls	r2, r3, #12
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	4413      	add	r3, r2
 800585a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585e:	461a      	mov	r2, r3
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	3304      	adds	r3, #4
 800586a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	3301      	adds	r3, #1
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	429a      	cmp	r2, r3
 8005878:	d3eb      	bcc.n	8005852 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3724      	adds	r7, #36	; 0x24
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005888:	b480      	push	{r7}
 800588a:	b089      	sub	sp, #36	; 0x24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	4613      	mov	r3, r2
 8005894:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	3303      	adds	r3, #3
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80058a6:	2300      	movs	r3, #0
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	e00b      	b.n	80058c4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	3304      	adds	r3, #4
 80058bc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	3301      	adds	r3, #1
 80058c2:	61bb      	str	r3, [r7, #24]
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d3ef      	bcc.n	80058ac <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80058cc:	69fb      	ldr	r3, [r7, #28]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3724      	adds	r7, #36	; 0x24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d12c      	bne.n	8005950 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	db12      	blt.n	800592e <USB_EPSetStall+0x54>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00f      	beq.n	800592e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	0151      	lsls	r1, r2, #5
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	440a      	add	r2, r1
 8005924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005928:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800592c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e02b      	b.n	80059a8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	db12      	blt.n	8005988 <USB_EPSetStall+0xae>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00f      	beq.n	8005988 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	440a      	add	r2, r1
 800597e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005982:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005986:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	440a      	add	r2, r1
 800599e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d128      	bne.n	8005a24 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	78db      	ldrb	r3, [r3, #3]
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d003      	beq.n	8005a02 <USB_EPClearStall+0x4c>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	78db      	ldrb	r3, [r3, #3]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d138      	bne.n	8005a74 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	e027      	b.n	8005a74 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	0151      	lsls	r1, r2, #5
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	440a      	add	r2, r1
 8005a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	78db      	ldrb	r3, [r3, #3]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d003      	beq.n	8005a54 <USB_EPClearStall+0x9e>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	78db      	ldrb	r3, [r3, #3]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d10f      	bne.n	8005a74 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a72:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aa0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005aa4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ab6:	68f9      	ldr	r1, [r7, #12]
 8005ab8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005abc:	4313      	orrs	r3, r2
 8005abe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ae8:	f023 0303 	bic.w	r3, r3, #3
 8005aec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005afc:	f023 0302 	bic.w	r3, r3, #2
 8005b00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b2a:	f023 0303 	bic.w	r3, r3, #3
 8005b2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b3e:	f043 0302 	orr.w	r3, r3, #2
 8005b42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4013      	ands	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	0c1b      	lsrs	r3, r3, #16
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	b29b      	uxth	r3, r3
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4c:	01db      	lsls	r3, r3, #7
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4013      	ands	r3, r2
 8005c68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	f003 0301 	and.w	r3, r3, #1
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005cb2:	f023 0307 	bic.w	r3, r3, #7
 8005cb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
	...

08005cdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	333c      	adds	r3, #60	; 0x3c
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <USB_EP0_OutStart+0xb8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d90a      	bls.n	8005d16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d10:	d101      	bne.n	8005d16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e037      	b.n	8005d86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2300      	movs	r3, #0
 8005d20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d44:	f043 0318 	orr.w	r3, r3, #24
 8005d48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d5e:	7afb      	ldrb	r3, [r7, #11]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d10f      	bne.n	8005d84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	4f54300a 	.word	0x4f54300a

08005d98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4a13      	ldr	r2, [pc, #76]	; (8005dfc <USB_CoreReset+0x64>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d901      	bls.n	8005db6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e01b      	b.n	8005dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	daf2      	bge.n	8005da4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f043 0201 	orr.w	r2, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4a09      	ldr	r2, [pc, #36]	; (8005dfc <USB_CoreReset+0x64>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d901      	bls.n	8005de0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e006      	b.n	8005dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d0f0      	beq.n	8005dce <USB_CoreReset+0x36>

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	00030d40 	.word	0x00030d40

08005e00 <USBD_HID_Init>:
  * @retval status
  */
/* We have to add the dataout/ep_out function here to get USB pipe data out
 * This is only used with XBCD or THPS 2, every other XBOX game sends rumble through control requests */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005e0c:	2010      	movs	r0, #16
 8005e0e:	f004 fdd9 	bl	800a9c4 <USBD_static_malloc>
 8005e12:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d105      	bne.n	8005e26 <USBD_HID_Init+0x26>
  {
	  //usb_failed = 1;
    pdev->pClassData = NULL;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005e22:	2302      	movs	r3, #2
 8005e24:	e033      	b.n	8005e8e <USBD_HID_Init+0x8e>
  }

  pdev->pClassData = (void *)hhid;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	7c1b      	ldrb	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d107      	bne.n	8005e46 <USBD_HID_Init+0x46>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2207      	movs	r2, #7
 8005e3a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2207      	movs	r2, #7
 8005e40:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
 8005e44:	e006      	b.n	8005e54 <USBD_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2204      	movs	r2, #4
 8005e4a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2204      	movs	r2, #4
 8005e50:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005e54:	2320      	movs	r3, #32
 8005e56:	2203      	movs	r2, #3
 8005e58:	2181      	movs	r1, #129	; 0x81
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f004 fc53 	bl	800a706 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8005e66:	2306      	movs	r3, #6
 8005e68:	2203      	movs	r2, #3
 8005e6a:	2102      	movs	r1, #2
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f004 fc4a 	bl	800a706 <USBD_LL_OpenEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  (void)USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR,(uint8_t*)rx_buf, HID_EPOUT_SIZE);
 8005e7a:	2306      	movs	r3, #6
 8005e7c:	4a06      	ldr	r2, [pc, #24]	; (8005e98 <USBD_HID_Init+0x98>)
 8005e7e:	2102      	movs	r1, #2
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f004 fd2f 	bl	800a8e4 <USBD_LL_PrepareReceive>

  hhid->state = HID_IDLE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	731a      	strb	r2, [r3, #12]

  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();

  /* Prepare Out endpoint to receive 1st packet */

  return (uint8_t)USBD_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	200002d4 	.word	0x200002d4

08005e9c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005ea8:	2181      	movs	r1, #129	; 0x81
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f004 fc51 	bl	800a752 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, HID_EPOUT_ADDR);
 8005ebc:	2102      	movs	r1, #2
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f004 fc47 	bl	800a752 <USBD_LL_CloseEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d009      	beq.n	8005ef2 <USBD_HID_DeInit+0x56>
  {
    (void)USBD_free(pdev->pClassData);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f004 fd7b 	bl	800a9e0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f0c:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d104      	bne.n	8005f26 <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 8005f1c:	4b9f      	ldr	r3, [pc, #636]	; (800619c <USBD_HID_Setup+0x2a0>)
 8005f1e:	2201      	movs	r2, #1
 8005f20:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e136      	b.n	8006194 <USBD_HID_Setup+0x298>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f2e:	2b40      	cmp	r3, #64	; 0x40
 8005f30:	f000 80e1 	beq.w	80060f6 <USBD_HID_Setup+0x1fa>
 8005f34:	2b40      	cmp	r3, #64	; 0x40
 8005f36:	f200 8124 	bhi.w	8006182 <USBD_HID_Setup+0x286>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d058      	beq.n	8005ff0 <USBD_HID_Setup+0xf4>
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	f040 811f 	bne.w	8006182 <USBD_HID_Setup+0x286>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	3b02      	subs	r3, #2
 8005f4a:	2b09      	cmp	r3, #9
 8005f4c:	d848      	bhi.n	8005fe0 <USBD_HID_Setup+0xe4>
 8005f4e:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <USBD_HID_Setup+0x58>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005fab 	.word	0x08005fab
 8005f58:	08005f8b 	.word	0x08005f8b
 8005f5c:	08005fe1 	.word	0x08005fe1
 8005f60:	08005fe1 	.word	0x08005fe1
 8005f64:	08005fe1 	.word	0x08005fe1
 8005f68:	08005fe1 	.word	0x08005fe1
 8005f6c:	08005fe1 	.word	0x08005fe1
 8005f70:	08005fbb 	.word	0x08005fbb
 8005f74:	08005f99 	.word	0x08005f99
 8005f78:	08005f7d 	.word	0x08005f7d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	885b      	ldrh	r3, [r3, #2]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	601a      	str	r2, [r3, #0]
          break;
 8005f88:	e031      	b.n	8005fee <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 fab2 	bl	80074fa <USBD_CtlSendData>
          break;
 8005f96:	e02a      	b.n	8005fee <USBD_HID_Setup+0xf2>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	885b      	ldrh	r3, [r3, #2]
 8005f9c:	0a1b      	lsrs	r3, r3, #8
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	605a      	str	r2, [r3, #4]
          break;
 8005fa8:	e021      	b.n	8005fee <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	3304      	adds	r3, #4
 8005fae:	2201      	movs	r2, #1
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 faa1 	bl	80074fa <USBD_CtlSendData>
          break;
 8005fb8:	e019      	b.n	8005fee <USBD_HID_Setup+0xf2>

        /*We need to get Control request data for the rumble data from the XBOX, we have to add this ourselves */
        case HID_REQ_SET_REPORT:
          rumble_flag = 1;
 8005fba:	4b79      	ldr	r3, [pc, #484]	; (80061a0 <USBD_HID_Setup+0x2a4>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_ID = (uint8_t)(req->wValue);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	885b      	ldrh	r3, [r3, #2]
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	4b77      	ldr	r3, [pc, #476]	; (80061a4 <USBD_HID_Setup+0x2a8>)
 8005fc8:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_LENGTH = (uint8_t)(req->wLength);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	88db      	ldrh	r3, [r3, #6]
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	4b75      	ldr	r3, [pc, #468]	; (80061a8 <USBD_HID_Setup+0x2ac>)
 8005fd2:	701a      	strb	r2, [r3, #0]
          USBD_CtlPrepareRx (pdev, ctl_report_buf, HID_EPOUT_SIZE);
 8005fd4:	2206      	movs	r2, #6
 8005fd6:	4975      	ldr	r1, [pc, #468]	; (80061ac <USBD_HID_Setup+0x2b0>)
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 faba 	bl	8007552 <USBD_CtlPrepareRx>
          break;
 8005fde:	e006      	b.n	8005fee <USBD_HID_Setup+0xf2>
//                            (uint8_t *)&Report_buf,
//                            8);
//          break;

        default:
          USBD_CtlError(pdev, req);
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f001 fa18 	bl	8007418 <USBD_CtlError>
          ret = USBD_FAIL;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	77fb      	strb	r3, [r7, #31]
          break;
 8005fec:	bf00      	nop
      }
      break;
 8005fee:	e0d0      	b.n	8006192 <USBD_HID_Setup+0x296>
    case USB_REQ_TYPE_STANDARD:

      switch (req->bRequest)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	2b0b      	cmp	r3, #11
 8005ff6:	d875      	bhi.n	80060e4 <USBD_HID_Setup+0x1e8>
 8005ff8:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <USBD_HID_Setup+0x104>)
 8005ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffe:	bf00      	nop
 8006000:	08006031 	.word	0x08006031
 8006004:	080060f3 	.word	0x080060f3
 8006008:	080060e5 	.word	0x080060e5
 800600c:	080060e5 	.word	0x080060e5
 8006010:	080060e5 	.word	0x080060e5
 8006014:	080060e5 	.word	0x080060e5
 8006018:	0800605b 	.word	0x0800605b
 800601c:	080060e5 	.word	0x080060e5
 8006020:	080060e5 	.word	0x080060e5
 8006024:	080060e5 	.word	0x080060e5
 8006028:	08006093 	.word	0x08006093
 800602c:	080060bd 	.word	0x080060bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b03      	cmp	r3, #3
 800603a:	d107      	bne.n	800604c <USBD_HID_Setup+0x150>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800603c:	f107 030e 	add.w	r3, r7, #14
 8006040:	2202      	movs	r2, #2
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 fa58 	bl	80074fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800604a:	e053      	b.n	80060f4 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 800604c:	6839      	ldr	r1, [r7, #0]
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f001 f9e2 	bl	8007418 <USBD_CtlError>
            ret = USBD_FAIL;
 8006054:	2303      	movs	r3, #3
 8006056:	77fb      	strb	r3, [r7, #31]
          break;
 8006058:	e04c      	b.n	80060f4 <USBD_HID_Setup+0x1f8>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	885b      	ldrh	r3, [r3, #2]
 800605e:	0a1b      	lsrs	r3, r3, #8
 8006060:	b29b      	uxth	r3, r3
 8006062:	2b21      	cmp	r3, #33	; 0x21
 8006064:	d10e      	bne.n	8006084 <USBD_HID_Setup+0x188>
          {
            pbuf = USBD_HID_Desc;
 8006066:	4b52      	ldr	r3, [pc, #328]	; (80061b0 <USBD_HID_Setup+0x2b4>)
 8006068:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	88db      	ldrh	r3, [r3, #6]
 800606e:	2b12      	cmp	r3, #18
 8006070:	bf28      	it	cs
 8006072:	2312      	movcs	r3, #18
 8006074:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006076:	8afb      	ldrh	r3, [r7, #22]
 8006078:	461a      	mov	r2, r3
 800607a:	6939      	ldr	r1, [r7, #16]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f001 fa3c 	bl	80074fa <USBD_CtlSendData>
          break;
 8006082:	e037      	b.n	80060f4 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f001 f9c6 	bl	8007418 <USBD_CtlError>
            ret = USBD_FAIL;
 800608c:	2303      	movs	r3, #3
 800608e:	77fb      	strb	r3, [r7, #31]
            break;
 8006090:	e030      	b.n	80060f4 <USBD_HID_Setup+0x1f8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b03      	cmp	r3, #3
 800609c:	d107      	bne.n	80060ae <USBD_HID_Setup+0x1b2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	3308      	adds	r3, #8
 80060a2:	2201      	movs	r2, #1
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f001 fa27 	bl	80074fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060ac:	e022      	b.n	80060f4 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 f9b1 	bl	8007418 <USBD_CtlError>
            ret = USBD_FAIL;
 80060b6:	2303      	movs	r3, #3
 80060b8:	77fb      	strb	r3, [r7, #31]
          break;
 80060ba:	e01b      	b.n	80060f4 <USBD_HID_Setup+0x1f8>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d106      	bne.n	80060d6 <USBD_HID_Setup+0x1da>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	885b      	ldrh	r3, [r3, #2]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060d4:	e00e      	b.n	80060f4 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 f99d 	bl	8007418 <USBD_CtlError>
            ret = USBD_FAIL;
 80060de:	2303      	movs	r3, #3
 80060e0:	77fb      	strb	r3, [r7, #31]
          break;
 80060e2:	e007      	b.n	80060f4 <USBD_HID_Setup+0x1f8>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f001 f996 	bl	8007418 <USBD_CtlError>
          ret = USBD_FAIL;
 80060ec:	2303      	movs	r3, #3
 80060ee:	77fb      	strb	r3, [r7, #31]
          break;
 80060f0:	e000      	b.n	80060f4 <USBD_HID_Setup+0x1f8>
          break;
 80060f2:	bf00      	nop
      }
      break;
 80060f4:	e04d      	b.n	8006192 <USBD_HID_Setup+0x296>
    /*This is for the og XBOX, this is the custom vendor request
     * We intercept these and return either the controller's capabilities
     * This is equivalent to the USB HID Descriptor which would normally be used for most devices */
    case (0xC1 & USB_REQ_TYPE_MASK):
    	 hid_setup_ran++;
 80060f6:	4b2f      	ldr	r3, [pc, #188]	; (80061b4 <USBD_HID_Setup+0x2b8>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	3301      	adds	r3, #1
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	4b2d      	ldr	r3, [pc, #180]	; (80061b4 <USBD_HID_Setup+0x2b8>)
 8006100:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	2b06      	cmp	r3, #6
 8006108:	d10f      	bne.n	800612a <USBD_HID_Setup+0x22e>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	885b      	ldrh	r3, [r3, #2]
 800610e:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8006112:	d10a      	bne.n	800612a <USBD_HID_Setup+0x22e>
    		len = 16;
 8006114:	2310      	movs	r3, #16
 8006116:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 8006118:	4b25      	ldr	r3, [pc, #148]	; (80061b0 <USBD_HID_Setup+0x2b4>)
 800611a:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 800611c:	8afb      	ldrh	r3, [r7, #22]
 800611e:	461a      	mov	r2, r3
 8006120:	6939      	ldr	r1, [r7, #16]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 f9e9 	bl	80074fa <USBD_CtlSendData>
 8006128:	e02a      	b.n	8006180 <USBD_HID_Setup+0x284>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	785b      	ldrb	r3, [r3, #1]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d10f      	bne.n	8006152 <USBD_HID_Setup+0x256>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	885b      	ldrh	r3, [r3, #2]
 8006136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800613a:	d10a      	bne.n	8006152 <USBD_HID_Setup+0x256>
    		len = 20;
 800613c:	2314      	movs	r3, #20
 800613e:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8006140:	4b1d      	ldr	r3, [pc, #116]	; (80061b8 <USBD_HID_Setup+0x2bc>)
 8006142:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8006144:	8afb      	ldrh	r3, [r7, #22]
 8006146:	461a      	mov	r2, r3
 8006148:	6939      	ldr	r1, [r7, #16]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f001 f9d5 	bl	80074fa <USBD_CtlSendData>
 8006150:	e016      	b.n	8006180 <USBD_HID_Setup+0x284>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d11a      	bne.n	8006190 <USBD_HID_Setup+0x294>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	885b      	ldrh	r3, [r3, #2]
 800615e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006162:	d115      	bne.n	8006190 <USBD_HID_Setup+0x294>
    		rumble_brequest_sent = 1;
 8006164:	4b15      	ldr	r3, [pc, #84]	; (80061bc <USBD_HID_Setup+0x2c0>)
 8006166:	2201      	movs	r2, #1
 8006168:	701a      	strb	r2, [r3, #0]
    		len = 6;
 800616a:	2306      	movs	r3, #6
 800616c:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 800616e:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <USBD_HID_Setup+0x2c4>)
 8006170:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8006172:	8afb      	ldrh	r3, [r7, #22]
 8006174:	461a      	mov	r2, r3
 8006176:	6939      	ldr	r1, [r7, #16]
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 f9be 	bl	80074fa <USBD_CtlSendData>
    	}
    break;
 800617e:	e007      	b.n	8006190 <USBD_HID_Setup+0x294>
 8006180:	e006      	b.n	8006190 <USBD_HID_Setup+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006182:	6839      	ldr	r1, [r7, #0]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f001 f947 	bl	8007418 <USBD_CtlError>
      ret = USBD_FAIL;
 800618a:	2303      	movs	r3, #3
 800618c:	77fb      	strb	r3, [r7, #31]
      break;
 800618e:	e000      	b.n	8006192 <USBD_HID_Setup+0x296>
    break;
 8006190:	bf00      	nop
  }

  return (uint8_t)ret;
 8006192:	7ffb      	ldrb	r3, [r7, #31]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	200002c6 	.word	0x200002c6
 80061a0:	200002d2 	.word	0x200002d2
 80061a4:	200002c8 	.word	0x200002c8
 80061a8:	200002c9 	.word	0x200002c9
 80061ac:	200002cc 	.word	0x200002cc
 80061b0:	20000084 	.word	0x20000084
 80061b4:	200002c4 	.word	0x200002c4
 80061b8:	200000a0 	.word	0x200000a0
 80061bc:	200002c7 	.word	0x200002c7
 80061c0:	200000b4 	.word	0x200000b4

080061c4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80061d2:	4b03      	ldr	r3, [pc, #12]	; (80061e0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	20000044 	.word	0x20000044

080061e4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 80061ec:	bf00      	nop
 80061ee:	4618      	mov	r0, r3
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
	...

080061fc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800620a:	4b03      	ldr	r3, [pc, #12]	; (8006218 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	20000064 	.word	0x20000064

0800621c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800622e:	2200      	movs	r2, #0
 8006230:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USBD_HID_DataOut>:
/* DataOut will only run for THPS 2 or activating rumble in XBCD on a PC */
static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
	dataout_ran++;
 800624c:	4b08      	ldr	r3, [pc, #32]	; (8006270 <USBD_HID_DataOut+0x30>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	b2da      	uxtb	r2, r3
 8006254:	4b06      	ldr	r3, [pc, #24]	; (8006270 <USBD_HID_DataOut+0x30>)
 8006256:	701a      	strb	r2, [r3, #0]
	USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, (uint8_t*) (rx_buf), HID_EPOUT_SIZE);
 8006258:	2306      	movs	r3, #6
 800625a:	4a06      	ldr	r2, [pc, #24]	; (8006274 <USBD_HID_DataOut+0x34>)
 800625c:	2102      	movs	r1, #2
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f004 fb40 	bl	800a8e4 <USBD_LL_PrepareReceive>
	return USBD_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	200002c5 	.word	0x200002c5
 8006274:	200002d4 	.word	0x200002d4

08006278 <USBD_HID_EP0_RxReady>:
  * @retval status
  */
/*This is to put the rumble data from the USB control requests into rx_buf so we can read that in main
 * This is the standard way XBOX sends rumble data, this different from a PC which would send data through USB Out Pipe */
static uint8_t USBD_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	if (rumble_flag) {
 8006280:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <USBD_HID_EP0_RxReady+0x4c>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d015      	beq.n	80062b4 <USBD_HID_EP0_RxReady+0x3c>
		rumble_flag = 0;
 8006288:	4b0e      	ldr	r3, [pc, #56]	; (80062c4 <USBD_HID_EP0_RxReady+0x4c>)
 800628a:	2200      	movs	r2, #0
 800628c:	701a      	strb	r2, [r3, #0]
		if (USBD_HID_Report_LENGTH == HID_EPOUT_SIZE) {
 800628e:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <USBD_HID_EP0_RxReady+0x50>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b06      	cmp	r3, #6
 8006294:	d10e      	bne.n	80062b4 <USBD_HID_EP0_RxReady+0x3c>
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]
 800629a:	e008      	b.n	80062ae <USBD_HID_EP0_RxReady+0x36>
				rx_buf[i] = ctl_report_buf[i];
 800629c:	7bfa      	ldrb	r2, [r7, #15]
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	490a      	ldr	r1, [pc, #40]	; (80062cc <USBD_HID_EP0_RxReady+0x54>)
 80062a2:	5c89      	ldrb	r1, [r1, r2]
 80062a4:	4a0a      	ldr	r2, [pc, #40]	; (80062d0 <USBD_HID_EP0_RxReady+0x58>)
 80062a6:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	3301      	adds	r3, #1
 80062ac:	73fb      	strb	r3, [r7, #15]
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	2b05      	cmp	r3, #5
 80062b2:	d9f3      	bls.n	800629c <USBD_HID_EP0_RxReady+0x24>
			}
		}
	}
	return (uint8_t) USBD_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	200002d2 	.word	0x200002d2
 80062c8:	200002c9 	.word	0x200002c9
 80062cc:	200002cc 	.word	0x200002cc
 80062d0:	200002d4 	.word	0x200002d4

080062d4 <USBD_HID_EP0_TxSent>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_HID_EP0_TxSent(USBD_HandleTypeDef *pdev)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
//    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
//                                                              hhid->Report_buf[1]);
//    hhid->IsReportAvailable = 0U;
//  }

  return (uint8_t)USBD_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	220a      	movs	r2, #10
 80062f8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80062fa:	4b03      	ldr	r3, [pc, #12]	; (8006308 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	20000094 	.word	0x20000094

0800630c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	e01f      	b.n	8006364 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	79fa      	ldrb	r2, [r7, #7]
 8006356:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f004 f96d 	bl	800a638 <USBD_LL_Init>
 800635e:	4603      	mov	r3, r0
 8006360:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006362:	7dfb      	ldrb	r3, [r7, #23]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006380:	2303      	movs	r3, #3
 8006382:	e016      	b.n	80063b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	f107 020e 	add.w	r2, r7, #14
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
 80063a8:	4602      	mov	r2, r0
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f004 f984 	bl	800a6d0 <USBD_LL_Start>
 80063c8:	4603      	mov	r3, r0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80063f4:	2303      	movs	r3, #3
 80063f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d009      	beq.n	8006416 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	78fa      	ldrb	r2, [r7, #3]
 800640c:	4611      	mov	r1, r2
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	4798      	blx	r3
 8006412:	4603      	mov	r3, r0
 8006414:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006432:	2b00      	cmp	r3, #0
 8006434:	d007      	beq.n	8006446 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	78fa      	ldrb	r2, [r7, #3]
 8006440:	4611      	mov	r1, r2
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	4798      	blx	r3
  }

  return USBD_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f000 ff9e 	bl	80073a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006476:	461a      	mov	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	2b02      	cmp	r3, #2
 800648a:	d01a      	beq.n	80064c2 <USBD_LL_SetupStage+0x72>
 800648c:	2b02      	cmp	r3, #2
 800648e:	d822      	bhi.n	80064d6 <USBD_LL_SetupStage+0x86>
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <USBD_LL_SetupStage+0x4a>
 8006494:	2b01      	cmp	r3, #1
 8006496:	d00a      	beq.n	80064ae <USBD_LL_SetupStage+0x5e>
 8006498:	e01d      	b.n	80064d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064a0:	4619      	mov	r1, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa62 	bl	800696c <USBD_StdDevReq>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
      break;
 80064ac:	e020      	b.n	80064f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fad4 	bl	8006a64 <USBD_StdItfReq>
 80064bc:	4603      	mov	r3, r0
 80064be:	73fb      	strb	r3, [r7, #15]
      break;
 80064c0:	e016      	b.n	80064f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fb13 	bl	8006af6 <USBD_StdEPReq>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
      break;
 80064d4:	e00c      	b.n	80064f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f004 f953 	bl	800a790 <USBD_LL_StallEP>
 80064ea:	4603      	mov	r3, r0
 80064ec:	73fb      	strb	r3, [r7, #15]
      break;
 80064ee:	bf00      	nop
  }

  return ret;
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b086      	sub	sp, #24
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	460b      	mov	r3, r1
 8006504:	607a      	str	r2, [r7, #4]
 8006506:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006508:	7afb      	ldrb	r3, [r7, #11]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d138      	bne.n	8006580 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006514:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800651c:	2b03      	cmp	r3, #3
 800651e:	d14a      	bne.n	80065b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	429a      	cmp	r2, r3
 800652a:	d913      	bls.n	8006554 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	1ad2      	subs	r2, r2, r3
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	4293      	cmp	r3, r2
 8006544:	bf28      	it	cs
 8006546:	4613      	movcs	r3, r2
 8006548:	461a      	mov	r2, r3
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f001 f81d 	bl	800758c <USBD_CtlContinueRx>
 8006552:	e030      	b.n	80065b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b03      	cmp	r3, #3
 800655e:	d10b      	bne.n	8006578 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f001 f818 	bl	80075ae <USBD_CtlSendStatus>
 800657e:	e01a      	b.n	80065b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b03      	cmp	r3, #3
 800658a:	d114      	bne.n	80065b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00e      	beq.n	80065b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	7afa      	ldrb	r2, [r7, #11]
 80065a2:	4611      	mov	r1, r2
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	4798      	blx	r3
 80065a8:	4603      	mov	r3, r0
 80065aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	e000      	b.n	80065b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	460b      	mov	r3, r1
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80065ce:	7afb      	ldrb	r3, [r7, #11]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d16b      	bne.n	80066ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3314      	adds	r3, #20
 80065d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d156      	bne.n	8006692 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d914      	bls.n	800661a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	1ad2      	subs	r2, r2, r3
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	461a      	mov	r2, r3
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 ff92 	bl	8007530 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800660c:	2300      	movs	r3, #0
 800660e:	2200      	movs	r2, #0
 8006610:	2100      	movs	r1, #0
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f004 f966 	bl	800a8e4 <USBD_LL_PrepareReceive>
 8006618:	e03b      	b.n	8006692 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	429a      	cmp	r2, r3
 8006624:	d11c      	bne.n	8006660 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800662e:	429a      	cmp	r2, r3
 8006630:	d316      	bcc.n	8006660 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800663c:	429a      	cmp	r2, r3
 800663e:	d20f      	bcs.n	8006660 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006640:	2200      	movs	r2, #0
 8006642:	2100      	movs	r1, #0
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 ff73 	bl	8007530 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006652:	2300      	movs	r3, #0
 8006654:	2200      	movs	r2, #0
 8006656:	2100      	movs	r1, #0
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f004 f943 	bl	800a8e4 <USBD_LL_PrepareReceive>
 800665e:	e018      	b.n	8006692 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b03      	cmp	r3, #3
 800666a:	d10b      	bne.n	8006684 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006684:	2180      	movs	r1, #128	; 0x80
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f004 f882 	bl	800a790 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 ffa1 	bl	80075d4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006698:	2b01      	cmp	r3, #1
 800669a:	d122      	bne.n	80066e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff fe98 	bl	80063d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066aa:	e01a      	b.n	80066e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d114      	bne.n	80066e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00e      	beq.n	80066e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	7afa      	ldrb	r2, [r7, #11]
 80066ce:	4611      	mov	r1, r2
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	4798      	blx	r3
 80066d4:	4603      	mov	r3, r0
 80066d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	e000      	b.n	80066e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800671c:	2303      	movs	r3, #3
 800671e:	e02f      	b.n	8006780 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00f      	beq.n	800674a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d009      	beq.n	800674a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6852      	ldr	r2, [r2, #4]
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	4611      	mov	r1, r2
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800674a:	2340      	movs	r3, #64	; 0x40
 800674c:	2200      	movs	r2, #0
 800674e:	2100      	movs	r1, #0
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f003 ffd8 	bl	800a706 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2240      	movs	r2, #64	; 0x40
 8006762:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006766:	2340      	movs	r3, #64	; 0x40
 8006768:	2200      	movs	r2, #0
 800676a:	2180      	movs	r1, #128	; 0x80
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f003 ffca 	bl	800a706 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2240      	movs	r2, #64	; 0x40
 800677c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2204      	movs	r2, #4
 80067c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d106      	bne.n	80067f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006816:	2303      	movs	r3, #3
 8006818:	e012      	b.n	8006840 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b03      	cmp	r3, #3
 8006824:	d10b      	bne.n	800683e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d005      	beq.n	800683e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800685e:	2303      	movs	r3, #3
 8006860:	e014      	b.n	800688c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b03      	cmp	r3, #3
 800686c:	d10d      	bne.n	800688a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	78fa      	ldrb	r2, [r7, #3]
 8006884:	4611      	mov	r1, r2
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e014      	b.n	80068d8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d10d      	bne.n	80068d6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d007      	beq.n	80068d6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	4611      	mov	r1, r2
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800690c:	2b00      	cmp	r3, #0
 800690e:	d009      	beq.n	8006924 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6852      	ldr	r2, [r2, #4]
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	4611      	mov	r1, r2
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4798      	blx	r3
  }

  return USBD_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800692e:	b480      	push	{r7}
 8006930:	b087      	sub	sp, #28
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	3301      	adds	r3, #1
 8006944:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800694c:	8a3b      	ldrh	r3, [r7, #16]
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	b21a      	sxth	r2, r3
 8006952:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006956:	4313      	orrs	r3, r2
 8006958:	b21b      	sxth	r3, r3
 800695a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800695c:	89fb      	ldrh	r3, [r7, #14]
}
 800695e:	4618      	mov	r0, r3
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
	...

0800696c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	73fb      	strb	r3, [r7, #15]

	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	4798      	blx	r3
 8006988:	4603      	mov	r3, r0
 800698a:	73fb      	strb	r3, [r7, #15]

	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006994:	2b40      	cmp	r3, #64	; 0x40
 8006996:	d005      	beq.n	80069a4 <USBD_StdDevReq+0x38>
 8006998:	2b40      	cmp	r3, #64	; 0x40
 800699a:	d854      	bhi.n	8006a46 <USBD_StdDevReq+0xda>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00b      	beq.n	80069b8 <USBD_StdDevReq+0x4c>
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	d150      	bne.n	8006a46 <USBD_StdDevReq+0xda>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	4798      	blx	r3
 80069b2:	4603      	mov	r3, r0
 80069b4:	73fb      	strb	r3, [r7, #15]
		  break;
 80069b6:	e04e      	b.n	8006a56 <USBD_StdDevReq+0xea>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	785b      	ldrb	r3, [r3, #1]
 80069bc:	2b09      	cmp	r3, #9
 80069be:	d83c      	bhi.n	8006a3a <USBD_StdDevReq+0xce>
 80069c0:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <USBD_StdDevReq+0x5c>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	08006a1d 	.word	0x08006a1d
 80069cc:	08006a31 	.word	0x08006a31
 80069d0:	08006a3b 	.word	0x08006a3b
 80069d4:	08006a27 	.word	0x08006a27
 80069d8:	08006a3b 	.word	0x08006a3b
 80069dc:	080069fb 	.word	0x080069fb
 80069e0:	080069f1 	.word	0x080069f1
 80069e4:	08006a3b 	.word	0x08006a3b
 80069e8:	08006a13 	.word	0x08006a13
 80069ec:	08006a05 	.word	0x08006a05
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f9e2 	bl	8006dbc <USBD_GetDescriptor>
			  break;
 80069f8:	e024      	b.n	8006a44 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fb47 	bl	8007090 <USBD_SetAddress>
			  break;
 8006a02:	e01f      	b.n	8006a44 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fb86 	bl	8007118 <USBD_SetConfig>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]
			  break;
 8006a10:	e018      	b.n	8006a44 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fc25 	bl	8007264 <USBD_GetConfig>
			  break;
 8006a1a:	e013      	b.n	8006a44 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fc56 	bl	80072d0 <USBD_GetStatus>
			  break;
 8006a24:	e00e      	b.n	8006a44 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fc85 	bl	8007338 <USBD_SetFeature>
			  break;
 8006a2e:	e009      	b.n	8006a44 <USBD_StdDevReq+0xd8>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fc94 	bl	8007360 <USBD_ClrFeature>
			  break;
 8006a38:	e004      	b.n	8006a44 <USBD_StdDevReq+0xd8>

			default:
			  USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fceb 	bl	8007418 <USBD_CtlError>
			  break;
 8006a42:	bf00      	nop
		  }
		  break;
 8006a44:	e007      	b.n	8006a56 <USBD_StdDevReq+0xea>

		default:
		  unknown_bmrequest = 1;
 8006a46:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <USBD_StdDevReq+0xf4>)
 8006a48:	2201      	movs	r2, #1
 8006a4a:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fce2 	bl	8007418 <USBD_CtlError>
		  break;
 8006a54:	bf00      	nop
	  }

  return ret;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	200002da 	.word	0x200002da

08006a64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a7a:	2b40      	cmp	r3, #64	; 0x40
 8006a7c:	d005      	beq.n	8006a8a <USBD_StdItfReq+0x26>
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d82f      	bhi.n	8006ae2 <USBD_StdItfReq+0x7e>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <USBD_StdItfReq+0x26>
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	d12b      	bne.n	8006ae2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	3b01      	subs	r3, #1
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d81d      	bhi.n	8006ad4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	889b      	ldrh	r3, [r3, #4]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d813      	bhi.n	8006aca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	88db      	ldrh	r3, [r3, #6]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d110      	bne.n	8006ade <USBD_StdItfReq+0x7a>
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10d      	bne.n	8006ade <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fd73 	bl	80075ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ac8:	e009      	b.n	8006ade <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fca3 	bl	8007418 <USBD_CtlError>
          break;
 8006ad2:	e004      	b.n	8006ade <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fc9e 	bl	8007418 <USBD_CtlError>
          break;
 8006adc:	e000      	b.n	8006ae0 <USBD_StdItfReq+0x7c>
          break;
 8006ade:	bf00      	nop
      }
      break;
 8006ae0:	e004      	b.n	8006aec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fc97 	bl	8007418 <USBD_CtlError>
      break;
 8006aea:	bf00      	nop
  }

  return ret;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	889b      	ldrh	r3, [r3, #4]
 8006b08:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b12:	2b40      	cmp	r3, #64	; 0x40
 8006b14:	d007      	beq.n	8006b26 <USBD_StdEPReq+0x30>
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	f200 8145 	bhi.w	8006da6 <USBD_StdEPReq+0x2b0>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00c      	beq.n	8006b3a <USBD_StdEPReq+0x44>
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	f040 8140 	bne.w	8006da6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]
      break;
 8006b38:	e13a      	b.n	8006db0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	785b      	ldrb	r3, [r3, #1]
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d007      	beq.n	8006b52 <USBD_StdEPReq+0x5c>
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	f300 8129 	bgt.w	8006d9a <USBD_StdEPReq+0x2a4>
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d07f      	beq.n	8006c4c <USBD_StdEPReq+0x156>
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d03c      	beq.n	8006bca <USBD_StdEPReq+0xd4>
 8006b50:	e123      	b.n	8006d9a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d002      	beq.n	8006b64 <USBD_StdEPReq+0x6e>
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d016      	beq.n	8006b90 <USBD_StdEPReq+0x9a>
 8006b62:	e02c      	b.n	8006bbe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00d      	beq.n	8006b86 <USBD_StdEPReq+0x90>
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b80      	cmp	r3, #128	; 0x80
 8006b6e:	d00a      	beq.n	8006b86 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f003 fe0b 	bl	800a790 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b7a:	2180      	movs	r1, #128	; 0x80
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f003 fe07 	bl	800a790 <USBD_LL_StallEP>
 8006b82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b84:	e020      	b.n	8006bc8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fc45 	bl	8007418 <USBD_CtlError>
              break;
 8006b8e:	e01b      	b.n	8006bc8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	885b      	ldrh	r3, [r3, #2]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10e      	bne.n	8006bb6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b98:	7bbb      	ldrb	r3, [r7, #14]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <USBD_StdEPReq+0xc0>
 8006b9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ba0:	2b80      	cmp	r3, #128	; 0x80
 8006ba2:	d008      	beq.n	8006bb6 <USBD_StdEPReq+0xc0>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	88db      	ldrh	r3, [r3, #6]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f003 fded 	bl	800a790 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fcf9 	bl	80075ae <USBD_CtlSendStatus>

              break;
 8006bbc:	e004      	b.n	8006bc8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fc29 	bl	8007418 <USBD_CtlError>
              break;
 8006bc6:	bf00      	nop
          }
          break;
 8006bc8:	e0ec      	b.n	8006da4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d002      	beq.n	8006bdc <USBD_StdEPReq+0xe6>
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d016      	beq.n	8006c08 <USBD_StdEPReq+0x112>
 8006bda:	e030      	b.n	8006c3e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00d      	beq.n	8006bfe <USBD_StdEPReq+0x108>
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
 8006be4:	2b80      	cmp	r3, #128	; 0x80
 8006be6:	d00a      	beq.n	8006bfe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f003 fdcf 	bl	800a790 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bf2:	2180      	movs	r1, #128	; 0x80
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f003 fdcb 	bl	800a790 <USBD_LL_StallEP>
 8006bfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bfc:	e025      	b.n	8006c4a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fc09 	bl	8007418 <USBD_CtlError>
              break;
 8006c06:	e020      	b.n	8006c4a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	885b      	ldrh	r3, [r3, #2]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d11b      	bne.n	8006c48 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d004      	beq.n	8006c24 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f003 fdd5 	bl	800a7ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fcc2 	bl	80075ae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	4798      	blx	r3
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006c3c:	e004      	b.n	8006c48 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fbe9 	bl	8007418 <USBD_CtlError>
              break;
 8006c46:	e000      	b.n	8006c4a <USBD_StdEPReq+0x154>
              break;
 8006c48:	bf00      	nop
          }
          break;
 8006c4a:	e0ab      	b.n	8006da4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d002      	beq.n	8006c5e <USBD_StdEPReq+0x168>
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d032      	beq.n	8006cc2 <USBD_StdEPReq+0x1cc>
 8006c5c:	e097      	b.n	8006d8e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d007      	beq.n	8006c74 <USBD_StdEPReq+0x17e>
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
 8006c66:	2b80      	cmp	r3, #128	; 0x80
 8006c68:	d004      	beq.n	8006c74 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fbd3 	bl	8007418 <USBD_CtlError>
                break;
 8006c72:	e091      	b.n	8006d98 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	da0b      	bge.n	8006c94 <USBD_StdEPReq+0x19e>
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	3310      	adds	r3, #16
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	4413      	add	r3, r2
 8006c90:	3304      	adds	r3, #4
 8006c92:	e00b      	b.n	8006cac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4413      	add	r3, r2
 8006caa:	3304      	adds	r3, #4
 8006cac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fc1d 	bl	80074fa <USBD_CtlSendData>
              break;
 8006cc0:	e06a      	b.n	8006d98 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	da11      	bge.n	8006cee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	f003 020f 	and.w	r2, r3, #15
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	3324      	adds	r3, #36	; 0x24
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d117      	bne.n	8006d14 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fb96 	bl	8007418 <USBD_CtlError>
                  break;
 8006cec:	e054      	b.n	8006d98 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	f003 020f 	and.w	r2, r3, #15
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d104      	bne.n	8006d14 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fb83 	bl	8007418 <USBD_CtlError>
                  break;
 8006d12:	e041      	b.n	8006d98 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	da0b      	bge.n	8006d34 <USBD_StdEPReq+0x23e>
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d22:	4613      	mov	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	3310      	adds	r3, #16
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	4413      	add	r3, r2
 8006d30:	3304      	adds	r3, #4
 8006d32:	e00b      	b.n	8006d4c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	4413      	add	r3, r2
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <USBD_StdEPReq+0x264>
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	2b80      	cmp	r3, #128	; 0x80
 8006d58:	d103      	bne.n	8006d62 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	e00e      	b.n	8006d80 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f003 fd50 	bl	800a80c <USBD_LL_IsStallEP>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2201      	movs	r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	e002      	b.n	8006d80 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2202      	movs	r2, #2
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fbb7 	bl	80074fa <USBD_CtlSendData>
              break;
 8006d8c:	e004      	b.n	8006d98 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fb41 	bl	8007418 <USBD_CtlError>
              break;
 8006d96:	bf00      	nop
          }
          break;
 8006d98:	e004      	b.n	8006da4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fb3b 	bl	8007418 <USBD_CtlError>
          break;
 8006da2:	bf00      	nop
      }
      break;
 8006da4:	e004      	b.n	8006db0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fb35 	bl	8007418 <USBD_CtlError>
      break;
 8006dae:	bf00      	nop
  }

  return ret;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	885b      	ldrh	r3, [r3, #2]
 8006dd6:	0a1b      	lsrs	r3, r3, #8
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	2b06      	cmp	r3, #6
 8006dde:	f200 8128 	bhi.w	8007032 <USBD_GetDescriptor+0x276>
 8006de2:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <USBD_GetDescriptor+0x2c>)
 8006de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de8:	08006e05 	.word	0x08006e05
 8006dec:	08006e1d 	.word	0x08006e1d
 8006df0:	08006e5d 	.word	0x08006e5d
 8006df4:	08007033 	.word	0x08007033
 8006df8:	08007033 	.word	0x08007033
 8006dfc:	08006fd3 	.word	0x08006fd3
 8006e00:	08006fff 	.word	0x08006fff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	7c12      	ldrb	r2, [r2, #16]
 8006e10:	f107 0108 	add.w	r1, r7, #8
 8006e14:	4610      	mov	r0, r2
 8006e16:	4798      	blx	r3
 8006e18:	60f8      	str	r0, [r7, #12]
      break;
 8006e1a:	e112      	b.n	8007042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	7c1b      	ldrb	r3, [r3, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10d      	bne.n	8006e40 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2c:	f107 0208 	add.w	r2, r7, #8
 8006e30:	4610      	mov	r0, r2
 8006e32:	4798      	blx	r3
 8006e34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e3e:	e100      	b.n	8007042 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	f107 0208 	add.w	r2, r7, #8
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4798      	blx	r3
 8006e50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3301      	adds	r3, #1
 8006e56:	2202      	movs	r2, #2
 8006e58:	701a      	strb	r2, [r3, #0]
      break;
 8006e5a:	e0f2      	b.n	8007042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	885b      	ldrh	r3, [r3, #2]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b05      	cmp	r3, #5
 8006e64:	f200 80ac 	bhi.w	8006fc0 <USBD_GetDescriptor+0x204>
 8006e68:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <USBD_GetDescriptor+0xb4>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006e89 	.word	0x08006e89
 8006e74:	08006ebd 	.word	0x08006ebd
 8006e78:	08006ef1 	.word	0x08006ef1
 8006e7c:	08006f25 	.word	0x08006f25
 8006e80:	08006f59 	.word	0x08006f59
 8006e84:	08006f8d 	.word	0x08006f8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00b      	beq.n	8006eac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	7c12      	ldrb	r2, [r2, #16]
 8006ea0:	f107 0108 	add.w	r1, r7, #8
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4798      	blx	r3
 8006ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eaa:	e091      	b.n	8006fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fab2 	bl	8007418 <USBD_CtlError>
            err++;
 8006eb4:	7afb      	ldrb	r3, [r7, #11]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eba:	e089      	b.n	8006fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	7c12      	ldrb	r2, [r2, #16]
 8006ed4:	f107 0108 	add.w	r1, r7, #8
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4798      	blx	r3
 8006edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ede:	e077      	b.n	8006fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa98 	bl	8007418 <USBD_CtlError>
            err++;
 8006ee8:	7afb      	ldrb	r3, [r7, #11]
 8006eea:	3301      	adds	r3, #1
 8006eec:	72fb      	strb	r3, [r7, #11]
          break;
 8006eee:	e06f      	b.n	8006fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	7c12      	ldrb	r2, [r2, #16]
 8006f08:	f107 0108 	add.w	r1, r7, #8
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4798      	blx	r3
 8006f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f12:	e05d      	b.n	8006fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fa7e 	bl	8007418 <USBD_CtlError>
            err++;
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	72fb      	strb	r3, [r7, #11]
          break;
 8006f22:	e055      	b.n	8006fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00b      	beq.n	8006f48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	7c12      	ldrb	r2, [r2, #16]
 8006f3c:	f107 0108 	add.w	r1, r7, #8
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
 8006f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f46:	e043      	b.n	8006fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa64 	bl	8007418 <USBD_CtlError>
            err++;
 8006f50:	7afb      	ldrb	r3, [r7, #11]
 8006f52:	3301      	adds	r3, #1
 8006f54:	72fb      	strb	r3, [r7, #11]
          break;
 8006f56:	e03b      	b.n	8006fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00b      	beq.n	8006f7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	7c12      	ldrb	r2, [r2, #16]
 8006f70:	f107 0108 	add.w	r1, r7, #8
 8006f74:	4610      	mov	r0, r2
 8006f76:	4798      	blx	r3
 8006f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f7a:	e029      	b.n	8006fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa4a 	bl	8007418 <USBD_CtlError>
            err++;
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	3301      	adds	r3, #1
 8006f88:	72fb      	strb	r3, [r7, #11]
          break;
 8006f8a:	e021      	b.n	8006fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00b      	beq.n	8006fb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	7c12      	ldrb	r2, [r2, #16]
 8006fa4:	f107 0108 	add.w	r1, r7, #8
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4798      	blx	r3
 8006fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fae:	e00f      	b.n	8006fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fa30 	bl	8007418 <USBD_CtlError>
            err++;
 8006fb8:	7afb      	ldrb	r3, [r7, #11]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8006fbe:	e007      	b.n	8006fd0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fa28 	bl	8007418 <USBD_CtlError>
          err++;
 8006fc8:	7afb      	ldrb	r3, [r7, #11]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006fce:	bf00      	nop
      }
      break;
 8006fd0:	e037      	b.n	8007042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	7c1b      	ldrb	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe2:	f107 0208 	add.w	r2, r7, #8
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	4798      	blx	r3
 8006fea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fec:	e029      	b.n	8007042 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fa11 	bl	8007418 <USBD_CtlError>
        err++;
 8006ff6:	7afb      	ldrb	r3, [r7, #11]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	72fb      	strb	r3, [r7, #11]
      break;
 8006ffc:	e021      	b.n	8007042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	7c1b      	ldrb	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10d      	bne.n	8007022 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	f107 0208 	add.w	r2, r7, #8
 8007012:	4610      	mov	r0, r2
 8007014:	4798      	blx	r3
 8007016:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3301      	adds	r3, #1
 800701c:	2207      	movs	r2, #7
 800701e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007020:	e00f      	b.n	8007042 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f9f7 	bl	8007418 <USBD_CtlError>
        err++;
 800702a:	7afb      	ldrb	r3, [r7, #11]
 800702c:	3301      	adds	r3, #1
 800702e:	72fb      	strb	r3, [r7, #11]
      break;
 8007030:	e007      	b.n	8007042 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f9ef 	bl	8007418 <USBD_CtlError>
      err++;
 800703a:	7afb      	ldrb	r3, [r7, #11]
 800703c:	3301      	adds	r3, #1
 800703e:	72fb      	strb	r3, [r7, #11]
      break;
 8007040:	bf00      	nop
  }

  if (err != 0U)
 8007042:	7afb      	ldrb	r3, [r7, #11]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d11e      	bne.n	8007086 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	88db      	ldrh	r3, [r3, #6]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d016      	beq.n	800707e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007050:	893b      	ldrh	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00e      	beq.n	8007074 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	88da      	ldrh	r2, [r3, #6]
 800705a:	893b      	ldrh	r3, [r7, #8]
 800705c:	4293      	cmp	r3, r2
 800705e:	bf28      	it	cs
 8007060:	4613      	movcs	r3, r2
 8007062:	b29b      	uxth	r3, r3
 8007064:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007066:	893b      	ldrh	r3, [r7, #8]
 8007068:	461a      	mov	r2, r3
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fa44 	bl	80074fa <USBD_CtlSendData>
 8007072:	e009      	b.n	8007088 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f9ce 	bl	8007418 <USBD_CtlError>
 800707c:	e004      	b.n	8007088 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fa95 	bl	80075ae <USBD_CtlSendStatus>
 8007084:	e000      	b.n	8007088 <USBD_GetDescriptor+0x2cc>
    return;
 8007086:	bf00      	nop
  }
}
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop

08007090 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	889b      	ldrh	r3, [r3, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d131      	bne.n	8007106 <USBD_SetAddress+0x76>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	88db      	ldrh	r3, [r3, #6]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d12d      	bne.n	8007106 <USBD_SetAddress+0x76>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	885b      	ldrh	r3, [r3, #2]
 80070ae:	2b7f      	cmp	r3, #127	; 0x7f
 80070b0:	d829      	bhi.n	8007106 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	885b      	ldrh	r3, [r3, #2]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d104      	bne.n	80070d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f9a3 	bl	8007418 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d2:	e01d      	b.n	8007110 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	7bfa      	ldrb	r2, [r7, #15]
 80070d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f003 fbbf 	bl	800a864 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa61 	bl	80075ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d004      	beq.n	80070fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2202      	movs	r2, #2
 80070f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fa:	e009      	b.n	8007110 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007104:	e004      	b.n	8007110 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f985 	bl	8007418 <USBD_CtlError>
  }
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	885b      	ldrh	r3, [r3, #2]
 800712a:	b2da      	uxtb	r2, r3
 800712c:	4b4c      	ldr	r3, [pc, #304]	; (8007260 <USBD_SetConfig+0x148>)
 800712e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007130:	4b4b      	ldr	r3, [pc, #300]	; (8007260 <USBD_SetConfig+0x148>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d905      	bls.n	8007144 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f96c 	bl	8007418 <USBD_CtlError>
    return USBD_FAIL;
 8007140:	2303      	movs	r3, #3
 8007142:	e088      	b.n	8007256 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d002      	beq.n	8007156 <USBD_SetConfig+0x3e>
 8007150:	2b03      	cmp	r3, #3
 8007152:	d025      	beq.n	80071a0 <USBD_SetConfig+0x88>
 8007154:	e071      	b.n	800723a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007156:	4b42      	ldr	r3, [pc, #264]	; (8007260 <USBD_SetConfig+0x148>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d01c      	beq.n	8007198 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800715e:	4b40      	ldr	r3, [pc, #256]	; (8007260 <USBD_SetConfig+0x148>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	461a      	mov	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007168:	4b3d      	ldr	r3, [pc, #244]	; (8007260 <USBD_SetConfig+0x148>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff f93a 	bl	80063e8 <USBD_SetClassConfig>
 8007174:	4603      	mov	r3, r0
 8007176:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d004      	beq.n	8007188 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f949 	bl	8007418 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007186:	e065      	b.n	8007254 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fa10 	bl	80075ae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2203      	movs	r2, #3
 8007192:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007196:	e05d      	b.n	8007254 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fa08 	bl	80075ae <USBD_CtlSendStatus>
      break;
 800719e:	e059      	b.n	8007254 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071a0:	4b2f      	ldr	r3, [pc, #188]	; (8007260 <USBD_SetConfig+0x148>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d112      	bne.n	80071ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80071b0:	4b2b      	ldr	r3, [pc, #172]	; (8007260 <USBD_SetConfig+0x148>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071ba:	4b29      	ldr	r3, [pc, #164]	; (8007260 <USBD_SetConfig+0x148>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff f92d 	bl	8006420 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f9f1 	bl	80075ae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071cc:	e042      	b.n	8007254 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80071ce:	4b24      	ldr	r3, [pc, #144]	; (8007260 <USBD_SetConfig+0x148>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d02a      	beq.n	8007232 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff f91b 	bl	8006420 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80071ea:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <USBD_SetConfig+0x148>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071f4:	4b1a      	ldr	r3, [pc, #104]	; (8007260 <USBD_SetConfig+0x148>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff f8f4 	bl	80063e8 <USBD_SetClassConfig>
 8007200:	4603      	mov	r3, r0
 8007202:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007204:	7bfb      	ldrb	r3, [r7, #15]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00f      	beq.n	800722a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f903 	bl	8007418 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff f900 	bl	8006420 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007228:	e014      	b.n	8007254 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f9bf 	bl	80075ae <USBD_CtlSendStatus>
      break;
 8007230:	e010      	b.n	8007254 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f9bb 	bl	80075ae <USBD_CtlSendStatus>
      break;
 8007238:	e00c      	b.n	8007254 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f8eb 	bl	8007418 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007242:	4b07      	ldr	r3, [pc, #28]	; (8007260 <USBD_SetConfig+0x148>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff f8e9 	bl	8006420 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800724e:	2303      	movs	r3, #3
 8007250:	73fb      	strb	r3, [r7, #15]
      break;
 8007252:	bf00      	nop
  }

  return ret;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	200002db 	.word	0x200002db

08007264 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	88db      	ldrh	r3, [r3, #6]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d004      	beq.n	8007280 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f8cd 	bl	8007418 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800727e:	e023      	b.n	80072c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	dc02      	bgt.n	8007292 <USBD_GetConfig+0x2e>
 800728c:	2b00      	cmp	r3, #0
 800728e:	dc03      	bgt.n	8007298 <USBD_GetConfig+0x34>
 8007290:	e015      	b.n	80072be <USBD_GetConfig+0x5a>
 8007292:	2b03      	cmp	r3, #3
 8007294:	d00b      	beq.n	80072ae <USBD_GetConfig+0x4a>
 8007296:	e012      	b.n	80072be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3308      	adds	r3, #8
 80072a2:	2201      	movs	r2, #1
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f927 	bl	80074fa <USBD_CtlSendData>
        break;
 80072ac:	e00c      	b.n	80072c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3304      	adds	r3, #4
 80072b2:	2201      	movs	r2, #1
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f91f 	bl	80074fa <USBD_CtlSendData>
        break;
 80072bc:	e004      	b.n	80072c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f8a9 	bl	8007418 <USBD_CtlError>
        break;
 80072c6:	bf00      	nop
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d81e      	bhi.n	8007326 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	88db      	ldrh	r3, [r3, #6]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d004      	beq.n	80072fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f890 	bl	8007418 <USBD_CtlError>
        break;
 80072f8:	e01a      	b.n	8007330 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f043 0202 	orr.w	r2, r3, #2
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	330c      	adds	r3, #12
 800731a:	2202      	movs	r2, #2
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f8eb 	bl	80074fa <USBD_CtlSendData>
      break;
 8007324:	e004      	b.n	8007330 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f875 	bl	8007418 <USBD_CtlError>
      break;
 800732e:	bf00      	nop
  }
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	885b      	ldrh	r3, [r3, #2]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d106      	bne.n	8007358 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f92b 	bl	80075ae <USBD_CtlSendStatus>
  }
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007370:	b2db      	uxtb	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	2b02      	cmp	r3, #2
 8007376:	d80b      	bhi.n	8007390 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	885b      	ldrh	r3, [r3, #2]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d10c      	bne.n	800739a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f910 	bl	80075ae <USBD_CtlSendStatus>
      }
      break;
 800738e:	e004      	b.n	800739a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f840 	bl	8007418 <USBD_CtlError>
      break;
 8007398:	e000      	b.n	800739c <USBD_ClrFeature+0x3c>
      break;
 800739a:	bf00      	nop
  }
}
 800739c:	bf00      	nop
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	781a      	ldrb	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3301      	adds	r3, #1
 80073be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	781a      	ldrb	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3301      	adds	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff faad 	bl	800692e <SWAPBYTE>
 80073d4:	4603      	mov	r3, r0
 80073d6:	461a      	mov	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3301      	adds	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3301      	adds	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f7ff faa0 	bl	800692e <SWAPBYTE>
 80073ee:	4603      	mov	r3, r0
 80073f0:	461a      	mov	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3301      	adds	r3, #1
 80073fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3301      	adds	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7ff fa93 	bl	800692e <SWAPBYTE>
 8007408:	4603      	mov	r3, r0
 800740a:	461a      	mov	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	80da      	strh	r2, [r3, #6]
}
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007422:	2180      	movs	r1, #128	; 0x80
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f003 f9b3 	bl	800a790 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800742a:	2100      	movs	r1, #0
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f003 f9af 	bl	800a790 <USBD_LL_StallEP>
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b086      	sub	sp, #24
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d036      	beq.n	80074be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007454:	6938      	ldr	r0, [r7, #16]
 8007456:	f000 f836 	bl	80074c6 <USBD_GetLen>
 800745a:	4603      	mov	r3, r0
 800745c:	3301      	adds	r3, #1
 800745e:	b29b      	uxth	r3, r3
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	b29a      	uxth	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	4413      	add	r3, r2
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	7812      	ldrb	r2, [r2, #0]
 8007472:	701a      	strb	r2, [r3, #0]
  idx++;
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	3301      	adds	r3, #1
 8007478:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800747a:	7dfb      	ldrb	r3, [r7, #23]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	4413      	add	r3, r2
 8007480:	2203      	movs	r2, #3
 8007482:	701a      	strb	r2, [r3, #0]
  idx++;
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	3301      	adds	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800748a:	e013      	b.n	80074b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800748c:	7dfb      	ldrb	r3, [r7, #23]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	4413      	add	r3, r2
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	7812      	ldrb	r2, [r2, #0]
 8007496:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	3301      	adds	r3, #1
 800749c:	613b      	str	r3, [r7, #16]
    idx++;
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	3301      	adds	r3, #1
 80074a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	4413      	add	r3, r2
 80074aa:	2200      	movs	r2, #0
 80074ac:	701a      	strb	r2, [r3, #0]
    idx++;
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
 80074b0:	3301      	adds	r3, #1
 80074b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e7      	bne.n	800748c <USBD_GetString+0x52>
 80074bc:	e000      	b.n	80074c0 <USBD_GetString+0x86>
    return;
 80074be:	bf00      	nop
  }
}
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b085      	sub	sp, #20
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074d6:	e005      	b.n	80074e4 <USBD_GetLen+0x1e>
  {
    len++;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	3301      	adds	r3, #1
 80074dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	3301      	adds	r3, #1
 80074e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f5      	bne.n	80074d8 <USBD_GetLen+0x12>
  }

  return len;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2202      	movs	r2, #2
 800750a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	2100      	movs	r1, #0
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f003 f9be 	bl	800a8a2 <USBD_LL_Transmit>

  return USBD_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	2100      	movs	r1, #0
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f003 f9ad 	bl	800a8a2 <USBD_LL_Transmit>

  return USBD_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2203      	movs	r2, #3
 8007562:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	2100      	movs	r1, #0
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f003 f9b1 	bl	800a8e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	2100      	movs	r1, #0
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f003 f9a0 	bl	800a8e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b082      	sub	sp, #8
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2204      	movs	r2, #4
 80075ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075be:	2300      	movs	r3, #0
 80075c0:	2200      	movs	r2, #0
 80075c2:	2100      	movs	r1, #0
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f003 f96c 	bl	800a8a2 <USBD_LL_Transmit>

  return USBD_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2205      	movs	r2, #5
 80075e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075e4:	2300      	movs	r3, #0
 80075e6:	2200      	movs	r2, #0
 80075e8:	2100      	movs	r1, #0
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f003 f97a 	bl	800a8e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <__NVIC_SetPriority>:
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	6039      	str	r1, [r7, #0]
 8007606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800760c:	2b00      	cmp	r3, #0
 800760e:	db0a      	blt.n	8007626 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	b2da      	uxtb	r2, r3
 8007614:	490c      	ldr	r1, [pc, #48]	; (8007648 <__NVIC_SetPriority+0x4c>)
 8007616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800761a:	0112      	lsls	r2, r2, #4
 800761c:	b2d2      	uxtb	r2, r2
 800761e:	440b      	add	r3, r1
 8007620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007624:	e00a      	b.n	800763c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	b2da      	uxtb	r2, r3
 800762a:	4908      	ldr	r1, [pc, #32]	; (800764c <__NVIC_SetPriority+0x50>)
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	3b04      	subs	r3, #4
 8007634:	0112      	lsls	r2, r2, #4
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	440b      	add	r3, r1
 800763a:	761a      	strb	r2, [r3, #24]
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	e000e100 	.word	0xe000e100
 800764c:	e000ed00 	.word	0xe000ed00

08007650 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007654:	4b05      	ldr	r3, [pc, #20]	; (800766c <SysTick_Handler+0x1c>)
 8007656:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007658:	f001 fcfe 	bl	8009058 <xTaskGetSchedulerState>
 800765c:	4603      	mov	r3, r0
 800765e:	2b01      	cmp	r3, #1
 8007660:	d001      	beq.n	8007666 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007662:	f002 fae9 	bl	8009c38 <xPortSysTickHandler>
  }
}
 8007666:	bf00      	nop
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	e000e010 	.word	0xe000e010

08007670 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007674:	2100      	movs	r1, #0
 8007676:	f06f 0004 	mvn.w	r0, #4
 800767a:	f7ff ffbf 	bl	80075fc <__NVIC_SetPriority>
#endif
}
 800767e:	bf00      	nop
 8007680:	bd80      	pop	{r7, pc}
	...

08007684 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800768a:	f3ef 8305 	mrs	r3, IPSR
 800768e:	603b      	str	r3, [r7, #0]
  return(result);
 8007690:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007696:	f06f 0305 	mvn.w	r3, #5
 800769a:	607b      	str	r3, [r7, #4]
 800769c:	e00c      	b.n	80076b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800769e:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <osKernelInitialize+0x44>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d105      	bne.n	80076b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076a6:	4b08      	ldr	r3, [pc, #32]	; (80076c8 <osKernelInitialize+0x44>)
 80076a8:	2201      	movs	r2, #1
 80076aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	607b      	str	r3, [r7, #4]
 80076b0:	e002      	b.n	80076b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076b2:	f04f 33ff 	mov.w	r3, #4294967295
 80076b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076b8:	687b      	ldr	r3, [r7, #4]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	200002dc 	.word	0x200002dc

080076cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076d2:	f3ef 8305 	mrs	r3, IPSR
 80076d6:	603b      	str	r3, [r7, #0]
  return(result);
 80076d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80076de:	f06f 0305 	mvn.w	r3, #5
 80076e2:	607b      	str	r3, [r7, #4]
 80076e4:	e010      	b.n	8007708 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80076e6:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <osKernelStart+0x48>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d109      	bne.n	8007702 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80076ee:	f7ff ffbf 	bl	8007670 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80076f2:	4b08      	ldr	r3, [pc, #32]	; (8007714 <osKernelStart+0x48>)
 80076f4:	2202      	movs	r2, #2
 80076f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80076f8:	f001 f866 	bl	80087c8 <vTaskStartScheduler>
      stat = osOK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	607b      	str	r3, [r7, #4]
 8007700:	e002      	b.n	8007708 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007702:	f04f 33ff 	mov.w	r3, #4294967295
 8007706:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007708:	687b      	ldr	r3, [r7, #4]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	200002dc 	.word	0x200002dc

08007718 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007718:	b580      	push	{r7, lr}
 800771a:	b08e      	sub	sp, #56	; 0x38
 800771c:	af04      	add	r7, sp, #16
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007724:	2300      	movs	r3, #0
 8007726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007728:	f3ef 8305 	mrs	r3, IPSR
 800772c:	617b      	str	r3, [r7, #20]
  return(result);
 800772e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007730:	2b00      	cmp	r3, #0
 8007732:	d17e      	bne.n	8007832 <osThreadNew+0x11a>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d07b      	beq.n	8007832 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800773a:	2380      	movs	r3, #128	; 0x80
 800773c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800773e:	2318      	movs	r3, #24
 8007740:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007746:	f04f 33ff 	mov.w	r3, #4294967295
 800774a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d045      	beq.n	80077de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <osThreadNew+0x48>
        name = attr->name;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d008      	beq.n	8007786 <osThreadNew+0x6e>
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	2b38      	cmp	r3, #56	; 0x38
 8007778:	d805      	bhi.n	8007786 <osThreadNew+0x6e>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <osThreadNew+0x72>
        return (NULL);
 8007786:	2300      	movs	r3, #0
 8007788:	e054      	b.n	8007834 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	089b      	lsrs	r3, r3, #2
 8007798:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00e      	beq.n	80077c0 <osThreadNew+0xa8>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	2b5b      	cmp	r3, #91	; 0x5b
 80077a8:	d90a      	bls.n	80077c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d006      	beq.n	80077c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <osThreadNew+0xa8>
        mem = 1;
 80077ba:	2301      	movs	r3, #1
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	e010      	b.n	80077e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10c      	bne.n	80077e2 <osThreadNew+0xca>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d108      	bne.n	80077e2 <osThreadNew+0xca>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d104      	bne.n	80077e2 <osThreadNew+0xca>
          mem = 0;
 80077d8:	2300      	movs	r3, #0
 80077da:	61bb      	str	r3, [r7, #24]
 80077dc:	e001      	b.n	80077e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d110      	bne.n	800780a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077f0:	9202      	str	r2, [sp, #8]
 80077f2:	9301      	str	r3, [sp, #4]
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	6a3a      	ldr	r2, [r7, #32]
 80077fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 fe0c 	bl	800841c <xTaskCreateStatic>
 8007804:	4603      	mov	r3, r0
 8007806:	613b      	str	r3, [r7, #16]
 8007808:	e013      	b.n	8007832 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d110      	bne.n	8007832 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	b29a      	uxth	r2, r3
 8007814:	f107 0310 	add.w	r3, r7, #16
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fe57 	bl	80084d6 <xTaskCreate>
 8007828:	4603      	mov	r3, r0
 800782a:	2b01      	cmp	r3, #1
 800782c:	d001      	beq.n	8007832 <osThreadNew+0x11a>
            hTask = NULL;
 800782e:	2300      	movs	r3, #0
 8007830:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007832:	693b      	ldr	r3, [r7, #16]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3728      	adds	r7, #40	; 0x28
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007844:	f3ef 8305 	mrs	r3, IPSR
 8007848:	60bb      	str	r3, [r7, #8]
  return(result);
 800784a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <osDelay+0x1c>
    stat = osErrorISR;
 8007850:	f06f 0305 	mvn.w	r3, #5
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	e007      	b.n	8007868 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 ff7c 	bl	8008760 <vTaskDelay>
    }
  }

  return (stat);
 8007868:	68fb      	ldr	r3, [r7, #12]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4a07      	ldr	r2, [pc, #28]	; (80078a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	4a06      	ldr	r2, [pc, #24]	; (80078a4 <vApplicationGetIdleTaskMemory+0x30>)
 800788a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2280      	movs	r2, #128	; 0x80
 8007890:	601a      	str	r2, [r3, #0]
}
 8007892:	bf00      	nop
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	200002e0 	.word	0x200002e0
 80078a4:	2000033c 	.word	0x2000033c

080078a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4a07      	ldr	r2, [pc, #28]	; (80078d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80078b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	4a06      	ldr	r2, [pc, #24]	; (80078d8 <vApplicationGetTimerTaskMemory+0x30>)
 80078be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078c6:	601a      	str	r2, [r3, #0]
}
 80078c8:	bf00      	nop
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	2000053c 	.word	0x2000053c
 80078d8:	20000598 	.word	0x20000598

080078dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f103 0208 	add.w	r2, r3, #8
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f04f 32ff 	mov.w	r2, #4294967295
 80078f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f103 0208 	add.w	r2, r3, #8
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f103 0208 	add.w	r2, r3, #8
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	601a      	str	r2, [r3, #0]
}
 8007972:	bf00      	nop
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800797e:	b480      	push	{r7}
 8007980:	b085      	sub	sp, #20
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d103      	bne.n	800799e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	e00c      	b.n	80079b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3308      	adds	r3, #8
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	e002      	b.n	80079ac <vListInsert+0x2e>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d2f6      	bcs.n	80079a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	601a      	str	r2, [r3, #0]
}
 80079e4:	bf00      	nop
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	6892      	ldr	r2, [r2, #8]
 8007a06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	6852      	ldr	r2, [r2, #4]
 8007a10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d103      	bne.n	8007a24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	1e5a      	subs	r2, r3, #1
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a6a:	bf00      	nop
 8007a6c:	e7fe      	b.n	8007a6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a6e:	f002 f851 	bl	8009b14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	68f9      	ldr	r1, [r7, #12]
 8007a7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a7e:	fb01 f303 	mul.w	r3, r1, r3
 8007a82:	441a      	add	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	68f9      	ldr	r1, [r7, #12]
 8007aa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007aa4:	fb01 f303 	mul.w	r3, r1, r3
 8007aa8:	441a      	add	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	22ff      	movs	r2, #255	; 0xff
 8007ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	22ff      	movs	r2, #255	; 0xff
 8007aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d114      	bne.n	8007aee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01a      	beq.n	8007b02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3310      	adds	r3, #16
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 f903 	bl	8008cdc <xTaskRemoveFromEventList>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d012      	beq.n	8007b02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007adc:	4b0c      	ldr	r3, [pc, #48]	; (8007b10 <xQueueGenericReset+0xcc>)
 8007ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	e009      	b.n	8007b02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3310      	adds	r3, #16
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7ff fef2 	bl	80078dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3324      	adds	r3, #36	; 0x24
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff feed 	bl	80078dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b02:	f002 f837 	bl	8009b74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b06:	2301      	movs	r3, #1
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	e000ed04 	.word	0xe000ed04

08007b14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08e      	sub	sp, #56	; 0x38
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10a      	bne.n	8007b3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b3a:	bf00      	nop
 8007b3c:	e7fe      	b.n	8007b3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <xQueueGenericCreateStatic+0x52>
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <xQueueGenericCreateStatic+0x56>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <xQueueGenericCreateStatic+0x58>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	623b      	str	r3, [r7, #32]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d102      	bne.n	8007b92 <xQueueGenericCreateStatic+0x7e>
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <xQueueGenericCreateStatic+0x82>
 8007b92:	2301      	movs	r3, #1
 8007b94:	e000      	b.n	8007b98 <xQueueGenericCreateStatic+0x84>
 8007b96:	2300      	movs	r3, #0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10a      	bne.n	8007bb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	61fb      	str	r3, [r7, #28]
}
 8007bae:	bf00      	nop
 8007bb0:	e7fe      	b.n	8007bb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bb2:	2350      	movs	r3, #80	; 0x50
 8007bb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b50      	cmp	r3, #80	; 0x50
 8007bba:	d00a      	beq.n	8007bd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	61bb      	str	r3, [r7, #24]
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bd2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00d      	beq.n	8007bfa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007be6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	68b9      	ldr	r1, [r7, #8]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f805 	bl	8007c04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3730      	adds	r7, #48	; 0x30
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d103      	bne.n	8007c20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	69ba      	ldr	r2, [r7, #24]
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e002      	b.n	8007c26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c32:	2101      	movs	r1, #1
 8007c34:	69b8      	ldr	r0, [r7, #24]
 8007c36:	f7ff ff05 	bl	8007a44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	78fa      	ldrb	r2, [r7, #3]
 8007c3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c42:	bf00      	nop
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b08e      	sub	sp, #56	; 0x38
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <xQueueGenericSend+0x32>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d103      	bne.n	8007c8c <xQueueGenericSend+0x40>
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <xQueueGenericSend+0x44>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e000      	b.n	8007c92 <xQueueGenericSend+0x46>
 8007c90:	2300      	movs	r3, #0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10a      	bne.n	8007cac <xQueueGenericSend+0x60>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d103      	bne.n	8007cba <xQueueGenericSend+0x6e>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <xQueueGenericSend+0x72>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e000      	b.n	8007cc0 <xQueueGenericSend+0x74>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <xQueueGenericSend+0x8e>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	623b      	str	r3, [r7, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cda:	f001 f9bd 	bl	8009058 <xTaskGetSchedulerState>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <xQueueGenericSend+0x9e>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <xQueueGenericSend+0xa2>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e000      	b.n	8007cf0 <xQueueGenericSend+0xa4>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10a      	bne.n	8007d0a <xQueueGenericSend+0xbe>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	61fb      	str	r3, [r7, #28]
}
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d0a:	f001 ff03 	bl	8009b14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d302      	bcc.n	8007d20 <xQueueGenericSend+0xd4>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d129      	bne.n	8007d74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	68b9      	ldr	r1, [r7, #8]
 8007d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d26:	f000 fa0b 	bl	8008140 <prvCopyDataToQueue>
 8007d2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d010      	beq.n	8007d56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d36:	3324      	adds	r3, #36	; 0x24
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 ffcf 	bl	8008cdc <xTaskRemoveFromEventList>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d013      	beq.n	8007d6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d44:	4b3f      	ldr	r3, [pc, #252]	; (8007e44 <xQueueGenericSend+0x1f8>)
 8007d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	e00a      	b.n	8007d6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d007      	beq.n	8007d6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d5c:	4b39      	ldr	r3, [pc, #228]	; (8007e44 <xQueueGenericSend+0x1f8>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d6c:	f001 ff02 	bl	8009b74 <vPortExitCritical>
				return pdPASS;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e063      	b.n	8007e3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d103      	bne.n	8007d82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d7a:	f001 fefb 	bl	8009b74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e05c      	b.n	8007e3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d106      	bne.n	8007d96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d88:	f107 0314 	add.w	r3, r7, #20
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f001 f809 	bl	8008da4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d92:	2301      	movs	r3, #1
 8007d94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d96:	f001 feed 	bl	8009b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d9a:	f000 fd7b 	bl	8008894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d9e:	f001 feb9 	bl	8009b14 <vPortEnterCritical>
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007da8:	b25b      	sxtb	r3, r3
 8007daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dae:	d103      	bne.n	8007db8 <xQueueGenericSend+0x16c>
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dbe:	b25b      	sxtb	r3, r3
 8007dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc4:	d103      	bne.n	8007dce <xQueueGenericSend+0x182>
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dce:	f001 fed1 	bl	8009b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dd2:	1d3a      	adds	r2, r7, #4
 8007dd4:	f107 0314 	add.w	r3, r7, #20
 8007dd8:	4611      	mov	r1, r2
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fff8 	bl	8008dd0 <xTaskCheckForTimeOut>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d124      	bne.n	8007e30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007de8:	f000 faa2 	bl	8008330 <prvIsQueueFull>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d018      	beq.n	8007e24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	3310      	adds	r3, #16
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	4611      	mov	r1, r2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 ff1e 	bl	8008c3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e02:	f000 fa2d 	bl	8008260 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e06:	f000 fd53 	bl	80088b0 <xTaskResumeAll>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f47f af7c 	bne.w	8007d0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e12:	4b0c      	ldr	r3, [pc, #48]	; (8007e44 <xQueueGenericSend+0x1f8>)
 8007e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	e772      	b.n	8007d0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e26:	f000 fa1b 	bl	8008260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e2a:	f000 fd41 	bl	80088b0 <xTaskResumeAll>
 8007e2e:	e76c      	b.n	8007d0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e32:	f000 fa15 	bl	8008260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e36:	f000 fd3b 	bl	80088b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3738      	adds	r7, #56	; 0x38
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	e000ed04 	.word	0xe000ed04

08007e48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b090      	sub	sp, #64	; 0x40
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10a      	bne.n	8007e76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e72:	bf00      	nop
 8007e74:	e7fe      	b.n	8007e74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d103      	bne.n	8007e84 <xQueueGenericSendFromISR+0x3c>
 8007e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <xQueueGenericSendFromISR+0x40>
 8007e84:	2301      	movs	r3, #1
 8007e86:	e000      	b.n	8007e8a <xQueueGenericSendFromISR+0x42>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10a      	bne.n	8007ea4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d103      	bne.n	8007eb2 <xQueueGenericSendFromISR+0x6a>
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d101      	bne.n	8007eb6 <xQueueGenericSendFromISR+0x6e>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e000      	b.n	8007eb8 <xQueueGenericSendFromISR+0x70>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	623b      	str	r3, [r7, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ed2:	f001 ff01 	bl	8009cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ed6:	f3ef 8211 	mrs	r2, BASEPRI
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	61fa      	str	r2, [r7, #28]
 8007eec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007eee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ef0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d302      	bcc.n	8007f04 <xQueueGenericSendFromISR+0xbc>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d12f      	bne.n	8007f64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f1a:	f000 f911 	bl	8008140 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f26:	d112      	bne.n	8007f4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d016      	beq.n	8007f5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	3324      	adds	r3, #36	; 0x24
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 fed1 	bl	8008cdc <xTaskRemoveFromEventList>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00e      	beq.n	8007f5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00b      	beq.n	8007f5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	e007      	b.n	8007f5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f52:	3301      	adds	r3, #1
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	b25a      	sxtb	r2, r3
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f62:	e001      	b.n	8007f68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3740      	adds	r7, #64	; 0x40
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08c      	sub	sp, #48	; 0x30
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <xQueueReceive+0x30>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	623b      	str	r3, [r7, #32]
}
 8007fac:	bf00      	nop
 8007fae:	e7fe      	b.n	8007fae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d103      	bne.n	8007fbe <xQueueReceive+0x3e>
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <xQueueReceive+0x42>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e000      	b.n	8007fc4 <xQueueReceive+0x44>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <xQueueReceive+0x5e>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	61fb      	str	r3, [r7, #28]
}
 8007fda:	bf00      	nop
 8007fdc:	e7fe      	b.n	8007fdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fde:	f001 f83b 	bl	8009058 <xTaskGetSchedulerState>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d102      	bne.n	8007fee <xQueueReceive+0x6e>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <xQueueReceive+0x72>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e000      	b.n	8007ff4 <xQueueReceive+0x74>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <xQueueReceive+0x8e>
	__asm volatile
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	61bb      	str	r3, [r7, #24]
}
 800800a:	bf00      	nop
 800800c:	e7fe      	b.n	800800c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800800e:	f001 fd81 	bl	8009b14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	2b00      	cmp	r3, #0
 800801c:	d01f      	beq.n	800805e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800801e:	68b9      	ldr	r1, [r7, #8]
 8008020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008022:	f000 f8f7 	bl	8008214 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	1e5a      	subs	r2, r3, #1
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00f      	beq.n	8008056 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008038:	3310      	adds	r3, #16
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fe4e 	bl	8008cdc <xTaskRemoveFromEventList>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008046:	4b3d      	ldr	r3, [pc, #244]	; (800813c <xQueueReceive+0x1bc>)
 8008048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008056:	f001 fd8d 	bl	8009b74 <vPortExitCritical>
				return pdPASS;
 800805a:	2301      	movs	r3, #1
 800805c:	e069      	b.n	8008132 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d103      	bne.n	800806c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008064:	f001 fd86 	bl	8009b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008068:	2300      	movs	r3, #0
 800806a:	e062      	b.n	8008132 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800806c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008072:	f107 0310 	add.w	r3, r7, #16
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fe94 	bl	8008da4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800807c:	2301      	movs	r3, #1
 800807e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008080:	f001 fd78 	bl	8009b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008084:	f000 fc06 	bl	8008894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008088:	f001 fd44 	bl	8009b14 <vPortEnterCritical>
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008092:	b25b      	sxtb	r3, r3
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008098:	d103      	bne.n	80080a2 <xQueueReceive+0x122>
 800809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080a8:	b25b      	sxtb	r3, r3
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ae:	d103      	bne.n	80080b8 <xQueueReceive+0x138>
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080b8:	f001 fd5c 	bl	8009b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080bc:	1d3a      	adds	r2, r7, #4
 80080be:	f107 0310 	add.w	r3, r7, #16
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fe83 	bl	8008dd0 <xTaskCheckForTimeOut>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d123      	bne.n	8008118 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080d2:	f000 f917 	bl	8008304 <prvIsQueueEmpty>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d017      	beq.n	800810c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080de:	3324      	adds	r3, #36	; 0x24
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	4611      	mov	r1, r2
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 fda9 	bl	8008c3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ec:	f000 f8b8 	bl	8008260 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080f0:	f000 fbde 	bl	80088b0 <xTaskResumeAll>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d189      	bne.n	800800e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80080fa:	4b10      	ldr	r3, [pc, #64]	; (800813c <xQueueReceive+0x1bc>)
 80080fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	e780      	b.n	800800e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800810c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800810e:	f000 f8a7 	bl	8008260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008112:	f000 fbcd 	bl	80088b0 <xTaskResumeAll>
 8008116:	e77a      	b.n	800800e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800811a:	f000 f8a1 	bl	8008260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800811e:	f000 fbc7 	bl	80088b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008124:	f000 f8ee 	bl	8008304 <prvIsQueueEmpty>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	f43f af6f 	beq.w	800800e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008132:	4618      	mov	r0, r3
 8008134:	3730      	adds	r7, #48	; 0x30
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	e000ed04 	.word	0xe000ed04

08008140 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800814c:	2300      	movs	r3, #0
 800814e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008154:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10d      	bne.n	800817a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d14d      	bne.n	8008202 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	4618      	mov	r0, r3
 800816c:	f000 ff92 	bl	8009094 <xTaskPriorityDisinherit>
 8008170:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	609a      	str	r2, [r3, #8]
 8008178:	e043      	b.n	8008202 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d119      	bne.n	80081b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6858      	ldr	r0, [r3, #4]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008188:	461a      	mov	r2, r3
 800818a:	68b9      	ldr	r1, [r7, #8]
 800818c:	f002 fc82 	bl	800aa94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008198:	441a      	add	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d32b      	bcc.n	8008202 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	605a      	str	r2, [r3, #4]
 80081b2:	e026      	b.n	8008202 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	68d8      	ldr	r0, [r3, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081bc:	461a      	mov	r2, r3
 80081be:	68b9      	ldr	r1, [r7, #8]
 80081c0:	f002 fc68 	bl	800aa94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	68da      	ldr	r2, [r3, #12]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081cc:	425b      	negs	r3, r3
 80081ce:	441a      	add	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	68da      	ldr	r2, [r3, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d207      	bcs.n	80081f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e8:	425b      	negs	r3, r3
 80081ea:	441a      	add	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d105      	bne.n	8008202 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3b01      	subs	r3, #1
 8008200:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	1c5a      	adds	r2, r3, #1
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800820a:	697b      	ldr	r3, [r7, #20]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d018      	beq.n	8008258 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68da      	ldr	r2, [r3, #12]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	441a      	add	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	429a      	cmp	r2, r3
 800823e:	d303      	bcc.n	8008248 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68d9      	ldr	r1, [r3, #12]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008250:	461a      	mov	r2, r3
 8008252:	6838      	ldr	r0, [r7, #0]
 8008254:	f002 fc1e 	bl	800aa94 <memcpy>
	}
}
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008268:	f001 fc54 	bl	8009b14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008272:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008274:	e011      	b.n	800829a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	2b00      	cmp	r3, #0
 800827c:	d012      	beq.n	80082a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3324      	adds	r3, #36	; 0x24
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fd2a 	bl	8008cdc <xTaskRemoveFromEventList>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800828e:	f000 fe01 	bl	8008e94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008292:	7bfb      	ldrb	r3, [r7, #15]
 8008294:	3b01      	subs	r3, #1
 8008296:	b2db      	uxtb	r3, r3
 8008298:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800829a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	dce9      	bgt.n	8008276 <prvUnlockQueue+0x16>
 80082a2:	e000      	b.n	80082a6 <prvUnlockQueue+0x46>
					break;
 80082a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	22ff      	movs	r2, #255	; 0xff
 80082aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082ae:	f001 fc61 	bl	8009b74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082b2:	f001 fc2f 	bl	8009b14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082be:	e011      	b.n	80082e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d012      	beq.n	80082ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3310      	adds	r3, #16
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 fd05 	bl	8008cdc <xTaskRemoveFromEventList>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082d8:	f000 fddc 	bl	8008e94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	3b01      	subs	r3, #1
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	dce9      	bgt.n	80082c0 <prvUnlockQueue+0x60>
 80082ec:	e000      	b.n	80082f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	22ff      	movs	r2, #255	; 0xff
 80082f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80082f8:	f001 fc3c 	bl	8009b74 <vPortExitCritical>
}
 80082fc:	bf00      	nop
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800830c:	f001 fc02 	bl	8009b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008314:	2b00      	cmp	r3, #0
 8008316:	d102      	bne.n	800831e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008318:	2301      	movs	r3, #1
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	e001      	b.n	8008322 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800831e:	2300      	movs	r3, #0
 8008320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008322:	f001 fc27 	bl	8009b74 <vPortExitCritical>

	return xReturn;
 8008326:	68fb      	ldr	r3, [r7, #12]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008338:	f001 fbec 	bl	8009b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008344:	429a      	cmp	r2, r3
 8008346:	d102      	bne.n	800834e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008348:	2301      	movs	r3, #1
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	e001      	b.n	8008352 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800834e:	2300      	movs	r3, #0
 8008350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008352:	f001 fc0f 	bl	8009b74 <vPortExitCritical>

	return xReturn;
 8008356:	68fb      	ldr	r3, [r7, #12]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800836a:	2300      	movs	r3, #0
 800836c:	60fb      	str	r3, [r7, #12]
 800836e:	e014      	b.n	800839a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008370:	4a0f      	ldr	r2, [pc, #60]	; (80083b0 <vQueueAddToRegistry+0x50>)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10b      	bne.n	8008394 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800837c:	490c      	ldr	r1, [pc, #48]	; (80083b0 <vQueueAddToRegistry+0x50>)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008386:	4a0a      	ldr	r2, [pc, #40]	; (80083b0 <vQueueAddToRegistry+0x50>)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	4413      	add	r3, r2
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008392:	e006      	b.n	80083a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3301      	adds	r3, #1
 8008398:	60fb      	str	r3, [r7, #12]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b07      	cmp	r3, #7
 800839e:	d9e7      	bls.n	8008370 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20000998 	.word	0x20000998

080083b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083c4:	f001 fba6 	bl	8009b14 <vPortEnterCritical>
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083ce:	b25b      	sxtb	r3, r3
 80083d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d4:	d103      	bne.n	80083de <vQueueWaitForMessageRestricted+0x2a>
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083e4:	b25b      	sxtb	r3, r3
 80083e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ea:	d103      	bne.n	80083f4 <vQueueWaitForMessageRestricted+0x40>
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083f4:	f001 fbbe 	bl	8009b74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	3324      	adds	r3, #36	; 0x24
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fc3b 	bl	8008c84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800840e:	6978      	ldr	r0, [r7, #20]
 8008410:	f7ff ff26 	bl	8008260 <prvUnlockQueue>
	}
 8008414:	bf00      	nop
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08e      	sub	sp, #56	; 0x38
 8008420:	af04      	add	r7, sp, #16
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10a      	bne.n	8008446 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	623b      	str	r3, [r7, #32]
}
 8008442:	bf00      	nop
 8008444:	e7fe      	b.n	8008444 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <xTaskCreateStatic+0x46>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	61fb      	str	r3, [r7, #28]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008462:	235c      	movs	r3, #92	; 0x5c
 8008464:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	2b5c      	cmp	r3, #92	; 0x5c
 800846a:	d00a      	beq.n	8008482 <xTaskCreateStatic+0x66>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	61bb      	str	r3, [r7, #24]
}
 800847e:	bf00      	nop
 8008480:	e7fe      	b.n	8008480 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008482:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	2b00      	cmp	r3, #0
 8008488:	d01e      	beq.n	80084c8 <xTaskCreateStatic+0xac>
 800848a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01b      	beq.n	80084c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008492:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008498:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	2202      	movs	r2, #2
 800849e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084a2:	2300      	movs	r3, #0
 80084a4:	9303      	str	r3, [sp, #12]
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	9302      	str	r3, [sp, #8]
 80084aa:	f107 0314 	add.w	r3, r7, #20
 80084ae:	9301      	str	r3, [sp, #4]
 80084b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 f850 	bl	8008560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084c2:	f000 f8dd 	bl	8008680 <prvAddNewTaskToReadyList>
 80084c6:	e001      	b.n	80084cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084cc:	697b      	ldr	r3, [r7, #20]
	}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3728      	adds	r7, #40	; 0x28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b08c      	sub	sp, #48	; 0x30
 80084da:	af04      	add	r7, sp, #16
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	603b      	str	r3, [r7, #0]
 80084e2:	4613      	mov	r3, r2
 80084e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084e6:	88fb      	ldrh	r3, [r7, #6]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4618      	mov	r0, r3
 80084ec:	f001 fc34 	bl	8009d58 <pvPortMalloc>
 80084f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00e      	beq.n	8008516 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084f8:	205c      	movs	r0, #92	; 0x5c
 80084fa:	f001 fc2d 	bl	8009d58 <pvPortMalloc>
 80084fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	631a      	str	r2, [r3, #48]	; 0x30
 800850c:	e005      	b.n	800851a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800850e:	6978      	ldr	r0, [r7, #20]
 8008510:	f001 fcee 	bl	8009ef0 <vPortFree>
 8008514:	e001      	b.n	800851a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d017      	beq.n	8008550 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008528:	88fa      	ldrh	r2, [r7, #6]
 800852a:	2300      	movs	r3, #0
 800852c:	9303      	str	r3, [sp, #12]
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	9302      	str	r3, [sp, #8]
 8008532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008534:	9301      	str	r3, [sp, #4]
 8008536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68b9      	ldr	r1, [r7, #8]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 f80e 	bl	8008560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008544:	69f8      	ldr	r0, [r7, #28]
 8008546:	f000 f89b 	bl	8008680 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800854a:	2301      	movs	r3, #1
 800854c:	61bb      	str	r3, [r7, #24]
 800854e:	e002      	b.n	8008556 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008550:	f04f 33ff 	mov.w	r3, #4294967295
 8008554:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008556:	69bb      	ldr	r3, [r7, #24]
	}
 8008558:	4618      	mov	r0, r3
 800855a:	3720      	adds	r7, #32
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
 800856c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	461a      	mov	r2, r3
 8008578:	21a5      	movs	r1, #165	; 0xa5
 800857a:	f002 fa99 	bl	800aab0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008588:	3b01      	subs	r3, #1
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	f023 0307 	bic.w	r3, r3, #7
 8008596:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	f003 0307 	and.w	r3, r3, #7
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00a      	beq.n	80085b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	617b      	str	r3, [r7, #20]
}
 80085b4:	bf00      	nop
 80085b6:	e7fe      	b.n	80085b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d01f      	beq.n	80085fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085be:	2300      	movs	r3, #0
 80085c0:	61fb      	str	r3, [r7, #28]
 80085c2:	e012      	b.n	80085ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	4413      	add	r3, r2
 80085ca:	7819      	ldrb	r1, [r3, #0]
 80085cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4413      	add	r3, r2
 80085d2:	3334      	adds	r3, #52	; 0x34
 80085d4:	460a      	mov	r2, r1
 80085d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	4413      	add	r3, r2
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d006      	beq.n	80085f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	3301      	adds	r3, #1
 80085e8:	61fb      	str	r3, [r7, #28]
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	2b0f      	cmp	r3, #15
 80085ee:	d9e9      	bls.n	80085c4 <prvInitialiseNewTask+0x64>
 80085f0:	e000      	b.n	80085f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80085f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085fc:	e003      	b.n	8008606 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	2b37      	cmp	r3, #55	; 0x37
 800860a:	d901      	bls.n	8008610 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800860c:	2337      	movs	r3, #55	; 0x37
 800860e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008614:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800861a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	2200      	movs	r2, #0
 8008620:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008624:	3304      	adds	r3, #4
 8008626:	4618      	mov	r0, r3
 8008628:	f7ff f978 	bl	800791c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	3318      	adds	r3, #24
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff f973 	bl	800791c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800863a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800864a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800864c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864e:	2200      	movs	r2, #0
 8008650:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	68f9      	ldr	r1, [r7, #12]
 800865e:	69b8      	ldr	r0, [r7, #24]
 8008660:	f001 f928 	bl	80098b4 <pxPortInitialiseStack>
 8008664:	4602      	mov	r2, r0
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800866a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008676:	bf00      	nop
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008688:	f001 fa44 	bl	8009b14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800868c:	4b2d      	ldr	r3, [pc, #180]	; (8008744 <prvAddNewTaskToReadyList+0xc4>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3301      	adds	r3, #1
 8008692:	4a2c      	ldr	r2, [pc, #176]	; (8008744 <prvAddNewTaskToReadyList+0xc4>)
 8008694:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008696:	4b2c      	ldr	r3, [pc, #176]	; (8008748 <prvAddNewTaskToReadyList+0xc8>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d109      	bne.n	80086b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800869e:	4a2a      	ldr	r2, [pc, #168]	; (8008748 <prvAddNewTaskToReadyList+0xc8>)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086a4:	4b27      	ldr	r3, [pc, #156]	; (8008744 <prvAddNewTaskToReadyList+0xc4>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d110      	bne.n	80086ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086ac:	f000 fc16 	bl	8008edc <prvInitialiseTaskLists>
 80086b0:	e00d      	b.n	80086ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086b2:	4b26      	ldr	r3, [pc, #152]	; (800874c <prvAddNewTaskToReadyList+0xcc>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d109      	bne.n	80086ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086ba:	4b23      	ldr	r3, [pc, #140]	; (8008748 <prvAddNewTaskToReadyList+0xc8>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d802      	bhi.n	80086ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086c8:	4a1f      	ldr	r2, [pc, #124]	; (8008748 <prvAddNewTaskToReadyList+0xc8>)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086ce:	4b20      	ldr	r3, [pc, #128]	; (8008750 <prvAddNewTaskToReadyList+0xd0>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3301      	adds	r3, #1
 80086d4:	4a1e      	ldr	r2, [pc, #120]	; (8008750 <prvAddNewTaskToReadyList+0xd0>)
 80086d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80086d8:	4b1d      	ldr	r3, [pc, #116]	; (8008750 <prvAddNewTaskToReadyList+0xd0>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e4:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <prvAddNewTaskToReadyList+0xd4>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d903      	bls.n	80086f4 <prvAddNewTaskToReadyList+0x74>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	4a18      	ldr	r2, [pc, #96]	; (8008754 <prvAddNewTaskToReadyList+0xd4>)
 80086f2:	6013      	str	r3, [r2, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f8:	4613      	mov	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4a15      	ldr	r2, [pc, #84]	; (8008758 <prvAddNewTaskToReadyList+0xd8>)
 8008702:	441a      	add	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	3304      	adds	r3, #4
 8008708:	4619      	mov	r1, r3
 800870a:	4610      	mov	r0, r2
 800870c:	f7ff f913 	bl	8007936 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008710:	f001 fa30 	bl	8009b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008714:	4b0d      	ldr	r3, [pc, #52]	; (800874c <prvAddNewTaskToReadyList+0xcc>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00e      	beq.n	800873a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800871c:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <prvAddNewTaskToReadyList+0xc8>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008726:	429a      	cmp	r2, r3
 8008728:	d207      	bcs.n	800873a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800872a:	4b0c      	ldr	r3, [pc, #48]	; (800875c <prvAddNewTaskToReadyList+0xdc>)
 800872c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800873a:	bf00      	nop
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20000eac 	.word	0x20000eac
 8008748:	200009d8 	.word	0x200009d8
 800874c:	20000eb8 	.word	0x20000eb8
 8008750:	20000ec8 	.word	0x20000ec8
 8008754:	20000eb4 	.word	0x20000eb4
 8008758:	200009dc 	.word	0x200009dc
 800875c:	e000ed04 	.word	0xe000ed04

08008760 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008768:	2300      	movs	r3, #0
 800876a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d017      	beq.n	80087a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008772:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <vTaskDelay+0x60>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <vTaskDelay+0x30>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	60bb      	str	r3, [r7, #8]
}
 800878c:	bf00      	nop
 800878e:	e7fe      	b.n	800878e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008790:	f000 f880 	bl	8008894 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008794:	2100      	movs	r1, #0
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fcea 	bl	8009170 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800879c:	f000 f888 	bl	80088b0 <xTaskResumeAll>
 80087a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d107      	bne.n	80087b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80087a8:	4b06      	ldr	r3, [pc, #24]	; (80087c4 <vTaskDelay+0x64>)
 80087aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087b8:	bf00      	nop
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	20000ed4 	.word	0x20000ed4
 80087c4:	e000ed04 	.word	0xe000ed04

080087c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08a      	sub	sp, #40	; 0x28
 80087cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087d6:	463a      	mov	r2, r7
 80087d8:	1d39      	adds	r1, r7, #4
 80087da:	f107 0308 	add.w	r3, r7, #8
 80087de:	4618      	mov	r0, r3
 80087e0:	f7ff f848 	bl	8007874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	9202      	str	r2, [sp, #8]
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	2300      	movs	r3, #0
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	2300      	movs	r3, #0
 80087f4:	460a      	mov	r2, r1
 80087f6:	4921      	ldr	r1, [pc, #132]	; (800887c <vTaskStartScheduler+0xb4>)
 80087f8:	4821      	ldr	r0, [pc, #132]	; (8008880 <vTaskStartScheduler+0xb8>)
 80087fa:	f7ff fe0f 	bl	800841c <xTaskCreateStatic>
 80087fe:	4603      	mov	r3, r0
 8008800:	4a20      	ldr	r2, [pc, #128]	; (8008884 <vTaskStartScheduler+0xbc>)
 8008802:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008804:	4b1f      	ldr	r3, [pc, #124]	; (8008884 <vTaskStartScheduler+0xbc>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800880c:	2301      	movs	r3, #1
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	e001      	b.n	8008816 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008812:	2300      	movs	r3, #0
 8008814:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d102      	bne.n	8008822 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800881c:	f000 fcfc 	bl	8009218 <xTimerCreateTimerTask>
 8008820:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d116      	bne.n	8008856 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	613b      	str	r3, [r7, #16]
}
 800883a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800883c:	4b12      	ldr	r3, [pc, #72]	; (8008888 <vTaskStartScheduler+0xc0>)
 800883e:	f04f 32ff 	mov.w	r2, #4294967295
 8008842:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008844:	4b11      	ldr	r3, [pc, #68]	; (800888c <vTaskStartScheduler+0xc4>)
 8008846:	2201      	movs	r2, #1
 8008848:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800884a:	4b11      	ldr	r3, [pc, #68]	; (8008890 <vTaskStartScheduler+0xc8>)
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008850:	f001 f8be 	bl	80099d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008854:	e00e      	b.n	8008874 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885c:	d10a      	bne.n	8008874 <vTaskStartScheduler+0xac>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	60fb      	str	r3, [r7, #12]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <vTaskStartScheduler+0xaa>
}
 8008874:	bf00      	nop
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	0800ab10 	.word	0x0800ab10
 8008880:	08008ead 	.word	0x08008ead
 8008884:	20000ed0 	.word	0x20000ed0
 8008888:	20000ecc 	.word	0x20000ecc
 800888c:	20000eb8 	.word	0x20000eb8
 8008890:	20000eb0 	.word	0x20000eb0

08008894 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008894:	b480      	push	{r7}
 8008896:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008898:	4b04      	ldr	r3, [pc, #16]	; (80088ac <vTaskSuspendAll+0x18>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3301      	adds	r3, #1
 800889e:	4a03      	ldr	r2, [pc, #12]	; (80088ac <vTaskSuspendAll+0x18>)
 80088a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088a2:	bf00      	nop
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	20000ed4 	.word	0x20000ed4

080088b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088ba:	2300      	movs	r3, #0
 80088bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088be:	4b42      	ldr	r3, [pc, #264]	; (80089c8 <xTaskResumeAll+0x118>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10a      	bne.n	80088dc <xTaskResumeAll+0x2c>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	603b      	str	r3, [r7, #0]
}
 80088d8:	bf00      	nop
 80088da:	e7fe      	b.n	80088da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088dc:	f001 f91a 	bl	8009b14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088e0:	4b39      	ldr	r3, [pc, #228]	; (80089c8 <xTaskResumeAll+0x118>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	4a38      	ldr	r2, [pc, #224]	; (80089c8 <xTaskResumeAll+0x118>)
 80088e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ea:	4b37      	ldr	r3, [pc, #220]	; (80089c8 <xTaskResumeAll+0x118>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d162      	bne.n	80089b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088f2:	4b36      	ldr	r3, [pc, #216]	; (80089cc <xTaskResumeAll+0x11c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d05e      	beq.n	80089b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088fa:	e02f      	b.n	800895c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088fc:	4b34      	ldr	r3, [pc, #208]	; (80089d0 <xTaskResumeAll+0x120>)
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3318      	adds	r3, #24
 8008908:	4618      	mov	r0, r3
 800890a:	f7ff f871 	bl	80079f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3304      	adds	r3, #4
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff f86c 	bl	80079f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	4b2d      	ldr	r3, [pc, #180]	; (80089d4 <xTaskResumeAll+0x124>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	429a      	cmp	r2, r3
 8008922:	d903      	bls.n	800892c <xTaskResumeAll+0x7c>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008928:	4a2a      	ldr	r2, [pc, #168]	; (80089d4 <xTaskResumeAll+0x124>)
 800892a:	6013      	str	r3, [r2, #0]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008930:	4613      	mov	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4a27      	ldr	r2, [pc, #156]	; (80089d8 <xTaskResumeAll+0x128>)
 800893a:	441a      	add	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3304      	adds	r3, #4
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	f7fe fff7 	bl	8007936 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894c:	4b23      	ldr	r3, [pc, #140]	; (80089dc <xTaskResumeAll+0x12c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008952:	429a      	cmp	r2, r3
 8008954:	d302      	bcc.n	800895c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008956:	4b22      	ldr	r3, [pc, #136]	; (80089e0 <xTaskResumeAll+0x130>)
 8008958:	2201      	movs	r2, #1
 800895a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800895c:	4b1c      	ldr	r3, [pc, #112]	; (80089d0 <xTaskResumeAll+0x120>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1cb      	bne.n	80088fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800896a:	f000 fb55 	bl	8009018 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800896e:	4b1d      	ldr	r3, [pc, #116]	; (80089e4 <xTaskResumeAll+0x134>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d010      	beq.n	800899c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800897a:	f000 f847 	bl	8008a0c <xTaskIncrementTick>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008984:	4b16      	ldr	r3, [pc, #88]	; (80089e0 <xTaskResumeAll+0x130>)
 8008986:	2201      	movs	r2, #1
 8008988:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3b01      	subs	r3, #1
 800898e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1f1      	bne.n	800897a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008996:	4b13      	ldr	r3, [pc, #76]	; (80089e4 <xTaskResumeAll+0x134>)
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800899c:	4b10      	ldr	r3, [pc, #64]	; (80089e0 <xTaskResumeAll+0x130>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d009      	beq.n	80089b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089a4:	2301      	movs	r3, #1
 80089a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089a8:	4b0f      	ldr	r3, [pc, #60]	; (80089e8 <xTaskResumeAll+0x138>)
 80089aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089b8:	f001 f8dc 	bl	8009b74 <vPortExitCritical>

	return xAlreadyYielded;
 80089bc:	68bb      	ldr	r3, [r7, #8]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20000ed4 	.word	0x20000ed4
 80089cc:	20000eac 	.word	0x20000eac
 80089d0:	20000e6c 	.word	0x20000e6c
 80089d4:	20000eb4 	.word	0x20000eb4
 80089d8:	200009dc 	.word	0x200009dc
 80089dc:	200009d8 	.word	0x200009d8
 80089e0:	20000ec0 	.word	0x20000ec0
 80089e4:	20000ebc 	.word	0x20000ebc
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089f2:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <xTaskGetTickCount+0x1c>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089f8:	687b      	ldr	r3, [r7, #4]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	370c      	adds	r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	20000eb0 	.word	0x20000eb0

08008a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a12:	2300      	movs	r3, #0
 8008a14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a16:	4b4f      	ldr	r3, [pc, #316]	; (8008b54 <xTaskIncrementTick+0x148>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f040 808f 	bne.w	8008b3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a20:	4b4d      	ldr	r3, [pc, #308]	; (8008b58 <xTaskIncrementTick+0x14c>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3301      	adds	r3, #1
 8008a26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a28:	4a4b      	ldr	r2, [pc, #300]	; (8008b58 <xTaskIncrementTick+0x14c>)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d120      	bne.n	8008a76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a34:	4b49      	ldr	r3, [pc, #292]	; (8008b5c <xTaskIncrementTick+0x150>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00a      	beq.n	8008a54 <xTaskIncrementTick+0x48>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	603b      	str	r3, [r7, #0]
}
 8008a50:	bf00      	nop
 8008a52:	e7fe      	b.n	8008a52 <xTaskIncrementTick+0x46>
 8008a54:	4b41      	ldr	r3, [pc, #260]	; (8008b5c <xTaskIncrementTick+0x150>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	60fb      	str	r3, [r7, #12]
 8008a5a:	4b41      	ldr	r3, [pc, #260]	; (8008b60 <xTaskIncrementTick+0x154>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a3f      	ldr	r2, [pc, #252]	; (8008b5c <xTaskIncrementTick+0x150>)
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	4a3f      	ldr	r2, [pc, #252]	; (8008b60 <xTaskIncrementTick+0x154>)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	4b3e      	ldr	r3, [pc, #248]	; (8008b64 <xTaskIncrementTick+0x158>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	4a3d      	ldr	r2, [pc, #244]	; (8008b64 <xTaskIncrementTick+0x158>)
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	f000 fad1 	bl	8009018 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a76:	4b3c      	ldr	r3, [pc, #240]	; (8008b68 <xTaskIncrementTick+0x15c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d349      	bcc.n	8008b14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a80:	4b36      	ldr	r3, [pc, #216]	; (8008b5c <xTaskIncrementTick+0x150>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d104      	bne.n	8008a94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a8a:	4b37      	ldr	r3, [pc, #220]	; (8008b68 <xTaskIncrementTick+0x15c>)
 8008a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a90:	601a      	str	r2, [r3, #0]
					break;
 8008a92:	e03f      	b.n	8008b14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a94:	4b31      	ldr	r3, [pc, #196]	; (8008b5c <xTaskIncrementTick+0x150>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d203      	bcs.n	8008ab4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008aac:	4a2e      	ldr	r2, [pc, #184]	; (8008b68 <xTaskIncrementTick+0x15c>)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ab2:	e02f      	b.n	8008b14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fe ff99 	bl	80079f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d004      	beq.n	8008ad0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	3318      	adds	r3, #24
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe ff90 	bl	80079f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad4:	4b25      	ldr	r3, [pc, #148]	; (8008b6c <xTaskIncrementTick+0x160>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d903      	bls.n	8008ae4 <xTaskIncrementTick+0xd8>
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae0:	4a22      	ldr	r2, [pc, #136]	; (8008b6c <xTaskIncrementTick+0x160>)
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae8:	4613      	mov	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4a1f      	ldr	r2, [pc, #124]	; (8008b70 <xTaskIncrementTick+0x164>)
 8008af2:	441a      	add	r2, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	3304      	adds	r3, #4
 8008af8:	4619      	mov	r1, r3
 8008afa:	4610      	mov	r0, r2
 8008afc:	f7fe ff1b 	bl	8007936 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b04:	4b1b      	ldr	r3, [pc, #108]	; (8008b74 <xTaskIncrementTick+0x168>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d3b8      	bcc.n	8008a80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b12:	e7b5      	b.n	8008a80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b14:	4b17      	ldr	r3, [pc, #92]	; (8008b74 <xTaskIncrementTick+0x168>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1a:	4915      	ldr	r1, [pc, #84]	; (8008b70 <xTaskIncrementTick+0x164>)
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	440b      	add	r3, r1
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d901      	bls.n	8008b30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b30:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <xTaskIncrementTick+0x16c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d007      	beq.n	8008b48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	617b      	str	r3, [r7, #20]
 8008b3c:	e004      	b.n	8008b48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b3e:	4b0f      	ldr	r3, [pc, #60]	; (8008b7c <xTaskIncrementTick+0x170>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3301      	adds	r3, #1
 8008b44:	4a0d      	ldr	r2, [pc, #52]	; (8008b7c <xTaskIncrementTick+0x170>)
 8008b46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b48:	697b      	ldr	r3, [r7, #20]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3718      	adds	r7, #24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000ed4 	.word	0x20000ed4
 8008b58:	20000eb0 	.word	0x20000eb0
 8008b5c:	20000e64 	.word	0x20000e64
 8008b60:	20000e68 	.word	0x20000e68
 8008b64:	20000ec4 	.word	0x20000ec4
 8008b68:	20000ecc 	.word	0x20000ecc
 8008b6c:	20000eb4 	.word	0x20000eb4
 8008b70:	200009dc 	.word	0x200009dc
 8008b74:	200009d8 	.word	0x200009d8
 8008b78:	20000ec0 	.word	0x20000ec0
 8008b7c:	20000ebc 	.word	0x20000ebc

08008b80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b86:	4b28      	ldr	r3, [pc, #160]	; (8008c28 <vTaskSwitchContext+0xa8>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d003      	beq.n	8008b96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b8e:	4b27      	ldr	r3, [pc, #156]	; (8008c2c <vTaskSwitchContext+0xac>)
 8008b90:	2201      	movs	r2, #1
 8008b92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b94:	e041      	b.n	8008c1a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008b96:	4b25      	ldr	r3, [pc, #148]	; (8008c2c <vTaskSwitchContext+0xac>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b9c:	4b24      	ldr	r3, [pc, #144]	; (8008c30 <vTaskSwitchContext+0xb0>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	60fb      	str	r3, [r7, #12]
 8008ba2:	e010      	b.n	8008bc6 <vTaskSwitchContext+0x46>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <vTaskSwitchContext+0x40>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	607b      	str	r3, [r7, #4]
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <vTaskSwitchContext+0x3e>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	60fb      	str	r3, [r7, #12]
 8008bc6:	491b      	ldr	r1, [pc, #108]	; (8008c34 <vTaskSwitchContext+0xb4>)
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	440b      	add	r3, r1
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0e4      	beq.n	8008ba4 <vTaskSwitchContext+0x24>
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4a13      	ldr	r2, [pc, #76]	; (8008c34 <vTaskSwitchContext+0xb4>)
 8008be6:	4413      	add	r3, r2
 8008be8:	60bb      	str	r3, [r7, #8]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	605a      	str	r2, [r3, #4]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d104      	bne.n	8008c0a <vTaskSwitchContext+0x8a>
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	605a      	str	r2, [r3, #4]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	4a09      	ldr	r2, [pc, #36]	; (8008c38 <vTaskSwitchContext+0xb8>)
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	4a06      	ldr	r2, [pc, #24]	; (8008c30 <vTaskSwitchContext+0xb0>)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6013      	str	r3, [r2, #0]
}
 8008c1a:	bf00      	nop
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	20000ed4 	.word	0x20000ed4
 8008c2c:	20000ec0 	.word	0x20000ec0
 8008c30:	20000eb4 	.word	0x20000eb4
 8008c34:	200009dc 	.word	0x200009dc
 8008c38:	200009d8 	.word	0x200009d8

08008c3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10a      	bne.n	8008c62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	60fb      	str	r3, [r7, #12]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c62:	4b07      	ldr	r3, [pc, #28]	; (8008c80 <vTaskPlaceOnEventList+0x44>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3318      	adds	r3, #24
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7fe fe87 	bl	800797e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c70:	2101      	movs	r1, #1
 8008c72:	6838      	ldr	r0, [r7, #0]
 8008c74:	f000 fa7c 	bl	8009170 <prvAddCurrentTaskToDelayedList>
}
 8008c78:	bf00      	nop
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	200009d8 	.word	0x200009d8

08008c84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10a      	bne.n	8008cac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	617b      	str	r3, [r7, #20]
}
 8008ca8:	bf00      	nop
 8008caa:	e7fe      	b.n	8008caa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cac:	4b0a      	ldr	r3, [pc, #40]	; (8008cd8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3318      	adds	r3, #24
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f7fe fe3e 	bl	8007936 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008cc6:	6879      	ldr	r1, [r7, #4]
 8008cc8:	68b8      	ldr	r0, [r7, #8]
 8008cca:	f000 fa51 	bl	8009170 <prvAddCurrentTaskToDelayedList>
	}
 8008cce:	bf00      	nop
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	200009d8 	.word	0x200009d8

08008cdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10a      	bne.n	8008d08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	60fb      	str	r3, [r7, #12]
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	3318      	adds	r3, #24
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fe6f 	bl	80079f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d12:	4b1e      	ldr	r3, [pc, #120]	; (8008d8c <xTaskRemoveFromEventList+0xb0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d11d      	bne.n	8008d56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe fe66 	bl	80079f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d28:	4b19      	ldr	r3, [pc, #100]	; (8008d90 <xTaskRemoveFromEventList+0xb4>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d903      	bls.n	8008d38 <xTaskRemoveFromEventList+0x5c>
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d34:	4a16      	ldr	r2, [pc, #88]	; (8008d90 <xTaskRemoveFromEventList+0xb4>)
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4a13      	ldr	r2, [pc, #76]	; (8008d94 <xTaskRemoveFromEventList+0xb8>)
 8008d46:	441a      	add	r2, r3
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4610      	mov	r0, r2
 8008d50:	f7fe fdf1 	bl	8007936 <vListInsertEnd>
 8008d54:	e005      	b.n	8008d62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	3318      	adds	r3, #24
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	480e      	ldr	r0, [pc, #56]	; (8008d98 <xTaskRemoveFromEventList+0xbc>)
 8008d5e:	f7fe fdea 	bl	8007936 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d66:	4b0d      	ldr	r3, [pc, #52]	; (8008d9c <xTaskRemoveFromEventList+0xc0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d905      	bls.n	8008d7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d70:	2301      	movs	r3, #1
 8008d72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d74:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <xTaskRemoveFromEventList+0xc4>)
 8008d76:	2201      	movs	r2, #1
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	e001      	b.n	8008d80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d80:	697b      	ldr	r3, [r7, #20]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000ed4 	.word	0x20000ed4
 8008d90:	20000eb4 	.word	0x20000eb4
 8008d94:	200009dc 	.word	0x200009dc
 8008d98:	20000e6c 	.word	0x20000e6c
 8008d9c:	200009d8 	.word	0x200009d8
 8008da0:	20000ec0 	.word	0x20000ec0

08008da4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008dac:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <vTaskInternalSetTimeOutState+0x24>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008db4:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <vTaskInternalSetTimeOutState+0x28>)
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	605a      	str	r2, [r3, #4]
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr
 8008dc8:	20000ec4 	.word	0x20000ec4
 8008dcc:	20000eb0 	.word	0x20000eb0

08008dd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	613b      	str	r3, [r7, #16]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10a      	bne.n	8008e12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	60fb      	str	r3, [r7, #12]
}
 8008e0e:	bf00      	nop
 8008e10:	e7fe      	b.n	8008e10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e12:	f000 fe7f 	bl	8009b14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e16:	4b1d      	ldr	r3, [pc, #116]	; (8008e8c <xTaskCheckForTimeOut+0xbc>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2e:	d102      	bne.n	8008e36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e30:	2300      	movs	r3, #0
 8008e32:	61fb      	str	r3, [r7, #28]
 8008e34:	e023      	b.n	8008e7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <xTaskCheckForTimeOut+0xc0>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d007      	beq.n	8008e52 <xTaskCheckForTimeOut+0x82>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d302      	bcc.n	8008e52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	61fb      	str	r3, [r7, #28]
 8008e50:	e015      	b.n	8008e7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d20b      	bcs.n	8008e74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	1ad2      	subs	r2, r2, r3
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f7ff ff9b 	bl	8008da4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	61fb      	str	r3, [r7, #28]
 8008e72:	e004      	b.n	8008e7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2200      	movs	r2, #0
 8008e78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e7e:	f000 fe79 	bl	8009b74 <vPortExitCritical>

	return xReturn;
 8008e82:	69fb      	ldr	r3, [r7, #28]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3720      	adds	r7, #32
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	20000eb0 	.word	0x20000eb0
 8008e90:	20000ec4 	.word	0x20000ec4

08008e94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e94:	b480      	push	{r7}
 8008e96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e98:	4b03      	ldr	r3, [pc, #12]	; (8008ea8 <vTaskMissedYield+0x14>)
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	601a      	str	r2, [r3, #0]
}
 8008e9e:	bf00      	nop
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	20000ec0 	.word	0x20000ec0

08008eac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008eb4:	f000 f852 	bl	8008f5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008eb8:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <prvIdleTask+0x28>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d9f9      	bls.n	8008eb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ec0:	4b05      	ldr	r3, [pc, #20]	; (8008ed8 <prvIdleTask+0x2c>)
 8008ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ed0:	e7f0      	b.n	8008eb4 <prvIdleTask+0x8>
 8008ed2:	bf00      	nop
 8008ed4:	200009dc 	.word	0x200009dc
 8008ed8:	e000ed04 	.word	0xe000ed04

08008edc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	607b      	str	r3, [r7, #4]
 8008ee6:	e00c      	b.n	8008f02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	4613      	mov	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4a12      	ldr	r2, [pc, #72]	; (8008f3c <prvInitialiseTaskLists+0x60>)
 8008ef4:	4413      	add	r3, r2
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe fcf0 	bl	80078dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	3301      	adds	r3, #1
 8008f00:	607b      	str	r3, [r7, #4]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b37      	cmp	r3, #55	; 0x37
 8008f06:	d9ef      	bls.n	8008ee8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f08:	480d      	ldr	r0, [pc, #52]	; (8008f40 <prvInitialiseTaskLists+0x64>)
 8008f0a:	f7fe fce7 	bl	80078dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f0e:	480d      	ldr	r0, [pc, #52]	; (8008f44 <prvInitialiseTaskLists+0x68>)
 8008f10:	f7fe fce4 	bl	80078dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f14:	480c      	ldr	r0, [pc, #48]	; (8008f48 <prvInitialiseTaskLists+0x6c>)
 8008f16:	f7fe fce1 	bl	80078dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f1a:	480c      	ldr	r0, [pc, #48]	; (8008f4c <prvInitialiseTaskLists+0x70>)
 8008f1c:	f7fe fcde 	bl	80078dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f20:	480b      	ldr	r0, [pc, #44]	; (8008f50 <prvInitialiseTaskLists+0x74>)
 8008f22:	f7fe fcdb 	bl	80078dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f26:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <prvInitialiseTaskLists+0x78>)
 8008f28:	4a05      	ldr	r2, [pc, #20]	; (8008f40 <prvInitialiseTaskLists+0x64>)
 8008f2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f2c:	4b0a      	ldr	r3, [pc, #40]	; (8008f58 <prvInitialiseTaskLists+0x7c>)
 8008f2e:	4a05      	ldr	r2, [pc, #20]	; (8008f44 <prvInitialiseTaskLists+0x68>)
 8008f30:	601a      	str	r2, [r3, #0]
}
 8008f32:	bf00      	nop
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	200009dc 	.word	0x200009dc
 8008f40:	20000e3c 	.word	0x20000e3c
 8008f44:	20000e50 	.word	0x20000e50
 8008f48:	20000e6c 	.word	0x20000e6c
 8008f4c:	20000e80 	.word	0x20000e80
 8008f50:	20000e98 	.word	0x20000e98
 8008f54:	20000e64 	.word	0x20000e64
 8008f58:	20000e68 	.word	0x20000e68

08008f5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f62:	e019      	b.n	8008f98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f64:	f000 fdd6 	bl	8009b14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f68:	4b10      	ldr	r3, [pc, #64]	; (8008fac <prvCheckTasksWaitingTermination+0x50>)
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3304      	adds	r3, #4
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fe fd3b 	bl	80079f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <prvCheckTasksWaitingTermination+0x54>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	4a0b      	ldr	r2, [pc, #44]	; (8008fb0 <prvCheckTasksWaitingTermination+0x54>)
 8008f82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f84:	4b0b      	ldr	r3, [pc, #44]	; (8008fb4 <prvCheckTasksWaitingTermination+0x58>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	4a0a      	ldr	r2, [pc, #40]	; (8008fb4 <prvCheckTasksWaitingTermination+0x58>)
 8008f8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f8e:	f000 fdf1 	bl	8009b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f810 	bl	8008fb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f98:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <prvCheckTasksWaitingTermination+0x58>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e1      	bne.n	8008f64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fa0:	bf00      	nop
 8008fa2:	bf00      	nop
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20000e80 	.word	0x20000e80
 8008fb0:	20000eac 	.word	0x20000eac
 8008fb4:	20000e94 	.word	0x20000e94

08008fb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d108      	bne.n	8008fdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 ff8e 	bl	8009ef0 <vPortFree>
				vPortFree( pxTCB );
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 ff8b 	bl	8009ef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fda:	e018      	b.n	800900e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d103      	bne.n	8008fee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 ff82 	bl	8009ef0 <vPortFree>
	}
 8008fec:	e00f      	b.n	800900e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d00a      	beq.n	800900e <prvDeleteTCB+0x56>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	60fb      	str	r3, [r7, #12]
}
 800900a:	bf00      	nop
 800900c:	e7fe      	b.n	800900c <prvDeleteTCB+0x54>
	}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800901e:	4b0c      	ldr	r3, [pc, #48]	; (8009050 <prvResetNextTaskUnblockTime+0x38>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d104      	bne.n	8009032 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009028:	4b0a      	ldr	r3, [pc, #40]	; (8009054 <prvResetNextTaskUnblockTime+0x3c>)
 800902a:	f04f 32ff 	mov.w	r2, #4294967295
 800902e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009030:	e008      	b.n	8009044 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009032:	4b07      	ldr	r3, [pc, #28]	; (8009050 <prvResetNextTaskUnblockTime+0x38>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	4a04      	ldr	r2, [pc, #16]	; (8009054 <prvResetNextTaskUnblockTime+0x3c>)
 8009042:	6013      	str	r3, [r2, #0]
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	20000e64 	.word	0x20000e64
 8009054:	20000ecc 	.word	0x20000ecc

08009058 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800905e:	4b0b      	ldr	r3, [pc, #44]	; (800908c <xTaskGetSchedulerState+0x34>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d102      	bne.n	800906c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009066:	2301      	movs	r3, #1
 8009068:	607b      	str	r3, [r7, #4]
 800906a:	e008      	b.n	800907e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800906c:	4b08      	ldr	r3, [pc, #32]	; (8009090 <xTaskGetSchedulerState+0x38>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d102      	bne.n	800907a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009074:	2302      	movs	r3, #2
 8009076:	607b      	str	r3, [r7, #4]
 8009078:	e001      	b.n	800907e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800907a:	2300      	movs	r3, #0
 800907c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800907e:	687b      	ldr	r3, [r7, #4]
	}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	20000eb8 	.word	0x20000eb8
 8009090:	20000ed4 	.word	0x20000ed4

08009094 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090a0:	2300      	movs	r3, #0
 80090a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d056      	beq.n	8009158 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090aa:	4b2e      	ldr	r3, [pc, #184]	; (8009164 <xTaskPriorityDisinherit+0xd0>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d00a      	beq.n	80090ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	60fb      	str	r3, [r7, #12]
}
 80090c6:	bf00      	nop
 80090c8:	e7fe      	b.n	80090c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10a      	bne.n	80090e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	60bb      	str	r3, [r7, #8]
}
 80090e4:	bf00      	nop
 80090e6:	e7fe      	b.n	80090e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ec:	1e5a      	subs	r2, r3, #1
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d02c      	beq.n	8009158 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009102:	2b00      	cmp	r3, #0
 8009104:	d128      	bne.n	8009158 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	3304      	adds	r3, #4
 800910a:	4618      	mov	r0, r3
 800910c:	f7fe fc70 	bl	80079f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009128:	4b0f      	ldr	r3, [pc, #60]	; (8009168 <xTaskPriorityDisinherit+0xd4>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	429a      	cmp	r2, r3
 800912e:	d903      	bls.n	8009138 <xTaskPriorityDisinherit+0xa4>
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	4a0c      	ldr	r2, [pc, #48]	; (8009168 <xTaskPriorityDisinherit+0xd4>)
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4a09      	ldr	r2, [pc, #36]	; (800916c <xTaskPriorityDisinherit+0xd8>)
 8009146:	441a      	add	r2, r3
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	3304      	adds	r3, #4
 800914c:	4619      	mov	r1, r3
 800914e:	4610      	mov	r0, r2
 8009150:	f7fe fbf1 	bl	8007936 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009154:	2301      	movs	r3, #1
 8009156:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009158:	697b      	ldr	r3, [r7, #20]
	}
 800915a:	4618      	mov	r0, r3
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	200009d8 	.word	0x200009d8
 8009168:	20000eb4 	.word	0x20000eb4
 800916c:	200009dc 	.word	0x200009dc

08009170 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800917a:	4b21      	ldr	r3, [pc, #132]	; (8009200 <prvAddCurrentTaskToDelayedList+0x90>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009180:	4b20      	ldr	r3, [pc, #128]	; (8009204 <prvAddCurrentTaskToDelayedList+0x94>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3304      	adds	r3, #4
 8009186:	4618      	mov	r0, r3
 8009188:	f7fe fc32 	bl	80079f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009192:	d10a      	bne.n	80091aa <prvAddCurrentTaskToDelayedList+0x3a>
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d007      	beq.n	80091aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800919a:	4b1a      	ldr	r3, [pc, #104]	; (8009204 <prvAddCurrentTaskToDelayedList+0x94>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3304      	adds	r3, #4
 80091a0:	4619      	mov	r1, r3
 80091a2:	4819      	ldr	r0, [pc, #100]	; (8009208 <prvAddCurrentTaskToDelayedList+0x98>)
 80091a4:	f7fe fbc7 	bl	8007936 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091a8:	e026      	b.n	80091f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4413      	add	r3, r2
 80091b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091b2:	4b14      	ldr	r3, [pc, #80]	; (8009204 <prvAddCurrentTaskToDelayedList+0x94>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d209      	bcs.n	80091d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091c2:	4b12      	ldr	r3, [pc, #72]	; (800920c <prvAddCurrentTaskToDelayedList+0x9c>)
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <prvAddCurrentTaskToDelayedList+0x94>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4619      	mov	r1, r3
 80091ce:	4610      	mov	r0, r2
 80091d0:	f7fe fbd5 	bl	800797e <vListInsert>
}
 80091d4:	e010      	b.n	80091f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091d6:	4b0e      	ldr	r3, [pc, #56]	; (8009210 <prvAddCurrentTaskToDelayedList+0xa0>)
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	4b0a      	ldr	r3, [pc, #40]	; (8009204 <prvAddCurrentTaskToDelayedList+0x94>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3304      	adds	r3, #4
 80091e0:	4619      	mov	r1, r3
 80091e2:	4610      	mov	r0, r2
 80091e4:	f7fe fbcb 	bl	800797e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091e8:	4b0a      	ldr	r3, [pc, #40]	; (8009214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d202      	bcs.n	80091f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091f2:	4a08      	ldr	r2, [pc, #32]	; (8009214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	6013      	str	r3, [r2, #0]
}
 80091f8:	bf00      	nop
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20000eb0 	.word	0x20000eb0
 8009204:	200009d8 	.word	0x200009d8
 8009208:	20000e98 	.word	0x20000e98
 800920c:	20000e68 	.word	0x20000e68
 8009210:	20000e64 	.word	0x20000e64
 8009214:	20000ecc 	.word	0x20000ecc

08009218 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08a      	sub	sp, #40	; 0x28
 800921c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800921e:	2300      	movs	r3, #0
 8009220:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009222:	f000 fb07 	bl	8009834 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009226:	4b1c      	ldr	r3, [pc, #112]	; (8009298 <xTimerCreateTimerTask+0x80>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d021      	beq.n	8009272 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800922e:	2300      	movs	r3, #0
 8009230:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009232:	2300      	movs	r3, #0
 8009234:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009236:	1d3a      	adds	r2, r7, #4
 8009238:	f107 0108 	add.w	r1, r7, #8
 800923c:	f107 030c 	add.w	r3, r7, #12
 8009240:	4618      	mov	r0, r3
 8009242:	f7fe fb31 	bl	80078a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009246:	6879      	ldr	r1, [r7, #4]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	9202      	str	r2, [sp, #8]
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	2302      	movs	r3, #2
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	2300      	movs	r3, #0
 8009256:	460a      	mov	r2, r1
 8009258:	4910      	ldr	r1, [pc, #64]	; (800929c <xTimerCreateTimerTask+0x84>)
 800925a:	4811      	ldr	r0, [pc, #68]	; (80092a0 <xTimerCreateTimerTask+0x88>)
 800925c:	f7ff f8de 	bl	800841c <xTaskCreateStatic>
 8009260:	4603      	mov	r3, r0
 8009262:	4a10      	ldr	r2, [pc, #64]	; (80092a4 <xTimerCreateTimerTask+0x8c>)
 8009264:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009266:	4b0f      	ldr	r3, [pc, #60]	; (80092a4 <xTimerCreateTimerTask+0x8c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800926e:	2301      	movs	r3, #1
 8009270:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10a      	bne.n	800928e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	613b      	str	r3, [r7, #16]
}
 800928a:	bf00      	nop
 800928c:	e7fe      	b.n	800928c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800928e:	697b      	ldr	r3, [r7, #20]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	20000f08 	.word	0x20000f08
 800929c:	0800ab18 	.word	0x0800ab18
 80092a0:	080093dd 	.word	0x080093dd
 80092a4:	20000f0c 	.word	0x20000f0c

080092a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08a      	sub	sp, #40	; 0x28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092b6:	2300      	movs	r3, #0
 80092b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	623b      	str	r3, [r7, #32]
}
 80092d2:	bf00      	nop
 80092d4:	e7fe      	b.n	80092d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092d6:	4b1a      	ldr	r3, [pc, #104]	; (8009340 <xTimerGenericCommand+0x98>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d02a      	beq.n	8009334 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b05      	cmp	r3, #5
 80092ee:	dc18      	bgt.n	8009322 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092f0:	f7ff feb2 	bl	8009058 <xTaskGetSchedulerState>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d109      	bne.n	800930e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092fa:	4b11      	ldr	r3, [pc, #68]	; (8009340 <xTimerGenericCommand+0x98>)
 80092fc:	6818      	ldr	r0, [r3, #0]
 80092fe:	f107 0110 	add.w	r1, r7, #16
 8009302:	2300      	movs	r3, #0
 8009304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009306:	f7fe fca1 	bl	8007c4c <xQueueGenericSend>
 800930a:	6278      	str	r0, [r7, #36]	; 0x24
 800930c:	e012      	b.n	8009334 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800930e:	4b0c      	ldr	r3, [pc, #48]	; (8009340 <xTimerGenericCommand+0x98>)
 8009310:	6818      	ldr	r0, [r3, #0]
 8009312:	f107 0110 	add.w	r1, r7, #16
 8009316:	2300      	movs	r3, #0
 8009318:	2200      	movs	r2, #0
 800931a:	f7fe fc97 	bl	8007c4c <xQueueGenericSend>
 800931e:	6278      	str	r0, [r7, #36]	; 0x24
 8009320:	e008      	b.n	8009334 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009322:	4b07      	ldr	r3, [pc, #28]	; (8009340 <xTimerGenericCommand+0x98>)
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	f107 0110 	add.w	r1, r7, #16
 800932a:	2300      	movs	r3, #0
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	f7fe fd8b 	bl	8007e48 <xQueueGenericSendFromISR>
 8009332:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009336:	4618      	mov	r0, r3
 8009338:	3728      	adds	r7, #40	; 0x28
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20000f08 	.word	0x20000f08

08009344 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af02      	add	r7, sp, #8
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800934e:	4b22      	ldr	r3, [pc, #136]	; (80093d8 <prvProcessExpiredTimer+0x94>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	3304      	adds	r3, #4
 800935c:	4618      	mov	r0, r3
 800935e:	f7fe fb47 	bl	80079f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009368:	f003 0304 	and.w	r3, r3, #4
 800936c:	2b00      	cmp	r3, #0
 800936e:	d022      	beq.n	80093b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	699a      	ldr	r2, [r3, #24]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	18d1      	adds	r1, r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	6978      	ldr	r0, [r7, #20]
 800937e:	f000 f8d1 	bl	8009524 <prvInsertTimerInActiveList>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01f      	beq.n	80093c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009388:	2300      	movs	r3, #0
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	2300      	movs	r3, #0
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	2100      	movs	r1, #0
 8009392:	6978      	ldr	r0, [r7, #20]
 8009394:	f7ff ff88 	bl	80092a8 <xTimerGenericCommand>
 8009398:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d113      	bne.n	80093c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	60fb      	str	r3, [r7, #12]
}
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093bc:	f023 0301 	bic.w	r3, r3, #1
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	6a1b      	ldr	r3, [r3, #32]
 80093cc:	6978      	ldr	r0, [r7, #20]
 80093ce:	4798      	blx	r3
}
 80093d0:	bf00      	nop
 80093d2:	3718      	adds	r7, #24
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	20000f00 	.word	0x20000f00

080093dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093e4:	f107 0308 	add.w	r3, r7, #8
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 f857 	bl	800949c <prvGetNextExpireTime>
 80093ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	4619      	mov	r1, r3
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f803 	bl	8009400 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093fa:	f000 f8d5 	bl	80095a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093fe:	e7f1      	b.n	80093e4 <prvTimerTask+0x8>

08009400 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800940a:	f7ff fa43 	bl	8008894 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800940e:	f107 0308 	add.w	r3, r7, #8
 8009412:	4618      	mov	r0, r3
 8009414:	f000 f866 	bl	80094e4 <prvSampleTimeNow>
 8009418:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d130      	bne.n	8009482 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10a      	bne.n	800943c <prvProcessTimerOrBlockTask+0x3c>
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	429a      	cmp	r2, r3
 800942c:	d806      	bhi.n	800943c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800942e:	f7ff fa3f 	bl	80088b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009432:	68f9      	ldr	r1, [r7, #12]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff ff85 	bl	8009344 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800943a:	e024      	b.n	8009486 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d008      	beq.n	8009454 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009442:	4b13      	ldr	r3, [pc, #76]	; (8009490 <prvProcessTimerOrBlockTask+0x90>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d101      	bne.n	8009450 <prvProcessTimerOrBlockTask+0x50>
 800944c:	2301      	movs	r3, #1
 800944e:	e000      	b.n	8009452 <prvProcessTimerOrBlockTask+0x52>
 8009450:	2300      	movs	r3, #0
 8009452:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009454:	4b0f      	ldr	r3, [pc, #60]	; (8009494 <prvProcessTimerOrBlockTask+0x94>)
 8009456:	6818      	ldr	r0, [r3, #0]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	4619      	mov	r1, r3
 8009462:	f7fe ffa7 	bl	80083b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009466:	f7ff fa23 	bl	80088b0 <xTaskResumeAll>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10a      	bne.n	8009486 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009470:	4b09      	ldr	r3, [pc, #36]	; (8009498 <prvProcessTimerOrBlockTask+0x98>)
 8009472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009476:	601a      	str	r2, [r3, #0]
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	f3bf 8f6f 	isb	sy
}
 8009480:	e001      	b.n	8009486 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009482:	f7ff fa15 	bl	80088b0 <xTaskResumeAll>
}
 8009486:	bf00      	nop
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	20000f04 	.word	0x20000f04
 8009494:	20000f08 	.word	0x20000f08
 8009498:	e000ed04 	.word	0xe000ed04

0800949c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094a4:	4b0e      	ldr	r3, [pc, #56]	; (80094e0 <prvGetNextExpireTime+0x44>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <prvGetNextExpireTime+0x16>
 80094ae:	2201      	movs	r2, #1
 80094b0:	e000      	b.n	80094b4 <prvGetNextExpireTime+0x18>
 80094b2:	2200      	movs	r2, #0
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d105      	bne.n	80094cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094c0:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <prvGetNextExpireTime+0x44>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	e001      	b.n	80094d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094d0:	68fb      	ldr	r3, [r7, #12]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	20000f00 	.word	0x20000f00

080094e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094ec:	f7ff fa7e 	bl	80089ec <xTaskGetTickCount>
 80094f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094f2:	4b0b      	ldr	r3, [pc, #44]	; (8009520 <prvSampleTimeNow+0x3c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d205      	bcs.n	8009508 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094fc:	f000 f936 	bl	800976c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	e002      	b.n	800950e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800950e:	4a04      	ldr	r2, [pc, #16]	; (8009520 <prvSampleTimeNow+0x3c>)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009514:	68fb      	ldr	r3, [r7, #12]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	20000f10 	.word	0x20000f10

08009524 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
 8009530:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009532:	2300      	movs	r3, #0
 8009534:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	429a      	cmp	r2, r3
 8009548:	d812      	bhi.n	8009570 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	1ad2      	subs	r2, r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	429a      	cmp	r2, r3
 8009556:	d302      	bcc.n	800955e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009558:	2301      	movs	r3, #1
 800955a:	617b      	str	r3, [r7, #20]
 800955c:	e01b      	b.n	8009596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800955e:	4b10      	ldr	r3, [pc, #64]	; (80095a0 <prvInsertTimerInActiveList+0x7c>)
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	3304      	adds	r3, #4
 8009566:	4619      	mov	r1, r3
 8009568:	4610      	mov	r0, r2
 800956a:	f7fe fa08 	bl	800797e <vListInsert>
 800956e:	e012      	b.n	8009596 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	429a      	cmp	r2, r3
 8009576:	d206      	bcs.n	8009586 <prvInsertTimerInActiveList+0x62>
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d302      	bcc.n	8009586 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009580:	2301      	movs	r3, #1
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	e007      	b.n	8009596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009586:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <prvInsertTimerInActiveList+0x80>)
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	3304      	adds	r3, #4
 800958e:	4619      	mov	r1, r3
 8009590:	4610      	mov	r0, r2
 8009592:	f7fe f9f4 	bl	800797e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009596:	697b      	ldr	r3, [r7, #20]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	20000f04 	.word	0x20000f04
 80095a4:	20000f00 	.word	0x20000f00

080095a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08e      	sub	sp, #56	; 0x38
 80095ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095ae:	e0ca      	b.n	8009746 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	da18      	bge.n	80095e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095b6:	1d3b      	adds	r3, r7, #4
 80095b8:	3304      	adds	r3, #4
 80095ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10a      	bne.n	80095d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	61fb      	str	r3, [r7, #28]
}
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095de:	6850      	ldr	r0, [r2, #4]
 80095e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095e2:	6892      	ldr	r2, [r2, #8]
 80095e4:	4611      	mov	r1, r2
 80095e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f2c0 80aa 	blt.w	8009744 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	695b      	ldr	r3, [r3, #20]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d004      	beq.n	8009606 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	3304      	adds	r3, #4
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe f9f5 	bl	80079f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009606:	463b      	mov	r3, r7
 8009608:	4618      	mov	r0, r3
 800960a:	f7ff ff6b 	bl	80094e4 <prvSampleTimeNow>
 800960e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b09      	cmp	r3, #9
 8009614:	f200 8097 	bhi.w	8009746 <prvProcessReceivedCommands+0x19e>
 8009618:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <prvProcessReceivedCommands+0x78>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009649 	.word	0x08009649
 8009624:	08009649 	.word	0x08009649
 8009628:	08009649 	.word	0x08009649
 800962c:	080096bd 	.word	0x080096bd
 8009630:	080096d1 	.word	0x080096d1
 8009634:	0800971b 	.word	0x0800971b
 8009638:	08009649 	.word	0x08009649
 800963c:	08009649 	.word	0x08009649
 8009640:	080096bd 	.word	0x080096bd
 8009644:	080096d1 	.word	0x080096d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800964e:	f043 0301 	orr.w	r3, r3, #1
 8009652:	b2da      	uxtb	r2, r3
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	18d1      	adds	r1, r2, r3
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009668:	f7ff ff5c 	bl	8009524 <prvInsertTimerInActiveList>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d069      	beq.n	8009746 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009678:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b00      	cmp	r3, #0
 8009686:	d05e      	beq.n	8009746 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	441a      	add	r2, r3
 8009690:	2300      	movs	r3, #0
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	2300      	movs	r3, #0
 8009696:	2100      	movs	r1, #0
 8009698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800969a:	f7ff fe05 	bl	80092a8 <xTimerGenericCommand>
 800969e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d14f      	bne.n	8009746 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	61bb      	str	r3, [r7, #24]
}
 80096b8:	bf00      	nop
 80096ba:	e7fe      	b.n	80096ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096c2:	f023 0301 	bic.w	r3, r3, #1
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80096ce:	e03a      	b.n	8009746 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10a      	bne.n	8009706 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	617b      	str	r3, [r7, #20]
}
 8009702:	bf00      	nop
 8009704:	e7fe      	b.n	8009704 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009708:	699a      	ldr	r2, [r3, #24]
 800970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970c:	18d1      	adds	r1, r2, r3
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009714:	f7ff ff06 	bl	8009524 <prvInsertTimerInActiveList>
					break;
 8009718:	e015      	b.n	8009746 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b00      	cmp	r3, #0
 8009726:	d103      	bne.n	8009730 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800972a:	f000 fbe1 	bl	8009ef0 <vPortFree>
 800972e:	e00a      	b.n	8009746 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009736:	f023 0301 	bic.w	r3, r3, #1
 800973a:	b2da      	uxtb	r2, r3
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009742:	e000      	b.n	8009746 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009744:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009746:	4b08      	ldr	r3, [pc, #32]	; (8009768 <prvProcessReceivedCommands+0x1c0>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	1d39      	adds	r1, r7, #4
 800974c:	2200      	movs	r2, #0
 800974e:	4618      	mov	r0, r3
 8009750:	f7fe fc16 	bl	8007f80 <xQueueReceive>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	f47f af2a 	bne.w	80095b0 <prvProcessReceivedCommands+0x8>
	}
}
 800975c:	bf00      	nop
 800975e:	bf00      	nop
 8009760:	3730      	adds	r7, #48	; 0x30
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20000f08 	.word	0x20000f08

0800976c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009772:	e048      	b.n	8009806 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009774:	4b2d      	ldr	r3, [pc, #180]	; (800982c <prvSwitchTimerLists+0xc0>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800977e:	4b2b      	ldr	r3, [pc, #172]	; (800982c <prvSwitchTimerLists+0xc0>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	3304      	adds	r3, #4
 800978c:	4618      	mov	r0, r3
 800978e:	f7fe f92f 	bl	80079f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097a0:	f003 0304 	and.w	r3, r3, #4
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d02e      	beq.n	8009806 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	4413      	add	r3, r2
 80097b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d90e      	bls.n	80097d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097c6:	4b19      	ldr	r3, [pc, #100]	; (800982c <prvSwitchTimerLists+0xc0>)
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3304      	adds	r3, #4
 80097ce:	4619      	mov	r1, r3
 80097d0:	4610      	mov	r0, r2
 80097d2:	f7fe f8d4 	bl	800797e <vListInsert>
 80097d6:	e016      	b.n	8009806 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097d8:	2300      	movs	r3, #0
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	2300      	movs	r3, #0
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	2100      	movs	r1, #0
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f7ff fd60 	bl	80092a8 <xTimerGenericCommand>
 80097e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10a      	bne.n	8009806 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	603b      	str	r3, [r7, #0]
}
 8009802:	bf00      	nop
 8009804:	e7fe      	b.n	8009804 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009806:	4b09      	ldr	r3, [pc, #36]	; (800982c <prvSwitchTimerLists+0xc0>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1b1      	bne.n	8009774 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009810:	4b06      	ldr	r3, [pc, #24]	; (800982c <prvSwitchTimerLists+0xc0>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009816:	4b06      	ldr	r3, [pc, #24]	; (8009830 <prvSwitchTimerLists+0xc4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a04      	ldr	r2, [pc, #16]	; (800982c <prvSwitchTimerLists+0xc0>)
 800981c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800981e:	4a04      	ldr	r2, [pc, #16]	; (8009830 <prvSwitchTimerLists+0xc4>)
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	6013      	str	r3, [r2, #0]
}
 8009824:	bf00      	nop
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	20000f00 	.word	0x20000f00
 8009830:	20000f04 	.word	0x20000f04

08009834 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800983a:	f000 f96b 	bl	8009b14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800983e:	4b15      	ldr	r3, [pc, #84]	; (8009894 <prvCheckForValidListAndQueue+0x60>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d120      	bne.n	8009888 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009846:	4814      	ldr	r0, [pc, #80]	; (8009898 <prvCheckForValidListAndQueue+0x64>)
 8009848:	f7fe f848 	bl	80078dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800984c:	4813      	ldr	r0, [pc, #76]	; (800989c <prvCheckForValidListAndQueue+0x68>)
 800984e:	f7fe f845 	bl	80078dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009852:	4b13      	ldr	r3, [pc, #76]	; (80098a0 <prvCheckForValidListAndQueue+0x6c>)
 8009854:	4a10      	ldr	r2, [pc, #64]	; (8009898 <prvCheckForValidListAndQueue+0x64>)
 8009856:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009858:	4b12      	ldr	r3, [pc, #72]	; (80098a4 <prvCheckForValidListAndQueue+0x70>)
 800985a:	4a10      	ldr	r2, [pc, #64]	; (800989c <prvCheckForValidListAndQueue+0x68>)
 800985c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800985e:	2300      	movs	r3, #0
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	4b11      	ldr	r3, [pc, #68]	; (80098a8 <prvCheckForValidListAndQueue+0x74>)
 8009864:	4a11      	ldr	r2, [pc, #68]	; (80098ac <prvCheckForValidListAndQueue+0x78>)
 8009866:	2110      	movs	r1, #16
 8009868:	200a      	movs	r0, #10
 800986a:	f7fe f953 	bl	8007b14 <xQueueGenericCreateStatic>
 800986e:	4603      	mov	r3, r0
 8009870:	4a08      	ldr	r2, [pc, #32]	; (8009894 <prvCheckForValidListAndQueue+0x60>)
 8009872:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009874:	4b07      	ldr	r3, [pc, #28]	; (8009894 <prvCheckForValidListAndQueue+0x60>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800987c:	4b05      	ldr	r3, [pc, #20]	; (8009894 <prvCheckForValidListAndQueue+0x60>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	490b      	ldr	r1, [pc, #44]	; (80098b0 <prvCheckForValidListAndQueue+0x7c>)
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe fd6c 	bl	8008360 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009888:	f000 f974 	bl	8009b74 <vPortExitCritical>
}
 800988c:	bf00      	nop
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20000f08 	.word	0x20000f08
 8009898:	20000ed8 	.word	0x20000ed8
 800989c:	20000eec 	.word	0x20000eec
 80098a0:	20000f00 	.word	0x20000f00
 80098a4:	20000f04 	.word	0x20000f04
 80098a8:	20000fb4 	.word	0x20000fb4
 80098ac:	20000f14 	.word	0x20000f14
 80098b0:	0800ab20 	.word	0x0800ab20

080098b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3b04      	subs	r3, #4
 80098c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3b04      	subs	r3, #4
 80098d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f023 0201 	bic.w	r2, r3, #1
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	3b04      	subs	r3, #4
 80098e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098e4:	4a0c      	ldr	r2, [pc, #48]	; (8009918 <pxPortInitialiseStack+0x64>)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3b14      	subs	r3, #20
 80098ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3b04      	subs	r3, #4
 80098fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f06f 0202 	mvn.w	r2, #2
 8009902:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	3b20      	subs	r3, #32
 8009908:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800990a:	68fb      	ldr	r3, [r7, #12]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	0800991d 	.word	0x0800991d

0800991c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009926:	4b12      	ldr	r3, [pc, #72]	; (8009970 <prvTaskExitError+0x54>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992e:	d00a      	beq.n	8009946 <prvTaskExitError+0x2a>
	__asm volatile
 8009930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	60fb      	str	r3, [r7, #12]
}
 8009942:	bf00      	nop
 8009944:	e7fe      	b.n	8009944 <prvTaskExitError+0x28>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	60bb      	str	r3, [r7, #8]
}
 8009958:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800995a:	bf00      	nop
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0fc      	beq.n	800995c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009962:	bf00      	nop
 8009964:	bf00      	nop
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	200000bc 	.word	0x200000bc
	...

08009980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009980:	4b07      	ldr	r3, [pc, #28]	; (80099a0 <pxCurrentTCBConst2>)
 8009982:	6819      	ldr	r1, [r3, #0]
 8009984:	6808      	ldr	r0, [r1, #0]
 8009986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998a:	f380 8809 	msr	PSP, r0
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f04f 0000 	mov.w	r0, #0
 8009996:	f380 8811 	msr	BASEPRI, r0
 800999a:	4770      	bx	lr
 800999c:	f3af 8000 	nop.w

080099a0 <pxCurrentTCBConst2>:
 80099a0:	200009d8 	.word	0x200009d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop

080099a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099a8:	4808      	ldr	r0, [pc, #32]	; (80099cc <prvPortStartFirstTask+0x24>)
 80099aa:	6800      	ldr	r0, [r0, #0]
 80099ac:	6800      	ldr	r0, [r0, #0]
 80099ae:	f380 8808 	msr	MSP, r0
 80099b2:	f04f 0000 	mov.w	r0, #0
 80099b6:	f380 8814 	msr	CONTROL, r0
 80099ba:	b662      	cpsie	i
 80099bc:	b661      	cpsie	f
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	df00      	svc	0
 80099c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099ca:	bf00      	nop
 80099cc:	e000ed08 	.word	0xe000ed08

080099d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099d6:	4b46      	ldr	r3, [pc, #280]	; (8009af0 <xPortStartScheduler+0x120>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a46      	ldr	r2, [pc, #280]	; (8009af4 <xPortStartScheduler+0x124>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10a      	bne.n	80099f6 <xPortStartScheduler+0x26>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	613b      	str	r3, [r7, #16]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099f6:	4b3e      	ldr	r3, [pc, #248]	; (8009af0 <xPortStartScheduler+0x120>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a3f      	ldr	r2, [pc, #252]	; (8009af8 <xPortStartScheduler+0x128>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d10a      	bne.n	8009a16 <xPortStartScheduler+0x46>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	60fb      	str	r3, [r7, #12]
}
 8009a12:	bf00      	nop
 8009a14:	e7fe      	b.n	8009a14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a16:	4b39      	ldr	r3, [pc, #228]	; (8009afc <xPortStartScheduler+0x12c>)
 8009a18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	22ff      	movs	r2, #255	; 0xff
 8009a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	4b31      	ldr	r3, [pc, #196]	; (8009b00 <xPortStartScheduler+0x130>)
 8009a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a3e:	4b31      	ldr	r3, [pc, #196]	; (8009b04 <xPortStartScheduler+0x134>)
 8009a40:	2207      	movs	r2, #7
 8009a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a44:	e009      	b.n	8009a5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a46:	4b2f      	ldr	r3, [pc, #188]	; (8009b04 <xPortStartScheduler+0x134>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	4a2d      	ldr	r2, [pc, #180]	; (8009b04 <xPortStartScheduler+0x134>)
 8009a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a62:	2b80      	cmp	r3, #128	; 0x80
 8009a64:	d0ef      	beq.n	8009a46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a66:	4b27      	ldr	r3, [pc, #156]	; (8009b04 <xPortStartScheduler+0x134>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f1c3 0307 	rsb	r3, r3, #7
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	d00a      	beq.n	8009a88 <xPortStartScheduler+0xb8>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	60bb      	str	r3, [r7, #8]
}
 8009a84:	bf00      	nop
 8009a86:	e7fe      	b.n	8009a86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a88:	4b1e      	ldr	r3, [pc, #120]	; (8009b04 <xPortStartScheduler+0x134>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	021b      	lsls	r3, r3, #8
 8009a8e:	4a1d      	ldr	r2, [pc, #116]	; (8009b04 <xPortStartScheduler+0x134>)
 8009a90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a92:	4b1c      	ldr	r3, [pc, #112]	; (8009b04 <xPortStartScheduler+0x134>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a9a:	4a1a      	ldr	r2, [pc, #104]	; (8009b04 <xPortStartScheduler+0x134>)
 8009a9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009aa6:	4b18      	ldr	r3, [pc, #96]	; (8009b08 <xPortStartScheduler+0x138>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a17      	ldr	r2, [pc, #92]	; (8009b08 <xPortStartScheduler+0x138>)
 8009aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ab2:	4b15      	ldr	r3, [pc, #84]	; (8009b08 <xPortStartScheduler+0x138>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a14      	ldr	r2, [pc, #80]	; (8009b08 <xPortStartScheduler+0x138>)
 8009ab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009abc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009abe:	f000 f8dd 	bl	8009c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ac2:	4b12      	ldr	r3, [pc, #72]	; (8009b0c <xPortStartScheduler+0x13c>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ac8:	f000 f8fc 	bl	8009cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009acc:	4b10      	ldr	r3, [pc, #64]	; (8009b10 <xPortStartScheduler+0x140>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a0f      	ldr	r2, [pc, #60]	; (8009b10 <xPortStartScheduler+0x140>)
 8009ad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ad8:	f7ff ff66 	bl	80099a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009adc:	f7ff f850 	bl	8008b80 <vTaskSwitchContext>
	prvTaskExitError();
 8009ae0:	f7ff ff1c 	bl	800991c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	e000ed00 	.word	0xe000ed00
 8009af4:	410fc271 	.word	0x410fc271
 8009af8:	410fc270 	.word	0x410fc270
 8009afc:	e000e400 	.word	0xe000e400
 8009b00:	20001004 	.word	0x20001004
 8009b04:	20001008 	.word	0x20001008
 8009b08:	e000ed20 	.word	0xe000ed20
 8009b0c:	200000bc 	.word	0x200000bc
 8009b10:	e000ef34 	.word	0xe000ef34

08009b14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	607b      	str	r3, [r7, #4]
}
 8009b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b2e:	4b0f      	ldr	r3, [pc, #60]	; (8009b6c <vPortEnterCritical+0x58>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3301      	adds	r3, #1
 8009b34:	4a0d      	ldr	r2, [pc, #52]	; (8009b6c <vPortEnterCritical+0x58>)
 8009b36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b38:	4b0c      	ldr	r3, [pc, #48]	; (8009b6c <vPortEnterCritical+0x58>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d10f      	bne.n	8009b60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b40:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <vPortEnterCritical+0x5c>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00a      	beq.n	8009b60 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	603b      	str	r3, [r7, #0]
}
 8009b5c:	bf00      	nop
 8009b5e:	e7fe      	b.n	8009b5e <vPortEnterCritical+0x4a>
	}
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	200000bc 	.word	0x200000bc
 8009b70:	e000ed04 	.word	0xe000ed04

08009b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b7a:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <vPortExitCritical+0x50>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10a      	bne.n	8009b98 <vPortExitCritical+0x24>
	__asm volatile
 8009b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b86:	f383 8811 	msr	BASEPRI, r3
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	607b      	str	r3, [r7, #4]
}
 8009b94:	bf00      	nop
 8009b96:	e7fe      	b.n	8009b96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b98:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <vPortExitCritical+0x50>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	4a09      	ldr	r2, [pc, #36]	; (8009bc4 <vPortExitCritical+0x50>)
 8009ba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ba2:	4b08      	ldr	r3, [pc, #32]	; (8009bc4 <vPortExitCritical+0x50>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d105      	bne.n	8009bb6 <vPortExitCritical+0x42>
 8009baa:	2300      	movs	r3, #0
 8009bac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	f383 8811 	msr	BASEPRI, r3
}
 8009bb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bb6:	bf00      	nop
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	200000bc 	.word	0x200000bc
	...

08009bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bd0:	f3ef 8009 	mrs	r0, PSP
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	4b15      	ldr	r3, [pc, #84]	; (8009c30 <pxCurrentTCBConst>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	f01e 0f10 	tst.w	lr, #16
 8009be0:	bf08      	it	eq
 8009be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	6010      	str	r0, [r2, #0]
 8009bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bf4:	f380 8811 	msr	BASEPRI, r0
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f7fe ffbe 	bl	8008b80 <vTaskSwitchContext>
 8009c04:	f04f 0000 	mov.w	r0, #0
 8009c08:	f380 8811 	msr	BASEPRI, r0
 8009c0c:	bc09      	pop	{r0, r3}
 8009c0e:	6819      	ldr	r1, [r3, #0]
 8009c10:	6808      	ldr	r0, [r1, #0]
 8009c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c16:	f01e 0f10 	tst.w	lr, #16
 8009c1a:	bf08      	it	eq
 8009c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c20:	f380 8809 	msr	PSP, r0
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	f3af 8000 	nop.w

08009c30 <pxCurrentTCBConst>:
 8009c30:	200009d8 	.word	0x200009d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop

08009c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	607b      	str	r3, [r7, #4]
}
 8009c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c52:	f7fe fedb 	bl	8008a0c <xTaskIncrementTick>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d003      	beq.n	8009c64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c5c:	4b06      	ldr	r3, [pc, #24]	; (8009c78 <xPortSysTickHandler+0x40>)
 8009c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	2300      	movs	r3, #0
 8009c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	f383 8811 	msr	BASEPRI, r3
}
 8009c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c70:	bf00      	nop
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	e000ed04 	.word	0xe000ed04

08009c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c80:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <vPortSetupTimerInterrupt+0x34>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c86:	4b0b      	ldr	r3, [pc, #44]	; (8009cb4 <vPortSetupTimerInterrupt+0x38>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c8c:	4b0a      	ldr	r3, [pc, #40]	; (8009cb8 <vPortSetupTimerInterrupt+0x3c>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a0a      	ldr	r2, [pc, #40]	; (8009cbc <vPortSetupTimerInterrupt+0x40>)
 8009c92:	fba2 2303 	umull	r2, r3, r2, r3
 8009c96:	099b      	lsrs	r3, r3, #6
 8009c98:	4a09      	ldr	r2, [pc, #36]	; (8009cc0 <vPortSetupTimerInterrupt+0x44>)
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c9e:	4b04      	ldr	r3, [pc, #16]	; (8009cb0 <vPortSetupTimerInterrupt+0x34>)
 8009ca0:	2207      	movs	r2, #7
 8009ca2:	601a      	str	r2, [r3, #0]
}
 8009ca4:	bf00      	nop
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	e000e010 	.word	0xe000e010
 8009cb4:	e000e018 	.word	0xe000e018
 8009cb8:	20000000 	.word	0x20000000
 8009cbc:	10624dd3 	.word	0x10624dd3
 8009cc0:	e000e014 	.word	0xe000e014

08009cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cd4 <vPortEnableVFP+0x10>
 8009cc8:	6801      	ldr	r1, [r0, #0]
 8009cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cce:	6001      	str	r1, [r0, #0]
 8009cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cd2:	bf00      	nop
 8009cd4:	e000ed88 	.word	0xe000ed88

08009cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cde:	f3ef 8305 	mrs	r3, IPSR
 8009ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b0f      	cmp	r3, #15
 8009ce8:	d914      	bls.n	8009d14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cea:	4a17      	ldr	r2, [pc, #92]	; (8009d48 <vPortValidateInterruptPriority+0x70>)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cf4:	4b15      	ldr	r3, [pc, #84]	; (8009d4c <vPortValidateInterruptPriority+0x74>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	7afa      	ldrb	r2, [r7, #11]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d20a      	bcs.n	8009d14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	607b      	str	r3, [r7, #4]
}
 8009d10:	bf00      	nop
 8009d12:	e7fe      	b.n	8009d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d14:	4b0e      	ldr	r3, [pc, #56]	; (8009d50 <vPortValidateInterruptPriority+0x78>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d1c:	4b0d      	ldr	r3, [pc, #52]	; (8009d54 <vPortValidateInterruptPriority+0x7c>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d90a      	bls.n	8009d3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	603b      	str	r3, [r7, #0]
}
 8009d36:	bf00      	nop
 8009d38:	e7fe      	b.n	8009d38 <vPortValidateInterruptPriority+0x60>
	}
 8009d3a:	bf00      	nop
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	e000e3f0 	.word	0xe000e3f0
 8009d4c:	20001004 	.word	0x20001004
 8009d50:	e000ed0c 	.word	0xe000ed0c
 8009d54:	20001008 	.word	0x20001008

08009d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08a      	sub	sp, #40	; 0x28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d60:	2300      	movs	r3, #0
 8009d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d64:	f7fe fd96 	bl	8008894 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d68:	4b5b      	ldr	r3, [pc, #364]	; (8009ed8 <pvPortMalloc+0x180>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d70:	f000 f920 	bl	8009fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d74:	4b59      	ldr	r3, [pc, #356]	; (8009edc <pvPortMalloc+0x184>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f040 8093 	bne.w	8009ea8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d01d      	beq.n	8009dc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009d88:	2208      	movs	r2, #8
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f003 0307 	and.w	r3, r3, #7
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d014      	beq.n	8009dc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f023 0307 	bic.w	r3, r3, #7
 8009da0:	3308      	adds	r3, #8
 8009da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f003 0307 	and.w	r3, r3, #7
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00a      	beq.n	8009dc4 <pvPortMalloc+0x6c>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	617b      	str	r3, [r7, #20]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d06e      	beq.n	8009ea8 <pvPortMalloc+0x150>
 8009dca:	4b45      	ldr	r3, [pc, #276]	; (8009ee0 <pvPortMalloc+0x188>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d869      	bhi.n	8009ea8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009dd4:	4b43      	ldr	r3, [pc, #268]	; (8009ee4 <pvPortMalloc+0x18c>)
 8009dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009dd8:	4b42      	ldr	r3, [pc, #264]	; (8009ee4 <pvPortMalloc+0x18c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dde:	e004      	b.n	8009dea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d903      	bls.n	8009dfc <pvPortMalloc+0xa4>
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1f1      	bne.n	8009de0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009dfc:	4b36      	ldr	r3, [pc, #216]	; (8009ed8 <pvPortMalloc+0x180>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d050      	beq.n	8009ea8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2208      	movs	r2, #8
 8009e0c:	4413      	add	r3, r2
 8009e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	1ad2      	subs	r2, r2, r3
 8009e20:	2308      	movs	r3, #8
 8009e22:	005b      	lsls	r3, r3, #1
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d91f      	bls.n	8009e68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	f003 0307 	and.w	r3, r3, #7
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00a      	beq.n	8009e50 <pvPortMalloc+0xf8>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	613b      	str	r3, [r7, #16]
}
 8009e4c:	bf00      	nop
 8009e4e:	e7fe      	b.n	8009e4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	1ad2      	subs	r2, r2, r3
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e62:	69b8      	ldr	r0, [r7, #24]
 8009e64:	f000 f908 	bl	800a078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e68:	4b1d      	ldr	r3, [pc, #116]	; (8009ee0 <pvPortMalloc+0x188>)
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	4a1b      	ldr	r2, [pc, #108]	; (8009ee0 <pvPortMalloc+0x188>)
 8009e74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e76:	4b1a      	ldr	r3, [pc, #104]	; (8009ee0 <pvPortMalloc+0x188>)
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	4b1b      	ldr	r3, [pc, #108]	; (8009ee8 <pvPortMalloc+0x190>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d203      	bcs.n	8009e8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e82:	4b17      	ldr	r3, [pc, #92]	; (8009ee0 <pvPortMalloc+0x188>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a18      	ldr	r2, [pc, #96]	; (8009ee8 <pvPortMalloc+0x190>)
 8009e88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	4b13      	ldr	r3, [pc, #76]	; (8009edc <pvPortMalloc+0x184>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	431a      	orrs	r2, r3
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e9e:	4b13      	ldr	r3, [pc, #76]	; (8009eec <pvPortMalloc+0x194>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	4a11      	ldr	r2, [pc, #68]	; (8009eec <pvPortMalloc+0x194>)
 8009ea6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ea8:	f7fe fd02 	bl	80088b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	f003 0307 	and.w	r3, r3, #7
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00a      	beq.n	8009ecc <pvPortMalloc+0x174>
	__asm volatile
 8009eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	60fb      	str	r3, [r7, #12]
}
 8009ec8:	bf00      	nop
 8009eca:	e7fe      	b.n	8009eca <pvPortMalloc+0x172>
	return pvReturn;
 8009ecc:	69fb      	ldr	r3, [r7, #28]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3728      	adds	r7, #40	; 0x28
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20004c14 	.word	0x20004c14
 8009edc:	20004c28 	.word	0x20004c28
 8009ee0:	20004c18 	.word	0x20004c18
 8009ee4:	20004c0c 	.word	0x20004c0c
 8009ee8:	20004c1c 	.word	0x20004c1c
 8009eec:	20004c20 	.word	0x20004c20

08009ef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d04d      	beq.n	8009f9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f02:	2308      	movs	r3, #8
 8009f04:	425b      	negs	r3, r3
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	4413      	add	r3, r2
 8009f0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	685a      	ldr	r2, [r3, #4]
 8009f14:	4b24      	ldr	r3, [pc, #144]	; (8009fa8 <vPortFree+0xb8>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4013      	ands	r3, r2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10a      	bne.n	8009f34 <vPortFree+0x44>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	60fb      	str	r3, [r7, #12]
}
 8009f30:	bf00      	nop
 8009f32:	e7fe      	b.n	8009f32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00a      	beq.n	8009f52 <vPortFree+0x62>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	60bb      	str	r3, [r7, #8]
}
 8009f4e:	bf00      	nop
 8009f50:	e7fe      	b.n	8009f50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	4b14      	ldr	r3, [pc, #80]	; (8009fa8 <vPortFree+0xb8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d01e      	beq.n	8009f9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d11a      	bne.n	8009f9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	4b0e      	ldr	r3, [pc, #56]	; (8009fa8 <vPortFree+0xb8>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	43db      	mvns	r3, r3
 8009f72:	401a      	ands	r2, r3
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f78:	f7fe fc8c 	bl	8008894 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	4b0a      	ldr	r3, [pc, #40]	; (8009fac <vPortFree+0xbc>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4413      	add	r3, r2
 8009f86:	4a09      	ldr	r2, [pc, #36]	; (8009fac <vPortFree+0xbc>)
 8009f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f8a:	6938      	ldr	r0, [r7, #16]
 8009f8c:	f000 f874 	bl	800a078 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f90:	4b07      	ldr	r3, [pc, #28]	; (8009fb0 <vPortFree+0xc0>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3301      	adds	r3, #1
 8009f96:	4a06      	ldr	r2, [pc, #24]	; (8009fb0 <vPortFree+0xc0>)
 8009f98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f9a:	f7fe fc89 	bl	80088b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f9e:	bf00      	nop
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20004c28 	.word	0x20004c28
 8009fac:	20004c18 	.word	0x20004c18
 8009fb0:	20004c24 	.word	0x20004c24

08009fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fc0:	4b27      	ldr	r3, [pc, #156]	; (800a060 <prvHeapInit+0xac>)
 8009fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f003 0307 	and.w	r3, r3, #7
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00c      	beq.n	8009fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3307      	adds	r3, #7
 8009fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 0307 	bic.w	r3, r3, #7
 8009fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	4a1f      	ldr	r2, [pc, #124]	; (800a060 <prvHeapInit+0xac>)
 8009fe4:	4413      	add	r3, r2
 8009fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fec:	4a1d      	ldr	r2, [pc, #116]	; (800a064 <prvHeapInit+0xb0>)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ff2:	4b1c      	ldr	r3, [pc, #112]	; (800a064 <prvHeapInit+0xb0>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a000:	2208      	movs	r2, #8
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	1a9b      	subs	r3, r3, r2
 800a006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f023 0307 	bic.w	r3, r3, #7
 800a00e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4a15      	ldr	r2, [pc, #84]	; (800a068 <prvHeapInit+0xb4>)
 800a014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a016:	4b14      	ldr	r3, [pc, #80]	; (800a068 <prvHeapInit+0xb4>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2200      	movs	r2, #0
 800a01c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a01e:	4b12      	ldr	r3, [pc, #72]	; (800a068 <prvHeapInit+0xb4>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	1ad2      	subs	r2, r2, r3
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a034:	4b0c      	ldr	r3, [pc, #48]	; (800a068 <prvHeapInit+0xb4>)
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	4a0a      	ldr	r2, [pc, #40]	; (800a06c <prvHeapInit+0xb8>)
 800a042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	4a09      	ldr	r2, [pc, #36]	; (800a070 <prvHeapInit+0xbc>)
 800a04a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a04c:	4b09      	ldr	r3, [pc, #36]	; (800a074 <prvHeapInit+0xc0>)
 800a04e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a052:	601a      	str	r2, [r3, #0]
}
 800a054:	bf00      	nop
 800a056:	3714      	adds	r7, #20
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr
 800a060:	2000100c 	.word	0x2000100c
 800a064:	20004c0c 	.word	0x20004c0c
 800a068:	20004c14 	.word	0x20004c14
 800a06c:	20004c1c 	.word	0x20004c1c
 800a070:	20004c18 	.word	0x20004c18
 800a074:	20004c28 	.word	0x20004c28

0800a078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a080:	4b28      	ldr	r3, [pc, #160]	; (800a124 <prvInsertBlockIntoFreeList+0xac>)
 800a082:	60fb      	str	r3, [r7, #12]
 800a084:	e002      	b.n	800a08c <prvInsertBlockIntoFreeList+0x14>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	429a      	cmp	r2, r3
 800a094:	d8f7      	bhi.n	800a086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d108      	bne.n	800a0ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	441a      	add	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	441a      	add	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d118      	bne.n	800a100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	4b15      	ldr	r3, [pc, #84]	; (800a128 <prvInsertBlockIntoFreeList+0xb0>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d00d      	beq.n	800a0f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	685a      	ldr	r2, [r3, #4]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	441a      	add	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	e008      	b.n	800a108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0f6:	4b0c      	ldr	r3, [pc, #48]	; (800a128 <prvInsertBlockIntoFreeList+0xb0>)
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	e003      	b.n	800a108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d002      	beq.n	800a116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a116:	bf00      	nop
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	20004c0c 	.word	0x20004c0c
 800a128:	20004c14 	.word	0x20004c14

0800a12c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a130:	2201      	movs	r2, #1
 800a132:	4912      	ldr	r1, [pc, #72]	; (800a17c <MX_USB_DEVICE_Init+0x50>)
 800a134:	4812      	ldr	r0, [pc, #72]	; (800a180 <MX_USB_DEVICE_Init+0x54>)
 800a136:	f7fc f8e9 	bl	800630c <USBD_Init>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d004      	beq.n	800a14a <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800a140:	4b10      	ldr	r3, [pc, #64]	; (800a184 <MX_USB_DEVICE_Init+0x58>)
 800a142:	2201      	movs	r2, #1
 800a144:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800a146:	f7f6 fc31 	bl	80009ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a14a:	490f      	ldr	r1, [pc, #60]	; (800a188 <MX_USB_DEVICE_Init+0x5c>)
 800a14c:	480c      	ldr	r0, [pc, #48]	; (800a180 <MX_USB_DEVICE_Init+0x54>)
 800a14e:	f7fc f90d 	bl	800636c <USBD_RegisterClass>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d004      	beq.n	800a162 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800a158:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <MX_USB_DEVICE_Init+0x58>)
 800a15a:	2201      	movs	r2, #1
 800a15c:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800a15e:	f7f6 fc25 	bl	80009ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a162:	4807      	ldr	r0, [pc, #28]	; (800a180 <MX_USB_DEVICE_Init+0x54>)
 800a164:	f7fc f929 	bl	80063ba <USBD_Start>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d004      	beq.n	800a178 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800a16e:	4b05      	ldr	r3, [pc, #20]	; (800a184 <MX_USB_DEVICE_Init+0x58>)
 800a170:	2201      	movs	r2, #1
 800a172:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800a174:	f7f6 fc1a 	bl	80009ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a178:	bf00      	nop
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	200000c0 	.word	0x200000c0
 800a180:	20004c30 	.word	0x20004c30
 800a184:	20004c2c 	.word	0x20004c2c
 800a188:	2000000c 	.word	0x2000000c

0800a18c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	4603      	mov	r3, r0
 800a194:	6039      	str	r1, [r7, #0]
 800a196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2212      	movs	r2, #18
 800a19c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a19e:	4b03      	ldr	r3, [pc, #12]	; (800a1ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	200000dc 	.word	0x200000dc

0800a1b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	6039      	str	r1, [r7, #0]
 800a1ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2204      	movs	r2, #4
 800a1c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a1c2:	4b03      	ldr	r3, [pc, #12]	; (800a1d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	200000f0 	.word	0x200000f0

0800a1d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	4603      	mov	r3, r0
 800a1dc:	6039      	str	r1, [r7, #0]
 800a1de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1e0:	79fb      	ldrb	r3, [r7, #7]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d105      	bne.n	800a1f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	4907      	ldr	r1, [pc, #28]	; (800a208 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1ea:	4808      	ldr	r0, [pc, #32]	; (800a20c <USBD_FS_ProductStrDescriptor+0x38>)
 800a1ec:	f7fd f925 	bl	800743a <USBD_GetString>
 800a1f0:	e004      	b.n	800a1fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	4904      	ldr	r1, [pc, #16]	; (800a208 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1f6:	4805      	ldr	r0, [pc, #20]	; (800a20c <USBD_FS_ProductStrDescriptor+0x38>)
 800a1f8:	f7fd f91f 	bl	800743a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1fc:	4b02      	ldr	r3, [pc, #8]	; (800a208 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20004f00 	.word	0x20004f00
 800a20c:	0800ab28 	.word	0x0800ab28

0800a210 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	6039      	str	r1, [r7, #0]
 800a21a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	4904      	ldr	r1, [pc, #16]	; (800a230 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a220:	4804      	ldr	r0, [pc, #16]	; (800a234 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a222:	f7fd f90a 	bl	800743a <USBD_GetString>
  return USBD_StrDesc;
 800a226:	4b02      	ldr	r3, [pc, #8]	; (800a230 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20004f00 	.word	0x20004f00
 800a234:	0800ab40 	.word	0x0800ab40

0800a238 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	6039      	str	r1, [r7, #0]
 800a242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	221a      	movs	r2, #26
 800a248:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a24a:	f000 f843 	bl	800a2d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a24e:	4b02      	ldr	r3, [pc, #8]	; (800a258 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a250:	4618      	mov	r0, r3
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	200000f4 	.word	0x200000f4

0800a25c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	6039      	str	r1, [r7, #0]
 800a266:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a268:	79fb      	ldrb	r3, [r7, #7]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d105      	bne.n	800a27a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	4907      	ldr	r1, [pc, #28]	; (800a290 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a272:	4808      	ldr	r0, [pc, #32]	; (800a294 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a274:	f7fd f8e1 	bl	800743a <USBD_GetString>
 800a278:	e004      	b.n	800a284 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4904      	ldr	r1, [pc, #16]	; (800a290 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a27e:	4805      	ldr	r0, [pc, #20]	; (800a294 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a280:	f7fd f8db 	bl	800743a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a284:	4b02      	ldr	r3, [pc, #8]	; (800a290 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a286:	4618      	mov	r0, r3
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20004f00 	.word	0x20004f00
 800a294:	0800ab54 	.word	0x0800ab54

0800a298 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	6039      	str	r1, [r7, #0]
 800a2a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d105      	bne.n	800a2b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	4907      	ldr	r1, [pc, #28]	; (800a2cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2ae:	4808      	ldr	r0, [pc, #32]	; (800a2d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2b0:	f7fd f8c3 	bl	800743a <USBD_GetString>
 800a2b4:	e004      	b.n	800a2c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	4904      	ldr	r1, [pc, #16]	; (800a2cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2ba:	4805      	ldr	r0, [pc, #20]	; (800a2d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2bc:	f7fd f8bd 	bl	800743a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2c0:	4b02      	ldr	r3, [pc, #8]	; (800a2cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20004f00 	.word	0x20004f00
 800a2d0:	0800ab60 	.word	0x0800ab60

0800a2d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a2da:	4b0f      	ldr	r3, [pc, #60]	; (800a318 <Get_SerialNum+0x44>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a2e0:	4b0e      	ldr	r3, [pc, #56]	; (800a31c <Get_SerialNum+0x48>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a2e6:	4b0e      	ldr	r3, [pc, #56]	; (800a320 <Get_SerialNum+0x4c>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d009      	beq.n	800a30e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2fa:	2208      	movs	r2, #8
 800a2fc:	4909      	ldr	r1, [pc, #36]	; (800a324 <Get_SerialNum+0x50>)
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f000 f814 	bl	800a32c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a304:	2204      	movs	r2, #4
 800a306:	4908      	ldr	r1, [pc, #32]	; (800a328 <Get_SerialNum+0x54>)
 800a308:	68b8      	ldr	r0, [r7, #8]
 800a30a:	f000 f80f 	bl	800a32c <IntToUnicode>
  }
}
 800a30e:	bf00      	nop
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	1fff7a10 	.word	0x1fff7a10
 800a31c:	1fff7a14 	.word	0x1fff7a14
 800a320:	1fff7a18 	.word	0x1fff7a18
 800a324:	200000f6 	.word	0x200000f6
 800a328:	20000106 	.word	0x20000106

0800a32c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b087      	sub	sp, #28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a33e:	2300      	movs	r3, #0
 800a340:	75fb      	strb	r3, [r7, #23]
 800a342:	e027      	b.n	800a394 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	0f1b      	lsrs	r3, r3, #28
 800a348:	2b09      	cmp	r3, #9
 800a34a:	d80b      	bhi.n	800a364 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	0f1b      	lsrs	r3, r3, #28
 800a350:	b2da      	uxtb	r2, r3
 800a352:	7dfb      	ldrb	r3, [r7, #23]
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	4619      	mov	r1, r3
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	440b      	add	r3, r1
 800a35c:	3230      	adds	r2, #48	; 0x30
 800a35e:	b2d2      	uxtb	r2, r2
 800a360:	701a      	strb	r2, [r3, #0]
 800a362:	e00a      	b.n	800a37a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	0f1b      	lsrs	r3, r3, #28
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	7dfb      	ldrb	r3, [r7, #23]
 800a36c:	005b      	lsls	r3, r3, #1
 800a36e:	4619      	mov	r1, r3
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	440b      	add	r3, r1
 800a374:	3237      	adds	r2, #55	; 0x37
 800a376:	b2d2      	uxtb	r2, r2
 800a378:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	011b      	lsls	r3, r3, #4
 800a37e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a380:	7dfb      	ldrb	r3, [r7, #23]
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	3301      	adds	r3, #1
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	4413      	add	r3, r2
 800a38a:	2200      	movs	r2, #0
 800a38c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
 800a390:	3301      	adds	r3, #1
 800a392:	75fb      	strb	r3, [r7, #23]
 800a394:	7dfa      	ldrb	r2, [r7, #23]
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d3d3      	bcc.n	800a344 <IntToUnicode+0x18>
  }
}
 800a39c:	bf00      	nop
 800a39e:	bf00      	nop
 800a3a0:	371c      	adds	r7, #28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
	...

0800a3ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b08a      	sub	sp, #40	; 0x28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3b4:	f107 0314 	add.w	r3, r7, #20
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	605a      	str	r2, [r3, #4]
 800a3be:	609a      	str	r2, [r3, #8]
 800a3c0:	60da      	str	r2, [r3, #12]
 800a3c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3cc:	d13a      	bne.n	800a444 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	613b      	str	r3, [r7, #16]
 800a3d2:	4b1e      	ldr	r3, [pc, #120]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d6:	4a1d      	ldr	r2, [pc, #116]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a3d8:	f043 0301 	orr.w	r3, r3, #1
 800a3dc:	6313      	str	r3, [r2, #48]	; 0x30
 800a3de:	4b1b      	ldr	r3, [pc, #108]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	613b      	str	r3, [r7, #16]
 800a3e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a3ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a3ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a3fc:	230a      	movs	r3, #10
 800a3fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a400:	f107 0314 	add.w	r3, r7, #20
 800a404:	4619      	mov	r1, r3
 800a406:	4812      	ldr	r0, [pc, #72]	; (800a450 <HAL_PCD_MspInit+0xa4>)
 800a408:	f7f6 fe18 	bl	800103c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a40c:	4b0f      	ldr	r3, [pc, #60]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a410:	4a0e      	ldr	r2, [pc, #56]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a416:	6353      	str	r3, [r2, #52]	; 0x34
 800a418:	2300      	movs	r3, #0
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	4b0b      	ldr	r3, [pc, #44]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a41e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a420:	4a0a      	ldr	r2, [pc, #40]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a426:	6453      	str	r3, [r2, #68]	; 0x44
 800a428:	4b08      	ldr	r3, [pc, #32]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a42c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a430:	60fb      	str	r3, [r7, #12]
 800a432:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a434:	2200      	movs	r2, #0
 800a436:	2105      	movs	r1, #5
 800a438:	2043      	movs	r0, #67	; 0x43
 800a43a:	f7f6 fdd5 	bl	8000fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a43e:	2043      	movs	r0, #67	; 0x43
 800a440:	f7f6 fdee 	bl	8001020 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a444:	bf00      	nop
 800a446:	3728      	adds	r7, #40	; 0x28
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	40023800 	.word	0x40023800
 800a450:	40020000 	.word	0x40020000

0800a454 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a468:	4619      	mov	r1, r3
 800a46a:	4610      	mov	r0, r2
 800a46c:	f7fb fff0 	bl	8006450 <USBD_LL_SetupStage>
}
 800a470:	bf00      	nop
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	460b      	mov	r3, r1
 800a482:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a48a:	78fa      	ldrb	r2, [r7, #3]
 800a48c:	6879      	ldr	r1, [r7, #4]
 800a48e:	4613      	mov	r3, r2
 800a490:	00db      	lsls	r3, r3, #3
 800a492:	1a9b      	subs	r3, r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	440b      	add	r3, r1
 800a498:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	78fb      	ldrb	r3, [r7, #3]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	f7fc f82a 	bl	80064fa <USBD_LL_DataOutStage>
}
 800a4a6:	bf00      	nop
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b082      	sub	sp, #8
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a4c0:	78fa      	ldrb	r2, [r7, #3]
 800a4c2:	6879      	ldr	r1, [r7, #4]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	00db      	lsls	r3, r3, #3
 800a4c8:	1a9b      	subs	r3, r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	440b      	add	r3, r1
 800a4ce:	3348      	adds	r3, #72	; 0x48
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	78fb      	ldrb	r3, [r7, #3]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	f7fc f873 	bl	80065c0 <USBD_LL_DataInStage>
}
 800a4da:	bf00      	nop
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fc f987 	bl	8006804 <USBD_LL_SOF>
}
 800a4f6:	bf00      	nop
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a506:	2301      	movs	r3, #1
 800a508:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d102      	bne.n	800a518 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a512:	2300      	movs	r3, #0
 800a514:	73fb      	strb	r3, [r7, #15]
 800a516:	e008      	b.n	800a52a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d102      	bne.n	800a526 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a520:	2301      	movs	r3, #1
 800a522:	73fb      	strb	r3, [r7, #15]
 800a524:	e001      	b.n	800a52a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a526:	f7f6 fa41 	bl	80009ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a530:	7bfa      	ldrb	r2, [r7, #15]
 800a532:	4611      	mov	r1, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f7fc f927 	bl	8006788 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a540:	4618      	mov	r0, r3
 800a542:	f7fc f8d3 	bl	80066ec <USBD_LL_Reset>
}
 800a546:	bf00      	nop
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
	...

0800a550 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fc f922 	bl	80067a8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	6812      	ldr	r2, [r2, #0]
 800a572:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a576:	f043 0301 	orr.w	r3, r3, #1
 800a57a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a1b      	ldr	r3, [r3, #32]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d005      	beq.n	800a590 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a584:	4b04      	ldr	r3, [pc, #16]	; (800a598 <HAL_PCD_SuspendCallback+0x48>)
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	4a03      	ldr	r2, [pc, #12]	; (800a598 <HAL_PCD_SuspendCallback+0x48>)
 800a58a:	f043 0306 	orr.w	r3, r3, #6
 800a58e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	e000ed00 	.word	0xe000ed00

0800a59c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fc f912 	bl	80067d4 <USBD_LL_Resume>
}
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5ca:	78fa      	ldrb	r2, [r7, #3]
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fc f960 	bl	8006894 <USBD_LL_IsoOUTIncomplete>
}
 800a5d4:	bf00      	nop
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5ee:	78fa      	ldrb	r2, [r7, #3]
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fc f928 	bl	8006848 <USBD_LL_IsoINIncomplete>
}
 800a5f8:	bf00      	nop
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fc f966 	bl	80068e0 <USBD_LL_DevConnected>
}
 800a614:	bf00      	nop
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fc f963 	bl	80068f6 <USBD_LL_DevDisconnected>
}
 800a630:	bf00      	nop
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d13c      	bne.n	800a6c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a648:	4a20      	ldr	r2, [pc, #128]	; (800a6cc <USBD_LL_Init+0x94>)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a1e      	ldr	r2, [pc, #120]	; (800a6cc <USBD_LL_Init+0x94>)
 800a654:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a658:	4b1c      	ldr	r3, [pc, #112]	; (800a6cc <USBD_LL_Init+0x94>)
 800a65a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a65e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a660:	4b1a      	ldr	r3, [pc, #104]	; (800a6cc <USBD_LL_Init+0x94>)
 800a662:	2206      	movs	r2, #6
 800a664:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a666:	4b19      	ldr	r3, [pc, #100]	; (800a6cc <USBD_LL_Init+0x94>)
 800a668:	2202      	movs	r2, #2
 800a66a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a66c:	4b17      	ldr	r3, [pc, #92]	; (800a6cc <USBD_LL_Init+0x94>)
 800a66e:	2200      	movs	r2, #0
 800a670:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a672:	4b16      	ldr	r3, [pc, #88]	; (800a6cc <USBD_LL_Init+0x94>)
 800a674:	2202      	movs	r2, #2
 800a676:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a678:	4b14      	ldr	r3, [pc, #80]	; (800a6cc <USBD_LL_Init+0x94>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a67e:	4b13      	ldr	r3, [pc, #76]	; (800a6cc <USBD_LL_Init+0x94>)
 800a680:	2200      	movs	r2, #0
 800a682:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a684:	4b11      	ldr	r3, [pc, #68]	; (800a6cc <USBD_LL_Init+0x94>)
 800a686:	2200      	movs	r2, #0
 800a688:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a68a:	4b10      	ldr	r3, [pc, #64]	; (800a6cc <USBD_LL_Init+0x94>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a690:	4b0e      	ldr	r3, [pc, #56]	; (800a6cc <USBD_LL_Init+0x94>)
 800a692:	2200      	movs	r2, #0
 800a694:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a696:	480d      	ldr	r0, [pc, #52]	; (800a6cc <USBD_LL_Init+0x94>)
 800a698:	f7f6 ffa8 	bl	80015ec <HAL_PCD_Init>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a6a2:	f7f6 f983 	bl	80009ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a6a6:	2180      	movs	r1, #128	; 0x80
 800a6a8:	4808      	ldr	r0, [pc, #32]	; (800a6cc <USBD_LL_Init+0x94>)
 800a6aa:	f7f8 f922 	bl	80028f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a6ae:	2240      	movs	r2, #64	; 0x40
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	4806      	ldr	r0, [pc, #24]	; (800a6cc <USBD_LL_Init+0x94>)
 800a6b4:	f7f8 f8d6 	bl	8002864 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a6b8:	2280      	movs	r2, #128	; 0x80
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	4803      	ldr	r0, [pc, #12]	; (800a6cc <USBD_LL_Init+0x94>)
 800a6be:	f7f8 f8d1 	bl	8002864 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	20005100 	.word	0x20005100

0800a6d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7f7 f8a4 	bl	8001834 <HAL_PCD_Start>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f0:	7bfb      	ldrb	r3, [r7, #15]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 f97e 	bl	800a9f4 <USBD_Get_USB_Status>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b084      	sub	sp, #16
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	4608      	mov	r0, r1
 800a710:	4611      	mov	r1, r2
 800a712:	461a      	mov	r2, r3
 800a714:	4603      	mov	r3, r0
 800a716:	70fb      	strb	r3, [r7, #3]
 800a718:	460b      	mov	r3, r1
 800a71a:	70bb      	strb	r3, [r7, #2]
 800a71c:	4613      	mov	r3, r2
 800a71e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a72e:	78bb      	ldrb	r3, [r7, #2]
 800a730:	883a      	ldrh	r2, [r7, #0]
 800a732:	78f9      	ldrb	r1, [r7, #3]
 800a734:	f7f7 fcb5 	bl	80020a2 <HAL_PCD_EP_Open>
 800a738:	4603      	mov	r3, r0
 800a73a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 f958 	bl	800a9f4 <USBD_Get_USB_Status>
 800a744:	4603      	mov	r3, r0
 800a746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a748:	7bbb      	ldrb	r3, [r7, #14]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	460b      	mov	r3, r1
 800a75c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a76c:	78fa      	ldrb	r2, [r7, #3]
 800a76e:	4611      	mov	r1, r2
 800a770:	4618      	mov	r0, r3
 800a772:	f7f7 fcfe 	bl	8002172 <HAL_PCD_EP_Close>
 800a776:	4603      	mov	r3, r0
 800a778:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 f939 	bl	800a9f4 <USBD_Get_USB_Status>
 800a782:	4603      	mov	r3, r0
 800a784:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a786:	7bbb      	ldrb	r3, [r7, #14]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a79c:	2300      	movs	r3, #0
 800a79e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7aa:	78fa      	ldrb	r2, [r7, #3]
 800a7ac:	4611      	mov	r1, r2
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7f7 fdbe 	bl	8002330 <HAL_PCD_EP_SetStall>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 f91a 	bl	800a9f4 <USBD_Get_USB_Status>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7e8:	78fa      	ldrb	r2, [r7, #3]
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7f7 fe03 	bl	80023f8 <HAL_PCD_EP_ClrStall>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7f6:	7bfb      	ldrb	r3, [r7, #15]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 f8fb 	bl	800a9f4 <USBD_Get_USB_Status>
 800a7fe:	4603      	mov	r3, r0
 800a800:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a802:	7bbb      	ldrb	r3, [r7, #14]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a81e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a824:	2b00      	cmp	r3, #0
 800a826:	da0b      	bge.n	800a840 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a828:	78fb      	ldrb	r3, [r7, #3]
 800a82a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a82e:	68f9      	ldr	r1, [r7, #12]
 800a830:	4613      	mov	r3, r2
 800a832:	00db      	lsls	r3, r3, #3
 800a834:	1a9b      	subs	r3, r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	440b      	add	r3, r1
 800a83a:	333e      	adds	r3, #62	; 0x3e
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	e00b      	b.n	800a858 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a846:	68f9      	ldr	r1, [r7, #12]
 800a848:	4613      	mov	r3, r2
 800a84a:	00db      	lsls	r3, r3, #3
 800a84c:	1a9b      	subs	r3, r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	440b      	add	r3, r1
 800a852:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a856:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a870:	2300      	movs	r3, #0
 800a872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a874:	2300      	movs	r3, #0
 800a876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a87e:	78fa      	ldrb	r2, [r7, #3]
 800a880:	4611      	mov	r1, r2
 800a882:	4618      	mov	r0, r3
 800a884:	f7f7 fbe8 	bl	8002058 <HAL_PCD_SetAddress>
 800a888:	4603      	mov	r3, r0
 800a88a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 f8b0 	bl	800a9f4 <USBD_Get_USB_Status>
 800a894:	4603      	mov	r3, r0
 800a896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a898:	7bbb      	ldrb	r3, [r7, #14]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b086      	sub	sp, #24
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	603b      	str	r3, [r7, #0]
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a8c0:	7af9      	ldrb	r1, [r7, #11]
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	f7f7 fce9 	bl	800229c <HAL_PCD_EP_Transmit>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ce:	7dfb      	ldrb	r3, [r7, #23]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 f88f 	bl	800a9f4 <USBD_Get_USB_Status>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8da:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	607a      	str	r2, [r7, #4]
 800a8ee:	603b      	str	r3, [r7, #0]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a902:	7af9      	ldrb	r1, [r7, #11]
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	f7f7 fc7d 	bl	8002206 <HAL_PCD_EP_Receive>
 800a90c:	4603      	mov	r3, r0
 800a90e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a910:	7dfb      	ldrb	r3, [r7, #23]
 800a912:	4618      	mov	r0, r3
 800a914:	f000 f86e 	bl	800a9f4 <USBD_Get_USB_Status>
 800a918:	4603      	mov	r3, r0
 800a91a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a91c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3718      	adds	r7, #24
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
	...

0800a928 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a934:	78fb      	ldrb	r3, [r7, #3]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d002      	beq.n	800a940 <HAL_PCDEx_LPM_Callback+0x18>
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d01f      	beq.n	800a97e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a93e:	e03b      	b.n	800a9b8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d007      	beq.n	800a958 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a948:	f7f5 fe40 	bl	80005cc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a94c:	4b1c      	ldr	r3, [pc, #112]	; (800a9c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	4a1b      	ldr	r2, [pc, #108]	; (800a9c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800a952:	f023 0306 	bic.w	r3, r3, #6
 800a956:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	6812      	ldr	r2, [r2, #0]
 800a966:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a96a:	f023 0301 	bic.w	r3, r3, #1
 800a96e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a976:	4618      	mov	r0, r3
 800a978:	f7fb ff2c 	bl	80067d4 <USBD_LL_Resume>
    break;
 800a97c:	e01c      	b.n	800a9b8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	6812      	ldr	r2, [r2, #0]
 800a98c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a990:	f043 0301 	orr.w	r3, r3, #1
 800a994:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fb ff03 	bl	80067a8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d005      	beq.n	800a9b6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9aa:	4b05      	ldr	r3, [pc, #20]	; (800a9c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	4a04      	ldr	r2, [pc, #16]	; (800a9c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800a9b0:	f043 0306 	orr.w	r3, r3, #6
 800a9b4:	6113      	str	r3, [r2, #16]
    break;
 800a9b6:	bf00      	nop
}
 800a9b8:	bf00      	nop
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	e000ed00 	.word	0xe000ed00

0800a9c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a9cc:	4b03      	ldr	r3, [pc, #12]	; (800a9dc <USBD_static_malloc+0x18>)
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	20005508 	.word	0x20005508

0800a9e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]

}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa02:	79fb      	ldrb	r3, [r7, #7]
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d817      	bhi.n	800aa38 <USBD_Get_USB_Status+0x44>
 800aa08:	a201      	add	r2, pc, #4	; (adr r2, 800aa10 <USBD_Get_USB_Status+0x1c>)
 800aa0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0e:	bf00      	nop
 800aa10:	0800aa21 	.word	0x0800aa21
 800aa14:	0800aa27 	.word	0x0800aa27
 800aa18:	0800aa2d 	.word	0x0800aa2d
 800aa1c:	0800aa33 	.word	0x0800aa33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]
    break;
 800aa24:	e00b      	b.n	800aa3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa26:	2303      	movs	r3, #3
 800aa28:	73fb      	strb	r3, [r7, #15]
    break;
 800aa2a:	e008      	b.n	800aa3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa30:	e005      	b.n	800aa3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa32:	2303      	movs	r3, #3
 800aa34:	73fb      	strb	r3, [r7, #15]
    break;
 800aa36:	e002      	b.n	800aa3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa3c:	bf00      	nop
  }
  return usb_status;
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3714      	adds	r7, #20
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <__libc_init_array>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	4d0d      	ldr	r5, [pc, #52]	; (800aa84 <__libc_init_array+0x38>)
 800aa50:	4c0d      	ldr	r4, [pc, #52]	; (800aa88 <__libc_init_array+0x3c>)
 800aa52:	1b64      	subs	r4, r4, r5
 800aa54:	10a4      	asrs	r4, r4, #2
 800aa56:	2600      	movs	r6, #0
 800aa58:	42a6      	cmp	r6, r4
 800aa5a:	d109      	bne.n	800aa70 <__libc_init_array+0x24>
 800aa5c:	4d0b      	ldr	r5, [pc, #44]	; (800aa8c <__libc_init_array+0x40>)
 800aa5e:	4c0c      	ldr	r4, [pc, #48]	; (800aa90 <__libc_init_array+0x44>)
 800aa60:	f000 f82e 	bl	800aac0 <_init>
 800aa64:	1b64      	subs	r4, r4, r5
 800aa66:	10a4      	asrs	r4, r4, #2
 800aa68:	2600      	movs	r6, #0
 800aa6a:	42a6      	cmp	r6, r4
 800aa6c:	d105      	bne.n	800aa7a <__libc_init_array+0x2e>
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}
 800aa70:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa74:	4798      	blx	r3
 800aa76:	3601      	adds	r6, #1
 800aa78:	e7ee      	b.n	800aa58 <__libc_init_array+0xc>
 800aa7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa7e:	4798      	blx	r3
 800aa80:	3601      	adds	r6, #1
 800aa82:	e7f2      	b.n	800aa6a <__libc_init_array+0x1e>
 800aa84:	0800ac44 	.word	0x0800ac44
 800aa88:	0800ac44 	.word	0x0800ac44
 800aa8c:	0800ac44 	.word	0x0800ac44
 800aa90:	0800ac48 	.word	0x0800ac48

0800aa94 <memcpy>:
 800aa94:	440a      	add	r2, r1
 800aa96:	4291      	cmp	r1, r2
 800aa98:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa9c:	d100      	bne.n	800aaa0 <memcpy+0xc>
 800aa9e:	4770      	bx	lr
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaaa:	4291      	cmp	r1, r2
 800aaac:	d1f9      	bne.n	800aaa2 <memcpy+0xe>
 800aaae:	bd10      	pop	{r4, pc}

0800aab0 <memset>:
 800aab0:	4402      	add	r2, r0
 800aab2:	4603      	mov	r3, r0
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d100      	bne.n	800aaba <memset+0xa>
 800aab8:	4770      	bx	lr
 800aaba:	f803 1b01 	strb.w	r1, [r3], #1
 800aabe:	e7f9      	b.n	800aab4 <memset+0x4>

0800aac0 <_init>:
 800aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac2:	bf00      	nop
 800aac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac6:	bc08      	pop	{r3}
 800aac8:	469e      	mov	lr, r3
 800aaca:	4770      	bx	lr

0800aacc <_fini>:
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aace:	bf00      	nop
 800aad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad2:	bc08      	pop	{r3}
 800aad4:	469e      	mov	lr, r3
 800aad6:	4770      	bx	lr
